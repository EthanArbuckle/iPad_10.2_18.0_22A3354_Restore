void re::DynamicArray<re::DeformationDefinition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  re::StringID *v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 40 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = (re::StringID *)(v10 + v8);
      v12 = *(_QWORD *)(v10 + v8 + 16);
      if (v12)
      {
        if (*((_QWORD *)v11 + 3))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v10 + v8 + 32));
          *((_QWORD *)v11 + 3) = 0;
          *((_QWORD *)v11 + 4) = 0;
        }
        *((_QWORD *)v11 + 2) = 0;
      }
      re::StringID::destroyString(v11);
      ++v9;
      v8 += 40;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::DeformationDefinition>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 40 * v4;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0;
        v7[1] = &str_110;
        v7[3] = 0;
        v7[4] = 0;
        v7[2] = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::DeformationDefinition>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::DeformationDefinition>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::DeformationDefinition>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::DeformationDefinition>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::DeformationDefinition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 40 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

re::RenderManager *re::RenderManager::RenderManager(re::RenderManager *this)
{
  char *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  re::TargetDisplayInfoProvider *v6;

  *(_BYTE *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &str_110;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 1;
  *((_WORD *)this + 90) = 0;
  *((_QWORD *)this + 23) = 0;
  v2 = (char *)this + 184;
  v3 = re::globalAllocators(this);
  *((_QWORD *)this + 27) = v3[2];
  *((_QWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 232) = xmmword_2260F4F10;
  *((_QWORD *)this + 31) = 0x101010101010101;
  *((_QWORD *)this + 32) = 0x101010101010101;
  *((_DWORD *)this + 66) = 257;
  *((_BYTE *)this + 268) = 1;
  *(_DWORD *)(v2 + 85) = 0;
  *(_WORD *)(v2 + 89) = 1;
  *((_BYTE *)this + 275) = 0;
  *((_WORD *)this + 140) = 257;
  *((_BYTE *)this + 282) = 1;
  *((_DWORD *)this + 74) = 1;
  *((_WORD *)this + 154) = 0;
  *(_QWORD *)((char *)this + 300) = 0;
  *((_BYTE *)this + 312) = 0;
  if ((v4 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      re::introspect<re::TriangleFillModeData>(void)::info = (_UNKNOWN *)re::introspect_TriangleFillModeData(0);
    }
  }
  v5 = re::globalAllocators((re *)v3);
  v6 = (re::TargetDisplayInfoProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 1328, 16);
  *((_QWORD *)this + 36) = re::TargetDisplayInfoProvider::TargetDisplayInfoProvider(v6);
  return this;
}

void re::RenderManager::~RenderManager(re::RenderManager *this)
{
  re::internal::destroyPersistent<re::TargetDisplayInfoProvider>((re *)"~RenderManager", 79, *((re::TargetDisplayInfoProvider **)this + 36));
  *((_QWORD *)this + 36) = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 192);

  re::StringID::destroyString((re::RenderManager *)((char *)this + 8));
}

re *re::internal::destroyPersistent<re::TargetDisplayInfoProvider>(re *result, uint64_t a2, re::TargetDisplayInfoProvider *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::TargetDisplayInfoProvider::~TargetDisplayInfoProvider(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::TargetDisplayInfoProvider *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::RenderManager::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::ProfilerManager *a5, re::ColorManager *a6, uint64_t a7, uint64_t a8, char a9)
{
  uint8_t *v16;
  __int128 v17;
  __int128 v18;
  id v19;
  id v20;
  id v21;
  unsigned __int8 v22;
  void *v23;
  int v24;
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _anonymous_namespace_ *v37;
  uint64_t *v38;
  uint64_t v39;
  re *v40;
  uint64_t *v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  re *v49;
  uint64_t *v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t *v53;
  re::ShaderManager *v54;
  re::ShaderManager *v55;
  _BOOL8 v56;
  uint64_t *v57;
  uint64_t v58;
  _BOOL8 v59;
  const char *v60;
  uint64_t *v61;
  uint64_t v62;
  _anonymous_namespace_ *v63;
  re *v64;
  re::ColorManager *v65;
  NSObject *v66;
  _BOOL8 v67;
  uint64_t *v68;
  uint64_t v69;
  NSObject *v70;
  re *v71;
  uint64_t *v72;
  re::DrawingManager *v73;
  re::DrawingManager *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _BYTE *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  re *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  re *v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _BYTE *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  re *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  uint8_t *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _BYTE *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  re *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint8_t *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _BYTE *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  re *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint8_t *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _BYTE *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  re *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint8_t *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  _BYTE *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 *v174;
  uint64_t v175;
  re *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  _QWORD *v180;
  uint64_t v181;
  uint8_t *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _BYTE *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 *v191;
  uint64_t v192;
  re *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  _QWORD *v197;
  uint64_t v198;
  uint8_t *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _BYTE *v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  re *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  _QWORD *v214;
  uint64_t v215;
  uint8_t *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _BYTE *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  re *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint8_t *v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  _BYTE *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  re *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  re *v250;
  uint64_t v251;
  uint8_t *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _BYTE *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  __int128 *v261;
  uint64_t v262;
  re *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  re *v267;
  uint64_t v268;
  uint8_t *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _BYTE *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  re *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  _anonymous_namespace_ *v284;
  re *v285;
  uint64_t v286;
  uint8_t *v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  _BYTE *v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  __int128 *v296;
  uint64_t v297;
  re *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  re *v302;
  uint64_t v303;
  uint8_t *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _BYTE *v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  re *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  uint8_t *v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  _BYTE *v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  re *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint8_t *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  _BYTE *v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  re *v349;
  uint64_t v350;
  uint64_t *v351;
  _QWORD *v352;
  __int128 *v353;
  __int128 v354;
  __int128 v355;
  re *v356;
  uint64_t *v357;
  uint64_t v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  re *v364;
  uint64_t *v365;
  uint64_t v366;
  re *v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  re::ShadowRenderManager *v373;
  const char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  re::VFXManager *v386;
  size_t v387;
  uint64_t v388;
  uint64_t v389[3];
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392[3];
  uint64_t *v393;
  __int128 v394[2];
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398[2];
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402[2];
  __int128 v403;
  uint64_t v404[3];
  uint64_t *v405;
  __int128 v406[2];
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410[2];
  __int128 *v411;
  uint64_t v412;
  _QWORD v413[3];
  _QWORD *v414;
  uint64_t v415;
  _QWORD v416[3];
  _QWORD *v417;
  _QWORD *v418;
  _QWORD v419[3];
  _QWORD *v420;
  uint64_t v421;
  _QWORD v422[3];
  _QWORD *v423;
  _QWORD v424[3];
  re *v425;
  uint64_t v426;
  _QWORD v427[3];
  _QWORD *v428;
  _BYTE v429[24];
  uint64_t v430;
  _BYTE *v431;
  StringID v432[2];
  _QWORD *v433;
  uint8_t buf[8];
  uint64_t v435;
  uint8_t *v436;
  uint64_t v437;

  v437 = *MEMORY[0x24BDAC8D0];
  v16 = (uint8_t *)(a1 + 184);
  re::ObjCObject::operator=((id *)(a1 + 184), (id *)a3);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 192, a3 + 8);
  v17 = *(_OWORD *)(a3 + 76);
  v18 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 248) = v18;
  *(_OWORD *)(v16 + 76) = v17;
  *(_BYTE *)(a1 + 181) = a9;
  v19 = *(id *)(a1 + 184);
  if (!v19)
  {
    re::mtl::makeDefaultDevice(buf);
    if (v16 != buf)
    {
      v20 = *(id *)buf;
      *(_QWORD *)buf = 0;
      v21 = *(id *)v16;
      *(_QWORD *)v16 = v20;

    }
    v19 = *(id *)v16;
  }
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a1 + 252);
  *(_WORD *)(a1 + 281) = *(_WORD *)(a1 + 253);
  if (!v19)
    return 0;
  v22 = atomic_load((unsigned __int8 *)&qword_25411A698);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_25411A698))
  {
    re::Defaults::intValue((re::Defaults *)"compilerProcessCount", v374, (uint64_t)&_MergedGlobals_397);
    __cxa_guard_release(&qword_25411A698);
  }
  if (_MergedGlobals_397)
    objc_msgSend(*(id *)v16, "setCompilerProcessesCount:", dword_25411A694);
  v23 = *(void **)(a1 + 184);
  *(_BYTE *)(a1 + 180) = v23 != 0;
  v24 = 16;
  if ((objc_msgSend(v23, "supportsFamily:", 1005) & 1) == 0)
  {
    if (objc_msgSend(*(id *)v16, "supportsFamily:", 2002))
      v24 = 16;
    else
      v24 = 1;
  }
  *(_DWORD *)(a1 + 296) = v24;
  *(_BYTE *)(a1 + 300) = objc_msgSend(*(id *)(a1 + 184), "supportsRasterizationRateMapWithLayerCount:", 2);
  *(_BYTE *)(a1 + 301) = re::mtl::Device::areProgrammableSamplePositionsSupported((id *)v16);
  *(_BYTE *)(a1 + 302) = objc_msgSend(*(id *)(a1 + 184), "supportsVertexAmplificationCount:", 2);
  *(_BYTE *)(a1 + 303) = objc_msgSend(*(id *)(a1 + 184), "supportsFamily:", 1004);
  *(_BYTE *)(a1 + 304) = objc_msgSend(*(id *)(a1 + 184), "supportsLayeredRendering");
  *(_BYTE *)(a1 + 305) = objc_msgSend(*(id *)(a1 + 184), "supportsFamily:", 1004);
  if ((objc_msgSend(*(id *)(a1 + 184), "supportsFamily:", 1007) & 1) != 0)
    v25 = 1;
  else
    v25 = objc_msgSend(*(id *)v16, "supportsFamily:", 2002);
  *(_BYTE *)(a1 + 306) = v25;
  *(_BYTE *)(a1 + 307) = objc_msgSend(*(id *)(a1 + 184), "supportsFamily:", 1002);
  *(_BYTE *)(a1 + 308) = objc_msgSend(*(id *)(a1 + 184), "supportsSeparateDepthStencil");
  if ((objc_msgSend(*(id *)(a1 + 184), "supportsFamily:", 1004) & 1) != 0)
    v28 = 1;
  else
    v28 = objc_msgSend(*(id *)v16, "supportsFamily:", 2002);
  *(_BYTE *)(a1 + 309) = v28;
  if (*(_QWORD *)(a1 + 24))
  {
    re::internal::assertLog((re::internal *)4, v27, "assertion failure: '%s' (%s:line %i) Material manager is not null before init.", "m_materialManager == nullptr", "init", 157);
    _os_crash();
    __break(1u);
    goto LABEL_717;
  }
  v29 = re::globalAllocators((re *)v28);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29[2] + 32))(v29[2], 1240, 8);
  bzero((void *)v30, 0x4D8uLL);
  *(_DWORD *)(v30 + 36) = 0x7FFFFFFF;
  *(_OWORD *)(v30 + 48) = 0u;
  *(_OWORD *)(v30 + 64) = 0u;
  *(_QWORD *)(v30 + 80) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_QWORD *)(v30 + 128) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v30 + 144) = 0u;
  *(_OWORD *)(v30 + 160) = 0u;
  *(_QWORD *)(v30 + 176) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v30 + 192) = 0u;
  *(_OWORD *)(v30 + 208) = 0u;
  *(_QWORD *)(v30 + 224) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v30 + 240) = 0u;
  *(_OWORD *)(v30 + 256) = 0u;
  *(_QWORD *)(v30 + 272) = 0x7FFFFFFF00000000;
  *(_DWORD *)(v30 + 320) = 0;
  *(_OWORD *)(v30 + 288) = 0u;
  *(_OWORD *)(v30 + 304) = 0u;
  *(_DWORD *)(v30 + 324) = 0x7FFFFFFF;
  *(_OWORD *)(v30 + 412) = 0u;
  *(_OWORD *)(v30 + 384) = 0u;
  *(_OWORD *)(v30 + 400) = 0u;
  *(_OWORD *)(v30 + 352) = 0u;
  *(_OWORD *)(v30 + 368) = 0u;
  *(_OWORD *)(v30 + 336) = 0u;
  *(_OWORD *)(v30 + 460) = 0u;
  *(_OWORD *)(v30 + 432) = 0u;
  *(_OWORD *)(v30 + 448) = 0u;
  *(_DWORD *)(v30 + 476) = 0x7FFFFFFF;
  *(_DWORD *)(v30 + 488) = 0;
  *(_OWORD *)(v30 + 496) = 0u;
  *(_OWORD *)(v30 + 512) = 0u;
  *(_QWORD *)(v30 + 528) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v30 + 544) = 0u;
  *(_OWORD *)(v30 + 560) = 0u;
  *(_DWORD *)(v30 + 576) = 0;
  *(_DWORD *)(v30 + 580) = 0x7FFFFFFF;
  *(_DWORD *)(v30 + 624) = 0;
  *(_OWORD *)(v30 + 592) = 0u;
  *(_OWORD *)(v30 + 608) = 0u;
  *(_DWORD *)(v30 + 628) = 0x7FFFFFFF;
  *(_QWORD *)(v30 + 936) = 0;
  *(_OWORD *)(v30 + 684) = 0u;
  *(_OWORD *)(v30 + 656) = 0u;
  *(_OWORD *)(v30 + 672) = 0u;
  *(_OWORD *)(v30 + 640) = 0u;
  *(_DWORD *)(v30 + 928) = 0;
  *(_OWORD *)(v30 + 896) = 0u;
  *(_OWORD *)(v30 + 912) = 0u;
  *(_OWORD *)(v30 + 864) = 0u;
  *(_OWORD *)(v30 + 880) = 0u;
  *(_OWORD *)(v30 + 832) = 0u;
  *(_OWORD *)(v30 + 848) = 0u;
  *(_OWORD *)(v30 + 800) = 0u;
  *(_OWORD *)(v30 + 816) = 0u;
  *(_OWORD *)(v30 + 768) = 0u;
  *(_OWORD *)(v30 + 784) = 0u;
  *(_OWORD *)(v30 + 736) = 0u;
  *(_OWORD *)(v30 + 752) = 0u;
  *(_OWORD *)(v30 + 704) = 0u;
  *(_OWORD *)(v30 + 720) = 0u;
  *(_DWORD *)(v30 + 1064) = 0;
  *(_OWORD *)(v30 + 1032) = 0u;
  *(_OWORD *)(v30 + 1048) = 0u;
  *(_OWORD *)(v30 + 1000) = 0u;
  *(_OWORD *)(v30 + 1016) = 0u;
  *(_OWORD *)(v30 + 968) = 0u;
  *(_OWORD *)(v30 + 984) = 0u;
  *(_DWORD *)(v30 + 1068) = 0x7FFFFFFF;
  *(_DWORD *)(v30 + 1104) = 0;
  *(_QWORD *)(v30 + 1096) = 0;
  *(_OWORD *)(v30 + 1080) = 0u;
  *(_QWORD *)(v30 + 1120) = 0;
  *(_QWORD *)(v30 + 1112) = 0;
  *(_DWORD *)(v30 + 1128) = 0;
  *(_QWORD *)(v30 + 1132) = 0x1FFFFFFFFLL;
  *(_DWORD *)(v30 + 1176) = 0;
  *(_OWORD *)(v30 + 1144) = 0u;
  *(_OWORD *)(v30 + 1160) = 0u;
  *(_DWORD *)(v30 + 1180) = 0x7FFFFFFF;
  *(_DWORD *)(v30 + 1224) = 0;
  *(_OWORD *)(v30 + 1192) = 0u;
  *(_OWORD *)(v30 + 1208) = 0u;
  *(_DWORD *)(v30 + 1228) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 24) = v30;
  v37 = re::MaterialManager::init((re::MaterialManager *)v30, (re::RenderManager *)a1, v31, v32, v33, v34, v35, v36, v375, v376, v377, v378, v379, v380, v381, v382, a2, v384, a7,
          v387,
          v388,
          v389[0],
          v389[1],
          v389[2],
          (uint64_t)v390,
          v391,
          v392[0],
          v392[1],
          v392[2],
          (uint64_t)v393,
          v394[0],
          v394[1],
          v395,
          v396,
          v397,
          v398[0],
          v398[1],
          v399,
          v400,
          v401,
          v402[0],
          v402[1],
          v403,
          v404[0],
          v404[1],
          v404[2],
          (uint64_t)v405,
          v406[0],
          v406[1],
          v407,
          v408,
          v409,
          v410[0]);
  v38 = re::globalAllocators(v37);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[2] + 32))(v38[2], 192, 8);
  *(_OWORD *)(v39 + 64) = 0u;
  *(_OWORD *)(v39 + 80) = 0u;
  *(_OWORD *)(v39 + 96) = 0u;
  *(_OWORD *)(v39 + 112) = 0u;
  *(_OWORD *)v39 = 0u;
  *(_OWORD *)(v39 + 16) = 0u;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_OWORD *)(v39 + 128) = 0u;
  *(_OWORD *)(v39 + 144) = 0u;
  *(_OWORD *)(v39 + 160) = 0u;
  *(_QWORD *)(v39 + 60) = 0x1FFFFFFFFLL;
  *(_QWORD *)(v39 + 72) = 0;
  *(_QWORD *)(v39 + 80) = 0;
  *(_QWORD *)(v39 + 88) = 0;
  *(_DWORD *)(v39 + 96) = 0;
  *(_DWORD *)(v39 + 120) = 0;
  *(_QWORD *)(v39 + 104) = 0;
  *(_QWORD *)(v39 + 112) = 0;
  *(_QWORD *)(v39 + 124) = 0x1FFFFFFFFLL;
  *(_OWORD *)(v39 + 152) = 0u;
  *(_OWORD *)(v39 + 136) = 0u;
  *(_DWORD *)(v39 + 168) = 0;
  *(_DWORD *)(v39 + 172) = 0x7FFFFFFF;
  *(_QWORD *)(v39 + 176) = 0;
  *(_QWORD *)(v39 + 184) = 0;
  *(_QWORD *)(a1 + 32) = v39;
  re::MeshManager::init((re::MeshManager *)v39, (id *)a1, 256, 256);
  v41 = re::globalAllocators(v40);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41[2] + 32))(v41[2], 1480, 8);
  v43 = (_OWORD *)(v42 + 528);
  bzero((void *)v42, 0x5C8uLL);
  v44 = 16;
  do
  {
    v45 = v42 + v44;
    *(_QWORD *)(v45 + 8) = 0;
    *(_QWORD *)(v45 + 16) = 0;
    *(_QWORD *)v45 = 0xFFFFFFFFFFFFFFFLL;
    *(_DWORD *)(v45 + 24) = 1;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 32) = 0;
    v44 += 64;
    *(_DWORD *)(v45 + 56) = 0;
  }
  while ((_OWORD *)(v45 + 64) != v43);
  *(_QWORD *)(v42 + 544) = 0;
  *v43 = 0u;
  *(_DWORD *)(v42 + 552) = 1;
  *(_QWORD *)(v42 + 560) = 0;
  *(_DWORD *)(v42 + 584) = 0;
  *(_OWORD *)(v42 + 568) = 0u;
  *(_OWORD *)(v42 + 592) = 0u;
  *(_DWORD *)(v42 + 608) = 1;
  *(_QWORD *)(v42 + 616) = 0;
  *(_QWORD *)(v42 + 632) = 0;
  *(_QWORD *)(v42 + 624) = 0;
  v46 = (_OWORD *)(v42 + 1368);
  v47 = 648;
  *(_DWORD *)(v42 + 640) = 0;
  do
  {
    v48 = (_QWORD *)(v42 + v47);
    *v48 = 0;
    v48[4] = 0;
    v47 += 40;
  }
  while (v48 + 5 != (_QWORD *)v46);
  *(_DWORD *)(v42 + 1400) = 0;
  *v46 = 0u;
  *(_OWORD *)(v42 + 1384) = 0u;
  *(_QWORD *)(v42 + 1404) = 0x7FFFFFFFLL;
  *(_QWORD *)(v42 + 1416) = 0;
  *(_QWORD *)(v42 + 1432) = 0;
  *(_QWORD *)(v42 + 1424) = 0;
  *(_DWORD *)(v42 + 1440) = 0;
  *(_QWORD *)(v42 + 1456) = 0;
  *(_QWORD *)(v42 + 1448) = 0;
  *(_DWORD *)(v42 + 1464) = 0;
  *(_QWORD *)(v42 + 1468) = 0x1FFFFFFFFLL;
  *(_QWORD *)(a1 + 40) = v42;
  re::DeformationManager::init((re::DeformationManager *)v42, (re::RenderManager *)a1);
  v50 = re::globalAllocators(v49);
  v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50[2] + 32))(v50[2], 160, 8);
  *(_QWORD *)(v51 + 144) = 0;
  *(_QWORD *)(v51 + 152) = 0;
  *(_QWORD *)(v51 + 136) = 0;
  *(_OWORD *)(v51 + 40) = 0u;
  *(_OWORD *)(v51 + 56) = 0u;
  *(_OWORD *)(v51 + 72) = 0u;
  *(_OWORD *)(v51 + 88) = 0u;
  *(_OWORD *)(v51 + 104) = 0u;
  *(_QWORD *)(v51 + 120) = 0;
  *(_OWORD *)v51 = 0u;
  *(_OWORD *)(v51 + 16) = 0u;
  *(_DWORD *)(v51 + 32) = 0;
  *(_QWORD *)(a1 + 48) = v51;
  v52 = re::SamplerManager::init((id *)v51, (id *)a1);
  v53 = re::globalAllocators((re *)v52);
  v54 = (re::ShaderManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53[2] + 32))(v53[2], 904, 8);
  v55 = re::ShaderManager::ShaderManager(v54);
  *(_QWORD *)(a1 + 56) = v55;
  v56 = re::ShaderManager::init(v55, (id *)a1);
  v57 = re::globalAllocators((re *)v56);
  v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57[2] + 32))(v57[2], 480, 8);
  *(_OWORD *)(v58 + 248) = 0u;
  *(_DWORD *)(v58 + 296) = 0;
  *(_OWORD *)(v58 + 232) = 0u;
  *(_OWORD *)(v58 + 264) = 0u;
  *(_OWORD *)(v58 + 280) = 0u;
  *(_OWORD *)v58 = 0u;
  *(_OWORD *)(v58 + 16) = 0u;
  *(_OWORD *)(v58 + 32) = 0u;
  *(_OWORD *)(v58 + 48) = 0u;
  *(_OWORD *)(v58 + 64) = 0u;
  *(_OWORD *)(v58 + 80) = 0u;
  *(_OWORD *)(v58 + 96) = 0u;
  *(_OWORD *)(v58 + 112) = 0u;
  *(_OWORD *)(v58 + 128) = 0u;
  *(_OWORD *)(v58 + 144) = 0u;
  *(_OWORD *)(v58 + 160) = 0u;
  *(_OWORD *)(v58 + 176) = 0u;
  *(_OWORD *)(v58 + 192) = 0u;
  *(_OWORD *)(v58 + 208) = 0u;
  *(_QWORD *)(v58 + 300) = 0x7FFFFFFFLL;
  *(_DWORD *)(v58 + 312) = 0;
  *(_QWORD *)(v58 + 328) = 0;
  *(_QWORD *)(v58 + 336) = 0;
  *(_DWORD *)(v58 + 344) = 0;
  *(_QWORD *)(v58 + 320) = 0;
  *(_DWORD *)(v58 + 368) = 0;
  *(_QWORD *)(v58 + 352) = 0;
  *(_QWORD *)(v58 + 360) = 0;
  *(_QWORD *)(v58 + 372) = 0x1FFFFFFFFLL;
  *(_DWORD *)(v58 + 384) = 0;
  *(_QWORD *)(v58 + 424) = 0;
  *(_QWORD *)(v58 + 400) = 0;
  *(_QWORD *)(v58 + 408) = 0;
  *(_DWORD *)(v58 + 416) = 0;
  *(_QWORD *)(v58 + 392) = 0;
  *(_DWORD *)(v58 + 432) = 0;
  *(_QWORD *)(v58 + 472) = 0;
  *(_QWORD *)(v58 + 440) = 0;
  *(_QWORD *)(v58 + 448) = 0;
  *(_DWORD *)(v58 + 464) = 0;
  *(_QWORD *)(v58 + 456) = 0;
  *(_QWORD *)(a1 + 64) = v58;
  v59 = re::TextureManager::init((id *)v58, (id *)a1);
  if (*(_BYTE *)(a1 + 248))
  {
    v61 = re::globalAllocators((re *)v59);
    v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61[2] + 32))(v61[2], 256, 8);
    *(_OWORD *)(v62 + 64) = 0u;
    *(_OWORD *)(v62 + 80) = 0u;
    *(_OWORD *)(v62 + 32) = 0u;
    *(_OWORD *)(v62 + 48) = 0u;
    *(_OWORD *)v62 = 0u;
    *(_OWORD *)(v62 + 16) = 0u;
    *(_OWORD *)(v62 + 96) = 0u;
    *(_OWORD *)(v62 + 112) = 0u;
    *(_OWORD *)(v62 + 128) = 0u;
    *(_OWORD *)(v62 + 144) = 0u;
    *(_OWORD *)(v62 + 160) = 0u;
    *(_OWORD *)(v62 + 176) = 0u;
    *(_OWORD *)(v62 + 192) = 0u;
    *(_OWORD *)(v62 + 208) = 0u;
    *(_OWORD *)(v62 + 224) = 0u;
    *(_OWORD *)(v62 + 240) = 0u;
    *(_DWORD *)(v62 + 44) = 0x7FFFFFFF;
    *(_OWORD *)(v62 + 72) = 0u;
    *(_OWORD *)(v62 + 56) = 0u;
    *(_DWORD *)(v62 + 88) = 0;
    *(_DWORD *)(v62 + 92) = 0x7FFFFFFF;
    *(_QWORD *)(v62 + 104) = 0;
    v63 = re::Allocator::Allocator((re::Allocator *)(v62 + 120), "TextManager LinearAllocator", 1);
    *(_QWORD *)(v62 + 120) = &off_24ED74EA0;
    *(_OWORD *)(v62 + 208) = 0u;
    *(_OWORD *)(v62 + 224) = 0u;
    *(_DWORD *)(v62 + 240) = 0;
    *(_OWORD *)(v62 + 144) = 0u;
    *(_OWORD *)(v62 + 160) = 0u;
    *(_OWORD *)(v62 + 176) = 0u;
    *(_OWORD *)(v62 + 188) = 0u;
    *(_QWORD *)(v62 + 244) = 0x7FFFFFFFLL;
    *(_QWORD *)(a1 + 72) = v62;
    *(_QWORD *)(v62 + 160) = 0;
    *(_QWORD *)(v62 + 168) = 1024;
    *(_QWORD *)(v62 + 144) = 0;
    *(_QWORD *)(v62 + 152) = 0;
    *(_QWORD *)(v62 + 184) = 0;
    *(_QWORD *)(v62 + 192) = 0;
    *(_QWORD *)v62 = a1;
    *(_BYTE *)(v62 + 112) = 1;
  }
  *(_QWORD *)(a1 + 96) = a8;
  re::Defaults::intValue((re::Defaults *)"graphics.enableDebugSettingsManager", v60, (uint64_t)buf);
  if (buf[0] && *(_DWORD *)&buf[4])
  {
    v65 = a6;
    if (!*(_QWORD *)(a1 + 88))
    {
      v66 = *re::graphicsLogObjects(v64);
      v67 = os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
      if (v67)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v66, OS_LOG_TYPE_DEFAULT, "Initializing DebugSettingsManager", buf, 2u);
      }
      v68 = re::globalAllocators((re *)v67);
      v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[2] + 32))(v68[2], 120, 8);
      *(_OWORD *)(v69 + 32) = 0u;
      *(_OWORD *)(v69 + 48) = 0u;
      *(_OWORD *)(v69 + 64) = 0u;
      *(_OWORD *)(v69 + 80) = 0u;
      *(_OWORD *)(v69 + 96) = 0u;
      *(_QWORD *)(v69 + 112) = 0;
      *(_OWORD *)v69 = 0u;
      *(_OWORD *)(v69 + 16) = 0u;
      *(_DWORD *)(v69 + 36) = 0x7FFFFFFF;
      *(_QWORD *)(v69 + 48) = 850045863;
      *(_OWORD *)(v69 + 56) = 0u;
      *(_OWORD *)(v69 + 72) = 0u;
      *(_OWORD *)(v69 + 88) = 0u;
      *(_OWORD *)(v69 + 97) = 0u;
      *(_QWORD *)(a1 + 88) = v69;
      re::DebugSettingsManager::init((re::DebugSettingsManager *)v69);
      re::s_debugSettingsManager = *(_QWORD *)(a1 + 88);
    }
  }
  else
  {
    v70 = *re::graphicsLogObjects(v64);
    v65 = a6;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v70, OS_LOG_TYPE_DEFAULT, "DebugSettingsManager has been disabled and not initialized", buf, 2u);
    }
  }
  *(_QWORD *)(a1 + 136) = v383;
  *(_QWORD *)(a1 + 144) = a4;
  v387 = 8;
  v71 = (re *)sysctlbyname("hw.physicalcpu", (void *)(a1 + 176), &v387, 0, 0);
  if (a9)
  {
    v72 = re::globalAllocators(v71);
    v73 = (re::DrawingManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v72[2] + 32))(v72[2], 1776, 8);
    re::DrawingManager::DrawingManager(v73);
    *(_QWORD *)(a1 + 104) = v74;
    v71 = (re *)re::DrawingManager::init(v74, (re::RenderManager *)a1, a5, v65);
  }
  v75 = *(_QWORD *)(a1 + 40);
  v76 = re::globalAllocators(v71);
  v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v76[2] + 32))(v76[2], 64, 8);
  *(_QWORD *)(v77 + 56) = 0;
  *(_QWORD *)v77 = &off_24ED76AA8;
  *(_OWORD *)(v77 + 24) = 0u;
  *(_OWORD *)(v77 + 8) = 0u;
  *(_OWORD *)(v77 + 40) = 0u;
  *(_WORD *)(v77 + 56) = 0;
  v424[0] = &off_24ED784A0;
  v425 = (re *)v424;
  v428 = v427;
  v426 = v77;
  v427[0] = &off_24ED784A0;
  v78 = re::globalAllocators((re *)v77)[2];
  v435 = v78;
  if (v78)
    v79 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 40, 0);
  else
    v79 = 0;
  *(_QWORD *)v79 = &off_24ED78530;
  if (v428)
  {
    if (v428 == v427)
    {
      *((_QWORD *)v79 + 4) = v79 + 8;
      (*(void (**)(_QWORD *))(*v428 + 24))(v428);
    }
    else
    {
      *((_QWORD *)v79 + 4) = v428;
      v428 = 0;
    }
  }
  else
  {
    *((_QWORD *)v79 + 4) = 0;
  }
  v436 = v79;
  v80 = v426;
  v426 = 0;
  v430 = v78;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v81 = operator new(0x30uLL);
  *v81 = &off_24ED78598;
  v82 = (uint64_t)(v81 + 1);
  v81[4] = v430;
  v81[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v81 + 1));
  v83 = v431;
  if (v81[4] == v430)
  {
    if (v431 != v429)
    {
      v81[5] = v431;
LABEL_58:
      v431 = 0;
      goto LABEL_59;
    }
    v83 = v429;
  }
  else if (!v431)
  {
    goto LABEL_59;
  }
  v84 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v83 + 40))(v83);
  if (v84 >= 0x19)
  {
    v85 = v84;
    v86 = v81[4];
    if (v86)
      v82 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, v85, 0);
    else
      v82 = 0;
  }
  v81[5] = v82;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v82);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_58;
  }
LABEL_59:
  v433 = v81;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v75 + 648), v80);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v75 + 656), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x1954B86F1FEF5A4;
  v432[0].var1 = "Blend Shape";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v75 + 1368, v432, &re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v87 = v426;
  v426 = 0;
  if (v87)
  {
    *(_QWORD *)buf = v87;
    if (!v428)
      goto LABEL_717;
    (*(void (**)(_QWORD *, uint8_t *))(*v428 + 48))(v428, buf);
  }
  v88 = v428;
  if (v428 == v427)
  {
    v89 = 4;
    v88 = v427;
  }
  else
  {
    if (!v428)
      goto LABEL_74;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_74:
  v90 = v425;
  if (v425 == (re *)v424)
  {
    v91 = 4;
    v90 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_79;
    v91 = 5;
  }
  v90 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v90 + 8 * v91))();
LABEL_79:
  v92 = *(_QWORD *)(a1 + 40);
  v93 = re::globalAllocators(v90);
  v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v93[2] + 32))(v93[2], 32792, 8);
  *(_QWORD *)v94 = &off_24ED7B130;
  *(_QWORD *)(v94 + 8) = a1;
  *(_BYTE *)(v94 + 16) = 0;
  bzero((void *)(v94 + 24), 0x8000uLL);
  v424[0] = &off_24ED78628;
  v425 = (re *)v424;
  v423 = v422;
  v421 = v94;
  v422[0] = &off_24ED78628;
  v96 = re::globalAllocators(v95)[2];
  v435 = v96;
  if (v96)
    v97 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, 40, 0);
  else
    v97 = 0;
  *(_QWORD *)v97 = &off_24ED786B8;
  if (v423)
  {
    if (v423 == v422)
    {
      *((_QWORD *)v97 + 4) = v97 + 8;
      (*(void (**)(_QWORD *))(*v423 + 24))(v423);
    }
    else
    {
      *((_QWORD *)v97 + 4) = v423;
      v423 = 0;
    }
  }
  else
  {
    *((_QWORD *)v97 + 4) = 0;
  }
  v436 = v97;
  v98 = v421;
  v421 = 0;
  v430 = v96;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v99 = operator new(0x30uLL);
  *v99 = &off_24ED78720;
  v100 = (uint64_t)(v99 + 1);
  v99[4] = v430;
  v99[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v99 + 1));
  v101 = v431;
  if (v99[4] == v430)
  {
    if (v431 != v429)
    {
      v99[5] = v431;
LABEL_100:
      v431 = 0;
      goto LABEL_101;
    }
    v101 = v429;
  }
  else if (!v431)
  {
    goto LABEL_101;
  }
  v102 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v101 + 40))(v101);
  if (v102 >= 0x19)
  {
    v103 = v102;
    v104 = v99[4];
    if (v104)
      v100 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, v103, 0);
    else
      v100 = 0;
  }
  v99[5] = v100;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v100);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_100;
  }
LABEL_101:
  v433 = v99;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v92 + 728), v98);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v92 + 736), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x4550755B7A2;
  v432[0].var1 = "Skinning";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v92 + 1368, v432, &re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v105 = v421;
  v421 = 0;
  if (v105)
  {
    *(_QWORD *)buf = v105;
    if (!v423)
      goto LABEL_717;
    (*(void (**)(_QWORD *, uint8_t *))(*v423 + 48))(v423, buf);
  }
  v106 = v423;
  if (v423 == v422)
  {
    v107 = 4;
    v106 = v422;
  }
  else
  {
    if (!v423)
      goto LABEL_116;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_116:
  v108 = v425;
  if (v425 == (re *)v424)
  {
    v109 = 4;
    v108 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_121;
    v109 = 5;
  }
  v108 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v108 + 8 * v109))();
LABEL_121:
  v110 = *(_QWORD *)(a1 + 40);
  v111 = re::globalAllocators(v108);
  v112 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v111[2] + 32))(v111[2], 32, 8);
  v112[2] = 0;
  v112[3] = 0;
  *v112 = &off_24ED7AEF0;
  v112[1] = 0;
  *((_WORD *)v112 + 12) = 0;
  v424[0] = &off_24ED787A0;
  v425 = (re *)v424;
  v420 = v419;
  v418 = v112;
  v419[0] = &off_24ED787A0;
  v113 = re::globalAllocators((re *)v112)[2];
  v435 = v113;
  if (v113)
    v114 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 40, 0);
  else
    v114 = 0;
  *(_QWORD *)v114 = &off_24ED78830;
  if (v420)
  {
    if (v420 == v419)
    {
      *((_QWORD *)v114 + 4) = v114 + 8;
      (*(void (**)(_QWORD *))(*v420 + 24))(v420);
    }
    else
    {
      *((_QWORD *)v114 + 4) = v420;
      v420 = 0;
    }
  }
  else
  {
    *((_QWORD *)v114 + 4) = 0;
  }
  v436 = v114;
  v115 = (uint64_t)v418;
  v418 = 0;
  v430 = v113;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v116 = operator new(0x30uLL);
  *v116 = &off_24ED78898;
  v117 = (uint64_t)(v116 + 1);
  v116[4] = v430;
  v116[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v116 + 1));
  v118 = v431;
  if (v116[4] == v430)
  {
    if (v431 != v429)
    {
      v116[5] = v431;
LABEL_142:
      v431 = 0;
      goto LABEL_143;
    }
    v118 = v429;
  }
  else if (!v431)
  {
    goto LABEL_143;
  }
  v119 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v118 + 40))(v118);
  if (v119 >= 0x19)
  {
    v120 = v119;
    v121 = v116[4];
    if (v121)
      v117 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, v120, 0);
    else
      v117 = 0;
  }
  v116[5] = v117;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v117);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_142;
  }
LABEL_143:
  v433 = v116;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v110 + 1088), v115);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v110 + 1096), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x5ADE39698BF7F040;
  v432[0].var1 = "SmoothDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v110 + 1368, v432, "\v");
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v122 = v418;
  v418 = 0;
  if (v122)
  {
    *(_QWORD *)buf = v122;
    if (!v420)
      goto LABEL_717;
    (*(void (**)(_QWORD *, uint8_t *))(*v420 + 48))(v420, buf);
  }
  v123 = v420;
  if (v420 == v419)
  {
    v124 = 4;
    v123 = v419;
  }
  else
  {
    if (!v420)
      goto LABEL_158;
    v124 = 5;
  }
  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_158:
  v125 = v425;
  if (v425 == (re *)v424)
  {
    v126 = 4;
    v125 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_163;
    v126 = 5;
  }
  v125 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v125 + 8 * v126))();
LABEL_163:
  v127 = *(_QWORD *)(a1 + 40);
  v128 = re::globalAllocators(v125);
  v129 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[2] + 32))(v128[2], 152, 8);
  *(_QWORD *)v129 = &off_24ED77120;
  *(_QWORD *)(v129 + 8) = 0;
  *(_OWORD *)(v129 + 16) = 0u;
  *(_OWORD *)(v129 + 32) = 0u;
  *(_OWORD *)(v129 + 48) = 0u;
  *(_OWORD *)(v129 + 64) = 0u;
  *(_OWORD *)(v129 + 80) = 0u;
  *(_OWORD *)(v129 + 96) = 0u;
  *(_OWORD *)(v129 + 112) = 0u;
  *(_OWORD *)(v129 + 128) = 0u;
  *(_QWORD *)(v129 + 144) = 0;
  v424[0] = &off_24ED78918;
  v425 = (re *)v424;
  v417 = v416;
  v415 = v129;
  v416[0] = &off_24ED78918;
  v130 = re::globalAllocators((re *)v129)[2];
  v435 = v130;
  if (v130)
    v131 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v130 + 32))(v130, 40, 0);
  else
    v131 = 0;
  *(_QWORD *)v131 = &off_24ED789A8;
  if (v417)
  {
    if (v417 == v416)
    {
      *((_QWORD *)v131 + 4) = v131 + 8;
      (*(void (**)(_QWORD *))(*v417 + 24))(v417);
    }
    else
    {
      *((_QWORD *)v131 + 4) = v417;
      v417 = 0;
    }
  }
  else
  {
    *((_QWORD *)v131 + 4) = 0;
  }
  v436 = v131;
  v132 = v415;
  v415 = 0;
  v430 = v130;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v133 = operator new(0x30uLL);
  *v133 = &off_24ED78A10;
  v134 = (uint64_t)(v133 + 1);
  v133[4] = v430;
  v133[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v133 + 1));
  v135 = v431;
  if (v133[4] == v430)
  {
    if (v431 != v429)
    {
      v133[5] = v431;
LABEL_184:
      v431 = 0;
      goto LABEL_185;
    }
    v135 = v429;
  }
  else if (!v431)
  {
    goto LABEL_185;
  }
  v136 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v135 + 40))(v135);
  if (v136 >= 0x19)
  {
    v137 = v136;
    v138 = v133[4];
    if (v138)
      v134 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v138 + 32))(v138, v137, 0);
    else
      v134 = 0;
  }
  v133[5] = v134;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v134);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_184;
  }
LABEL_185:
  v433 = v133;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v127 + 768), v132);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v127 + 776), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0xABCEC87F22A13454;
  v432[0].var1 = "Renormalization";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v127 + 1368, v432, &re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v139 = v415;
  v415 = 0;
  if (v139)
  {
    *(_QWORD *)buf = v139;
    if (!v417)
      goto LABEL_717;
    (*(void (**)(_QWORD *, uint8_t *))(*v417 + 48))(v417, buf);
  }
  v140 = v417;
  if (v417 == v416)
  {
    v141 = 4;
    v140 = v416;
  }
  else
  {
    if (!v417)
      goto LABEL_200;
    v141 = 5;
  }
  (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_200:
  v142 = v425;
  if (v425 == (re *)v424)
  {
    v143 = 4;
    v142 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_205;
    v143 = 5;
  }
  v142 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v142 + 8 * v143))();
LABEL_205:
  v144 = *(_QWORD *)(a1 + 40);
  v145 = re::globalAllocators(v142);
  v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145[2] + 32))(v145[2], 56, 8);
  *(_QWORD *)v146 = &off_24ED7AFD8;
  *(_QWORD *)(v146 + 8) = 0;
  *(_OWORD *)(v146 + 16) = 0u;
  *(_OWORD *)(v146 + 32) = 0u;
  *(_QWORD *)(v146 + 48) = 0;
  v424[0] = &off_24ED78A90;
  v425 = (re *)v424;
  v414 = v413;
  v412 = v146;
  v413[0] = &off_24ED78A90;
  v147 = re::globalAllocators((re *)v146)[2];
  v435 = v147;
  if (v147)
    v148 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v147 + 32))(v147, 40, 0);
  else
    v148 = 0;
  *(_QWORD *)v148 = &off_24ED78B20;
  if (v414)
  {
    if (v414 == v413)
    {
      *((_QWORD *)v148 + 4) = v148 + 8;
      (*(void (**)(_QWORD *))(*v414 + 24))(v414);
    }
    else
    {
      *((_QWORD *)v148 + 4) = v414;
      v414 = 0;
    }
  }
  else
  {
    *((_QWORD *)v148 + 4) = 0;
  }
  v436 = v148;
  v149 = v412;
  v412 = 0;
  v430 = v147;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v150 = operator new(0x30uLL);
  *v150 = &off_24ED78B88;
  v151 = (uint64_t)(v150 + 1);
  v150[4] = v430;
  v150[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v150 + 1));
  v152 = v431;
  if (v150[4] == v430)
  {
    if (v431 != v429)
    {
      v150[5] = v431;
LABEL_226:
      v431 = 0;
      goto LABEL_227;
    }
    v152 = v429;
  }
  else if (!v431)
  {
    goto LABEL_227;
  }
  v153 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v152 + 40))(v152);
  if (v153 >= 0x19)
  {
    v154 = v153;
    v155 = v150[4];
    if (v155)
      v151 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, v154, 0);
    else
      v151 = 0;
  }
  v150[5] = v151;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v151);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_226;
  }
LABEL_227:
  v433 = v150;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v144 + 1048), v149);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v144 + 1056), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x70EBDC9CD6B5D4E4;
  v432[0].var1 = "OffsetsDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v144 + 1368, v432, "\n");
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v156 = v412;
  v412 = 0;
  if (v156)
  {
    *(_QWORD *)buf = v156;
    if (!v414)
      goto LABEL_717;
    (*(void (**)(_QWORD *, uint8_t *))(*v414 + 48))(v414, buf);
  }
  v157 = v414;
  if (v414 == v413)
  {
    v158 = 4;
    v157 = v413;
  }
  else
  {
    if (!v414)
      goto LABEL_242;
    v158 = 5;
  }
  (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_242:
  v159 = v425;
  if (v425 == (re *)v424)
  {
    v160 = 4;
    v159 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_247;
    v160 = 5;
  }
  v159 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v159 + 8 * v160))();
LABEL_247:
  v161 = *(_QWORD *)(a1 + 40);
  v162 = re::globalAllocators(v159);
  v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v162[2] + 32))(v162[2], 48, 8);
  *(_QWORD *)(v163 + 32) = 0;
  *(_QWORD *)(v163 + 40) = 0;
  *(_QWORD *)v163 = &off_24ED7B040;
  *(_QWORD *)(v163 + 8) = 0;
  *(_QWORD *)(v163 + 16) = 0;
  *(_QWORD *)(v163 + 24) = 0;
  *(_DWORD *)(v163 + 31) = 0;
  *(_DWORD *)(v163 + 40) = 12;
  v424[0] = &off_24ED78C08;
  v425 = (re *)v424;
  v411 = (__int128 *)((char *)v410 + 8);
  *(_QWORD *)&v410[0] = v163;
  *((_QWORD *)&v410[0] + 1) = &off_24ED78C08;
  v164 = re::globalAllocators((re *)v163)[2];
  v435 = v164;
  if (v164)
    v165 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 40, 0);
  else
    v165 = 0;
  *(_QWORD *)v165 = &off_24ED78C98;
  if (v411)
  {
    if (v411 == (__int128 *)((char *)v410 + 8))
    {
      *((_QWORD *)v165 + 4) = v165 + 8;
      (*(void (**)(__int128 *))(*(_QWORD *)v411 + 24))(v411);
    }
    else
    {
      *((_QWORD *)v165 + 4) = v411;
      v411 = 0;
    }
  }
  else
  {
    *((_QWORD *)v165 + 4) = 0;
  }
  v436 = v165;
  v166 = *(_QWORD *)&v410[0];
  *(_QWORD *)&v410[0] = 0;
  v430 = v164;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v167 = operator new(0x30uLL);
  *v167 = &off_24ED78D00;
  v168 = (uint64_t)(v167 + 1);
  v167[4] = v430;
  v167[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v167 + 1));
  v169 = v431;
  if (v167[4] == v430)
  {
    if (v431 != v429)
    {
      v167[5] = v431;
LABEL_268:
      v431 = 0;
      goto LABEL_269;
    }
    v169 = v429;
  }
  else if (!v431)
  {
    goto LABEL_269;
  }
  v170 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v169 + 40))(v169);
  if (v170 >= 0x19)
  {
    v171 = v170;
    v172 = v167[4];
    if (v172)
      v168 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v172 + 32))(v172, v171, 0);
    else
      v168 = 0;
  }
  v167[5] = v168;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v168);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_268;
  }
LABEL_269:
  v433 = v167;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v161 + 808), v166);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v161 + 816), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x32458CCC0A585AB0;
  v432[0].var1 = "Bounding Box Calculation";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v161 + 1368, v432, &re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v173 = *(_QWORD *)&v410[0];
  *(_QWORD *)&v410[0] = 0;
  if (v173)
  {
    *(_QWORD *)buf = v173;
    if (!v411)
      goto LABEL_717;
    (*(void (**)(__int128 *, uint8_t *))(*(_QWORD *)v411 + 48))(v411, buf);
  }
  v174 = v411;
  if (v411 == (__int128 *)((char *)v410 + 8))
  {
    v175 = 4;
    v174 = (__int128 *)((char *)v410 + 8);
  }
  else
  {
    if (!v411)
      goto LABEL_284;
    v175 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v174 + 8 * v175))();
LABEL_284:
  v176 = v425;
  if (v425 == (re *)v424)
  {
    v177 = 4;
    v176 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_289;
    v177 = 5;
  }
  v176 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v176 + 8 * v177))();
LABEL_289:
  v178 = *(_QWORD *)(a1 + 40);
  v179 = re::globalAllocators(v176);
  v180 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v179[2] + 32))(v179[2], 40, 8);
  v180[3] = 0;
  v180[4] = 0;
  *v180 = &off_24ED77FC0;
  v180[1] = 0;
  v180[2] = 0;
  *((_WORD *)v180 + 16) = 0;
  v424[0] = &off_24ED78D80;
  v425 = (re *)v424;
  *((_QWORD *)&v409 + 1) = &v408;
  *((_QWORD *)&v407 + 1) = v180;
  *(_QWORD *)&v408 = &off_24ED78D80;
  v181 = re::globalAllocators((re *)v180)[2];
  v435 = v181;
  if (v181)
    v182 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v181 + 32))(v181, 40, 0);
  else
    v182 = 0;
  *(_QWORD *)v182 = &off_24ED78E10;
  if (*((_QWORD *)&v409 + 1))
  {
    if (*((__int128 **)&v409 + 1) == &v408)
    {
      *((_QWORD *)v182 + 4) = v182 + 8;
      (*(void (**)(_QWORD))(**((_QWORD **)&v409 + 1) + 24))(*((_QWORD *)&v409 + 1));
    }
    else
    {
      *((_QWORD *)v182 + 4) = *((_QWORD *)&v409 + 1);
      *((_QWORD *)&v409 + 1) = 0;
    }
  }
  else
  {
    *((_QWORD *)v182 + 4) = 0;
  }
  v436 = v182;
  v183 = *((_QWORD *)&v407 + 1);
  *((_QWORD *)&v407 + 1) = 0;
  v430 = v181;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v184 = operator new(0x30uLL);
  *v184 = &off_24ED78E78;
  v185 = (uint64_t)(v184 + 1);
  v184[4] = v430;
  v184[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v184 + 1));
  v186 = v431;
  if (v184[4] == v430)
  {
    if (v431 != v429)
    {
      v184[5] = v431;
LABEL_310:
      v431 = 0;
      goto LABEL_311;
    }
    v186 = v429;
  }
  else if (!v431)
  {
    goto LABEL_311;
  }
  v187 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v186 + 40))(v186);
  if (v187 >= 0x19)
  {
    v188 = v187;
    v189 = v184[4];
    if (v189)
      v185 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v189 + 32))(v189, v188, 0);
    else
      v185 = 0;
  }
  v184[5] = v185;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v185);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_310;
  }
LABEL_311:
  v433 = v184;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v178 + 1008), v183);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v178 + 1016), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x241C51C064;
  v432[0].var1 = "Tension";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v178 + 1368, v432, "\t");
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v190 = *((_QWORD *)&v407 + 1);
  *((_QWORD *)&v407 + 1) = 0;
  if (v190)
  {
    *(_QWORD *)buf = v190;
    if (!*((_QWORD *)&v409 + 1))
      goto LABEL_717;
    (*(void (**)(_QWORD, uint8_t *))(**((_QWORD **)&v409 + 1) + 48))(*((_QWORD *)&v409 + 1), buf);
  }
  v191 = (__int128 *)*((_QWORD *)&v409 + 1);
  if (*((__int128 **)&v409 + 1) == &v408)
  {
    v192 = 4;
    v191 = &v408;
  }
  else
  {
    if (!*((_QWORD *)&v409 + 1))
      goto LABEL_326;
    v192 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v191 + 8 * v192))();
LABEL_326:
  v193 = v425;
  if (v425 == (re *)v424)
  {
    v194 = 4;
    v193 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_331;
    v194 = 5;
  }
  v193 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v193 + 8 * v194))();
LABEL_331:
  v195 = *(_QWORD *)(a1 + 40);
  v196 = re::globalAllocators(v193);
  v197 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v196[2] + 32))(v196[2], 40, 8);
  v197[3] = 0;
  v197[4] = 0;
  v197[1] = 0;
  v197[2] = 0;
  *v197 = &off_24ED77830;
  *((_WORD *)v197 + 12) = 0;
  v424[0] = &off_24ED78EF8;
  v425 = (re *)v424;
  *(_QWORD *)&v407 = (char *)v406 + 8;
  *(_QWORD *)&v406[0] = v197;
  *((_QWORD *)&v406[0] + 1) = &off_24ED78EF8;
  v198 = re::globalAllocators((re *)v197)[2];
  v435 = v198;
  if (v198)
    v199 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v198 + 32))(v198, 40, 0);
  else
    v199 = 0;
  *(_QWORD *)v199 = &off_24ED78F88;
  if ((_QWORD)v407)
  {
    if ((__int128 *)v407 == (__int128 *)((char *)v406 + 8))
    {
      *((_QWORD *)v199 + 4) = v199 + 8;
      (*(void (**)(_QWORD))(*(_QWORD *)v407 + 24))(v407);
    }
    else
    {
      *((_QWORD *)v199 + 4) = v407;
      *(_QWORD *)&v407 = 0;
    }
  }
  else
  {
    *((_QWORD *)v199 + 4) = 0;
  }
  v436 = v199;
  v200 = *(_QWORD *)&v406[0];
  *(_QWORD *)&v406[0] = 0;
  v430 = v198;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v201 = operator new(0x30uLL);
  *v201 = &off_24ED78FF0;
  v202 = (uint64_t)(v201 + 1);
  v201[4] = v430;
  v201[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v201 + 1));
  v203 = v431;
  if (v201[4] == v430)
  {
    if (v431 != v429)
    {
      v201[5] = v431;
LABEL_352:
      v431 = 0;
      goto LABEL_353;
    }
    v203 = v429;
  }
  else if (!v431)
  {
    goto LABEL_353;
  }
  v204 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v203 + 40))(v203);
  if (v204 >= 0x19)
  {
    v205 = v204;
    v206 = v201[4];
    if (v206)
      v202 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v206 + 32))(v206, v205, 0);
    else
      v202 = 0;
  }
  v201[5] = v202;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v202);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_352;
  }
LABEL_353:
  v433 = v201;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v195 + 1168), v200);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v195 + 1176), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x4005A4B50800FD78;
  v432[0].var1 = "WrapDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v195 + 1368, v432, "\r");
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v207 = *(_QWORD *)&v406[0];
  *(_QWORD *)&v406[0] = 0;
  if (v207)
  {
    *(_QWORD *)buf = v207;
    if (!(_QWORD)v407)
      goto LABEL_717;
    (*(void (**)(_QWORD, uint8_t *))(*(_QWORD *)v407 + 48))(v407, buf);
  }
  v208 = (_QWORD *)v407;
  if ((__int128 *)v407 == (__int128 *)((char *)v406 + 8))
  {
    v209 = 4;
    v208 = (_QWORD *)v406 + 1;
  }
  else
  {
    if (!(_QWORD)v407)
      goto LABEL_368;
    v209 = 5;
  }
  (*(void (**)(void))(*v208 + 8 * v209))();
LABEL_368:
  v210 = v425;
  if (v425 == (re *)v424)
  {
    v211 = 4;
    v210 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_373;
    v211 = 5;
  }
  v210 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v210 + 8 * v211))();
LABEL_373:
  v212 = *(_QWORD *)(a1 + 40);
  v213 = re::globalAllocators(v210);
  v214 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v213[2] + 32))(v213[2], 40, 8);
  v214[3] = 0;
  v214[4] = 0;
  *v214 = &off_24ED74E50;
  v214[1] = 0;
  v214[2] = 0;
  *((_WORD *)v214 + 16) = 0;
  v424[0] = &off_24ED79070;
  v425 = (re *)v424;
  v405 = v404;
  *((_QWORD *)&v403 + 1) = v214;
  v404[0] = (uint64_t)&off_24ED79070;
  v215 = re::globalAllocators((re *)v214)[2];
  v435 = v215;
  if (v215)
    v216 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v215 + 32))(v215, 40, 0);
  else
    v216 = 0;
  *(_QWORD *)v216 = &off_24ED79100;
  if (v405)
  {
    if (v405 == v404)
    {
      *((_QWORD *)v216 + 4) = v216 + 8;
      (*(void (**)(uint64_t *))(*v405 + 24))(v405);
    }
    else
    {
      *((_QWORD *)v216 + 4) = v405;
      v405 = 0;
    }
  }
  else
  {
    *((_QWORD *)v216 + 4) = 0;
  }
  v436 = v216;
  v217 = *((_QWORD *)&v403 + 1);
  *((_QWORD *)&v403 + 1) = 0;
  v430 = v215;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v218 = operator new(0x30uLL);
  *v218 = &off_24ED79168;
  v219 = (uint64_t)(v218 + 1);
  v218[4] = v430;
  v218[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v218 + 1));
  v220 = v431;
  if (v218[4] == v430)
  {
    if (v431 != v429)
    {
      v218[5] = v431;
LABEL_394:
      v431 = 0;
      goto LABEL_395;
    }
    v220 = v429;
  }
  else if (!v431)
  {
    goto LABEL_395;
  }
  v221 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v220 + 40))(v220);
  if (v221 >= 0x19)
  {
    v222 = v221;
    v223 = v218[4];
    if (v223)
      v219 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v223 + 32))(v223, v222, 0);
    else
      v219 = 0;
  }
  v218[5] = v219;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v219);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_394;
  }
LABEL_395:
  v433 = v218;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v212 + 1248), v217);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v212 + 1256), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x22F387A552F200A4;
  v432[0].var1 = "ContactDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v212 + 1368, v432, &re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v224 = *((_QWORD *)&v403 + 1);
  *((_QWORD *)&v403 + 1) = 0;
  if (v224)
  {
    *(_QWORD *)buf = v224;
    if (!v405)
      goto LABEL_717;
    (*(void (**)(uint64_t *, uint8_t *))(*v405 + 48))(v405, buf);
  }
  v225 = v405;
  if (v405 == v404)
  {
    v226 = 4;
    v225 = v404;
  }
  else
  {
    if (!v405)
      goto LABEL_410;
    v226 = 5;
  }
  (*(void (**)(void))(*v225 + 8 * v226))();
LABEL_410:
  v227 = v425;
  if (v425 == (re *)v424)
  {
    v228 = 4;
    v227 = (re *)v424;
    goto LABEL_414;
  }
  if (v425)
  {
    v228 = 5;
LABEL_414:
    v227 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v227 + 8 * v228))();
  }
  v229 = *(_QWORD *)(a1 + 40);
  v230 = re::globalAllocators(v227);
  v231 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v230[2] + 32))(v230[2], 344, 8);
  v232 = 0;
  *(_OWORD *)(v231 + 8) = 0u;
  *(_OWORD *)(v231 + 264) = 0u;
  *(_OWORD *)(v231 + 280) = 0u;
  *(_OWORD *)(v231 + 296) = 0u;
  *(_OWORD *)(v231 + 312) = 0u;
  *(_OWORD *)(v231 + 328) = 0u;
  *(_QWORD *)v231 = &off_24ED7AA80;
  *(_OWORD *)(v231 + 24) = 0u;
  *(_OWORD *)(v231 + 40) = 0u;
  *(_OWORD *)(v231 + 56) = 0u;
  *(_OWORD *)(v231 + 72) = 0u;
  *(_OWORD *)(v231 + 88) = 0u;
  *(_OWORD *)(v231 + 104) = 0u;
  *(_OWORD *)(v231 + 120) = 0u;
  *(_OWORD *)(v231 + 136) = 0u;
  *(_OWORD *)(v231 + 152) = 0u;
  *(_OWORD *)(v231 + 168) = 0u;
  *(_OWORD *)(v231 + 184) = 0u;
  *(_OWORD *)(v231 + 200) = 0u;
  *(_OWORD *)(v231 + 216) = 0u;
  *(_OWORD *)(v231 + 232) = 0u;
  *(_OWORD *)(v231 + 248) = 0u;
  do
  {
    v233 = v231 + v232;
    *(_QWORD *)(v233 + 40) = 0;
    *(_QWORD *)(v233 + 16) = 0;
    *(_QWORD *)(v233 + 24) = 0;
    *(_QWORD *)(v233 + 8) = 0;
    v232 += 40;
    *(_DWORD *)(v233 + 32) = 0;
  }
  while (v232 != 320);
  *(_QWORD *)(v231 + 328) = 0;
  *(_WORD *)(v231 + 336) = 0;
  v424[0] = &off_24ED791E8;
  v425 = (re *)v424;
  *(_QWORD *)&v403 = (char *)v402 + 8;
  *(_QWORD *)&v402[0] = v231;
  *((_QWORD *)&v402[0] + 1) = &off_24ED791E8;
  v234 = re::globalAllocators((re *)v231)[2];
  v435 = v234;
  if (v234)
    v235 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v234 + 32))(v234, 40, 0);
  else
    v235 = 0;
  *(_QWORD *)v235 = &off_24ED79278;
  if ((_QWORD)v403)
  {
    if ((__int128 *)v403 == (__int128 *)((char *)v402 + 8))
    {
      *((_QWORD *)v235 + 4) = v235 + 8;
      (*(void (**)(_QWORD))(*(_QWORD *)v403 + 24))(v403);
    }
    else
    {
      *((_QWORD *)v235 + 4) = v403;
      *(_QWORD *)&v403 = 0;
    }
  }
  else
  {
    *((_QWORD *)v235 + 4) = 0;
  }
  v436 = v235;
  v236 = *(_QWORD *)&v402[0];
  *(_QWORD *)&v402[0] = 0;
  v430 = v234;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v237 = operator new(0x30uLL);
  *v237 = &off_24ED792E0;
  v238 = (uint64_t)(v237 + 1);
  v237[4] = v430;
  v237[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v237 + 1));
  v239 = v431;
  if (v237[4] == v430)
  {
    if (v431 != v429)
    {
      v237[5] = v431;
LABEL_438:
      v431 = 0;
      goto LABEL_439;
    }
    v239 = v429;
  }
  else if (!v431)
  {
    goto LABEL_439;
  }
  v240 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v239 + 40))(v239);
  if (v240 >= 0x19)
  {
    v241 = v240;
    v242 = v237[4];
    if (v242)
      v238 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v242 + 32))(v242, v241, 0);
    else
      v238 = 0;
  }
  v237[5] = v238;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v238);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_438;
  }
LABEL_439:
  v433 = v237;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v229 + 968), v236);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v229 + 976), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x906B1D4E64D3F318;
  v432[0].var1 = "PrepareSimplifiedMeshBuffer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v229 + 1368, v432, "\b");
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v243 = *(_QWORD *)&v402[0];
  *(_QWORD *)&v402[0] = 0;
  if (v243)
  {
    *(_QWORD *)buf = v243;
    if (!(_QWORD)v403)
      goto LABEL_717;
    (*(void (**)(_QWORD, uint8_t *))(*(_QWORD *)v403 + 48))(v403, buf);
  }
  v244 = (_QWORD *)v403;
  if ((__int128 *)v403 == (__int128 *)((char *)v402 + 8))
  {
    v245 = 4;
    v244 = (_QWORD *)v402 + 1;
  }
  else
  {
    if (!(_QWORD)v403)
      goto LABEL_454;
    v245 = 5;
  }
  (*(void (**)(void))(*v244 + 8 * v245))();
LABEL_454:
  v246 = v425;
  if (v425 == (re *)v424)
  {
    v247 = 4;
    v246 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_459;
    v247 = 5;
  }
  v246 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v246 + 8 * v247))();
LABEL_459:
  v248 = *(_QWORD *)(a1 + 40);
  v249 = re::globalAllocators(v246);
  v250 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v249[2] + 32))(v249[2], 40, 8);
  *(_QWORD *)v250 = &off_24ED7B2F8;
  *((_QWORD *)v250 + 1) = 0;
  *((_QWORD *)v250 + 3) = 0;
  *((_QWORD *)v250 + 4) = 0;
  *((_QWORD *)v250 + 2) = 0;
  v424[0] = &off_24ED79360;
  v425 = (re *)v424;
  *((_QWORD *)&v401 + 1) = &v400;
  *((_QWORD *)&v399 + 1) = v250;
  *(_QWORD *)&v400 = &off_24ED79360;
  v251 = re::globalAllocators(v250)[2];
  v435 = v251;
  if (v251)
    v252 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v251 + 32))(v251, 40, 0);
  else
    v252 = 0;
  *(_QWORD *)v252 = &off_24ED793F0;
  if (*((_QWORD *)&v401 + 1))
  {
    if (*((__int128 **)&v401 + 1) == &v400)
    {
      *((_QWORD *)v252 + 4) = v252 + 8;
      (*(void (**)(_QWORD))(**((_QWORD **)&v401 + 1) + 24))(*((_QWORD *)&v401 + 1));
    }
    else
    {
      *((_QWORD *)v252 + 4) = *((_QWORD *)&v401 + 1);
      *((_QWORD *)&v401 + 1) = 0;
    }
  }
  else
  {
    *((_QWORD *)v252 + 4) = 0;
  }
  v436 = v252;
  v253 = *((_QWORD *)&v399 + 1);
  *((_QWORD *)&v399 + 1) = 0;
  v430 = v251;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v254 = operator new(0x30uLL);
  *v254 = &off_24ED79458;
  v255 = (uint64_t)(v254 + 1);
  v254[4] = v430;
  v254[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v254 + 1));
  v256 = v431;
  if (v254[4] == v430)
  {
    if (v431 != v429)
    {
      v254[5] = v431;
LABEL_480:
      v431 = 0;
      goto LABEL_481;
    }
    v256 = v429;
  }
  else if (!v431)
  {
    goto LABEL_481;
  }
  v257 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v256 + 40))(v256);
  if (v257 >= 0x19)
  {
    v258 = v257;
    v259 = v254[4];
    if (v259)
      v255 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v259 + 32))(v259, v258, 0);
    else
      v255 = 0;
  }
  v254[5] = v255;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v255);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_480;
  }
LABEL_481:
  v433 = v254;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v248 + 888), v253);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v248 + 896), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0xA6B838C1BF1BB512;
  v432[0].var1 = "OpenSubdivViewIndependentComputeStep";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v248 + 1368, v432, &re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v260 = *((_QWORD *)&v399 + 1);
  *((_QWORD *)&v399 + 1) = 0;
  if (v260)
  {
    *(_QWORD *)buf = v260;
    if (!*((_QWORD *)&v401 + 1))
      goto LABEL_717;
    (*(void (**)(_QWORD, uint8_t *))(**((_QWORD **)&v401 + 1) + 48))(*((_QWORD *)&v401 + 1), buf);
  }
  v261 = (__int128 *)*((_QWORD *)&v401 + 1);
  if (*((__int128 **)&v401 + 1) == &v400)
  {
    v262 = 4;
    v261 = &v400;
  }
  else
  {
    if (!*((_QWORD *)&v401 + 1))
      goto LABEL_496;
    v262 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v261 + 8 * v262))();
LABEL_496:
  v263 = v425;
  if (v425 == (re *)v424)
  {
    v264 = 4;
    v263 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_501;
    v264 = 5;
  }
  v263 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v263 + 8 * v264))();
LABEL_501:
  v265 = *(_QWORD *)(a1 + 40);
  v266 = re::globalAllocators(v263);
  v267 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v266[2] + 32))(v266[2], 32, 8);
  *(_QWORD *)v267 = &off_24ED7B348;
  *((_QWORD *)v267 + 1) = 0;
  *((_QWORD *)v267 + 2) = 0;
  *((_QWORD *)v267 + 3) = 0;
  v424[0] = &off_24ED794D8;
  v425 = (re *)v424;
  *(_QWORD *)&v399 = (char *)v398 + 8;
  *(_QWORD *)&v398[0] = v267;
  *((_QWORD *)&v398[0] + 1) = &off_24ED794D8;
  v268 = re::globalAllocators(v267)[2];
  v435 = v268;
  if (v268)
    v269 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v268 + 32))(v268, 40, 0);
  else
    v269 = 0;
  *(_QWORD *)v269 = &off_24ED79568;
  if ((_QWORD)v399)
  {
    if ((__int128 *)v399 == (__int128 *)((char *)v398 + 8))
    {
      *((_QWORD *)v269 + 4) = v269 + 8;
      (*(void (**)(_QWORD))(*(_QWORD *)v399 + 24))(v399);
    }
    else
    {
      *((_QWORD *)v269 + 4) = v399;
      *(_QWORD *)&v399 = 0;
    }
  }
  else
  {
    *((_QWORD *)v269 + 4) = 0;
  }
  v436 = v269;
  v270 = *(_QWORD *)&v398[0];
  *(_QWORD *)&v398[0] = 0;
  v430 = v268;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v271 = operator new(0x30uLL);
  *v271 = &off_24ED795D0;
  v272 = (uint64_t)(v271 + 1);
  v271[4] = v430;
  v271[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v271 + 1));
  v273 = v431;
  if (v271[4] == v430)
  {
    if (v431 != v429)
    {
      v271[5] = v431;
LABEL_522:
      v431 = 0;
      goto LABEL_523;
    }
    v273 = v429;
  }
  else if (!v431)
  {
    goto LABEL_523;
  }
  v274 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v273 + 40))(v273);
  if (v274 >= 0x19)
  {
    v275 = v274;
    v276 = v271[4];
    if (v276)
      v272 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v276 + 32))(v276, v275, 0);
    else
      v272 = 0;
  }
  v271[5] = v272;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v272);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_522;
  }
LABEL_523:
  v433 = v271;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v265 + 928), v270);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v265 + 936), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0xC6F7B7A81D0D03C8;
  v432[0].var1 = "OpenSubdivViewDependentComputeStep";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v265 + 1368, v432, "\a");
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v277 = *(_QWORD *)&v398[0];
  *(_QWORD *)&v398[0] = 0;
  if (v277)
  {
    *(_QWORD *)buf = v277;
    if (!(_QWORD)v399)
      goto LABEL_717;
    (*(void (**)(_QWORD, uint8_t *))(*(_QWORD *)v399 + 48))(v399, buf);
  }
  v278 = (_QWORD *)v399;
  if ((__int128 *)v399 == (__int128 *)((char *)v398 + 8))
  {
    v279 = 4;
    v278 = (_QWORD *)v398 + 1;
  }
  else
  {
    if (!(_QWORD)v399)
      goto LABEL_538;
    v279 = 5;
  }
  (*(void (**)(void))(*v278 + 8 * v279))();
LABEL_538:
  v280 = v425;
  if (v425 == (re *)v424)
  {
    v281 = 4;
    v280 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_543;
    v281 = 5;
  }
  v280 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v280 + 8 * v281))();
LABEL_543:
  v282 = *(_QWORD *)(a1 + 40);
  v283 = re::globalAllocators(v280);
  v284 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v283[2] + 32))(v283[2], 168, 8);
  v424[0] = &off_24ED79650;
  v425 = (re *)v424;
  *((_QWORD *)&v397 + 1) = &v396;
  *((_QWORD *)&v395 + 1) = v284;
  *(_QWORD *)&v396 = &off_24ED79650;
  v286 = re::globalAllocators(v285)[2];
  v435 = v286;
  if (v286)
    v287 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v286 + 32))(v286, 40, 0);
  else
    v287 = 0;
  *(_QWORD *)v287 = &off_24ED796E0;
  if (*((_QWORD *)&v397 + 1))
  {
    if (*((__int128 **)&v397 + 1) == &v396)
    {
      *((_QWORD *)v287 + 4) = v287 + 8;
      (*(void (**)(_QWORD))(**((_QWORD **)&v397 + 1) + 24))(*((_QWORD *)&v397 + 1));
    }
    else
    {
      *((_QWORD *)v287 + 4) = *((_QWORD *)&v397 + 1);
      *((_QWORD *)&v397 + 1) = 0;
    }
  }
  else
  {
    *((_QWORD *)v287 + 4) = 0;
  }
  v436 = v287;
  v288 = *((_QWORD *)&v395 + 1);
  *((_QWORD *)&v395 + 1) = 0;
  v430 = v286;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v289 = operator new(0x30uLL);
  *v289 = &off_24ED79748;
  v290 = (uint64_t)(v289 + 1);
  v289[4] = v430;
  v289[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v289 + 1));
  v291 = v431;
  if (v289[4] == v430)
  {
    if (v431 != v429)
    {
      v289[5] = v431;
LABEL_564:
      v431 = 0;
      goto LABEL_565;
    }
    v291 = v429;
  }
  else if (!v431)
  {
    goto LABEL_565;
  }
  v292 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v291 + 40))(v291);
  if (v292 >= 0x19)
  {
    v293 = v292;
    v294 = v289[4];
    if (v294)
      v290 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v294 + 32))(v294, v293, 0);
    else
      v290 = 0;
  }
  v289[5] = v290;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v290);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_564;
  }
LABEL_565:
  v433 = v289;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v282 + 1128), v288);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v282 + 1136), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0xEAA1CBFA3D5AC124;
  v432[0].var1 = "Custom Deformers";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v282 + 1368, v432, &re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v295 = *((_QWORD *)&v395 + 1);
  *((_QWORD *)&v395 + 1) = 0;
  if (v295)
  {
    *(_QWORD *)buf = v295;
    if (!*((_QWORD *)&v397 + 1))
      goto LABEL_717;
    (*(void (**)(_QWORD, uint8_t *))(**((_QWORD **)&v397 + 1) + 48))(*((_QWORD *)&v397 + 1), buf);
  }
  v296 = (__int128 *)*((_QWORD *)&v397 + 1);
  if (*((__int128 **)&v397 + 1) == &v396)
  {
    v297 = 4;
    v296 = &v396;
  }
  else
  {
    if (!*((_QWORD *)&v397 + 1))
      goto LABEL_580;
    v297 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v296 + 8 * v297))();
LABEL_580:
  v298 = v425;
  if (v425 == (re *)v424)
  {
    v299 = 4;
    v298 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_585;
    v299 = 5;
  }
  v298 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v298 + 8 * v299))();
LABEL_585:
  v300 = *(_QWORD *)(a1 + 40);
  v301 = re::globalAllocators(v298);
  v302 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v301[2] + 32))(v301[2], 8, 8);
  *(_QWORD *)v302 = &off_24ED78438;
  v424[0] = &off_24ED797C8;
  v425 = (re *)v424;
  *(_QWORD *)&v395 = (char *)v394 + 8;
  *(_QWORD *)&v394[0] = v302;
  *((_QWORD *)&v394[0] + 1) = &off_24ED797C8;
  v303 = re::globalAllocators(v302)[2];
  v435 = v303;
  if (v303)
    v304 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v303 + 32))(v303, 40, 0);
  else
    v304 = 0;
  *(_QWORD *)v304 = &off_24ED79858;
  if ((_QWORD)v395)
  {
    if ((__int128 *)v395 == (__int128 *)((char *)v394 + 8))
    {
      *((_QWORD *)v304 + 4) = v304 + 8;
      (*(void (**)(_QWORD))(*(_QWORD *)v395 + 24))(v395);
    }
    else
    {
      *((_QWORD *)v304 + 4) = v395;
      *(_QWORD *)&v395 = 0;
    }
  }
  else
  {
    *((_QWORD *)v304 + 4) = 0;
  }
  v436 = v304;
  v305 = *(_QWORD *)&v394[0];
  *(_QWORD *)&v394[0] = 0;
  v430 = v303;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v306 = operator new(0x30uLL);
  *v306 = &off_24ED798C0;
  v307 = (uint64_t)(v306 + 1);
  v306[4] = v430;
  v306[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v306 + 1));
  v308 = v431;
  if (v306[4] == v430)
  {
    if (v431 != v429)
    {
      v306[5] = v431;
LABEL_606:
      v431 = 0;
      goto LABEL_607;
    }
    v308 = v429;
  }
  else if (!v431)
  {
    goto LABEL_607;
  }
  v309 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v308 + 40))(v308);
  if (v309 >= 0x19)
  {
    v310 = v309;
    v311 = v306[4];
    if (v311)
      v307 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v311 + 32))(v311, v310, 0);
    else
      v307 = 0;
  }
  v306[5] = v307;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v307);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_606;
  }
LABEL_607:
  v433 = v306;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v300 + 1208), v305);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v300 + 1216), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x4425D6C2BB3546C6;
  v432[0].var1 = "FenceDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v300 + 1368, v432, &re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v312 = *(_QWORD *)&v394[0];
  *(_QWORD *)&v394[0] = 0;
  if (v312)
  {
    *(_QWORD *)buf = v312;
    if (!(_QWORD)v395)
      goto LABEL_717;
    (*(void (**)(_QWORD, uint8_t *))(*(_QWORD *)v395 + 48))(v395, buf);
  }
  v313 = (_QWORD *)v395;
  if ((__int128 *)v395 == (__int128 *)((char *)v394 + 8))
  {
    v314 = 4;
    v313 = (_QWORD *)v394 + 1;
  }
  else
  {
    if (!(_QWORD)v395)
      goto LABEL_622;
    v314 = 5;
  }
  (*(void (**)(void))(*v313 + 8 * v314))();
LABEL_622:
  v315 = v425;
  if (v425 == (re *)v424)
  {
    v316 = 4;
    v315 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_627;
    v316 = 5;
  }
  v315 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v315 + 8 * v316))();
LABEL_627:
  v317 = *(_QWORD *)(a1 + 40);
  v318 = re::globalAllocators(v315);
  v319 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v318[2] + 32))(v318[2], 48, 8);
  *(_QWORD *)(v319 + 40) = 0;
  *(_QWORD *)v319 = &off_24ED74C88;
  *(_OWORD *)(v319 + 8) = 0u;
  *(_OWORD *)(v319 + 24) = 0u;
  *(_WORD *)(v319 + 40) = 0;
  v424[0] = &off_24ED79940;
  v425 = (re *)v424;
  v393 = v392;
  v391 = v319;
  v392[0] = (uint64_t)&off_24ED79940;
  v320 = re::globalAllocators((re *)v319)[2];
  v435 = v320;
  if (v320)
    v321 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v320 + 32))(v320, 40, 0);
  else
    v321 = 0;
  *(_QWORD *)v321 = &off_24ED799D0;
  if (v393)
  {
    if (v393 == v392)
    {
      *((_QWORD *)v321 + 4) = v321 + 8;
      (*(void (**)(uint64_t *))(*v393 + 24))(v393);
    }
    else
    {
      *((_QWORD *)v321 + 4) = v393;
      v393 = 0;
    }
  }
  else
  {
    *((_QWORD *)v321 + 4) = 0;
  }
  v436 = v321;
  v322 = v391;
  v391 = 0;
  v430 = v320;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v323 = operator new(0x30uLL);
  *v323 = &off_24ED79A38;
  v324 = (uint64_t)(v323 + 1);
  v323[4] = v430;
  v323[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v323 + 1));
  v325 = v431;
  if (v323[4] == v430)
  {
    if (v431 != v429)
    {
      v323[5] = v431;
LABEL_648:
      v431 = 0;
      goto LABEL_649;
    }
    v325 = v429;
  }
  else if (!v431)
  {
    goto LABEL_649;
  }
  v326 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v325 + 40))(v325);
  if (v326 >= 0x19)
  {
    v327 = v326;
    v328 = v323[4];
    if (v328)
      v324 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v328 + 32))(v328, v327, 0);
    else
      v324 = 0;
  }
  v323[5] = v324;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v324);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_648;
  }
LABEL_649:
  v433 = v323;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v317 + 1288), v322);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v317 + 1296), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x20889405B90383CLL;
  v432[0].var1 = "VertexCache";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v317 + 1368, v432, &re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v329 = v391;
  v391 = 0;
  if (v329)
  {
    *(_QWORD *)buf = v329;
    if (!v393)
      goto LABEL_717;
    (*(void (**)(uint64_t *, uint8_t *))(*v393 + 48))(v393, buf);
  }
  v330 = v393;
  if (v393 == v392)
  {
    v331 = 4;
    v330 = v392;
  }
  else
  {
    if (!v393)
      goto LABEL_664;
    v331 = 5;
  }
  (*(void (**)(void))(*v330 + 8 * v331))();
LABEL_664:
  v332 = v425;
  if (v425 == (re *)v424)
  {
    v333 = 4;
    v332 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_669;
    v333 = 5;
  }
  v332 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v332 + 8 * v333))();
LABEL_669:
  v334 = *(_QWORD *)(a1 + 40);
  v335 = re::globalAllocators(v332);
  v336 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v335[2] + 32))(v335[2], 208, 8);
  *(_OWORD *)(v336 + 8) = 0u;
  *(_OWORD *)(v336 + 24) = 0u;
  *(_OWORD *)(v336 + 40) = 0u;
  *(_OWORD *)(v336 + 56) = 0u;
  *(_OWORD *)(v336 + 72) = 0u;
  *(_OWORD *)(v336 + 88) = 0u;
  *(_OWORD *)(v336 + 104) = 0u;
  *(_OWORD *)(v336 + 120) = 0u;
  *(_OWORD *)(v336 + 136) = 0u;
  *(_OWORD *)(v336 + 152) = 0u;
  *(_OWORD *)(v336 + 168) = 0u;
  *(_OWORD *)(v336 + 184) = 0u;
  *(_QWORD *)v336 = &off_24ED7AD98;
  *(_QWORD *)(v336 + 16) = 0;
  *(_QWORD *)(v336 + 24) = 0;
  *(_QWORD *)(v336 + 32) = 0;
  *(_DWORD *)(v336 + 40) = 1;
  *(_QWORD *)(v336 + 48) = 0;
  *(_QWORD *)(v336 + 56) = 0;
  *(_QWORD *)(v336 + 64) = 0;
  *(_DWORD *)(v336 + 72) = 0;
  *(_QWORD *)(v336 + 80) = 0;
  *(_QWORD *)(v336 + 88) = 0;
  *(_DWORD *)(v336 + 104) = 0;
  *(_QWORD *)(v336 + 96) = 0;
  *(_QWORD *)(v336 + 112) = 0;
  *(_QWORD *)(v336 + 120) = 0;
  *(_DWORD *)(v336 + 128) = 0;
  *(_QWORD *)(v336 + 132) = 0x1FFFFFFFFLL;
  *(_QWORD *)(v336 + 144) = 0;
  *(_QWORD *)(v336 + 152) = 0;
  *(_DWORD *)(v336 + 160) = 1;
  *(_QWORD *)(v336 + 168) = 0;
  *(_QWORD *)(v336 + 176) = 0;
  *(_DWORD *)(v336 + 192) = 0;
  *(_QWORD *)(v336 + 184) = 0;
  *(_QWORD *)(v336 + 200) = 0;
  v424[0] = &off_24ED79AB8;
  v425 = (re *)v424;
  v390 = v389;
  v388 = v336;
  v389[0] = (uint64_t)&off_24ED79AB8;
  v337 = re::globalAllocators((re *)v336)[2];
  v435 = v337;
  if (v337)
    v338 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v337 + 32))(v337, 40, 0);
  else
    v338 = 0;
  *(_QWORD *)v338 = &off_24ED79B48;
  if (v390)
  {
    if (v390 == v389)
    {
      *((_QWORD *)v338 + 4) = v338 + 8;
      (*(void (**)(uint64_t *))(*v390 + 24))(v390);
    }
    else
    {
      *((_QWORD *)v338 + 4) = v390;
      v390 = 0;
    }
  }
  else
  {
    *((_QWORD *)v338 + 4) = 0;
  }
  v436 = v338;
  v339 = v388;
  v388 = 0;
  v430 = v337;
  v431 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v429, (uint64_t)buf);
  v340 = operator new(0x30uLL);
  *v340 = &off_24ED79BB0;
  v341 = (uint64_t)(v340 + 1);
  v340[4] = v430;
  v340[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(v340 + 1));
  v342 = v431;
  if (v340[4] == v430)
  {
    if (v431 != v429)
    {
      v340[5] = v431;
LABEL_690:
      v431 = 0;
      goto LABEL_691;
    }
    v342 = v429;
  }
  else if (!v431)
  {
    goto LABEL_691;
  }
  v343 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v342 + 40))(v342);
  if (v343 >= 0x19)
  {
    v344 = v343;
    v345 = v340[4];
    if (v345)
      v341 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v345 + 32))(v345, v344, 0);
    else
      v341 = 0;
  }
  v340[5] = v341;
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v431 + 32))(v431, v341);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    goto LABEL_690;
  }
LABEL_691:
  v433 = v340;
  *(_QWORD *)&v432[0].var0 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v334 + 1328), v339);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v334 + 1336), (uint64_t)&v432[0].var1);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v432);
  if (v431)
  {
    (**(void (***)(_BYTE *))v431)(v431);
    if (v431 != v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 40))(v430);
    v431 = 0;
  }
  *(_QWORD *)&v432[0].var0 = 0x2A152C09AEB06114;
  v432[0].var1 = "JiggleDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v334 + 1368, v432, &re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v432);
  if (v436)
  {
    (**(void (***)(uint8_t *))v436)(v436);
    if (v436 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 40))(v435);
  }
  v346 = v388;
  v388 = 0;
  if (v346)
  {
    *(_QWORD *)buf = v346;
    if (v390)
    {
      (*(void (**)(uint64_t *, uint8_t *))(*v390 + 48))(v390, buf);
      goto LABEL_701;
    }
LABEL_717:
    std::__throw_bad_function_call[abi:nn180100]();
  }
LABEL_701:
  v347 = v390;
  if (v390 == v389)
  {
    v348 = 4;
    v347 = v389;
  }
  else
  {
    if (!v390)
      goto LABEL_706;
    v348 = 5;
  }
  (*(void (**)(void))(*v347 + 8 * v348))();
LABEL_706:
  v349 = v425;
  if (v425 == (re *)v424)
  {
    v350 = 4;
    v349 = (re *)v424;
  }
  else
  {
    if (!v425)
      goto LABEL_711;
    v350 = 5;
  }
  v349 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v349 + 8 * v350))();
LABEL_711:
  v351 = re::globalAllocators(v349);
  v352 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v351[2] + 32))(v351[2], 2192, 16);
  bzero(v352, 0x890uLL);
  *((_DWORD *)v352 + 437) = 0x7FFFFFFF;
  v353 = (__int128 *)MEMORY[0x24BDAEE00];
  v354 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  *((_OWORD *)v352 + 110) = *MEMORY[0x24BDAEE00];
  *((_OWORD *)v352 + 111) = v354;
  v355 = v353[3];
  *((_OWORD *)v352 + 112) = v353[2];
  *((_OWORD *)v352 + 113) = v355;
  v352[230] = 0;
  v352[229] = 0;
  v352[232] = 256;
  *((_DWORD *)v352 + 466) = 256;
  v352[234] = 0;
  v352[236] = 0;
  v352[235] = 0;
  v352[237] = 0x10000000100;
  *((_DWORD *)v352 + 476) = 200;
  v352[247] = 0;
  *(_OWORD *)(v352 + 243) = 0u;
  *(_OWORD *)(v352 + 245) = 0u;
  *(_OWORD *)(v352 + 239) = 0u;
  *(_OWORD *)(v352 + 241) = 0u;
  *((_OWORD *)v352 + 124) = xmmword_2260E5F10;
  *((_OWORD *)v352 + 125) = xmmword_2260E5F20;
  *((_OWORD *)v352 + 126) = xmmword_2260E5F40;
  *((_OWORD *)v352 + 127) = xmmword_2260E5F10;
  *((_OWORD *)v352 + 128) = xmmword_2260E5F20;
  *((_OWORD *)v352 + 129) = xmmword_2260E5F40;
  *((_OWORD *)v352 + 130) = xmmword_2260E5F10;
  *((_OWORD *)v352 + 131) = xmmword_2260E5F20;
  *((_OWORD *)v352 + 132) = xmmword_2260E5F40;
  *((_OWORD *)v352 + 133) = xmmword_2260E5F10;
  *((_OWORD *)v352 + 134) = xmmword_2260E5F20;
  *((_OWORD *)v352 + 135) = xmmword_2260E5F40;
  v352[272] = 0x3D4CCCCD3F800000;
  *(_QWORD *)(a1 + 112) = v352;
  *v352 = *(_QWORD *)(a1 + 88);
  v356 = (re *)re::CameraStreamContext::init((re::CameraStreamContext *)(v352 + 2));
  v352[232] = 256;
  *((_OWORD *)v352 + 124) = xmmword_2260E5F10;
  *((_OWORD *)v352 + 125) = xmmword_2260E5F20;
  *((_OWORD *)v352 + 126) = xmmword_2260E5F40;
  *((_OWORD *)v352 + 127) = xmmword_2260E5F10;
  *((_OWORD *)v352 + 128) = xmmword_2260E5F20;
  *((_OWORD *)v352 + 129) = xmmword_2260E5F40;
  *((_OWORD *)v352 + 130) = xmmword_2260E5F10;
  *((_OWORD *)v352 + 131) = xmmword_2260E5F20;
  *((_OWORD *)v352 + 132) = xmmword_2260E5F40;
  *((_OWORD *)v352 + 133) = xmmword_2260E5F10;
  *((_OWORD *)v352 + 134) = xmmword_2260E5F20;
  *((_OWORD *)v352 + 135) = xmmword_2260E5F40;
  v357 = re::globalAllocators(v356);
  v358 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v357[2] + 32))(v357[2], 224, 16);
  *(_OWORD *)(v358 + 208) = 0u;
  *(_OWORD *)(v358 + 192) = 0u;
  *(_OWORD *)(v358 + 144) = 0u;
  *(_OWORD *)(v358 + 160) = 0u;
  *(_OWORD *)(v358 + 176) = 0u;
  *(_OWORD *)(v358 + 112) = 0u;
  *(_OWORD *)(v358 + 128) = 0u;
  *(_OWORD *)(v358 + 80) = 0u;
  *(_OWORD *)(v358 + 96) = 0u;
  *(_OWORD *)(v358 + 48) = 0u;
  *(_OWORD *)(v358 + 64) = 0u;
  *(_OWORD *)(v358 + 16) = 0u;
  *(_OWORD *)(v358 + 32) = 0u;
  *(_OWORD *)v358 = 0u;
  v359 = *v353;
  v360 = v353[1];
  v361 = v353[3];
  *(_OWORD *)(v358 + 32) = v353[2];
  *(_OWORD *)(v358 + 48) = v361;
  *(_OWORD *)v358 = v359;
  *(_OWORD *)(v358 + 16) = v360;
  v362 = v353[3];
  *(_OWORD *)(v358 + 96) = v353[2];
  *(_OWORD *)(v358 + 112) = v362;
  v363 = v353[1];
  *(_OWORD *)(v358 + 64) = *v353;
  *(_OWORD *)(v358 + 80) = v363;
  *(_OWORD *)(v358 + 144) = 0u;
  *(_OWORD *)(v358 + 160) = 0u;
  *(_OWORD *)(v358 + 192) = 0u;
  *(_OWORD *)(v358 + 208) = 0u;
  v364 = (re *)re::DynamicString::setCapacity((_QWORD *)(v358 + 192), 0);
  *(_QWORD *)(a1 + 120) = v358;
  v365 = re::globalAllocators(v364);
  v366 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v365[2] + 32))(v365[2], 80, 8);
  *(_OWORD *)v366 = 0u;
  *(_OWORD *)(v366 + 16) = 0u;
  *(_OWORD *)(v366 + 32) = 0u;
  *(_OWORD *)(v366 + 48) = 0u;
  *(_QWORD *)(v366 + 52) = 0x1FFFFFFFFLL;
  *(_QWORD *)(v366 + 64) = 0;
  *(_QWORD *)(v366 + 72) = 0;
  *(_QWORD *)(a1 + 128) = v366;
  re::DisplayStatsManager::init((re::DisplayStatsManager *)v366);
  *(_QWORD *)(a1 + 152) = v65;
  v368 = re::globalAllocators(v367);
  v369 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v368[2] + 32))(v368[2], 4384, 16);
  v370 = -4368;
  do
  {
    v371 = v369 + v370;
    *(_QWORD *)(v371 + 4368) = 0;
    *(_DWORD *)(v371 + 4376) = 0;
    *(_QWORD *)(v371 + 4384) = 0;
    *(_DWORD *)(v371 + 4392) = 0;
    *(_OWORD *)(v371 + 5552) = 0uLL;
    *(_OWORD *)(v371 + 5568) = 0uLL;
    *(_QWORD *)(v371 + 5588) = 0x7FFFFFFFLL;
    *(_DWORD *)(v371 + 5584) = 0;
    *(_QWORD *)(v371 + 5600) = 0;
    *(_DWORD *)(v371 + 5608) = 0;
    *(_QWORD *)(v371 + 5616) = 0;
    *(_DWORD *)(v371 + 5624) = 0;
    *(_OWORD *)(v371 + 5760) = 0uLL;
    *(_OWORD *)(v371 + 5776) = 0uLL;
    *(_DWORD *)(v371 + 5792) = 0;
    *(_QWORD *)(v371 + 5796) = 0x7FFFFFFFLL;
    *(_QWORD *)(v371 + 5808) = 0;
    v370 += 1456;
  }
  while (v370);
  *(_DWORD *)(v369 + 4368) = 0;
  *(_QWORD *)(v369 + 4376) = a1;
  *(_QWORD *)(a1 + 160) = v369;
  v372 = re::globalAllocators((re *)v369);
  v373 = (re::ShadowRenderManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v372[2] + 32))(v372[2], 896, 16);
  *(_QWORD *)(a1 + 168) = re::ShadowRenderManager::ShadowRenderManager(v373, (const re::RenderManager *)a1);
  *(_QWORD *)(a1 + 80) = v386;
  if (v386)
  {
    re::VFXManager::setRenderManager(v386, (id *)a1);
    *(_BYTE *)(*(_QWORD *)(a1 + 80) + 16) = *(_BYTE *)(a1 + 249);
  }
  return *(_BYTE *)(a1 + 180) != 0;
}

re *re::RenderManager::deinit(re::RenderManager *this)
{
  re::DrawingManager *v2;
  re::ShaderManager *v3;
  const char *v4;
  re::DrawingManager *v5;
  re::DrawingManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  uint64_t v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  re::MaterialManager *v27;
  re *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  _QWORD *v56;
  re *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  re::DeformationManager *v62;
  re *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t j;
  re::SamplerManager *v69;
  re *v70;
  re::SamplerManager *v71;
  uint64_t v72;
  re::ShaderManager *v73;
  re *v74;
  re::ShaderManager *v75;
  uint64_t v76;
  re::TextureManager *v77;
  re *v78;
  re::TextureManager *v79;
  uint64_t v80;
  re::TextManager *v81;
  uint64_t *v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  re *v102;
  uint64_t v103;
  re *v104;
  uint64_t v105;
  re *v106;
  uint64_t v107;
  re *result;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  re *v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  v2 = (re::DrawingManager *)*((_QWORD *)this + 13);
  if (v2 && !*((_BYTE *)v2 + 795))
    re::DrawingManager::prepareForDeinit(v2);
  v3 = (re::ShaderManager *)*((_QWORD *)this + 7);
  if (v3)
    re::ShaderManager::prepareForDeinit(v3);
  re::FrameManager::prepareForDeinit(*((os_unfair_lock_s **)this + 17));
  v5 = (re::DrawingManager *)*((_QWORD *)this + 13);
  if (v5)
  {
    re::DrawingManager::deinit(v5);
    v6 = (re::DrawingManager *)*((_QWORD *)this + 13);
    if (v6)
    {
      v7 = re::globalAllocators(v5)[2];
      re::DrawingManager::~DrawingManager(v6);
      v5 = (re::DrawingManager *)(*(uint64_t (**)(uint64_t, re::DrawingManager *))(*(_QWORD *)v7 + 40))(v7, v6);
    }
    *((_QWORD *)this + 13) = 0;
  }
  v8 = *((_QWORD *)this + 20);
  if (v8)
  {
    v9 = re::globalAllocators(v5)[2];
    v10 = 4368;
    do
    {
      v11 = v8 + v10;
      *(_QWORD *)(v11 - 208) = 0;
      *(_DWORD *)(v11 - 200) = *(_DWORD *)(v8 + v10 - 200) + 1;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v8 + v10 - 64));
      *(_QWORD *)(v11 - 224) = 0;
      *(_DWORD *)(v11 - 216) = 0;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v8 + v10 - 64));
      *(_QWORD *)(v11 - 208) = 0;
      ++*(_DWORD *)(v11 - 200);
      *(_QWORD *)(v11 - 1440) = 0;
      ++*(_DWORD *)(v11 - 1432);
      re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v8 + v10 - 272));
      *(_QWORD *)(v8 + v10 - 1456) = 0;
      *(_DWORD *)(v11 - 1448) = 0;
      v12 = re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v8 + v10 - 272));
      *(_QWORD *)(v11 - 1440) = 0;
      ++*(_DWORD *)(v11 - 1432);
      v10 -= 1456;
    }
    while (v10);
    v5 = (re::DrawingManager *)(*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v9 + 40))(v9, v8, v12);
    *((_QWORD *)this + 20) = 0;
  }
  v13 = *((_QWORD *)this + 21);
  if (v13)
  {
    v14 = re::globalAllocators(v5)[2];
    v15 = *(_QWORD *)(v13 + 864);
    if (v15)
    {
      if (*(_QWORD *)(v13 + 872))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(v13 + 880));
        *(_QWORD *)(v13 + 872) = 0;
        *(_QWORD *)(v13 + 880) = 0;
      }
      *(_QWORD *)(v13 + 864) = 0;
    }
    v16 = *(_QWORD *)(v13 + 856);
    if (v16)
    {

      *(_QWORD *)(v13 + 856) = 0;
    }
    v17 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v13 + 808));
    v18 = *(_QWORD *)(v13 + 768);
    if (v18)
    {
      if (*(_QWORD *)(v13 + 800))
        (*(void (**)(uint64_t, double))(*(_QWORD *)v18 + 40))(v18, v17);
      *(_QWORD *)(v13 + 800) = 0;
      *(_QWORD *)(v13 + 776) = 0;
      *(_QWORD *)(v13 + 784) = 0;
      *(_QWORD *)(v13 + 768) = 0;
      ++*(_DWORD *)(v13 + 792);
    }
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v13 + 720));
    v19 = *(void **)(v13 + 712);
    if (v19)
    {

      *(_QWORD *)(v13 + 712) = 0;
    }
    v20 = *(void **)(v13 + 704);
    if (v20)
    {

      *(_QWORD *)(v13 + 704) = 0;
    }
    v21 = *(void **)(v13 + 696);
    if (v21)
    {

      *(_QWORD *)(v13 + 696) = 0;
    }
    re::MeshShadowGenerationBacklog::~MeshShadowGenerationBacklog((re::MeshShadowGenerationBacklog *)(v13 + 600));
    v22 = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)(v13 + 552));
    v23 = *(_QWORD *)(v13 + 512);
    if (v23)
    {
      if (*(_QWORD *)(v13 + 544))
        (*(void (**)(uint64_t, double))(*(_QWORD *)v23 + 40))(v23, v22);
      *(_QWORD *)(v13 + 544) = 0;
      *(_QWORD *)(v13 + 520) = 0;
      *(_QWORD *)(v13 + 528) = 0;
      *(_QWORD *)(v13 + 512) = 0;
      ++*(_DWORD *)(v13 + 536);
    }
    v24 = (_QWORD *)(v13 + 336);
    re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v13 + 464));
    v25.n128_f64[0] = re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::deinit((uint64_t *)(v13 + 416));
    v26 = *(_QWORD *)(v13 + 376);
    if (v26)
    {
      if (*(_QWORD *)(v13 + 408))
        (*(void (**)(uint64_t, double))(*(_QWORD *)v26 + 40))(v26, v25.n128_f64[0]);
      *(_QWORD *)(v13 + 408) = 0;
      *(_QWORD *)(v13 + 384) = 0;
      *(_QWORD *)(v13 + 392) = 0;
      *(_QWORD *)(v13 + 376) = 0;
      ++*(_DWORD *)(v13 + 400);
    }
    if (*v24)
    {
      if (*(_QWORD *)(v13 + 368))
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)*v24 + 40))(*v24, v25);
      *(_QWORD *)(v13 + 368) = 0;
      *(_QWORD *)(v13 + 344) = 0;
      *(_QWORD *)(v13 + 352) = 0;
      *v24 = 0;
      ++*(_DWORD *)(v13 + 360);
    }
    std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v13 + 296));
    std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v13 + 256));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v13);
    *((_QWORD *)this + 21) = 0;
  }
  v27 = (re::MaterialManager *)*((_QWORD *)this + 3);
  if (v27)
  {
    v28 = (re *)re::MaterialManager::deinit(v27);
    v29 = *((_QWORD *)this + 3);
    if (v29)
    {
      v30 = re::globalAllocators(v28)[2];
      re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::deinit((uint64_t *)(v29 + 1192));
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v29 + 1144));
      re::DataArray<re::MaterialParameterBlock>::deinit(v29 + 1080);
      v31 = *(_QWORD *)(v29 + 1080);
      if (v31)
      {
        if (*(_QWORD *)(v29 + 1112))
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
        *(_QWORD *)(v29 + 1112) = 0;
        *(_QWORD *)(v29 + 1088) = 0;
        *(_QWORD *)(v29 + 1096) = 0;
        *(_QWORD *)(v29 + 1080) = 0;
        ++*(_DWORD *)(v29 + 1104);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v29 + 1032));
      v32.n128_f64[0] = re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit(v29 + 968);
      v33 = *(_QWORD *)(v29 + 904);
      if (v33)
      {
        v34 = *(_QWORD *)(v29 + 936);
        if (v34)
        {
          v35 = *(_QWORD *)(v29 + 920);
          if (v35)
          {
            v36 = v35 << 6;
            do
            {
              v32.n128_f64[0] = re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v34);
              v34 += 64;
              v36 -= 64;
            }
            while (v36);
            v33 = *(_QWORD *)(v29 + 904);
            v34 = *(_QWORD *)(v29 + 936);
          }
          (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v33 + 40))(v33, v34, v32);
        }
        *(_QWORD *)(v29 + 936) = 0;
        *(_QWORD *)(v29 + 912) = 0;
        *(_QWORD *)(v29 + 920) = 0;
        *(_QWORD *)(v29 + 904) = 0;
        ++*(_DWORD *)(v29 + 928);
      }
      v37 = *(void **)(v29 + 880);
      if (v37)
      {

        *(_QWORD *)(v29 + 880) = 0;
      }
      v38 = *(void **)(v29 + 872);
      if (v38)
      {

        *(_QWORD *)(v29 + 872) = 0;
      }
      v39 = *(void **)(v29 + 864);
      if (v39)
      {

        *(_QWORD *)(v29 + 864) = 0;
      }
      v40 = *(void **)(v29 + 856);
      if (v40)
      {

        *(_QWORD *)(v29 + 856) = 0;
      }
      v41 = *(void **)(v29 + 848);
      if (v41)
      {

        *(_QWORD *)(v29 + 848) = 0;
      }
      v42 = *(void **)(v29 + 840);
      if (v42)
      {

        *(_QWORD *)(v29 + 840) = 0;
      }
      v43 = *(void **)(v29 + 832);
      if (v43)
      {

        *(_QWORD *)(v29 + 832) = 0;
      }
      v44 = *(void **)(v29 + 824);
      if (v44)
      {

        *(_QWORD *)(v29 + 824) = 0;
      }
      v45 = *(void **)(v29 + 816);
      if (v45)
      {

        *(_QWORD *)(v29 + 816) = 0;
      }
      v46 = *(void **)(v29 + 808);
      if (v46)
      {

        *(_QWORD *)(v29 + 808) = 0;
      }
      v47 = *(void **)(v29 + 800);
      if (v47)
      {

        *(_QWORD *)(v29 + 800) = 0;
      }
      v48 = *(void **)(v29 + 792);
      if (v48)
      {

        *(_QWORD *)(v29 + 792) = 0;
      }
      v49 = *(void **)(v29 + 784);
      if (v49)
      {

        *(_QWORD *)(v29 + 784) = 0;
      }
      v50 = *(void **)(v29 + 776);
      if (v50)
      {

        *(_QWORD *)(v29 + 776) = 0;
      }
      v51 = *(void **)(v29 + 768);
      if (v51)
      {

        *(_QWORD *)(v29 + 768) = 0;
      }
      v52 = *(void **)(v29 + 760);
      if (v52)
      {

        *(_QWORD *)(v29 + 760) = 0;
      }
      re::FixedArray<re::DynamicString>::deinit((_QWORD *)(v29 + 736));
      v53 = *(_QWORD *)(v29 + 672);
      if (v53)
      {
        if (*(_QWORD *)(v29 + 704))
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
        *(_QWORD *)(v29 + 704) = 0;
        *(_QWORD *)(v29 + 680) = 0;
        *(_QWORD *)(v29 + 688) = 0;
        *(_QWORD *)(v29 + 672) = 0;
        ++*(_DWORD *)(v29 + 696);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v29 + 592));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v29 + 544));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v29 + 496));
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)(v29 + 440));
      re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit(v29 + 400);
      v54 = *(_QWORD *)(v29 + 392);
      if (v54)
      {
        if (*(_QWORD *)(v29 + 344))
          *(_QWORD *)(v29 + 344) = 0;
        if (*(_QWORD *)(v29 + 336))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
          *(_QWORD *)(v29 + 336) = 0;
        }
        *(_OWORD *)(v29 + 368) = 0u;
        *(_OWORD *)(v29 + 384) = 0u;
        *(_OWORD *)(v29 + 352) = 0u;
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v29 + 288));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v29 + 240));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v29 + 192));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v29 + 144));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v29 + 96));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v29 + 48));
      v55 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v29);
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v30 + 40))(v30, v29, v55);
    }
    *((_QWORD *)this + 3) = 0;
  }
  v56 = (_QWORD *)*((_QWORD *)this + 4);
  if (v56)
  {
    re::DataArray<re::MeshModel>::deinit((uint64_t)(v56 + 1));
    v57 = (re *)re::DataArray<re::MeshInstance>::deinit((uint64_t)(v56 + 9));
    *v56 = 0;
    v58 = *((_QWORD *)this + 4);
    if (v58)
    {
      v59 = re::globalAllocators(v57)[2];
      v60 = (_QWORD *)(v58 + 8);
      re::DataArray<re::MeshModel>::deinit(v58 + 8);
      re::DataArray<re::MeshInstance>::deinit(v58 + 72);
      *(_QWORD *)v58 = 0;

      re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit((uint64_t *)(v58 + 136));
      re::DataArray<re::MeshInstance>::deinit(v58 + 72);
      v61 = *(_QWORD *)(v58 + 72);
      if (v61)
      {
        if (*(_QWORD *)(v58 + 104))
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
        *(_QWORD *)(v58 + 104) = 0;
        *(_QWORD *)(v58 + 80) = 0;
        *(_QWORD *)(v58 + 88) = 0;
        *(_QWORD *)(v58 + 72) = 0;
        ++*(_DWORD *)(v58 + 96);
      }
      re::DataArray<re::MeshModel>::deinit(v58 + 8);
      if (*v60)
      {
        if (*(_QWORD *)(v58 + 40))
          (*(void (**)(_QWORD))(*(_QWORD *)*v60 + 40))(*v60);
        *(_QWORD *)(v58 + 40) = 0;
        *(_QWORD *)(v58 + 16) = 0;
        *(_QWORD *)(v58 + 24) = 0;
        *v60 = 0;
        ++*(_DWORD *)(v58 + 32);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 40))(v59, v58);
    }
    *((_QWORD *)this + 4) = 0;
  }
  v62 = (re::DeformationManager *)*((_QWORD *)this + 5);
  if (v62)
  {
    v63 = (re *)re::DeformationManager::deinit(v62);
    v64 = *((_QWORD *)this + 5);
    if (v64)
    {
      v65 = re::globalAllocators(v63)[2];
      re::DataArray<re::DeformationStack>::deinit(v64 + 1416);
      v66 = *(_QWORD *)(v64 + 1416);
      if (v66)
      {
        if (*(_QWORD *)(v64 + 1448))
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
        *(_QWORD *)(v64 + 1448) = 0;
        *(_QWORD *)(v64 + 1424) = 0;
        *(_QWORD *)(v64 + 1432) = 0;
        *(_QWORD *)(v64 + 1416) = 0;
        ++*(_DWORD *)(v64 + 1440);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v64 + 1368));
      for (i = 1328; i != 608; i -= 40)
        std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v64 + i));
      re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::deinit(v64 + 592);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v64 + 592);
      re::BucketArray<unsigned long,8ul>::deinit(v64 + 536);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v64 + 536);
      for (j = 472; j != -40; j -= 64)
      {
        re::BucketArray<unsigned long,8ul>::deinit(v64 + j);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v64 + j);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 40))(v65, v64);
    }
    *((_QWORD *)this + 5) = 0;
  }
  v69 = (re::SamplerManager *)*((_QWORD *)this + 6);
  if (v69)
  {
    re::SamplerManager::deinit(v69);
    v71 = (re::SamplerManager *)*((_QWORD *)this + 6);
    if (v71)
    {
      v72 = re::globalAllocators(v70)[2];
      re::SamplerManager::~SamplerManager(v71);
      (*(void (**)(uint64_t, re::SamplerManager *))(*(_QWORD *)v72 + 40))(v72, v71);
    }
    *((_QWORD *)this + 6) = 0;
  }
  v73 = (re::ShaderManager *)*((_QWORD *)this + 7);
  if (v73)
  {
    v74 = re::ShaderManager::deinit(v73, v4);
    v75 = (re::ShaderManager *)*((_QWORD *)this + 7);
    if (v75)
    {
      v76 = re::globalAllocators(v74)[2];
      re::ShaderManager::~ShaderManager(v75);
      (*(void (**)(uint64_t, re::ShaderManager *))(*(_QWORD *)v76 + 40))(v76, v75);
    }
    *((_QWORD *)this + 7) = 0;
  }
  v77 = (re::TextureManager *)*((_QWORD *)this + 8);
  if (v77)
  {
    re::TextureManager::deinit(v77);
    v79 = (re::TextureManager *)*((_QWORD *)this + 8);
    if (v79)
    {
      v80 = re::globalAllocators(v78)[2];
      re::TextureManager::~TextureManager(v79);
      (*(void (**)(uint64_t, re::TextureManager *))(*(_QWORD *)v80 + 40))(v80, v79);
    }
    *((_QWORD *)this + 8) = 0;
  }
  v81 = (re::TextManager *)*((_QWORD *)this + 9);
  if (v81)
  {
    re::TextManager::deinit(v81);
    v82 = (uint64_t *)*((_QWORD *)this + 9);
    if (v82)
    {
      v83 = re::globalAllocators(v81)[2];
      re::GrowableLinearAllocator::~GrowableLinearAllocator((re::GrowableLinearAllocator *)(v82 + 15));
      re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit(v82 + 7);
      v84 = re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v82 + 1);
      v81 = (re::TextManager *)(*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v83 + 40))(v83, v82, v84);
    }
    *((_QWORD *)this + 9) = 0;
  }
  *((_QWORD *)this + 10) = 0;
  v85 = *((_QWORD *)this + 11);
  if (v85)
  {
    re::s_debugSettingsManager = 0;
    v86 = re::globalAllocators(v81)[2];
    std::mutex::~mutex((std::mutex *)(v85 + 48));
    v87 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v85);
    v81 = (re::TextManager *)(*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v86 + 40))(v86, v85, v87);
    *((_QWORD *)this + 11) = 0;
  }
  v88 = (_QWORD *)*((_QWORD *)this + 14);
  if (v88)
  {
    v89 = re::globalAllocators(v81)[2];
    v90 = v88[245];
    if (v90)
    {
      if (v88[246])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 40))(v90, v88[247]);
        v88[246] = 0;
        v88[247] = 0;
      }
      v88[245] = 0;
    }
    v91 = v88[242];
    if (v91)
    {
      if (v88[243])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 40))(v91, v88[244]);
        v88[243] = 0;
        v88[244] = 0;
      }
      v88[242] = 0;
    }
    v92 = v88[239];
    if (v92)
    {
      if (v88[240])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 40))(v92, v88[241]);
        v88[240] = 0;
        v88[241] = 0;
      }
      v88[239] = 0;
    }
    v93 = (void *)v88[230];
    if (v93)
    {

      v88[230] = 0;
    }
    v94 = (void *)v88[229];
    if (v94)
    {

      v88[229] = 0;
    }
    re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::~SmallHashTable((uint64_t)(v88 + 2));
    v81 = (re::TextManager *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 40))(v89, v88);
    *((_QWORD *)this + 14) = 0;
  }
  v95 = *((_QWORD *)this + 15);
  if (v95)
  {
    v96 = re::globalAllocators(v81)[2];
    v97 = *(_QWORD *)(v95 + 192);
    if (v97)
    {
      if ((*(_BYTE *)(v95 + 200) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 40))(v97, *(_QWORD *)(v95 + 208));
      *(_OWORD *)(v95 + 192) = 0u;
      *(_OWORD *)(v95 + 208) = 0u;
    }
    v98 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(v95 + 160);
    if (v98)
      v98(0, v95 + 160, 0, 0, 0);
    v81 = (re::TextManager *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v96 + 40))(v96, v95);
    *((_QWORD *)this + 15) = 0;
  }
  v99 = (_QWORD *)*((_QWORD *)this + 16);
  if (v99)
  {
    v100 = re::globalAllocators(v81)[2];
    re::DataArray<re::DisplayStatsManager::MetricState>::deinit((uint64_t)v99);
    re::DataArray<re::DisplayStatsManager::MetricState>::~DataArray(v99);
    v81 = (re::TextManager *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v100 + 40))(v100, v99);
    *((_QWORD *)this + 16) = 0;
  }
  *((_BYTE *)this + 180) = 0;
  v101 = *((_QWORD *)this + 17);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = re::globalAllocators(v81)[2];
  v113 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v101 + 128, (uint64_t)&v109);
  v102 = v113;
  if (v113)
  {
    v102 = (re *)(**(uint64_t (***)(re *))v113)(v113);
    if (v113 != (re *)&v109)
      v102 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112);
  }
  v103 = *((_QWORD *)this + 17);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = re::globalAllocators(v102)[2];
  v113 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v103 + 168, (uint64_t)&v109);
  v104 = v113;
  if (v113)
  {
    v104 = (re *)(**(uint64_t (***)(re *))v113)(v113);
    if (v113 != (re *)&v109)
      v104 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112);
  }
  v105 = *((_QWORD *)this + 17);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = re::globalAllocators(v104)[2];
  v113 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v105 + 208, (uint64_t)&v109);
  v106 = v113;
  if (v113)
  {
    v106 = (re *)(**(uint64_t (***)(re *))v113)(v113);
    if (v113 != (re *)&v109)
      v106 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112);
  }
  v107 = *((_QWORD *)this + 17);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = re::globalAllocators(v106)[2];
  v113 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v107 + 248, (uint64_t)&v109);
  result = v113;
  if (v113)
  {
    result = (re *)(**(uint64_t (***)(re *))v113)(v113);
    if (v113 != (re *)&v109)
      result = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112);
  }
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t re::RenderManager::perFrameAllocator(re::RenderManager *this)
{
  re::RenderManager *v1;
  uint64_t v2;
  uint64_t *v4;

  v1 = this;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    this = (re::RenderManager *)re::RenderFrameBox::get(v2 + 344, *(_QWORD *)(*((_QWORD *)this + 17) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*((_QWORD *)this + 17) + 16) << 60));
    if (this)
      return *((_QWORD *)this + 47);
  }
  v4 = re::globalAllocators(this);
  return re::PerFrameAllocatorManager::perFrameAllocator(v4[6], *(_QWORD *)(*((_QWORD *)v1 + 17) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*((_QWORD *)v1 + 17) + 16) << 60));
}

void re::RenderManager::addDelayedDestructorToRenderThread(pthread_t a1, uint64_t a2)
{
  pthread_t v3;
  uint64_t v4;
  _opaque_pthread_t **v5;
  _opaque_pthread_t *v6;
  BOOL v7;
  os_unfair_lock_s *v8;

  v3 = a1;
  v4 = *(_QWORD *)&a1->__opaque[88];
  if (v4)
  {
    v5 = *(_opaque_pthread_t ***)(v4 + 328);
    if (v5)
    {
      a1 = pthread_self();
      v6 = *v5;
      if (a1)
      {
        if (v6)
          v7 = a1 == v6;
        else
          v7 = 0;
        if (!v7)
          goto LABEL_11;
LABEL_9:
        (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32));
        return;
      }
      if (!v6)
        goto LABEL_9;
    }
  }
LABEL_11:
  v8 = *(os_unfair_lock_s **)&v3->__opaque[120];
}

BOOL re::RenderManager::isRenderThread(re::RenderManager *this)
{
  uint64_t v1;
  _opaque_pthread_t **v2;
  pthread_t v3;
  _opaque_pthread_t *v4;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_opaque_pthread_t ***)(v1 + 328);
  if (!v2)
    return 0;
  v3 = pthread_self();
  v4 = *v2;
  if (v3)
    return v4 && v3 == v4;
  else
    return v4 == 0;
}

void re::RenderManager::sampleComputeEncoderMTLCounterBegin(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v3;
  id v5;

  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    v5 = *a2;
    re::DrawingManager::sampleComputeEncoderMTLCounterBegin(v3, &v5, a3);

  }
}

void re::RenderManager::sampleComputeEncoderMTLCounterEnd(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v3;
  id v5;

  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    v5 = *a2;
    re::DrawingManager::sampleComputeEncoderMTLCounterEnd(v3, &v5, a3);

  }
}

void re::RenderManager::enableMTLCounterSamplingOnRenderPassDescriptor(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v3;
  id v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    v5 = *a2;
    v6 = v5;
    re::DrawingManager::enableMTLCounterSamplingOnRenderPassDescriptor(v3, &v6, a3);
    if (v5)

  }
}

void re::RenderManager::makeComputeCommandEncoderWithMTLCounterSampling(uint64_t a1@<X0>, id *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  id v7;

  v6 = *(_QWORD *)(a1 + 104);
  v7 = *a2;
  re::DrawingManager::makeComputeCommandEncoderWithMTLCounterSampling(v6, &v7, a3, a4);

}

void re::RenderManager::reloadLibrary(re::RenderManager *this, const char *a2, const char *a3)
{
  _opaque_pthread_t **v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = (_opaque_pthread_t **)*((_QWORD *)this + 13);
  if (v3)
  {
    re::DrawingManager::reloadLibrary(v3, a2, a3);
  }
  else
  {
    v4 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "RenderManager::reloadLibrary called, but DrawingManager does not exist!", v5, 2u);
    }
  }
}

uint64_t re::RenderManager::registerRenderLayer(uint64_t a1, id *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v5;

  v2 = *(_QWORD *)(a1 + 104);
  if (!v2)
    return 0xFFFFFFFFLL;
  v5 = *a2;
  v3 = re::DrawingManager::registerRenderLayer(v2, &v5);

  return v3;
}

float re::RenderManager::getLayerSize(re::RenderManager *this, unsigned int a2, double a3, double a4)
{
  re::DrawingManager *v4;

  v4 = (re::DrawingManager *)*((_QWORD *)this + 13);
  if (v4)
    return re::DrawingManager::getLayerSize(v4, a2, a3, a4);
  else
    return 1.0;
}

re::RenderManager *re::RenderManager::createDrawingManager(re::RenderManager *this)
{
  re::RenderManager *v1;
  uint64_t *v2;
  re::DrawingManager *v3;
  re::DrawingManager *v4;

  if (!*((_QWORD *)this + 13))
  {
    v1 = this;
    v2 = re::globalAllocators(this);
    v3 = (re::DrawingManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 1776, 8);
    re::DrawingManager::DrawingManager(v3);
    *((_QWORD *)v1 + 13) = v4;
    return (re::RenderManager *)re::DrawingManager::init(v4, v1, 0, *((re::ColorManager **)v1 + 19));
  }
  return this;
}

uint64_t re::RenderManager::splitCommandBuffersForDebugging(re::RenderManager *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = (unsigned __int8 *)&unk_255829000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255829000;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"splitCommandBuffersForDebugging", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 0;
      re::RenderManager::splitCommandBuffersForDebugging(void)const::kSplitCommandBuffersForDebugging = v6;
      v2 = (_BYTE *)&unk_255829000;
    }
  }
  return v2[2352];
}

uint64_t re::RenderManager::isProtoStereoRenderingEnabled(re::RenderManager *this)
{
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN2re13RenderManager29isProtoStereoRenderingEnabledEv_block_invoke;
  block[3] = &__block_descriptor_tmp_30;
  block[4] = this;
  if (re::RenderManager::isProtoStereoRenderingEnabled(void)::onceToken != -1)
    dispatch_once(&re::RenderManager::isProtoStereoRenderingEnabled(void)::onceToken, block);
  return *((unsigned __int8 *)this + 312);
}

void ___ZN2re13RenderManager29isProtoStereoRenderingEnabledEv_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v2;
  re *v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  uint8_t buf[2];
  char v10;
  unsigned __int8 v11;

  v2 = *(_QWORD *)(a1 + 32);
  re::Defaults::BOOLValue((re::Defaults *)"ProtoStereoRendering", a2, &v10);
  if (v10)
  {
    v4 = v11;
    *(_BYTE *)(v2 + 312) = v11;
    if (v4)
    {
      v5 = *re::graphicsLogObjects(v3);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        return;
      v8 = 0;
      v6 = "Proto stereo rendering is enabled.";
      v7 = (uint8_t *)&v8;
      goto LABEL_8;
    }
  }
  else
  {
    *(_BYTE *)(v2 + 312) = 0;
  }
  v5 = *re::graphicsLogObjects(v3);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    return;
  *(_WORD *)buf = 0;
  v6 = "Proto stereo rendering is disabled.";
  v7 = buf;
LABEL_8:
  _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
}

uint64_t *re::allocInfo_RenderManager(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411A6A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411A6A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A6A8, 0);
    *(uint64_t *)((char *)&qword_25411A6B8 + 6) = 0;
    qword_25411A6B8 = 0;
    qword_25411A6C8 = 0;
    qword_25411A6D0 = 0xFFFFFFFFLL;
    qword_25411A6A8 = (uint64_t)&off_24ED7DAA8;
    qword_25411A6D8 = (uint64_t)"RenderManager";
    dword_25411A6E0 = 0;
    unk_25411A6E8 = 0u;
    unk_25411A6F8 = 0u;
    unk_25411A708 = 0u;
    qword_25411A718 = 0;
    __cxa_guard_release(&qword_25411A6A0);
  }
  return &qword_25411A6A8;
}

void re::initInfo_RenderManager(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x4A7E34345895822ELL;
  v5[1] = "RenderManager";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_RenderManager(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderManager>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderManager>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderManager>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderManager>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::RenderManager *re::internal::defaultConstruct<re::RenderManager>(int a1, int a2, re::RenderManager *this)
{
  return re::RenderManager::RenderManager(this);
}

void re::internal::defaultDestruct<re::RenderManager>(int a1, int a2, re::RenderManager *this)
{
  re::RenderManager::~RenderManager(this);
}

uint64_t re::introspect_RenderManager(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderManager", (uint64_t (*)(re::internal *))re::allocInfo_RenderManager, (re::IntrospectionBase *(*)(void))re::initInfo_RenderManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderManager>, this);
}

void re::FenceDeformer::~FenceDeformer(re::FenceDeformer *this)
{
  JUMPOUT(0x2276933B8);
}

void re::FenceDeformer::addDeformationInstance(re::FenceDeformer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  _anonymous_namespace_ *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  _OWORD v21[5];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(int64x2_t *)(a3 + 8) = vdupq_n_s64(2uLL);
  *(_BYTE *)(a3 + 24) = 1;
  if (*a2)
  {
    *(_QWORD *)&v21[0] = 0;
    *((_QWORD *)&v21[0] + 1) = &str_110;
    v5 = *(_QWORD *)&v21[0] >> 1;
    *(_QWORD *)(a3 + 40) = 0;
    v6 = (uint64_t *)(a3 + 40);
    *(v6 - 1) = v5;
    v6[1] = 0;
    v6[2] = 0;
    re::StringID::destroyString((re::StringID *)v21);
  }
  else
  {
    *(_QWORD *)(a3 + 40) = 0;
    v6 = (uint64_t *)(a3 + 40);
    *(_QWORD *)(a3 + 32) = -1;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  if (*((unsigned __int8 *)a2 + 256) != 255)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    if (!v10)
    {
      v12 = 0;
      memset(v21, 0, sizeof(v21));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v13 = 136315906;
      v14 = "operator[]";
      v15 = 1024;
      v16 = 468;
      v17 = 2048;
      v18 = 0;
      v19 = 2048;
      v20 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v8 = v11;
    *v11 = a2[256];
    *(_QWORD *)&v21[0] = 0;
    *((_QWORD *)&v21[0] + 1) = &str_110;
    *((_QWORD *)v8 + 1) = *(_QWORD *)&v21[0] >> 1;
    re::StringID::destroyString((re::StringID *)v21);
    re::FixedArray<float>::operator=(v6, &v9);
    if (v9)
    {
      if (v10)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
}

uint64_t re::FenceDeformer::allocateBuffers()
{
  return 0;
}

_QWORD *re::FixedArray<re::Pair<re::DeformerType,unsigned long long,true>>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_BYTE *)result = 0;
      result[1] = 0;
      result += 2;
      --v6;
    }
    while (v6);
  }
  *(_BYTE *)result = 0;
  result[1] = 0;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED784A0;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED784A0;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::operator()(re *result, re::BlendShapeDeformer **a2)
{
  re::BlendShapeDeformer *v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    re::BlendShapeDeformer::~BlendShapeDeformer(v2);
    return (re *)(*(uint64_t (**)(uint64_t, re::BlendShapeDeformer *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED78530;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED78530;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78530;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78530;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78598;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78598;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED78598;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78598;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED78628;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78628;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    for (i = 32784; i != 16; i -= 8)
    {
      v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(_QWORD *)(v2 + i) = 0;
      }
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED786B8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED786B8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED786B8;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED786B8;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78720;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78720;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED78720;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78720;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED787A0;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED787A0;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    v4 = *(void **)(v2 + 16);
    if (v4)
    {

      *(_QWORD *)(v2 + 16) = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED78830;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED78830;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78830;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78830;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78898;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78898;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED78898;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78898;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED78918;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78918;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    for (i = 144; i != 16; i -= 8)
    {
      v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(_QWORD *)(v2 + i) = 0;
      }
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED789A8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED789A8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED789A8;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED789A8;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78A10;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78A10;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED78A10;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78A10;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED78A90;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78A90;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    for (i = 48; i != 16; i -= 8)
    {
      v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(_QWORD *)(v2 + i) = 0;
      }
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED78B20;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED78B20;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78B20;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78B20;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78B88;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78B88;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED78B88;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78B88;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED78C08;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78C08;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    v4 = *(void **)(v2 + 8);
    if (v4)
    {

      *(_QWORD *)(v2 + 8) = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED78C98;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED78C98;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78C98;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78C98;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78D00;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78D00;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED78D00;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78D00;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED78D80;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78D80;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    for (i = 24; i != 8; i -= 8)
    {
      v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(_QWORD *)(v2 + i) = 0;
      }
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED78E10;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED78E10;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78E10;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78E10;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78E78;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78E78;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED78E78;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78E78;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED78EF8;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78EF8;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    v4 = 16;
    do
    {
      v5 = *(void **)(v2 + v4);
      if (v5)
      {

        *(_QWORD *)(v2 + v4) = 0;
      }
      v4 -= 8;
    }
    while (v4);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED78F88;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED78F88;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78F88;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED78F88;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78FF0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED78FF0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED78FF0;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED78FF0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED79070;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79070;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    for (i = 24; i != 8; i -= 8)
    {
      v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(_QWORD *)(v2 + i) = 0;
      }
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED79100;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED79100;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79100;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79100;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79168;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79168;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED79168;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79168;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED791E8;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED791E8;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::operator()(re *result, re::PrepareSimplifiedMeshBuffer **a2)
{
  re::PrepareSimplifiedMeshBuffer *v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    re::PrepareSimplifiedMeshBuffer::~PrepareSimplifiedMeshBuffer(v2);
    return (re *)(*(uint64_t (**)(uint64_t, re::PrepareSimplifiedMeshBuffer *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::target_type()
{
}

void re::PrepareSimplifiedMeshBuffer::~PrepareSimplifiedMeshBuffer(re::PrepareSimplifiedMeshBuffer *this)
{
  void *v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;

  v2 = (void *)*((_QWORD *)this + 41);
  if (v2)
  {

    *((_QWORD *)this + 41) = 0;
  }
  for (i = 0; i != -320; i -= 40)
  {
    v4 = (_QWORD *)((char *)this + i);
    v5 = *(_QWORD *)((char *)this + i + 288);
    if (v5)
    {
      if (v4[40])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v4[40] = 0;
      v4[37] = 0;
      v4[38] = 0;
      v4[36] = 0;
      ++*(_DWORD *)((char *)this + i + 312);
    }
  }
}

{
  re::PrepareSimplifiedMeshBuffer::~PrepareSimplifiedMeshBuffer(this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED79278;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED79278;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79278;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79278;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED792E0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED792E0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED792E0;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED792E0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED79360;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79360;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator()(re *result, re::OpenSubdivViewIndependentComputeStep **a2)
{
  re::OpenSubdivViewIndependentComputeStep *v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    re::OpenSubdivViewIndependentComputeStep::~OpenSubdivViewIndependentComputeStep(v2);
    return (re *)(*(uint64_t (**)(uint64_t, re::OpenSubdivViewIndependentComputeStep *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::target_type()
{
}

void re::OpenSubdivViewIndependentComputeStep::~OpenSubdivViewIndependentComputeStep(re::OpenSubdivViewIndependentComputeStep *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {

    *((_QWORD *)this + 4) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {

    *((_QWORD *)this + 3) = 0;
  }
}

{
  re::OpenSubdivViewIndependentComputeStep::~OpenSubdivViewIndependentComputeStep(this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED793F0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED793F0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED793F0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED793F0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79458;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79458;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED79458;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79458;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED794D8;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED794D8;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    v4 = *(void **)(v2 + 24);
    if (v4)
    {

      *(_QWORD *)(v2 + 24) = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED79568;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED79568;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79568;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79568;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED795D0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED795D0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED795D0;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED795D0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED79650;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79650;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    v4 = *(_QWORD *)(v2 + 128);
    if (v4)
    {
      if (*(_QWORD *)(v2 + 160))
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      *(_QWORD *)(v2 + 160) = 0;
      *(_QWORD *)(v2 + 136) = 0;
      *(_QWORD *)(v2 + 144) = 0;
      *(_QWORD *)(v2 + 128) = 0;
      ++*(_DWORD *)(v2 + 152);
    }
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v2 + 72));
    re::DataArray<re::CustomDeformers::CustomDeformerData>::~DataArray((_QWORD *)(v2 + 8));
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED796E0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED796E0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED796E0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED796E0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79748;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79748;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED79748;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79748;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED797C8;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED797C8;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3[2] + 40))(v3[2], v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED79858;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED79858;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79858;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79858;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED798C0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED798C0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED798C0;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED798C0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED79940;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79940;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    v4 = 32;
    do
    {
      v5 = *(void **)(v2 + v4);
      if (v5)
      {

        *(_QWORD *)(v2 + v4) = 0;
      }
      v4 -= 8;
    }
    while (v4);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::target_type()
{
}

_QWORD *re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED799D0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED799D0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED799D0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED799D0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79A38;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79A38;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED79A38;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79A38;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED79AB8;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79AB8;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::operator()(re *result, re::JiggleDeformer **a2)
{
  re::JiggleDeformer *v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    re::JiggleDeformer::~JiggleDeformer(v2);
    return (re *)(*(uint64_t (**)(uint64_t, re::JiggleDeformer *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::target_type()
{
}

void re::JiggleDeformer::~JiggleDeformer(re::JiggleDeformer *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {

    *((_QWORD *)this + 25) = 0;
  }
  re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::deinit((uint64_t)this + 144);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 144);
  re::DataArray<unsigned long>::~DataArray((_QWORD *)this + 10);
  re::BucketArray<unsigned long,64ul>::deinit((uint64_t)this + 24);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 24);
}

{
  re::JiggleDeformer::~JiggleDeformer(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::operator[](a1, i);
      v5 = *(void **)(v4 + 8);
      if (v5)
      {

        *(_QWORD *)(v4 + 8) = 0;
      }
      if (*(_QWORD *)v4)
      {

        *(_QWORD *)v4 = 0;
      }
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 6)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 6)) + 16 * (a2 & 0x3F);
}

_QWORD *re::DataArray<unsigned long>::~DataArray(_QWORD *a1)
{
  re::DataArray<unsigned long>::deinit((uint64_t)a1);
  if (*a1)
  {
    if (a1[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

uint64_t re::DataArray<unsigned long>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<unsigned long>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<unsigned long>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle((unsigned __int16 *)v12);
      re::DataArray<unsigned long>::destroy((uint64_t)a1, v4);
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

_DWORD *re::DataArray<unsigned long>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  _DWORD *result;

  v2 = a2;
  v4 = a2 >> 16;
  result = (_DWORD *)re::DataArray<re::ecs2::Component *>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *result = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

unint64_t re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle(unsigned __int16 *a1)
{
  unint64_t v1;

  v1 = a1[5];
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) <= v1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return (v1 << 16) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v1 + 8)
                                                    + 4 * a1[4]) & 0xFFFFFF) << 32) | a1[4];
}

uint64_t re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = v2 - 1;
  if (v2 - 1 > a2)
  {
    *(_OWORD *)(*(_QWORD *)(result + 32) + 16 * a2) = *(_OWORD *)(*(_QWORD *)(result + 32) + 16 * v2 - 16);
    v3 = *(_QWORD *)(result + 16) - 1;
  }
  *(_QWORD *)(result + 16) = v3;
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator(uint64_t a1, uint64_t a2, char a3)
{
  *(_QWORD *)a1 = a2;
  if ((a3 & 1) != 0 || !*(_DWORD *)(a2 + 40))
  {
    *(_DWORD *)(a1 + 8) = -1;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    if (!*(_QWORD *)(a2 + 16))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (!**(_DWORD **)(*(_QWORD *)(a2 + 32) + 8))
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment((_WORD *)a1);
  }
  return a1;
}

_WORD *re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(_WORD *result)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  unsigned __int16 v5;

  v1 = *(_QWORD *)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  v3 = v2 - 1;
  v4 = result[4];
  v5 = result[5];
  while (1)
  {
    ++v4;
    if (v5 < v3 && *(_DWORD *)(v1 + 44) <= v4)
    {
      v4 = 0;
      result[5] = ++v5;
    }
    if (v5 == v3 && *(_DWORD *)(v1 + 48) <= v4)
      break;
    if (v2 <= v5)
    {
      result[4] = v4;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 16 * v5 + 8) + 4 * v4))
    {
      result[4] = v4;
      return result;
    }
  }
  *((_DWORD *)result + 2) = -1;
  return result;
}

uint64_t re::BucketArray<unsigned long,64ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<unsigned long,64ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<unsigned long,64ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 6)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 6)) + 8 * (a2 & 0x3F);
}

_QWORD *re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED79B48;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::~Callable(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24ED79B48;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::cloneInto(v4, v5);
}

_QWORD *re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79B48;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

_QWORD *re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24ED79B48;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      a2[4] = v4;
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::size()
{
  return 40;
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79BB0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(_QWORD *a1)
{
  *a1 = &off_24ED79BB0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *v3 = &off_24ED79BB0;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED79BB0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

double re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 368;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 72 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 72;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DataArray<re::MeshInstance>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::MeshInstance>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::MeshInstance>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle((unsigned __int16 *)v12);
      re::DataArray<re::MeshInstance>::destroy((uint64_t)a1, v4);
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

void re::DataArray<re::MeshInstance>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  re::MeshInstance *v5;
  _DWORD *v6;

  v2 = a2;
  v4 = a2 >> 16;
  v5 = (re::MeshInstance *)re::DataArray<re::MeshInstance>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (v5)
  {
    re::MeshInstance::~MeshInstance(v5);
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
}

uint64_t re::DataArray<re::MeshModel>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::MeshModel>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::MeshModel>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle((unsigned __int16 *)v12);
      re::DataArray<re::MeshModel>::destroy((uint64_t)a1, v4);
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

void re::DataArray<re::MeshModel>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  re::MeshModel *v5;
  _DWORD *v6;

  v2 = a2;
  v4 = a2 >> 16;
  v5 = (re::MeshModel *)re::DataArray<re::MeshModel>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (v5)
  {
    re::MeshModel::~MeshModel(v5);
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
}

uint64_t re::DataArray<re::DeformationStack>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::DeformationStack>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::DeformationStack>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle((unsigned __int16 *)v12);
      re::DataArray<re::DeformationStack>::destroy((uint64_t)a1, v4);
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

uint64_t re::DataArray<re::DeformationStack>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t result;
  _DWORD *v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = a2;
  v4 = a2 >> 16;
  result = re::DataArray<re::DeformationStack>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    v6 = (_DWORD *)result;
    for (i = 0; i != -60; i -= 6)
    {
      v8 = &v6[i];
      v9 = *(_QWORD *)&v6[i + 252];
      if (v9)
      {
        if (v8[127])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)&v6[i + 256]);
          v8[127] = 0;
          v8[128] = 0;
        }
        v8[126] = 0;
      }
    }
    v10 = 160;
    do
    {
      v11 = &v6[v10];
      result = *(_QWORD *)&v6[v10 + 6];
      if (result)
      {
        if (v11[4])
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)&v6[v10 + 10]);
          v11[4] = 0;
          v11[5] = 0;
        }
        v11[3] = 0;
      }
      v10 -= 16;
    }
    while (v10 * 4);
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::DataArray<re::DeformationStack>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 1032 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t re::MaterialParameterBlock::MaterialParameterBlock(re::MaterialParameterBlock *this, const re::MaterialParameterBlock *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED67810;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 0;
  bzero((char *)this + 176, 0x2ECuLL);
  *(_QWORD *)((char *)this + 924) = 0x7FFFFFFFLL;
  *((_BYTE *)this + 936) = 0;
  *((_BYTE *)this + 948) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 123) = 0xFFFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 124) = 0;
  *((_QWORD *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
  return re::MaterialParameterBlock::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t re::MaterialParameterBlock::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t i;
  uint64_t v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  re::MaterialParameterBlock::disconnectFromTextureHandles((_QWORD *)a1);
  re::DynamicArray<BOOL>::operator=(a1 + 24, (uint64_t *)(a2 + 24));
  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 64);
    if (*(_QWORD *)(a1 + 64))
    {
      v5 = (_QWORD *)(a1 + 64);
      if (v4)
      {
        re::DynamicArray<re::TextureHandle>::copy(v5, a2 + 64);
        ++*(_DWORD *)(a1 + 88);
      }
      else
      {
        re::DynamicArray<re::TextureHandle>::clear((uint64_t)v5);
      }
    }
    else if (v4)
    {
      v6 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 64) = v4;
      re::DynamicArray<re::TextureHandle>::setCapacity((_QWORD *)(a1 + 64), v6);
      ++*(_DWORD *)(a1 + 88);
      re::DynamicArray<re::TextureHandle>::copy((_QWORD *)(a1 + 64), a2 + 64);
    }
    v7 = *(_QWORD *)(a2 + 104);
    if (*(_QWORD *)(a1 + 104))
    {
      v8 = (_QWORD *)(a1 + 104);
      if (v7)
      {
        re::DynamicArray<re::BufferSlice>::copy(v8, a2 + 104);
        ++*(_DWORD *)(a1 + 128);
      }
      else
      {
        re::DynamicArray<re::RenderFrameEvent>::clear((uint64_t)v8);
      }
    }
    else if (v7)
    {
      v9 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 104) = v7;
      re::DynamicArray<re::BufferSlice>::setCapacity((_QWORD *)(a1 + 104), v9);
      ++*(_DWORD *)(a1 + 128);
      re::DynamicArray<re::BufferSlice>::copy((_QWORD *)(a1 + 104), a2 + 104);
    }
    v10 = *(_QWORD *)(a2 + 144);
    if (*(_QWORD *)(a1 + 144))
    {
      v11 = (_QWORD *)(a1 + 144);
      if (v10)
      {
        re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::copy(v11, a2 + 144);
        ++*(_DWORD *)(a1 + 168);
      }
      else
      {
        re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)v11);
      }
    }
    else if (v10)
    {
      v12 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 144) = v10;
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)(a1 + 144), v12);
      ++*(_DWORD *)(a1 + 168);
      re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::copy((_QWORD *)(a1 + 144), a2 + 144);
    }
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::copy((_anonymous_namespace_ *)(a1 + 184), (uint64_t *)(a2 + 184));
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 248), (uint64_t *)(a2 + 248));
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 312), (uint64_t *)(a2 + 312));
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 376), (uint64_t *)(a2 + 376));
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 440), (uint64_t *)(a2 + 440));
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 504), (uint64_t *)(a2 + 504));
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 568), (uint64_t *)(a2 + 568));
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 632), (uint64_t *)(a2 + 632));
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::copy((_anonymous_namespace_ *)(a1 + 696), (uint64_t *)(a2 + 696));
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 760), (uint64_t *)(a2 + 760));
  }
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(a1 + 888, a2 + 888);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  if (*(_BYTE *)(a1 + 936) || *(_BYTE *)(a2 + 936))
  {
    if (!*(_BYTE *)(a1 + 936) || *(_BYTE *)(a2 + 936))
    {
      if (!*(_BYTE *)(a1 + 936) && *(_BYTE *)(a2 + 936))
        *(_BYTE *)(a1 + 936) = 1;
      *(_QWORD *)(a1 + 937) = *(_QWORD *)(a2 + 937);
    }
    else
    {
      *(_BYTE *)(a1 + 936) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 948) || *(_BYTE *)(a2 + 948))
  {
    if (!*(_BYTE *)(a1 + 948) || *(_BYTE *)(a2 + 948))
    {
      if (!*(_BYTE *)(a1 + 948) && *(_BYTE *)(a2 + 948))
        *(_BYTE *)(a1 + 948) = 1;
      v13 = *(_QWORD *)(a2 + 952);
      *(_DWORD *)(a1 + 960) = *(_DWORD *)(a2 + 960);
      *(_QWORD *)(a1 + 952) = v13;
    }
    else
    {
      *(_BYTE *)(a1 + 948) = 0;
    }
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 992), *(_QWORD *)(a2 + 992));
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  v26[0] = a1 + 312;
  v14 = *(_QWORD *)(a1 + 328);
  if (v14 >= 0x10)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 312);
    v17 = v14 >> 4;
    while (1)
    {
      v18 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v16 + v15)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v26[1] = (unsigned __int16)~v18;
      if (v18 != 0xFFFF)
        break;
      v15 += 16;
      if (!--v17)
        return a1;
    }
    v19 = __clz(__rbit64((unsigned __int16)~v18)) + v15;
    for (i = v19; i != -1; v19 = i)
    {
      v20 = *(_QWORD *)(v26[0] + 8);
      v21 = *(unsigned int *)(v20 + 16 * v19 + 8);
      v22 = *(_QWORD *)(a1 + 80);
      if (v22 <= v21)
      {
        v28 = 0;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v29 = 136315906;
        v30 = "operator[]";
        v31 = 1024;
        v32 = 789;
        v33 = 2048;
        v34 = v21;
        v35 = 2048;
        v36 = v22;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v23 = *(_QWORD *)(a1 + 96) + 16 * v21;
      v25 = *(_QWORD *)(v20 + 16 * v19);
      re::TextureHandle::startTrackingMaterialParameterBlock(v23, a1, &v25);
      v25 = 0;
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v26);
    }
  }
  return a1;
}

re::MaterialParameterBlock *re::MaterialParameterBlock::MaterialParameterBlock(re::MaterialParameterBlock *this, re::RenderManager *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED67810;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 0;
  bzero((char *)this + 176, 0x2ECuLL);
  *(_QWORD *)((char *)this + 924) = 0x7FFFFFFFLL;
  *((_BYTE *)this + 936) = 0;
  *((_BYTE *)this + 948) = 0;
  *((_QWORD *)this + 121) = a2;
  *((_QWORD *)this + 123) = 0xFFFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 124) = 0;
  *((_QWORD *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
  return this;
}

_QWORD *re::MaterialParameterBlock::disconnectFromTextureHandles(_QWORD *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t i;
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v13[0] = this + 39;
  v1 = this[41];
  if (v1 >= 0x10)
  {
    v2 = (uint64_t)this;
    v3 = 0;
    v4 = this[39];
    v5 = v1 >> 4;
    while (1)
    {
      v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v4 + v3)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v13[1] = (unsigned __int16)~v6;
      if (v6 != 0xFFFF)
        break;
      v3 += 16;
      if (!--v5)
        return this;
    }
    v7 = __clz(__rbit64((unsigned __int16)~v6)) + v3;
    for (i = v7; i != -1; v7 = i)
    {
      v8 = *(_QWORD *)(v13[0] + 8);
      v9 = *(unsigned int *)(v8 + 16 * v7 + 8);
      v10 = *(_QWORD *)(v2 + 80);
      if (v10 <= v9)
      {
        v15 = 0;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v16 = 136315906;
        v17 = "operator[]";
        v18 = 1024;
        v19 = 789;
        v20 = 2048;
        v21 = v9;
        v22 = 2048;
        v23 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = *(_QWORD *)(v2 + 96) + 16 * v9;
      v12 = *(_QWORD *)(v8 + 16 * v7);
      re::TextureHandle::stopTrackingMaterialParameterBlock(v11, v2, &v12);
      v12 = 0;
      this = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v13);
    }
  }
  return this;
}

void re::MaterialParameterBlock::deinit(re::MaterialParameterBlock *this)
{
  uint64_t v2;
  uint64_t v3;

  re::MaterialParameterBlock::disconnectFromTextureHandles(this);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 3) = 0;
    ++*((_DWORD *)this + 12);
  }
  re::DynamicArray<re::TextureHandle>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 144);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 184);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 248);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 312);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 376);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 440);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 504);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 568);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 632);
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 696);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 760);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 111);
  *((_QWORD *)this + 121) = 0;
  v3 = *((_QWORD *)this + 124);
  if (v3)
  {

    *((_QWORD *)this + 124) = 0;
  }
  *((_QWORD *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
}

uint64_t re::MaterialParameterBlock::clear(re::MaterialParameterBlock *this)
{
  uint64_t result;

  re::MaterialParameterBlock::disconnectFromTextureHandles(this);
  *((_QWORD *)this + 5) = 0;
  ++*((_DWORD *)this + 12);
  re::DynamicArray<re::TextureHandle>::clear((uint64_t)this + 64);
  re::DynamicArray<re::RenderFrameEvent>::clear((uint64_t)this + 104);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 144);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((_QWORD *)this + 23);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((_QWORD *)this + 31);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((_QWORD *)this + 39);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((_QWORD *)this + 47);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear((_QWORD *)this + 55);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear((_QWORD *)this + 63);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear((_QWORD *)this + 71);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear((_QWORD *)this + 79);
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::clear((uint64_t)this + 696);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((_QWORD *)this + 95);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)this + 888);
  result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(this);
  if ((_DWORD)result)
    result = re::MaterialParameterTableDelta::encodeClear(*((re::MaterialParameterTableDelta **)this + 122));
  *((_QWORD *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
  if (*((_BYTE *)this + 948))
    *((_BYTE *)this + 948) = 0;
  if (*((_BYTE *)this + 936))
    *((_BYTE *)this + 936) = 0;
  return result;
}

void re::DynamicArray<re::TextureHandle>::clear(uint64_t a1)
{
  uint64_t v2;
  re::TextureHandle *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::TextureHandle **)(a1 + 32);
    v4 = 16 * v2;
    do
    {
      re::TextureHandle::invalidate(v3);
      v3 = (re::TextureHandle *)((char *)v3 + 16);
      v4 -= 16;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(re::MaterialParameterBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;

  v2 = *((_QWORD *)this + 121);
  v3 = *(_QWORD *)(v2 + 104);
  if (v3
    && (re::DrawingManager::checkDeltasCanBeEnqueuedOrDropDelta_115383182<re::PbrParameterDelta>(*(re::DrawingManager **)(v2 + 104), *((_QWORD *)this + 122)) & 1) != 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 121) + 136);
    v5 = *(_QWORD *)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 48);
    v7 = v6 & 0xFFFFFFFFFFFFFFFLL;
    v8 = *((_QWORD *)this + 123) & 0xFFFFFFFFFFFFFFFLL;
    if (v8 == 0xFFFFFFFFFFFFFFFLL)
    {
      if (v7 == 0xFFFFFFFFFFFFFFFLL)
        return 1;
    }
    else if (v7 != 0xFFFFFFFFFFFFFFFLL && v8 == v7)
    {
      return 1;
    }
    *((_QWORD *)this + 123) = v6 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v5 << 60);
    re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(this, &v12);
    *((_QWORD *)this + 122) = re::DrawingManager::addRenderFrameDeltaForNextFrame<re::MaterialParameterTableDelta,re::MaterialParameterTable>(v3, &v12);
    if (v12)

    return 1;
  }
  *((_QWORD *)this + 122) = 0;
  v9 = *((_QWORD *)this + 124);
  if (!v9)
    return 0;

  result = 0;
  *((_QWORD *)this + 124) = 0;
  return result;
}

unint64_t re::MaterialParameterBlock::handle@<X0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t result;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a1 + 23, a2);
  if (v6 != -1)
  {
    v7 = *((_QWORD *)a1 + 24) + 16 * v6;
    LOWORD(v8) = *(_WORD *)(v7 + 8);
    v9 = *(unsigned __int8 *)(v7 + 10);
    result = re::MaterialParameterBlock::keysHash(a1);
    v11 = *(_BYTE *)(v7 + 11);
    v12 = 9;
    goto LABEL_10;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 55, a2) != -1)
  {
    result = re::MaterialParameterBlock::keysHash(a1);
    LOWORD(v8) = 0;
    v9 = 0;
    v11 = 0;
    v12 = 25;
    goto LABEL_10;
  }
  v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a1 + 39, a2);
  if (v13 != -1)
  {
    v8 = *(_DWORD *)(*((_QWORD *)a1 + 40) + 16 * v13 + 8);
    result = re::MaterialParameterBlock::keysHash(a1);
    v11 = 0;
    v12 = 10;
LABEL_7:
    v9 = 1;
    goto LABEL_10;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 71, a2) != -1)
  {
    result = re::MaterialParameterBlock::keysHash(a1);
    LOWORD(v8) = 0;
    v9 = 0;
    v11 = 0;
    v12 = 26;
    goto LABEL_10;
  }
  v14 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a1 + 31, a2);
  if (v14 != -1)
  {
    v8 = *(_DWORD *)(*((_QWORD *)a1 + 32) + 16 * v14 + 8);
    result = re::MaterialParameterBlock::keysHash(a1);
    v11 = 0;
    v12 = 11;
    goto LABEL_7;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 63, a2) != -1)
  {
    result = re::MaterialParameterBlock::keysHash(a1);
    LOWORD(v8) = 0;
    v9 = 0;
    v11 = 0;
    v12 = 27;
    goto LABEL_10;
  }
  v15 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a1 + 47, a2);
  if (v15 != -1)
  {
    v8 = *(_DWORD *)(*((_QWORD *)a1 + 48) + 16 * v15 + 8);
    result = re::MaterialParameterBlock::keysHash(a1);
    v11 = 0;
    v12 = 12;
    goto LABEL_7;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 79, a2) == -1)
  {
    LOWORD(v8) = 0;
    v9 = 0;
    v12 = 0;
    result = 0;
    v11 = 0;
  }
  else
  {
    result = re::MaterialParameterBlock::keysHash(a1);
    LOWORD(v8) = 0;
    v9 = 0;
    v11 = 0;
    v12 = 28;
  }
LABEL_10:
  *(_QWORD *)a3 = *a2;
  *(_WORD *)(a3 + 8) = v8;
  *(_WORD *)(a3 + 10) = v9;
  *(_BYTE *)(a3 + 12) = v12;
  *(_QWORD *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 24) = v11;
  return result;
}

unint64_t re::MaterialParameterBlock::keysHash(re::MaterialParameterBlock *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = (*((_QWORD *)this + 76) + (*((_QWORD *)this + 60) << 6) + (*((_QWORD *)this + 60) >> 2) - 0x61C8864680B583E9) ^ *((_QWORD *)this + 60);
  v2 = (*((_QWORD *)this + 68) + (v1 << 6) + (v1 >> 2) - 0x61C8864680B583E9) ^ v1;
  v3 = (*((_QWORD *)this + 84) + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  v4 = (*((_QWORD *)this + 28) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  v5 = (*((_QWORD *)this + 44) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v6 = (*((_QWORD *)this + 36) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  return (*((_QWORD *)this + 52) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
}

unint64_t re::MaterialParameterBlock::handle@<X0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  const char *v5;
  int v6;
  uint64_t v8;

  if (a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = a2 + 2;
        do
        {
          v3 = 31 * v3 + v4;
          v6 = *(unsigned __int8 *)v5++;
          v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v8 = v3;
  return re::MaterialParameterBlock::handle(this, &v8, a3);
}

uint64_t re::MaterialParameterBlock::colorGamut3FValue(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)re::ShaderGraphMaterial::getConstant(a1, a2);
}

_QWORD *re::MaterialParameterBlock::colorGamut4FValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  result = (_QWORD *)re::ShaderGraphMaterial::getConstant(a1, a2);
  v6 = result[1];
  v7 = *(_QWORD *)(a1 + 968);
  if (v7)
  {
    v7 = *(_QWORD *)(v7 + 152);
    if (v7)
      LOBYTE(v7) = *(_BYTE *)v7;
  }
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7;
  return result;
}

re::TextureHandle *re::MaterialParameterBlock::textureHandleValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, re::TextureHandle *a3@<X8>)
{
  unint64_t v3;

  v3 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 80) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::TextureHandle::TextureHandle(a3, (const re::TextureHandle *)(*(_QWORD *)(a1 + 96) + 16 * v3));
}

uint64_t re::MaterialParameterBlock::bufferValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 120) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 136) + 16 * v2;
}

id re::MaterialParameterBlock::samplerValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  id result;

  v4 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 160) <= v4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  result = *(id *)(*(_QWORD *)(a1 + 176) + 8 * v4);
  *a3 = result;
  return result;
}

void re::MaterialParameterBlock::bindingValue(re *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE buf[24];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  switch(*((_BYTE *)a2 + 12) & 7)
  {
    case 1:
      *(_QWORD *)buf = *a2;
      v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 55, (uint64_t *)buf);
      v7 = *((_QWORD *)a1 + 56);
      goto LABEL_8;
    case 2:
      *(_QWORD *)buf = *a2;
      v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 71, (uint64_t *)buf);
      v7 = *((_QWORD *)a1 + 72);
      goto LABEL_8;
    case 3:
      *(_QWORD *)buf = *a2;
      v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 63, (uint64_t *)buf);
      v7 = *((_QWORD *)a1 + 64);
      goto LABEL_8;
    case 4:
      *(_QWORD *)buf = *a2;
      v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((_QWORD *)a1 + 79, (uint64_t *)buf);
      v7 = *((_QWORD *)a1 + 80);
LABEL_8:
      v9 = v7 + 40 * v6;
      *(_DWORD *)a3 = *(_DWORD *)(v9 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(v9 + 16);
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(v9 + 24);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v9 + 32);
      break;
    default:
      v8 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v10 = *a2;
        if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v11 = 0;
        }
        else if (v10)
        {
          v11 = re::WeakStringID::debugStr(void)const::msg;
          snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v10);
        }
        else
        {
          v11 = (char *)&str_110;
        }
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v11;
        _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Attempted to get a binding from an invalid handle %s", buf, 0xCu);
      }
      *(_DWORD *)a3 = 3;
      re::StringID::invalid((re::StringID *)buf);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      *(_BYTE *)(a3 + 16) = 0;
      re::StringID::invalid((re::StringID *)buf);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      break;
  }
}

void re::MaterialParameterBlock::removeParameter(re::MaterialParameterBlock *this, const char *a2)
{
  uint64_t v3;
  char v4;
  const char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  char v15;
  uint64_t v16;

  if (a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = a2 + 2;
        do
        {
          v3 = 31 * v3 + v4;
          v6 = *(unsigned __int8 *)v5++;
          v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v16 = v3;
  re::MaterialParameterBlock::handle(this, &v16, (uint64_t)&v13);
  if ((v15 & 7) != 0)
  {
    if ((v15 & 0x10) != 0)
    {
      v12 = v13;
      re::MaterialParameterBlock::removeBinding((uint64_t *)this, &v12);
    }
    else
    {
      switch(v15 & 7)
      {
        case 1:
          v11 = v13;
          re::MaterialParameterBlock::removeConstant((uint64_t *)this, &v11, v14);
          break;
        case 2:
          v10 = v13;
          re::MaterialParameterBlock::removeTexture((uint64_t)this, &v10);
          break;
        case 3:
          v9 = v13;
          re::MaterialParameterBlock::removeBuffer((uint64_t *)this, &v9);
          break;
        case 4:
          v8 = v13;
          re::MaterialParameterBlock::removeSampler((uint64_t *)this, &v8);
          break;
        default:
          re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Trying to remove a paramter which exists but has an invalid type.", "!\"Unreachable code\"", "removeParameter", 423);
          _os_crash();
          __break(1u);
          JUMPOUT(0x225A6EFDCLL);
      }
    }
  }
}

re *re::MaterialParameterBlock::removeBinding(uint64_t *a1, uint64_t *a2)
{
  re *result;
  int v6;
  uint64_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t v13[8];
  uint64_t v14;
  _BYTE v15[12];
  char v16;

  v14 = *a2;
  result = (re *)re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)a1, &v14, (uint64_t)v15);
  v14 = 0;
  if ((v16 & 7) != 0 && (v16 & 0x10) != 0)
  {
    v6 = (v16 & 7) - 1;
    switch(v16 & 7)
    {
      case 1:
        v7 = a1 + 55;
        goto LABEL_12;
      case 2:
        v7 = a1 + 71;
        goto LABEL_12;
      case 3:
        v7 = a1 + 63;
        goto LABEL_12;
      case 4:
        v7 = a1 + 79;
LABEL_12:
        re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::remove(v7, a2);
        break;
      default:
        v8 = *re::graphicsLogObjects(result);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v13 = 0;
          _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Invalid parameter type", v13, 2u);
        }
        break;
    }
    result = (re *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if ((_DWORD)result)
    {
      switch(v6)
      {
        case 0:
          v9 = a1[122] + 216;
          goto LABEL_19;
        case 1:
          v9 = a1[122] + 296;
          goto LABEL_19;
        case 2:
          v9 = a1[122] + 256;
          goto LABEL_19;
        case 3:
          v9 = a1[122] + 336;
LABEL_19:
          v10 = *a2;
          v11 = *(_QWORD *)(v9 + 16);
          if (v11 >= *(_QWORD *)(v9 + 8))
          {
            result = (re *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::growCapacity((_QWORD *)v9, v11 + 1);
            v11 = *(_QWORD *)(v9 + 16);
          }
          v12 = *(_QWORD *)(v9 + 32) + 48 * v11;
          *(_QWORD *)v12 = v10;
          *(_BYTE *)(v12 + 8) = 0;
          *(_QWORD *)(v9 + 16) = v11 + 1;
          ++*(_DWORD *)(v9 + 24);
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::MaterialParameterBlock::removeConstant(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v7 = *a2;
  re::removeNameMappedConstant(&v7, a1 + 23, a1 + 3, a3);
  v6 = *a2;
  v7 = 0;
  return re::MaterialParameterBlock::addRemoveConstantDelta((re::MaterialParameterBlock *)a1, &v6);
}

void re::MaterialParameterBlock::removeTexture(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)(a1 + 312);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 312), a2);
  if (v6 != -1)
  {
    v7 = *(unsigned int *)(*(_QWORD *)(a1 + 320) + 16 * v6 + 8);
    v8 = *(_QWORD *)(a1 + 80);
    if (v8 <= v7)
    {
      v30 = 0;
      v43 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v31 = 136315906;
      v32 = "operator[]";
      v33 = 1024;
      v34 = 789;
      v35 = 2048;
      v36 = v7;
      v37 = 2048;
      v38 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_26;
    }
    v9 = *(_QWORD *)(a1 + 96) + 16 * v7;
    v29 = *a2;
    re::TextureHandle::stopTrackingMaterialParameterBlock(v9, a1, &v29);
  }
  v28 = *a2;
  v10 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v5, &v28);
  if (v10 == -1)
    goto LABEL_21;
  v11 = *(_QWORD *)(a1 + 320) + 16 * v10;
  v13 = *(_DWORD *)(v11 + 8);
  v12 = (unsigned int *)(v11 + 8);
  v2 = v13;
  v8 = *(_QWORD *)(a1 + 80);
  if (v8 <= v13)
  {
LABEL_26:
    v30 = 0;
    v43 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v31 = 136315906;
    v32 = "removeStableAt";
    v33 = 1024;
    v34 = 969;
    v35 = 2048;
    v36 = v2;
    v37 = 2048;
    v38 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v8 - 1 > v2)
  {
    v14 = *(_QWORD *)(a1 + 96);
    v15 = v14 + 16 * v2;
    if (v15 + 16 != v14 + 16 * v8)
    {
      v16 = 16 * v8 - 16 * v2 - 16;
      do
      {
        v17 = v15 + 16;
        re::TextureHandle::operator=((re::TextureHandle *)v15, (re::TextureHandle *)(v15 + 16));
        v15 = v17;
        v16 -= 16;
      }
      while (v16);
      v8 = *(_QWORD *)(a1 + 80);
    }
  }
  re::TextureHandle::invalidate((re::TextureHandle *)(*(_QWORD *)(a1 + 96) + 16 * v8 - 16));
  --*(_QWORD *)(a1 + 80);
  ++*(_DWORD *)(a1 + 88);
  v18 = *v12;
  *(_QWORD *)&v39 = v5;
  v19 = *(_QWORD *)(a1 + 328);
  if (v19 >= 0x10)
  {
    v20 = 0;
    v21 = *v5;
    v22 = v19 >> 4;
    while (1)
    {
      v23 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v21 + v20)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      *((_QWORD *)&v39 + 1) = (unsigned __int16)~v23;
      if (v23 != 0xFFFF)
        break;
      v20 += 16;
      if (!--v22)
        goto LABEL_20;
    }
    v24 = __clz(__rbit64((unsigned __int16)~v23)) + v20;
    *(_QWORD *)&v40 = v24;
    if (v24 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)v5, *(_QWORD *)(a1 + 320) + 16 * v24);
        v25 = *(_QWORD *)(a1 + 320) + 16 * v40;
        v26 = *(_DWORD *)(v25 + 8);
        if (v26 >= v18)
          *(_DWORD *)(v25 + 8) = v26 - 1;
        re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)v5, v25);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v39);
        v24 = v40;
      }
      while ((_QWORD)v40 != -1);
    }
  }
LABEL_20:
  re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(v5, &v28);
LABEL_21:
  v28 = 0;
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    v27 = (_QWORD *)(*(_QWORD *)(a1 + 976) + 136);
    *(_QWORD *)&v39 = *a2;
    BYTE8(v39) = 0;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::add(v27, (uint64_t)&v39);
    if (BYTE8(v39))
      re::TextureHandle::invalidate((re::TextureHandle *)&v40);
  }
}

void re::MaterialParameterBlock::removeBuffer(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  id v7;
  uint64_t v8;

  v8 = *a2;
  re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::BufferSlice>>(&v8, a1 + 31, (uint64_t)(a1 + 13));
  v8 = 0;
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    v4 = (_QWORD *)(a1[122] + 96);
    v5 = *a2;
    v6 = 0;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::add(v4, (uint64_t)&v5);
    if (v6)
    {
      if (v7)

    }
  }
}

void re::MaterialParameterBlock::removeSampler(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  id v6;
  uint64_t v7;

  v7 = *a2;
  re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>>(&v7, a1 + 47, (uint64_t)(a1 + 18));
  v7 = 0;
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    v4 = *a2;
    v5 = 0;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add((_QWORD *)(a1[122] + 176), (uint64_t)&v4);
    if (v5)
    {
      if (v6)

    }
  }
}

void *re::MaterialParameterBlock::addConstant(_QWORD *a1, _QWORD *a2, size_t a3, const void *a4, int a5)
{
  _anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v10 = (_anonymous_namespace_ *)(a1 + 23);
  v11 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 23, a2);
  if (v11 == -1)
  {
    v12 = a1[5] + 3;
    *(_WORD *)buf = v12 & 0xFFFC;
    buf[2] = a3;
    buf[3] = a5;
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(v10, a2, (int *)buf);
    v13 = (unsigned __int16)v12 & 0xFFFC;
    re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 3), v13 + a3);
    v15 = a1[5];
    if (v15 > v13)
      goto LABEL_12;
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)buf = 0u;
    a5 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = (unsigned __int16)v12 & 0xFFFC;
    v26 = 2048;
    v27 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  else
  {
    v12 = a1[24] + 16 * v11 + 8;
    v13 = *re::graphicsLogObjects((re *)v11);
    if (!os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    if (*a2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*a2)
      {
        v14 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a2);
      }
      else
      {
        v14 = (char *)&str_110;
      }
      goto LABEL_10;
    }
  }
  v14 = 0;
LABEL_10:
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v14;
  _os_log_impl(&dword_224FE9000, (os_log_t)v13, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable constant (%s) that already exists. Overwiting with new values.", buf, 0xCu);
LABEL_11:
  v13 = *(unsigned __int16 *)v12;
  v16 = a1[5];
  if (v16 <= v13)
  {
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = v13;
    v26 = 2048;
    v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_12:
  memcpy((void *)(a1[7] + v13), a4, a3);
  v18 = *a2;
  return re::MaterialParameterBlock::addConstantDelta((re::MaterialParameterBlock *)a1, &v18, a3, a4, a5);
}

void re::MaterialParameterBlock::addBinding(_QWORD *a1, uint64_t *a2, char *a3, char *a4, uint64_t a5)
{
  re *v10;
  uint64_t v12;
  re *v13;
  uint64_t v14;
  char v15;
  unsigned __int8 *v16;
  int v17;
  NSObject *v18;
  uint64_t v20;
  char *v21;
  int v22;
  _anonymous_namespace_ *v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26[4];
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE buf[12];
  __int16 v35;
  char *v36;
  __int16 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v31 = *a2;
  v10 = (re *)re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)a1, &v31, (uint64_t)&v32);
  v31 = 0;
  if ((v33 & 7) == 0 || (v33 & 0x10) == 0)
  {
    re::StringID::invalid((re::StringID *)buf);
    re::StringID::destroyString((re::StringID *)buf);
    re::StringID::invalid((re::StringID *)buf);
    re::StringID::destroyString((re::StringID *)buf);
    v12 = 0;
    v27 = 1;
    v28 = *a2;
    while (1)
    {
      v13 = (re *)strcmp(re::s_materialTableIDMappings[v12], a3);
      if (!(_DWORD)v13)
        break;
      if (++v12 == 168)
      {
        LOBYTE(v12) = 0;
        break;
      }
    }
    v29 = v12;
    if (a4)
    {
      v14 = *a4;
      if (*a4)
      {
        v15 = a4[1];
        if (v15)
        {
          v16 = (unsigned __int8 *)(a4 + 2);
          do
          {
            v14 = 31 * v14 + v15;
            v17 = *v16++;
            v15 = v17;
          }
          while (v17);
        }
        v14 &= ~0x8000000000000000;
      }
    }
    else
    {
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v30 = v14;
    v22 = a5 - 1;
    switch((int)a5)
    {
      case 1:
        v23 = (_anonymous_namespace_ *)(a1 + 55);
        goto LABEL_28;
      case 2:
        v23 = (_anonymous_namespace_ *)(a1 + 71);
        goto LABEL_28;
      case 3:
        v23 = (_anonymous_namespace_ *)(a1 + 63);
        goto LABEL_28;
      case 4:
        v23 = (_anonymous_namespace_ *)(a1 + 79);
LABEL_28:
        re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew(v23, a2, &v27);
        break;
      default:
        v24 = *re::graphicsLogObjects(v13);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "Invalid parameter type", buf, 2u);
        }
        break;
    }
    if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
    {
      switch(v22)
      {
        case 0:
          v25 = (_QWORD *)(a1[122] + 216);
          goto LABEL_39;
        case 1:
          v25 = (_QWORD *)(a1[122] + 296);
          goto LABEL_39;
        case 2:
          v25 = (_QWORD *)(a1[122] + 256);
          goto LABEL_39;
        case 3:
          v25 = (_QWORD *)(a1[122] + 336);
LABEL_39:
          *(_QWORD *)buf = *a2;
          buf[8] = 1;
          *(_DWORD *)((char *)&v36 + 2) = v27;
          v38 = v28;
          v39 = v29;
          v40 = v30;
          re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::add(v25, (uint64_t)buf);
          break;
        default:
          return;
      }
    }
  }
  else
  {
    v18 = *re::graphicsLogObjects(v10);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *a2;
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v21 = 0;
      }
      else if (v20)
      {
        v21 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v20);
      }
      else
      {
        v21 = (char *)&str_110;
      }
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v21;
      v35 = 2080;
      v36 = a3;
      v37 = 2080;
      v38 = (uint64_t)a4;
      _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable binding (%s) that already exists. Overwiting with new values (%s, %s).", buf, 0x20u);
    }
    re::MaterialParameterBlock::setBinding(v26, a3, a1, &v32, a4, a5);
  }
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4];
  v6 = v5 + 48 * v4;
  *(_QWORD *)v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v6 + 8) = v7;
  if (v7)
  {
    v8 = v5 + 48 * v4;
    *(_DWORD *)(v8 + 16) = *(_DWORD *)(a2 + 16);
    *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(v8 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(v8 + 40) = *(_QWORD *)(a2 + 40);
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

__n128 re::MaterialParameterBlock::setBinding@<Q0>(uint64_t *__return_ptr a1@<X8>, char *__s2@<X2>, _QWORD *a3@<X0>, uint64_t *a4@<X1>, char *a5@<X3>, uint64_t a6@<X4>)
{
  char v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  re *v15;
  uint64_t v16;
  char v17;
  unsigned __int8 *v18;
  int v19;
  _anonymous_namespace_ *v20;
  NSObject *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _BYTE buf[12];
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v11 = *((_BYTE *)a4 + 12);
  if ((v11 & 8) != 0)
  {
    v13 = 0;
    v25 = 1;
    v14 = *a4;
    v26 = *a4;
    while (1)
    {
      v15 = (re *)strcmp(re::s_materialTableIDMappings[v13], __s2);
      if (!(_DWORD)v15)
        break;
      if (++v13 == 168)
      {
        LOBYTE(v13) = 0;
        break;
      }
    }
    v27 = v13;
    if (a5)
    {
      v16 = *a5;
      if (*a5)
      {
        v17 = a5[1];
        if (v17)
        {
          v18 = (unsigned __int8 *)(a5 + 2);
          do
          {
            v16 = 31 * v16 + v17;
            v19 = *v18++;
            v17 = v19;
          }
          while (v19);
        }
        v16 &= ~0x8000000000000000;
      }
    }
    else
    {
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v28 = v16;
    switch(v11 & 7)
    {
      case 1:
        v20 = (_anonymous_namespace_ *)(a3 + 55);
        goto LABEL_23;
      case 2:
        v20 = (_anonymous_namespace_ *)(a3 + 71);
        goto LABEL_23;
      case 3:
        v20 = (_anonymous_namespace_ *)(a3 + 63);
        goto LABEL_23;
      case 4:
        v20 = (_anonymous_namespace_ *)(a3 + 79);
LABEL_23:
        *(_QWORD *)buf = v14;
        re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(v20, (uint64_t *)buf, (uint64_t)&v25);
        break;
      default:
        v21 = *re::graphicsLogObjects(v15);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          if (*a4 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v22 = 0;
          }
          else if (*a4)
          {
            v22 = re::WeakStringID::debugStr(void)const::msg;
            snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a4);
          }
          else
          {
            v22 = (char *)&str_110;
          }
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v22;
          _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "Attempted to set a binding from an invalid handle %s", buf, 0xCu);
        }
        break;
    }
    if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a3))
    {
      switch(*((_BYTE *)a4 + 12) & 7)
      {
        case 1:
          v23 = (_QWORD *)(a3[122] + 216);
          goto LABEL_30;
        case 2:
          v23 = (_QWORD *)(a3[122] + 296);
          goto LABEL_30;
        case 3:
          v23 = (_QWORD *)(a3[122] + 256);
          goto LABEL_30;
        case 4:
          v23 = (_QWORD *)(a3[122] + 336);
LABEL_30:
          *(_QWORD *)buf = *a4;
          buf[8] = 1;
          v30 = v25;
          v31 = v26;
          v32 = v27;
          v33 = v28;
          re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::add(v23, (uint64_t)buf);
          break;
        default:
          break;
      }
    }
    *a1 = *a4;
    result = *(__n128 *)(a4 + 1);
    *(__n128 *)(a1 + 1) = result;
    *((_BYTE *)a1 + 24) = *((_BYTE *)a4 + 24);
  }
  else
  {
    v24 = *a4;
    result.n128_f64[0] = re::MaterialParameterBlock::setBinding((re::MaterialParameterBlock *)a3, &v24, __s2, (uint64_t)a5, a6, (uint64_t)a1);
  }
  return result;
}

void re::MaterialParameterBlock::addTexture(uint64_t a1, const re::WeakStringID *a2, re::TextureHandle *a3)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  unsigned int *v8;
  NSObject *v9;
  char *v10;
  void *v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  re::TextureHandle *v15;
  uint64_t v16;
  uint64_t v17[2];
  _BYTE v18[12];
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  _OWORD buf[5];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = (_anonymous_namespace_ *)(a1 + 312);
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 312), a2);
  if (v7 == -1)
  {
    LODWORD(buf[0]) = *(unsigned __int8 *)(a1 + 80);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v6, a2, (int *)buf);
    re::DynamicArray<re::TextureHandle>::add((_anonymous_namespace_ *)(a1 + 64), a3);
  }
  else
  {
    v8 = (unsigned int *)(*(_QWORD *)(a1 + 320) + 16 * v7 + 8);
    v9 = *re::graphicsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_QWORD *)a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v10 = 0;
      }
      else if (*(_QWORD *)a2)
      {
        v10 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *(_QWORD *)a2);
      }
      else
      {
        v10 = (char *)&str_110;
      }
      re::TextureHandle::metalTexture((os_unfair_lock_s **)a3, v18);
      v11 = *(void **)v18;
      v12 = objc_msgSend(objc_msgSend(*(id *)v18, sel_label), sel_cStringUsingEncoding_, 4);
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = v10;
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v12;
      _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable texture (%s) that already exists. Overwiting with new value (%s).", (uint8_t *)buf, 0x16u);
      if (v11)

    }
    v13 = *v8;
    v14 = *(_QWORD *)(a1 + 80);
    if (v14 <= v13)
    {
      v17[1] = 0;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v18 = 136315906;
      *(_QWORD *)&v18[4] = "operator[]";
      v19 = 1024;
      v20 = 789;
      v21 = 2048;
      v22 = v13;
      v23 = 2048;
      v24 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v15 = (re::TextureHandle *)(*(_QWORD *)(a1 + 96) + 16 * v13);
    v17[0] = *(_QWORD *)a2;
    re::TextureHandle::stopTrackingMaterialParameterBlock((uint64_t)v15, a1, v17);
    re::TextureHandle::operator=(v15, a3);
  }
  v16 = *(_QWORD *)a2;
  re::TextureHandle::startTrackingMaterialParameterBlock((uint64_t)a3, a1, &v16);
  re::MaterialParameterBlock::enqueueTextureValueChangedDelta((re::MaterialParameterBlock *)a1, a2, a3);
}

void re::MaterialParameterBlock::enqueueTextureValueChangedDelta(re::MaterialParameterBlock *this, const re::WeakStringID *a2, const re::TextureHandle *a3)
{
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _BYTE v9[16];

  if (*((_QWORD *)this + 121)
    && re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(this))
  {
    v6 = (_QWORD *)(*((_QWORD *)this + 122) + 136);
    v7 = *(_QWORD *)a2;
    v8 = 1;
    re::TextureHandle::TextureHandle((re::TextureHandle *)v9, a3);
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::add(v6, (uint64_t)&v7);
    if (v8)
      re::TextureHandle::invalidate((re::TextureHandle *)v9);
  }
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 32 * v4;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  v6 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v5 + 8) = v6;
  if (v6)
  {
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    v7 = (_QWORD *)(v5 + 16);
    if (*(_QWORD *)(a2 + 24))
    {
      v8 = *(_QWORD *)(a2 + 16);
      if (v8)
      {
        *v7 = v8;
        v7[1] = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = 0;
      }
    }
    v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::MaterialParameterBlock::addBuffer(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  unsigned int *v8;
  NSObject *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  _QWORD *v16;
  uint8_t buf[16];
  id v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = (_anonymous_namespace_ *)(a1 + 248);
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 248), a2);
  if (v7 == -1)
  {
    *(_DWORD *)buf = *(unsigned __int8 *)(a1 + 120);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v6, a2, (int *)buf);
    re::DynamicArray<re::BufferSlice>::add((_anonymous_namespace_ *)(a1 + 104), a3);
  }
  else
  {
    v8 = (unsigned int *)(*(_QWORD *)(a1 + 256) + 16 * v7 + 8);
    v9 = *re::graphicsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v10 = 0;
      }
      else if (*a2)
      {
        v10 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a2);
      }
      else
      {
        v10 = (char *)&str_110;
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable buffer (%s) that already exists. Overwiting with new value.", buf, 0xCu);
    }
    v11 = *v8;
    if (*(_QWORD *)(a1 + 120) <= v11)
    {
      v20 = 0u;
      v21 = 0u;
      *(_OWORD *)v18 = 0u;
      v19 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = *(_QWORD *)(a1 + 136) + 16 * v11;
    NS::SharedPtr<MTL::Texture>::operator=((void **)v12, (void **)a3);
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(a3 + 8);
  }
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    v13 = *a2;
    v14 = *(id *)a3;
    v15 = *(void **)(a3 + 8);
    v16 = (_QWORD *)(*(_QWORD *)(a1 + 976) + 96);
    *(_QWORD *)buf = v13;
    buf[8] = 1;
    v18[0] = v14;
    v18[1] = v15;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::add(v16, (uint64_t)buf);
    if (buf[8] && v18[0])

    if (v14)
  }
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 32 * v4;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  v6 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v5 + 8) = v6;
  if (v6)
  {
    this = *(id *)(a2 + 16);
    *(_QWORD *)(v5 + 16) = this;
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
    v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::BufferSlice>>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, a1);
  if (result != -1)
  {
    v7 = a2[1] + 16 * result;
    re::DynamicArray<re::BufferSlice>::removeStableAt(a3, *(unsigned int *)(v7 + 8));
    v8 = *(_DWORD *)(v7 + 8);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::mapValues<void re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(re::WeakStringID,re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &,re::DynamicArray<re::AssetHandle> &)::{lambda(re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &)#1}>(a2, &v8);
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(a2, a1);
  }
  return result;
}

void re::MaterialParameterBlock::addSampler(uint64_t a1, _QWORD *a2, id *a3)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  unsigned int *v8;
  NSObject *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint8_t buf[16];
  id v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = (_anonymous_namespace_ *)(a1 + 376);
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 376), a2);
  if (v7 == -1)
  {
    *(_DWORD *)buf = *(unsigned __int8 *)(a1 + 160);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v6, a2, (int *)buf);
    re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 144), a3);
  }
  else
  {
    v8 = (unsigned int *)(*(_QWORD *)(a1 + 384) + 16 * v7 + 8);
    v9 = *re::graphicsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v10 = 0;
      }
      else if (*a2)
      {
        v10 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a2);
      }
      else
      {
        v10 = (char *)&str_110;
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a sampler (%s) that already exists. Overwiting with new value.", buf, 0xCu);
    }
    v11 = *v8;
    if (*(_QWORD *)(a1 + 160) <= v11)
    {
      v18 = 0u;
      v19 = 0u;
      *(_OWORD *)v16 = 0u;
      v17 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)(a1 + 176) + 8 * v11), a3);
  }
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    v12 = *a2;
    v13 = *a3;
    v14 = (_QWORD *)(*(_QWORD *)(a1 + 976) + 176);
    *(_QWORD *)buf = v12;
    buf[8] = 1;
    v16[0] = v13;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add(v14, (uint64_t)buf);
    if (buf[8] && v16[0])

    if (v13)
  }
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4];
  v6 = v5 + 24 * v4;
  *(_QWORD *)v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v6 + 8) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 24 * v4 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4];
  v6 = v5 + 24 * v4;
  *(_QWORD *)v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v6 + 8) = v7;
  if (v7)
  {
    v8 = v5 + 24 * v4;
    this = *(id *)(a2 + 16);
    *(_QWORD *)(v8 + 16) = this;
    v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, a1);
  if (result != -1)
  {
    v7 = a2[1] + 16 * result;
    re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::removeStableAt(a3, *(unsigned int *)(v7 + 8));
    v8 = *(_DWORD *)(v7 + 8);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::mapValues<void re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(re::WeakStringID,re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &,re::DynamicArray<re::AssetHandle> &)::{lambda(re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &)#1}>(a2, &v8);
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(a2, a1);
  }
  return result;
}

_QWORD *re::MaterialParameterBlock::addPassTechniqueMapping(re::MaterialParameterBlock *this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v11 = a3;
  v12 = a2;
  v10 = a4;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  DWORD1(v9) = 0x7FFFFFFF;
  v5 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)this + 888, &v10, (uint64_t *)&v7);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)&v7);
  re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(v5, &v12, &v11);
  result = (_QWORD *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(this);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v7 = v10;
    *((_QWORD *)&v7 + 1) = v12;
    LOBYTE(v8) = 1;
    *((_QWORD *)&v8 + 1) = v11;
    LOBYTE(v9) = 0;
    return re::DynamicArray<re::PassTechniqueMappingDelta>::add((_QWORD *)(*((_QWORD *)this + 122) + 496), (uint64_t)&v7);
  }
  return result;
}

_QWORD *re::DynamicArray<re::PassTechniqueMappingDelta>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::PassTechniqueMappingDelta>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4];
  v6 = v5 + 40 * v4;
  *(_OWORD *)v6 = *(_OWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 16);
  *(_BYTE *)(v6 + 16) = v7;
  if (v7)
    *(_QWORD *)(v5 + 40 * v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v5 + 40 * v4 + 32) = *(_BYTE *)(a2 + 32);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::MaterialParameterBlock::removePassTechniqueMapping(re::MaterialParameterBlock *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a3;
  v10 = a2;
  result = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 888, &v9);
  if (result)
  {
    v5 = result;
    result = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(result, &v10);
    if ((_DWORD)result)
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v5, &v10);
      result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(this);
      if ((_DWORD)result)
      {
        v6[0] = v9;
        v6[1] = v10;
        v7 = 0;
        v8 = 0;
        return (uint64_t)re::DynamicArray<re::PassTechniqueMappingDelta>::add((_QWORD *)(*((_QWORD *)this + 122) + 496), (uint64_t)v6);
      }
    }
  }
  return result;
}

uint64_t re::MaterialParameterBlock::tryGetPassTechniqueMapping(re::MaterialParameterBlock *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  result = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 888, &v4);
  if (result)
    return re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(result, &v5);
  return result;
}

uint64_t re::MaterialParameterBlock::setDepthBiasState(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *v4;
  uint64_t result;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v4 = (_BYTE *)(a1 + 948);
  result = re::Optional<re::MaterialParameterDepthBiasState>::operator==((float *)(a1 + 948), (float *)a2);
  if ((result & 1) == 0)
  {
    v6 = *a2;
    if (*v4)
      v7 = 0;
    else
      v7 = v6 == 0;
    if (!v7)
    {
      if (*v4)
        v8 = v6 == 0;
      else
        v8 = 0;
      if (v8)
      {
        *v4 = 0;
      }
      else
      {
        if (!*v4 && *a2)
          *v4 = 1;
        v9 = *(_QWORD *)(a2 + 4);
        *(_DWORD *)(a1 + 960) = *((_DWORD *)a2 + 3);
        *(_QWORD *)(a1 + 952) = v9;
      }
    }
    result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if ((_DWORD)result)
    {
      v10 = *(_QWORD *)(a1 + 976);
      v11 = *a2;
      if (*(_BYTE *)(v10 + 548) || v11 != 0)
      {
        if (*(_BYTE *)(v10 + 548))
          v13 = v11 == 0;
        else
          v13 = 0;
        if (v13)
        {
          *(_BYTE *)(v10 + 548) = 0;
        }
        else
        {
          v14 = v10 + 552;
          if (*(_BYTE *)(v10 + 548))
            v15 = 1;
          else
            v15 = v11 == 0;
          if (!v15)
            *(_BYTE *)(v10 + 548) = 1;
          v16 = *(_QWORD *)(a2 + 4);
          *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 + 3);
          *(_QWORD *)v14 = v16;
        }
      }
    }
  }
  return result;
}

void re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(re::MaterialParameterBlock *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  void *v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  re::MaterialParameterTable *v9;
  id v10;

  v3 = *((_QWORD *)this + 124);
  if (v3)
  {
    *a2 = v3;
LABEL_6:
    v10 = (id)(v3 + 8);
    return;
  }
  v5 = re::globalAllocators(this);
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 1128, 8);
  bzero(v6, 0x468uLL);
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)v6);
  v8 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = v6;
  if (v8)

  *((_QWORD *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
  v3 = *((_QWORD *)this + 124);
  *a2 = v3;
  if (v3)
    goto LABEL_6;
}

uint64_t re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::MaterialParameterBlock *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re *v8;
  re *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(a1, &v12);
  v4 = a2[3];
  v5 = *((_QWORD *)a1 + 125) & 0xFFFFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFFFFLL) == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v5 == 0xFFFFFFFFFFFFFFFLL)
      goto LABEL_3;
  }
  else if (v5 != 0xFFFFFFFFFFFFFFFLL && (v4 & 0xFFFFFFFFFFFFFFFLL) == v5)
  {
LABEL_3:
    v6 = v12;
    if (!v12)
      return v6;
    goto LABEL_15;
  }
  v8 = (re *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 32))(a2, 8, 8);
  v9 = v8;
  v6 = v12;
  *(_QWORD *)v8 = v12;
  if (v6)
    v8 = (re *)(id)(v6 + 8);
  v10 = re::globalAllocators(v8)[2];
  v13[0] = &off_24ED79C30;
  v14 = v10;
  v15 = v13;
  (*(void (**)(_QWORD *, re *, _QWORD *))(*a2 + 16))(a2, v9, v13);
  if (v15)
  {
    (*(void (**)(_QWORD *))*v15)(v15);
    if (v15 != v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  }
  *((_QWORD *)a1 + 125) = v4;
  if (v6)
LABEL_15:

  return v6;
}

void *re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(re::Allocator *a1, re::MaterialParameterTableBuilder *a2)
{
  void *v4;
  re::MaterialParameterTable *v5;

  v4 = (void *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 1128, 8);
  bzero(v4, 0x468uLL);
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)v4);
  re::MaterialParameterTableBuilder::build(a2, a1, (const re::MaterialParameterBlock *)v4, v5);
  re::MaterialParameterTable::buildPerFrameDestructor((re::MaterialParameterTable *)v4, a2);
  return v4;
}

void re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(re::MaterialParameterBlock *this@<X0>, const re::MaterialParameterBlock **a2@<X8>)
{
  _anonymous_namespace_ *v4;
  re::MaterialParameterTable *v5;

  re::make::shared::object<re::MaterialParameterTable>(this, a2);
}

void *re::MaterialParameterBlock::copyParametersFromArray(re::Allocator *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;

  v6 = (void *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 1128, 8);
  bzero(v6, 0x468uLL);
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)v6);
  re::MaterialParameterTableBuilder::buildFromParameterBlockArray((uint64_t)a1, a2, a3, (uint64_t)v6);
  re::MaterialParameterTable::buildPerFrameDestructor((re::MaterialParameterTable *)v6, a1);
  return v6;
}

BOOL re::MaterialParameterBlock::isEmpty(re::MaterialParameterBlock *this)
{
  return !*((_QWORD *)this + 26)
      && !*((_QWORD *)this + 34)
      && !*((_QWORD *)this + 42)
      && !*((_QWORD *)this + 50)
      && !*((_QWORD *)this + 58)
      && !*((_QWORD *)this + 66)
      && !*((_QWORD *)this + 74)
      && !*((_QWORD *)this + 82)
      && !*((_DWORD *)this + 229)
      && !*((_BYTE *)this + 936)
      && !*((_BYTE *)this + 948)
      && !*((_QWORD *)this + 98)
      && *((_QWORD *)this + 90) == 0;
}

double re::MaterialParameterBlock::setConstant@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, size_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double result;
  _BYTE v13[32];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *a2;
  re::MaterialParameterBlock::handle(a1, &v19, a6);
  v19 = 0;
  if ((*(_BYTE *)(a6 + 12) & 7) != 0)
  {
    *(_QWORD *)&result = re::MaterialParameterBlock::setConstant(a3, a4, a1, (uint64_t *)a6, a5, (uint64_t)v13).n128_u64[0];
  }
  else
  {
    v18 = *a2;
    re::MaterialParameterBlock::addConstant(a1, &v18, a3, a4, a5);
    v18 = 0;
    v14 = *a2;
    re::MaterialParameterBlock::handle(a1, &v14, (uint64_t)&v15);
    *(_QWORD *)a6 = v15;
    result = *(double *)&v16;
    *(_OWORD *)(a6 + 8) = v16;
    *(_BYTE *)(a6 + 24) = v17;
  }
  return result;
}

__n128 re::MaterialParameterBlock::setConstant@<Q0>(size_t __n@<X2>, void *__s2@<X3>, re::MaterialParameterBlock *a3@<X0>, uint64_t *a4@<X1>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v6;
  __n128 result;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v6 = a5;
  v32 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a4 + 12) & 8) != 0)
  {
    v14 = (__n128 *)(a4 + 1);
    v13 = *((unsigned __int16 *)a4 + 4);
    v15 = *((_QWORD *)a3 + 5);
    if (v15 <= v13)
    {
      v18[1] = 0;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v19 = 136315906;
      v20 = "operator[]";
      v21 = 1024;
      v22 = 789;
      v23 = 2048;
      v24 = v13;
      v25 = 2048;
      v26 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v16 = (void *)(*((_QWORD *)a3 + 7) + v13);
    if (memcmp(v16, __s2, __n))
    {
      memcpy(v16, __s2, __n);
      v18[0] = *a4;
      re::MaterialParameterBlock::addConstantDelta(a3, v18, __n, __s2, v6);
    }
    *(_QWORD *)a6 = *a4;
    result = *v14;
    *(__n128 *)(a6 + 8) = *v14;
    *(_BYTE *)(a6 + 24) = *((_BYTE *)a4 + 24);
  }
  else
  {
    v17 = *a4;
    re::MaterialParameterBlock::setConstant(a3, &v17, __n, __s2, a5);
  }
  return result;
}

void *re::MaterialParameterBlock::addConstantDelta(re::MaterialParameterBlock *a1, _QWORD *a2, size_t a3, const void *a4, int a5)
{
  void *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[5];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = (void *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1);
  if ((_DWORD)result)
  {
    v11 = *((_QWORD *)a1 + 122);
    v12 = *(_QWORD *)(v11 + 32) + 3;
    *(_QWORD *)&v14[0] = *a2;
    BYTE8(v14[0]) = 1;
    *(_DWORD *)((char *)v14 + 10) = v12 & 0xFFFC | (a3 << 16) | (a5 << 24);
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::add((_anonymous_namespace_ *)(v11 + 56), (uint64_t)v14);
    re::DynamicArray<BOOL>::resize(*((_QWORD *)a1 + 122) + 16, ((unsigned __int16)v12 & 0xFFFC) + a3);
    v13 = *((_QWORD *)a1 + 122);
    if (*(_QWORD *)(v13 + 32) <= (unint64_t)((unsigned __int16)v12 & 0xFFFC))
    {
      memset(v14, 0, sizeof(v14));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return memcpy((void *)(*(_QWORD *)(v13 + 48) + ((unsigned __int16)v12 & 0xFFFC)), a4, a3);
  }
  return result;
}

_anonymous_namespace_ *re::MaterialParameterBlock::addRemoveConstantDelta(re::MaterialParameterBlock *a1, uint64_t *a2)
{
  _anonymous_namespace_ *result;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  char v7;

  result = (_anonymous_namespace_ *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1);
  if ((_DWORD)result)
  {
    v5 = (_anonymous_namespace_ *)(*((_QWORD *)a1 + 122) + 56);
    v6 = *a2;
    v7 = 0;
    return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::add(v5, (uint64_t)&v6);
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;

  v3 = result;
  v5 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 2);
  if (v4 >= v5)
  {
    v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v5;
        if (!v5)
          v7 = 8;
        if (v7 <= v6)
          v8 = v6;
        else
          v8 = v7;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity(result, v8);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v4 = *((_QWORD *)v3 + 2);
  }
  v9 = *((_QWORD *)v3 + 4) + 16 * v4;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v9 + 8) = v10;
  if (v10)
  {
    *(_DWORD *)(v9 + 10) = *(_DWORD *)(a2 + 10);
    v4 = *((_QWORD *)v3 + 2);
  }
  *((_QWORD *)v3 + 2) = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

double re::MaterialParameterBlock::setBool@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  char v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(this, &v10, 1uLL, &v9, 2, a4);
}

double re::MaterialParameterBlock::setFloat@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, float a3@<S0>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  float v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(this, &v10, 4uLL, &v9, 1, a4);
}

double re::MaterialParameterBlock::setInt@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  int v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(this, &v10, 4uLL, &v9, 3, a4);
}

double re::MaterialParameterBlock::setUint@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  int v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(this, &v10, 4uLL, &v9, 7, a4);
}

double re::MaterialParameterBlock::setVector2F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 8uLL, &v9, 32, a4);
}

double re::MaterialParameterBlock::setInt2@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  double v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 8uLL, &v9, 4, a3);
}

double re::MaterialParameterBlock::setUint2@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  double v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 8uLL, &v9, 8, a3);
}

double re::MaterialParameterBlock::setVector3F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD v10[3];
  uint64_t v11;

  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v11 = v5;
  return re::MaterialParameterBlock::setConstant(a1, &v11, 0x10uLL, v10, 33, a5);
}

double re::MaterialParameterBlock::setColorGamut3F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  __int128 v18;
  uint64_t v19[2];
  uint64_t v20;

  v19[0] = a3;
  v19[1] = a4;
  v8 = *((_QWORD *)a1 + 121);
  if (v8 && (v9 = *(unsigned __int8 **)(v8 + 152)) != 0)
    v10 = *v9;
  else
    v10 = 0;
  *(_QWORD *)&v11 = re::ColorGamut3F::as(v19, v10, 1);
  DWORD2(v11) = v12;
  v18 = v11;
  if (a2)
  {
    v13 = *a2;
    if (*a2)
    {
      v14 = a2[1];
      if (v14)
      {
        v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v13 = 31 * v13 + v14;
          v16 = *v15++;
          v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v20 = v13;
  return re::MaterialParameterBlock::setConstant(a1, &v20, 0x10uLL, &v18, 20, a5);
}

double re::MaterialParameterBlock::setColorGamut3F@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  __int128 v11;
  int v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16[2];

  v16[0] = a3;
  v16[1] = a4;
  v8 = *((_QWORD *)a1 + 121);
  if (v8 && (v9 = *(unsigned __int8 **)(v8 + 152)) != 0)
    v10 = *v9;
  else
    v10 = 0;
  *(_QWORD *)&v11 = re::ColorGamut3F::as(v16, v10, 1);
  DWORD2(v11) = v12;
  v15 = v11;
  v14 = *a2;
  return re::MaterialParameterBlock::setConstant(a1, &v14, 0x10uLL, &v15, 20, a5);
}

{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  __int128 v11;
  int v12;
  double result;
  __int128 v14;
  uint64_t v15[2];

  v15[0] = a3;
  v15[1] = a4;
  v8 = *((_QWORD *)a1 + 121);
  if (v8 && (v9 = *(unsigned __int8 **)(v8 + 152)) != 0)
    v10 = *v9;
  else
    v10 = 0;
  *(_QWORD *)&v11 = re::ColorGamut3F::as(v15, v10, 1);
  DWORD2(v11) = v12;
  v14 = v11;
  *(_QWORD *)&result = re::MaterialParameterBlock::setConstant(0x10uLL, &v14, a1, a2, 20, a5).n128_u64[0];
  return result;
}

double re::MaterialParameterBlock::setInt3@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  __n128 v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 0x10uLL, &v9, 5, a3);
}

double re::MaterialParameterBlock::setUint3@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  __n128 v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 0x10uLL, &v9, 9, a3);
}

double re::MaterialParameterBlock::setVector4F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD v10[3];
  uint64_t v11;

  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v11 = v5;
  return re::MaterialParameterBlock::setConstant(a1, &v11, 0x10uLL, v10, 34, a5);
}

double re::MaterialParameterBlock::setColorGamut4F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v15[4];
  __int128 v16;

  v7 = *((_QWORD *)a1 + 121);
  if (v7 && (v8 = *(unsigned __int8 **)(v7 + 152)) != 0)
    v9 = *v8;
  else
    v9 = 0;
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)v15);
  v16 = *(_OWORD *)v15;
  if (a2)
  {
    v10 = *a2;
    if (*a2)
    {
      v11 = a2[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
      v10 &= ~0x8000000000000000;
    }
  }
  else
  {
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v15[0] = v10;
  return re::MaterialParameterBlock::setConstant(a1, v15, 0x10uLL, &v16, 21, a4);
}

double re::MaterialParameterBlock::setColorGamut4F@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v7 = *((_QWORD *)a1 + 121);
  if (v7 && (v8 = *(unsigned __int8 **)(v7 + 152)) != 0)
    v9 = *v8;
  else
    v9 = 0;
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)&v12);
  v13 = v12;
  v11 = *a2;
  return re::MaterialParameterBlock::setConstant(a1, &v11, 0x10uLL, &v13, 21, a4);
}

{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  double result;
  __int128 v11;
  __int128 __s2;

  v7 = *((_QWORD *)a1 + 121);
  if (v7 && (v8 = *(unsigned __int8 **)(v7 + 152)) != 0)
    v9 = *v8;
  else
    v9 = 0;
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)&v11);
  __s2 = v11;
  *(_QWORD *)&result = re::MaterialParameterBlock::setConstant(0x10uLL, &__s2, a1, a2, 21, a4).n128_u64[0];
  return result;
}

double re::MaterialParameterBlock::setInt4@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  __n128 v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 0x10uLL, &v9, 6, a3);
}

double re::MaterialParameterBlock::setUint4@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  __n128 v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 0x10uLL, &v9, 10, a3);
}

double re::MaterialParameterBlock::setMatrix2x2F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD v10[2];
  uint64_t v11;

  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v11 = v5;
  return re::MaterialParameterBlock::setConstant(a1, &v11, 0x10uLL, v10, 48, a5);
}

double re::MaterialParameterBlock::setMatrix3x3F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v9;

  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v9 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v9, 0x30uLL, a3, 49, a4);
}

double re::MaterialParameterBlock::setMatrix4x4F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v9;

  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v9 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v9, 0x40uLL, a3, 50, a4);
}

double re::MaterialParameterBlock::setTextureHandle@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, const re::TextureHandle *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  uint64_t v9;

  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v9 = v4;
  return re::MaterialParameterBlock::setTextureHandle(this, &v9, a3, a4);
}

double re::MaterialParameterBlock::setTextureHandle@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, re::TextureHandle *a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  _BYTE v9[32];
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *a2;
  re::MaterialParameterBlock::handle(a1, &v15, a4);
  v15 = 0;
  if ((*(_BYTE *)(a4 + 12) & 7) != 0)
  {
    *(_QWORD *)&result = re::MaterialParameterBlock::setTextureHandle(a1, a4, a3, (uint64_t)v9).n128_u64[0];
  }
  else
  {
    v14 = *a2;
    re::MaterialParameterBlock::addTexture((uint64_t)a1, (const re::WeakStringID *)&v14, a3);
    v14 = 0;
    v10 = *a2;
    re::MaterialParameterBlock::handle(a1, &v10, (uint64_t)&v11);
    *(_QWORD *)a4 = v11;
    result = *(double *)&v12;
    *(_OWORD *)(a4 + 8) = v12;
    *(_BYTE *)(a4 + 24) = v13;
  }
  return result;
}

__n128 re::MaterialParameterBlock::setTextureHandle@<Q0>(re::MaterialParameterBlock *a1@<X0>, uint64_t a2@<X1>, re::TextureHandle *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  __n128 result;
  unint64_t v10;
  __n128 *v11;
  unint64_t v12;
  re::TextureHandle *v13;
  re::TextureHandle *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)a2;
  v18[0] = *(_QWORD *)a2;
  if ((*(_BYTE *)(a2 + 12) & 8) != 0)
  {
    v11 = (__n128 *)(a2 + 8);
    v10 = *(unsigned __int16 *)(a2 + 8);
    v12 = *((_QWORD *)a1 + 10);
    if (v12 <= v10)
    {
      v18[1] = 0;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v19 = 136315906;
      v20 = "operator[]";
      v21 = 1024;
      v22 = 789;
      v23 = 2048;
      v24 = v10;
      v25 = 2048;
      v26 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = (re::TextureHandle *)(*((_QWORD *)a1 + 12) + 16 * v10);
    if (*((_QWORD *)a3 + 1) != *((_QWORD *)v13 + 1))
    {
      v17 = v7;
      re::TextureHandle::stopTrackingMaterialParameterBlock((uint64_t)v13, (uint64_t)a1, &v17);
      v14 = re::TextureHandle::operator=(v13, a3);
      v16 = v7;
      re::TextureHandle::startTrackingMaterialParameterBlock((uint64_t)v14, (uint64_t)a1, &v16);
      re::MaterialParameterBlock::enqueueTextureValueChangedDelta(a1, (const re::WeakStringID *)v18, a3);
      v7 = *(_QWORD *)a2;
    }
    *(_QWORD *)a4 = v7;
    result = *v11;
    *(__n128 *)(a4 + 8) = *v11;
    *(_BYTE *)(a4 + 24) = v11[1].n128_u8[0];
  }
  else
  {
    v15 = v7;
    re::MaterialParameterBlock::setTextureHandle((_QWORD *)a4, a1, &v15, a3);
  }
  return result;
}

__n128 re::MaterialParameterBlock::setBuffer@<Q0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  uint64_t v9;
  __n128 result;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  _QWORD *v19;
  _QWORD v20[2];
  _QWORD v21[2];
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  id v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 12) & 8) != 0)
  {
    v11 = (__n128 *)(a2 + 1);
    v12 = *((unsigned __int16 *)a2 + 4);
    v13 = *((_QWORD *)a1 + 15);
    if (v13 <= v12)
    {
      v21[1] = 0;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v22 = 136315906;
      v23 = "operator[]";
      v24 = 1024;
      v25 = 789;
      v26 = 2048;
      v27 = v12;
      v28 = 2048;
      v29 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v14 = *((_QWORD *)a1 + 17);
    v15 = v14 + 16 * v12;
    if (*(_QWORD *)v15 != *(_QWORD *)a3
      || *(_DWORD *)(v15 + 8) != *(_DWORD *)(a3 + 8)
      || *(_DWORD *)(v14 + 16 * v12 + 12) != *(_DWORD *)(a3 + 12))
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)v15, (void **)a3);
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(a3 + 8);
      if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1))
      {
        v16 = *a2;
        v17 = *(id *)a3;
        v18 = *(void **)(a3 + 8);
        v19 = (_QWORD *)(*((_QWORD *)a1 + 122) + 96);
        *(_QWORD *)&v30 = v16;
        BYTE8(v30) = 1;
        v31[0] = v17;
        v31[1] = v18;
        re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::add(v19, (uint64_t)&v30);
        if (BYTE8(v30) && v31[0])

        if (v17)
      }
    }
    *(_QWORD *)a4 = *a2;
    result = *v11;
    *(__n128 *)(a4 + 8) = *v11;
    *(_BYTE *)(a4 + 24) = *((_BYTE *)a2 + 24);
  }
  else
  {
    v21[0] = *a2;
    v8 = *(id *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    v20[0] = v8;
    v20[1] = v9;
    re::MaterialParameterBlock::setBuffer(a1, v21, v20);
    if (v8)

  }
  return result;
}

double re::MaterialParameterBlock::setBuffer@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  void *v9;
  double result;
  id v11;
  void *v12;
  id v13[2];
  _QWORD v14[4];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  id v19[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *a2;
  re::MaterialParameterBlock::handle(a1, &v21, a4);
  v21 = 0;
  if ((*(_BYTE *)(a4 + 12) & 7) != 0)
  {
    v8 = *(id *)a3;
    v9 = *(void **)(a3 + 8);
    v13[0] = v8;
    v13[1] = v9;
    *(_QWORD *)&result = re::MaterialParameterBlock::setBuffer(a1, (uint64_t *)a4, (uint64_t)v13, (uint64_t)v14).n128_u64[0];
    v14[0] = 0;
    if (v13[0])

  }
  else
  {
    v20 = *a2;
    v11 = *(id *)a3;
    v12 = *(void **)(a3 + 8);
    v19[0] = v11;
    v19[1] = v12;
    re::MaterialParameterBlock::addBuffer((uint64_t)a1, &v20, (uint64_t)v19);
    if (v19[0])
    {

      v19[0] = 0;
    }
    v20 = 0;
    v15 = *a2;
    re::MaterialParameterBlock::handle(a1, &v15, (uint64_t)&v16);
    *(_QWORD *)a4 = v16;
    result = *(double *)&v17;
    *(_OWORD *)(a4 + 8) = v17;
    *(_BYTE *)(a4 + 24) = v18;
  }
  return result;
}

void re::MaterialParameterBlock::setBuffer(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  id v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;

  if (a2)
  {
    v7 = *a2;
    if (*a2)
    {
      v8 = a2[1];
      if (v8)
      {
        v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v7 = 31 * v7 + v8;
          v10 = *v9++;
          v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v14 = v7;
  v11 = *(id *)a3;
  v12 = *(_QWORD *)(a3 + 8);
  v13[0] = v11;
  v13[1] = v12;
  re::MaterialParameterBlock::setBuffer(a1, &v14, (uint64_t)v13, a4);
  if (v11)

}

void re::MaterialParameterBlock::setBufferWithBytes(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  id v10;
  id v11;
  id v12;
  id v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v12 = *(id *)(*((_QWORD *)a1 + 121) + 184);
  v10 = objc_msgSend(v12, sel_newBufferWithBytes_length_options_, a3, a4, 0);
  v16 = *a2;
  v11 = v10;
  v13 = v11;
  v14 = 0;
  v15 = objc_msgSend(v10, sel_length);
  re::MaterialParameterBlock::setBuffer(a1, &v16, (uint64_t)&v13, a5);
  if (v11)

  if (v10)
}

void re::MaterialParameterBlock::setSampler(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  id v10;
  id v11;
  uint64_t v12;

  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *v8++;
          v7 = v9;
        }
        while (v9);
      }
      v6 &= ~0x8000000000000000;
    }
  }
  else
  {
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v12 = v6;
  v10 = *a3;
  v11 = v10;
  re::MaterialParameterBlock::setSampler(a1, &v12, &v11, a4);
  if (v10)

}

double re::MaterialParameterBlock::setSampler@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  id v9;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *a2;
  re::MaterialParameterBlock::handle(a1, &v17, a4);
  v17 = 0;
  if ((*(_BYTE *)(a4 + 12) & 7) != 0)
  {
    v9 = *a3;
    re::MaterialParameterBlock::setSampler(v10, a1, a4, &v9);
    v10[0] = 0;
    if (v9)

  }
  else
  {
    v16 = *a2;
    v15 = *a3;
    re::MaterialParameterBlock::addSampler((uint64_t)a1, &v16, &v15);
    if (v15)
    {

      v15 = 0;
    }
    v16 = 0;
    v11 = *a2;
    re::MaterialParameterBlock::handle(a1, &v11, (uint64_t)&v12);
    *(_QWORD *)a4 = v12;
    result = *(double *)&v13;
    *(_OWORD *)(a4 + 8) = v13;
    *(_BYTE *)(a4 + 24) = v14;
  }
  return result;
}

__n128 re::MaterialParameterBlock::setSampler@<Q0>(re::MaterialParameterBlock *a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  __n128 result;
  __n128 *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  id v17;
  uint64_t v18[2];
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  id v28[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 12) & 8) != 0)
  {
    v10 = (__n128 *)(a2 + 8);
    v11 = *(unsigned __int16 *)(a2 + 8);
    v12 = *((_QWORD *)a1 + 20);
    if (v12 <= v11)
    {
      v18[1] = 0;
      v30 = 0u;
      v31 = 0u;
      *(_OWORD *)v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v19 = 136315906;
      v20 = "operator[]";
      v21 = 1024;
      v22 = 789;
      v23 = 2048;
      v24 = v11;
      v25 = 2048;
      v26 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = (void **)(*((_QWORD *)a1 + 22) + 8 * v11);
    if (*v13 != *a3)
    {
      NS::SharedPtr<MTL::Texture>::operator=(v13, a3);
      if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1))
      {
        v14 = *(_QWORD *)a2;
        v15 = *a3;
        v16 = (_QWORD *)(*((_QWORD *)a1 + 122) + 176);
        *(_QWORD *)&v27 = v14;
        BYTE8(v27) = 1;
        v28[0] = v15;
        re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add(v16, (uint64_t)&v27);
        if (BYTE8(v27) && v28[0])

        if (v15)
      }
    }
    *(_QWORD *)a4 = *(_QWORD *)a2;
    result = *v10;
    *(__n128 *)(a4 + 8) = *v10;
    *(_BYTE *)(a4 + 24) = *(_BYTE *)(a2 + 24);
  }
  else
  {
    v18[0] = *(_QWORD *)a2;
    v8 = *a3;
    v17 = v8;
    result.n128_f64[0] = re::MaterialParameterBlock::setSampler(a1, v18, &v17, a4);
    if (v8)

  }
  return result;
}

BOOL re::MaterialParameterBlock::bindTextureToSampler(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint8_t *v13;
  signed __int8 v14;
  unsigned __int8 *v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v30[2];
  _BYTE v31[12];
  __int16 v32;
  int v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  unint64_t v37;
  uint8_t buf[32];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v8 = (_anonymous_namespace_ *)(a1 + 47);
  v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 47, a3);
  if (v9 == -1)
  {
    v17 = *re::graphicsLogObjects((re *)0xFFFFFFFFFFFFFFFFLL);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *a2;
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v19 = 0;
      }
      else if (v18)
      {
        v19 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v18);
      }
      else
      {
        v19 = (char *)&str_110;
      }
      if (*a3 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v28 = 0;
      }
      else if (*a3)
      {
        v28 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a3);
      }
      else
      {
        v28 = (char *)&str_110;
      }
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v19;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v28;
      _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Attempting to bind texture \"%s\" to non-existent sampler \"%s\", skipping binding.", buf, 0x16u);
    }
  }
  else
  {
    v10 = a1[48];
    re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)buf, a4);
    v11 = &buf[9];
    if ((buf[8] & 1) != 0)
      v11 = *(uint8_t **)&buf[16];
    if (v11)
    {
      v12 = (char)*v11;
      if (v12)
      {
        if ((buf[8] & 1) != 0)
          v13 = (uint8_t *)(*(_QWORD *)&buf[16] + 1);
        else
          v13 = &buf[10];
        v14 = *v13;
        if (*v13)
        {
          v15 = v13 + 1;
          do
          {
            v12 = 31 * v12 + v14;
            v16 = *v15++;
            v14 = v16;
          }
          while (v16);
        }
        v12 &= ~0x8000000000000000;
      }
    }
    else
    {
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v30[0] = v12;
    if (*(_QWORD *)buf)
      v20 = (buf[8] & 1) == 0;
    else
      v20 = 1;
    if (!v20)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    v21 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v8, v30);
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addOrReplace((_anonymous_namespace_ *)(a1 + 87), a2, v30);
    re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if (v21 == -1)
    {
      v22 = *(unsigned int *)(v10 + 16 * v9 + 8);
      *(_DWORD *)buf = a1[20];
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v8, v30, (int *)buf);
      v23 = a1[20];
      if (v23 <= v22)
      {
        v30[1] = 0;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v31 = 136315906;
        *(_QWORD *)&v31[4] = "operator[]";
        v32 = 1024;
        v33 = 789;
        v34 = 2048;
        v35 = v22;
        v36 = 2048;
        v37 = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)v31 = *(id *)(a1[22] + 8 * v22);
      re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 18), (id *)v31);
      if (a1[122])
      {
        v24 = v30[0];
        v25 = *(id *)v31;
        v26 = (_QWORD *)(a1[122] + 176);
        *(_QWORD *)buf = v24;
        buf[8] = 1;
        *(_QWORD *)&buf[16] = v25;
        re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add(v26, (uint64_t)buf);
        if (buf[8] && *(_QWORD *)&buf[16])

        if (v25)
      }
      if (*(_QWORD *)v31)

    }
    v27 = a1[122];
    if (v27)
    {
      *(_QWORD *)buf = *a2;
      buf[8] = 1;
      *(_QWORD *)&buf[16] = v30[0];
      re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::add((_QWORD *)(v27 + 376), (uint64_t)buf);
    }
  }
  return v9 != -1;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4];
  v6 = v5 + 24 * v4;
  *(_QWORD *)v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v6 + 8) = v7;
  if (v7)
    *(_QWORD *)(v5 + 24 * v4 + 16) = *(_QWORD *)(a2 + 16);
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

BOOL re::MaterialParameterBlock::unbindTextureFromSamplers(uint64_t *a1, uint64_t *a2)
{
  _BOOL8 v4;
  _QWORD *v5;
  uint64_t v7;
  char v8;

  v4 = re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::remove(a1 + 87, a2);
  if (v4
    && re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    v5 = (_QWORD *)(a1[122] + 376);
    v7 = *a2;
    v8 = 0;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::add(v5, (uint64_t)&v7);
  }
  return v4;
}

uint64_t re::MaterialParameterBlock::setUVIndexForTexture(_QWORD *a1, uint64_t *a2, int a3)
{
  _anonymous_namespace_ *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;

  v12 = a3;
  v6 = (_anonymous_namespace_ *)(a1 + 95);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 95, a2);
  if (result == -1 || *(_DWORD *)(a1[96] + 16 * result + 8) != a3)
  {
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addOrReplace(v6, a2, &v12);
    result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if ((_DWORD)result)
    {
      v8 = (_QWORD *)(a1[122] + 416);
      v9 = *a2;
      v10 = 1;
      v11 = v12;
      return (uint64_t)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::add(v8, (uint64_t)&v9);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 16 * v4;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  v6 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v5 + 8) = v6;
  if (v6)
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 12);
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::MaterialParameterBlock::setSwizzleForTexture(_QWORD *a1, uint64_t *a2, int a3)
{
  _QWORD *result;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _BYTE v12[12];
  char v13;
  char v14;
  int v15;

  v15 = a3;
  v11 = *a2;
  result = (_QWORD *)re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)a1, &v11, (uint64_t)v12);
  v11 = 0;
  v6 = v13 & 7;
  if ((v13 & 7) != 0 && (v6 == 2 || v6 == 1 && v14 == 64))
  {
    re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::addOrReplace((_anonymous_namespace_ *)(a1 + 103), a2, &v15);
    result = (_QWORD *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if ((_DWORD)result)
    {
      v7 = (_QWORD *)(a1[122] + 456);
      v8 = *a2;
      v9 = 1;
      v10 = v15;
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::add(v7, (uint64_t)&v8);
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::addOrReplace(_anonymous_namespace_ *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::internalAdd(a1, a2, a3);
  v7 = v6;
  re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateKvpsHash((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v6);
  *(_DWORD *)(*((_QWORD *)a1 + 1) + 16 * v7 + 8) = *a3;
  re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateKvpsHash((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v7);
  return *((_QWORD *)a1 + 1) + 16 * v7 + 8;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 16 * v4;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  v6 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v5 + 8) = v6;
  if (v6)
  {
    *(_DWORD *)(v5 + 9) = *(_DWORD *)(a2 + 9);
    v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::MaterialParameterBlock::resetSwizzleForTexture(re::MaterialParameterBlock *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  result = re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::remove((_QWORD *)a1 + 103, a2);
  if ((_DWORD)result)
  {
    result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1);
    if ((_DWORD)result)
    {
      v5 = *a2;
      v6 = 0;
      return (uint64_t)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::add((_QWORD *)(*((_QWORD *)a1 + 122) + 456), (uint64_t)&v5);
    }
  }
  return result;
}

BOOL re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::remove(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateHashes((uint64_t)a1, a1[1] + 16 * v3);
    v9 = a1[2];
    *(_QWORD *)(a1[1] + 16 * v4) = 0;
    v10 = a1[4];
    if (v7)
      ++v10;
    v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v10;
    if (v9 >= 0x11 && v11 < v9 >> 2)
      re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::resize((uint64_t)a1, 0);
  }
  return v4 != -1;
}

unint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(a1, a2, (int *)a3);
  v7 = 5 * v6;
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash((uint64_t)a1, (re::WeakParameterBinding *)(*((_QWORD *)a1 + 1) + 40 * v6));
  v8 = *((_QWORD *)a1 + 1) + 8 * v7;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)a3;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 8);
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(a3 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 24);
  return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash((uint64_t)a1, (re::WeakParameterBinding *)v8);
}

double re::MaterialParameterBlock::setBinding@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double result;
  uint64_t v13[4];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *a2;
  re::MaterialParameterBlock::handle(a1, &v19, a6);
  v19 = 0;
  if ((*(_BYTE *)(a6 + 12) & 7) != 0)
  {
    re::MaterialParameterBlock::setBinding(v13, (int)a1, a6, a3);
  }
  else
  {
    v18 = *a2;
    re::MaterialParameterBlock::addBinding(a1, &v18, a3, a4, a5);
    v18 = 0;
    v14 = *a2;
    re::MaterialParameterBlock::handle(a1, &v14, (uint64_t)&v15);
    *(_QWORD *)a6 = v15;
    result = *(double *)&v16;
    *(_OWORD *)(a6 + 8) = v16;
    *(_BYTE *)(a6 + 24) = v17;
  }
  return result;
}

void re::MaterialParameterBlock::setBinding(_anonymous_namespace_ *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD v12[2];
  uint64_t v13;

  v12[0] = 0;
  v12[1] = &str_110;
  v13 = v12[0] >> 1;
  re::MaterialParameterBlock::setBinding(a1, &v13, a3, a4, a5, a6);
  re::StringID::destroyString((re::StringID *)v12);
}

void re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a2;
  v3 = **a2;
  if (v3)
  {

    *v2 = 0;
  }
}

_QWORD *re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED79C30;
  return result;
}

_QWORD *re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED79C30;
  return result;
}

uint64_t re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::DynamicArray<re::TextureHandle>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  re::TextureHandle *v6;
  re::TextureHandle *v7;
  uint64_t v8;
  re::TextureHandle *v9;
  re::TextureHandle *v10;
  uint64_t v11;
  re::TextureHandle *v12;
  uint64_t v13;
  re::TextureHandle *v14;
  uint64_t v15;
  re::TextureHandle *v16;
  const re::TextureHandle *v17;
  re::TextureHandle *v18;
  uint64_t v19;
  re::TextureHandle *v20;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = a1[2];
  if (v4 >= v5)
  {
    re::DynamicArray<re::TextureHandle>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    v12 = *(re::TextureHandle **)(a2 + 32);
    v13 = a1[2];
    v14 = (re::TextureHandle *)a1[4];
    if (v13)
    {
      v15 = 16 * v13;
      do
      {
        v16 = re::TextureHandle::operator=(v14, v12);
        v12 = (re::TextureHandle *)((char *)v12 + 16);
        v14 = (re::TextureHandle *)((char *)v16 + 16);
        v15 -= 16;
      }
      while (v15);
      v14 = (re::TextureHandle *)a1[4];
      v13 = a1[2];
      v12 = *(re::TextureHandle **)(a2 + 32);
    }
    if (v13 != v4)
    {
      v17 = (re::TextureHandle *)((char *)v12 + 16 * v13);
      v18 = (re::TextureHandle *)((char *)v14 + 16 * v13);
      v19 = 16 * v4 - 16 * v13;
      do
      {
        v20 = re::TextureHandle::TextureHandle(v18, v17);
        v17 = (const re::TextureHandle *)((char *)v17 + 16);
        v18 = (re::TextureHandle *)((char *)v20 + 16);
        v19 -= 16;
      }
      while (v19);
    }
  }
  else
  {
    v6 = (re::TextureHandle *)a1[4];
    if (v4)
    {
      v7 = *(re::TextureHandle **)(a2 + 32);
      v8 = 16 * v4;
      do
      {
        v9 = re::TextureHandle::operator=(v6, v7);
        v7 = (re::TextureHandle *)((char *)v7 + 16);
        v6 = (re::TextureHandle *)((char *)v9 + 16);
        v8 -= 16;
      }
      while (v8);
      v6 = (re::TextureHandle *)a1[4];
      v5 = a1[2];
    }
    if (v4 != v5)
    {
      v10 = (re::TextureHandle *)((char *)v6 + 16 * v4);
      v11 = 16 * v5 - 16 * v4;
      do
      {
        re::TextureHandle::invalidate(v10);
        v10 = (re::TextureHandle *)((char *)v10 + 16);
        v11 -= 16;
      }
      while (v11);
    }
  }
  a1[2] = v4;
}

void re::DynamicArray<re::BufferSlice>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::BufferSlice>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BufferSlice *,re::BufferSlice *,re::BufferSlice *,0>(*(void ***)(a2 + 32), (void **)(*(_QWORD *)(a2 + 32) + 16 * a1[2]), a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = v9 + 16 * v4;
      v11 = v9 + 16 * v8;
      v12 = (_QWORD *)(a1[4] + 16 * v8);
      do
      {
        *v12 = *(id *)v11;
        v12[1] = *(_QWORD *)(v11 + 8);
        v11 += 16;
        v12 += 2;
      }
      while (v11 != v10);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BufferSlice *,re::BufferSlice *,re::BufferSlice *,0>(*(void ***)(a2 + 32), (void **)(*(_QWORD *)(a2 + 32) + 16 * v4), a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = (id *)(a1[4] + 16 * v4);
      v7 = 16 * v5 - 16 * v4;
      do
      {
        if (*v6)
        {

          *v6 = 0;
        }
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

void **std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BufferSlice *,re::BufferSlice *,re::BufferSlice *,0>(void **result, void **a2, uint64_t a3)
{
  void **v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = NS::SharedPtr<MTL::Texture>::operator=((void **)a3, v5);
      *(_QWORD *)(a3 + 8) = v5[1];
      v5 += 2;
      a3 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::DynamicArray<re::BufferSlice>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v4 + 16 * a2;
    v6 = v4 + 16 * v2;
    if (v5 + 16 != v6)
    {
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)v5, (void **)(v5 + 16));
        *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 24);
        v7 = v5 + 32;
        v5 += 16;
      }
      while (v7 != v6);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(_QWORD *)(a1 + 32) + 16 * v2;
  v9 = *(void **)(v8 - 16);
  if (v9)
  {

    *(_QWORD *)(v8 - 16) = 0;
    v2 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PassTechniqueMappingDelta>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

BOOL re::Optional<re::MaterialParameterDepthBiasState>::operator==(float *a1, float *a2)
{
  int v2;
  _BOOL8 v3;
  BOOL v4;

  v2 = *(unsigned __int8 *)a2;
  v3 = (v2 | *(unsigned __int8 *)a1) == 0;
  if (*(_BYTE *)a1)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
    return a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
  return v3;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::resize((uint64_t)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = *(_QWORD *)a1;
  v12 = v9 % v10;
  while (1)
  {
    v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40)
      break;
    if (v12 + 1 == v10)
      v12 = 0;
    else
      ++v12;
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v14 = v11 + 16 * v12;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v12;
  LODWORD(v14) = *a3;
  v17 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v17 = *a2;
  *(_DWORD *)(v17 + 8) = v14;
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateHashes((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v16);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

unint64_t re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateKvpsHash(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  char v6;

  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                           * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30))) >> 27));
  v4 = v3 ^ (v3 >> 31);
  result = re::Hash<re::mtl::TextureSwizzleChannels>::operator()((uint64_t)&v6, (unsigned __int8 *)(a2 + 8));
  *(_QWORD *)(a1 + 48) ^= v4 ^ (result + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9);
  return result;
}

void re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::resize(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24) + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::doResize(a1, v3);
}

unint64_t re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateHashes(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  char v6;

  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                           * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30))) >> 27));
  v4 = v3 ^ (v3 >> 31);
  *(_QWORD *)(a1 + 40) ^= v4;
  result = re::Hash<re::mtl::TextureSwizzleChannels>::operator()((uint64_t)&v6, (unsigned __int8 *)(a2 + 8));
  *(_QWORD *)(a1 + 48) ^= v4 ^ (result + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9);
  return result;
}

_QWORD *re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    v9 = v3[2];
    if (v9)
    {
      v10 = 0;
      for (i = 0; i < v9; ++i)
      {
        v12 = v3[1] + v10;
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 84148994;
        v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    v9 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

void re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::doResize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD v22[4];

  v4 = *(_QWORD *)(a1 + 56);
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::init(v22, v4, a2);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = v5 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v9 = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v7)
        goto LABEL_7;
    }
    v10 = __clz(__rbit64(v9)) + v6;
    while (v10 != -1)
    {
      re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::internalAdd(v22, *(_QWORD *)(a1 + 8) + 16 * v10, *(_QWORD *)(a1 + 8) + 16 * v10 + 8);
      v17 = v10 >> 4;
      v5 = *(_QWORD *)(a1 + 16);
      if (v10 >> 4 >= v5 >> 4)
        break;
      v18 = __clz(__rbit64((-2 << (v10 & 0xF)) & v9));
      if (v18 >= 0x40)
      {
        v19 = 16 * v17;
        v20 = ~v17 + (v5 >> 4);
        while (v20)
        {
          v9 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v19 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v21 = __clz(__rbit64(v9));
          v19 += 16;
          --v20;
          if (v21 <= 0x3F)
          {
            v10 = v21 + v19;
            goto LABEL_15;
          }
        }
        break;
      }
      v10 = v18 + (v10 & 0xFFFFFFFFFFFFFFF0);
LABEL_15:
      ;
    }
  }
LABEL_7:
  v11 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = *(_QWORD *)(a1 + 56);
  v12 = v22[0];
  v13 = v22[1];
  v22[0] = *(_OWORD *)a1;
  *(_QWORD *)&v22[1] = v5;
  v14 = v22[2];
  v15 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&v22[3];
  *(_QWORD *)(a1 + 56) = v11;
  *(_OWORD *)((char *)&v22[2] + 8) = v15;
  v16 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)((char *)&v22[1] + 8) = v16;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v22);
}

unint64_t re::Hash<re::mtl::TextureSwizzleChannels>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  v3 = v2 ^ (v2 >> 31);
  v4 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2[1]) ^ ((0xBF58476D1CE4E5B9 * a2[1]) >> 27));
  v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2[2]) ^ ((0xBF58476D1CE4E5B9 * a2[2]) >> 27));
  v6 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2[3]) ^ ((0xBF58476D1CE4E5B9 * a2[3]) >> 27));
  v7 = (v4 ^ (v4 >> 31)) + (v3 << 6) + (v3 >> 2);
  return ((((v7 - 0x61C8864680B583E9) ^ v3) << 6)
        + (((v7 - 0x61C8864680B583E9) ^ v3) >> 2)
        + (((v6 ^ (v6 >> 31)) + ((v5 ^ (v5 >> 31)) << 6) + ((v5 ^ (v5 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v5 ^ (v5 >> 31))
        - 0x61C8864680B583E9) ^ (v7 - 0x61C8864680B583E9) ^ v3;
}

_QWORD *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::ArgumentBufferTextureRecord::~ArgumentBufferTextureRecord(id *this)
{
  if (*((_BYTE *)this + 28))
  {
    if (*this)
    {

      *this = 0;
    }
  }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)this);
  }
}

void re::ArgumentBufferTextureRecord::getRenderThreadTexture(id *this@<X0>, _QWORD *a2@<X8>)
{
  if (*((_BYTE *)this + 28))
    *a2 = *this;
  else
    re::TextureHandle::metalTexture((os_unfair_lock_s **)this, a2);
}

float32x2_t *re::ColorGamut4F::ColorGamut4F(float32x2_t *a1, CGColorRef color, char a3)
{
  CGColorSpace *ColorSpace;
  float64x2_t *Components;
  float32_t v8;
  float32_t Alpha;
  CFStringRef Name;
  float32_t v11;
  float32_t v12;
  char v14;
  float64x2_t v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  a1[2].i8[0] = 0;
  ColorSpace = CGColorGetColorSpace(color);
  Components = (float64x2_t *)CGColorGetComponents(color);
  v14 = 0;
  if (re::ColorHelpers::getColorGamutFromCGStandardLinearColorSpace(ColorSpace, &v14))
  {
    *a1 = vcvt_f32_f64(*Components);
    v8 = Components[1].f64[0];
    a1[1].f32[0] = v8;
    Alpha = CGColorGetAlpha(color);
    a1[1].f32[1] = Alpha;
    a1[2].i8[0] = v14;
  }
  else
  {
    Name = CGColorSpaceGetName(ColorSpace);
    if (re::ColorHelpers::getColorGamutFromCGColorSpaceName(Name, &v14))
      a3 = v14;
    if (re::ColorHelpers::getCGColorTransformToGamut(re::ColorGamut)::onceToken != -1)
      dispatch_once(&re::ColorHelpers::getCGColorTransformToGamut(re::ColorGamut)::onceToken, &__block_literal_global_31);
    CGColorTransformConvertColorComponents();
    a1[2].i8[0] = a3;
    *a1 = vcvt_f32_f64(v15);
    v11 = v16;
    a1[1].f32[0] = v11;
    v12 = CGColorGetAlpha(color);
    a1[1].f32[1] = v12;
  }
  return a1;
}

void re::ColorGamut4F::as(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  char v8;
  float32x4_t v9;
  int v10;
  float32x4_t v11[3];

  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 == a2)
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a1 + 16);
    return;
  }
  v8 = a2;
  re::ColorHelpers::computeGamutTransformMatrix(v6, a2, (uint64_t)v11);
  v9 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11[0], *(float *)a1), v11[1], *(float *)(a1 + 4)), v11[2], *(float *)(a1 + 8));
  if ((~a3 & 3) == 0)
  {
    v9.i32[3] = 0;
    v9 = vmaxnmq_f32(v9, (float32x4_t)0);
LABEL_7:
    v9.i32[3] = 0;
    v9 = vminnmq_f32(v9, (float32x4_t)xmmword_2260EDC60);
    goto LABEL_9;
  }
  if ((a3 & 1) != 0)
  {
    v9.i32[3] = 0;
    v9 = vmaxnmq_f32(v9, (float32x4_t)0);
    goto LABEL_9;
  }
  if ((a3 & 2) != 0)
    goto LABEL_7;
LABEL_9:
  v10 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)a4 = v9.i64[0];
  *(_DWORD *)(a4 + 8) = v9.i32[2];
  *(_DWORD *)(a4 + 12) = v10;
  *(_BYTE *)(a4 + 16) = v8;
}

CGColorRef re::ColorGamut4F::createCGColor(float32x2_t *this)
{
  float64x2_t v1;
  CGColorSpace *CGColorSpaceFromWorkingColorGamut;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = vcvtq_f64_f32(this[1]);
  v4[0] = vcvtq_f64_f32(*this);
  v4[1] = v1;
  CGColorSpaceFromWorkingColorGamut = (CGColorSpace *)re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(this[2].u8[0]);
  return CGColorCreate(CGColorSpaceFromWorkingColorGamut, (const CGFloat *)v4);
}

uint64_t re::ColorGamut3F::as(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;

  if (*((unsigned __int8 *)a1 + 12) == a2)
    return *a1;
  v4 = a1[1];
  v5 = *a1;
  v6 = v4;
  v7 = 1065353216;
  v8 = BYTE4(v4);
  re::ColorGamut4F::as((uint64_t)&v5, a2, a3, (uint64_t)&v9);
  return v9;
}

void *re::introspect_ColorGamut(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  uint64_t v19;
  re::IntrospectionBasic *v20;
  uint64_t v21[2];
  __int128 v22;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Rec709";
      re::introspect_ColorGamut(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "P3D65";
      qword_255829950 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "ACEScg";
      qword_255829958 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 3;
      *(_QWORD *)(v19 + 16) = "Rec2020";
      qword_255829960 = v19;
    }
  }
  {
    v20 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_ColorGamut(BOOL)::info, "ColorGamut", 1, 1, 1, 1);
    *(_QWORD *)v20 = &off_24ED7D9E8;
    *((_QWORD *)v20 + 8) = &re::introspect_ColorGamut(BOOL)::enumTable;
    *((_DWORD *)v20 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_ColorGamut(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_ColorGamut(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    v5 = re::introspect_ColorGamut(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    if ((v5 & 1) != 0)
      return &re::introspect_ColorGamut(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_ColorGamut(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_ColorGamut(BOOL)::info;
    }
  }
  re::introspect_ColorGamut(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_ColorGamut(BOOL)::info, a2);
  v21[0] = 0xD480D84AC2E5ELL;
  v21[1] = (uint64_t)"ColorGamut";
  xmmword_255829990 = v22;
  re::StringID::destroyString((re::StringID *)v21);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_ColorGamut(BOOL)::info;
}

uint64_t *re::allocInfo_ColorGamut3F(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_398);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_398))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A788, 0);
    *(uint64_t *)((char *)&qword_25411A798 + 6) = 0;
    qword_25411A798 = 0;
    qword_25411A7A8 = 0;
    qword_25411A7B0 = 0xFFFFFFFFLL;
    qword_25411A788 = (uint64_t)&off_24ED7DAA8;
    qword_25411A7B8 = (uint64_t)"ColorGamut3F";
    dword_25411A7C0 = 0;
    unk_25411A7C8 = 0u;
    unk_25411A7D8 = 0u;
    unk_25411A7E8 = 0u;
    qword_25411A7F8 = 0;
    __cxa_guard_release(&_MergedGlobals_398);
  }
  return &qword_25411A788;
}

void re::initInfo_ColorGamut3F(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0x31DB7ABF0A5A1BC4;
  v22[1] = "ColorGamut3F";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_25411A728);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411A728);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "r";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411A740 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "g";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411A748 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "b";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411A750 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      re::introspect_ColorGamut((re *)1, v19);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "gamut";
      *(_QWORD *)(v20 + 16) = &re::introspect_ColorGamut(BOOL)::info;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0xC00000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411A758 = v20;
      __cxa_guard_release(&qword_25411A728);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411A740;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ColorGamut3F>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ColorGamut3F>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ColorGamut3F>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ColorGamut3F>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

void re::internal::defaultConstruct<re::ColorGamut3F>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *(_QWORD *)((char *)a3 + 5) = 0;
  *a3 = 0;
}

_QWORD *re::internal::defaultConstructV2<re::ColorGamut3F>(_QWORD *result)
{
  *(_QWORD *)((char *)result + 5) = 0;
  *result = 0;
  return result;
}

uint64_t re::introspect_ColorGamut3F(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ColorGamut3F", (uint64_t (*)(re::internal *))re::allocInfo_ColorGamut3F, (re::IntrospectionBase *(*)(void))re::initInfo_ColorGamut3F, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ColorGamut3F>, this);
}

uint64_t *re::allocInfo_ColorGamut4F(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411A730);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411A730))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A800, 0);
    *(uint64_t *)((char *)&qword_25411A810 + 6) = 0;
    qword_25411A810 = 0;
    qword_25411A820 = 0;
    qword_25411A828 = 0xFFFFFFFFLL;
    qword_25411A800 = (uint64_t)&off_24ED7DAA8;
    qword_25411A830 = (uint64_t)"ColorGamut4F";
    dword_25411A838 = 0;
    xmmword_25411A840 = 0u;
    unk_25411A850 = 0u;
    xmmword_25411A860 = 0u;
    qword_25411A870 = 0;
    __cxa_guard_release(&qword_25411A730);
  }
  return &qword_25411A800;
}

void re::initInfo_ColorGamut4F(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0x31DB7ABF0A5A1C02;
  v26[1] = "ColorGamut4F";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_25411A738);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411A738);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "r";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411A760 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "g";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411A768 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "b";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411A770 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "a";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xC00000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25411A778 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::introspect_ColorGamut((re *)1, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "gamut";
      *(_QWORD *)(v24 + 16) = &re::introspect_ColorGamut(BOOL)::info;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25411A780 = v24;
      __cxa_guard_release(&qword_25411A738);
    }
  }
  *((_QWORD *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_25411A760;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ColorGamut4F>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ColorGamut4F>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ColorGamut4F>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ColorGamut4F>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

double re::internal::defaultConstruct<re::ColorGamut4F>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  result = 0.0;
  *(_OWORD *)a3 = xmmword_2260E5D70;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::ColorGamut4F>(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_2260E5D70;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t re::introspect_ColorGamut4F(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ColorGamut4F", (uint64_t (*)(re::internal *))re::allocInfo_ColorGamut4F, (re::IntrospectionBase *(*)(void))re::initInfo_ColorGamut4F, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ColorGamut4F>, this);
}

void re::introspect_RenderGraphResourceOperationType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  re *v40;
  uint64_t *v41;
  re *v42;
  uint64_t *v43;
  re *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  StringID v50;
  _QWORD v51[2];
  _QWORD v52[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25411A880);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25411A880);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Read";
      qword_25411A928 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Write";
      qword_25411A930 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "WriteDepth";
      qword_25411A938 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "WriteStencil";
      qword_25411A940 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "WriteBlit";
      qword_25411A948 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((_QWORD *)v38 + 1) = 5;
      *((_QWORD *)v38 + 2) = "WriteCompute";
      qword_25411A950 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *((_QWORD *)v40 + 1) = 6;
      *((_QWORD *)v40 + 2) = "WriteResolve";
      qword_25411A958 = (uint64_t)v40;
      v41 = re::introspectionAllocator(v40);
      v42 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 24, 8);
      *(_DWORD *)v42 = 1;
      *((_QWORD *)v42 + 1) = 7;
      *((_QWORD *)v42 + 2) = "WriteResolveDepth";
      qword_25411A960 = (uint64_t)v42;
      v43 = re::introspectionAllocator(v42);
      v44 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 24, 8);
      *(_DWORD *)v44 = 1;
      *((_QWORD *)v44 + 1) = 8;
      *((_QWORD *)v44 + 2) = "WriteResolveStencil";
      qword_25411A968 = (uint64_t)v44;
      v45 = re::introspectionAllocator(v44);
      v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 24, 8);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = 10;
      *(_QWORD *)(v46 + 16) = "ReadFramebuffer";
      qword_25411A970 = v46;
      __cxa_guard_release(&qword_25411A880);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25411A888);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25411A888))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411A8E0, "RenderGraphResourceOperationType", 4, 4, 1, 1);
    qword_25411A8E0 = (uint64_t)&off_24ED7D9E8;
    qword_25411A920 = (uint64_t)&re::introspect_RenderGraphResourceOperationType(BOOL)::enumTable;
    dword_25411A8F0 = 9;
    __cxa_guard_release(&qword_25411A888);
  }
  if ((_MergedGlobals_399 & 1) == 0)
  {
    _MergedGlobals_399 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411A8E0, a2);
    v48 = 0x74B10DF276B47AF6;
    v49 = "RenderGraphResourceOperationType";
    v52[0] = 208862;
    v52[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v52);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v52);
      v6 = (unsigned int *)qword_25411A920;
      v51[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v52, &v48, 1, 1, (uint64_t)v51);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v50.var0 = 2 * v12;
            v50.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v52, v16, &v50);
            re::StringID::destroyString((re::StringID *)&v50);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v50.var0 = 2 * v20;
              v50.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v52, v24, &v50);
              re::StringID::destroyString((re::StringID *)&v50);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v52, v25);
      xmmword_25411A900 = (__int128)v50;
      re::StringID::destroyString((re::StringID *)&v48);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v52);
      re::internal::assertLog((re::internal *)5, v47, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderGraphResourceOperationType", v48, v49);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::allocInfo_ReadSettings(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411A890);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411A890))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A9D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411A9E0 = 0;
    qword_25411A9F0 = 0;
    qword_25411A9F8 = 0xFFFFFFFFLL;
    qword_25411A9D0 = (uint64_t)&off_24ED7DAA8;
    qword_25411AA00 = (uint64_t)"ReadSettings";
    dword_25411AA08 = 0;
    xmmword_25411AA10 = 0u;
    unk_25411AA20 = 0u;
    xmmword_25411AA30 = 0u;
    qword_25411AA40 = 0;
    __cxa_guard_release(&qword_25411A890);
  }
  return &qword_25411A9D0;
}

void re::initInfo_ReadSettings(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[2];
  __int128 v31;

  v30[0] = 0x3C332C74121BAFF2;
  v30[1] = "ReadSettings";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  v4 = atomic_load((unsigned __int8 *)&qword_25411A898);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411A898);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint32_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "computeIndex";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411A8B0 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_BOOL((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "isOptional";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411A8B8 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "makeStencilView";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x500000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411A8C0 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "makeArrayView";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x600000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25411A8C8 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::mtl::introspect_RenderStage((re::mtl *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "renderStage";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x800000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_25411A8D0 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      re::introspect_RenderGraphResourceOperationType((re *)v26, v27);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "type";
      *(_QWORD *)(v28 + 16) = &qword_25411A8E0;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0xC00000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_25411A8D8 = v28;
      __cxa_guard_release(&qword_25411A898);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_25411A8B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ReadSettings>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ReadSettings>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ReadSettings>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ReadSettings>;
  re::IntrospectionRegistry::add(this, v3);
  v29 = v31;
}

double re::internal::defaultConstruct<re::ReadSettings>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a3 + 3) = 0;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a3 + 8) = 2;
  return result;
}

double re::internal::defaultConstructV2<re::ReadSettings>(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 3) = 0;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a1 + 8) = 2;
  return result;
}

uint64_t re::introspect_ReadSettings(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReadSettings", (uint64_t (*)(re::internal *))re::allocInfo_ReadSettings, (re::IntrospectionBase *(*)(void))re::initInfo_ReadSettings, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ReadSettings>, this);
}

uint64_t *re::allocInfo_WriteSettings(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411A8A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411A8A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411AA48, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411AA58 = 0;
    qword_25411AA68 = 0;
    qword_25411AA70 = 0xFFFFFFFFLL;
    qword_25411AA48 = (uint64_t)&off_24ED7DAA8;
    qword_25411AA78 = (uint64_t)"WriteSettings";
    dword_25411AA80 = 0;
    xmmword_25411AA88 = 0u;
    unk_25411AA98 = 0u;
    xmmword_25411AAA8 = 0u;
    qword_25411AAB8 = 0;
    __cxa_guard_release(&qword_25411A8A0);
  }
  return &qword_25411AA48;
}

void re::initInfo_WriteSettings(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0xC0DE7BC02E28B204;
  v49[1] = "WriteSettings";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_25411A8A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411A8A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint32_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "attachmentIndex";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411A978 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint32_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "computeIndex";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 2;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411A980 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint32_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "slotIndex";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 3;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411A988 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      re::introspect_RenderGraphResourceOperationType((re *)v18, v19);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "type";
      *(_QWORD *)(v20 + 16) = &qword_25411A8E0;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x400000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411A990 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v22 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "clearColor";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x1000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_25411A998 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_float((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "clearDepth";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x1000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_25411A9A0 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::introspect_BOOL((re *)1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "forceClear";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x2000000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_25411A9A8 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      v34 = re::introspect_BOOL((re *)1, v33);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "isOptional";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x2100000008;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_25411A9B0 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::mtl::introspect_MultisampleDepthResolveFilter((re::mtl *)1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "depthResolveFilter";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x2400000009;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_25411A9B8 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::mtl::introspect_MultisampleStencilResolveFilter((re::mtl *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "stencilResolveFilter";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0x280000000ALL;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_25411A9C0 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_uint32_t((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "clearStencil";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0x100000000BLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_25411A9C8 = v47;
      __cxa_guard_release(&qword_25411A8A8);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_25411A978;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::WriteSettings>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::WriteSettings>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::WriteSettings>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::WriteSettings>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

double re::internal::defaultConstruct<re::WriteSettings>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0x100000000;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = xmmword_2260E5D70;
  *(_WORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 36) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::WriteSettings>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0x100000000;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_2260E5D70;
  *(_WORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t re::introspect_WriteSettings(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WriteSettings", (uint64_t (*)(re::internal *))re::allocInfo_WriteSettings, (re::IntrospectionBase *(*)(void))re::initInfo_WriteSettings, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::WriteSettings>, this);
}

unint64_t re::RenderGraphBufferDescription::makeValid(uint64_t a1, id *a2, uint64_t a3)
{
  unint64_t result;

  result = (unint64_t)*a2;
  if (*a2 && !*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 8) == -1)
    {
      result = (unint64_t)objc_msgSend((id)result, sel_length);
      *(_QWORD *)(a1 + 8) = (unint64_t)(float)(*(float *)(a1 + 20) * (float)result);
    }
    if (*(_QWORD *)(a1 + 32) == -1)
    {
      result = (unint64_t)objc_msgSend(*a2, sel_protectionOptions);
      *(_QWORD *)(a1 + 32) = result & a3;
    }
  }
  return result;
}

{
  unint64_t result;
  id v7;

  result = (unint64_t)*a2;
  if (*a2 && !*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 8) == -1)
    {
      v7 = objc_msgSend((id)result, sel_width);
      result = (unint64_t)objc_msgSend(*a2, sel_height);
      *(_QWORD *)(a1 + 8) = (unint64_t)(float)(*(float *)(a1 + 20) * (float)(result * (unint64_t)v7));
    }
    if (*(_QWORD *)(a1 + 32) == -1)
    {
      result = (unint64_t)objc_msgSend(*a2, sel_protectionOptions);
      *(_QWORD *)(a1 + 32) = result & a3;
    }
  }
  return result;
}

_QWORD *re::RenderGraphBufferDescription::valuesToString@<X0>(re::RenderGraphBufferDescription *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v7;
  char v8;

  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  re::DynamicString::setCapacity(a2, 0);
  v4 = a2[1];
  if ((v4 & 1) != 0)
  {
    a2[1] = 1;
    v5 = (_BYTE *)a2[2];
  }
  else
  {
    *((_BYTE *)a2 + 8) = v4 & 1;
    v5 = (char *)a2 + 9;
  }
  *v5 = 0;
  re::DynamicString::setCapacity(a2, 0x400uLL);
  re::DynamicString::format((re::DynamicString *)"type: %d length: %zu lengthMultiplier: %f                                     initialOptions: %d protectionOptions: %llu isMemoryless: %d", (re::DynamicString *)&v7, *(unsigned int *)this, *((_QWORD *)this + 1), *((float *)this + 5), *((unsigned int *)this + 6), *((_QWORD *)this + 4), (*((_DWORD *)this + 6) & 0x70) == 48);
  re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v7);
  if (v7 && (v8 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v7 + 40))();
  return re::DynamicString::trimExcess(a2);
}

uint64_t re::RenderGraphBufferHandle::introspectionSerialize(uint64_t a1, uint64_t a2, _QWORD *a3, re::DynamicString *a4)
{
  uint64_t v6;
  char v7;

  re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v6, *a3);
  re::DynamicString::operator=(a4, (re::DynamicString *)&v6);
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  return 1;
}

uint64_t re::RenderGraphBufferHandle::introspectionDeserialize(int a1, int a2, int a3, _QWORD *a4, char *__str)
{
  char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  char *v10;
  int v11;
  char *__endptr;

  v5 = __str;
  do
  {
    v7 = *v5++;
    v6 = v7;
    if (!v7)
    {
      __endptr = 0;
      *a4 = strtoull(__str, &__endptr, 10);
      return 1;
    }
  }
  while ((v6 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v6 + 60) & 0x400) != 0);
  v8 = *__str;
  if (*__str)
  {
    v9 = __str[1];
    if (v9)
    {
      v10 = __str + 2;
      do
      {
        v8 = 31 * v8 + v9;
        v11 = *v10++;
        v9 = v11;
      }
      while (v11);
    }
    v8 &= ~0x8000000000000000;
  }
  *a4 = v8;
  return 1;
}

uint64_t re::RenderGraphBufferHandle::introspectionDeepCopy(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  *a5 = *a4;
  return 1;
}

void *re::introspect_RenderGraphBufferHandle(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  char v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  re::IntrospectionBasic *v10;
  _QWORD v11[2];
  __int128 v12;

  v2 = (int)this;
  {
    v10 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_RenderGraphBufferHandle(BOOL)::info, "RenderGraphBufferHandle", 16, 8, 0, 0);
    *(_QWORD *)v10 = &off_24ED7DA28;
    *((_QWORD *)v10 + 8) = re::internal::defaultConstruct<re::RenderGraphBufferHandle>;
    *((_QWORD *)v10 + 9) = re::RenderGraphBufferHandle::introspectionSerialize;
    *((_QWORD *)v10 + 10) = re::RenderGraphBufferHandle::introspectionDeserialize;
    *((_QWORD *)v10 + 11) = re::RenderGraphBufferHandle::introspectionDeepCopy;
    *((_QWORD *)v10 + 12) = 0;
    *((_QWORD *)v10 + 13) = 0;
    *((_DWORD *)v10 + 4) = 11;
  }
  if (v2)
  {
    if ((re::introspect_RenderGraphBufferHandle(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_RenderGraphBufferHandle(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    v4 = re::introspect_RenderGraphBufferHandle(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    if ((v4 & 1) != 0)
      return &re::introspect_RenderGraphBufferHandle(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
    if ((re::introspect_RenderGraphBufferHandle(BOOL)::isInitialized & 1) != 0)
    {
LABEL_8:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
      return &re::introspect_RenderGraphBufferHandle(BOOL)::info;
    }
  }
  re::introspect_RenderGraphBufferHandle(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_RenderGraphBufferHandle(BOOL)::info, a2);
  v11[0] = 0xA33A75EAF1B787C0;
  v11[1] = "RenderGraphBufferHandle";
  xmmword_2558299E8 = v12;
  re::StringID::destroyString((re::StringID *)v11);
  if ((v2 & 1) == 0)
    goto LABEL_8;
  return &re::introspect_RenderGraphBufferHandle(BOOL)::info;
}

double re::internal::defaultConstruct<re::RenderGraphBufferHandle>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  *a3 = 0;
  result = NAN;
  a3[1] = -1;
  return result;
}

double re::internal::defaultConstructV2<re::RenderGraphBufferHandle>(_QWORD *a1)
{
  double result;

  *a1 = 0;
  result = NAN;
  a1[1] = -1;
  return result;
}

void re::MaterialPipelineData::~MaterialPipelineData(re::TechniqueStage **this)
{
  *this = (re::TechniqueStage *)&off_24ED79C88;
  re::internal::destroyPersistent<re::TechniqueStage>((re *)"deinit", 192, this[2]);
  this[2] = 0;
  re::internal::destroyPersistent<re::TechniqueStage>((re *)"deinit", 194, this[3]);
  this[3] = 0;
  re::FixedArray<re::TechniqueFunctionConstant>::deinit(this + 16);
  re::FixedArray<re::LinkedFunction>::deinit(this + 7);
  re::FixedArray<re::LinkedFunction>::deinit(this + 4);
  *this = (re::TechniqueStage *)&off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  re::MaterialPipelineData::~MaterialPipelineData(this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::MaterialPipelineData::generatePipelineStateKey(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _OWORD v33[5];
  uint64_t v34;

  v1 = this;
  v34 = *MEMORY[0x24BDAC8D0];
  this[20] = 0;
  v2 = this[2];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 272);
    v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v3 ^ ((unint64_t)v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ ((unint64_t)v3 >> 30))) >> 27));
    v5 = (v4 ^ (v4 >> 31)) - 0x61C8864680B583E9;
    this[20] = v5;
    if ((_DWORD)v3)
    {
      v6 = 0;
      v7 = v3;
      do
      {
        if (!v7)
        {
          memset(v33, 0, sizeof(v33));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v8 = *(_QWORD *)(v2 + 280) + v6;
        v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v8 + 16)) ^ ((0xBF58476D1CE4E5B9
                                                                        * *(unsigned __int16 *)(v8 + 16)) >> 27));
        v10 = ((v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + (v9 ^ (v9 >> 31))) ^ v5;
        v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v8 + 18)) ^ ((0xBF58476D1CE4E5B9
                                                                         * *(unsigned __int16 *)(v8 + 18)) >> 27));
        v5 = ((v11 ^ (v11 >> 31)) - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10;
        this[20] = v5;
        v6 += 24;
        --v7;
      }
      while (24 * v3 != v6);
    }
    this = (_QWORD *)strlen(*(const char **)(v2 + 8));
    if (this)
    {
      this = (_QWORD *)MurmurHash3_x64_128(*(_QWORD *)(v2 + 8), (int)this, 0, (unint64_t *)v33);
      v12 = (*((_QWORD *)&v33[0] + 1) - 0x61C8864680B583E9 + (*(_QWORD *)&v33[0] << 6) + (*(_QWORD *)&v33[0] >> 2)) ^ *(_QWORD *)&v33[0];
      v2 = v1[2];
    }
    else
    {
      v12 = 0;
    }
    v13 = ((v5 << 6)
         - 0x61C8864680B583E9
         + (v5 >> 2)
         + (((v12 << 6) - 0x61C8864680B583E9 + (v12 >> 2) + *(_QWORD *)(v2 + 16)) ^ v12)) ^ v5;
    v1[20] = v13;
  }
  else
  {
    v13 = 0;
  }
  v14 = v1[3];
  if (v14)
  {
    this = (_QWORD *)strlen(*(const char **)(v14 + 8));
    if (this)
    {
      this = (_QWORD *)MurmurHash3_x64_128(*(_QWORD *)(v14 + 8), (int)this, 0, (unint64_t *)v33);
      v15 = (*((_QWORD *)&v33[0] + 1) - 0x61C8864680B583E9 + (*(_QWORD *)&v33[0] << 6) + (*(_QWORD *)&v33[0] >> 2)) ^ *(_QWORD *)&v33[0];
      v14 = v1[3];
    }
    else
    {
      v15 = 0;
    }
    v13 ^= (v13 << 6)
         - 0x61C8864680B583E9
         + (v13 >> 2)
         + (((v15 << 6) - 0x61C8864680B583E9 + (v15 >> 2) + *(_QWORD *)(v14 + 16)) ^ v15);
    v1[20] = v13;
  }
  v16 = v1[5];
  if (v16)
  {
    v17 = 144 * v16;
    v18 = v1[6] + 48;
    do
    {
      v19 = ((v13 << 6) - 0x61C8864680B583E9 + (v13 >> 2) + (*(_QWORD *)(v18 - 24) >> 1)) ^ v13;
      v1[20] = v19;
      v20 = ((*(_QWORD *)(v18 - 40) >> 1) - 0x61C8864680B583E9 + (v19 << 6) + (v19 >> 2)) ^ v19;
      v1[20] = v20;
      if (*(_QWORD *)v18)
      {
        this = *(_QWORD **)(*(_QWORD *)v18 + 24);
        if (this)
          this = (_QWORD *)CFHash(this);
      }
      else
      {
        this = *(_QWORD **)(v18 - 8);
      }
      v21 = ((unint64_t)&this[8 * v20 - 0xC3910C8D016B07DLL] + (v20 >> 2) - 1) ^ v20;
      v22 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(v18 + 8) ^ ((unint64_t)*(unsigned int *)(v18 + 8) >> 30));
      v23 = ((v21 << 6)
           - 0x61C8864680B583E9
           + (v21 >> 2)
           + ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))) ^ v21;
      v13 = (*(_QWORD *)(v18 + 40) - 0x61C8864680B583E9 + (v23 << 6) + (v23 >> 2)) ^ v23;
      v1[20] = v13;
      v18 += 144;
      v17 -= 144;
    }
    while (v17);
  }
  v24 = v1[8];
  if (v24)
  {
    v25 = 144 * v24;
    v26 = v1[9] + 48;
    do
    {
      v27 = ((v13 << 6) - 0x61C8864680B583E9 + (v13 >> 2) + (*(_QWORD *)(v26 - 24) >> 1)) ^ v13;
      v1[20] = v27;
      v28 = ((*(_QWORD *)(v26 - 40) >> 1) - 0x61C8864680B583E9 + (v27 << 6) + (v27 >> 2)) ^ v27;
      v1[20] = v28;
      if (*(_QWORD *)v26)
      {
        this = *(_QWORD **)(*(_QWORD *)v26 + 24);
        if (this)
          this = (_QWORD *)CFHash(this);
      }
      else
      {
        this = *(_QWORD **)(v26 - 8);
      }
      v29 = ((unint64_t)&this[8 * v28 - 0xC3910C8D016B07DLL] + (v28 >> 2) - 1) ^ v28;
      v30 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(v26 + 8) ^ ((unint64_t)*(unsigned int *)(v26 + 8) >> 30));
      v31 = ((v29 << 6)
           - 0x61C8864680B583E9
           + (v29 >> 2)
           + ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) >> 31))) ^ v29;
      v13 = (*(_QWORD *)(v26 + 40) - 0x61C8864680B583E9 + (v31 << 6) + (v31 >> 2)) ^ v31;
      v1[20] = v13;
      v26 += 144;
      v25 -= 144;
    }
    while (v25);
  }
  v32 = ((v13 << 6)
       - 0x61C8864680B583E9
       + (v13 >> 2)
       + (((v1[23] << 6) - 0x61C8864680B583E9 + (v1[23] >> 2) + *((unsigned __int8 *)v1 + 176)) ^ v1[23])) ^ v13;
  v1[19] = (v1[21] - 0x61C8864680B583E9 + (v32 << 6) + (v32 >> 2)) ^ v32;
  v1[20] = v32;
  return this;
}

unint64_t re::MaterialTechnique::combinedBuffersHash(re::MaterialTechnique *this)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (v1[67] + (v1[45] << 6) + (v1[45] >> 2) - 0x61C8864680B583E9) ^ v1[45];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(_QWORD *)(v1[2] + 560)
          + (*(_QWORD *)(v1[2] + 384) << 6)
          + (*(_QWORD *)(v1[2] + 384) >> 2)
          - 0x61C8864680B583E9) ^ *(_QWORD *)(v1[2] + 384))) ^ v2;
}

unint64_t re::MaterialTechnique::combinedTexturesHash(re::MaterialTechnique *this)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (v1[120] + (v1[103] << 6) + (v1[103] >> 2) - 0x61C8864680B583E9) ^ v1[103];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(_QWORD *)(v1[2] + 984)
          + (*(_QWORD *)(v1[2] + 848) << 6)
          + (*(_QWORD *)(v1[2] + 848) >> 2)
          - 0x61C8864680B583E9) ^ *(_QWORD *)(v1[2] + 848))) ^ v2;
}

unint64_t re::MaterialTechnique::combinedConstantsHash(re::MaterialTechnique *this)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (v1[59] + (v1[37] << 6) + (v1[37] >> 2) - 0x61C8864680B583E9) ^ v1[37];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(_QWORD *)(v1[2] + 496)
          + (*(_QWORD *)(v1[2] + 320) << 6)
          + (*(_QWORD *)(v1[2] + 320) >> 2)
          - 0x61C8864680B583E9) ^ *(_QWORD *)(v1[2] + 320))) ^ v2;
}

unint64_t re::MaterialTechnique::combinedSamplersHash(re::MaterialTechnique *this)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (v1[133] + (v1[111] << 6) + (v1[111] >> 2) - 0x61C8864680B583E9) ^ v1[111];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(_QWORD *)(v1[2] + 1088)
          + (*(_QWORD *)(v1[2] + 912) << 6)
          + (*(_QWORD *)(v1[2] + 912) >> 2)
          - 0x61C8864680B583E9) ^ *(_QWORD *)(v1[2] + 912))) ^ v2;
}

unint64_t re::MaterialTechnique::combinedTextureBlocksHash(re::MaterialTechnique *this)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (v1[155] + (v1[147] << 6) + (v1[147] >> 2) - 0x61C8864680B583E9) ^ v1[147];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(_QWORD *)(v1[2] + 1264)
          + (*(_QWORD *)(v1[2] + 1200) << 6)
          + (*(_QWORD *)(v1[2] + 1200) >> 2)
          - 0x61C8864680B583E9) ^ *(_QWORD *)(v1[2] + 1200))) ^ v2;
}

void re::MaterialTechniqueVariant::releasePipelineStates(re::MaterialTechniqueVariant *this, _opaque_pthread_t *a2, re::DrawingManager *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  _BYTE v20[24];
  uint64_t *v21;
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *((unsigned int *)this + 14);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (int *)(*((_QWORD *)this + 5) + 8);
    while (1)
    {
      v9 = *v8;
      v8 += 24;
      if (v9 < 0)
        break;
      if (v6 == ++v7)
      {
        LODWORD(v7) = *((_DWORD *)this + 14);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    v10 = v7;
    do
    {
      v11 = *((_QWORD *)this + 5) + 96 * v10;
      v17 = *(_OWORD *)(v11 + 48);
      v18 = *(_OWORD *)(v11 + 64);
      v19 = *(_BYTE *)(v11 + 80);
      v15 = *(_OWORD *)(v11 + 16);
      v16 = *(_OWORD *)(v11 + 32);
      v22 = 0;
      *(_QWORD *)v12 = &off_24ED79CF8;
      *(_QWORD *)(v12 + 8) = a3;
      *(_OWORD *)(v12 + 16) = v15;
      *(_OWORD *)(v12 + 32) = v16;
      *(_OWORD *)(v12 + 48) = v17;
      *(_OWORD *)(v12 + 64) = v18;
      *(_BYTE *)(v12 + 80) = v19;
      v22 = (_BYTE *)v12;
      re::RenderManager::addDelayedDestructorToRenderThread(a2, (uint64_t)v20);
      if (v22)
      {
        (**(void (***)(_BYTE *))v22)(v22);
        if (v22 != v20)
          (*(void (**)(uint64_t *))(*v21 + 40))(v21);
      }
      if (*((_DWORD *)this + 14) <= (v7 + 1))
        v13 = v7 + 1;
      else
        v13 = *((_DWORD *)this + 14);
      while (1)
      {
        v10 = (v7 + 1);
        if (v13 - 1 == (_DWORD)v7)
          break;
        LODWORD(v7) = v7 + 1;
        v14 = v10;
        if ((*(_DWORD *)(*((_QWORD *)this + 5) + 96 * v10 + 8) & 0x80000000) != 0)
          goto LABEL_19;
      }
      v14 = v13;
LABEL_19:
      LODWORD(v7) = v14;
    }
    while ((_DWORD)v6 != v14);
  }
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::clear((uint64_t)this + 24);
}

BOOL assertTextureType(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned int v8;
  re *v9;
  int v10;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v17;
  char v18;
  id v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25411AAC8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25411AAC8))
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v17, (char *)&v19);
    if ((_BYTE)v19)
      v18 = BYTE1(v19);
    else
      v18 = 0;
    _MergedGlobals_400 = v18;
    __cxa_guard_release(&qword_25411AAC8);
  }
  v7 = *(_QWORD *)(a1 + 8 * a3[1]);
  (*(void (**)(id *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 24))(&v19, v7, a3[2]);
  v8 = objc_msgSend(v19, sel_textureType);
  v9 = (re *)v19;
  if (v19)

  v10 = *(unsigned __int16 *)(a2 + 18);
  if (v8 != v10 && _MergedGlobals_400 != 0)
  {
    v12 = *re::graphicsLogObjects(v9);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(unsigned __int16 *)(a2 + 18);
      v15 = *a3;
      LODWORD(v19) = 67109890;
      HIDWORD(v19) = v8;
      v20 = 2080;
      v21 = v13;
      v22 = 1024;
      v23 = v14;
      v24 = 1024;
      v25 = v15;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Mismatch between bound texture type %d and shader param(%s) type %d at slot %d.\n", (uint8_t *)&v19, 0x1Eu);
    }
  }
  return v8 == v10;
}

unint64_t re::MaterialTechniqueVariant::fillTextureTableLayerLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t result;
  uint64_t v28;
  uint64_t v29;

  *a4 = 0;
  ++*((_DWORD *)a4 + 2);
  v7 = *(_QWORD **)(a3 + 64);
  v8 = v7[6];
  if (v8)
  {
    re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(0, a2);
    v9 = *a4;
    v10 = &a4[3 * *a4];
    v10[2] = v8 + 680;
    v10[3] = v8 + 552;
    v10[4] = 7;
    v11 = v9 + 1;
    *a4 = v9 + 1;
    ++*((_DWORD *)a4 + 2);
    v7 = *(_QWORD **)(a3 + 64);
  }
  else
  {
    v11 = 0;
  }
  v12 = v7[7];
  if (v12)
  {
    re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v11, a2);
    v13 = *a4;
    v14 = &a4[3 * *a4];
    v14[2] = v12 + 680;
    v14[3] = v12 + 552;
    v14[4] = 8;
    v11 = v13 + 1;
    *a4 = v13 + 1;
    ++*((_DWORD *)a4 + 2);
    v7 = *(_QWORD **)(a3 + 64);
  }
  v15 = v7[9];
  if (v15)
  {
    re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v11, a2);
    v16 = *a4;
    v17 = &a4[3 * *a4];
    v17[2] = v15 + 680;
    v17[3] = v15 + 552;
    v17[4] = 10;
    v11 = v16 + 1;
    *a4 = v16 + 1;
    ++*((_DWORD *)a4 + 2);
    v7 = *(_QWORD **)(a3 + 64);
  }
  v18 = v7[8];
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 8);
    re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v11, a2);
    v20 = *a4;
    v21 = &a4[3 * *a4];
    v21[2] = v19;
    v21[3] = 0;
    v21[4] = 11;
    v11 = v20 + 1;
    *a4 = v20 + 1;
    ++*((_DWORD *)a4 + 2);
  }
  v22 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v11, a2);
  v23 = *a4;
  v24 = (uint64_t)&a4[3 * *a4 + 2];
  *(_QWORD *)v24 = v22 + 904;
  *(_QWORD *)(v24 + 8) = v22 + 776;
  *(_DWORD *)(v24 + 16) = 5;
  *a4 = v23 + 1;
  ++*((_DWORD *)a4 + 2);
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16);
  result = re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v23 + 1, v26);
  v28 = *a4;
  v29 = (uint64_t)&a4[3 * *a4 + 2];
  *(_QWORD *)v29 = v25 + 928;
  *(_QWORD *)(v29 + 8) = v25 + 800;
  *(_DWORD *)(v29 + 16) = 6;
  *a4 = v28 + 1;
  ++*((_DWORD *)a4 + 2);
  return result;
}

void re::MaterialTechniqueVariant::resolveTextureArgument(int a1, StringID *a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  __int16 v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v43;
  unsigned __int8 v44;
  id v45;
  char v46;
  unsigned __int8 v47;
  id v48[2];

  v8 = a3;
  v10 = a4[1];
  if (!v10)
  {
LABEL_33:
    *(_WORD *)a5 = a2[1].var0;
    *(_WORD *)(a5 + 2) = 0;
    v32 = *((unsigned __int16 *)&a2[1].var0 + 1) - 3;
    if (v32 > 4)
      v33 = 113101865;
    else
      v33 = qword_22616CB68[(__int16)v32];
    v36 = *v8;
    v48[0] = (id)v33;
    (*(void (**)(id *__return_ptr, uint64_t, id *))(*(_QWORD *)v36 + 32))(&v45, v36, v48);
    *(_WORD *)(a5 + 4) = BYTE1(v45);
    return;
  }
  v12 = *a4;
  v13 = (uint64_t)&(*a4)[3 * (_QWORD)v10];
  v14 = (_QWORD *)(a7 + 144);
  v41 = v13;
  while (1)
  {
    re::StringID::StringID((re::StringID *)v48, a2);
    if (*(_QWORD *)(a7 + 192)
      && re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey((uint64_t)v14, v48))
    {
      v15 = v14;
      if (*v14)
      {
        v16 = (unint64_t)v48[0];
        v17 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (((unint64_t)v48[0] >> 31) ^ ((unint64_t)v48[0] >> 1))) ^ ((0xBF58476D1CE4E5B9 * (((unint64_t)v48[0] >> 31) ^ ((unint64_t)v48[0] >> 1))) >> 27));
        v18 = *(_QWORD *)(a7 + 160);
        v19 = *(unsigned int *)(*(_QWORD *)(a7 + 152) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(a7 + 168)));
        if ((_DWORD)v19 == 0x7FFFFFFF)
        {
LABEL_12:
          v19 = 0x7FFFFFFFLL;
        }
        else
        {
          v20 = (const char *)v48[1];
          while (1)
          {
            if ((*(_QWORD *)(v18 + 40 * v19 + 8) ^ v16) <= 1)
            {
              v21 = *(const char **)(v18 + 40 * v19 + 16);
              if (v21 == v20 || !strcmp(v21, v20))
                break;
            }
            v19 = *(_DWORD *)(v18 + 40 * v19) & 0x7FFFFFFF;
            if (v19 == 0x7FFFFFFF)
              goto LABEL_12;
          }
        }
        v13 = v41;
      }
      else
      {
        v18 = *(_QWORD *)(a7 + 160);
        v19 = 0x7FFFFFFFLL;
      }
      re::StringID::operator=((unint64_t *)v48, (uint64_t *)(v18 + 40 * v19 + 24));
      v14 = v15;
      v8 = a3;
    }
    v22 = *v12;
    v45 = (id)((unint64_t)v48[0] >> 1);
    (*(void (**)(char *__return_ptr, uint64_t, id *))(*(_QWORD *)v22 + 32))(&v46, v22, &v45);
    if (!v46)
    {
      v25 = (_QWORD *)v12[1];
      if (v25)
      {
        v45 = (id)((unint64_t)v48[0] >> 1);
        v26 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v25, (uint64_t *)&v45);
        if (v26 != -1)
        {
          v27 = 0;
          v28 = v25[1];
          v29 = &re::s_textureTableConstantMembers;
          while (1)
          {
            v30 = *v29;
            v29 += 16;
            if (*(unsigned __int8 *)(v28 + 40 * v26 + 24) == v30)
            {
              v31 = v8[v27];
              if (v31)
                break;
            }
            if (!*(_BYTE *)(v28 + 40 * v26 + 24))
            {
              *(_WORD *)a5 = a2[1].var0;
              *(_DWORD *)(a5 + 2) = -1;
              *(_BYTE *)(a5 + 6) = 1;
              re::StringID::destroyString((re::StringID *)v48);
              goto LABEL_36;
            }
            if (++v27 == 12)
              goto LABEL_27;
          }
          (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v31 + 32))(&v43, v8[v27], v28 + 40 * v26 + 32);
          if (v43)
          {
            (*(void (**)(id *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v8[v27] + 24))(&v45, v8[v27], v44);
            if (v45)
            {

              *(_WORD *)a5 = a2[1].var0;
              *(_WORD *)(a5 + 2) = v27;
              v23 = v44;
              goto LABEL_18;
            }
          }
        }
      }
LABEL_27:
      re::StringID::destroyString((re::StringID *)v48);
      goto LABEL_28;
    }
    v23 = v47;
    *(_WORD *)a5 = a2[1].var0;
    *(_WORD *)(a5 + 2) = *((_DWORD *)v12 + 4);
LABEL_18:
    *(_WORD *)(a5 + 4) = v23;
    v24 = assertTextureType((uint64_t)v8, (uint64_t)a2, (unsigned __int16 *)a5);
    re::StringID::destroyString((re::StringID *)v48);
    if (v24)
      break;
LABEL_28:
    v12 += 3;
    if (v12 == (uint64_t *)v13)
      goto LABEL_33;
  }
LABEL_36:
  if (!*(_BYTE *)(a5 + 6))
  {
    v34 = v8[*(unsigned __int16 *)(a5 + 2)];
    (*(void (**)(id *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v34 + 24))(v48, v34, *(unsigned __int16 *)(a5 + 4));
    v35 = a6;
    if (((unint64_t)objc_msgSend(v48[0], sel_protectionOptions) & ~a6) != 0)
    {
      *(_WORD *)a5 = a2[1].var0;
      *(_WORD *)(a5 + 2) = 0;
      v37 = (char *)objc_msgSend(v48[0], sel_textureType);
      if ((unint64_t)(v37 - 1) > 7)
        v38 = 93818879;
      else
        v38 = qword_22616CB90[(_QWORD)(v37 - 1)];
      v39 = *a3;
      v45 = (id)v38;
      (*(void (**)(char *__return_ptr, uint64_t, id *))(*(_QWORD *)v39 + 32))(&v46, v39, &v45);
      *(_WORD *)(a5 + 4) = v47;
      v35 = a6;
    }
    if ((unint64_t)(a2[1].var1 - 1) <= 1
      && (v35 & ~(unint64_t)objc_msgSend(v48[0], sel_protectionOptions)) != 0)
    {
      *(_BYTE *)(a5 + 6) = 1;
    }
    if (v48[0])

  }
}

unint64_t re::MaterialTechniqueVariant::completeResolution(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  uint64_t v11;
  StringID *v12;
  uint64_t v13;
  uint64_t *v14[2];
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;

  *(_QWORD *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  v16 = 0;
  v17 = 0;
  result = re::MaterialTechniqueVariant::fillTextureTableLayerLists(a1, (uint64_t)a2, a4, (uint64_t *)&v16);
  v11 = *(_QWORD *)(a3 + 120);
  if (v11)
  {
    v12 = *(StringID **)(a3 + 128);
    v13 = 32 * v11;
    do
    {
      v14[0] = &v18;
      v14[1] = v16;
      v15 = 0;
      re::MaterialTechniqueVariant::resolveTextureArgument(result, v12, a2, v14, (uint64_t)&v15, a6, a3);
      result = (unint64_t)re::DynamicArray<re::TextureResolution>::add((_QWORD *)a5, &v15);
      v12 += 2;
      v13 -= 32;
    }
    while (v13);
  }
  return result;
}

_QWORD *re::DynamicArray<re::TextureResolution>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::TextureResolution>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_QWORD *)(v3[4] + 8 * v4) = *a2;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::MaterialTechniqueVariant::resolveBufferArgument(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  NSObject *v28;
  uint64_t result;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  _OWORD __dst[39];
  _BYTE buf[12];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t)memcpy(__dst, a2, sizeof(__dst));
  if (a4)
  {
    v10 = a3 + 24 * a4;
    while (1)
    {
      v11 = *(_QWORD **)a3;
      *(_QWORD *)buf = *a1 >> 1;
      v12 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v11, buf);
      if (v12 != -1)
      {
        v13 = v11[1] + 16 * v12;
        v15 = *(unsigned __int8 *)(v13 + 8);
        v14 = (unsigned __int8 *)(v13 + 8);
        LODWORD(v16) = *(_DWORD *)(a3 + 16);
        if (*((_QWORD *)&__dst[3 * v16] + 1) > (unint64_t)v15)
          break;
      }
      v17 = *(_QWORD **)(a3 + 8);
      *(_QWORD *)buf = *a1 >> 1;
      v9 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v17, (uint64_t *)buf);
      if (v9 != -1)
      {
        v16 = 0;
        v18 = v17[1];
        v19 = __dst;
        v20 = &re::s_bufferTableConstantMembers;
        while (1)
        {
          v21 = *v20;
          v20 += 16;
          if (*(unsigned __int8 *)(v18 + 40 * v9 + 24) == v21)
          {
            v22 = v19[1];
            if (v22)
              break;
          }
          ++v16;
          v19 += 6;
          if (v16 == 13)
            goto LABEL_14;
        }
        v23 = (_QWORD *)v19[5];
        v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v23, (_QWORD *)(v18 + 40 * v9 + 32));
        if (v9 != -1)
        {
          v25 = v23[1] + 16 * v9;
          v27 = *(unsigned __int8 *)(v25 + 8);
          v14 = (unsigned __int8 *)(v25 + 8);
          v26 = v27;
          if (v22 <= v27)
          {
            re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v26, v22);
            _os_crash();
            __break(1u);
          }
          if (*(_QWORD *)(*v19 + 16 * v26))
            break;
        }
      }
LABEL_14:
      a3 += 24;
      if (a3 == v10)
        goto LABEL_15;
    }
    v30 = a5;
    *(_WORD *)(a5 + 2) = v16;
    v31 = *v14;
    result = 1;
  }
  else
  {
LABEL_15:
    if (!a6)
      return 0;
    v28 = *re::graphicsLogObjects((re *)v9);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v32 = a1[1];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v32;
      _os_log_error_impl(&dword_224FE9000, v28, OS_LOG_TYPE_ERROR, "Failed to find reflection for buffer %s", buf, 0xCu);
    }
    if (a2[1])
      return 0;
    result = 0;
    v30 = a5;
    *(_WORD *)(a5 + 2) = 11;
    v31 = 12;
  }
  *(_WORD *)(v30 + 4) = v31;
  return result;
}

unint64_t re::MaterialTechniqueVariant::completeResolution(_BYTE *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int16 *v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _BOOL4 v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  BOOL v43;
  BOOL v44;
  __int16 v45;
  __int16 v46;
  _OWORD v47[2];
  uint64_t v48;
  const char *v49;
  _QWORD v50[15];
  uint64_t v51;
  int v52;
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  unint64_t v57;
  __int16 v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v10 = (unint64_t)a2;
  do
  {
    v11 = v10;
    v10 = *(_QWORD *)(v10 + 8);
  }
  while (v10 && !*(_QWORD *)(v11 + 72));
  v48 = 0x567F5844584795DALL;
  v49 = "vertexPosition";
  *(_QWORD *)&v60 = 0x2B3FAC222C23CAEDLL;
  v12 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v11 + 48), &v60);
  if (v12 == -1)
  {
    *(_QWORD *)&v60 = 0;
    re::StringID::destroyString((re::StringID *)&v48);
    v39 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(v11 + 56) + 16 * v12;
    *(_QWORD *)&v60 = 0;
    re::StringID::destroyString((re::StringID *)&v48);
    v39 = *(unsigned __int8 *)(v11 + 8);
  }
  v41 = *(unsigned int *)(a3 + 272);
  v48 = 0;
  LODWORD(v49) = 0;
  result = re::MaterialTechniqueVariant::fillBufferTableLayerLists((uint64_t)a1, a4, (uint64_t)&v48);
  v14 = 0;
  v40 = v48;
  memset(v47, 0, sizeof(v47));
  do
  {
    v47[v14] = vmvnq_s8(*(int8x16_t *)(a3 + 296 + v14 * 16));
    ++v14;
  }
  while (v14 != 2);
  if (!v41)
    return result;
  v15 = 0;
  v38 = a3;
  v16 = -1;
  v42 = a1;
  do
  {
    result = re::Bitset<256>::findFirstBitSet((uint64_t)v47, v16 + 1);
    if (result == -1)
    {
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "nextAvailableSlot != ~0", "completeResolution", 740);
      _os_crash();
      __break(1u);
LABEL_52:
      v51 = 0;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v60 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v52 = 136315906;
      v53 = "operator[]";
      v54 = 1024;
      v55 = 476;
      v56 = 2048;
      v57 = v15;
      v58 = 2048;
      v59 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_53:
      v51 = 0;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v60 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v52 = 136315906;
      v53 = "operator[]";
      v54 = 1024;
      v55 = 476;
      v56 = 2048;
      v57 = v11;
      v58 = 2048;
      v59 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v11 = *(_QWORD *)(a3 + 272);
    if (v11 <= v15)
      goto LABEL_52;
    v16 = result;
    v18 = *(_QWORD *)(a3 + 280) + 24 * v15;
    v19 = *(_WORD *)(v18 + 16);
    v20 = (__int16 *)(v18 + 18);
    v21 = *(unsigned __int16 *)(v18 + 18) == 6;
    if (!v40)
    {
      v27 = 1;
      v11 = v39;
      goto LABEL_31;
    }
    v43 = *(unsigned __int16 *)(v18 + 18) == 6;
    v45 = *(_WORD *)(v18 + 16);
    v22 = v50;
    do
    {
      v23 = (_QWORD *)v22[1];
      *(_QWORD *)&v60 = *(_QWORD *)v18 >> 1;
      result = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v23, (uint64_t *)&v60);
      if (result != -1)
      {
        v24 = v23[1];
        if (*(_BYTE *)(v24 + 40 * result + 24) == 17)
        {
          v25 = a2;
          do
          {
            v26 = v25;
            v25 = (_QWORD *)v25[1];
          }
          while (v25 && !v26[9]);
          result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v26 + 6, (_QWORD *)(v24 + 40 * result + 32));
          if (result != -1)
          {
            v11 = *(unsigned __int8 *)(v26[7] + 16 * result + 8);
            v28 = a2;
            do
            {
              v29 = v28;
              v28 = (_QWORD *)v28[1];
              a3 = v29[4];
              if (v28)
                v30 = a3 == 0;
              else
                v30 = 0;
            }
            while (v30);
            a1 = v42;
            v19 = v45;
            if (a3 > v11)
            {
              v21 = 0;
              v27 = (*(_BYTE *)(v29[5] + 16 * v11 + 12) & 0xFC) == 28;
              a3 = v38;
              goto LABEL_31;
            }
            goto LABEL_53;
          }
        }
      }
      v22 += 3;
    }
    while (v22 != &v50[3 * v40]);
    v27 = 1;
    v11 = v39;
    a3 = v38;
    a1 = v42;
    v21 = v43;
    v19 = v45;
    if (!a1[16])
      goto LABEL_36;
LABEL_31:
    if (!*(_BYTE *)(**(_QWORD **)a1 + 2844))
      v27 = 0;
    if (v27)
      v31 = *v20;
    else
LABEL_36:
      v31 = 0;
    v33 = *(_QWORD *)(a5 + 8);
    v32 = *(_QWORD *)(a5 + 16);
    if (v32 >= v33)
    {
      v34 = v32 + 1;
      if (v33 < v32 + 1)
      {
        v44 = v21;
        v46 = v19;
        if (*(_QWORD *)a5)
        {
          v35 = 2 * v33;
          if (!v33)
            v35 = 8;
          if (v35 <= v34)
            v36 = v34;
          else
            v36 = v35;
          result = (unint64_t)re::DynamicArray<re::AttributeResolution>::setCapacity((_QWORD *)a5, v36);
        }
        else
        {
          result = (unint64_t)re::DynamicArray<re::AttributeResolution>::setCapacity((_QWORD *)a5, v34);
          ++*(_DWORD *)(a5 + 24);
        }
        v21 = v44;
        v19 = v46;
      }
      v32 = *(_QWORD *)(a5 + 16);
      a1 = v42;
    }
    v37 = *(_QWORD *)(a5 + 32) + 10 * v32;
    *(_WORD *)v37 = v16;
    *(_WORD *)(v37 + 2) = v19;
    *(_WORD *)(v37 + 4) = v11;
    *(_WORD *)(v37 + 6) = v31;
    *(_BYTE *)(v37 + 8) = v21;
    *(_QWORD *)(a5 + 16) = v32 + 1;
    ++*(_DWORD *)(a5 + 24);
    ++v15;
  }
  while (v15 != v41);
  return result;
}

unint64_t re::MaterialTechniqueVariant::fillBufferTableLayerLists(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  unint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD **)(a2 + 64);
  v7 = v6[6];
  v8 = *(_QWORD *)a3;
  if (v7)
  {
    re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v8, a2);
    v9 = *(_QWORD *)a3;
    v10 = a3 + 24 * *(_QWORD *)a3;
    *(_QWORD *)(v10 + 16) = v7 + 264;
    *(_QWORD *)(v10 + 24) = v7 + 88;
    *(_DWORD *)(v10 + 32) = 7;
    v8 = v9 + 1;
    *(_QWORD *)a3 = v9 + 1;
    ++*(_DWORD *)(a3 + 8);
    v6 = *(_QWORD **)(a2 + 64);
  }
  v11 = v6[7];
  if (v11)
  {
    re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v8, a2);
    v12 = *(_QWORD *)a3;
    v13 = a3 + 24 * *(_QWORD *)a3;
    *(_QWORD *)(v13 + 16) = v11 + 264;
    *(_QWORD *)(v13 + 24) = v11 + 88;
    *(_DWORD *)(v13 + 32) = 8;
    v8 = v12 + 1;
    *(_QWORD *)a3 = v12 + 1;
    ++*(_DWORD *)(a3 + 8);
    v6 = *(_QWORD **)(a2 + 64);
  }
  v14 = v6[9];
  if (v14)
  {
    re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v8, a2);
    v15 = *(_QWORD *)a3;
    v16 = a3 + 24 * *(_QWORD *)a3;
    *(_QWORD *)(v16 + 16) = v14 + 264;
    *(_QWORD *)(v16 + 24) = v14 + 88;
    *(_DWORD *)(v16 + 32) = 12;
    v8 = v15 + 1;
    *(_QWORD *)a3 = v15 + 1;
    ++*(_DWORD *)(a3 + 8);
  }
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v8, a2);
  v18 = *(_QWORD *)a3;
  v19 = a3 + 16 + 24 * *(_QWORD *)a3;
  *(_QWORD *)v19 = v17 + 488;
  *(_QWORD *)(v19 + 8) = v17 + 312;
  *(_DWORD *)(v19 + 16) = 5;
  *(_QWORD *)a3 = v18 + 1;
  ++*(_DWORD *)(a3 + 8);
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 16);
  result = re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v18 + 1, v21);
  v23 = *(_QWORD *)a3;
  v24 = a3 + 16 + 24 * *(_QWORD *)a3;
  *(_QWORD *)v24 = v20 + 512;
  *(_QWORD *)(v24 + 8) = v20 + 336;
  *(_DWORD *)(v24 + 16) = 6;
  *(_QWORD *)a3 = v23 + 1;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

unint64_t re::Bitset<256>::findFirstBitSet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;

  if (a2 > 0xFF)
    return -1;
  v2 = a2 >> 6;
  if ((a2 & 0x3F) == 0)
    goto LABEL_7;
  v3 = *(_QWORD *)(a1 + 8 * v2) & (-1 << (a2 & 0x3F));
  if (v3)
    return __clz(__rbit64(v3)) + (a2 & 0xFFFFFFFFFFFFFFC0);
  if (a2 > 0xBF)
    return -1;
  ++v2;
LABEL_7:
  v5 = 8 * v2;
  for (i = -64 * v2; ; i -= 64)
  {
    v7 = *(_QWORD *)(a1 + v5);
    if (v7)
      break;
    v5 += 8;
    if (v5 == 32)
      return -1;
  }
  return __clz(__rbit64(v7)) - i;
}

unint64_t re::MaterialTechniqueVariant::completeResolution(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE v21[120];

  *(_QWORD *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  v19 = 0;
  v20 = 0;
  result = re::MaterialTechniqueVariant::fillBufferTableLayerLists(a1, a4, (uint64_t)&v19);
  v10 = *(_QWORD *)(a3 + 32);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 40);
    v12 = 112 * v10;
    do
    {
      v13 = *(_WORD *)(v11 + 16);
      result = re::MaterialParameterTableLayers::containsDirectBuffer(*(uint64_t **)(a4 + 64), v13, *(_DWORD *)a3);
      if ((result & 1) == 0)
      {
        v18 = v13;
        result = re::MaterialTechniqueVariant::resolveBufferArgument((_QWORD *)v11, a2, (uint64_t)v21, v19, (uint64_t)&v18, 0);
        if ((_DWORD)result)
          result = (unint64_t)re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)a5, &v18);
      }
      v11 += 112;
      v12 -= 112;
    }
    while (v12);
  }
  v14 = *(_QWORD *)(a3 + 240);
  if (v14)
  {
    v15 = *(_QWORD *)(a3 + 248);
    v16 = 24 * v14;
    do
    {
      v17 = *(_WORD *)(v15 + 16);
      result = re::MaterialParameterTableLayers::containsDirectBuffer(*(uint64_t **)(a4 + 64), v17, *(_DWORD *)a3);
      if ((result & 1) == 0)
      {
        v18 = v17;
        re::MaterialTechniqueVariant::resolveBufferArgument((_QWORD *)v15, a2, (uint64_t)v21, v19, (uint64_t)&v18, 1);
        result = (unint64_t)re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)a5, &v18);
      }
      v15 += 24;
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::BufferResolution>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::TextureResolution>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::TextureResolution>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  *(_QWORD *)(*((_QWORD *)v3 + 4) + 8 * v5) = *a2;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

unint64_t re::MaterialTechniqueVariant::fillConstantTableLayerLists(uint64_t **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t result;
  unint64_t v78;
  _QWORD *v79;

  *(_QWORD *)a4 = 0;
  ++*(_DWORD *)(a4 + 8);
  *(_QWORD *)a5 = 0;
  ++*(_DWORD *)(a5 + 8);
  v10 = *(_QWORD **)(a3 + 64);
  v11 = v10[6];
  if (v11)
  {
    v12 = v11 + 24;
    v13 = v11 + 152;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a4, (uint64_t)a2);
    v14 = *(_QWORD *)a4;
    v15 = (_QWORD *)(a4 + 24 * *(_QWORD *)a4);
    v15[2] = v13;
    v15[3] = v12;
    v15[4] = 8;
    *(_QWORD *)a4 = v14 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a5, v16);
    v17 = *(_QWORD *)a5;
    v18 = (_QWORD *)(a5 + 24 * *(_QWORD *)a5);
    v18[2] = v13;
    v18[3] = v12;
    v18[4] = 8;
    v19 = v17 + 1;
    *(_QWORD *)a5 = v17 + 1;
    ++*(_DWORD *)(a5 + 8);
    v10 = *(_QWORD **)(a3 + 64);
  }
  else
  {
    v19 = 0;
  }
  v20 = v10[10];
  if (v20)
  {
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(v19, (uint64_t)a2);
    v21 = *(_QWORD *)a5;
    v22 = (_QWORD *)(a5 + 24 * *(_QWORD *)a5);
    v22[2] = v20 + 152;
    v22[3] = v20 + 24;
    v22[4] = 11;
    *(_QWORD *)a5 = v21 + 1;
    ++*(_DWORD *)(a5 + 8);
    v10 = *(_QWORD **)(a3 + 64);
  }
  v23 = v10[7];
  if (v23)
  {
    v24 = v23 + 24;
    v25 = v23 + 152;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a4, (uint64_t)a2);
    v26 = *(_QWORD *)a4;
    v27 = (_QWORD *)(a4 + 24 * *(_QWORD *)a4);
    v27[2] = v25;
    v27[3] = v24;
    v27[4] = 9;
    *(_QWORD *)a4 = v26 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a5, v28);
    v29 = *(_QWORD *)a5;
    v30 = (_QWORD *)(a5 + 24 * *(_QWORD *)a5);
    v30[2] = v25;
    v30[3] = v24;
    v30[4] = 9;
    *(_QWORD *)a5 = v29 + 1;
    ++*(_DWORD *)(a5 + 8);
    v10 = *(_QWORD **)(a3 + 64);
  }
  v31 = v10[9];
  if (v31)
  {
    v32 = v31 + 24;
    v33 = v31 + 152;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a4, (uint64_t)a2);
    v34 = *(_QWORD *)a4;
    v35 = (_QWORD *)(a4 + 24 * *(_QWORD *)a4);
    v35[2] = v33;
    v35[3] = v32;
    v35[4] = 10;
    *(_QWORD *)a4 = v34 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a5, v36);
    v37 = *(_QWORD *)a5;
    v38 = (_QWORD *)(a5 + 24 * *(_QWORD *)a5);
    v38[2] = v33;
    v38[3] = v32;
    v38[4] = 10;
    *(_QWORD *)a5 = v37 + 1;
    ++*(_DWORD *)(a5 + 8);
    v10 = *(_QWORD **)(a3 + 64);
  }
  v39 = (uint64_t *)v10[8];
  if (v39)
  {
    v40 = *v39;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a4, (uint64_t)a2);
    v41 = *(_QWORD *)a4;
    v42 = (_QWORD *)(a4 + 24 * *(_QWORD *)a4);
    v42[2] = v40;
    v42[3] = 0;
    v42[4] = 13;
    *(_QWORD *)a4 = v41 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a5, v43);
    v44 = *(_QWORD *)a5;
    v45 = (_QWORD *)(a5 + 24 * *(_QWORD *)a5);
    v45[2] = v40;
    v45[3] = 0;
    v45[4] = 13;
    *(_QWORD *)a5 = v44 + 1;
    ++*(_DWORD *)(a5 + 8);
  }
  v46 = (*a1)[1];
  v47 = v46 + 248;
  v48 = v46 + 376;
  re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a4, (uint64_t)a2);
  v49 = a4 + 16;
  v50 = *(_QWORD *)a4;
  v51 = (_QWORD *)(a4 + 16 + 24 * *(_QWORD *)a4);
  *v51 = v48;
  v51[1] = v47;
  v51[2] = 6;
  *(_QWORD *)a4 = v50 + 1;
  ++*(_DWORD *)(a4 + 8);
  re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a5, v52);
  v54 = a5 + 16;
  v55 = *(_QWORD *)a5;
  v56 = (_QWORD *)(a5 + 16 + 24 * *(_QWORD *)a5);
  *v56 = v48;
  v56[1] = v47;
  v56[2] = 6;
  *(_QWORD *)a5 = v55 + 1;
  ++*(_DWORD *)(a5 + 8);
  if (*a2 == 2)
  {
    v66 = **a1;
    v58 = v66 + 1320;
    v67 = v66 + 1448;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a4, v53);
    v68 = *(_QWORD *)a4;
    v69 = (_QWORD *)(v49 + 24 * *(_QWORD *)a4);
    *v69 = v67;
    v69[1] = v58;
    v69[2] = 5;
    *(_QWORD *)a4 = v68 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a5, v70);
    v63 = *(_QWORD *)a5;
    v64 = v54 + 24 * *(_QWORD *)a5;
    *(_QWORD *)v64 = v67;
    v65 = 5;
    goto LABEL_16;
  }
  if (*a2 == 1)
  {
    v57 = **a1;
    v58 = v57 + 192;
    v59 = v57 + 320;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a4, v53);
    v60 = *(_QWORD *)a4;
    v61 = (_QWORD *)(v49 + 24 * *(_QWORD *)a4);
    *v61 = v59;
    v61[1] = v58;
    v61[2] = 4;
    *(_QWORD *)a4 = v60 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a5, v62);
    v63 = *(_QWORD *)a5;
    v64 = v54 + 24 * *(_QWORD *)a5;
    *(_QWORD *)v64 = v59;
    v65 = 4;
LABEL_16:
    *(_QWORD *)(v64 + 8) = v58;
    *(_DWORD *)(v64 + 16) = v65;
    *(_DWORD *)(v64 + 20) = 0;
    *(_QWORD *)a5 = v63 + 1;
    ++*(_DWORD *)(a5 + 8);
  }
  v71 = *(_QWORD *)((*a1)[1] + 16);
  v72 = v71 + 272;
  v73 = v71 + 400;
  re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a4, v53);
  v74 = *(_QWORD *)a4;
  v75 = (_QWORD *)(v49 + 24 * *(_QWORD *)a4);
  *v75 = v73;
  v75[1] = v72;
  v75[2] = 7;
  *(_QWORD *)a4 = v74 + 1;
  ++*(_DWORD *)(a4 + 8);
  result = re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(_QWORD *)a5, v76);
  v78 = *(_QWORD *)a5;
  v79 = (_QWORD *)(v54 + 24 * *(_QWORD *)a5);
  *v79 = v73;
  v79[1] = v72;
  v79[2] = 7;
  *(_QWORD *)a5 = v78 + 1;
  ++*(_DWORD *)(a5 + 8);
  return result;
}

uint64_t re::MaterialTechniqueVariant::resolveConstantArgument(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, int a7, __n128 a8)
{
  unsigned __int8 v15;
  uint64_t *v16;
  re::MaterialParameterTable *v17;
  char v18;
  re::MaterialParameterTable *v19;
  uint64_t v20;
  re::StringID *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int32 v36;
  re *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t (***v42)(_QWORD, _BYTE *);
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (***v58)(_QWORD, _BYTE *);
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int32 v61;
  unsigned __int32 v62;
  NSObject *v63;
  int v64;
  _BOOL4 v65;
  NSObject *v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  BOOL v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  char v85;
  char v86;
  uint64_t v87;
  __n128 v88;
  char v89;
  uint64_t v90[2];
  unint64_t v91;
  int v92;
  unsigned int *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  unsigned int *v97;
  uint64_t v98;
  _BYTE v99[18];
  __int16 v100;
  int v101;
  _BYTE buf[32];
  uint64_t v103;
  _QWORD v104[3];
  _QWORD v105[6];

  v105[3] = *MEMORY[0x24BDAC8D0];
  v15 = atomic_load((unsigned __int8 *)&qword_25411AAD0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25411AAD0))
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v84, buf);
    if (buf[0])
      v85 = buf[1];
    else
      v85 = 0;
    byte_25411AAC1 = v85;
    __cxa_guard_release(&qword_25411AAD0);
  }
  v98 = a3;
  if ((a7 & 1) == 0)
  {
    v16 = *a1;
    v17 = (re::MaterialParameterTable *)((*a1)[1] + 224);
    v90[0] = *(_QWORD *)a2 >> 1;
    re::MaterialParameterTable::handle(v17, v90, (uint64_t)&v94);
    v90[0] = 0;
    if ((BYTE4(v95) & 7) != 0)
    {
      *(_DWORD *)buf = 1;
      *(_QWORD *)&buf[8] = v94;
      *(_OWORD *)&buf[16] = v95;
      v18 = v96;
    }
    else
    {
      v19 = (re::MaterialParameterTable *)(*(_QWORD *)(v16[1] + 16) + 248);
      *(_QWORD *)v99 = *(_QWORD *)a2 >> 1;
      re::MaterialParameterTable::handle(v19, (uint64_t *)v99, (uint64_t)buf);
      v20 = *(_QWORD *)buf;
      v95 = *(_OWORD *)&buf[8];
      LOBYTE(v96) = buf[24];
      *(_QWORD *)v99 = 0;
      if ((buf[12] & 7) == 0)
      {
        *(_DWORD *)buf = 0;
        *(_QWORD *)&buf[24] = 0;
        LOBYTE(v103) = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[13] = 0;
LABEL_8:
        v21 = re::StringID::StringID((re::StringID *)v104, (const StringID *)a2);
        v22 = buf[20] & 7;
        re::StringID::destroyString(v21);
        if (v22)
          return 0;
        goto LABEL_10;
      }
      *(_DWORD *)buf = 2;
      *(_QWORD *)&buf[8] = v20;
      *(_OWORD *)&buf[16] = v95;
      v18 = v96;
    }
    LOBYTE(v103) = v18;
    goto LABEL_8;
  }
LABEL_10:
  v24 = **a1;
  v25 = *(_QWORD **)(v24 + 2712);
  v26 = *(_QWORD *)(v24 + 2704);
  if (v26)
  {
    v27 = 8 * v26;
    v28 = v25;
    while (*v28 != *(_QWORD *)a2 >> 1)
    {
      ++v28;
      v27 -= 8;
      if (!v27)
      {
        v28 = &v25[v26];
        break;
      }
    }
  }
  else
  {
    v28 = v25;
  }
  v29 = v28 - v25;
  v30 = v29 == v26;
  if (v29 == v26)
    v31 = a4;
  else
    v31 = a5;
  v32 = *v31;
  v33 = v31[1];
  v34 = !v30;
  v97 = 0;
  v95 = 0uLL;
  v93 = 0;
  v94 = 0;
  v96 = 0;
  v90[1] = 0;
  v91 = 0;
  v90[0] = 0;
  v92 = 0;
  if (a7)
  {
    v35 = *(_QWORD *)(a2 + 72);
    if (!v35)
    {
      v89 = 0;
      v36 = *(_DWORD *)(a2 + 28);
      v88.n128_u32[2] = 0;
      v88.n128_u32[3] = v36;
      v37 = (re *)re::scanUntil<re::MetalTypeInfo,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::ResolvedFillCommand,re::ConstantLayer,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_0 &>(a2 + 24, v32, v33, &v98, (uint64_t)&v88);
      if ((_DWORD)v37)
      {
        if (v89)
          v38 = v90;
        else
          v38 = &v94;
        a8 = re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add((uint64_t)v38, &v88);
        goto LABEL_80;
      }
      if (*(_QWORD *)(a3 + 96))
      {
        *(_QWORD *)buf = *(_QWORD *)(a2 + 24);
        *(_DWORD *)&buf[8] = *(_DWORD *)(a2 + 32);
        re::StringID::StringID((re::StringID *)&buf[16], (const StringID *)(a2 + 40));
        LODWORD(v103) = *(_DWORD *)(a2 + 56);
        WORD2(v103) = *(_WORD *)(a2 + 60);
        re::FixedArray<re::MetalTypeInfo>::FixedArray(v104, a2 + 64);
        v105[0] = *(_QWORD *)(a2 + 88);
        *(_QWORD *)((char *)v105 + 6) = *(_QWORD *)(a2 + 94);
        v58 = *(uint64_t (****)(_QWORD, _BYTE *))(a3 + 96);
        *(_QWORD *)v99 = *(_QWORD *)&buf[16] >> 1;
        v59 = (unsigned __int8 *)(**v58)(v58, v99);
        if (v59)
        {
          v60 = v59;
          v61 = *(unsigned __int16 *)v59;
          v88.n128_u32[0] = 12;
          v88.n128_u32[1] = v61;
          v62 = v88.n128_u32[3];
          if (v88.n128_u32[3] != v59[2])
          {
            v63 = *re::graphicsLogObjects((re *)v59);
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              v64 = v60[2];
              *(_DWORD *)v99 = 136315650;
              *(_QWORD *)&v99[4] = *(_QWORD *)&buf[24];
              *(_WORD *)&v99[12] = 1024;
              *(_DWORD *)&v99[14] = v62;
              v100 = 1024;
              v101 = v64;
              _os_log_impl(&dword_224FE9000, v63, OS_LOG_TYPE_DEFAULT, "Shader constant '%s' expects %d bytes, but the material parameter provides %d bytes.", v99, 0x18u);
            }
          }
          re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add((uint64_t)&v94, &v88);
          re::FixedArray<re::MetalTypeInfo>::deinit(v104);
          re::StringID::destroyString((re::StringID *)&buf[16]);
          goto LABEL_80;
        }
        re::FixedArray<re::MetalTypeInfo>::deinit(v104);
        re::StringID::destroyString((re::StringID *)&buf[16]);
        v65 = *(_QWORD *)(a3 + 96) == 0;
      }
      else
      {
        v65 = 1;
      }
      if (!v65 || byte_25411AAC1)
      {
        v66 = *re::graphicsLogObjects(v37);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          v82 = *(_QWORD *)(a2 + 8);
          v83 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v82;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v83;
          _os_log_error_impl(&dword_224FE9000, v66, OS_LOG_TYPE_ERROR, "Found no parameter definition for shader constant '%s::%s'", buf, 0x16u);
        }
      }
LABEL_80:
      v57 = *((_QWORD *)&v95 + 1);
      if (*((_QWORD *)&v95 + 1))
      {
LABEL_81:
        v67 = v97;
        v68 = &v97[4 * v57];
        LODWORD(v57) = 0;
        do
        {
          v69 = *v67;
          v67 += 4;
          LODWORD(v57) = v57 | (1 << v69);
        }
        while (v67 != v68);
        goto LABEL_83;
      }
LABEL_50:
      v23 = 0;
      goto LABEL_106;
    }
  }
  else
  {
    v35 = *(_QWORD *)(a2 + 72);
    if (!v35)
    {
      v52 = 1;
LABEL_49:
      if (!v52)
        goto LABEL_51;
      goto LABEL_50;
    }
  }
  v86 = v34;
  v87 = a6;
  v39 = *(_QWORD **)(a2 + 80);
  v40 = &v39[10 * v35];
  do
  {
    v99[16] = 0;
    *(_QWORD *)&v99[8] = *v39;
    if (re::scanUntil<re::MetalTypeInfo,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::ResolvedFillCommand,re::ConstantLayer,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_0 &>((uint64_t)v39, v32, v33, &v98, (uint64_t)v99))
    {
      if (v99[16])
        v41 = v90;
      else
        v41 = &v94;
      a8 = re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add((uint64_t)v41, (__n128 *)v99);
      goto LABEL_45;
    }
    v42 = *(uint64_t (****)(_QWORD, _BYTE *))(a3 + 96);
    if (!v42)
      goto LABEL_42;
    *(_QWORD *)buf = v39[2] >> 1;
    v43 = (unsigned __int8 *)(**v42)(v42, buf);
    if (v43)
    {
      v44 = v43;
      *(_DWORD *)v99 = 12;
      *(_DWORD *)&v99[4] = *(unsigned __int16 *)v43;
      v45 = *(_DWORD *)&v99[12];
      if (*(_DWORD *)&v99[12] != v43[2])
      {
        v46 = *re::graphicsLogObjects((re *)v43);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          v47 = v39[3];
          v48 = v44[2];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v47;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v45;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v48;
          _os_log_impl(&dword_224FE9000, v46, OS_LOG_TYPE_DEFAULT, "Shader constant '%s' expects %d bytes, but the material parameter provides %d bytes.", buf, 0x18u);
        }
      }
      a8 = re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add((uint64_t)&v94, (__n128 *)v99);
      goto LABEL_45;
    }
    if (!*(_QWORD *)(a3 + 96))
    {
LABEL_42:
      if (!byte_25411AAC1)
        goto LABEL_45;
    }
    v49 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v50 = v39[3];
      v51 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v50;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v51;
      _os_log_error_impl(&dword_224FE9000, v49, OS_LOG_TYPE_ERROR, "Found no parameter definition for shader constant '%s::%s'", buf, 0x16u);
    }
LABEL_45:
    v39 += 10;
  }
  while (v39 != v40);
  v35 = *((_QWORD *)&v95 + 1);
  v52 = v91 == 0;
  a6 = v87;
  v34 = v86;
  if (!*((_QWORD *)&v95 + 1))
    goto LABEL_49;
LABEL_51:
  v53 = 126 - 2 * __clz(v35);
  if (v35)
    v54 = v53;
  else
    v54 = 0;
  std::__introsort<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *,false>(v97, &v97[4 * v35], v54, 1);
  v55 = 126 - 2 * __clz(v91);
  if (v91)
    v56 = v55;
  else
    v56 = 0;
  std::__introsort<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *,false>(v93, &v93[4 * v91], v56, 1);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v94, (uint64_t)buf);
  if (*(_QWORD *)buf && v103)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v90, (uint64_t)buf);
  if (*(_QWORD *)buf && v103)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf);
  v57 = *((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
    goto LABEL_81;
LABEL_83:
  if (v91)
  {
    v70 = v93;
    v71 = 16 * v91;
    do
    {
      v72 = *v70;
      v70 += 4;
      LODWORD(v57) = v57 | (1 << v72);
      v71 -= 16;
    }
    while (v71);
  }
  v73 = __clz(__rbit64((unsigned __int16)v57));
  v75 = v73 >= 0x10 || ((unsigned __int16)v57 & ((_DWORD)v57 - 1)) != 0 || (unsigned __int16)v57 == 0;
  *(_DWORD *)(a6 + 100) = *(_DWORD *)(a2 + 28);
  *(_WORD *)(a6 + 98) = *(_DWORD *)(a2 + 32);
  if (v75)
    v76 = -1;
  else
    v76 = v73;
  *(_WORD *)(a6 + 96) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a6 + 106) = v76;
  *(_WORD *)(a6 + 104) = v57;
  *(_BYTE *)(a6 + 107) = v34;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a6 + 8, (uint64_t)&v94);
  v77 = *(_QWORD *)(a6 + 24);
  if (v77)
  {
    if (16 * v77)
    {
      MurmurHash3_x64_128(*(_QWORD *)(a6 + 40), 16 * v77, 0, (unint64_t *)buf);
      v78 = (*(_QWORD *)&buf[8] + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)buf;
    }
    else
    {
      v78 = 0;
    }
    *(_QWORD *)a6 = v78;
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a6 + 56, (uint64_t)v90);
  v79 = *(_QWORD *)(a6 + 72);
  if (v79)
  {
    if (16 * v79)
    {
      MurmurHash3_x64_128(*(_QWORD *)(a6 + 88), 16 * v79, 0, (unint64_t *)buf);
      v80 = (*(_QWORD *)&buf[8] + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)buf;
    }
    else
    {
      v80 = 0;
    }
    *(_QWORD *)(a6 + 48) = v80;
  }
  v23 = 1;
LABEL_106:
  if (v90[0] && v93)
    (*(void (**)(__n128))(*(_QWORD *)v90[0] + 40))(a8);
  if (v94 && v97)
    (*(void (**)(__n128))(*(_QWORD *)v94 + 40))(a8);
  return v23;
}

uint64_t re::scanUntil<re::MetalTypeInfo,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::ResolvedFillCommand,re::ConstantLayer,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_0 &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _DWORD *v7;
  _DWORD *i;
  uint64_t (***v9)(_QWORD, _BYTE *);
  _DWORD *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  re::WeakStringID *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  NSObject *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t result;
  unsigned __int8 *v29;
  unsigned int v30;
  int v31;
  NSObject *v34;
  uint64_t v35;
  int v36;
  int v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  NSObject *v43;
  uint64_t v44;
  int v45;
  char *v46;
  char *v47;
  int v48;
  _BYTE buf[12];
  __int16 v51;
  _BYTE v52[24];
  __int16 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v7 = (_DWORD *)(a2 + 24 * a3);
  for (i = (_DWORD *)(a2 + 16); ; i += 6)
  {
    v10 = i - 4;
    v9 = (uint64_t (***)(_QWORD, _BYTE *))*((_QWORD *)i - 2);
    *(_QWORD *)buf = *(_QWORD *)(a1 + 16) >> 1;
    v11 = (unsigned __int8 *)(**v9)(v9, buf);
    if (v11)
      break;
    v12 = (_QWORD *)*((_QWORD *)i - 1);
    if (v12)
    {
      *(_QWORD *)buf = *(_QWORD *)(a1 + 16) >> 1;
      v13 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v12, (uint64_t *)buf);
      if (v13 != -1)
      {
        v14 = v12[1];
        v15 = v14 + 40 * v13;
        v18 = *(unsigned __int8 *)(v15 + 24);
        v17 = (unsigned __int8 *)(v15 + 24);
        v16 = v18;
        v19 = *a4;
        if (*(_QWORD *)(*a4 + 160) > (unint64_t)v18)
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)(v19 + 152) + v16);
          if (v20 <= 0x14)
          {
            v21 = (re::WeakStringID *)(v14 + 40 * v13 + 32);
            v22 = (unsigned __int8 *)(***(uint64_t (****)(_QWORD, re::WeakStringID *))(v19 + 8 * v20))(*(_QWORD *)(v19 + 8 * v20), v21);
            if (v22)
            {
              v41 = *(_QWORD *)(*a4 + 160);
              if (v41 <= v16)
              {
                re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, v41);
                _os_crash();
                __break(1u);
              }
              v42 = v22;
              *(_DWORD *)a5 = *(unsigned __int8 *)(*(_QWORD *)(*a4 + 152) + v16);
              *(_DWORD *)(a5 + 4) = *(unsigned __int16 *)v22;
              if (*(_DWORD *)(a5 + 12) != v22[2])
              {
                v43 = *re::graphicsLogObjects((re *)v22);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                {
                  v44 = *(_QWORD *)(a1 + 24);
                  v45 = *(_DWORD *)(a5 + 12);
                  v46 = re::s_materialTableIDMappings[*v17];
                  v47 = re::WeakStringID::debugStr(v21);
                  v48 = v42[2];
                  *(_DWORD *)buf = 136316162;
                  *(_QWORD *)&buf[4] = v44;
                  v51 = 1024;
                  *(_DWORD *)v52 = v45;
                  *(_WORD *)&v52[4] = 2080;
                  *(_QWORD *)&v52[6] = v46;
                  *(_WORD *)&v52[14] = 2080;
                  *(_QWORD *)&v52[16] = v47;
                  v53 = 1024;
                  v54 = v48;
                  v38 = "Shader constant '%s' expects %d bytes, but the shader binding with struct '%s' and member hash '"
                        "%s' provides %d bytes.";
                  v39 = v43;
                  v40 = 44;
LABEL_45:
                  _os_log_impl(&dword_224FE9000, v39, OS_LOG_TYPE_DEFAULT, v38, buf, v40);
                }
              }
              return 1;
            }
            v24 = *re::graphicsLogObjects(0);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              v25 = re::s_materialTableIDMappings[*v17];
              if (*(_QWORD *)v21 == 0x7FFFFFFFFFFFFFFFLL)
              {
                v26 = 0;
              }
              else if (*(_QWORD *)v21)
              {
                v26 = re::WeakStringID::debugStr(void)const::msg;
                snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *(_QWORD *)v21);
              }
              else
              {
                v26 = (char *)&str_110;
              }
              v27 = *(_QWORD *)(a1 + 24);
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v25;
              v51 = 2080;
              *(_QWORD *)v52 = v26;
              *(_WORD *)&v52[8] = 2080;
              *(_QWORD *)&v52[10] = v27;
              _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "Invalid binding: '%s.%s' for shader constant '%s'", buf, 0x20u);
            }
          }
        }
      }
    }
    if (v10 + 6 == v7)
      return 0;
  }
  v29 = v11;
  *(_DWORD *)a5 = *i;
  *(_DWORD *)(a5 + 4) = *(unsigned __int16 *)v11;
  if (*(_DWORD *)(a5 + 12) == v11[2])
    return 1;
  v30 = v11[3];
  v31 = *(unsigned __int16 *)(a1 + 36);
  if (v30 > 0x20)
  {
    if (v30 == 33)
    {
      if (v31 != 18)
        goto LABEL_34;
    }
    else if (v30 != 34 || v31 != 19)
    {
LABEL_34:
      if (byte_25411AAC1)
      {
        v34 = *re::graphicsLogObjects((re *)v11);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v35 = *(_QWORD *)(a1 + 24);
          v36 = *(_DWORD *)(a5 + 12);
          v37 = v29[2];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v35;
          v51 = 1024;
          *(_DWORD *)v52 = v36;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = v37;
          v38 = "Shader constant '%s' expects %d bytes, but the material parameter provides %d bytes and cannot be downcast";
          v39 = v34;
          v40 = 24;
          goto LABEL_45;
        }
      }
      return 1;
    }
  }
  else if (v30 == 1)
  {
    if (v31 != 16)
      goto LABEL_34;
  }
  else if (v30 != 32 || v31 != 17)
  {
    goto LABEL_34;
  }
  result = 1;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

double `anonymous namespace'::combineFillCommands(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 *v5;
  __n128 *v6;
  double result;
  __n128 v8;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v5 = *(__n128 **)(a2 + 32);
    v8 = *v5;
    if (v2 != 1)
    {
      v6 = v5 + 1;
      do
      {
        if (v8.n128_u32[0] == v6->n128_u32[0]
          && __PAIR64__(v8.n128_u32[2] + v8.n128_u32[3], v8.n128_u32[3] + v8.n128_u32[1]) == *(unint64_t *)((char *)v6->n128_u64 + 4))
        {
          v8.n128_u32[3] += v6->n128_u32[3];
        }
        else
        {
          re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(a1, &v8);
          v8 = *v6;
          v5 = *(__n128 **)(a2 + 32);
          v2 = *(_QWORD *)(a2 + 16);
        }
        ++v6;
      }
      while (v6 != &v5[v2]);
    }
    *(_QWORD *)&result = re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(a1, &v8).n128_u64[0];
  }
  return result;
}

uint64_t re::MaterialTechniqueVariant::completeResolution(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14[2];
  uint64_t v15[2];
  _OWORD v16[2];
  int v17;
  __int128 v18;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  re::DynamicArray<re::ConstantResolution>::clear(a5);
  v27 = 0;
  v28 = 0;
  v24 = 0;
  v25 = 0;
  result = re::MaterialTechniqueVariant::fillConstantTableLayerLists(a1, (_DWORD *)a3, a4, (uint64_t)&v27, (uint64_t)&v24);
  v9 = *(_QWORD *)(a3 + 32);
  if (v9)
  {
    v10 = *(_QWORD *)(a3 + 40);
    v11 = 112 * v9;
    do
    {
      result = re::MaterialParameterTableLayers::containsDirectBuffer(*(uint64_t **)(a4 + 64), *(unsigned __int16 *)(v10 + 16), *(_DWORD *)a3);
      if ((result & 1) == 0)
      {
        v17 = 0;
        memset(v16, 0, sizeof(v16));
        v18 = 0u;
        memset(v19, 0, 28);
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 255;
        v15[0] = (uint64_t)&v29;
        v15[1] = v27;
        v14[0] = (uint64_t)&v26;
        v14[1] = v24;
        if (re::MaterialTechniqueVariant::resolveConstantArgument(a1, v10, a2, v15, v14, (uint64_t)v16, 0, (__n128)0))re::DynamicArray<re::ConstantResolution>::add((uint64_t)a5, (uint64_t)v16);
        if (v19[0])
        {
          if (v20)
            (*(void (**)(void))(*(_QWORD *)v19[0] + 40))();
          v20 = 0;
          memset(v19, 0, 24);
          ++LODWORD(v19[3]);
        }
        result = *((_QWORD *)&v16[0] + 1);
        if (*((_QWORD *)&v16[0] + 1))
        {
          if ((_QWORD)v18)
            result = (*(uint64_t (**)(void))(**((_QWORD **)&v16[0] + 1) + 40))();
        }
      }
      v10 += 112;
      v11 -= 112;
    }
    while (v11);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ConstantResolution>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 112 * v2;
    v4 = (_QWORD *)(result[4] + 56);
    do
    {
      if (*v4)
      {
        if (v4[4])
          (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4);
        v4[4] = 0;
        v4[1] = 0;
        v4[2] = 0;
        *v4 = 0;
        ++*((_DWORD *)v4 + 6);
      }
      result = (_QWORD *)*(v4 - 6);
      if (result)
      {
        if (*(v4 - 2))
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *(v4 - 2) = 0;
        *(v4 - 5) = 0;
        *(v4 - 4) = 0;
        *(v4 - 6) = 0;
        ++*((_DWORD *)v4 - 6);
      }
      v4 += 14;
      v3 -= 112;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::DynamicArray<re::ConstantResolution>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::ConstantResolution>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ConstantResolution>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 112 * v5;
  *(_QWORD *)v11 = *(_QWORD *)a2;
  re::DynamicArray<re::GeomCell4>::DynamicArray(v11 + 8, (uint64_t *)(a2 + 8));
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(a2 + 48);
  result = re::DynamicArray<re::GeomCell4>::DynamicArray(v11 + 56, (uint64_t *)(a2 + 56));
  v13 = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(v11 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(v11 + 96) = v13;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

unint64_t createSamplerLayerList(const re::MaterialTechnique *a1, const re::DrawCall *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;

  v6 = *(_QWORD **)(a3 + 64);
  v7 = v6[6];
  if (v7)
  {
    re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(0, (uint64_t)a2);
    *((_QWORD *)a1 + 2) = v7 + 792;
    *((_QWORD *)a1 + 3) = v7 + 616;
    *((_QWORD *)a1 + 4) = v7 + 904;
    *((_QWORD *)a1 + 5) = v7 + 968;
    *((_QWORD *)a1 + 6) = 3;
    v8 = 1;
    *(_QWORD *)a1 = 1;
    v6 = *(_QWORD **)(a3 + 64);
    v7 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = v6[7];
  if (v9)
  {
    re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(v7, (uint64_t)a2);
    v10 = (_QWORD *)((char *)a1 + 40 * v7);
    v10[2] = v9 + 792;
    v10[3] = v9 + 616;
    v10[4] = v9 + 904;
    v10[5] = v9 + 968;
    v10[6] = 4;
    ++v7;
    ++v8;
    v6 = *(_QWORD **)(a3 + 64);
  }
  v11 = v6[9];
  if (v11)
  {
    re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(v7, (uint64_t)a2);
    v12 = (_QWORD *)((char *)a1 + 40 * v7);
    v12[2] = v11 + 792;
    v12[3] = v11 + 616;
    v12[4] = v11 + 904;
    v12[5] = v11 + 968;
    v12[6] = 5;
    ++v7;
    ++v8;
  }
  v13 = *((_QWORD *)a2 + 1);
  re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(v7, (uint64_t)a2);
  v14 = v13 + 1192;
  v15 = v13 + 1128;
  v16 = v13 + 840;
  v17 = v13 + 1016;
  v18 = (char *)a1 + 40 * v7;
  *((_QWORD *)v18 + 2) = v17;
  *((_QWORD *)v18 + 3) = v16;
  *((_QWORD *)v18 + 4) = v15;
  *((_QWORD *)v18 + 5) = v14;
  *((_DWORD *)v18 + 12) = 1;
  v19 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 16);
  result = re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(v7 + 1, v20);
  *((_QWORD *)v18 + 7) = v19 + 1040;
  *((_QWORD *)v18 + 8) = v19 + 864;
  *((_QWORD *)v18 + 9) = v19 + 1152;
  *((_QWORD *)v18 + 10) = v19 + 1216;
  *((_DWORD *)v18 + 22) = 2;
  *(_QWORD *)a1 = v7 + 2;
  *((_DWORD *)a1 + 2) = v8 + 2;
  return result;
}

double re::MaterialTechniqueVariant::completeResolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const StringID *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t *v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  const StringID *v72;
  int v73;
  int v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[60];
  __int128 v83;
  __int128 v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  const char *v88;
  _BYTE buf[24];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  v86 = 0x7FFFFFFFLL;
  createSamplerLayerList((const re::MaterialTechnique *)&v81, *(const re::DrawCall **)a1, a4);
  v78 = v81;
  v76 = a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v7 + 24);
  if (v9)
    LODWORD(v9) = *(unsigned __int8 *)(v9 + 332);
  if (!(*(unsigned __int8 *)(v8 + 332) | v9) || (v10 = *(_QWORD *)(a3 + 120)) == 0)
  {
    LOBYTE(v11) = 0;
    goto LABEL_56;
  }
  v11 = 0;
  v12 = *(const StringID **)(a3 + 128);
  v72 = &v12[2 * v10];
  v13 = &v82[5 * v81];
  do
  {
    v14 = *(_QWORD *)(v76 + 8);
    v15 = *(_QWORD *)(v14 + 24);
    if (v15)
      LODWORD(v15) = *(unsigned __int8 *)(v15 + 332);
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 16) + 332);
    if (v16 <= v15)
      v16 = v15;
    if (v16 <= v11)
      break;
    v80 = 0;
    if (!v78)
      goto LABEL_39;
    v73 = v11;
    v17 = v82;
    v18 = (_QWORD *)(a3 + 144);
    while (1)
    {
      re::StringID::StringID((re::StringID *)&v87, v12);
      if (*(_QWORD *)(a3 + 192)
        && re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey((uint64_t)v18, &v87))
      {
        v19 = v13;
        if (*v18)
        {
          v20 = v87;
          v21 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * ((v20 >> 31) ^ (v20 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                       * ((v20 >> 31) ^ (v20 >> 1))) >> 27));
          v22 = *(_QWORD *)(a3 + 160);
          v23 = *(unsigned int *)(*(_QWORD *)(a3 + 152) + 4 * ((v21 ^ (v21 >> 31)) % *(unsigned int *)(a3 + 168)));
          if ((_DWORD)v23 == 0x7FFFFFFF)
          {
LABEL_22:
            v23 = 0x7FFFFFFFLL;
          }
          else
          {
            v24 = v88;
            while (1)
            {
              if ((*(_QWORD *)(v22 + 40 * v23 + 8) ^ v20) <= 1)
              {
                v25 = *(const char **)(v22 + 40 * v23 + 16);
                if (v25 == v24 || !strcmp(v25, v24))
                  break;
              }
              v23 = *(_DWORD *)(v22 + 40 * v23) & 0x7FFFFFFF;
              if (v23 == 0x7FFFFFFF)
                goto LABEL_22;
            }
          }
          v18 = (_QWORD *)(a3 + 144);
        }
        else
        {
          v22 = *(_QWORD *)(a3 + 160);
          v23 = 0x7FFFFFFFLL;
        }
        re::StringID::operator=(&v87, (uint64_t *)(v22 + 40 * v23 + 24));
        v13 = v19;
      }
      v26 = (_QWORD *)v17[2];
      *(_QWORD *)buf = v87 >> 1;
      v27 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v26, buf);
      if (v27 == -1)
        goto LABEL_34;
      v28 = v26[1] + 16 * v27;
      v31 = *(_QWORD *)(v28 + 8);
      v30 = (uint64_t *)(v28 + 8);
      v29 = v31;
      if (DWORD2(v84))
      {
        v32 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27));
        v33 = *(unsigned int *)(*((_QWORD *)&v83 + 1) + 4 * ((v32 ^ (v32 >> 31)) % DWORD2(v84)));
        if ((_DWORD)v33 != 0x7FFFFFFF)
          break;
      }
LABEL_31:
      v34 = (_QWORD *)*v17;
      v35 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)*v17, v30);
      if (v35 != -1)
      {
        v38 = v34[1] + 16 * v35;
        v11 = v73;
        v37 = v73 + 1;
        WORD2(v80) = *(unsigned __int8 *)(v38 + 8);
        WORD1(v80) = *((unsigned __int8 *)v17 + 32);
        v39 = *(_QWORD *)(v76 + 8);
        v40 = 24;
        if (!*(_QWORD *)(v39 + 24))
          v40 = 16;
        LOWORD(v80) = *(_WORD *)(*(_QWORD *)(v39 + v40) + 330) + v73;
        v41 = *v30;
        v42 = 0xBF58476D1CE4E5B9 * (*v30 ^ ((unint64_t)*v30 >> 30));
        v43 = (0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) ^ ((0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) >> 31);
        if (DWORD2(v84))
        {
          v44 = v43 % DWORD2(v84);
          v45 = *(unsigned int *)(*((_QWORD *)&v83 + 1) + 4 * v44);
          if ((_DWORD)v45 != 0x7FFFFFFF)
          {
            while (*(_QWORD *)(v84 + 16 * v45 + 8) != v41)
            {
              v45 = *(_DWORD *)(v84 + 16 * v45) & 0x7FFFFFFF;
              if ((_DWORD)v45 == 0x7FFFFFFF)
                goto LABEL_49;
            }
            goto LABEL_37;
          }
        }
        else
        {
          v44 = 0;
        }
LABEL_49:
        v46 = v86;
        if ((_DWORD)v86 == 0x7FFFFFFF)
        {
          v46 = v85;
          v47 = v85;
          if (v85 == DWORD2(v84))
          {
            re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity((uint64_t)&v83, 2 * HIDWORD(v84));
            v47 = v85;
            v44 = v43 % DWORD2(v84);
            v41 = *v30;
          }
          v85 = v47 + 1;
          v48 = v84;
          v49 = *(_DWORD *)(v84 + 16 * v46);
        }
        else
        {
          v48 = v84;
          v49 = *(_DWORD *)(v84 + 16 * v86);
          LODWORD(v86) = v49 & 0x7FFFFFFF;
        }
        v50 = 16 * v46;
        *(_DWORD *)(v48 + v50) = v49 | 0x80000000;
        v51 = *((_QWORD *)&v83 + 1);
        *(_DWORD *)(v84 + v50) = *(_DWORD *)(v84 + 16 * v46) & 0x80000000 | *(_DWORD *)(*((_QWORD *)&v83 + 1) + 4 * v44);
        *(_QWORD *)(v84 + 16 * v46 + 8) = v41;
        *(_DWORD *)(v51 + 4 * v44) = v46;
        ++HIDWORD(v84);
        ++HIDWORD(v86);
        v11 = v73;
        goto LABEL_37;
      }
      v36 = *re::graphicsLogObjects((re *)0xFFFFFFFFFFFFFFFFLL);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v88;
        _os_log_impl(&dword_224FE9000, v36, OS_LOG_TYPE_DEFAULT, "Texture '%s' is attempting to use a non-existent sampler via a texture block.", buf, 0xCu);
      }
LABEL_34:
      re::StringID::destroyString((re::StringID *)&v87);
      v17 += 5;
      if (v17 == v13)
      {
        v11 = v73;
        goto LABEL_39;
      }
    }
    while (*(_QWORD *)(v84 + 16 * v33 + 8) != v29)
    {
      v33 = *(_DWORD *)(v84 + 16 * v33) & 0x7FFFFFFF;
      if ((_DWORD)v33 == 0x7FFFFFFF)
        goto LABEL_31;
    }
    v11 = v73;
    v37 = v73;
LABEL_37:
    re::StringID::destroyString((re::StringID *)&v87);
    if (v11 != v37)
    {
      re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)a5, &v80);
      v11 = v37;
    }
LABEL_39:
    v12 += 2;
  }
  while (v12 != v72);
LABEL_56:
  v52 = *(_QWORD *)(a3 + 208);
  if (v52)
  {
    v53 = *(_QWORD *)(a3 + 216);
    v77 = v53 + 24 * v52;
    v74 = v11;
    do
    {
      *(_QWORD *)buf = 0;
      if (!*(_BYTE *)(v53 + 18))
        goto LABEL_62;
      v54 = *(_QWORD *)(v76 + 8);
      v55 = 16;
      if (*(_QWORD *)(v54 + 24))
        v55 = 24;
      if (*(unsigned __int16 *)(v53 + 16) - *(unsigned __int16 *)(*(_QWORD *)(v54 + v55) + 330) >= v74)
      {
LABEL_62:
        if (v78)
        {
          v56 = v82;
          while (1)
          {
            v57 = (_QWORD *)*v56;
            v87 = *(_QWORD *)v53 >> 1;
            v58 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v57, &v87);
            if (v58 != -1)
            {
              LODWORD(v59) = *((_DWORD *)v56 + 8);
              v60 = *(unsigned __int8 *)(v57[1] + 16 * v58 + 8);
              if (*(_QWORD *)(a2 + 24 * v59 + 8) > v60)
                break;
            }
            v61 = (_QWORD *)v56[1];
            v87 = *(_QWORD *)v53 >> 1;
            v62 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v61, (uint64_t *)&v87);
            if (v62 != -1)
            {
              v59 = 0;
              v63 = v61[1];
              v64 = &re::s_samplerTableConstantMembers;
              v65 = (unint64_t *)(a2 + 8);
              while (1)
              {
                v66 = *v64;
                v64 += 16;
                if (*(unsigned __int8 *)(v63 + 40 * v62 + 24) == v66)
                {
                  if (*v65)
                    break;
                }
                ++v59;
                v65 += 3;
                if (v59 == 6)
                  goto LABEL_75;
              }
              v67 = (_QWORD *)v65[1];
              v68 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v67, (_QWORD *)(v63 + 40 * v62 + 32));
              if (v68 != -1)
              {
                v60 = *(unsigned __int8 *)(v67[1] + 16 * v68 + 8);
                if (*v65 <= v60)
                {
                  re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v67[1] + 16 * v68 + 8), *v65);
                  _os_crash();
                  __break(1u);
                }
                if (*(_QWORD *)(*(v65 - 1) + 8 * v60))
                  break;
              }
            }
LABEL_75:
            v56 += 5;
            if (v56 == &v82[5 * v78])
              goto LABEL_76;
          }
          *(_WORD *)&buf[2] = v59;
          *(_WORD *)&buf[4] = v60;
          *(_WORD *)buf = *(_WORD *)(v53 + 16);
        }
        else
        {
LABEL_76:
          *(_WORD *)buf = *(_WORD *)(v53 + 16);
          *(_WORD *)&buf[2] = 0;
          v87 = 0x5CEBE1FD2490;
          v70 = *(_QWORD **)(a2 + 16);
          *(_WORD *)&buf[4] = *(unsigned __int8 *)(v70[1]
                                                 + 16
                                                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v70, &v87)+ 8);
        }
        re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)a5, buf);
      }
      v53 += 24;
    }
    while (v53 != v77);
  }
  return re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v83);
}

{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  __int16 v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  __int16 v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t i;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  unsigned int v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  int v105;
  uint64_t v106;
  _QWORD v107[2];
  _QWORD v108[60];
  unint64_t v109;
  unint64_t v110;
  const char *v111;

  *(_QWORD *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  createSamplerLayerList((const re::MaterialTechnique *)v107, *(const re::DrawCall **)a1, a4);
  v7 = -1;
  v8 = 4;
  do
  {
    if (v107[0] == ++v7)
      break;
    v9 = v107[v8];
    v8 += 5;
  }
  while (!*(_QWORD *)(v9 + 24));
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v12)
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 332);
  v13 = v107[0] == v7 || (*(unsigned __int8 *)(v11 + 332) | v12) == 0;
  v14 = !v13;
  v95 = v14;
  v15 = -1;
  v16 = 5;
  while (v107[0] != ++v15)
  {
    v17 = v107[v16];
    v16 += 5;
    if (*(_QWORD *)(v17 + 24))
      goto LABEL_17;
  }
  if ((v95 & 1) == 0)
    return result;
LABEL_17:
  v91 = v107[0];
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v106 = 0x7FFFFFFFLL;
  v18 = *(_QWORD *)(a3 + 120);
  if (!v18)
    return re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v103);
  v84 = 0;
  v85 = 0;
  v89 = 0;
  v90 = 0;
  v19 = 0;
  v86 = 0;
  v87 = 0;
  v20 = 0;
  v88 = 0;
  v92 = 0;
  v21 = *(_QWORD *)(a3 + 128);
  v94 = v21 + 32 * v18;
  v22 = &v108[5 * v107[0]];
  v23 = (_QWORD *)(a3 + 144);
  if (v107[0])
    v24 = v107[0] == v15;
  else
    v24 = 1;
  v25 = !v24;
  v93 = v25;
  do
  {
    v26 = *(_QWORD *)(a1 + 8);
    v27 = *(_QWORD *)(v26 + 16);
    v28 = *(_QWORD *)(v26 + 24);
    v102 = v19;
    v101 = v20;
    if (v28)
    {
      v29 = *(unsigned __int8 *)(v28 + 332);
      v30 = *(unsigned __int8 *)(v27 + 332);
      if (v30 <= v29)
        v31 = v29;
      else
        v31 = v30;
      v32 = v31 - 1;
      if (!v95)
        goto LABEL_55;
    }
    else
    {
      v30 = *(unsigned __int8 *)(v27 + 332);
      v32 = v30 - 1;
      if ((v95 & 1) == 0)
        goto LABEL_55;
      v29 = 0;
    }
    if (v30 <= v29)
      v30 = v29;
    if (v30 <= v92)
    {
LABEL_55:
      v98 = v32;
LABEL_56:
      v99 = 0;
      v100 = 0;
      goto LABEL_57;
    }
    if (!v91)
      goto LABEL_100;
    v98 = v32;
    v33 = v108;
    while (1)
    {
      re::StringID::StringID((re::StringID *)&v110, (const StringID *)v21);
      if (*(_QWORD *)(a3 + 192)
        && re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(a3 + 144, &v110))
      {
        if (*v23)
        {
          v34 = v110;
          v35 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * ((v34 >> 31) ^ (v34 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                       * ((v34 >> 31) ^ (v34 >> 1))) >> 27));
          v36 = *(_QWORD *)(a3 + 160);
          v37 = *(unsigned int *)(*(_QWORD *)(a3 + 152) + 4 * ((v35 ^ (v35 >> 31)) % *(unsigned int *)(a3 + 168)));
          if ((_DWORD)v37 != 0x7FFFFFFF)
          {
            v38 = v111;
            do
            {
              if ((*(_QWORD *)(v36 + 40 * v37 + 8) ^ v34) <= 1)
              {
                v39 = *(const char **)(v36 + 40 * v37 + 16);
                if (v39 == v38 || !strcmp(v39, v38))
                  goto LABEL_50;
              }
              v37 = *(_DWORD *)(v36 + 40 * v37) & 0x7FFFFFFF;
            }
            while (v37 != 0x7FFFFFFF);
          }
        }
        else
        {
          v36 = *(_QWORD *)(a3 + 160);
        }
        v37 = 0x7FFFFFFFLL;
LABEL_50:
        re::StringID::operator=(&v110, (uint64_t *)(v36 + 40 * v37 + 24));
      }
      v40 = (_QWORD *)v33[2];
      v109 = v110 >> 1;
      v41 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v40, &v109);
      if (v41 != -1)
      {
        v42 = (uint64_t *)(v40[1] + 16 * v41 + 8);
        if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)*v33, v42) != -1)break;
      }
      re::StringID::destroyString((re::StringID *)&v110);
      v33 += 5;
      if (v33 == v22)
        goto LABEL_56;
    }
    v60 = *v42;
    v61 = v103;
    v62 = 0xBF58476D1CE4E5B9 * (*v42 ^ ((unint64_t)*v42 >> 30));
    v63 = (0x94D049BB133111EBLL * (v62 ^ (v62 >> 27))) ^ ((0x94D049BB133111EBLL * (v62 ^ (v62 >> 27))) >> 31);
    if (!(_QWORD)v103)
    {
      v67 = v92++;
      v65 = v102;
      goto LABEL_103;
    }
    v64 = *(unsigned int *)(v87 + 4 * (v63 % HIDWORD(v86)));
    v65 = v102;
    v66 = v90;
    if ((_DWORD)v64 == 0x7FFFFFFF)
    {
LABEL_88:
      v67 = v92;
      v61 = v63 % v101;
      v68 = *(unsigned int *)(v89 + 4 * v61);
      if ((_DWORD)v68 != 0x7FFFFFFF)
      {
        v66 = v90;
        while (*(_QWORD *)(v90 + 24 * v68 + 8) != v60)
        {
          LODWORD(v68) = *(_DWORD *)(v90 + 24 * v68) & 0x7FFFFFFF;
          if ((_DWORD)v68 == 0x7FFFFFFF)
            goto LABEL_92;
        }
        v98 = v92;
        LOBYTE(v99) = 0;
        HIDWORD(v85) = v101;
        HIDWORD(v86) = v101;
        ++v92;
        goto LABEL_113;
      }
LABEL_92:
      ++v92;
      HIDWORD(v85) = v101;
      HIDWORD(v86) = v101;
LABEL_103:
      v70 = v106;
      if ((_DWORD)v106 == 0x7FFFFFFF)
      {
        v71 = v86;
        v72 = v86;
        if ((_DWORD)v86 == (_DWORD)v65)
        {
          v73 = v67;
          re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity((uint64_t)&v103, 2 * v85);
          v67 = v73;
          v65 = DWORD2(v104);
          v72 = v105;
          v61 = v63 % DWORD2(v104);
          v60 = *v42;
          v90 = v104;
          v84 = *((_QWORD *)&v103 + 1);
          v71 = v86;
        }
        v74 = v72 + 1;
        v105 = v74;
        v70 = v71;
        v75 = v90;
        v76 = *(_DWORD *)(v90 + 24 * v71);
        v77 = v84;
        v101 = v65;
        HIDWORD(v85) = v65;
        v102 = v65;
        HIDWORD(v86) = v65;
      }
      else
      {
        v77 = v89;
        v75 = v90;
        v76 = *(_DWORD *)(v90 + 24 * v106);
        LODWORD(v106) = v76 & 0x7FFFFFFF;
        v74 = v86;
        v71 = v70;
      }
      v98 = v67;
      LOBYTE(v99) = 0;
      v78 = 3 * v70;
      *(_DWORD *)(v75 + 8 * v78) = v76 | 0x80000000;
      v66 = v104;
      v79 = v104 + 8 * v78;
      *(_DWORD *)v79 = *(_DWORD *)v79 & 0x80000000 | *(_DWORD *)(v77 + 4 * v61);
      *(_QWORD *)(v79 + 8) = v60;
      *(_WORD *)(v79 + 16) = 0;
      *(_WORD *)(v79 + 18) = v67;
      *(_BYTE *)(v79 + 20) = 0;
      *(_DWORD *)(v77 + 4 * v61) = v71;
      LODWORD(v85) = ++HIDWORD(v104);
      ++HIDWORD(v106);
      LODWORD(v86) = v74;
    }
    else
    {
      while (*(_QWORD *)(v88 + 24 * v64 + 8) != v60)
      {
        LODWORD(v64) = *(_DWORD *)(v88 + 24 * v64) & 0x7FFFFFFF;
        if ((_DWORD)v64 == 0x7FFFFFFF)
          goto LABEL_88;
      }
      v80 = *(_DWORD *)(v89 + 4 * (v63 % HIDWORD(v85)));
      if (v80 == 0x7FFFFFFF)
      {
        v80 = 0x7FFFFFFF;
      }
      else
      {
        v82 = *(_QWORD *)(v90 + 24 * v80 + 8);
        for (i = *(unsigned int *)(v89 + 4 * (v63 % HIDWORD(v85))); ; v80 = i)
        {
          v66 = v90;
          if (v82 == v60)
            break;
          i = *(_DWORD *)(v90 + 24 * i) & 0x7FFFFFFF;
          v80 = 0x7FFFFFFF;
          v66 = v90;
          if (i == 0x7FFFFFFF)
            break;
          v82 = *(_QWORD *)(v90 + 24 * i + 8);
        }
      }
      v81 = v66 + 24 * v80;
      v98 = *(_WORD *)(v81 + 18);
      LOBYTE(v99) = *(_BYTE *)(v81 + 20);
      HIDWORD(v86) = HIDWORD(v85);
LABEL_113:
      v77 = v89;
    }
    v100 = *(_WORD *)(v21 + 16);
    re::StringID::destroyString((re::StringID *)&v110);
    HIDWORD(v99) = 1;
    v89 = v77;
    v90 = v66;
    v87 = v77;
    v88 = v66;
LABEL_57:
    if (!v93)
    {
LABEL_74:
      v52 = a5;
      LOBYTE(v53) = v99;
      if (HIDWORD(v99))
        goto LABEL_77;
      goto LABEL_99;
    }
    v43 = v108;
    while (2)
    {
      re::StringID::StringID((re::StringID *)&v110, (const StringID *)v21);
      if (!*(_QWORD *)(a3 + 192)
        || !re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(a3 + 144, &v110))
      {
        goto LABEL_72;
      }
      if (!*v23)
      {
        v46 = *(_QWORD *)(a3 + 160);
LABEL_70:
        v47 = 0x7FFFFFFFLL;
        goto LABEL_71;
      }
      v44 = v110;
      v45 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v44 >> 31) ^ (v44 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v44 >> 31) ^ (v44 >> 1))) >> 27));
      v46 = *(_QWORD *)(a3 + 160);
      v47 = *(unsigned int *)(*(_QWORD *)(a3 + 152) + 4 * ((v45 ^ (v45 >> 31)) % *(unsigned int *)(a3 + 168)));
      if ((_DWORD)v47 == 0x7FFFFFFF)
        goto LABEL_70;
      v48 = v111;
      while (1)
      {
        if ((*(_QWORD *)(v46 + 40 * v47 + 8) ^ v44) <= 1)
        {
          v49 = *(const char **)(v46 + 40 * v47 + 16);
          if (v49 == v48 || !strcmp(v49, v48))
            break;
        }
        v47 = *(_DWORD *)(v46 + 40 * v47) & 0x7FFFFFFF;
        if (v47 == 0x7FFFFFFF)
          goto LABEL_70;
      }
LABEL_71:
      re::StringID::operator=(&v110, (uint64_t *)(v46 + 40 * v47 + 24));
LABEL_72:
      v50 = (_QWORD *)v43[3];
      v109 = v110 >> 1;
      v51 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v50, &v109);
      if (v51 == -1)
      {
        re::StringID::destroyString((re::StringID *)&v110);
        v43 += 5;
        if (v43 == v22)
          goto LABEL_74;
        continue;
      }
      break;
    }
    v53 = *(_DWORD *)(v50[1] + 16 * v51 + 8);
    v100 = *(_WORD *)(v21 + 16);
    re::StringID::destroyString((re::StringID *)&v110);
    v52 = a5;
LABEL_77:
    v54 = *(_QWORD *)(v52 + 8);
    v55 = *(_QWORD *)(v52 + 16);
    if (v55 >= v54)
    {
      v56 = v55 + 1;
      if (v54 < v55 + 1)
      {
        if (*(_QWORD *)v52)
        {
          v57 = 2 * v54;
          v13 = v54 == 0;
          v58 = 8;
          if (!v13)
            v58 = v57;
          if (v58 <= v56)
            v59 = v56;
          else
            v59 = v58;
          re::DynamicArray<re::TextureBlockResolution>::setCapacity((_QWORD *)v52, v59);
          v52 = a5;
        }
        else
        {
          re::DynamicArray<re::TextureBlockResolution>::setCapacity((_QWORD *)a5, v56);
          v52 = a5;
          ++*(_DWORD *)(a5 + 24);
        }
      }
      v55 = *(_QWORD *)(v52 + 16);
    }
    v69 = *(_QWORD *)(v52 + 32) + 6 * v55;
    *(_WORD *)v69 = v100;
    *(_WORD *)(v69 + 2) = v98;
    *(_BYTE *)(v69 + 4) = v53;
    ++*(_QWORD *)(v52 + 16);
    ++*(_DWORD *)(v52 + 24);
LABEL_99:
    v19 = v102;
    v20 = v101;
LABEL_100:
    v21 += 32;
  }
  while (v21 != v94);
  return re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v103);
}

uint64_t re::MaterialTechniqueVariant::completeResolution(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  int v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[2];
  uint64_t v86[2];
  uint64_t *v87;
  void *v88;
  __int16 v89;
  uint64_t v90;
  int v91;
  unint64_t v92[2];
  int v93;
  __int16 v94;
  _QWORD v95[2];
  _BYTE v96[22];
  char v97;
  _QWORD v98[2];
  unint64_t v99;
  int v100;
  uint64_t v101;
  _QWORD v102[2];
  unint64_t v103;
  int v104;
  uint64_t v105;
  _QWORD v106[2];
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  void *v119;
  int v120;
  uint64_t v121;
  _BYTE buf[38];
  __int128 v123;
  _QWORD v124[4];
  uint64_t v125;
  uint64_t v126;
  __int16 v127;
  __int16 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _BYTE v133[24];
  __int128 v134;
  int v135;
  uint64_t v136;
  void *v137;
  unint64_t v138;
  __int16 v139;
  uint64_t v140;

  v6 = a5;
  v84 = a2;
  v140 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = 0;
  if (v9)
  {
    v10 = 144 * v9;
    v11 = *(_QWORD *)(a5 + 32) + 64;
    do
    {
      v12 = *(void **)(v11 + 56);
      if (v12)
      {

        *(_QWORD *)(v11 + 56) = 0;
      }
      re::DynamicArray<re::ConstantResolution>::deinit(v11 + 16);
      v13 = *(_QWORD *)(v11 - 24);
      if (v13)
      {
        a2 = *(_QWORD *)(v11 + 8);
        if (a2)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 - 16) = 0;
        *(_QWORD *)(v11 - 8) = 0;
        *(_QWORD *)(v11 - 24) = 0;
        ++*(_DWORD *)v11;
      }
      v14 = *(_QWORD *)(v11 - 64);
      if (v14)
      {
        a2 = *(_QWORD *)(v11 - 32);
        if (a2)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        *(_QWORD *)(v11 - 32) = 0;
        *(_QWORD *)(v11 - 56) = 0;
        *(_QWORD *)(v11 - 48) = 0;
        *(_QWORD *)(v11 - 64) = 0;
        ++*(_DWORD *)(v11 - 40);
      }
      v11 += 144;
      v10 -= 144;
    }
    while (v10);
  }
  ++*(_DWORD *)(v6 + 24);
  v119 = 0;
  v120 = 0;
  re::MaterialTechniqueVariant::fillTextureTableLayerLists((uint64_t)a1, a2, a4, (uint64_t *)&v119);
  v116 = 0;
  v117 = 0;
  v113 = 0;
  v114 = 0;
  re::MaterialTechniqueVariant::fillConstantTableLayerLists(a1, (_DWORD *)a3, a4, (uint64_t)&v116, (uint64_t)&v113);
  v110 = 0;
  v111 = 0;
  result = re::MaterialTechniqueVariant::fillBufferTableLayerLists((uint64_t)a1, a4, (uint64_t)&v110);
  v16 = *(_QWORD *)(a3 + 64);
  if (!v16)
    return result;
  v17 = 0;
  v77 = v6;
  v78 = a4;
  v83 = a3;
  do
  {
    v18 = *(_QWORD *)(a3 + 72);
    v19 = v18 + 112 * v17;
    v21 = *(unsigned __int16 *)(v19 + 16);
    v20 = (__int16 *)(v19 + 16);
    result = re::MaterialParameterTableLayers::containsDirectBuffer(*(uint64_t **)(a4 + 64), v21, *(_DWORD *)a3);
    if ((result & 1) != 0)
      goto LABEL_96;
    v22 = *(_QWORD *)(a3 + 88);
    if (v22 <= v17)
    {
      v87 = 0;
      v132 = 0u;
      *(_OWORD *)v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 476;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v22;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v23 = *(_QWORD *)(a3 + 96);
    v129 = 0uLL;
    DWORD2(v130) = 0;
    *(_QWORD *)&v130 = 0;
    v131 = 0u;
    v132 = 0u;
    *(_DWORD *)v133 = 0;
    *(_OWORD *)&v133[8] = 0u;
    v134 = 0u;
    v135 = 0;
    v137 = 0;
    v138 = 0;
    v136 = 0;
    v139 = 0;
    v139 = *v20;
    v109 = 0;
    v106[1] = 0;
    v107 = 0;
    v105 = 0;
    v106[0] = 0;
    v108 = 0;
    v102[1] = 0;
    v103 = 0;
    v101 = 0;
    v102[0] = 0;
    v104 = 0;
    v98[1] = 0;
    v99 = 0;
    v98[0] = 0;
    v100 = 0;
    v24 = v18 + 112 * v17;
    v25 = *(_QWORD *)(v24 + 72);
    if (!v25)
    {
      v138 = 0;
      goto LABEL_50;
    }
    v80 = v23;
    v26 = 0;
    v27 = 0;
    v28 = *(_QWORD *)(v24 + 80);
    v79 = (uint64_t *)(v18 + 112 * v17 + 8);
    v29 = 80 * v25;
    do
    {
      v30 = (uint64_t *)(v28 + v26);
      v31 = *(unsigned __int16 *)(v28 + v26 + 36);
      if (v31 > 0x3A)
      {
        if (v31 != 59)
        {
          if (v31 == 60)
          {
            *(_QWORD *)buf = 0;
            *(_WORD *)buf = *(_DWORD *)(v28 + v26 + 72);
            re::MaterialTechniqueVariant::resolveBufferArgument((_QWORD *)(v28 + v26 + 16), *(_QWORD **)(v84 + 16), (uint64_t)&v112, v110, (uint64_t)buf, 1);
            v37 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)&buf[2]) ^ ((0xBF58476D1CE4E5B9
                                                                           * *(unsigned __int16 *)&buf[2]) >> 27));
            v38 = ((v27 << 6) - 0x61C8864680B583E9 + (v27 >> 2) + (v37 ^ (v37 >> 31))) ^ v27;
            v39 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)&buf[4]) ^ ((0xBF58476D1CE4E5B9
                                                                           * *(unsigned __int16 *)&buf[4]) >> 27));
            v27 = ((v39 ^ (v39 >> 31)) - 0x61C8864680B583E9 + (v38 << 6) + (v38 >> 2)) ^ v38;
            result = (uint64_t)re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)v102, buf);
            goto LABEL_38;
          }
          goto LABEL_27;
        }
        v55 = *re::graphicsLogObjects((re *)result);
        result = os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)result)
          goto LABEL_38;
        v56 = *(_QWORD *)(v28 + v26 + 24);
        v57 = *v79;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v56;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v57;
        v53 = v55;
        v54 = "Found sampler member (%s) in Bindless Argument (%s). This is not supported.";
LABEL_41:
        _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, v54, buf, 0x16u);
        goto LABEL_38;
      }
      if (v31 == 1)
      {
        v50 = *re::graphicsLogObjects((re *)result);
        result = os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)result)
          goto LABEL_38;
        v51 = *(_QWORD *)(v28 + v26 + 24);
        v52 = *v79;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v51;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v52;
        v53 = v50;
        v54 = "Found struct member (%s) in Bindless Argument (%s). This is not supported.";
        goto LABEL_41;
      }
      if (v31 == 58)
      {
        v86[0] = 0;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = &str_110;
        *(_QWORD *)&buf[24] = 0;
        *(_DWORD *)&buf[16] = 0;
        *(_DWORD *)&buf[19] = 0;
        v32 = re::StringID::operator=((unint64_t *)buf, (uint64_t *)(v28 + v26 + 16));
        *(_WORD *)&buf[18] = *(_DWORD *)(v28 + v26 + 64);
        buf[22] = *(_BYTE *)(v28 + v26 + 68);
        v33 = *(uint64_t **)(v84 + 8);
        v87 = &v121;
        v88 = v119;
        re::MaterialTechniqueVariant::resolveTextureArgument(v32, (StringID *)buf, v33, &v87, (uint64_t)v86, a6, v83);
        re::StringID::destroyString((re::StringID *)buf);
        LOWORD(v86[0]) = *(_DWORD *)(v28 + v26 + 72);
        v34 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * WORD1(v86[0])) ^ ((0xBF58476D1CE4E5B9 * WORD1(v86[0])) >> 27));
        v35 = ((v27 << 6) - 0x61C8864680B583E9 + (v27 >> 2) + (v34 ^ (v34 >> 31))) ^ v27;
        v36 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * WORD2(v86[0])) ^ ((0xBF58476D1CE4E5B9 * WORD2(v86[0])) >> 27));
        v27 = ((v36 ^ (v36 >> 31)) - 0x61C8864680B583E9 + (v35 << 6) + (v35 >> 2)) ^ v35;
        result = (uint64_t)re::DynamicArray<re::TextureResolution>::add(v106, v86);
        goto LABEL_38;
      }
LABEL_27:
      memset(buf, 0, 36);
      v123 = 0u;
      memset(v124, 0, 28);
      v127 = 0;
      v125 = 0;
      v126 = 0;
      v128 = 255;
      LOWORD(v126) = *(_DWORD *)(v28 + v26 + 72);
      v87 = 0;
      v88 = &str_110;
      v89 = 0;
      v90 = 0;
      v91 = 1;
      v92[0] = 0;
      v92[1] = (unint64_t)&str_110;
      v93 = 0;
      v94 = 0;
      *(_DWORD *)&v96[16] = 0;
      *(_WORD *)&v96[20] = 256;
      v95[1] = 0;
      *(_QWORD *)v96 = 0;
      v95[0] = 0;
      *(_QWORD *)&v96[5] = 0;
      v97 = 0;
      re::StringID::operator=((unint64_t *)&v87, (uint64_t *)(v28 + v26 + 16));
      v40 = *v30;
      v91 = *((_DWORD *)v30 + 2);
      v90 = v40;
      re::StringID::operator=(v92, (uint64_t *)(v28 + v26 + 16));
      v41 = *(_DWORD *)(v28 + v26 + 32);
      v94 = *(_WORD *)(v28 + v26 + 36);
      v93 = v41;
      re::FixedArray<re::MetalTypeInfo>::operator=(v95, v28 + v26 + 40);
      v42 = *(_QWORD *)(v28 + v26 + 70);
      *(_QWORD *)&v96[8] = *(_QWORD *)(v28 + v26 + 64);
      *(_QWORD *)&v96[14] = v42;
      v43 = *(_QWORD *)v84;
      v86[0] = (uint64_t)&v118;
      v86[1] = v116;
      v85[0] = (uint64_t)&v115;
      v85[1] = v113;
      re::MaterialTechniqueVariant::resolveConstantArgument(a1, (uint64_t)&v87, v43, v86, v85, (uint64_t)buf, 1, v44);
      re::FixedArray<re::MetalTypeInfo>::deinit(v95);
      re::StringID::destroyString((re::StringID *)v92);
      re::StringID::destroyString((re::StringID *)&v87);
      LOWORD(v126) = *(_DWORD *)(v28 + v26 + 72);
      v45 = *(_QWORD *)buf;
      v46 = *((_QWORD *)&v123 + 1);
      re::DynamicArray<re::ConstantResolution>::add((uint64_t)v98, (uint64_t)buf);
      if (v124[0])
      {
        if (v125)
          (*(void (**)(void))(*(_QWORD *)v124[0] + 40))();
        v125 = 0;
        memset(v124, 0, 24);
        ++LODWORD(v124[3]);
      }
      result = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8] && (_QWORD)v123)
        result = (*(uint64_t (**)(void))(**(_QWORD **)&buf[8] + 40))();
      v47 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) >> 27));
      v48 = ((v27 << 6) - 0x61C8864680B583E9 + (v27 >> 2) + (v47 ^ (v47 >> 31))) ^ v27;
      v49 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v46 ^ (v46 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v46 ^ (v46 >> 30))) >> 27));
      v27 = ((v49 ^ (v49 >> 31)) - 0x61C8864680B583E9 + (v48 << 6) + (v48 >> 2)) ^ v48;
LABEL_38:
      v26 += 80;
    }
    while (v29 != v26);
    v138 = v27;
    if ((_QWORD)v129)
    {
      v6 = v77;
      v23 = v80;
      if (v106[0])
        re::DynamicArray<re::TextureResolution>::copy((void **)&v129, (uint64_t)v106);
      else
        *(_QWORD *)&v130 = 0;
      ++DWORD2(v130);
    }
    else
    {
      v6 = v77;
      v23 = v80;
      if (v106[0])
      {
        *(_QWORD *)&v129 = v106[0];
        re::DynamicArray<re::TextureResolution>::setCapacity(&v129, v107);
        ++DWORD2(v130);
        re::DynamicArray<re::TextureResolution>::copy((void **)&v129, (uint64_t)v106);
      }
    }
LABEL_50:
    v58 = v102[0];
    if (*((_QWORD *)&v131 + 1))
    {
      if (v102[0])
        re::DynamicArray<re::TextureResolution>::copy((void **)&v131 + 1, (uint64_t)v102);
      else
        *((_QWORD *)&v132 + 1) = 0;
      ++*(_DWORD *)v133;
    }
    else if (v102[0])
    {
      *((_QWORD *)&v131 + 1) = v102[0];
      re::DynamicArray<re::TextureResolution>::setCapacity((_QWORD *)&v131 + 1, v103);
      ++*(_DWORD *)v133;
      re::DynamicArray<re::TextureResolution>::copy((void **)&v131 + 1, (uint64_t)v102);
    }
    if (*(_QWORD *)&v133[16])
    {
      if (v98[0])
      {
        re::DynamicArray<re::ConstantResolution>::copy(&v133[16], (uint64_t)v98);
        ++v135;
      }
      else
      {
        re::DynamicArray<re::ConstantResolution>::clear(&v133[16]);
      }
    }
    else if (v98[0])
    {
      *(_QWORD *)&v133[16] = v98[0];
      re::DynamicArray<re::ConstantResolution>::setCapacity(&v133[16], v99);
      ++v135;
      re::DynamicArray<re::ConstantResolution>::copy(&v133[16], (uint64_t)v98);
    }
    v59 = NS::SharedPtr<MTL::Texture>::operator=(&v137, (void **)(v23 + 8 * v17));
    v60 = *(_QWORD *)(v6 + 8);
    v61 = *(_QWORD *)(v6 + 16);
    if (v61 >= v60)
    {
      if (v60 < v61 + 1)
      {
        if (*(_QWORD *)v6)
        {
          v62 = 2 * v60;
          v63 = v60 == 0;
          v64 = 8;
          if (!v63)
            v64 = v62;
          if (v64 <= v61 + 1)
            v65 = v61 + 1;
          else
            v65 = v64;
          re::DynamicArray<re::ArgumentBufferResolution>::setCapacity((_QWORD *)v6, v65);
        }
        else
        {
          re::DynamicArray<re::ArgumentBufferResolution>::setCapacity((_QWORD *)v6, v61 + 1);
          ++*(_DWORD *)(v6 + 24);
        }
      }
      v61 = *(_QWORD *)(v6 + 16);
    }
    v66 = *(_QWORD *)(v6 + 32);
    v67 = v66 + 144 * v61;
    *(_QWORD *)(v67 + 32) = 0;
    *(_QWORD *)(v67 + 8) = 0;
    *(_QWORD *)(v67 + 16) = 0;
    *(_QWORD *)v67 = 0;
    *(_DWORD *)(v67 + 24) = 0;
    if ((_QWORD)v129)
    {
      v68 = v130;
      *(_QWORD *)v67 = v129;
      re::DynamicArray<re::TextureResolution>::setCapacity((_QWORD *)(v66 + 144 * v61), v68);
      ++*(_DWORD *)(v67 + 24);
      re::DynamicArray<re::TextureResolution>::copy((void **)(v66 + 144 * v61), (uint64_t)&v129);
    }
    v69 = v66 + 144 * v61;
    *(_QWORD *)(v69 + 40) = 0;
    v70 = v69 + 40;
    *(_QWORD *)(v70 + 32) = 0;
    *(_QWORD *)(v70 + 8) = 0;
    *(_QWORD *)(v70 + 16) = 0;
    *(_DWORD *)(v70 + 24) = 0;
    if (*((_QWORD *)&v131 + 1))
    {
      v71 = *((_QWORD *)&v132 + 1);
      *(_QWORD *)v70 = *((_QWORD *)&v131 + 1);
      re::DynamicArray<re::TextureResolution>::setCapacity((_QWORD *)v70, v71);
      ++*(_DWORD *)(v66 + 144 * v61 + 64);
      re::DynamicArray<re::TextureResolution>::copy((void **)v70, (uint64_t)&v131 + 8);
    }
    v72 = v66 + 144 * v61;
    *(_QWORD *)(v72 + 80) = 0;
    v73 = v72 + 80;
    *(_QWORD *)(v73 + 32) = 0;
    *(_QWORD *)(v73 + 8) = 0;
    *(_QWORD *)(v73 + 16) = 0;
    *(_DWORD *)(v73 + 24) = 0;
    if (*(_QWORD *)&v133[16])
    {
      v74 = *((_QWORD *)&v134 + 1);
      *(_QWORD *)v73 = *(_QWORD *)&v133[16];
      re::DynamicArray<re::ConstantResolution>::setCapacity((_QWORD *)v73, v74);
      ++*(_DWORD *)(v66 + 144 * v61 + 104);
      re::DynamicArray<re::ConstantResolution>::copy((_QWORD *)v73, (uint64_t)&v133[16]);
    }
    v75 = v66 + 144 * v61;
    *(_QWORD *)(v75 + 120) = v137;
    v76 = v139;
    *(_QWORD *)(v75 + 128) = v138;
    *(_WORD *)(v75 + 136) = v76;
    ++*(_QWORD *)(v6 + 16);
    ++*(_DWORD *)(v6 + 24);
    re::DynamicArray<re::ConstantResolution>::deinit((uint64_t)v98);
    if (v58 && v105)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
    if (v106[0] && v109)
      (*(void (**)(void))(*(_QWORD *)v106[0] + 40))();
    a4 = v78;
    a3 = v83;
    if (v137)
    {

      v137 = 0;
    }
    re::DynamicArray<re::ConstantResolution>::deinit((uint64_t)&v133[16]);
    if (*((_QWORD *)&v131 + 1))
    {
      if (*(_QWORD *)&v133[8])
        (*(void (**)(void))(**((_QWORD **)&v131 + 1) + 40))();
      *(_QWORD *)&v133[8] = 0;
      v132 = 0uLL;
      *((_QWORD *)&v131 + 1) = 0;
      ++*(_DWORD *)v133;
    }
    result = v129;
    if ((_QWORD)v129)
    {
      if ((_QWORD)v131)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v129 + 40))();
    }
    v16 = *(_QWORD *)(v83 + 64);
LABEL_96:
    ++v17;
  }
  while (v17 < v16);
  return result;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::AttributeResolution,re::AttributeTable>(re *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t *v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _OWORD *v14;
  unint64_t v15;

  v15 = a5;
  v8 = *a2;
  v9 = re::globalAllocators(a1);
  v10 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 48, 8);
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v14 = v10;
  v11 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v8, &v15, &v14);
  v12 = *v11;
  re::MaterialTechniqueVariant::completeResolution(a1, a3, *(_QWORD *)(*((_QWORD *)a1 + 1) + 16), a4, *v11 + 8);
  return v12;
}

uint64_t re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 24 * v8;
  return v10 + 16;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::BufferResolution,re::BufferTableCollection>(re *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v16 = a5;
  v8 = *a2;
  v9 = re::globalAllocators(a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 88, 8);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 80) = 0;
  v15 = v10;
  v11 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v8, &v16, &v15);
  v12 = *v11;
  re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, *(_QWORD *)(*((_QWORD *)a1 + 1) + 16), a4, *v11 + 8);
  v13 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24);
  if (v13)
    re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, v13, a4, v12 + 48);
  return v12;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::TextureResolution,re::TextureTableCollection>(re *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v18 = a5;
  v10 = *a2;
  v11 = re::globalAllocators(a1);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 88, 8);
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_QWORD *)(v12 + 80) = 0;
  v17 = v12;
  v13 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v10, &v18, &v17);
  v14 = *v13;
  re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, *(_QWORD *)(*((_QWORD *)a1 + 1) + 16), a4, *v13 + 8, a6);
  v15 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24);
  if (v15)
    re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, v15, a4, v14 + 48, a6);
  return v14;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::ConstantResolution,re::ConstantTableCollection>(re *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v16 = a5;
  v8 = *a2;
  v9 = re::globalAllocators(a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 88, 8);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 80) = 0;
  v15 = v10;
  v11 = re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v8, &v16, &v15);
  v12 = *(_QWORD *)v11;
  re::MaterialTechniqueVariant::completeResolution((uint64_t **)a1, a3, *(_QWORD *)(*((_QWORD *)a1 + 1) + 16), a4, (_QWORD *)(*(_QWORD *)v11 + 8));
  v13 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24);
  if (v13)
    re::MaterialTechniqueVariant::completeResolution((uint64_t **)a1, a3, v13, a4, (_QWORD *)(v12 + 48));
  return v12;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::SamplerResolution,re::SamplerTableCollection>(re *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v16 = a5;
  v8 = *a2;
  v9 = re::globalAllocators(a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 88, 8);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 80) = 0;
  v15 = v10;
  v11 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v8, &v16, &v15);
  v12 = *v11;
  re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, *(_QWORD *)(*((_QWORD *)a1 + 1) + 16), a4, *v11 + 8);
  v13 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24);
  if (v13)
    re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, v13, a4, v12 + 48);
  return v12;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::TextureBlockResolution,re::SamplerTableCollection>(re *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;

  v17 = a5;
  v7 = *a2;
  v8 = re::globalAllocators(a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 88, 8);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_QWORD *)(v9 + 80) = 0;
  v16 = v9;
  v10 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v7, &v17, &v16);
  v11 = *v10;
  re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, v12, *(_QWORD *)(*((_QWORD *)a1 + 1) + 16), a4, *v10 + 8);
  v14 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24);
  if (v14)
    re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, v13, v14, a4, v11 + 48);
  return v11;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::ArgumentBufferResolution,re::ArgumentBufferTableCollection>(re *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v18 = a5;
  v10 = *a2;
  v11 = re::globalAllocators(a1);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 88, 8);
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_QWORD *)(v12 + 80) = 0;
  v17 = v12;
  v13 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v10, &v18, &v17);
  v14 = *v13;
  re::MaterialTechniqueVariant::completeResolution((uint64_t **)a1, a3, *(_QWORD *)(*((_QWORD *)a1 + 1) + 16), a4, *v13 + 8, a6);
  v15 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24);
  if (v15)
    re::MaterialTechniqueVariant::completeResolution((uint64_t **)a1, a3, v15, a4, v14 + 48, a6);
  return v14;
}

BOOL re::MaterialTechniqueVariant::shouldCompileSynchronously(re::MaterialTechniqueVariant *this)
{
  unsigned __int8 v1;
  const char *v3;
  int v4;
  re::MaterialTechniqueVariant *v5;

  if ((v1 & 1) == 0)
  {
    v5 = this;
    this = v5;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"compilePipelinesSynchronously", v3, &re::MaterialTechniqueVariant::shouldCompileSynchronously(void)const::_compilePipelinesSynchronously);
      this = v5;
    }
  }
  if (re::MaterialTechniqueVariant::shouldCompileSynchronously(void)const::_compilePipelinesSynchronously)
    return byte_255829A49 != 0;
  if (*((_BYTE *)this + 16))
    return 1;
  return *(_BYTE *)(**(_QWORD **)this + 2845) == 0;
}

void *re::introspect_ShaderAPIFlagsValues(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::IntrospectionBasic *v22;
  uint64_t v23[2];
  __int128 v24;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "None";
      re::introspect_ShaderAPIFlagsValues(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "SurfaceShader";
      qword_255829A60 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "SurfaceShaderPrivate";
      qword_255829A68 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 4;
      *((_QWORD *)v19 + 2) = "GeometryModifier";
      qword_255829A70 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 8;
      *(_QWORD *)(v21 + 16) = "GeometryModifierPrivate";
      qword_255829A78 = v21;
    }
  }
  {
    v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_ShaderAPIFlagsValues(BOOL)::info, "ShaderAPIFlagsValues", 4, 4, 1, 1);
    *(_QWORD *)v22 = &off_24ED7D9E8;
    *((_QWORD *)v22 + 8) = &re::introspect_ShaderAPIFlagsValues(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_ShaderAPIFlagsValues(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_ShaderAPIFlagsValues(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    v5 = re::introspect_ShaderAPIFlagsValues(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if ((v5 & 1) != 0)
      return &re::introspect_ShaderAPIFlagsValues(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_ShaderAPIFlagsValues(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_ShaderAPIFlagsValues(BOOL)::info;
    }
  }
  re::introspect_ShaderAPIFlagsValues(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_ShaderAPIFlagsValues(BOOL)::info, a2);
  v23[0] = 0xDB7D46A3AA816EE8;
  v23[1] = (uint64_t)"ShaderAPIFlagsValues";
  xmmword_255829AA8 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_ShaderAPIFlagsValues(BOOL)::info;
}

uint64_t re::SharedPersistentObject<re::MaterialPipelineData>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

void re::internal::MoveOnlyCallable<re::MaterialTechniqueVariant::releasePipelineStates(re::RenderManager *,re::DrawingManager *)::$_0,void ()(void)>::~MoveOnlyCallable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialTechniqueVariant::releasePipelineStates(re::RenderManager *,re::DrawingManager *)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  return re::DrawingManager::releasePipelineState(*(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialTechniqueVariant::releasePipelineStates(re::RenderManager *,re::DrawingManager *)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24ED79CF8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_OWORD *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialTechniqueVariant::releasePipelineStates(re::RenderManager *,re::DrawingManager *)::$_0,void ()(void)>::size()
{
  return 88;
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v4 = *a2;
  v5 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v5)
  {
    LODWORD(v6) = 0;
    goto LABEL_8;
  }
  v6 = v4 % v5;
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % v5));
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
LABEL_8:
    v10 = re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(a1, v6, v4, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 16) + 16 * v10;
    return v9 + 8;
  }
  v8 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v8 + 16 * v7 + 8) != v4)
  {
    v7 = *(_DWORD *)(v8 + 16 * v7) & 0x7FFFFFFF;
    if ((_DWORD)v7 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v9 = v8 + 16 * v7;
  return v9 + 8;
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
    v7 = *(unsigned int *)(a1 + 32);
    v8 = v7;
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v7);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v7);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  v12 = 16 * v7;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v12) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * v7) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v7 + 8) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8), *(_QWORD *)&v13[16] + v10 + 8, *(_QWORD *)&v13[16] + v10 + 8);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 16;
        }
        while (v11 < v9);
      }
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

unint64_t re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result > 9)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

BOOL re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                         + 4
                         * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                          % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v5 != 0x7FFFFFFF)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v2 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v6 + 40 * v5 + 8), a2))
      {
        v5 = *(_DWORD *)(v6 + 40 * v5) & 0x7FFFFFFF;
        if (v5 == 0x7FFFFFFF)
          return v2 != 0x7FFFFFFF;
      }
      v2 = v5;
    }
  }
  return v2 != 0x7FFFFFFF;
}

_QWORD *re::DynamicArray<re::TextureResolution>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::TextureResolution>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TextureResolution>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::TextureResolution>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 2);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::TextureResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::AttributeResolution>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0xAuLL))
        {
          v2 = 10 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 10 * a2, 2);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 10 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 10, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::AttributeResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

unint64_t re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result > 4)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *,false>(unsigned int *a1, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  _BOOL4 v26;
  unsigned int v27;
  BOOL v28;
  unint64_t v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  BOOL v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  BOOL v38;
  unsigned int *v39;
  unsigned int v40;
  _BOOL4 v41;
  _BOOL4 v42;
  unsigned int *v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  unsigned int v50;
  BOOL v51;
  unsigned int *v52;
  unsigned int v53;
  _BOOL4 v54;
  __int128 *v55;
  __int128 *v56;
  __int128 *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  _BOOL4 v61;
  __int128 v62;
  unsigned int v63;
  unsigned int v64;
  _BOOL4 v65;
  __int128 v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  __int128 v70;
  unsigned int v71;
  _BOOL4 v72;
  unsigned int *v73;
  BOOL v74;
  char v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  _BOOL4 v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  char *v85;
  unsigned int v86;
  BOOL v87;
  BOOL v88;
  unsigned int *v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  _BOOL4 v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  BOOL v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int v106;
  _BOOL4 v107;
  _BOOL4 v108;
  _BOOL4 v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  _BOOL4 v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int *v126;
  BOOL v127;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  _BOOL4 v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  BOOL v138;
  BOOL v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;

unsigned int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  _BOOL4 v14;

  v3 = *a2;
  v4 = a2[2];
  v5 = *a2 < *result;
  if (*a2 == *result)
    v5 = v4 < result[2];
  v6 = a3[2] < v4;
  v7 = *a3 == v3;
  v8 = *a3 < v3;
  if (v7)
    v8 = v6;
  if (v5)
  {
    if (v8)
    {
      v9 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
LABEL_17:
      *(_OWORD *)a3 = v9;
      return result;
    }
    v13 = *(_OWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v14 = *a3 < *a2;
    if (*a3 == *a2)
      v14 = a3[2] < a2[2];
    if (v14)
    {
      v9 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_17;
    }
  }
  else if (v8)
  {
    v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    v11 = *a2 < *result;
    if (*a2 == *result)
      v11 = a2[2] < result[2];
    if (v11)
    {
      v12 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int *v7;
  BOOL v8;
  _BOOL4 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  unsigned int *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  __int128 v33;
  unsigned int v34;
  unsigned int v35;
  _BOOL4 v36;
  __int128 v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  __int128 v41;
  unsigned int v42;
  _BOOL4 v43;
  __int128 v44;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 4;
      v6 = *(a2 - 4);
      v8 = v6 == *a1;
      v9 = v6 < *a1;
      if (v8)
        v9 = *(a2 - 2) < a1[2];
      if (v9)
      {
        v10 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v7;
        *(_OWORD *)v7 = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      v26 = (__int128 *)(a1 + 4);
      v27 = (__int128 *)(a1 + 8);
      v28 = (__int128 *)(a1 + 12);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a1 + 4, a1 + 8, a1 + 12);
      v30 = *(a2 - 4);
      v29 = a2 - 4;
      v31 = a1[12];
      v32 = v30 < v31;
      if (v30 == v31)
        v32 = v29[2] < a1[14];
      if (v32)
      {
        v33 = *v28;
        *v28 = *(_OWORD *)v29;
        *(_OWORD *)v29 = v33;
        v34 = a1[12];
        v35 = a1[8];
        v8 = v34 == v35;
        v36 = v34 < v35;
        if (v8)
          v36 = a1[14] < a1[10];
        if (v36)
        {
          v37 = *v27;
          *v27 = *v28;
          *v28 = v37;
          v38 = a1[8];
          v39 = a1[4];
          v8 = v38 == v39;
          v40 = v38 < v39;
          if (v8)
            v40 = a1[10] < a1[6];
          if (v40)
          {
            v41 = *v26;
            *v26 = *v27;
            *v27 = v41;
            v42 = a1[4];
            v8 = v42 == *a1;
            v43 = v42 < *a1;
            if (v8)
              v43 = a1[6] < a1[2];
            if (v43)
            {
              v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v26;
              *v26 = v44;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 8;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a1 + 4, a1 + 8);
      v12 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = v12[2];
    v17 = *v12 < *v11;
    if (*v12 == *v11)
      v17 = v16 < v11[2];
    if (v17)
    {
      v18 = v12[1];
      v19 = v12[3];
      v20 = v13;
      while (1)
      {
        v21 = (char *)a1 + v20;
        *(_OWORD *)((char *)a1 + v20 + 48) = *(_OWORD *)((char *)a1 + v20 + 32);
        if (v20 == -32)
          break;
        v22 = *((_DWORD *)v21 + 4);
        v23 = v16 < *((_DWORD *)v21 + 6);
        v8 = v15 == v22;
        v24 = v15 < v22;
        if (!v8)
          v23 = v24;
        v20 -= 16;
        if (!v23)
        {
          v25 = (unsigned int *)((char *)a1 + v20 + 48);
          goto LABEL_19;
        }
      }
      v25 = a1;
LABEL_19:
      *v25 = v15;
      v25[1] = v18;
      v25[2] = v16;
      v25[3] = v19;
      if (++v14 == 8)
        return v12 + 4 == a2;
    }
    v11 = v12;
    v13 += 16;
    v12 += 4;
    if (v12 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  __n128 result;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a2, a3);
  v9 = *a4 < *a3;
  if (*a4 == *a3)
    v9 = a4[2] < a3[2];
  if (v9)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    v10 = *a3 < *a2;
    if (*a3 == *a2)
      v10 = a3[2] < a2[2];
    if (v10)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      v11 = *a2 < *a1;
      if (*a2 == *a1)
        v11 = a2[2] < a1[2];
      if (v11)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::ConstantResolution>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ConstantResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (uint64_t *)(v8 + 48);
        v11 = 112 * v9;
        v12 = v7;
        do
        {
          *v12 = *(v10 - 6);
          v12[1] = 0;
          v12[2] = 0;
          v12[3] = 0;
          *((_DWORD *)v12 + 8) = 0;
          v13 = *v10;
          v12[5] = 0;
          v14 = v10 - 5;
          v15 = *(v10 - 4);
          v12[1] = *(v10 - 5);
          *(v10 - 5) = 0;
          v12[2] = v15;
          *(v10 - 4) = 0;
          v16 = v12[3];
          v12[3] = *(v10 - 3);
          *(v10 - 3) = v16;
          v17 = v12[5];
          v12[5] = *(v10 - 1);
          *(v10 - 1) = v17;
          ++*((_DWORD *)v10 - 4);
          ++*((_DWORD *)v12 + 8);
          v12[6] = v13;
          v12[7] = 0;
          v12[11] = 0;
          v12[8] = 0;
          v12[9] = 0;
          *((_DWORD *)v12 + 20) = 0;
          v18 = v10[2];
          v12[7] = v10[1];
          v12[8] = v18;
          v10[1] = 0;
          v10[2] = 0;
          v19 = v12[9];
          v12[9] = v10[3];
          v10[3] = v19;
          v20 = v12[11];
          v12[11] = v10[5];
          v10[5] = v20;
          ++*((_DWORD *)v10 + 8);
          ++*((_DWORD *)v12 + 20);
          v21 = v10[6];
          *((_DWORD *)v12 + 26) = *((_DWORD *)v10 + 14);
          v12[12] = v21;
          v22 = v10[1];
          if (v22)
          {
            if (v10[5])
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
            v10[5] = 0;
            v10[2] = 0;
            v10[3] = 0;
            v10[1] = 0;
            ++*((_DWORD *)v10 + 8);
          }
          if (*v14)
          {
            if (*(v10 - 1))
              (*(void (**)(uint64_t))(*(_QWORD *)*v14 + 40))(*v14);
            *(v10 - 1) = 0;
            *(v10 - 4) = 0;
            *(v10 - 3) = 0;
            *v14 = 0;
            ++*((_DWORD *)v10 - 4);
          }
          v10 += 14;
          v12 += 14;
          v11 -= 112;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

unint64_t re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result > 0xB)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

double re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)v8 = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v8 + 8) = 0;
        }
        v4 += 24;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  _BYTE v27[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v27, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v27;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)v27 = v5;
      *(_QWORD *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (unint64_t *)(v6 + 8);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *v13;
            v15 = 0xBF58476D1CE4E5B9 * (*v13 ^ (*v13 >> 30));
            v16 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
            v17 = *(unsigned int *)(a1 + 24);
            v18 = v16 % v17;
            v19 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v19 == 0x7FFFFFFF)
            {
              v19 = *(unsigned int *)(a1 + 32);
              v20 = v19;
              if ((_DWORD)v19 == (_DWORD)v17)
              {
                re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, (2 * v11));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
                v14 = *v13;
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 24 * v19);
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 24 * v19);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            v23 = 24 * v19;
            *(_DWORD *)(v21 + v23) = v22 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v23) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v19) & 0x80000000 | *(_DWORD *)(v12 + 4 * v18);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v19 + 8) = v14;
            v24 = *(_QWORD *)(a1 + 16) + 24 * v19;
            v25 = *((_DWORD *)v13 + 2);
            *(_WORD *)(v24 + 20) = *((_WORD *)v13 + 6);
            *(_DWORD *)(v24 + 16) = v25;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v18) = v19;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2)
      v26 = a2;
    else
      v26 = 3;
  }
}

_QWORD *re::DynamicArray<re::TextureBlockResolution>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 6uLL))
        {
          v2 = 6 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 6 * a2, 2);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 6 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 6, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::TextureBlockResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void **re::DynamicArray<re::TextureResolution>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::TextureResolution>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 8 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 8 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 8 * (_QWORD)v5), 8 * v4 - 8 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 8 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

uint64_t re::DynamicArray<re::ConstantResolution>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ConstantResolution>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ConstantResolution *,re::ConstantResolution *,re::ConstantResolution *>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 112 * a1[2], a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = *(_QWORD *)(a2 + 32);
      v11 = v10 + 112 * v4;
      v12 = a1[4];
      v13 = 112 * v9;
      do
      {
        v14 = v10 + v13;
        v15 = v12 + v13;
        *(_QWORD *)(v12 + v13) = *(_QWORD *)(v10 + v13);
        re::DynamicArray<re::GeomCell4>::DynamicArray(v12 + v13 + 8, (uint64_t *)(v10 + v13 + 8));
        *(_QWORD *)(v15 + 48) = *(_QWORD *)(v10 + v13 + 48);
        result = re::DynamicArray<re::GeomCell4>::DynamicArray(v12 + v13 + 56, (uint64_t *)(v10 + v13 + 56));
        v16 = *(_QWORD *)(v10 + v13 + 96);
        *(_DWORD *)(v15 + 104) = *(_DWORD *)(v10 + v13 + 104);
        *(_QWORD *)(v15 + 96) = v16;
        v10 += 112;
        v12 += 112;
      }
      while (v14 + 112 != v11);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ConstantResolution *,re::ConstantResolution *,re::ConstantResolution *>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 112 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = -112 * v4 + 112 * v6;
      v8 = (_QWORD *)(112 * v4 + a1[4] + 56);
      do
      {
        if (*v8)
        {
          if (v8[4])
            (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 40))(*v8);
          v8[4] = 0;
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          ++*((_DWORD *)v8 + 6);
        }
        result = *(v8 - 6);
        if (result)
        {
          if (*(v8 - 2))
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
          *(v8 - 2) = 0;
          *(v8 - 5) = 0;
          *(v8 - 4) = 0;
          *(v8 - 6) = 0;
          ++*((_DWORD *)v8 - 6);
        }
        v8 += 14;
        v7 -= 112;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ConstantResolution *,re::ConstantResolution *,re::ConstantResolution *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result != a2)
  {
    v4 = a3 + 56;
    v5 = result + 56;
    do
    {
      *(_QWORD *)(v4 - 56) = *(_QWORD *)(v5 - 56);
      re::DynamicArray<re::GeomCell4>::operator=(v4 - 48, (uint64_t *)(v5 - 48));
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v5 - 8);
      result = re::DynamicArray<re::GeomCell4>::operator=(v4, (uint64_t *)v5);
      v6 = *(_QWORD *)(v5 + 40);
      *(_DWORD *)(v4 + 48) = *(_DWORD *)(v5 + 48);
      *(_QWORD *)(v4 + 40) = v6;
      v4 += 112;
      v7 = v5 + 56;
      v5 += 112;
    }
    while (v7 != a2);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ArgumentBufferResolution>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ArgumentBufferResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_26;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_26:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 144 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = (_QWORD *)(v8 + v10);
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *v13 = 0;
          v13[1] = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          v13[2] = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          v13[4] = v16;
          *((_DWORD *)v13 + 6) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v12[9] = 0;
          v12[6] = 0;
          v12[7] = 0;
          v12[5] = 0;
          *((_DWORD *)v12 + 16) = 0;
          v17 = (_QWORD *)(v8 + v10 + 40);
          v18 = *(_QWORD *)(v8 + v10 + 48);
          v12[5] = *v17;
          *v17 = 0;
          v12[6] = v18;
          v13[6] = 0;
          v19 = v7[v10 / 8 + 7];
          v12[7] = *(_QWORD *)(v8 + v10 + 56);
          v13[7] = v19;
          v20 = v7[v10 / 8 + 9];
          v12[9] = *(_QWORD *)(v8 + v10 + 72);
          v13[9] = v20;
          *((_DWORD *)v13 + 16) = *(_DWORD *)(v8 + v10 + 64) + 1;
          *((_DWORD *)v12 + 16) = LODWORD(v7[v10 / 8 + 8]) + 1;
          v12[14] = 0;
          v12[11] = 0;
          v12[12] = 0;
          v12[10] = 0;
          *((_DWORD *)v12 + 26) = 0;
          v21 = *(_QWORD *)(v8 + v10 + 88);
          v12[10] = *(_QWORD *)(v8 + v10 + 80);
          *(_QWORD *)(v8 + v10 + 80) = 0;
          v12[11] = v21;
          v13[11] = 0;
          v22 = v7[v10 / 8 + 12];
          v12[12] = *(_QWORD *)(v8 + v10 + 96);
          v13[12] = v22;
          v23 = v7[v10 / 8 + 14];
          v12[14] = *(_QWORD *)(v8 + v10 + 112);
          v13[14] = v23;
          *((_DWORD *)v13 + 26) = *(_DWORD *)(v8 + v10 + 104) + 1;
          *((_DWORD *)v12 + 26) = LODWORD(v7[v10 / 8 + 13]) + 1;
          v12[15] = *(_QWORD *)(v8 + v10 + 120);
          v13[15] = 0;
          v24 = *(_QWORD *)(v8 + v10 + 128);
          *((_WORD *)v12 + 68) = *(_WORD *)(v8 + v10 + 136);
          v12[16] = v24;
          v25 = *(void **)(v8 + v10 + 120);
          if (v25)
          {

            v13[15] = 0;
          }
          re::DynamicArray<re::ConstantResolution>::deinit(v8 + v10 + 80);
          if (*v17)
          {
            if (v13[9])
              (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 40))(*v17);
            v13[9] = 0;
            *(_QWORD *)(v8 + v10 + 48) = 0;
            *(_QWORD *)(v8 + v10 + 56) = 0;
            *v17 = 0;
            ++*((_DWORD *)v13 + 16);
          }
          if (*v13)
          {
            if (v13[4])
              (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 40))(*v13);
            v13[4] = 0;
            v13[1] = 0;
            v13[2] = 0;
            *v13 = 0;
            ++*((_DWORD *)v13 + 6);
          }
          v10 += 144;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  _BYTE v28[44];

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v8 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = (_QWORD *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0)
                re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *v22 % (unint64_t)*(unsigned int *)(a1 + 24), *v22, v22, v22 + 1);
              ++v21;
              v22 += 3;
            }
            while (v21 < v20);
          }
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 24 * v8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 24 * v8;
  *(_DWORD *)(v23 + v26) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t *re::allocInfo_MeshPartFlags(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411AB18);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB18))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411AF48, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411AF58 = 0;
    qword_25411AF68 = 0;
    qword_25411AF70 = 0xFFFFFFFFLL;
    qword_25411AF48 = (uint64_t)&off_24ED7DAA8;
    qword_25411AF78 = (uint64_t)"MeshPartFlags";
    dword_25411AF80 = 0;
    xmmword_25411AF88 = 0u;
    xmmword_25411AF98 = 0u;
    xmmword_25411AFA8 = 0u;
    qword_25411AFB8 = 0;
    __cxa_guard_release(&qword_25411AB18);
  }
  return &qword_25411AF48;
}

void re::initInfo_MeshPartFlags(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0xDD4C8A65E2975D8ELL;
  v17[1] = "MeshPartFlags";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_25411AB20);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411AB20);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "doubleSided";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411ABF8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::Optional<re::WindingOrder>>::get((uint64_t)v10, v11);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "windingOrder";
      *(_QWORD *)(v12 + 16) = &qword_25411AC50;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411AC00 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::Optional<re::OccupancyBehavior>>::get((uint64_t)v13, v14);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "occupancyBehavior";
      *(_QWORD *)(v15 + 16) = &qword_25411AC90;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x400000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_25411AC08 = v15;
      __cxa_guard_release(&qword_25411AB20);
    }
  }
  *((_QWORD *)this + 2) = 0x600000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25411ABF8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshPartFlags>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshPartFlags>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshPartFlags>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshPartFlags>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

void re::IntrospectionInfo<re::Optional<re::WindingOrder>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unint64_t j;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  re::IntrospectionRegistry *v28;
  const re::IntrospectionBase *v29;
  const char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  StringID v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[60];

  v2 = atomic_load((unsigned __int8 *)&qword_25411AB88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB88))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_25411AC50);
    qword_25411AC50 = (uint64_t)&off_24ED79DA8;
    __cxa_guard_release(&qword_25411AB88);
  }
  if ((byte_25411AADC & 1) == 0)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25411AAE8);
    if ((v3 & 1) == 0)
    {
      v34 = (re *)__cxa_guard_acquire(&qword_25411AAE8);
      if ((_DWORD)v34)
      {
        v35 = re::introspectionAllocator(v34);
        v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
        *(_DWORD *)v36 = 1;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = "CW";
        qword_25411ABB0 = (uint64_t)v36;
        v37 = re::introspectionAllocator(v36);
        v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
        *(_DWORD *)v38 = 1;
        *(_QWORD *)(v38 + 8) = 1;
        *(_QWORD *)(v38 + 16) = "CCW";
        qword_25411ABB8 = v38;
        __cxa_guard_release(&qword_25411AAE8);
      }
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25411AAF0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411AAF0))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411AD90, "WindingOrder", 1, 1, 1, 1);
      qword_25411AD90 = (uint64_t)&off_24ED7D9E8;
      qword_25411ADD0 = (uint64_t)&re::introspect_WindingOrder(BOOL)::enumTable;
      dword_25411ADA0 = 9;
      __cxa_guard_release(&qword_25411AAF0);
    }
    if ((_MergedGlobals_401 & 1) == 0)
    {
      _MergedGlobals_401 = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411AD90, a2);
      *(_QWORD *)&v41 = 0x3FD39B1D38223168;
      *((_QWORD *)&v41 + 1) = "WindingOrder";
      v44 = 0x31CD534126;
      v45[0] = "uint8_t";
      v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v44);
      if (!v5)
      {
        re::StringID::destroyString((re::StringID *)&v44);
        re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "WindingOrder");
        _os_crash();
        __break(1u);
        return;
      }
      v6 = *v5;
      re::StringID::destroyString((re::StringID *)&v44);
      v7 = (unsigned int *)qword_25411ADD0;
      *((_QWORD *)&v43 + 1) = v6;
      re::TypeBuilder::beginEnumType((uint64_t)&v44, (uint64_t *)&v41, 1, 1, (uint64_t)&v43);
      v9 = *v7;
      if ((_DWORD)v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * i);
          if (*(_DWORD *)v11 == 1)
          {
            v12 = *(char **)(v11 + 16);
            if (v12)
            {
              v13 = *v12;
              if (*v12)
              {
                v14 = v12[1];
                if (v14)
                {
                  v15 = (unsigned __int8 *)(v12 + 2);
                  do
                  {
                    v13 = 31 * v13 + v14;
                    v16 = *v15++;
                    v14 = v16;
                  }
                  while (v16);
                }
              }
            }
            else
            {
              v13 = 0;
            }
            v17 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)&v42.var0 = 2 * v13;
            v42.var1 = v12;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v44, v17, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            v9 = *v7;
          }
        }
        if (v9)
        {
          for (j = 0; j < v9; ++j)
          {
            v19 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * j);
            if (*(_DWORD *)v19 == 2)
            {
              v20 = *(char **)(v19 + 16);
              if (v20)
              {
                v21 = *v20;
                if (*v20)
                {
                  v22 = v20[1];
                  if (v22)
                  {
                    v23 = (unsigned __int8 *)(v20 + 2);
                    do
                    {
                      v21 = 31 * v21 + v22;
                      v24 = *v23++;
                      v22 = v24;
                    }
                    while (v24);
                  }
                }
              }
              else
              {
                v21 = 0;
              }
              v25 = *(_QWORD *)(v19 + 8);
              *(_QWORD *)&v42.var0 = 2 * v21;
              v42.var1 = v20;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v44, v25, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              v9 = *v7;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v44, v26);
      xmmword_25411ADB0 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v41);
    }
    if ((byte_25411AADC & 1) == 0)
    {
      byte_25411AADC = 1;
      v27 = dword_25411ADA8;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411AC50, 0);
      qword_25411AC60 = 0x20000000DLL;
      dword_25411AC68 = v27;
      word_25411AC6C = 0;
      *(_QWORD *)&xmmword_25411AC70 = 0;
      *((_QWORD *)&xmmword_25411AC70 + 1) = 0xFFFFFFFFLL;
      qword_25411AC80 = (uint64_t)&qword_25411AD90;
      unk_25411AC88 = 0;
      qword_25411AC50 = (uint64_t)&off_24ED79DA8;
      re::IntrospectionRegistry::add(v28, v29);
      re::getPrettyTypeName((re *)&qword_25411AC50, (const re::IntrospectionBase *)&v44);
      if ((v45[0] & 1) != 0)
        v30 = (const char *)v45[1];
      else
        v30 = (char *)v45 + 1;
      if (v44 && (v45[0] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v44 + 40))();
      v41 = xmmword_25411ADB0;
      v31 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v42);
      if (v31)
      {
        v32 = *v31;
        *((_QWORD *)&v40 + 1) = v32;
      }
      else
      {
        v43 = v41;
        re::TypeBuilder::beginOptionalType((uint64_t)&v44, (uint64_t *)&v42, 2uLL, 1uLL, &v43);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v44, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::WindingOrder>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::WindingOrder>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v44, v33);
      }
      xmmword_25411AC70 = v40;
      re::StringID::destroyString((re::StringID *)&v42);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::OccupancyBehavior>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unint64_t j;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  re::IntrospectionRegistry *v28;
  const re::IntrospectionBase *v29;
  const char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  StringID v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[60];

  v2 = atomic_load((unsigned __int8 *)&qword_25411AB90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB90))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_25411AC90);
    qword_25411AC90 = (uint64_t)&off_24ED79E28;
    __cxa_guard_release(&qword_25411AB90);
  }
  if ((byte_25411AADD & 1) == 0)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25411AB78);
    if ((v3 & 1) == 0)
    {
      v34 = (re *)__cxa_guard_acquire(&qword_25411AB78);
      if ((_DWORD)v34)
      {
        v35 = re::introspectionAllocator(v34);
        v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
        *(_DWORD *)v36 = 1;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = "Default";
        qword_25411AC10 = (uint64_t)v36;
        v37 = re::introspectionAllocator(v36);
        v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
        *(_DWORD *)v38 = 1;
        *((_QWORD *)v38 + 1) = 2;
        *((_QWORD *)v38 + 2) = "OptIn";
        qword_25411AC18 = (uint64_t)v38;
        v39 = re::introspectionAllocator(v38);
        v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
        *(_DWORD *)v40 = 1;
        *(_QWORD *)(v40 + 8) = 1;
        *(_QWORD *)(v40 + 16) = "OptOut";
        qword_25411AC20 = v40;
        __cxa_guard_release(&qword_25411AB78);
      }
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25411AB80);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB80))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411AEB0, "OccupancyBehavior", 1, 1, 1, 1);
      qword_25411AEB0 = (uint64_t)&off_24ED7D9E8;
      qword_25411AEF0 = (uint64_t)&re::introspect_OccupancyBehavior(BOOL)::enumTable;
      dword_25411AEC0 = 9;
      __cxa_guard_release(&qword_25411AB80);
    }
    if ((byte_25411AADB & 1) == 0)
    {
      byte_25411AADB = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411AEB0, a2);
      *(_QWORD *)&v43 = 0x8C097A668536533ELL;
      *((_QWORD *)&v43 + 1) = "OccupancyBehavior";
      v46 = 0x31CD534126;
      v47[0] = "uint8_t";
      v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v46);
      if (!v5)
      {
        re::StringID::destroyString((re::StringID *)&v46);
        re::internal::assertLog((re::internal *)5, v41, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "OccupancyBehavior");
        _os_crash();
        __break(1u);
        return;
      }
      v6 = *v5;
      re::StringID::destroyString((re::StringID *)&v46);
      v7 = (unsigned int *)qword_25411AEF0;
      *((_QWORD *)&v45 + 1) = v6;
      re::TypeBuilder::beginEnumType((uint64_t)&v46, (uint64_t *)&v43, 1, 1, (uint64_t)&v45);
      v9 = *v7;
      if ((_DWORD)v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * i);
          if (*(_DWORD *)v11 == 1)
          {
            v12 = *(char **)(v11 + 16);
            if (v12)
            {
              v13 = *v12;
              if (*v12)
              {
                v14 = v12[1];
                if (v14)
                {
                  v15 = (unsigned __int8 *)(v12 + 2);
                  do
                  {
                    v13 = 31 * v13 + v14;
                    v16 = *v15++;
                    v14 = v16;
                  }
                  while (v16);
                }
              }
            }
            else
            {
              v13 = 0;
            }
            v17 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)&v44.var0 = 2 * v13;
            v44.var1 = v12;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v46, v17, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            v9 = *v7;
          }
        }
        if (v9)
        {
          for (j = 0; j < v9; ++j)
          {
            v19 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * j);
            if (*(_DWORD *)v19 == 2)
            {
              v20 = *(char **)(v19 + 16);
              if (v20)
              {
                v21 = *v20;
                if (*v20)
                {
                  v22 = v20[1];
                  if (v22)
                  {
                    v23 = (unsigned __int8 *)(v20 + 2);
                    do
                    {
                      v21 = 31 * v21 + v22;
                      v24 = *v23++;
                      v22 = v24;
                    }
                    while (v24);
                  }
                }
              }
              else
              {
                v21 = 0;
              }
              v25 = *(_QWORD *)(v19 + 8);
              *(_QWORD *)&v44.var0 = 2 * v21;
              v44.var1 = v20;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v46, v25, &v44);
              re::StringID::destroyString((re::StringID *)&v44);
              v9 = *v7;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v26);
      xmmword_25411AED0 = (__int128)v44;
      re::StringID::destroyString((re::StringID *)&v43);
    }
    if ((byte_25411AADD & 1) == 0)
    {
      byte_25411AADD = 1;
      v27 = dword_25411AEC8;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411AC90, 0);
      qword_25411ACA0 = 0x20000000DLL;
      dword_25411ACA8 = v27;
      word_25411ACAC = 0;
      *(_QWORD *)&xmmword_25411ACB0 = 0;
      *((_QWORD *)&xmmword_25411ACB0 + 1) = 0xFFFFFFFFLL;
      qword_25411ACC0 = (uint64_t)&qword_25411AEB0;
      unk_25411ACC8 = 0;
      qword_25411AC90 = (uint64_t)&off_24ED79E28;
      re::IntrospectionRegistry::add(v28, v29);
      re::getPrettyTypeName((re *)&qword_25411AC90, (const re::IntrospectionBase *)&v46);
      if ((v47[0] & 1) != 0)
        v30 = (const char *)v47[1];
      else
        v30 = (char *)v47 + 1;
      if (v46 && (v47[0] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v46 + 40))();
      v43 = xmmword_25411AED0;
      v31 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v44);
      if (v31)
      {
        v32 = *v31;
        *((_QWORD *)&v42 + 1) = v32;
      }
      else
      {
        v45 = v43;
        re::TypeBuilder::beginOptionalType((uint64_t)&v46, (uint64_t *)&v44, 2uLL, 1uLL, &v45);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v46, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::OccupancyBehavior>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::OccupancyBehavior>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v33);
      }
      xmmword_25411ACB0 = v42;
      re::StringID::destroyString((re::StringID *)&v44);
    }
  }
}

void re::internal::defaultConstruct<re::MeshPartFlags>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  a3[2] = 0;
  a3[4] = 0;
}

_BYTE *re::internal::defaultConstructV2<re::MeshPartFlags>(_BYTE *result)
{
  *result = 0;
  result[2] = 0;
  result[4] = 0;
  return result;
}

uint64_t re::introspect_MeshPartFlags(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshPartFlags", (uint64_t (*)(re::internal *))re::allocInfo_MeshPartFlags, (re::IntrospectionBase *(*)(void))re::initInfo_MeshPartFlags, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshPartFlags>, this);
}

uint64_t *re::allocInfo_OverrideMeshPartFlags(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411AB28);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB28))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411AFC0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411AFD0 = 0;
    qword_25411AFE0 = 0;
    qword_25411AFE8 = 0xFFFFFFFFLL;
    qword_25411AFC0 = (uint64_t)&off_24ED7DAA8;
    qword_25411AFF0 = (uint64_t)"OverrideMeshPartFlags";
    dword_25411AFF8 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25411B030 = 0;
    __cxa_guard_release(&qword_25411AB28);
  }
  return &qword_25411AFC0;
}

void re::initInfo_OverrideMeshPartFlags(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0x12E7D947D9ECDCB6;
  v16[1] = "OverrideMeshPartFlags";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_25411AB30);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411AB30);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::MeshPartFlags>;
      if (!re::internal::introspectionInfoStorage<re::MeshPartFlags>)
      {
        v8 = re::allocInfo_MeshPartFlags((re *)v6);
        re::internal::introspectionInfoStorage<re::MeshPartFlags> = (uint64_t)v8;
        re::initInfo_MeshPartFlags((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "MeshPartFlags";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_25411ABD0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "overrideWindingOrderToReverse";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x600000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_25411ABD8 = v14;
      __cxa_guard_release(&qword_25411AB30);
    }
  }
  *((_QWORD *)this + 2) = 0x700000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411ABD0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::OverrideMeshPartFlags>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::OverrideMeshPartFlags>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::OverrideMeshPartFlags>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::OverrideMeshPartFlags>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

void re::internal::defaultConstruct<re::OverrideMeshPartFlags>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  a3[2] = 0;
  a3[4] = 0;
  a3[6] = 0;
}

_BYTE *re::internal::defaultConstructV2<re::OverrideMeshPartFlags>(_BYTE *result)
{
  *result = 0;
  result[2] = 0;
  result[4] = 0;
  result[6] = 0;
  return result;
}

uint64_t *re::allocInfo_MeshRuntimeFlags(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411AB40);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB40))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411B038, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411B048 = 0;
    qword_25411B058 = 0;
    qword_25411B060 = 0xFFFFFFFFLL;
    qword_25411B038 = (uint64_t)&off_24ED7DAA8;
    qword_25411B068 = (uint64_t)"MeshRuntimeFlags";
    dword_25411B070 = 0;
    xmmword_25411B078 = 0u;
    xmmword_25411B088 = 0u;
    xmmword_25411B098 = 0u;
    qword_25411B0A8 = 0;
    __cxa_guard_release(&qword_25411AB40);
  }
  return &qword_25411B038;
}

void re::initInfo_MeshRuntimeFlags(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0xCFFA554448271078;
  v26[1] = "MeshRuntimeFlags";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_25411AB48);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411AB48);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "enableRendering";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411AC28 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "enableCulling";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x200000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411AC30 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "castsShadows";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x400000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411AC38 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "enablePortalCrossing";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x600000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25411AC40 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<short>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "techniqueQualityLevelBias";
      *(_QWORD *)(v24 + 16) = &qword_25411ACD0;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25411AC48 = v24;
      __cxa_guard_release(&qword_25411AB48);
    }
  }
  *((_QWORD *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 2;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_25411AC28;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshRuntimeFlags>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshRuntimeFlags>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshRuntimeFlags>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshRuntimeFlags>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

void re::IntrospectionInfo<re::Optional<short>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_25411AB98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB98))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_25411ACD0);
    qword_25411ACD0 = (uint64_t)&off_24ED79EA8;
    __cxa_guard_release(&qword_25411AB98);
  }
  if ((byte_25411AADE & 1) == 0)
  {
    v3 = re::introspect_short((re *)1, a2);
    if ((byte_25411AADE & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_25411AADE = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411ACD0, 0);
      qword_25411ACE0 = 0x40000000DLL;
      dword_25411ACE8 = v5;
      word_25411ACEC = 0;
      *(_QWORD *)&xmmword_25411ACF0 = 0;
      *((_QWORD *)&xmmword_25411ACF0 + 1) = 0xFFFFFFFFLL;
      qword_25411AD00 = v4;
      qword_25411AD08 = 0;
      qword_25411ACD0 = (uint64_t)&off_24ED79EA8;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_25411ACD0, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginOptionalType((uint64_t)&v16, v14, 4uLL, 2uLL, &v15);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v16, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_25411ACF0 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

void re::internal::defaultConstruct<re::MeshRuntimeFlags>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  a3[2] = 0;
  a3[4] = 0;
  a3[6] = 0;
  a3[8] = 0;
}

_BYTE *re::internal::defaultConstructV2<re::MeshRuntimeFlags>(_BYTE *result)
{
  *result = 0;
  result[2] = 0;
  result[4] = 0;
  result[6] = 0;
  result[8] = 0;
  return result;
}

uint64_t *re::allocInfo_MaterialRenderFlags(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411AB58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB58))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411B0B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411B0C0 = 0;
    qword_25411B0D0 = 0;
    qword_25411B0D8 = 0xFFFFFFFFLL;
    qword_25411B0B0 = (uint64_t)&off_24ED7DAA8;
    qword_25411B0E0 = (uint64_t)"MaterialRenderFlags";
    dword_25411B0E8 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25411B120 = 0;
    __cxa_guard_release(&qword_25411AB58);
  }
  return &qword_25411B0B0;
}

void re::initInfo_MaterialRenderFlags(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  _QWORD v41[2];
  __int128 v42;

  v41[0] = 0xB194D3BA54A4CD94;
  v41[1] = "MaterialRenderFlags";
  re::StringID::destroyString((re::StringID *)v41);
  *((_OWORD *)this + 2) = v42;
  v4 = atomic_load((unsigned __int8 *)&qword_25411AB60);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411AB60);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "doubleSided";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411AE68 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::Optional<re::CullingMode>>::get((uint64_t)v10, v11);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "cullMode";
      *(_QWORD *)(v12 + 16) = &qword_25411AD10;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411AE70 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "visibleCamera0";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x600000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411AE78 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "visibleCamera1";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411AE80 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<re::TriangleFillModeInternal>>::get((uint64_t)v21, v22);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "triangleFillMode";
      *(_QWORD *)(v23 + 16) = &qword_25411AD50;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x400000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_25411AE88 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "writesDepth";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0xA00000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_25411AE90 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "readsDepth";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0xC00000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_25411AE98 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      v34 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v33);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "needsPassthroughBlur";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0xE00000008;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_25411AEA0 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "needsVCABlur";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x1000000009;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_25411AEA8 = v39;
      __cxa_guard_release(&qword_25411AB60);
    }
  }
  *((_QWORD *)this + 2) = 0x1200000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_25411AE68;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MaterialRenderFlags>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MaterialRenderFlags>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MaterialRenderFlags>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MaterialRenderFlags>;
  re::IntrospectionRegistry::add(this, v3);
  v40 = v42;
}

void re::IntrospectionInfo<re::Optional<re::CullingMode>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unint64_t j;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  re::IntrospectionRegistry *v28;
  const re::IntrospectionBase *v29;
  const char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  StringID v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[60];

  v2 = atomic_load((unsigned __int8 *)&qword_25411ABA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25411ABA0))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_25411AD10);
    qword_25411AD10 = (uint64_t)&off_24ED79F28;
    __cxa_guard_release(&qword_25411ABA0);
  }
  if ((byte_25411AADF & 1) == 0)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25411AAF8);
    if ((v3 & 1) == 0)
    {
      v34 = (re *)__cxa_guard_acquire(&qword_25411AAF8);
      if ((_DWORD)v34)
      {
        v35 = re::introspectionAllocator(v34);
        v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
        *(_DWORD *)v36 = 1;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = "None";
        qword_25411ABE0 = (uint64_t)v36;
        v37 = re::introspectionAllocator(v36);
        v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
        *(_DWORD *)v38 = 1;
        *((_QWORD *)v38 + 1) = 1;
        *((_QWORD *)v38 + 2) = "Front";
        qword_25411ABE8 = (uint64_t)v38;
        v39 = re::introspectionAllocator(v38);
        v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
        *(_DWORD *)v40 = 1;
        *(_QWORD *)(v40 + 8) = 2;
        *(_QWORD *)(v40 + 16) = "Back";
        qword_25411ABF0 = v40;
        __cxa_guard_release(&qword_25411AAF8);
      }
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25411AB00);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB00))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411ADD8, "CullingMode", 1, 1, 1, 1);
      qword_25411ADD8 = (uint64_t)&off_24ED7D9E8;
      qword_25411AE18 = (uint64_t)&re::introspect_CullingMode(BOOL)::enumTable;
      dword_25411ADE8 = 9;
      __cxa_guard_release(&qword_25411AB00);
    }
    if ((byte_25411AAD9 & 1) == 0)
    {
      byte_25411AAD9 = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411ADD8, a2);
      *(_QWORD *)&v43 = 0x19CDA08E27985A6;
      *((_QWORD *)&v43 + 1) = "CullingMode";
      v46 = 0x31CD534126;
      v47[0] = "uint8_t";
      v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v46);
      if (!v5)
      {
        re::StringID::destroyString((re::StringID *)&v46);
        re::internal::assertLog((re::internal *)5, v41, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "CullingMode");
        _os_crash();
        __break(1u);
        return;
      }
      v6 = *v5;
      re::StringID::destroyString((re::StringID *)&v46);
      v7 = (unsigned int *)qword_25411AE18;
      *((_QWORD *)&v45 + 1) = v6;
      re::TypeBuilder::beginEnumType((uint64_t)&v46, (uint64_t *)&v43, 1, 1, (uint64_t)&v45);
      v9 = *v7;
      if ((_DWORD)v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * i);
          if (*(_DWORD *)v11 == 1)
          {
            v12 = *(char **)(v11 + 16);
            if (v12)
            {
              v13 = *v12;
              if (*v12)
              {
                v14 = v12[1];
                if (v14)
                {
                  v15 = (unsigned __int8 *)(v12 + 2);
                  do
                  {
                    v13 = 31 * v13 + v14;
                    v16 = *v15++;
                    v14 = v16;
                  }
                  while (v16);
                }
              }
            }
            else
            {
              v13 = 0;
            }
            v17 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)&v44.var0 = 2 * v13;
            v44.var1 = v12;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v46, v17, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            v9 = *v7;
          }
        }
        if (v9)
        {
          for (j = 0; j < v9; ++j)
          {
            v19 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * j);
            if (*(_DWORD *)v19 == 2)
            {
              v20 = *(char **)(v19 + 16);
              if (v20)
              {
                v21 = *v20;
                if (*v20)
                {
                  v22 = v20[1];
                  if (v22)
                  {
                    v23 = (unsigned __int8 *)(v20 + 2);
                    do
                    {
                      v21 = 31 * v21 + v22;
                      v24 = *v23++;
                      v22 = v24;
                    }
                    while (v24);
                  }
                }
              }
              else
              {
                v21 = 0;
              }
              v25 = *(_QWORD *)(v19 + 8);
              *(_QWORD *)&v44.var0 = 2 * v21;
              v44.var1 = v20;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v46, v25, &v44);
              re::StringID::destroyString((re::StringID *)&v44);
              v9 = *v7;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v26);
      xmmword_25411ADF8 = (__int128)v44;
      re::StringID::destroyString((re::StringID *)&v43);
    }
    if ((byte_25411AADF & 1) == 0)
    {
      byte_25411AADF = 1;
      v27 = dword_25411ADF0;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411AD10, 0);
      qword_25411AD20 = 0x20000000DLL;
      dword_25411AD28 = v27;
      word_25411AD2C = 0;
      *(_QWORD *)&xmmword_25411AD30 = 0;
      *((_QWORD *)&xmmword_25411AD30 + 1) = 0xFFFFFFFFLL;
      qword_25411AD40 = (uint64_t)&qword_25411ADD8;
      qword_25411AD48 = 0;
      qword_25411AD10 = (uint64_t)&off_24ED79F28;
      re::IntrospectionRegistry::add(v28, v29);
      re::getPrettyTypeName((re *)&qword_25411AD10, (const re::IntrospectionBase *)&v46);
      if ((v47[0] & 1) != 0)
        v30 = (const char *)v47[1];
      else
        v30 = (char *)v47 + 1;
      if (v46 && (v47[0] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v46 + 40))();
      v43 = xmmword_25411ADF8;
      v31 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v44);
      if (v31)
      {
        v32 = *v31;
        *((_QWORD *)&v42 + 1) = v32;
      }
      else
      {
        v45 = v43;
        re::TypeBuilder::beginOptionalType((uint64_t)&v46, (uint64_t *)&v44, 2uLL, 1uLL, &v45);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v46, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::CullingMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::CullingMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v33);
      }
      xmmword_25411AD30 = v42;
      re::StringID::destroyString((re::StringID *)&v44);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::TriangleFillModeInternal>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unint64_t j;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  re::IntrospectionRegistry *v28;
  const re::IntrospectionBase *v29;
  const char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  StringID v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[60];

  v2 = atomic_load((unsigned __int8 *)&qword_25411ABA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25411ABA8))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_25411AD50);
    qword_25411AD50 = (uint64_t)&off_24ED79FA8;
    __cxa_guard_release(&qword_25411ABA8);
  }
  if ((byte_25411AAE0 & 1) == 0)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25411AB08);
    if ((v3 & 1) == 0)
    {
      v34 = (re *)__cxa_guard_acquire(&qword_25411AB08);
      if ((_DWORD)v34)
      {
        v35 = re::introspectionAllocator(v34);
        v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
        *(_DWORD *)v36 = 1;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = "Fill";
        qword_25411ABC0 = (uint64_t)v36;
        v37 = re::introspectionAllocator(v36);
        v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
        *(_DWORD *)v38 = 1;
        *(_QWORD *)(v38 + 8) = 1;
        *(_QWORD *)(v38 + 16) = "Line";
        qword_25411ABC8 = v38;
        __cxa_guard_release(&qword_25411AB08);
      }
    }
    v4 = atomic_load((unsigned __int8 *)&qword_25411AB10);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB10))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411AE20, "TriangleFillModeInternal", 1, 1, 1, 1);
      qword_25411AE20 = (uint64_t)&off_24ED7D9E8;
      qword_25411AE60 = (uint64_t)&re::introspect_TriangleFillModeInternal(BOOL)::enumTable;
      dword_25411AE30 = 9;
      __cxa_guard_release(&qword_25411AB10);
    }
    if ((byte_25411AADA & 1) == 0)
    {
      byte_25411AADA = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411AE20, a2);
      *(_QWORD *)&v41 = 0xF8D525F22FD521D6;
      *((_QWORD *)&v41 + 1) = "TriangleFillModeInternal";
      v44 = 0x31CD534126;
      v45[0] = "uint8_t";
      v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v44);
      if (!v5)
      {
        re::StringID::destroyString((re::StringID *)&v44);
        re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "TriangleFillModeInternal");
        _os_crash();
        __break(1u);
        return;
      }
      v6 = *v5;
      re::StringID::destroyString((re::StringID *)&v44);
      v7 = (unsigned int *)qword_25411AE60;
      *((_QWORD *)&v43 + 1) = v6;
      re::TypeBuilder::beginEnumType((uint64_t)&v44, (uint64_t *)&v41, 1, 1, (uint64_t)&v43);
      v9 = *v7;
      if ((_DWORD)v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * i);
          if (*(_DWORD *)v11 == 1)
          {
            v12 = *(char **)(v11 + 16);
            if (v12)
            {
              v13 = *v12;
              if (*v12)
              {
                v14 = v12[1];
                if (v14)
                {
                  v15 = (unsigned __int8 *)(v12 + 2);
                  do
                  {
                    v13 = 31 * v13 + v14;
                    v16 = *v15++;
                    v14 = v16;
                  }
                  while (v16);
                }
              }
            }
            else
            {
              v13 = 0;
            }
            v17 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)&v42.var0 = 2 * v13;
            v42.var1 = v12;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v44, v17, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            v9 = *v7;
          }
        }
        if (v9)
        {
          for (j = 0; j < v9; ++j)
          {
            v19 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * j);
            if (*(_DWORD *)v19 == 2)
            {
              v20 = *(char **)(v19 + 16);
              if (v20)
              {
                v21 = *v20;
                if (*v20)
                {
                  v22 = v20[1];
                  if (v22)
                  {
                    v23 = (unsigned __int8 *)(v20 + 2);
                    do
                    {
                      v21 = 31 * v21 + v22;
                      v24 = *v23++;
                      v22 = v24;
                    }
                    while (v24);
                  }
                }
              }
              else
              {
                v21 = 0;
              }
              v25 = *(_QWORD *)(v19 + 8);
              *(_QWORD *)&v42.var0 = 2 * v21;
              v42.var1 = v20;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v44, v25, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              v9 = *v7;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v44, v26);
      xmmword_25411AE40 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v41);
    }
    if ((byte_25411AAE0 & 1) == 0)
    {
      byte_25411AAE0 = 1;
      v27 = dword_25411AE38;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411AD50, 0);
      qword_25411AD60 = 0x20000000DLL;
      dword_25411AD68 = v27;
      word_25411AD6C = 0;
      *(_QWORD *)&xmmword_25411AD70 = 0;
      *((_QWORD *)&xmmword_25411AD70 + 1) = 0xFFFFFFFFLL;
      qword_25411AD80 = (uint64_t)&qword_25411AE20;
      qword_25411AD88 = 0;
      qword_25411AD50 = (uint64_t)&off_24ED79FA8;
      re::IntrospectionRegistry::add(v28, v29);
      re::getPrettyTypeName((re *)&qword_25411AD50, (const re::IntrospectionBase *)&v44);
      if ((v45[0] & 1) != 0)
        v30 = (const char *)v45[1];
      else
        v30 = (char *)v45 + 1;
      if (v44 && (v45[0] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v44 + 40))();
      v41 = xmmword_25411AE40;
      v31 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v42);
      if (v31)
      {
        v32 = *v31;
        *((_QWORD *)&v40 + 1) = v32;
      }
      else
      {
        v43 = v41;
        re::TypeBuilder::beginOptionalType((uint64_t)&v44, (uint64_t *)&v42, 2uLL, 1uLL, &v43);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v44, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::TriangleFillModeInternal>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::TriangleFillModeInternal>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v44, v33);
      }
      xmmword_25411AD70 = v40;
      re::StringID::destroyString((re::StringID *)&v42);
    }
  }
}

void re::internal::defaultConstruct<re::MaterialRenderFlags>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  a3[2] = 0;
  a3[4] = 0;
  a3[6] = 0;
  a3[8] = 0;
  a3[10] = 0;
  a3[12] = 0;
  a3[14] = 0;
  a3[16] = 0;
}

_BYTE *re::internal::defaultConstructV2<re::MaterialRenderFlags>(_BYTE *result)
{
  *result = 0;
  result[2] = 0;
  result[4] = 0;
  result[6] = 0;
  result[8] = 0;
  result[10] = 0;
  result[12] = 0;
  result[14] = 0;
  result[16] = 0;
  return result;
}

uint64_t re::introspect_MaterialRenderFlags(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialRenderFlags", (uint64_t (*)(re::internal *))re::allocInfo_MaterialRenderFlags, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialRenderFlags, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialRenderFlags>, this);
}

uint64_t *re::allocInfo_HierarchicalMeshOverrideFlags(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411AB68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411AB68))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411B128, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411B138 = 0;
    qword_25411B148 = 0;
    qword_25411B150 = 0xFFFFFFFFLL;
    qword_25411B128 = (uint64_t)&off_24ED7DAA8;
    qword_25411B158 = (uint64_t)"HierarchicalMeshOverrideFlags";
    dword_25411B160 = 0;
    xmmword_25411B168 = 0u;
    xmmword_25411B178 = 0u;
    xmmword_25411B188 = 0u;
    qword_25411B198 = 0;
    __cxa_guard_release(&qword_25411AB68);
  }
  return &qword_25411B128;
}

void re::initInfo_HierarchicalMeshOverrideFlags(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  re::IntrospectionBase *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;

  v49[0] = 0x16E61A863D3CB10ALL;
  v49[1] = "HierarchicalMeshOverrideFlags";
  re::StringID::destroyString((re::StringID *)v49);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_25411AB70);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411AB70);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_25411AB38;
      if (!qword_25411AB38)
      {
        v8 = re::allocInfo_OverrideMeshPartFlags((re *)v6);
        qword_25411AB38 = (uint64_t)v8;
        re::initInfo_OverrideMeshPartFlags((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "meshPartFlags";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_25411AEF8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_BOOL((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "doubleSidedIsInherited";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x700000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_25411AF00 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_BOOL((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "windingOrderIsInherited";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x800000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_25411AF08 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v20 = v19;
      v21 = (uint64_t *)qword_25411AB50;
      if (!qword_25411AB50)
      {
        v21 = re::allocInfo_MeshRuntimeFlags((re *)v19);
        qword_25411AB50 = (uint64_t)v21;
        re::initInfo_MeshRuntimeFlags((re *)v21, v22);
      }
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "runtimeFlags";
      *(_QWORD *)(v23 + 16) = v21;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0xA00000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_25411AF10 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_BOOL((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "enableRenderingIsInherited";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x1600000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_25411AF18 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::introspect_BOOL((re *)1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "enableCullingIsInherited";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x1700000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_25411AF20 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      v34 = re::introspect_BOOL((re *)1, v33);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "castsShadowsIsInherited";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x1800000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_25411AF28 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::introspect_BOOL((re *)1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "enablePortalCrossingIsInherited";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x1900000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_25411AF30 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_BOOL((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "techniqueQualityLevelBiasIsInherited";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0x1A00000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_25411AF38 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_BOOL((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "occupancyBehaviorIsInherited";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0x90000000DLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_25411AF40 = v47;
      __cxa_guard_release(&qword_25411AB70);
    }
  }
  *((_QWORD *)this + 2) = 0x1C00000008;
  *((_DWORD *)this + 6) = 2;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((_QWORD *)this + 8) = &qword_25411AEF8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::HierarchicalMeshOverrideFlags>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::HierarchicalMeshOverrideFlags>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::HierarchicalMeshOverrideFlags>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::HierarchicalMeshOverrideFlags>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v50;
}

void re::internal::defaultConstruct<re::HierarchicalMeshOverrideFlags>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 2) = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 18) = 0;
  *(_DWORD *)(a3 + 6) = 0;
  *(_BYTE *)(a3 + 10) = 0;
  *(_DWORD *)(a3 + 22) = 0;
  *(_BYTE *)(a3 + 26) = 0;
}

uint64_t re::internal::defaultConstructV2<re::HierarchicalMeshOverrideFlags>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 2) = 0;
  *(_BYTE *)(result + 4) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_BYTE *)(result + 14) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  *(_DWORD *)(result + 6) = 0;
  *(_BYTE *)(result + 10) = 0;
  *(_DWORD *)(result + 22) = 0;
  *(_BYTE *)(result + 26) = 0;
  return result;
}

uint64_t re::introspect_HierarchicalMeshOverrideFlags(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HierarchicalMeshOverrideFlags", (uint64_t (*)(re::internal *))re::allocInfo_HierarchicalMeshOverrideFlags, (re::IntrospectionBase *(*)(void))re::initInfo_HierarchicalMeshOverrideFlags, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::HierarchicalMeshOverrideFlags>, this);
}

_QWORD *re::IntrospectionOptional<re::WindingOrder>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::WindingOrder>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::WindingOrder>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::WindingOrder>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::WindingOrder>::setHasValue(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3)
  {
    if (!*a2)
      *a2 = 1;
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::WindingOrder>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::WindingOrder>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 1;
  if (!v2)
    return 0;
  return result;
}

_BYTE *re::TypeBuilderHelper::registerOptional<re::WindingOrder>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(_BYTE *result, char *a2)
{
  char v2;

  if (a2)
  {
    v2 = *a2;
    if (!*result)
      *result = 1;
    result[1] = v2;
  }
  else if (*result)
  {
    *result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionOptional<re::OccupancyBehavior>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::OccupancyBehavior>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::OccupancyBehavior>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::OccupancyBehavior>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::OccupancyBehavior>::setHasValue(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3)
  {
    if (!*a2)
      *a2 = 1;
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::OccupancyBehavior>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::OccupancyBehavior>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 1;
  if (!v2)
    return 0;
  return result;
}

_BYTE *re::TypeBuilderHelper::registerOptional<re::OccupancyBehavior>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(_BYTE *result, char *a2)
{
  char v2;

  if (a2)
  {
    v2 = *a2;
    if (!*result)
      *result = 1;
    result[1] = v2;
  }
  else if (*result)
  {
    *result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionOptional<short>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<short>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<short>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<short>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<short>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_WORD *)(a2 + 2) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<short>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 2;
}

{
  return a2 + 2;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 2;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, __int16 *a2)
{
  __int16 v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_WORD *)(result + 2) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionOptional<re::CullingMode>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::CullingMode>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::CullingMode>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::CullingMode>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::CullingMode>::setHasValue(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3)
  {
    if (!*a2)
      *a2 = 1;
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::CullingMode>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::CullingMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 1;
  if (!v2)
    return 0;
  return result;
}

_BYTE *re::TypeBuilderHelper::registerOptional<re::CullingMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(_BYTE *result, char *a2)
{
  char v2;

  if (a2)
  {
    v2 = *a2;
    if (!*result)
      *result = 1;
    result[1] = v2;
  }
  else if (*result)
  {
    *result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionOptional<re::TriangleFillModeInternal>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::TriangleFillModeInternal>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::TriangleFillModeInternal>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::TriangleFillModeInternal>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::TriangleFillModeInternal>::setHasValue(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3)
  {
    if (!*a2)
      *a2 = 1;
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::TriangleFillModeInternal>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::TriangleFillModeInternal>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 1;
  if (!v2)
    return 0;
  return result;
}

_BYTE *re::TypeBuilderHelper::registerOptional<re::TriangleFillModeInternal>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(_BYTE *result, char *a2)
{
  char v2;

  if (a2)
  {
    v2 = *a2;
    if (!*result)
      *result = 1;
    result[1] = v2;
  }
  else if (*result)
  {
    *result = 0;
  }
  return result;
}

re::MeshShadowGenerationQueue *re::MeshShadowGenerationQueue::MeshShadowGenerationQueue(re::MeshShadowGenerationQueue *this)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 36) = 0x7FFFFFFFLL;
  re::MeshShadowGenerationBacklog::MeshShadowGenerationBacklog((re::MeshShadowGenerationQueue *)((char *)this + 48));
  return this;
}

uint64_t re::MeshShadowGenerationQueue::enqueue(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
    return re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a1, (uint64_t)a2);
  v8 = v3;
  v9 = v4;
  v6 = *a2;
  v7 = a2[1].n128_u64[0];
  return re::MeshShadowGenerationBacklog::pushBack((_anonymous_namespace_ *)(a1 + 48), &v6);
}

uint64_t re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  char v14;

  v4 = re::Hash<re::ShadowPair>::operator()((uint64_t)&v14, (_QWORD *)a2);
  v5 = v4;
  v6 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v6)
  {
    LODWORD(v7) = 0;
    goto LABEL_10;
  }
  v7 = v4 % v6;
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % v6));
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_10:
    v13 = re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsCopy(a1, v7, v5, a2, (__int128 *)a2);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 40 * v13 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v10 = v9 + 40 * v8;
    v12 = *(_QWORD *)(v10 + 16);
    result = v10 + 16;
    if (v12 == *(_QWORD *)a2
      && *(_QWORD *)(v9 + 40 * v8 + 24) == *(_QWORD *)(a2 + 8)
      && *(unsigned __int8 *)(v9 + 40 * v8 + 32) == *(unsigned __int8 *)(a2 + 16))
    {
      return result;
    }
    v8 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF)
      goto LABEL_10;
  }
}

void re::MeshShadowGenerationQueue::getEnqueued(re::MeshShadowGenerationQueue *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 36) = 0x7FFFFFFFLL;
  re::HashSet<re::ShadowPair,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::unionSet((uint64_t)this, (uint64_t)this + 96, a2);
}

void re::HashSet<re::ShadowPair,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::unionSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;

  re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::clear(a3);
  v6 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v9 = *v8;
      v8 += 10;
      if (v9 < 0)
        break;
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    v10 = v7;
    v11 = *(_QWORD *)(a1 + 16);
    do
    {
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a3, v11 + 40 * v10 + 16);
      v12 = *(_DWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 16);
      if (v12 <= (int)v7 + 1)
        v13 = v7 + 1;
      else
        v13 = *(_DWORD *)(a1 + 32);
      v14 = v7;
      while (1)
      {
        v10 = (v14 + 1);
        if (v13 - 1 == v14)
          break;
        ++v14;
        LODWORD(v7) = v10;
        if ((*(_DWORD *)(v11 + 40 * v10 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v7) = v13;
LABEL_17:
      ;
    }
    while (v12 != (_DWORD)v7);
  }
  v15 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v18 = *v17;
      v17 += 10;
      if (v18 < 0)
        break;
      if (v15 == ++v16)
      {
        LODWORD(v16) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if ((_DWORD)v15 != (_DWORD)v16)
  {
    v19 = v16;
    v20 = *(_QWORD *)(a2 + 16);
    do
    {
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a3, v20 + 40 * v19 + 16);
      v21 = *(_DWORD *)(a2 + 32);
      v20 = *(_QWORD *)(a2 + 16);
      if (v21 <= (int)v16 + 1)
        v22 = v16 + 1;
      else
        v22 = *(_DWORD *)(a2 + 32);
      v23 = v16;
      while (1)
      {
        v19 = (v23 + 1);
        if (v22 - 1 == v23)
          break;
        ++v23;
        LODWORD(v16) = v19;
        if ((*(_DWORD *)(v20 + 40 * v19 + 8) & 0x80000000) != 0)
          goto LABEL_34;
      }
      LODWORD(v16) = v22;
LABEL_34:
      ;
    }
    while (v21 != (_DWORD)v16);
  }
}

void re::MeshShadowGenerationQueue::dequeue(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  _BYTE v41[8];
  __n128 v42;
  uint64_t v43;
  _BYTE v44[76];
  int v45;
  _OWORD v46[2];
  int v47;
  uint64_t v48;

  *(_DWORD *)(a5 + 32) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 36) = 0x7FFFFFFFLL;
  v47 = 0;
  memset(v46, 0, sizeof(v46));
  v48 = 0x7FFFFFFFLL;
  v11 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v14 = *v13;
      v13 += 10;
      if (v14 < 0)
        break;
      if (v11 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  if ((_DWORD)v11 != (_DWORD)v12)
  {
    v15 = v12;
    do
    {
      v16 = *(_QWORD *)(a1 + 16) + 40 * v15 + 16;
      if ((re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains(a4, v16) & 1) == 0)re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a5, v16);
      if (*(_DWORD *)(a1 + 32) <= (v12 + 1))
        v17 = v12 + 1;
      else
        v17 = *(_DWORD *)(a1 + 32);
      while (1)
      {
        v15 = (v12 + 1);
        if (v17 - 1 == (_DWORD)v12)
          break;
        LODWORD(v12) = v12 + 1;
        v18 = v15;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v15 + 8) & 0x80000000) != 0)
          goto LABEL_18;
      }
      v18 = v17;
LABEL_18:
      LODWORD(v12) = v18;
    }
    while ((_DWORD)v11 != v18);
  }
  v19 = *(unsigned int *)(a5 + 32);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = (int *)(*(_QWORD *)(a5 + 16) + 8);
    while (1)
    {
      v22 = *v21;
      v21 += 10;
      if (v22 < 0)
        break;
      if (v19 == ++v20)
      {
        LODWORD(v20) = *(_DWORD *)(a5 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v20) = 0;
  }
  if ((_DWORD)v19 != (_DWORD)v20)
  {
    v23 = v20;
    v24 = *(_QWORD *)(a5 + 16);
    do
    {
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::remove(a1, v24 + 40 * v23 + 16);
      v24 = *(_QWORD *)(a5 + 16);
      if (*(_DWORD *)(a5 + 32) <= (v20 + 1))
        v25 = v20 + 1;
      else
        v25 = *(_DWORD *)(a5 + 32);
      v26 = v20;
      while (1)
      {
        v23 = (v26 + 1);
        if (v25 - 1 == v26)
          break;
        ++v26;
        LODWORD(v20) = v23;
        if ((*(_DWORD *)(v24 + 40 * v23 + 8) & 0x80000000) != 0)
          goto LABEL_35;
      }
      LODWORD(v20) = v25;
LABEL_35:
      ;
    }
    while ((_DWORD)v19 != (_DWORD)v20);
  }
  v27 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = (int *)(*(_QWORD *)(a1 + 112) + 8);
    while (1)
    {
      v30 = *v29;
      v29 += 10;
      if (v30 < 0)
        break;
      if (v27 == ++v28)
      {
        LODWORD(v28) = *(_DWORD *)(a1 + 128);
        break;
      }
    }
  }
  else
  {
    LODWORD(v28) = 0;
  }
  if ((_DWORD)v27 == (_DWORD)v28)
  {
    v31 = 0;
  }
  else
  {
    LODWORD(v31) = 0;
    v32 = v28;
    do
    {
      v31 = v31
          + (re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains(a4, *(_QWORD *)(a1 + 112) + 40 * v32 + 16) ^ 1);
      if (*(_DWORD *)(a1 + 128) <= (v28 + 1))
        v33 = v28 + 1;
      else
        v33 = *(_DWORD *)(a1 + 128);
      v34 = v28;
      while (1)
      {
        v32 = (v34 + 1);
        if (v33 - 1 == v34)
          break;
        ++v34;
        LODWORD(v28) = v32;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 112) + 40 * v32 + 8) & 0x80000000) != 0)
          goto LABEL_53;
      }
      LODWORD(v28) = v33;
LABEL_53:
      ;
    }
    while ((_DWORD)v27 != (_DWORD)v28);
  }
  re::MeshShadowGenerationBacklog::MeshShadowGenerationBacklog((re::MeshShadowGenerationBacklog *)v44);
  if (a2 <= v31 / a3 + 1)
    v36 = v31 / a3 + 1;
  else
    v36 = a2;
  while (v36 > *(unsigned int *)(a5 + 28))
  {
    if (!*(_DWORD *)(a1 + 124))
      break;
    re::MeshShadowGenerationBacklog::popFront(a1 + 48, v35, v41);
    if (v41[0])
    {
      if (re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains(a4, (uint64_t)&v42))
      {
        v39 = v42;
        v40 = v43;
        re::MeshShadowGenerationBacklog::pushBack((_anonymous_namespace_ *)v44, &v39);
      }
      else
      {
        re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a5, (uint64_t)&v42);
      }
    }
  }
  while (v45)
  {
    re::MeshShadowGenerationBacklog::popFront((uint64_t)v44, v35, v41);
    if (v41[0])
    {
      v37 = v42;
      v38 = v43;
      re::MeshShadowGenerationBacklog::pushBack((_anonymous_namespace_ *)(a1 + 48), &v37);
    }
  }
  re::MeshShadowGenerationBacklog::~MeshShadowGenerationBacklog((re::MeshShadowGenerationBacklog *)v44);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v46);
}

uint64_t re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = re::Hash<re::ShadowPair>::operator()((uint64_t)&v9, (_QWORD *)a2);
  v5 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v5)
    return 0;
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % v5));
  if ((_DWORD)v6 == 0x7FFFFFFF)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v7 + 40 * v6 + 16) != *(_QWORD *)a2
       || *(_QWORD *)(v7 + 40 * v6 + 24) != *(_QWORD *)(a2 + 8)
       || *(unsigned __int8 *)(v7 + 40 * v6 + 32) != *(unsigned __int8 *)(a2 + 16))
  {
    v6 = *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
    if (v6 == 0x7FFFFFFF)
      return 0;
  }
  return 1;
}

uint64_t re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  char v19;

  v4 = re::Hash<re::ShadowPair>::operator()((uint64_t)&v19, (_QWORD *)a2);
  v5 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v5)
    return 0;
  v6 = v4 % v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(v7 + 4 * (v4 % v5));
  if ((_DWORD)v8 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = 0x7FFFFFFFLL;
  while (*(_QWORD *)(v9 + 40 * v8 + 16) != *(_QWORD *)a2
       || *(_QWORD *)(v9 + 40 * v8 + 24) != *(_QWORD *)(a2 + 8)
       || *(unsigned __int8 *)(v9 + 40 * v8 + 32) != *(unsigned __int8 *)(a2 + 16))
  {
    v10 = v8;
    v8 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF)
      return 0;
  }
  v12 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
  if (v10 == 0x7FFFFFFF)
    *(_DWORD *)(v7 + 4 * v6) = v12;
  else
    *(_DWORD *)(v9 + 40 * v10 + 8) = *(_DWORD *)(v9 + 40 * v10 + 8) & 0x80000000 | v12;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v13 + 40 * v8;
  v17 = *(_DWORD *)(v14 + 8);
  v16 = (int *)(v14 + 8);
  v15 = v17;
  if (v17 < 0)
  {
    *v16 = v15 & 0x7FFFFFFF;
    v13 = *(_QWORD *)(a1 + 16);
    v15 = *(_DWORD *)(v13 + 40 * v8 + 8);
  }
  v18 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v13 + 40 * v8 + 8) = *(_DWORD *)(a1 + 36) | v15 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v18 + 1;
  return 1;
}

void re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_24, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 40 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 40 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 40 * v8 + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v8) = a3;
  v12 = *(_QWORD *)(a1 + 16) + 40 * v8;
  v13 = *a5;
  *(_QWORD *)(v12 + 32) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(v12 + 16) = v13;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_24, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 40 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 40;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::DeformationManager::init(re::DeformationManager *this, re::RenderManager *a2)
{
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;

  *(_QWORD *)this = a2;
  v3 = (_anonymous_namespace_ *)re::DeformationFencePool::init((re::DeformationManager *)((char *)this + 8), (re::RenderManager *)((char *)a2 + 184));
  re::DynamicArray<re::Pair<re::DeformerType,unsigned long long,true>>::setCapacity((_QWORD *)this + 177, 0);
  ++*((_DWORD *)this + 360);
  *((_DWORD *)this + 365) = 512;
  re::DataArray<re::DeformationStack>::allocBlock((unsigned int *)this + 354);
}

uint64_t re::DeformationManager::deinit(re::DeformationManager *this)
{
  uint64_t *v2;
  uint64_t i;
  uint64_t result;

  v2 = (uint64_t *)((char *)this + 1368);
  for (i = 648; i != 1368; i += 40)
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)((char *)this + i), 0);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v2);
  re::DataArray<re::DeformationStack>::deinit((uint64_t)this + 1416);
  result = re::DeformationFencePool::deinit((re::DeformationManager *)((char *)this + 8));
  *(_QWORD *)this = 0;
  return result;
}

unint64_t re::DeformationManager::addDeformationStack(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  re *v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  _OWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  int v47;
  char *v48;
  _QWORD *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _QWORD *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t i;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  _OWORD v85[42];
  _OWORD v86[6];
  int v87;
  __int128 v88;
  _OWORD v89[12];
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _DWORD v93[3];
  __int16 v94;
  int v95;
  __int16 v96;
  unint64_t v97;
  __int16 v98;
  unint64_t v99;
  uint8_t buf[48];
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= 0xA)
  {
LABEL_99:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) The maximum deformation stack (%zu) has been exceeded: %zu.", "stackDefinition.deformationStack.size() < kMaxDeformationStackCount", "addDeformationStack", 233, 10, v5);
    _os_crash();
    __break(1u);
LABEL_100:
    v92 = 0;
    v101 = 0u;
    v102 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v93[0] = 136315906;
    *(_QWORD *)&v93[1] = "operator[]";
    v94 = 1024;
    v95 = 789;
    v96 = 2048;
    v97 = v2;
    v98 = 2048;
    v99 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_101;
  }
  v2 = a2;
  v6 = a1;
  LOBYTE(v84) = 0;
  v7 = 3;
  do
  {
    v8 = &v85[v7 - 1];
    *(_DWORD *)v8 = -1;
    *(_QWORD *)((char *)v8 + 12) = 0;
    *(_QWORD *)((char *)v8 + 4) = 0;
    *((_DWORD *)v8 + 5) = 0;
    *((_BYTE *)v8 + 24) = -1;
    *((_QWORD *)v8 + 4) = -1;
    *((_QWORD *)v8 + 5) = 0;
    v7 += 4;
    *((_QWORD *)v8 + 6) = 0;
    *((_QWORD *)v8 + 7) = 0;
  }
  while (v8 + 4 != v86);
  v88 = 0u;
  v90 = 0u;
  v91 = 0u;
  memset(v89, 0, sizeof(v89));
  v83 = v5;
  if (!(_BYTE)v5)
  {
    LOBYTE(v10) = 0;
    v26 = 0;
    LOBYTE(v84) = 0;
    v34 = 1;
    goto LABEL_38;
  }
  v9 = 0;
  v10 = 0;
  v82 = a1 + 1368;
  v11 = 32;
  do
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 <= v9)
    {
      v92 = 0;
      v101 = 0u;
      v102 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v93[0] = 136315906;
      *(_QWORD *)&v93[1] = "operator[]";
      v94 = 1024;
      v95 = 797;
      v96 = 2048;
      v97 = v9;
      v98 = 2048;
      v99 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_97:
      re::internal::assertLog((re::internal *)5, v13, "assertion failure: '%s' (%s:line %i) Unknown deformation service name: %s.", "deformerIndex", "addDeformationStack", 244, *((_QWORD *)v4 - 3));
      _os_crash();
      __break(1u);
LABEL_98:
      re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
      _os_crash();
      __break(1u);
      goto LABEL_99;
    }
    v3 = *(_QWORD *)(v2 + 32);
    v4 = (char *)(v3 + v11);
    v12 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v82, (_QWORD *)(v3 + v11 - 32));
    if (!v12)
      goto LABEL_97;
    v14 = v12;
    v15 = v6;
    v16 = *(_QWORD *)(v6 + 40 * *v12 + 648);
    v17 = v10;
    v18 = v10;
    v19 = &v85[4 * (unint64_t)v10 - 1];
    (*(void (**)(uint8_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v16 + 24))(buf, v16, *(_QWORD *)(v3 + v11));
    v20 = *(_OWORD *)&buf[16];
    v19[3] = *(_OWORD *)buf;
    v19[4] = v20;
    *((_QWORD *)v19 + 10) = *(_QWORD *)&buf[32];
    v4 = (char *)v19 + 88;
    re::FixedArray<float>::operator=((uint64_t *)v19 + 11, (uint64_t *)&buf[40]);
    v22 = *(re **)&buf[40];
    if (*(_QWORD *)&buf[40] && (_QWORD)v101)
      v22 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&buf[40] + 40))();
    v23 = *((unsigned __int8 *)v19 + 72);
    if (v23 == 2)
    {
      *(_DWORD *)buf = -1;
      memset(&buf[4], 0, 20);
      *(_OWORD *)&buf[24] = xmmword_2260EC650;
      v101 = 0uLL;
      *(_QWORD *)&buf[40] = 0;
      v24 = *(_OWORD *)&buf[16];
      v19[3] = *(_OWORD *)buf;
      v19[4] = v24;
      *((_QWORD *)v19 + 10) = *(_QWORD *)&buf[32];
      re::FixedArray<float>::operator=((uint64_t *)v19 + 11, (uint64_t *)&buf[40]);
      v22 = *(re **)&buf[40];
      if (*(_QWORD *)&buf[40] && (_QWORD)v101)
        v22 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&buf[40] + 40))();
      v6 = v15;
      v10 = v17;
    }
    else
    {
      if (v23 == 255)
      {
        v35 = *re::graphicsLogObjects(v22);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          v36 = *(_QWORD *)(v3 + v11 - 24);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v36;
          _os_log_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEFAULT, "[DeformerLogging] Invalid deformation stack definition for deformer: %s", buf, 0xCu);
        }
        v37 = 0;
        v38 = 0xFFFFFFFFLL;
        goto LABEL_83;
      }
      *((_DWORD *)&v85[-1] + v18 + 1) = *v14;
      v10 = (v17 + 1);
      v6 = v15;
    }
    ++v9;
    v11 += 40;
    v2 = a2;
  }
  while (v83 != v9);
  LOBYTE(v84) = v10;
  if (!(_BYTE)v10)
  {
    LOBYTE(v10) = 0;
    v26 = 0;
    v34 = 1;
    goto LABEL_38;
  }
  v25 = 0;
  v26 = v10;
  while (2)
  {
    if (!v25)
    {
      v28 = 0;
LABEL_29:
      v22 = (re *)memset((char *)v86 + 10 * v25 + v28, 255, (9 - v28) + 1);
      goto LABEL_30;
    }
    v27 = 0;
    v28 = 0;
    v29 = *((_QWORD *)&v85[4 * v25 + 2] + 1);
    do
    {
      v30 = &v85[4 * (unint64_t)(~(_BYTE)v27 + v25) - 1];
      v32 = *((_QWORD *)v30 + 8);
      v31 = v30 + 4;
      if ((v32 & v29) != 0)
      {
        v33 = v28++;
        *((_BYTE *)v86 + 10 * v25 + v33) = ~(_BYTE)v27 + v25;
        v29 &= ~*v31;
      }
      ++v27;
    }
    while (v25 != v27);
    if (v28 <= 9u)
      goto LABEL_29;
LABEL_30:
    if (++v25 != v10)
      continue;
    break;
  }
  if (v10 >= 0xAu)
  {
    *(_QWORD *)&buf[32] = 0;
    memset(buf, 0, 28);
  }
  else
  {
    v34 = 0;
LABEL_38:
    v22 = (re *)memset((char *)v86 + 10 * v26, 255, 10 * (9 - v10) + 10);
    *(_QWORD *)&buf[32] = 0;
    memset(buf, 0, 28);
    if ((v34 & 1) != 0)
      goto LABEL_66;
  }
  v3 = 0;
  v39 = 0;
  v40 = 0;
  while (2)
  {
    v2 = (v10 + ~(_BYTE)v40);
    v41 = *(_QWORD *)&v85[4 * v2 + 4];
    if (v41 != -1)
    {
      v42 = *((_DWORD *)&v85[-1] + v2 + 1);
      if (v3 >= *(_QWORD *)&buf[8])
      {
        v43 = v3 + 1;
        if (*(_QWORD *)&buf[8] < v43)
        {
          if (*(_QWORD *)buf)
          {
            v44 = 8;
            if (*(_QWORD *)&buf[8])
              v44 = 2 * *(_QWORD *)&buf[8];
            if (v44 <= v43)
              v45 = v43;
            else
              v45 = v44;
            v22 = (re *)re::DynamicArray<re::Pair<re::DeformerType,unsigned long long,true>>::setCapacity(buf, v45);
          }
          else
          {
            v22 = (re *)re::DynamicArray<re::Pair<re::DeformerType,unsigned long long,true>>::setCapacity(buf, v43);
            ++*(_DWORD *)&buf[24];
          }
        }
        v3 = *(_QWORD *)&buf[16];
        v39 = *(char **)&buf[32];
      }
      v46 = &v39[16 * v3];
      *v46 = v42;
      v47 = v93[0];
      *((_DWORD *)v46 + 1) = *(_DWORD *)((char *)v93 + 3);
      *(_DWORD *)(v46 + 1) = v47;
      *((_QWORD *)v46 + 1) = v41;
      v3 = ++*(_QWORD *)&buf[16];
      ++*(_DWORD *)&buf[24];
    }
    v39 = *(char **)&buf[32];
    v48 = (char *)&v85[-1] + 24 * (v10 + ~(_BYTE)v40);
    if (*((_QWORD *)v48 + 99))
    {
LABEL_58:
      if (*((_QWORD *)&v88 + 3 * (v10 + ~(_BYTE)v40) + 1) != v3)
        goto LABEL_98;
      if (v3)
        v22 = (re *)memmove(*((void **)v89 + 3 * (v10 + ~(_BYTE)v40)), v39, 16 * v3);
    }
    else if (v3)
    {
      v49 = v48 + 792;
      goto LABEL_58;
    }
    if (v26 != ++v40)
      continue;
    break;
  }
  if (*(_QWORD *)buf)
  {
    v21 = *(_QWORD *)&buf[32];
    if (*(_QWORD *)&buf[32])
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    *(_QWORD *)&buf[32] = 0;
  }
LABEL_66:
  v50 = *(_DWORD *)(v6 + 1472);
  if ((v50 + 1) >> 24)
    v51 = 1;
  else
    v51 = v50 + 1;
  *(_DWORD *)(v6 + 1472) = v51;
  v52 = *(unsigned __int16 *)(v6 + 1468);
  v2 = *(unsigned __int16 *)(v6 + 1470);
  if (v52 != 0xFFFF || (_DWORD)v2 != 0xFFFF)
  {
    v3 = *(_QWORD *)(v6 + 1432);
    if (v3 > v2)
    {
      v56 = (_QWORD *)(*(_QWORD *)(v6 + 1448) + 16 * v2);
      *(_DWORD *)(v56[1] + 4 * v52) = v51;
      v55 = *v56 + 1032 * v52;
      *(_DWORD *)(v6 + 1468) = *(_DWORD *)v55;
      goto LABEL_78;
    }
LABEL_102:
    v92 = 0;
    v101 = 0u;
    v102 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v93[0] = 136315906;
    *(_QWORD *)&v93[1] = "operator[]";
    v94 = 1024;
    v95 = 789;
    v96 = 2048;
    v97 = v2;
    v98 = 2048;
    v99 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_DWORD *)(v6 + 1464) >= *(_DWORD *)(v6 + 1460))
    re::DataArray<re::DeformationStack>::allocBlock((unsigned int *)(v6 + 1416));
  v3 = *(_QWORD *)(v6 + 1432);
  v2 = (unsigned __int16)(v3 - 1);
  if (v3 <= v2)
    goto LABEL_100;
  v53 = *(unsigned int *)(v6 + 1464);
  if (v53 >= 0x10000)
  {
LABEL_101:
    re::internal::assertLog((re::internal *)5, v21, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v53);
    _os_crash();
    __break(1u);
    goto LABEL_102;
  }
  v54 = (_QWORD *)(*(_QWORD *)(v6 + 1448) + 16 * v2);
  *(_DWORD *)(v6 + 1464) = v53 + 1;
  *(_DWORD *)(v54[1] + 4 * v53) = *(_DWORD *)(v6 + 1472);
  v55 = *v54 + 1032 * v53;
  LOWORD(v2) = v3 - 1;
  LOWORD(v52) = v53;
LABEL_78:
  v57 = 0;
  ++*(_DWORD *)(v6 + 1456);
  v58 = v84;
  v59 = v85[0];
  *(_OWORD *)(v55 + 28) = *(_OWORD *)((char *)v85 + 12);
  *(_OWORD *)v55 = v58;
  *(_OWORD *)(v55 + 16) = v59;
  do
  {
    v60 = v55 + v57 * 16;
    v61 = &v85[v57 - 1];
    v62 = v85[v57 + 3];
    v63 = *(_QWORD *)&v85[v57 + 4];
    *(_OWORD *)(v60 + 48) = v85[v57 + 2];
    *(_OWORD *)(v60 + 64) = v62;
    *(_QWORD *)(v60 + 80) = v63;
    *(_QWORD *)(v60 + 88) = 0;
    *(_QWORD *)(v60 + 96) = 0;
    *(_QWORD *)(v60 + 104) = 0;
    *(_QWORD *)(v60 + 88) = *((_QWORD *)&v85[v57 + 4] + 1);
    v61[11] = 0;
    *(_QWORD *)(v60 + 96) = *(_QWORD *)&v85[v57 + 5];
    v61[12] = 0;
    v64 = *(_QWORD *)(v55 + v57 * 16 + 104);
    *(_QWORD *)(v60 + 104) = *((_QWORD *)&v85[v57 + 5] + 1);
    v61[13] = v64;
    v57 += 4;
  }
  while (v57 != 40);
  v65 = 0;
  v66 = v86[0];
  v67 = v86[2];
  *(_OWORD *)(v55 + 704) = v86[1];
  *(_OWORD *)(v55 + 720) = v67;
  *(_OWORD *)(v55 + 688) = v66;
  v68 = v86[3];
  v69 = v86[4];
  v70 = v86[5];
  *(_DWORD *)(v55 + 784) = v87;
  *(_OWORD *)(v55 + 752) = v69;
  *(_OWORD *)(v55 + 768) = v70;
  *(_OWORD *)(v55 + 736) = v68;
  do
  {
    v71 = (_QWORD *)(v55 + v65);
    v72 = (_QWORD *)((char *)&v85[-1] + v65);
    v71[101] = 0;
    *(_OWORD *)(v55 + v65 + 792) = 0uLL;
    v71[99] = *(_QWORD *)((char *)&v89[-1] + v65);
    v72[99] = 0;
    v71[100] = *(_QWORD *)((char *)&v88 + v65 + 8);
    v72[100] = 0;
    v73 = *(_QWORD *)(v55 + v65 + 808);
    v71[101] = *(_QWORD *)((char *)v89 + v65);
    v72[101] = v73;
    v65 += 24;
  }
  while (v65 != 240);
  v37 = (unint64_t)(*(_DWORD *)(v6 + 1472) & 0xFFFFFF) << 32;
  v38 = (unsigned __int16)v52 | ((unint64_t)(unsigned __int16)v2 << 16);
LABEL_83:
  for (i = 0; i != -240; i -= 24)
  {
    v75 = (_QWORD *)((char *)&v85[-1] + i);
    v76 = *(_QWORD *)((char *)&v90 + i + 8);
    if (v76)
    {
      if (v75[127])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 40))(v76, *(_QWORD *)((char *)&v91 + i + 8));
        v75[127] = 0;
        v75[128] = 0;
      }
      v75[126] = 0;
    }
  }
  v77 = 40;
  do
  {
    v78 = &v85[v77 - 1];
    v79 = *((_QWORD *)&v85[v77] + 1);
    if (v79)
    {
      if (v78[4])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 40))(v79, *((_QWORD *)&v85[v77 + 1] + 1));
        v78[4] = 0;
        v78[5] = 0;
      }
      v78[3] = 0;
    }
    v77 -= 4;
  }
  while (v77 * 16);
  return v38 | v37;
}

uint64_t re::DeformationManager::removeDeformationStack(re *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  re *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::globalAllocators(a1);
  v4 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)a1);
  v5 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)a1);
  v6 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, 24, 8);
  *(_QWORD *)v6 = a2;
  *((_QWORD *)v6 + 1) = (char *)a1 + 1416;
  *((_QWORD *)v6 + 2) = (char *)a1 + 648;
  v7 = re::globalAllocators(v6)[2];
  v9[0] = &off_24ED7A048;
  v10 = v7;
  v11 = v9;
  (*(void (**)(uint64_t, re *, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v6, v9);
  result = (uint64_t)v11;
  if (v11)
  {
    result = (*(uint64_t (**)(_QWORD *))*v11)(v11);
    if (v11 != v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return result;
}

uint64_t re::DataArray<re::DeformationStack>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 1032 * (unsigned __int16)a2;
}

uint64_t re::DeformationManager::createActiveDeformationData(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  re *active;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  re::globalAllocators(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 104, 8);
  v7 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)a1);
  active = (re *)re::ActiveDeformationData::ActiveDeformationData(v6, a2, v7);
  v9 = re::globalAllocators(active)[2];
  v12[0] = &off_24ED7A0A0;
  v13 = v9;
  v14 = v12;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(a3, v6, v12);
  if (v14)
  {
    (*(void (**)(_QWORD *))*v14)(v14);
    if (v14 != v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  }
  return v10;
}

void re::DeformationManager::addDeformations(re::RenderManager **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t i;
  _QWORD *v8;

  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = (_QWORD *)re::BucketArray<re::MeshDeformation,8ul>::operator[](a2, i);
      re::DeformationManager::addDeformation(a1, v8, a3);
    }
  }
}

void re::DeformationManager::addDeformation(re::RenderManager **a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v6 = re::RenderManager::perFrameAllocator(*a1);
  v68 = a2[3];
  v69 = v6;
  if (a2[1])
    v8 = a2[3] == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = *((_QWORD *)*a1 + 4);
    v10 = a3;
    v63 = *(_QWORD *)(a3 + 48);
    if (!a2[12])
    {
      v11 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 24, 8);
      v10 = a3;
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      a2[12] = v11;
      v3 = a2[1];
      *v11 = v69;
      v11[1] = v3;
      if (v3)
      {
        if (v3 >= 0xAAAAAAAAAAAAAABLL)
        {
LABEL_54:
          re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, v3);
          _os_crash();
          __break(1u);
LABEL_55:
          re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
        v12 = v11;
        v13 = 24 * v3;
        v14 = (_QWORD *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)v69 + 32))(v69, 24 * v3, 8);
        v12[2] = (unint64_t)v14;
        if (!v14)
          goto LABEL_55;
        v15 = v14;
        if (v3 != 1)
        {
          bzero(v14, v13 - 24);
          v15 = (_QWORD *)((char *)v15 + v13 - 24);
        }
        v10 = a3;
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
      }
    }
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v58 = (_QWORD *)(v10 + 8);
    v66 = v9 + 8;
    v67 = v9 + 72;
    v64 = (uint64_t)(a1 + 177);
    v62 = v10 + 32;
    while (1)
    {
      v20 = a2[3];
      if (v20 <= v19)
        break;
      v21 = a2[1];
      v22 = (unsigned int *)(a2[2] + v16);
      v3 = *v22;
      if (v21 <= v3)
        goto LABEL_43;
      v71 = *((unsigned __int16 *)v22 + 2);
      v23 = re::DataArray<re::MeshInstance>::get(v67, *(_QWORD *)(*a2 + 8 * v3));
      v24 = (_QWORD *)re::DataArray<re::MeshModel>::get(v66, *(_QWORD *)(v23 + 16));
      v25 = a2[12];
      if (*(_QWORD *)(v25 + 8) <= v3)
        goto LABEL_44;
      v70 = v23;
      v26 = v18;
      v27 = v17;
      v28 = *(_QWORD *)(v25 + 16);
      v29 = (unint64_t *)(v28 + 24 * v3);
      if (!*v29)
      {
        v17 = v24[7];
        *v29 = v69;
        *(_QWORD *)(v28 + 24 * v3 + 8) = v17;
        if (v17)
        {
          if (v17 >> 61)
            goto LABEL_47;
          v24 = (_QWORD *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)v69 + 32))(v69, 8 * v17, 8);
          *(_QWORD *)(v28 + 24 * v3 + 16) = v24;
          if (!v24)
            goto LABEL_48;
          v30 = v24;
          if (v17 != 1)
          {
            v31 = 8 * v17 - 8;
            bzero(v24, v31);
            v30 = (_QWORD *)((char *)v30 + v31);
          }
          *v30 = 0;
        }
      }
      if (*(_QWORD *)(v28 + 24 * v3 + 8) <= v71)
        goto LABEL_45;
      v32 = *(_QWORD *)(v28 + 24 * v3 + 16);
      v17 = v27;
      v33 = v26;
      if (!*(_QWORD *)(v32 + 8 * v71))
      {
        re::globalAllocators((re *)v24);
        v3 = v69;
        v34 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v69 + 32))(v69, 336, 8);
        *(_OWORD *)v34 = 0u;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(_OWORD *)(v34 + 64) = 0u;
        *(_OWORD *)(v34 + 80) = 0u;
        *(_OWORD *)(v34 + 96) = 0u;
        *(_OWORD *)(v34 + 112) = 0u;
        *(_OWORD *)(v34 + 128) = 0u;
        *(_OWORD *)(v34 + 144) = 0u;
        *(_OWORD *)(v34 + 160) = 0u;
        *(_OWORD *)(v34 + 176) = 0u;
        *(_OWORD *)(v34 + 192) = 0u;
        *(_OWORD *)(v34 + 208) = 0u;
        *(_OWORD *)(v34 + 224) = 0u;
        *(_OWORD *)(v34 + 240) = 0u;
        *(_OWORD *)(v34 + 256) = 0u;
        *(_OWORD *)(v34 + 272) = 0u;
        *(_OWORD *)(v34 + 288) = 0u;
        *(_OWORD *)(v34 + 304) = 0u;
        *(_OWORD *)(v34 + 320) = 0u;
        *(_OWORD *)(v34 + 48) = 0u;
        *(_DWORD *)(v34 + 208) = 1;
        *(_QWORD *)(v34 + 216) = 0;
        *(_QWORD *)(v34 + 224) = 0;
        *(_QWORD *)(v34 + 232) = 0;
        *(_DWORD *)(v34 + 240) = 0;
        *(_QWORD *)(v34 + 248) = 0;
        *(_QWORD *)(v34 + 256) = 0;
        *(_QWORD *)(v34 + 264) = 0;
        *(_DWORD *)(v34 + 272) = 0;
        *(_OWORD *)(v34 + 280) = 0u;
        *(_OWORD *)(v34 + 296) = 0u;
        *(_DWORD *)(v34 + 312) = 0;
        v35 = re::globalAllocators((re *)v34)[2];
        *(_QWORD *)&v72 = &off_24ED7A0F8;
        *((_QWORD *)&v73 + 1) = v35;
        *(_QWORD *)&v74 = &v72;
        *(_QWORD *)(v32 + 8 * v71) = (*(uint64_t (**)(unint64_t, uint64_t, __int128 *))(*(_QWORD *)v69 + 16))(v69, v34, &v72);
        if ((_QWORD)v74)
        {
          (**(void (***)(_QWORD))v74)(v74);
          v7 = v74;
          if ((__int128 *)v74 != &v72)
            (*(void (**)(_QWORD))(**((_QWORD **)&v73 + 1) + 40))(*((_QWORD *)&v73 + 1));
        }
        v36 = a2[5];
        if (v36 <= v19)
          goto LABEL_46;
        v37 = a2[4];
        if ((*(_DWORD *)(v37 + v16 + 4) & 0xFFFFFF) != 0)
        {
          v38 = (unsigned __int8 *)re::DataArray<re::DeformationStack>::get(v64, *(_QWORD *)(v37 + v16));
          v40 = a2[5];
          if (v40 <= v19)
            goto LABEL_49;
          v41 = a2[7];
          if (v41 <= v19)
            goto LABEL_50;
          v42 = a2[9];
          if (v42 <= v19)
            goto LABEL_51;
          v43 = a2[11];
          if (v43 <= v19)
            goto LABEL_52;
          v44 = *(_QWORD *)(a2[4] + 8 * v19);
          v45 = v38 + 48;
          v7 = *v38;
          v46 = *(_QWORD *)(a2[6] + 8 * v19);
          v47 = a2[8];
          v48 = a2[10];
          v49 = v71;
          v50 = *(_QWORD *)(v32 + 8 * v71);
          v51 = a3;
          v3 = *(_QWORD *)(a3 + 48);
          v52 = *(_QWORD *)(a3 + 16);
          if (v3 + 1 > 8 * v52)
          {
            v60 = *(_QWORD *)(a2[6] + 8 * v19);
            v61 = v7;
            v53 = *(_QWORD *)(a2[4] + 8 * v19);
            v54 = v50;
            v59 = a2[10];
            re::BucketArray<re::ActiveDeformation,8ul>::setBucketsCapacity(v58, (v3 + 8) >> 3);
            v48 = v59;
            v46 = v60;
            v7 = v61;
            v50 = v54;
            v44 = v53;
            v49 = v71;
            v51 = a3;
            v52 = *(_QWORD *)(a3 + 16);
          }
          if (v52 <= v3 >> 3)
            goto LABEL_53;
          v55 = v62;
          if ((*(_BYTE *)(v51 + 24) & 1) == 0)
            v55 = *(_QWORD *)(v51 + 40);
          v56 = *(_QWORD *)(v55 + 8 * (v3 >> 3));
          ++*(_QWORD *)(v51 + 48);
          ++*(_DWORD *)(v51 + 56);
          v57 = v56 + 400 * (v3 & 7);
          *(_OWORD *)(v57 + 288) = 0u;
          *(_OWORD *)(v57 + 304) = 0u;
          *(_OWORD *)(v57 + 256) = 0u;
          *(_OWORD *)(v57 + 272) = 0u;
          *(_OWORD *)(v57 + 224) = 0u;
          *(_OWORD *)(v57 + 240) = 0u;
          *(_OWORD *)(v57 + 192) = 0u;
          *(_OWORD *)(v57 + 208) = 0u;
          *(_OWORD *)(v57 + 160) = 0u;
          *(_OWORD *)(v57 + 176) = 0u;
          *(_OWORD *)(v57 + 128) = 0u;
          *(_OWORD *)(v57 + 144) = 0u;
          *(_OWORD *)(v57 + 96) = 0u;
          *(_OWORD *)(v57 + 112) = 0u;
          *(_OWORD *)(v57 + 64) = 0u;
          *(_OWORD *)(v57 + 80) = 0u;
          *(_OWORD *)(v57 + 32) = 0u;
          *(_OWORD *)(v57 + 48) = 0u;
          *(_OWORD *)v57 = 0u;
          *(_OWORD *)(v57 + 16) = 0u;
          *(_QWORD *)(v57 + 320) = v44;
          *(_QWORD *)(v57 + 328) = v45;
          *(_QWORD *)(v57 + 336) = v7;
          *(_QWORD *)(v57 + 344) = v46;
          *(_QWORD *)(v57 + 352) = v47 + v33;
          *(_QWORD *)(v57 + 360) = v48 + v17;
          *(_QWORD *)(v57 + 368) = v70;
          *(_QWORD *)(v57 + 376) = v50;
          *(_QWORD *)(v57 + 384) = v63;
          *(_WORD *)(v57 + 392) = v49;
        }
      }
      ++v19;
      v18 = v33 + 168;
      v17 += 48;
      v16 += 8;
      if (v68 == v19)
        return;
    }
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v20);
    _os_crash();
    __break(1u);
LABEL_43:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v21);
    _os_crash();
    __break(1u);
LABEL_44:
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_45:
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_46:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v36);
    _os_crash();
    __break(1u);
LABEL_47:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v17);
    _os_crash();
    __break(1u);
LABEL_48:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_49:
    re::internal::assertLog((re::internal *)6, v39, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v40);
    _os_crash();
    __break(1u);
LABEL_50:
    re::internal::assertLog((re::internal *)6, v39, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v41);
    _os_crash();
    __break(1u);
LABEL_51:
    re::internal::assertLog((re::internal *)6, v39, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v19, v42);
    _os_crash();
    __break(1u);
LABEL_52:
    re::internal::assertLog((re::internal *)6, v39, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v19, v43);
    _os_crash();
    __break(1u);
LABEL_53:
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_54;
  }
}

__n128 re::DynamicArray<re::DeformationView>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DeformationView>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 96 * v4;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  result = *(__n128 *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 80) = v9;
  *(__n128 *)(v5 + 32) = result;
  *(_OWORD *)(v5 + 48) = v8;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::DeformationManager::deform(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  re *isStatisticCollectionEnabled;
  re *v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  unint64_t v9;
  int64x2_t v10;
  _anonymous_namespace_ *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  re *v25;
  uint64_t v26;
  uint64_t v27;
  re *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  re::DeformationBufferAllocator *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unsigned int i;
  uint64_t v46;
  unsigned __int8 v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  const re::mtl::CommandBuffer *v51;
  uint64_t j;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void **v81;
  void **v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  void *v95;
  _QWORD *v96;
  void *v97;
  int v98;
  uint64_t v99;
  int *v100;
  int v101;
  char *v102;
  char *v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL4 v112;
  uint64_t v113;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  re *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  _anonymous_namespace_ *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  id *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  re::DeformationVertexBufferState *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int64x2_t *v162;
  unint64_t v163;
  unint64_t v164;
  int64x2_t v165;
  re *v166;
  re *v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  int v173;
  _BYTE v174[12];
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;
  uint64_t v183;
  unint64_t v184;
  _BOOL4 v185;
  int v186;
  int v187;
  re::DeformationFencePool *v188;
  uint64_t v189;
  uint64_t v191;
  uint64_t v192;
  int v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  re::DeformationVertexBufferState *v203;
  _BYTE v204[16];
  _QWORD v205[2];
  uint64_t v206;
  int v207;
  void **v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  int v220;
  id v221;
  uint64_t v222[4];
  __int128 v223;
  __int128 v224;
  _OWORD v225[5];
  uint64_t v226[8];
  uint64_t v227[5];
  __int128 v228;
  __int128 v229;
  int v230;
  uint64_t v231;
  _BYTE v232[47];
  __int128 v233;
  __int128 v234;
  char v235;
  __int128 v236;
  __int128 v237;
  char v238;
  _QWORD v239[6];
  __int128 v240;
  __int128 v241;
  _QWORD v242[2];
  int v243;
  id v244;
  id v245;
  int v246;
  const char *v247;
  __int16 v248;
  int v249;
  __int16 v250;
  uint64_t v251;
  __int16 v252;
  unint64_t v253;
  uint64_t v254[6];
  __int128 v255;
  __int128 v256;
  uint64_t v257;

  v257 = *MEMORY[0x24BDAC8D0];
  v3 = a3[6];
  if (!v3)
    return;
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)a1);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    isStatisticCollectionEnabled = (re *)re::profilerThreadContext(isStatisticCollectionEnabled);
    v167 = isStatisticCollectionEnabled;
    if (*((_QWORD *)isStatisticCollectionEnabled + 19))
    {
      isStatisticCollectionEnabled = (re *)mach_absolute_time();
      v166 = isStatisticCollectionEnabled;
    }
  }
  else
  {
    v167 = 0;
  }
  v196 = (uint64_t)(a3 + 1);
  v5 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if ((_DWORD)v5)
  {
    v6 = re::profilerThreadContext(v5);
    v7 = *(int64x2_t **)(v6 + 152);
    if (v7)
    {
      v8 = v7[468].u64[0];
      if (v8 >= v3)
        v8 = v3;
      v7[468].i64[0] = v8;
      v9 = v7[468].u64[1];
      if (v9 <= v3)
        v9 = v3;
      v7[468].i64[1] = v9;
      v10 = vdupq_n_s64(1uLL);
      v10.i64[0] = v3;
      v7[469] = vaddq_s64(v7[469], v10);
      *(_BYTE *)(v6 + 184) = 0;
    }
  }
  v11 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v204, 1004, (uint64_t)a1);
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v12 = 0;
  v13 = 0;
  v14 = (uint64_t)&v225[1] + 8;
  v15 = v202;
  v195 = (unint64_t)v203;
  do
  {
    v16 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v196, v13);
    re::DeformationVertexBufferState::makeFromMeshInstance((re::DeformationVertexBufferState *)*a1, *(re::RenderManager **)(v16 + 368), (const re::MeshInstance *)*(unsigned __int16 *)(v16 + 392), (uint64_t)&v223);
    if (v15 == v13)
      goto LABEL_229;
    v17 = v195 + v12;
    v18 = v223;
    v19 = v224;
    v20 = v225[0];
    *(_QWORD *)(v17 + 48) = *(_QWORD *)&v225[1];
    *(_OWORD *)(v17 + 16) = v19;
    *(_OWORD *)(v17 + 32) = v20;
    *(_OWORD *)v17 = v18;
    if ((__int128 *)(v195 + v12) != &v223)
    {
      re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v17 + 56), (uint64_t *)&v225[1] + 1);
      re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v17 + 120), v226);
      re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v17 + 184), v227);
      re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v17 + 248), (uint64_t *)&v229 + 1);
    }
    re::DeformationVertexBufferState::~DeformationVertexBufferState((re::DeformationVertexBufferState *)&v223);
    ++v13;
    v12 += 312;
  }
  while (v3 != v13);
  v21 = *a1;
  v22 = *(_QWORD **)(*a1 + 136);
  v23 = v22[2];
  v24 = (v23 << 60) | v22[4] & 0xFFFFFFFFFFFFFFFLL;
  v222[0] = (v23 << 60) | v22[3] & 0xFFFFFFFFFFFFFFFLL;
  v222[1] = v24;
  v222[2] = v21 + 184;
  v25 = (re *)re::DeformationFencePool::setCurrentFrame((uint64_t)(a1 + 1), v24, v222[0]);
  re::globalAllocators(v25);
  v26 = *(_QWORD *)(a2 + 24);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 32))(v26, 984, 8);
  bzero((void *)v27, 0x3D0uLL);
  *(_DWORD *)(v27 + 16) = 1;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 24) = 0;
  *(_DWORD *)(v27 + 48) = 0;
  *(_QWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 64) = 0;
  *(_DWORD *)(v27 + 72) = 1;
  *(_QWORD *)(v27 + 88) = 0;
  *(_QWORD *)(v27 + 96) = 0;
  *(_QWORD *)(v27 + 80) = 0;
  *(_DWORD *)(v27 + 104) = 0;
  v29 = 112;
  do
  {
    v30 = v27 + v29;
    *(_DWORD *)(v30 + 32) = 0;
    *(_OWORD *)v30 = 0uLL;
    *(_OWORD *)(v30 + 16) = 0uLL;
    *(_QWORD *)(v30 + 36) = 0x7FFFFFFFLL;
    v29 += 48;
  }
  while (v30 + 48 != v27 + 976);
  *(_QWORD *)(v27 + 976) = 0;
  *((_QWORD *)&v224 + 1) = re::globalAllocators(v28)[2];
  *(_QWORD *)&v223 = &off_24ED7A150;
  *(_QWORD *)&v225[0] = &v223;
  v177 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v26 + 16))(v26, v27, &v223);
  v32 = v195;
  if (*(_QWORD *)&v225[0])
  {
    (***(void (****)(_QWORD))&v225[0])(*(_QWORD *)&v225[0]);
    v31 = *(_QWORD *)&v225[0];
    if (*(__int128 **)&v225[0] != &v223)
      (*(void (**)(_QWORD))(**((_QWORD **)&v224 + 1) + 40))(*((_QWORD *)&v224 + 1));
  }
  v194 = v15;
  v191 = a3[6];
  if (!v191)
    goto LABEL_46;
  v33 = 0;
  v14 = 1;
  do
  {
    v12 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v196, v33);
    v34 = (_BYTE *)re::DataArray<re::DeformationStack>::get((uint64_t)(a1 + 177), *(_QWORD *)(v12 + 320));
    if (v33 == v15)
      goto LABEL_232;
    v36 = (unint64_t)v34;
    v15 = v32 + 312 * v33;
    v37 = *(re::DeformationBufferAllocator **)(v12 + 360);
    v214 = 0;
    v38 = *v34;
    if (!*v34)
      goto LABEL_44;
    v192 = v33;
    v32 = 0;
    v39 = 0;
    v198 = v34;
    v200 = v12;
    v197 = *v34;
    do
    {
      v40 = v36 + (v32 << 6);
      v41 = *(_QWORD *)(v40 + 56);
      if ((v41 & v39) != 0)
        goto LABEL_36;
      if (!re::DeformationBufferAllocator::updateAllocationDataFrameForInputHash((uint64_t)v37, v222, v32, v42))
      {
        v40 = v36 + (v32 << 6);
LABEL_36:
        v50 = *(_QWORD *)(v40 + 64);
LABEL_37:
        v39 |= v50;
        re::Bitset<64>::toWordIndex((uint64_t)&v214, v32);
        v214 |= 1 << v32;
        goto LABEL_38;
      }
      v43 = *((_QWORD *)v37 + 1);
      if (v43 <= v32)
        goto LABEL_228;
      v44 = *(_DWORD *)(*((_QWORD *)v37 + 2) + 72 * v32 + 56);
      if (v44)
      {
        for (i = 0; i != v44; ++i)
        {
          v46 = re::DeformationBufferAllocator::allocationData(v37, v32, i);
          v47 = *(_BYTE *)v46;
          LODWORD(v17) = v46 + 4;
          v48 = objc_msgSend(*(id *)(v46 + 24), sel_contents);
          v49 = *(_QWORD *)(v46 + 24);
          *(_QWORD *)&v223 = v48;
          *((_QWORD *)&v223 + 1) = *(_QWORD *)(v46 + 32);
          *(_QWORD *)&v224 = v49;
          re::DeformationVertexBufferState::setOutputBuffer(v15, v47, 1, (uint64_t)&v223, v46 + 4);
        }
        re::DeformationVertexBufferState::resetVertexBufferChangedState(v15);
        v14 = 1;
        v36 = (unint64_t)v198;
        v12 = v200;
        v38 = v197;
      }
      else
      {
        v50 = *(_QWORD *)(v36 + (v32 << 6) + 64);
        if (v50)
          goto LABEL_37;
      }
LABEL_38:
      ++v32;
    }
    while (v32 != v38);
    v32 = v195;
    v33 = v192;
    if (v214)
    {
      re::DeformationPassBuilder::addDeformationStack((unsigned __int8 *)v177, v192, v214, v36);
      goto LABEL_45;
    }
LABEL_44:
    re::DeformationVertexBufferState::buildAttributeTable((re::DeformationVertexBufferState *)v15, *(re::AttributeTable **)(v12 + 376));
LABEL_45:
    ++v33;
    v15 = v194;
  }
  while (v33 != v191);
LABEL_46:
  v51 = (const re::mtl::CommandBuffer *)(a2 + 64);
  if (!*(_QWORD *)(a2 + 64))
    goto LABEL_237;
  re::DeformationCommandBuffer::DeformationCommandBuffer((re::DeformationCommandBuffer *)v239, (re::RenderManager *)*a1, v51, (re::DeformationFencePool *)(a1 + 1));
  j = v177;
  v53 = *(_QWORD *)(v177 + 976);
  if (v53)
  {
    v54 = __clz(__rbit64(v53));
    v55 = a1[5 * v54 + 81];
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 16))(v55, *a1);
    for (j = v177; v54 != 63; j = v177)
    {
      if ((*(_QWORD *)(j + 976) & (-2 << v54)) == 0)
        break;
      v54 = __clz(__rbit64(*(_QWORD *)(j + 976) & (-2 << v54)));
      v56 = a1[5 * v54 + 81];
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 16))(v56, *a1);
    }
  }
  v181 = *(_QWORD *)(a2 + 24);
  v221 = 0;
  v169 = *(unsigned __int8 *)(j + 40);
  if (*(_BYTE *)(j + 40))
  {
    v57 = j;
    v173 = 0;
    v58 = 0;
    v170 = j + 56;
    v168 = 1;
    v193 = 1;
    v171 = 312 * v15;
    do
    {
      v172 = v58;
      v59 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[](v170, v58);
      v60 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v57, *v59);
      re::DeformationCommandBuffer::beginDeformationPass((re::DeformationCommandBuffer *)v239);
      v214 = 0;
      v215 = 0;
      v216 = 1;
      v218 = 0;
      v219 = 0;
      v217 = 0;
      v220 = 0;
      v61 = re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul>::addUninitialized((uint64_t)&v214);
      *(_QWORD *)(v61 + 32) = 0;
      *(_QWORD *)(v61 + 8) = 0;
      *(_QWORD *)(v61 + 16) = 0;
      *(_QWORD *)v61 = 0;
      *(_DWORD *)(v61 + 24) = 0;
      v178 = *(_QWORD *)(v60 + 40);
      v179 = v60;
      if (!v178)
      {
        LODWORD(v14) = 0;
        goto LABEL_181;
      }
      *(_DWORD *)&v174[8] = 0;
      v175 = 0;
      v14 = 0;
      v62 = 0;
      *(_QWORD *)v174 = v173 ^ 1u;
      do
      {
        v186 = v14;
        v184 = v62;
        v63 = (uint64_t *)re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v179, v62);
        v185 = *((unsigned __int8 *)v63 + 1) == 1;
        *(_QWORD *)&v209 = v63;
        *((_QWORD *)&v209 + 1) = a3 + 1;
        v64 = a3[12];
        v65 = a3[10];
        *(_QWORD *)&v210 = v222;
        *((_QWORD *)&v210 + 1) = v64;
        v211 = v65;
        v212 = v32;
        v213 = v15;
        v188 = (re::DeformationFencePool *)v63;
        v189 = a1[5 * *(unsigned __int8 *)v63 + 81];
        v237 = 0u;
        v236 = 0u;
        v238 = 1;
        v199 = (uint64_t)(v63 + 1);
        v15 = v63[6];
        if (v15)
        {
          v66 = 0;
          while (1)
          {
            v12 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v199, v66);
            v14 = *(unsigned __int8 *)(v12 + 16);
            v67 = *(_DWORD *)(*(_QWORD *)v12 + 4 * v14 + 4);
            v43 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v196, *(_QWORD *)(v12 + 8));
            v32 = *(_QWORD *)v12 + (v14 << 6);
            v68 = *(_OWORD *)(v32 + 48);
            v69 = *(_OWORD *)(v32 + 64);
            v225[0] = *(unint64_t *)(v32 + 80);
            v223 = v68;
            v224 = v69;
            v225[1] = 0uLL;
            v70 = *(_QWORD *)(v32 + 88);
            if (v70)
            {
              re::FixedArray<re::Pair<re::DeformerType,unsigned long long,true>>::init<>((_QWORD *)v225 + 1, v70, *(_QWORD *)(v32 + 96));
              v71 = *(_QWORD *)(v32 + 96);
              if (*(_QWORD *)&v225[1] != v71)
                goto LABEL_227;
              if (v71)
                memmove(*((void **)&v225[1] + 1), *(const void **)(v32 + 104), 16 * v71);
            }
            v72 = *(_QWORD *)(v12 + 8);
            if (v194 <= v72)
              break;
            v32 = v195;
            re::DeformationBufferAllocator::resetAllocationData(*(_QWORD **)(v43 + 360), v222, v14, v73);
            if (*((_QWORD *)&v225[0] + 1) && *(_QWORD *)&v225[1])
              (*(void (**)(void))(**((_QWORD **)&v225[0] + 1) + 40))();
            if (v15 == ++v66)
              goto LABEL_66;
          }
          re::internal::assertLog((re::internal *)6, v70, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *(_QWORD *)(v12 + 8), v194);
          _os_crash();
          __break(1u);
LABEL_226:
          re::internal::assertLog((re::internal *)6, v141, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v142, v15);
          _os_crash();
          __break(1u);
LABEL_227:
          re::internal::assertLog((re::internal *)4, v70, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
          _os_crash();
          __break(1u);
LABEL_228:
          v254[0] = 0;
          v224 = 0u;
          memset(v225, 0, 48);
          v223 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v239[0]) = 136315906;
          *(_QWORD *)((char *)v239 + 4) = "operator[]";
          WORD2(v239[1]) = 1024;
          *(_DWORD *)((char *)&v239[1] + 6) = 476;
          WORD1(v239[2]) = 2048;
          *(_QWORD *)((char *)&v239[2] + 4) = v32;
          WORD2(v239[3]) = 2048;
          *(_QWORD *)((char *)&v239[3] + 6) = v43;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_229:
          v214 = 0;
          v241 = 0u;
          v240 = 0u;
          memset(v239, 0, sizeof(v239));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v254[0]) = 136315906;
          *(uint64_t *)((char *)v254 + 4) = (uint64_t)"operator[]";
          WORD2(v254[1]) = 1024;
          *(_DWORD *)((char *)&v254[1] + 6) = 468;
          WORD1(v254[2]) = 2048;
          *(uint64_t *)((char *)&v254[2] + 4) = v15;
          WORD2(v254[3]) = 2048;
          *(uint64_t *)((char *)&v254[3] + 6) = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_230:
          re::internal::assertLog((re::internal *)4, v74, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
LABEL_231:
          re::internal::assertLog((re::internal *)4, v78, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
LABEL_232:
          re::internal::assertLog((re::internal *)6, v35, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v15, v15);
          _os_crash();
          __break(1u);
          goto LABEL_233;
        }
LABEL_66:
        v205[1] = 0;
        v206 = 0;
        v207 = 0;
        v208 = 0;
        v205[0] = v181;
        re::DynamicArray<re::EventWait>::setCapacity(v205, 0);
        ++v207;
        if (!v219)
          goto LABEL_230;
        v12 = (unint64_t)v188;
        v75 = *((unsigned __int8 *)v188 + 1);
        v76 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)&v214, v219 - 1);
        v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, __int128 *, uint64_t, _QWORD *))(*(_QWORD *)v189 + 40))(v189, a2, v75, &v209, &v236, v76, v205);
        if (!v219)
          goto LABEL_231;
        v183 = v77;
        v79 = (char *)re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)&v214, v219 - 1);
        if (*((_QWORD *)v79 + 2))
        {
          v79 = (char *)re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul>::addUninitialized((uint64_t)&v214);
          *((_QWORD *)v79 + 4) = 0;
          *((_QWORD *)v79 + 1) = 0;
          *((_QWORD *)v79 + 2) = 0;
          *(_QWORD *)v79 = 0;
          *((_DWORD *)v79 + 6) = 0;
        }
        v15 = v194;
        if (*((_BYTE *)v188 + 1) == 1 && (_QWORD)v236)
        {
          re::DeformationCommandBuffer::setEncoderType((uint64_t)v239, 1);
          v79 = (char *)re::BufferInitializationOptions::initializeGPUVertexBuffers((unint64_t *)&v236, (uint64_t)&v244, (uint64_t)v188, v32, v194);
        }
        *(_QWORD *)&v223 = 0;
        DWORD2(v223) = 0;
        *(_QWORD *)&v224 = 0;
        DWORD2(v224) = 0;
        v228 = 0u;
        v229 = 0u;
        v230 = 0;
        v231 = 0x7FFFFFFFLL;
        if (v206)
        {
          v81 = v208;
          v82 = &v208[2 * v206];
          while (1)
          {
            v83 = *v81;
            v254[0] = (uint64_t)*v81;
            if (!HIDWORD(v229))
              break;
LABEL_76:
            v79 = (char *)re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::add((uint64_t)&v228, v254, (uint64_t)v81);
LABEL_99:
            v97 = v81[1];
            if (*((_QWORD *)v79 + 1) < (unint64_t)v97)
              *((_QWORD *)v79 + 1) = v97;
            v81 += 2;
            if (v81 == v82)
            {
              v98 = HIDWORD(v229);
              if (HIDWORD(v229))
              {
                v193 = v230;
                if (v230)
                {
                  v99 = 0;
                  v100 = (int *)v229;
                  while (1)
                  {
                    v101 = *v100;
                    v100 += 8;
                    if (v101 < 0)
                      break;
                    if (v230 == ++v99)
                    {
                      LODWORD(v99) = v230;
                      break;
                    }
                  }
                  LODWORD(v17) = v99;
                }
                else
                {
                  LODWORD(v17) = 0;
                  v193 = 0;
                }
                v103 = (char *)&v228;
                v102 = (char *)&v228;
              }
              else
              {
                v102 = (char *)v225;
                v103 = (char *)v225 + 24 * v224;
              }
              v104 = v102 == v103;
              if (HIDWORD(v229))
                v104 = v193 == (_DWORD)v17;
              if (!v104)
              {
                do
                {
                  if (v98)
                  {
                    v105 = *((_QWORD *)v102 + 2) + 32 * v17;
                    v106 = *(_QWORD *)(v105 + 16);
                    v107 = *(_QWORD *)(v105 + 24);
                    re::DeformationCommandBuffer::setEncoderType((uint64_t)v239, 0);
                    v79 = (char *)objc_msgSend(*(id *)v239[2], "encodeWaitForEvent:value:", v106, v107);
                    v108 = v17 + 1;
                    do
                    {
                      LODWORD(v17) = v108;
                      if (v108 >= *((_DWORD *)v102 + 8))
                        break;
                      v109 = *(_DWORD *)(*((_QWORD *)v102 + 2) + 32 * v108++);
                    }
                    while ((v109 & 0x80000000) == 0);
                  }
                  else
                  {
                    v110 = *((_QWORD *)v102 + 1);
                    v111 = *((_QWORD *)v102 + 2);
                    re::DeformationCommandBuffer::setEncoderType((uint64_t)v239, 0);
                    v79 = (char *)objc_msgSend(*(id *)v239[2], "encodeWaitForEvent:value:", v110, v111);
                    v102 += 24;
                  }
                  v112 = v102 == v103;
                  if (v98)
                    v112 = v193 == v17;
                }
                while (!v112);
              }
              v12 = (unint64_t)v188;
              goto LABEL_125;
            }
          }
          v84 = v224;
          if (!(_QWORD)v224)
            goto LABEL_96;
          v85 = 0;
          do
          {
            if (*(void **)((char *)v225 + v85) == v83)
            {
              v79 = (char *)v225 + v85 + 8;
              goto LABEL_99;
            }
            v85 += 24;
          }
          while (24 * (_QWORD)v224 != v85);
          if ((v224 & 0xFFFFFFF8) == 0)
          {
LABEL_96:
            v93 = v83;
            v94 = v224;
            if ((unint64_t)v224 >= 8)
              goto LABEL_238;
            v95 = v81[1];
            v96 = (_QWORD *)v225 + 3 * v224;
            *v96 = v83;
            v96[1] = v93;
            v79 = (char *)(v96 + 1);
            v96[2] = v95;
            *(_QWORD *)&v224 = v94 + 1;
            ++DWORD2(v224);
            goto LABEL_99;
          }
          if (!(_QWORD)v228)
          {
            v86 = (uint64_t *)v223;
            if (!(_QWORD)v223)
            {
            }
            re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v228, (uint64_t)v86, 16);
            v84 = v224;
            if (!(_QWORD)v224)
            {
LABEL_95:
              re::DynamicInlineArray<re::KeyValuePair<MTL::Event *,re::EventWait>,8ul>::clear((uint64_t)&v224);
              goto LABEL_76;
            }
          }
          v87 = (char *)v225;
          v88 = (char *)v225 + 24 * v84;
          while (2)
          {
            v89 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v87 ^ (*(_QWORD *)v87 >> 30));
            v90 = (0x94D049BB133111EBLL * (v89 ^ (v89 >> 27))) ^ ((0x94D049BB133111EBLL * (v89 ^ (v89 >> 27))) >> 31);
            if ((_QWORD)v228)
            {
              v91 = v90 % DWORD2(v229);
              v92 = *(unsigned int *)(*((_QWORD *)&v228 + 1) + 4 * v91);
              if ((_DWORD)v92 != 0x7FFFFFFF)
              {
                while (*(_QWORD *)(v229 + 32 * v92 + 8) != *(_QWORD *)v87)
                {
                  v92 = *(_DWORD *)(v229 + 32 * v92) & 0x7FFFFFFF;
                  if ((_DWORD)v92 == 0x7FFFFFFF)
                    goto LABEL_93;
                }
LABEL_94:
                v87 += 24;
                if (v87 == v88)
                  goto LABEL_95;
                continue;
              }
            }
            else
            {
              LODWORD(v91) = 0;
            }
            break;
          }
LABEL_93:
          re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::addAsMove((uint64_t)&v228, v91, v90, v87, (_QWORD *)v87 + 1);
          ++HIDWORD(v231);
          goto LABEL_94;
        }
LABEL_125:
        v14 = v186 | v185;
        v113 = *(unsigned __int8 *)(v12 + 1);
        if (*(_BYTE *)(v12 + 1))
        {
          if ((_DWORD)v113 != 1)
            goto LABEL_239;
          re::DeformationCommandBuffer::setEncoderType((uint64_t)v239, 2);
          (*(void (**)(uint64_t, uint64_t, id *, __int128 *))(*(_QWORD *)v189 + 48))(v189, v183, &v245, &v209);
        }
        else if (((v173 ^ 1) & (HIDWORD(v229) == 0)) == 1 && (_QWORD)v224 == 0)
        {
          if (objc_msgSend(*(id *)(*a1 + 184), "supportsBufferWithIOSurface"))
          {
            memset(v254, 0, 36);
            *(uint64_t *)((char *)&v254[4] + 4) = 0x7FFFFFFFLL;
            if ((_QWORD)v236)
              re::BufferInitializationOptions::initializeCPUVertexBuffers((unint64_t *)&v236, v12, v32, v194);
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v189 + 56))(v189, v183, &v209);
            re::DeformationVertexBufferState::LockedSurfaces::unlockAll((re::DeformationVertexBufferState::LockedSurfaces *)v254);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v254);
          }
          else
          {
            if ((_QWORD)v236)
              re::BufferInitializationOptions::initializeCPUVertexBuffers((unint64_t *)&v236, v12, v32, v194);
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v189 + 56))(v189, v183, &v209);
          }
        }
        else
        {
          v115 = v175;
          if (!v175)
          {
            re::globalAllocators((re *)v79);
            v116 = *(_QWORD *)(a2 + 24);
            v117 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v116 + 32))(v116, 24, 8);
            v117[1] = 0;
            v117[2] = 0;
            *v117 = 0;
            re::FixedArray<re::DeformationVertexBufferState>::init<>(v117, v181, v194);
            v119 = re::globalAllocators(v118)[2];
            v254[0] = (uint64_t)&off_24ED7A1A8;
            v254[3] = v119;
            v254[4] = (uint64_t)v254;
            v121 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v116 + 16))(v116, v117, v254);
            v122 = (_anonymous_namespace_ *)v254[4];
            if (v254[4])
            {
              v122 = (_anonymous_namespace_ *)(**(uint64_t (***)(uint64_t))v254[4])(v254[4]);
              v120 = v254[4];
              if ((uint64_t *)v254[4] != v254)
                v122 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v254[3] + 40))(v254[3]);
            }
            if (!*v121)
            {
            }
            if (v121[1] != v194)
              goto LABEL_235;
            v123 = 0;
            v176 = v121;
            v124 = v121[2];
            do
            {
              v125 = v124 + v123;
              v126 = (uint64_t *)(v32 + v123);
              v127 = *(_OWORD *)(v32 + v123);
              v128 = *(_OWORD *)(v32 + v123 + 16);
              v129 = *(_OWORD *)(v32 + v123 + 32);
              *(_QWORD *)(v125 + 48) = *(_QWORD *)(v32 + v123 + 48);
              *(_OWORD *)(v125 + 16) = v128;
              *(_OWORD *)(v125 + 32) = v129;
              *(_OWORD *)v125 = v127;
              if (v32 != v124)
              {
                re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v125 + 56), v126 + 7);
                re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v125 + 120), v126 + 15);
                re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v125 + 184), v126 + 23);
                re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v125 + 248), v126 + 31);
              }
              v123 += 312;
            }
            while (v171 != v123);
            v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181 + 32))(v181, 72, 8);
            *(_QWORD *)v130 = 0;
            *(_QWORD *)(v130 + 8) = 0;
            *(_DWORD *)(v130 + 16) = 1;
            *(_QWORD *)(v130 + 32) = 0;
            *(_QWORD *)(v130 + 40) = 0;
            *(_QWORD *)(v130 + 24) = 0;
            *(_DWORD *)(v130 + 48) = 0;
            re::BucketArray<re::internal::DeformationCallbackData,8ul>::init(v130, v181, 1uLL);
            *(_QWORD *)(v130 + 56) = 0;
            *(_BYTE *)(v130 + 64) = 0;
            *(_QWORD *)&v174[4] = v130;
            *(_BYTE *)(v130 + 64) = objc_msgSend(*(id *)(*a1 + 184), "supportsBufferWithIOSurface");
            v115 = v176;
          }
          v234 = v237;
          v235 = v238;
          v233 = v236;
          *(_QWORD *)&v232[39] = v211;
          *(_OWORD *)&v232[7] = v209;
          *(_OWORD *)&v232[23] = v210;
          v132 = v115[1];
          v131 = v115[2];
          v175 = v115;
          v133 = *(_QWORD *)&v174[4];
          v134 = *(_QWORD *)(*(_QWORD *)&v174[4] + 40);
          v12 = *(_QWORD *)(*(_QWORD *)&v174[4] + 8);
          if (v134 + 1 > 8 * v12)
          {
            re::BucketArray<re::internal::DeformationCallbackData,8ul>::setBucketsCapacity(*(_QWORD **)&v174[4], (v134 + 8) >> 3);
            v133 = *(_QWORD *)&v174[4];
            v12 = *(_QWORD *)(*(_QWORD *)&v174[4] + 8);
          }
          v14 = v134 >> 3;
          if (v12 <= v134 >> 3)
            goto LABEL_234;
          if ((*(_BYTE *)(v133 + 16) & 1) != 0)
            v135 = v133 + 24;
          else
            v135 = *(_QWORD *)(v133 + 32);
          v136 = *(_QWORD *)(v135 + 8 * v14);
          ++*(_QWORD *)(v133 + 40);
          ++*(_DWORD *)(v133 + 48);
          v137 = v136 + 112 * (v134 & 7);
          v138 = v234;
          *(_OWORD *)(v137 + 16) = v233;
          *(_OWORD *)(v137 + 32) = v138;
          v139 = *(_OWORD *)&v232[16];
          *(_OWORD *)(v137 + 49) = *(_OWORD *)v232;
          v12 = (unint64_t)v188;
          *(_QWORD *)v137 = v189;
          *(_QWORD *)(v137 + 8) = v183;
          *(_BYTE *)(v137 + 48) = v235;
          *(_OWORD *)(v137 + 65) = v139;
          *(_OWORD *)(v137 + 80) = *(_OWORD *)&v232[31];
          *(_QWORD *)(v137 + 96) = v131;
          *(_QWORD *)(v137 + 104) = v132;
          v14 = 1;
        }
        v43 = *(_QWORD *)(v12 + 48);
        if (v43)
        {
          v140 = 0;
          do
          {
            v142 = *(_QWORD *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v199, v140) + 8);
            if (v194 <= v142)
              goto LABEL_226;
            re::DeformationVertexBufferState::resetVertexBufferChangedState(v32 + 312 * v142);
          }
          while (v43 != ++v140);
        }
        re::DeformationCommandBuffer::endDeformation((uint64_t)v239, v80);
        re::DynamicInlineArray<re::KeyValuePair<MTL::Event *,re::EventWait>,8ul>::clear((uint64_t)&v224);
        re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)&v228);
        *(_QWORD *)&v223 = 0;
        DWORD2(v223) = 0;
        re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)&v228);
        re::DynamicInlineArray<re::KeyValuePair<MTL::Event *,re::EventWait>,8ul>::clear((uint64_t)&v224);
        v143 = v205[0];
        if (v205[0])
        {
          v144 = v208;
          if (v208)
          {
            if (v206)
            {
              v145 = 16 * v206;
              do
              {
                if (*v144)
                {

                  *v144 = 0;
                }
                v144 += 2;
                v145 -= 16;
              }
              while (v145);
              v143 = v205[0];
              v144 = v208;
            }
            (*(void (**)(uint64_t, id *))(*(_QWORD *)v143 + 40))(v143, v144);
          }
        }
        v62 = v184 + 1;
      }
      while (v184 + 1 != v178);
      v146 = *(_QWORD *)&v174[4];
      if (*(_QWORD *)&v174[4])
      {
        if (!v221)
        {
          *(_QWORD *)&v223 = objc_msgSend(*(id *)(*a1 + 184), sel_newSharedEvent);
          NS::SharedPtr<MTL::Texture>::operator=(&v221, (void **)&v223);
          if ((_QWORD)v223)

          v146 = *(_QWORD *)&v174[4];
        }
        *(_QWORD *)(v146 + 56) = v168 + 1;
        v147 = v146;
        v148 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F8], sel_alloc), sel_init);
        *(_QWORD *)&v223 = MEMORY[0x24BDAC760];
        *((_QWORD *)&v223 + 1) = 0x40000000;
        *(_QWORD *)&v224 = ___ZN2re18DeformationManager26enqueueCPUDeformationOnGPUERNS_24DeformationCommandBufferERN2NS9SharedPtrIN3MTL11SharedEventEEERyPNS_8internal23DeformMetalCallbackDataE_block_invoke;
        *((_QWORD *)&v224 + 1) = &__block_descriptor_tmp_31;
        *(_QWORD *)&v225[0] = v147;
        objc_msgSend(v221, sel_notifyListener_atValue_block_, v148, v168, &v223);
        re::DeformationCommandBuffer::encodeSharedEventForSynchronization((uint64_t)v239, &v221, v168, *(_QWORD *)(v147 + 56));
        if (v148)

        v168 += 2;
      }
LABEL_181:
      if (!v219)
        goto LABEL_236;
      v187 = v14;
      if (*(_QWORD *)(re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)&v214, 0)+ 16))re::DeformationCommandBuffer::encodePostDeformationBlits((uint64_t)v239, (uint64_t)&v214);
      re::DeformationCommandBuffer::endDeformationPass((uint64_t)v239, v149);
      v12 = v219;
      if (v219)
      {
        v150 = 0;
        do
        {
          v151 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)&v214, v150);
          v152 = *(_QWORD *)v151;
          if (*(_QWORD *)v151)
          {
            v153 = *(id **)(v151 + 32);
            if (v153)
            {
              v154 = *(_QWORD *)(v151 + 16);
              if (v154)
              {
                v155 = 48 * v154;
                do
                {
                  if (*v153)
                  {

                    *v153 = 0;
                  }
                  v153 += 6;
                  v155 -= 48;
                }
                while (v155);
                v152 = *(_QWORD *)v151;
                v153 = *(id **)(v151 + 32);
                v32 = v195;
              }
              (*(void (**)(uint64_t, id *))(*(_QWORD *)v152 + 40))(v152, v153);
            }
            *(_QWORD *)(v151 + 32) = 0;
            *(_QWORD *)(v151 + 8) = 0;
            *(_QWORD *)(v151 + 16) = 0;
            *(_QWORD *)v151 = 0;
            ++*(_DWORD *)(v151 + 24);
          }
          ++v150;
        }
        while (v150 != v12);
      }
      for (; v215; --v215)
      {
        (*(void (**)(void))(*(_QWORD *)v214 + 40))();
        v216 += 2;
      }
      if (v214 && (v216 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v214 + 40))();
      v173 |= v187;
      v58 = (v172 + 1);
      v57 = v177;
    }
    while (v169 != (v172 + 1));
  }
  re::DeformationCommandBuffer::finalizeFinalEncoder((uint64_t)v239, a2 + 48);
  if (v221)

  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)v242);
  if (v242[0])
  {
    v156 = v243;
    if ((v243 & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v242[0] + 40))();
      v156 = v243;
    }
    v242[0] = 0;
    v242[1] = 0;
    v243 = (v156 | 1) + 2;
  }
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)&v239[5]);
  if (v239[5] && (BYTE8(v240) & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v239[5] + 40))();
  v14 = a3[6];
  if (v14)
  {
    v157 = 0;
    v12 = v202;
    v158 = v203;
    while (1)
    {
      v159 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v196, v157);
      if (v12 == v157)
        break;
      re::DeformationVertexBufferState::buildAttributeTable(v158, *(re::AttributeTable **)(v159 + 376));
      ++v157;
      v158 = (re::DeformationVertexBufferState *)((char *)v158 + 312);
      if (v14 == v157)
        goto LABEL_216;
    }
LABEL_233:
    re::internal::assertLog((re::internal *)6, v160, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v12);
    _os_crash();
    __break(1u);
LABEL_234:
    v222[3] = 0;
    v255 = 0u;
    v256 = 0u;
    memset(v254, 0, sizeof(v254));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v246 = 136315906;
    v247 = "operator[]";
    v248 = 1024;
    v249 = 858;
    v250 = 2048;
    v251 = v14;
    v252 = 2048;
    v253 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_235:
    re::internal::assertLog((re::internal *)4, v120, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
LABEL_236:
    re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
    _os_crash();
    __break(1u);
LABEL_237:
    re::internal::assertLog((re::internal *)4, v31, v51, "assertion failure: '%s' (%s:line %i) ", "frameContext.deformerCommandBuffer.isValid()", "processDeformationPasses", 557);
    _os_crash();
    __break(1u);
LABEL_238:
    re::internal::assertLog((re::internal *)4, v80, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    _os_crash();
    __break(1u);
LABEL_239:
    re::internal::assertLog((re::internal *)5, v80, "assertion failure: '%s' (%s:line %i) Invalid Deformation Execution Mode: %u", "!\"Unreachable code\"", "processDeformationPasses", 747, v113);
    _os_crash();
    __break(1u);
  }
LABEL_216:
  re::FixedArray<re::DeformationVertexBufferState>::deinit(&v201);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v204);
  if (v167)
  {
    if (*((_QWORD *)v167 + 19))
    {
      v161 = mach_absolute_time();
      v162 = (int64x2_t *)*((_QWORD *)v167 + 19);
      if (v162)
      {
        v163 = v162[464].u64[0];
        if (v163 >= v161 - (unint64_t)v166)
          v163 = v161 - (_QWORD)v166;
        v162[464].i64[0] = v163;
        v164 = v162[464].u64[1];
        if (v164 <= v161 - (unint64_t)v166)
          v164 = v161 - (_QWORD)v166;
        v162[464].i64[1] = v164;
        v165 = vdupq_n_s64(1uLL);
        v165.i64[0] = v161 - (_QWORD)v166;
        v162[465] = vaddq_s64(v162[465], v165);
        *((_BYTE *)v167 + 184) = 0;
      }
    }
  }
}

unint64_t re::`anonymous namespace'::calculateDeformerInputHash(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v19;

  v5 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(a2 + 40 * a1) ^ (*(_QWORD *)(a2 + 40 * a1) >> 30));
  v6 = (((unint64_t)a1 << 6)
      + ((unint64_t)a1 >> 2)
      - 0x61C8864680B583E9
      + ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))) ^ a1;
  v7 = *(_QWORD *)(a3 + 8 * a1 + 24);
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  v9 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a3 + a1)) ^ ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a3 + a1)) >> 27));
  v10 = ((v6 << 6)
       + (v6 >> 2)
       + (((v9 ^ (v9 >> 31)) + ((v8 ^ (v8 >> 31)) << 6) + ((v8 ^ (v8 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v8 ^ (v8 >> 31))
       - 0x61C8864680B583E9) ^ v6;
  v11 = *a5 & a4;
  if (v11)
  {
    v13 = __clz(__rbit64(v11));
    v14 = a5 + 7;
    while (1)
    {
      v19 = v13;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)a5, v13);
      v15 = a5[8]
          + 32
          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v14, &v19);
      v16 = *(unsigned int *)(v15 + 16);
      v17 = (unint64_t)objc_msgSend(*(id *)(v15 + 24), sel_hash);
      v10 ^= (v10 << 6)
           - 0x61C8864680B583E9
           + (v10 >> 2)
           + ((v16 - 0x61C8864680B583E9 + (v17 << 6) + (v17 >> 2)) ^ v17);
      if (v13 == 63 || (v11 & (-2 << v13)) == 0)
        break;
      v13 = __clz(__rbit64(v11 & (-2 << v13)));
    }
  }
  return v10;
}

uint64_t *re::`anonymous namespace'::lockInputIOSurfacesForDeformationParameters(uint64_t *result, re::DeformationVertexBufferState::LockedSurfaces *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;

  v22 = *(_QWORD *)(*result + 48);
  if (v22)
  {
    v3 = result;
    v4 = 0;
    v20 = result;
    v21 = *result + 8;
    while (1)
    {
      v5 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v21, v4);
      v6 = *(_QWORD *)(v5 + 8);
      result = (uint64_t *)re::BucketArray<re::ActiveDeformation,8ul>::operator[](v3[1], v6);
      v8 = *(unsigned __int8 *)(v5 + 16);
      v9 = result[42];
      if (v9 <= v8)
        break;
      v10 = v3[6];
      if (v10 <= v6)
        goto LABEL_15;
      v11 = v3[5];
      v12 = (_QWORD *)(v11 + 312 * v6);
      v13 = *(_QWORD *)(result[41] + (v8 << 6) + 8) & *v12;
      if (v13)
      {
        v14 = __clz(__rbit64(v13));
        v15 = v11 + 312 * v6;
        v16 = (_QWORD *)(v15 + 56);
        v17 = (_QWORD *)(v15 + 64);
        while (1)
        {
          v23 = v14;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v12, v14);
          v18 = *v17
              + 32
              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16, &v23);
          result = (uint64_t *)re::DeformationVertexBufferState::LockedSurfaces::ensureIOSurfaceLocked(a2, *(Buffer **)(v18 + 24));
          if (result)
          {
            v19 = *(_QWORD *)(v18 + 24);
            *(_QWORD *)(v18 + 8) = result;
            *(_QWORD *)(v18 + 24) = v19;
          }
          if (v14 == 63 || (v13 & (-2 << v14)) == 0)
            break;
          v14 = __clz(__rbit64(v13 & (-2 << v14)));
        }
      }
      ++v4;
      v3 = v20;
      if (v4 == v22)
        return result;
    }
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v5 + 16), v9);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v6, v10);
    result = (uint64_t *)_os_crash();
    __break(1u);
  }
  return result;
}

id ___ZN2re18DeformationManager26enqueueCPUDeformationOnGPUERNS_24DeformationCommandBufferERN2NS9SharedPtrIN3MTL11SharedEventEEERyPNS_8internal23DeformMetalCallbackDataE_block_invoke(uint64_t a1, id a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v6 = *(_QWORD *)(v3 + 40);
      if (v6 <= i)
      {
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, i, v6);
        _os_crash();
        __break(1u);
LABEL_15:
        v16 = 0u;
        v17 = 0u;
        v14 = 0u;
        v15 = 0u;
        v13 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(_QWORD *)(v3 + 8) <= i >> 3)
        goto LABEL_15;
      v7 = v3 + 24;
      if ((*(_BYTE *)(v3 + 16) & 1) == 0)
        v7 = *(_QWORD *)(v3 + 32);
      v8 = *(_QWORD *)(v7 + 8 * (i >> 3));
      v9 = (unint64_t *)(v8 + 112 * (i & 7));
      if (v9[2])
        re::BufferInitializationOptions::initializeCPUVertexBuffers(v9 + 2, *(_QWORD *)(v8 + 112 * (i & 7) + 56), *(_QWORD *)(v8 + 112 * (i & 7) + 96), *(_QWORD *)(v8 + 112 * (i & 7) + 104));
      v10 = v8 + 112 * (i & 7);
      v11 = v10 + 56;
      if (*(_BYTE *)(v3 + 64))
      {
        LODWORD(v15) = 0;
        v13 = 0u;
        v14 = 0u;
        *(_QWORD *)((char *)&v15 + 4) = 0x7FFFFFFFLL;
        (*(void (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)*v9 + 56))(*v9, *(_QWORD *)(v8 + 112 * (i & 7) + 8), v11);
        re::DeformationVertexBufferState::LockedSurfaces::unlockAll((re::DeformationVertexBufferState::LockedSurfaces *)&v13);
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v13);
      }
      else
      {
        (*(void (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)*v9 + 56))(*v9, *(_QWORD *)(v8 + 112 * (i & 7) + 8), v10 + 56);
      }
    }
  }
  return objc_msgSend(a2, sel_setSignaledValue_, *(_QWORD *)(v3 + 56));
}

void re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

unsigned __int8 *re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  unsigned __int8 *result;
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  result = (unsigned __int8 *)re::DataArray<re::DeformationStack>::tryGet((*a2)[1], **a2);
  if (result)
  {
    v4 = result;
    if (*result)
    {
      v5 = 0;
      v6 = 48;
      do
      {
        v7 = *(_QWORD *)(v2[2] + 40 * *(unsigned int *)&v4[4 * v5 + 4]);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, *(_QWORD *)&v4[v6]);
        ++v5;
        v6 += 64;
      }
      while (v5 < *v4);
    }
    return (unsigned __int8 *)re::DataArray<re::DeformationStack>::destroy(v2[1], *v2);
  }
  return result;
}

_QWORD *re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A048;
  return result;
}

_QWORD *re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A048;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::size()
{
  return 16;
}

uint64_t re::ActiveDeformationData::ActiveDeformationData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  re::BucketArray<re::ActiveDeformation,8ul>::init(a1 + 8, a3, 1uLL);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = a3;
  re::DynamicArray<re::DeformationView>::setCapacity((_QWORD *)(a1 + 64), 8uLL);
  ++*(_DWORD *)(a1 + 88);
  return a1;
}

_QWORD *re::BucketArray<re::ActiveDeformation,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ActiveDeformation,8ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ActiveDeformation,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 3200, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::DeformationView>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 96 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::DeformationView>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t i;

  v2 = *a2;
  v3 = (_QWORD *)(*a2 + 64);
  if (*v3)
  {
    if (*(_QWORD *)(v2 + 96))
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 40))(*v3);
    *(_QWORD *)(v2 + 96) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(v2 + 88);
  }
  v4 = *(_QWORD *)(v2 + 48);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      re::BucketArray<re::ActiveDeformation,8ul>::operator[](v2 + 8, i);
  }
  while (*(_QWORD *)(v2 + 16))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)(v2 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 8);
  *(_QWORD *)(v2 + 48) = 0;
  ++*(_DWORD *)(v2 + 56);
  return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 8);
}

_QWORD *re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A0A0;
  return result;
}

_QWORD *re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A0A0;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::operator()(uint64_t a1, re::AttributeTable **a2)
{
  re::AttributeTable::~AttributeTable(*a2);
}

_QWORD *re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A0F8;
  return result;
}

_QWORD *re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A0F8;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::size()
{
  return 16;
}

_anonymous_namespace_ *re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD v14[2];
  _QWORD v15[2];
  uint64_t i;

  v2 = result;
  *((_QWORD *)result + 5) = 0;
  *((_QWORD *)result + 6) = 0;
  v3 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = v3;
  if (v3 >= 0x10)
  {
    v4 = 0;
    *(_QWORD *)&v5 = -1;
    *((_QWORD *)&v5 + 1) = -1;
    do
      *(_OWORD *)(*(_QWORD *)result + 16 * v4++) = v5;
    while (v4 < *((_QWORD *)result + 2) >> 4);
  }
  v15[0] = a2;
  v6 = a2[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a2;
    v9 = v6 >> 4;
    while (1)
    {
      v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v15[1] = (unsigned __int16)~v10;
      if (v10 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        return result;
    }
    v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
    for (i = v11; i != -1; v11 = i)
    {
      v12 = (_OWORD *)(*(_QWORD *)(v15[0] + 8) + 32 * v11);
      v13 = v12[1];
      v14[0] = *v12;
      v14[1] = v13;
      re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(v2, v14, (uint64_t)v14 + 8);
      result = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v15);
    }
  }
  return result;
}

unsigned __int8 *re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(_anonymous_namespace_ *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *result;
  unsigned int v23;
  unint64_t v24;
  _BYTE v25[31];

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9;
  v9 = 0x94D049BB133111EBLL;
  v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  v11 = v10 ^ (v10 >> 31);
  v12 = v7 >> 4;
  v13 = *(_QWORD *)a1;
  v14 = v11 % v12;
  while (1)
  {
    v15 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v15 < 0x40)
      break;
    if (v14 + 1 == v12)
      v14 = 0;
    else
      ++v14;
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v16 = v13 + 16 * v14;
  v17 = *(unsigned __int8 *)(v16 + v15) == 255;
  *(_BYTE *)(v16 + v15) = v11 & 0x7F;
  v18 = v15 + 16 * v14;
  *(_OWORD *)&v25[7] = *(_OWORD *)a3;
  *(_QWORD *)&v25[23] = *(_QWORD *)(a3 + 16);
  v19 = *((_QWORD *)a1 + 1) + 32 * v18;
  *(_BYTE *)v19 = *a2;
  *(_OWORD *)(v19 + 1) = *(_OWORD *)v25;
  *(_OWORD *)(v19 + 16) = *(_OWORD *)&v25[15];
  v20 = *((_QWORD *)a1 + 4) - v17;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v20;
  v21 = (unsigned __int8 *)(*((_QWORD *)a1 + 1) + 32 * v18);
  v23 = *v21;
  result = v21 + 8;
  v24 = ((v23 * v8) ^ ((v23 * v8) >> 27)) * v9;
  *((_QWORD *)a1 + 5) ^= (v24 >> 31) ^ v24;
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *result;
  unsigned int v21;
  unint64_t v22;
  _BYTE v23[31];

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  v9 = v8 ^ (v8 >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  *(_OWORD *)&v23[7] = *(_OWORD *)a3;
  *(_QWORD *)&v23[23] = *(_QWORD *)(a3 + 16);
  v17 = *((_QWORD *)a1 + 1) + 32 * v16;
  *(_BYTE *)v17 = *a2;
  *(_OWORD *)(v17 + 1) = *(_OWORD *)v23;
  *(_OWORD *)(v17 + 16) = *(_OWORD *)&v23[15];
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  v19 = (unsigned __int8 *)(*((_QWORD *)a1 + 1) + 32 * v16);
  v21 = *v19;
  result = v19 + 8;
  v22 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v21) ^ ((0xBF58476D1CE4E5B9 * v21) >> 27));
  *((_QWORD *)a1 + 5) ^= (v22 >> 31) ^ v22;
  return result;
}

uint64_t re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::doResize(a1, v3);
}

_QWORD *re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 33 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    v9 = v3[2];
    if (v9)
    {
      v10 = 0;
      for (i = 0; i < v9; ++i)
      {
        v12 = v3[1] + v10;
        *(_BYTE *)v12 = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 8) = 0;
        v9 = v3[2];
        v10 += 32;
      }
    }
  }
  else
  {
    v9 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

uint64_t re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd((_anonymous_namespace_ *)v22, (_BYTE *)(*(_QWORD *)(v20[0] + 8) + 32 * v10), *(_QWORD *)(v20[0] + 8) + 32 * v10 + 8);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v10 = v21;
      }
      while (v21 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v12 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  result = *((_QWORD *)&v22[3] + 1);
  v13 = v22[0];
  v14 = v22[1];
  *(_QWORD *)&v22[1] = v5;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)&v22[0] = *a1;
  *((_QWORD *)&v22[0] + 1) = v16;
  v17 = v22[2];
  v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16)
      *((_QWORD *)&v22[0] + 1) = 0;
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_anonymous_namespace_ *re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[4];
  int v15;
  __int16 v16;
  int v17;
  char v18;
  _QWORD v19[2];
  uint64_t i;

  v2 = result;
  *((_QWORD *)result + 5) = 0;
  *((_QWORD *)result + 6) = 0;
  v3 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = v3;
  if (v3 >= 0x10)
  {
    v4 = 0;
    *(_QWORD *)&v5 = -1;
    *((_QWORD *)&v5 + 1) = -1;
    do
      *(_OWORD *)(*(_QWORD *)result + 16 * v4++) = v5;
    while (v4 < *((_QWORD *)result + 2) >> 4);
  }
  v19[0] = a2;
  v6 = a2[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a2;
    v9 = v6 >> 4;
    while (1)
    {
      v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v19[1] = (unsigned __int16)~v10;
      if (v10 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        return result;
    }
    v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
    for (i = v11; i != -1; v11 = i)
    {
      v12 = *(_QWORD *)(v19[0] + 8) + 20 * v11;
      v14[0] = *(_BYTE *)v12;
      v13 = *(_DWORD *)(v12 + 4);
      v16 = *(_WORD *)(v12 + 8);
      v15 = v13;
      v17 = *(_DWORD *)(v12 + 12);
      v18 = *(_BYTE *)(v12 + 16);
      re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(v2, v14, &v15);
      result = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v19);
    }
  }
  return result;
}

unsigned __int8 *re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(_anonymous_namespace_ *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  __int16 v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *result;
  unsigned int v27;
  unint64_t v28;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9;
  v9 = 0x94D049BB133111EBLL;
  v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  v11 = v10 ^ (v10 >> 31);
  v12 = v7 >> 4;
  v13 = *(_QWORD *)a1;
  v14 = v11 % v12;
  while (1)
  {
    v15 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v15 <= 0x3F)
      break;
    if (v14 + 1 == v12)
      v14 = 0;
    else
      ++v14;
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v16 = v13 + 16 * v14;
  v17 = *(unsigned __int8 *)(v16 + v15);
  *(_BYTE *)(v16 + v15) = v11 & 0x7F;
  v18 = v15 + 16 * v14;
  v19 = *a3;
  v20 = *((_WORD *)a3 + 2);
  v21 = a3[2];
  v22 = *((_BYTE *)a3 + 12);
  v18 *= 5;
  v23 = *((_QWORD *)a1 + 1) + 4 * v18;
  *(_BYTE *)v23 = *a2;
  *(_WORD *)(v23 + 8) = v20;
  *(_DWORD *)(v23 + 4) = v19;
  *(_DWORD *)(v23 + 12) = v21;
  *(_BYTE *)(v23 + 16) = v22;
  v24 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v24 - (v17 == 255);
  v25 = (unsigned __int8 *)(*((_QWORD *)a1 + 1) + 4 * v18);
  v27 = *v25;
  result = v25 + 4;
  v28 = ((v27 * v8) ^ ((v27 * v8) >> 27)) * v9;
  *((_QWORD *)a1 + 5) ^= (v28 >> 31) ^ v28;
  return result;
}

uint64_t re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::doResize(a1, v3);
}

_QWORD *re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v7 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 21 * v6, 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v8 = 0;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      result = (_QWORD *)*v3;
    }
    v10 = &result[2 * v7];
    v3[1] = v10;
    v6 = v3[2];
    if (v6)
    {
      v11 = (char *)v10 + 9;
      v12 = v3[2];
      do
      {
        *(v11 - 9) = 0;
        *(_DWORD *)(v11 - 5) = 0x10000;
        *(_WORD *)(v11 - 1) = 256;
        v11 += 20;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

uint64_t re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  uint64_t v23;
  _OWORD v24[4];

  v4 = a1[7];
  memset(v24, 0, sizeof(v24));
  re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::init(v24, v4, a2);
  v22[0] = a1;
  v6 = a1[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a1;
    v9 = v6 >> 4;
    v10 = (__n128)xmmword_2260EE390;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v22[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        goto LABEL_9;
    }
    v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    v23 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(v24, *(_QWORD *)(v22[0] + 8) + 20 * v12, *(_QWORD *)(v22[0] + 8) + 20 * v12 + 4, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v22);
        v12 = v23;
      }
      while (v23 != -1);
      v6 = a1[2];
    }
  }
LABEL_9:
  v14 = *((_QWORD *)&v24[3] + 1);
  *((_QWORD *)&v24[3] + 1) = a1[7];
  result = *((_QWORD *)&v24[3] + 1);
  v15 = v24[0];
  v16 = v24[1];
  *(_QWORD *)&v24[1] = v6;
  v17 = *a1;
  v18 = a1[1];
  *(_QWORD *)&v24[0] = *a1;
  *((_QWORD *)&v24[0] + 1) = v18;
  v19 = v24[2];
  v20 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v24[3];
  a1[7] = v14;
  *(_OWORD *)((char *)&v24[2] + 8) = v20;
  v21 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v15;
  *((_OWORD *)a1 + 1) = v16;
  *((_OWORD *)a1 + 2) = v19;
  *(_OWORD *)((char *)&v24[1] + 8) = v21;
  if (result)
  {
    if (v18)
      *((_QWORD *)&v24[0] + 1) = 0;
    if (v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

unsigned __int8 *re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(_anonymous_namespace_ *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  __int16 v17;
  int v18;
  char v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *result;
  unsigned int v25;
  unint64_t v26;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  v9 = v8 ^ (v8 >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  LODWORD(v14) = *(_DWORD *)a3;
  v17 = *(_WORD *)(a3 + 4);
  v18 = *(_DWORD *)(a3 + 8);
  v19 = *(_BYTE *)(a3 + 12);
  v16 *= 5;
  v20 = *((_QWORD *)a1 + 1) + 4 * v16;
  *(_BYTE *)v20 = *a2;
  *(_WORD *)(v20 + 8) = v17;
  *(_DWORD *)(v20 + 4) = v14;
  *(_DWORD *)(v20 + 12) = v18;
  *(_BYTE *)(v20 + 16) = v19;
  v21 = v15 == 255;
  v22 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v22 - v21;
  v23 = (unsigned __int8 *)(*((_QWORD *)a1 + 1) + 4 * v16);
  v25 = *v23;
  result = v23 + 4;
  v26 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v25) ^ ((0xBF58476D1CE4E5B9 * v25) >> 27));
  *((_QWORD *)a1 + 5) ^= (v26 >> 31) ^ v26;
  return result;
}

void re::DeformationVertexBufferState::~DeformationVertexBufferState(re::DeformationVertexBufferState *this)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 248);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 120);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56);
}

void re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  unint64_t j;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t k;

  v2 = *a2;
  for (i = 928; i != 64; i -= 48)
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v2 + i));
  v4 = *(_QWORD *)(v2 + 96);
  if (v4)
  {
    for (j = 0; j != v4; ++j)
      re::BucketArray<unsigned char,8ul>::operator[](v2 + 56, j);
  }
  while (*(_QWORD *)(v2 + 64))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)(v2 + 56));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 56);
  *(_QWORD *)(v2 + 96) = 0;
  ++*(_DWORD *)(v2 + 104);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 56);
  v6 = *(_QWORD *)(v2 + 40);
  if (v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v2, v7);
      v9 = *(_QWORD *)(v8 + 40);
      if (v9)
        break;
LABEL_23:
      while (*(_QWORD *)(v8 + 8))
        re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v8);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v8);
      *(_QWORD *)(v8 + 40) = 0;
      ++*(_DWORD *)(v8 + 48);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v8);
      if (++v7 == v6)
        goto LABEL_27;
    }
    v10 = 0;
    while (1)
    {
      v11 = re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v8, v10);
      v12 = (uint64_t *)(v11 + 8);
      v13 = *(_QWORD *)(v11 + 48);
      v14 = *(_QWORD *)(v11 + 16);
      if (v13)
        break;
      if (v14)
        goto LABEL_19;
LABEL_20:
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v12);
      *(_QWORD *)(v11 + 48) = 0;
      ++*(_DWORD *)(v11 + 56);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v12);
      if (++v10 == v9)
        goto LABEL_23;
    }
    for (k = 0; k != v13; ++k)
    {
      if (v14 <= k >> 6)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    do
LABEL_19:
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v12);
    while (*(_QWORD *)(v11 + 16));
    goto LABEL_20;
  }
LABEL_27:
  while (*(_QWORD *)(v2 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  *(_QWORD *)(v2 + 40) = 0;
  ++*(_DWORD *)(v2 + 48);
  return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
}

_QWORD *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A150;
  return result;
}

_QWORD *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A150;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::operator()(uint64_t a1, _QWORD **a2)
{
  return re::FixedArray<re::DeformationVertexBufferState>::deinit(*a2);
}

_QWORD *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A1A8;
  return result;
}

_QWORD *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7A1A8;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::size()
{
  return 16;
}

_QWORD *re::DynamicArray<re::Pair<re::DeformerType,unsigned long long,true>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::Pair<re::DeformerType,unsigned long long,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::DataArray<re::DeformationStack>::allocBlock(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = 1032 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::DataArray<re::DeformationStack>::ElementBlock>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  _os_crash();
  __break(1u);
}

__n128 re::DynamicArray<re::DataArray<re::DeformationStack>::ElementBlock>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DataArray<re::DeformationStack>::ElementBlock>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::DataArray<re::DeformationStack>::ElementBlock>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Pair<re::DeformerType,unsigned long long,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::DeformerType,unsigned long long,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::DeformationView>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DeformationView>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DeformationView>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::FixedArray<re::DeformationVertexBufferState>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >= 0xD20D20D20D20D3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 312, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 312 * a3;
  v6 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 312 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 312);
    v8 += v5 - 312;
  }
  *((_QWORD *)v8 + 38) = 0;
  *((_OWORD *)v8 + 17) = 0u;
  *((_OWORD *)v8 + 18) = 0u;
  *((_OWORD *)v8 + 15) = 0u;
  *((_OWORD *)v8 + 16) = 0u;
  *((_OWORD *)v8 + 13) = 0u;
  *((_OWORD *)v8 + 14) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)v8 = 0u;
}

_QWORD *re::FixedArray<re::DeformationVertexBufferState>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::DeformationVertexBufferState *v4;
  uint64_t v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::DeformationVertexBufferState *)result[2];
      v5 = 312 * v2;
      do
      {
        re::DeformationVertexBufferState::~DeformationVertexBufferState(v4);
        v4 = (re::DeformationVertexBufferState *)(v6 + 312);
        v5 -= 312;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 40 * (v2 & 7);
}

_QWORD *re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 320, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::DynamicArray<re::EventWait>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::EventWait>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_15;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 16 * v9);
        v11 = v7;
        v12 = (_QWORD *)v5[4];
        do
        {
          v13 = v12[1];
          *v11 = *v12;
          *v12 = 0;
          v12 += 2;
          v11[1] = v13;
          v11 += 2;
        }
        while (v12 != v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

void re::DynamicInlineArray<re::KeyValuePair<MTL::Event *,re::EventWait>,8ul>::clear(uint64_t a1)
{
  uint64_t v2;
  id *v3;

  if (*(_QWORD *)a1)
  {
    v2 = 24 * *(_QWORD *)a1;
    v3 = (id *)(a1 + 24);
    do
    {
      if (*v3)
      {

        *v3 = 0;
      }
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v11 + 32 * v10 + 8) == v6)
      {
LABEL_6:
        v12 = v11 + 32 * v10;
        return v12 + 16;
      }
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 32 * v10 + 8) == v6)
          goto LABEL_6;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v13 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v13 == 0x7FFFFFFF)
  {
    v13 = *(unsigned int *)(a1 + 32);
    v14 = v13;
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v14 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v14 + 1;
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_DWORD *)(v15 + 32 * v13);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_DWORD *)(v15 + 32 * v13);
    *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
  }
  v17 = 32 * v13;
  *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v13) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v13 + 8) = v6;
  v18 = *(_QWORD *)(a1 + 16) + 32 * v13;
  v19 = *(id *)a3;
  v20 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v18 + 16) = v19;
  *(_QWORD *)(v18 + 24) = v20;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v13;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
  return v12 + 16;
}

void re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v15[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = (_QWORD *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v11 - 1) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9 * (*v11 ^ (*v11 >> 30));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, v11, v11 + 1);
          }
          v11 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::addAsMove(uint64_t result, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = result;
  v8 = *(unsigned int *)(result + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(result + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(result + 24))
    {
      result = re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::setCapacity(result, (2 * *(_DWORD *)(result + 28)));
      a2 = a3 % *(unsigned int *)(v7 + 24);
      v9 = *(_DWORD *)(v7 + 32);
    }
    *(_DWORD *)(v7 + 32) = v9 + 1;
    v11 = *(_QWORD *)(v7 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(result + 16);
    v12 = *(_DWORD *)(v11 + 32 * v8);
    *(_DWORD *)(result + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 32 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(v7 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 32 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(v7 + 16) + 32 * v8 + 8) = *a4;
  v14 = *(_QWORD *)(v7 + 8);
  v15 = *(_QWORD *)(v7 + 16) + 32 * v8;
  v16 = a5[1];
  *(_QWORD *)(v15 + 16) = *a5;
  *a5 = 0;
  *(_QWORD *)(v15 + 24) = v16;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(v7 + 28);
  return result;
}

_QWORD *re::BucketArray<re::internal::DeformationCallbackData,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::internal::DeformationCallbackData,8ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::internal::DeformationCallbackData,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 896, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ActiveDeformation *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

BOOL re::PSOToolManager::init(id *this, re::ns *a2)
{
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id v14;
  id v15;
  void *v16;
  __int128 v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  id v27;

  re::mtl::makeDefaultDevice(&v23);
  v4 = this + 19;
  if (this + 19 != (id *)&v23)
  {
    v5 = (void *)v23;
    *(_QWORD *)&v23 = 0;
    v6 = *v4;
    *v4 = v5;

  }
  objc_msgSend(this[19], "allowLibrariesFromOtherPlatforms");
  re::mtl::Device::makeLibraryWithFile(this + 19, a2, (re **)&v23);
  v7 = this + 20;
  if (this + 20 != (id *)&v23)
  {
    v8 = (void *)v23;
    *(_QWORD *)&v23 = 0;
    v9 = *v7;
    *v7 = v8;

  }
  v10 = *v7;
  if (v10)
  {
    re::MaterialManager::getDefaultVariations((re::MaterialManager *)1, 1, 1, 1u, &v23);
    if (&v23 != (__int128 *)this)
    {
      v11 = v24;
      v12 = *(_OWORD *)this;
      v13 = *((_OWORD *)this + 1);
      *(_OWORD *)this = v23;
      *((_OWORD *)this + 1) = v11;
      v15 = this[6];
      v14 = this[7];
      v16 = v27;
      this[6] = v26;
      this[7] = v16;
      v26 = v15;
      v27 = v14;
      v23 = v12;
      v24 = v13;
      v17 = *((_OWORD *)this + 2);
      *((_OWORD *)this + 2) = v25;
      v25 = v17;
    }
    re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)&v23);
    re::createMaterialSystemShaderMetadata((uint64_t)&v23);
    re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)(this + 21), (uint64_t *)&v23);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v23);
  }
  else
  {
    v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"error: could not create metallib from path ", 43);
    v19 = strlen((const char *)a2);
    v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)a2, v19);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
    v21 = std::locale::use_facet((const std::locale *)&v23, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale((std::locale *)&v23);
    std::ostream::put();
    std::ostream::flush();
  }
  return v10 != 0;
}

_QWORD *std::operator<<[abi:nn180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

_QWORD *std::endl[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

uint64_t re::PSOToolManager::addSearchPath(re::PSOToolManager *this, const char *a2)
{
  _anonymous_namespace_ *v3;
  double v4;
  uint64_t result;
  uint64_t v6;
  char v7;

  v3 = (re::PSOToolManager *)((char *)this + 112);
  v4 = re::DynamicArray<re::DynamicString>::add(v3, &v6);
  result = v6;
  if (v6)
  {
    if ((v7 & 1) != 0)
      return (*(uint64_t (**)(double))(*(_QWORD *)v6 + 40))(v4);
  }
  return result;
}

uint64_t re::PSOToolManager::readMaterialDefinitions(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  const re::DynamicString *v3;
  char *v4;
  char *v5;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *ptr;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__fs::filesystem::directory_entry *v15;
  _anonymous_namespace_ *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__fs::filesystem::path::__string_view v22;
  int v23;
  std::__fs::filesystem::path::__string_view v24;
  _anonymous_namespace_ *v25;
  int v26;
  _QWORD *v27;
  size_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  re::MaterialDefinitionFile *v31;
  _anonymous_namespace_ *v32;
  const char *locale;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  re *v39;
  _anonymous_namespace_ *v40;
  const char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  const char *v53;
  size_t v54;
  _QWORD *v55;
  _QWORD *v56;
  size_t v57;
  _QWORD *v58;
  const std::locale::facet *v59;
  std::__shared_weak_count *cntrl;
  uint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  const char *v72;
  size_t v73;
  _QWORD *v74;
  _QWORD *v75;
  size_t v76;
  _QWORD *v77;
  const std::locale::facet *v78;
  double v79;
  double v80;
  char *v81;
  const re::DynamicString *v82;
  _QWORD *v83;
  _QWORD *v84;
  _BYTE v85[8];
  __int128 v86;
  __int128 v87;
  std::locale v88;
  char v89;
  _BYTE v90[32];
  _BYTE v91[8];
  __int128 v92;
  __int128 v93;
  void *__p[2];
  __int128 v95;
  _BYTE v96[60];
  uint64_t v97;
  uint64_t v98[4];
  int v99;
  uint64_t v100;
  uint64_t v101[4];
  int v102;
  uint64_t v103;
  uint64_t v104[4];
  int v105;
  uint64_t v106;
  uint64_t v107[4];
  int v108;
  uint64_t v109;
  uint64_t v110[4];
  int v111;
  uint64_t v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  _BYTE v122[24];
  int v123;
  uint64_t v124;
  std::__fs::filesystem::directory_iterator v125;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  char v129;
  _BYTE v130[23];
  void (**v131)(re::DeferredAssetDeserialize *__hidden);
  _BYTE v132[17];

  v131 = &off_24ED2D2A8;
  v1 = *(_QWORD *)(this + 128);
  if (!v1)
    return this;
  v2 = this;
  v3 = *(const re::DynamicString **)(this + 144);
  v81 = (char *)v3 + 32 * v1;
  v83 = (_QWORD *)(this + 264);
  v84 = (_QWORD *)(this + 216);
  do
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v128, v3);
    if ((v129 & 1) != 0)
      v4 = *(char **)&v130[7];
    else
      v4 = v130;
    __p[1] = 0;
    *(_QWORD *)&v95 = 0;
    __p[0] = 0;
    v5 = v4 - 1;
    while (*++v5)
      ;
    std::string::append[abi:nn180100]<char const*,0>((std::string *)__p, v4, v5);
    MEMORY[0x227693244](&v126, __p, 0, 0);
    if (SBYTE7(v95) < 0)
      operator delete(__p[0]);
    ptr = v126;
    v8 = v127;
    v82 = v3;
    if (v127)
    {
      p_shared_owners = (unint64_t *)&v127->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = v127;
      v125.__imp_.__ptr_ = ptr;
      v125.__imp_.__cntrl_ = v8;
      if (v127)
      {
        v12 = (unint64_t *)&v127->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
        do
          v14 = __ldaxr(v12);
        while (__stlxr(v14 - 1, v12));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_20;
      }
    }
    else
    {
      v125.__imp_.__ptr_ = v126;
      v125.__imp_.__cntrl_ = 0;
    }
    while (ptr)
    {
      v15 = (std::__fs::filesystem::directory_entry *)std::__fs::filesystem::directory_iterator::__dereference(&v125);
      std::__fs::filesystem::path::filename[abi:nn180100](&v15->__p_, (uint64_t)v90);
      if (v90[23] >= 0)
        v17 = v90;
      else
        v17 = *(const char **)v90;
      v18 = *(_QWORD *)(v2 + 616);
      v19 = *(_QWORD *)(v2 + 632);
      if (v18)
      {
        v20 = 32 * v18;
        v21 = *(_QWORD *)(v2 + 632);
        while (!re::DynamicString::operator==(v21, (uint64_t)__p))
        {
          v21 += 32;
          v20 -= 32;
          if (!v20)
          {
            v21 = v19 + 32 * v18;
            break;
          }
        }
      }
      else
      {
        v21 = *(_QWORD *)(v2 + 632);
      }
      if (__p[0])
      {
        if (((uint64_t)__p[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)__p[0] + 40))();
        *(_OWORD *)__p = 0u;
        v95 = 0u;
      }
      if ((v90[23] & 0x80000000) != 0)
        operator delete(*(void **)v90);
      if ((v21 - v19) >> 5 != v18)
      {
        v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Excluding ", 10);
        if ((v15->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = (std::__fs::filesystem::directory_entry *)v15->__p_.__pn_.__r_.__value_.__r.__words[0];
        v28 = strlen((const char *)v15);
        v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)v15, v28);
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
        v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_120;
      }
      std::__fs::filesystem::path::extension[abi:nn180100]((uint64_t)__p, &v15->__p_);
      memset(v90, 0, 24);
      std::string::append[abi:nn180100]<char const*,0>((std::string *)v90, ".rematerialdefinition", "");
      if (v90[23] >= 0)
        v22.__data_ = v90;
      else
        v22.__data_ = *(const std::string_view::value_type **)v90;
      if (v90[23] >= 0)
        v22.__size_ = v90[23];
      else
        v22.__size_ = *(_QWORD *)&v90[8];
      v23 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)__p, v22);
      if ((v90[23] & 0x80000000) != 0)
        operator delete(*(void **)v90);
      if (SBYTE7(v95) < 0)
        operator delete(__p[0]);
      if (!v23)
      {
        re::MaterialDefinitionFile::MaterialDefinitionFile((re::MaterialDefinitionFile *)__p);
        if ((v15->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = (re::MaterialDefinitionFile *)v15;
        else
          v31 = (re::MaterialDefinitionFile *)v15->__p_.__pn_.__r_.__value_.__r.__words[0];
        re::compileMaterialDefinitionFile((re *)__p, v31, (re::IntrospectionBase *)&v131, (uint64_t)v91);
        if (!v91[0] && (_QWORD)v92)
        {
          if ((BYTE8(v92) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v92 + 40))();
          v92 = 0u;
          v93 = 0u;
        }
        std::__fs::filesystem::path::filename[abi:nn180100](&v15->__p_, (uint64_t)&v88);
        if (v89 >= 0)
          locale = (const char *)&v88;
        else
          locale = (const char *)v88.__locale_;
        v34 = re::Hash<re::DynamicString>::operator()((uint64_t)v132, (uint64_t)v90);
        v35 = v34;
        if (*v84)
        {
          v36 = v34 % *(unsigned int *)(v2 + 240);
          v37 = *(unsigned int *)(*(_QWORD *)(v2 + 224) + 4 * v36);
          if ((_DWORD)v37 != 0x7FFFFFFF)
          {
            v38 = *(_QWORD *)(v2 + 232);
            while (!re::DynamicString::operator==(v38 + 784 * v37 + 16, (uint64_t)v90))
            {
              v37 = *(_DWORD *)(v38 + 784 * v37 + 8) & 0x7FFFFFFF;
              if (v37 == 0x7FFFFFFF)
                goto LABEL_100;
            }
            goto LABEL_106;
          }
        }
        else
        {
          v36 = 0;
        }
LABEL_100:
        v47 = *(_DWORD *)(v2 + 252);
        if (v47 == 0x7FFFFFFF)
        {
          v47 = *(_DWORD *)(v2 + 248);
          v48 = v47;
          if (v47 == *(_DWORD *)(v2 + 240))
          {
            re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v84, 2 * *(_DWORD *)(v2 + 244));
            v36 = v35 % *(unsigned int *)(v2 + 240);
            v48 = *(_DWORD *)(v2 + 248);
          }
          *(_DWORD *)(v2 + 248) = v48 + 1;
          v49 = *(_QWORD *)(v2 + 232);
          v50 = *(_DWORD *)(v49 + 784 * v47 + 8);
        }
        else
        {
          v49 = *(_QWORD *)(v2 + 232);
          v50 = *(_DWORD *)(v49 + 784 * v47 + 8);
          *(_DWORD *)(v2 + 252) = v50 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v49 + 784 * v47 + 8) = v50 | 0x80000000;
        v51 = *(_QWORD *)(v2 + 232) + 784 * v47;
        *(_DWORD *)(v51 + 8) = *(_DWORD *)(v51 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v2 + 224) + 4 * v36);
        *(_QWORD *)(*(_QWORD *)(v2 + 232) + 784 * v47) = v35;
        re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(v2 + 232) + 784 * v47 + 16), (const re::DynamicString *)v90);
        re::MaterialDefinitionFile::MaterialDefinitionFile((re::MaterialDefinitionFile *)(*(_QWORD *)(v2 + 232) + 784 * v47 + 48), (const re::MaterialDefinitionFile *)__p);
        *(_DWORD *)(*(_QWORD *)(v2 + 224) + 4 * v36) = v47;
        ++*(_DWORD *)(v2 + 244);
        ++*(_DWORD *)(v2 + 256);
LABEL_106:
        if (*(_QWORD *)v90)
        {
          if ((v90[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v90 + 40))();
          memset(v90, 0, sizeof(v90));
        }
        if (v89 < 0)
          operator delete(v88.__locale_);
        v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Reading ", 8);
        std::__fs::filesystem::path::filename[abi:nn180100](&v15->__p_, (uint64_t)v90);
        if (v90[23] >= 0)
          v53 = v90;
        else
          v53 = *(const char **)v90;
        v54 = strlen(v53);
        v55 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
        v56 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)" from ", 6);
        if ((v15->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = (std::__fs::filesystem::directory_entry *)v15->__p_.__pn_.__r_.__value_.__r.__words[0];
        v57 = strlen((const char *)v15);
        v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)v15, v57);
        std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)));
        v59 = std::locale::use_facet(&v88, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
        std::locale::~locale(&v88);
        std::ostream::put();
        std::ostream::flush();
        if ((v90[23] & 0x80000000) != 0)
          operator delete(*(void **)v90);
        re::MaterialDefinitionFile::~MaterialDefinitionFile((re::MaterialDefinitionFile *)__p);
        goto LABEL_120;
      }
      std::__fs::filesystem::path::extension[abi:nn180100]((uint64_t)__p, &v15->__p_);
      memset(v90, 0, 24);
      std::string::append[abi:nn180100]<char const*,0>((std::string *)v90, ".rematerial", "");
      if (v90[23] >= 0)
        v24.__data_ = v90;
      else
        v24.__data_ = *(const std::string_view::value_type **)v90;
      if (v90[23] >= 0)
        v24.__size_ = v90[23];
      else
        v24.__size_ = *(_QWORD *)&v90[8];
      v25 = (_anonymous_namespace_ *)std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)__p, v24);
      v26 = (int)v25;
      if ((v90[23] & 0x80000000) != 0)
        operator delete(*(void **)v90);
      if (SBYTE7(v95) < 0)
      {
        operator delete(__p[0]);
        if (!v26)
        {
LABEL_82:
          *(_OWORD *)__p = 0u;
          v95 = 0u;
          re::DynamicString::setCapacity(__p, 0);
          memset(v96, 0, sizeof(v96));
          v97 = 0x7FFFFFFFLL;
          memset(v98, 0, sizeof(v98));
          v99 = 0;
          v100 = 0x7FFFFFFFLL;
          memset(v101, 0, sizeof(v101));
          v102 = 0;
          v103 = 0x7FFFFFFFLL;
          memset(v104, 0, sizeof(v104));
          v105 = 0;
          v106 = 0x7FFFFFFFLL;
          v108 = 0;
          memset(v107, 0, sizeof(v107));
          v109 = 0x7FFFFFFFLL;
          memset(v110, 0, sizeof(v110));
          v111 = 0;
          v112 = 0x7FFFFFFFLL;
          v113 = 0;
          v114 = 0;
          v115 = 0;
          v116 = 0;
          v117 = 0;
          v118 = 0;
          v119 = 0;
          v120 = 0;
          v121 = 0;
          v124 = 0;
          v123 = 0;
          memset(v122, 0, sizeof(v122));
          if ((v15->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = (re *)v15;
          else
            v39 = (re *)v15->__p_.__pn_.__r_.__value_.__r.__words[0];
          re::compileMaterialFile((char *)__p, v39, (re::IntrospectionBase *)&v131, (uint64_t)v85);
          if (!v85[0] && (_QWORD)v86)
          {
            if ((BYTE8(v86) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v86 + 40))();
            v86 = 0u;
            v87 = 0u;
          }
          std::__fs::filesystem::path::filename[abi:nn180100](&v15->__p_, (uint64_t)&v88);
          if (v89 >= 0)
            v41 = (const char *)&v88;
          else
            v41 = (const char *)v88.__locale_;
          v42 = re::Hash<re::DynamicString>::operator()((uint64_t)v132, (uint64_t)v90);
          v43 = v42;
          if (*v83)
          {
            v44 = v42 % *(unsigned int *)(v2 + 288);
            v45 = *(unsigned int *)(*(_QWORD *)(v2 + 272) + 4 * v44);
            if ((_DWORD)v45 != 0x7FFFFFFF)
            {
              v46 = *(_QWORD *)(v2 + 280);
              while (!re::DynamicString::operator==(v46 + 456 * v45 + 16, (uint64_t)v90))
              {
                v45 = *(_DWORD *)(v46 + 456 * v45 + 8) & 0x7FFFFFFF;
                if (v45 == 0x7FFFFFFF)
                  goto LABEL_137;
              }
              goto LABEL_143;
            }
          }
          else
          {
            v44 = 0;
          }
LABEL_137:
          v66 = *(_DWORD *)(v2 + 300);
          if (v66 == 0x7FFFFFFF)
          {
            v66 = *(_DWORD *)(v2 + 296);
            v67 = v66;
            if (v66 == *(_DWORD *)(v2 + 288))
            {
              re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v83, 2 * *(_DWORD *)(v2 + 292));
              v44 = v43 % *(unsigned int *)(v2 + 288);
              v67 = *(_DWORD *)(v2 + 296);
            }
            *(_DWORD *)(v2 + 296) = v67 + 1;
            v68 = *(_QWORD *)(v2 + 280);
            v69 = *(_DWORD *)(v68 + 456 * v66 + 8);
          }
          else
          {
            v68 = *(_QWORD *)(v2 + 280);
            v69 = *(_DWORD *)(v68 + 456 * v66 + 8);
            *(_DWORD *)(v2 + 300) = v69 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v68 + 456 * v66 + 8) = v69 | 0x80000000;
          v70 = *(_QWORD *)(v2 + 280) + 456 * v66;
          *(_DWORD *)(v70 + 8) = *(_DWORD *)(v70 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v2 + 272) + 4 * v44);
          *(_QWORD *)(*(_QWORD *)(v2 + 280) + 456 * v66) = v43;
          re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(v2 + 280) + 456 * v66 + 16), (const re::DynamicString *)v90);
          re::MaterialFile::MaterialFile(*(_QWORD *)(v2 + 280) + 456 * v66 + 48, (uint64_t)__p);
          *(_DWORD *)(*(_QWORD *)(v2 + 272) + 4 * v44) = v66;
          ++*(_DWORD *)(v2 + 292);
          ++*(_DWORD *)(v2 + 304);
LABEL_143:
          if (*(_QWORD *)v90)
          {
            if ((v90[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)v90 + 40))();
            memset(v90, 0, sizeof(v90));
          }
          if (v89 < 0)
            operator delete(v88.__locale_);
          v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Reading ", 8);
          std::__fs::filesystem::path::filename[abi:nn180100](&v15->__p_, (uint64_t)v90);
          if (v90[23] >= 0)
            v72 = v90;
          else
            v72 = *(const char **)v90;
          v73 = strlen(v72);
          v74 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
          v75 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)" from ", 6);
          if ((v15->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v15 = (std::__fs::filesystem::directory_entry *)v15->__p_.__pn_.__r_.__value_.__r.__words[0];
          v76 = strlen((const char *)v15);
          v77 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)v15, v76);
          std::ios_base::getloc((const std::ios_base *)((char *)v77 + *(_QWORD *)(*v77 - 24)));
          v78 = std::locale::use_facet(&v88, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10);
          std::locale::~locale(&v88);
          std::ostream::put();
          std::ostream::flush();
          if ((v90[23] & 0x80000000) != 0)
            operator delete(*(void **)v90);
          re::DynamicArray<re::FunctionLink>::deinit((uint64_t)v122, v79);
          v80 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v110);
          re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v107, v80);
          re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v104);
          re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v101);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v98);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v96[24]);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v96);
          if (__p[0])
          {
            if (((uint64_t)__p[1] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)__p[0] + 40))();
          }
        }
      }
      else if (!v26)
      {
        goto LABEL_82;
      }
LABEL_120:
      std::__fs::filesystem::directory_iterator::__increment(&v125, 0);
LABEL_20:
      ptr = v125.__imp_.__ptr_;
    }
    cntrl = v125.__imp_.__cntrl_;
    if (v125.__imp_.__cntrl_)
    {
      v61 = &v125.__imp_.__cntrl_->__shared_owners_;
      do
        v62 = __ldaxr((unint64_t *)v61);
      while (__stlxr(v62 - 1, (unint64_t *)v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
        std::__shared_weak_count::__release_weak(cntrl);
      }
    }
    v63 = v127;
    if (v127)
    {
      v64 = (unint64_t *)&v127->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    this = v128;
    if (v128 && (v129 & 1) != 0)
      this = (*(uint64_t (**)(void))(*(_QWORD *)v128 + 40))();
    v3 = (const re::DynamicString *)((char *)v3 + 32);
  }
  while ((char *)v82 + 32 != v81);
  return this;
}

double std::__fs::filesystem::path::extension[abi:nn180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__extension(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t re::PSOToolManager::generateFunctionVariationsForTechnique(re::PSOToolManager *this, const char *a2, const char *a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  __n128 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  __n128 v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  re::MaterialDefinitionFile *FlattenedMaterialFile;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const re::MaterialTechniqueData *v63;
  uint64_t v64;
  uint64_t v65;
  const re::MaterialTechniqueData *v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  _QWORD *v70;
  const char *v71;
  size_t v72;
  _QWORD *v73;
  _QWORD *v74;
  const char *v75;
  double v76;
  double v77;
  size_t v78;
  _QWORD *v79;
  const std::locale::facet *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  const char *v85;
  const char *v86;
  const re::DynamicString *v87;
  uint64_t v88;
  uint64_t v89;
  const re::MaterialTechniqueQualityLevelSetData *v90;
  const re::MaterialTechniqueQualityLevelSetData *v91;
  const char *v92;
  const char *v93;
  re::DynamicString *v94;
  uint64_t v95;
  re::DynamicString *v96;
  uint64_t v97;
  double v98;
  uint64_t result;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  re::DynamicString *v106;
  std::locale v107[2];
  __int128 v108;
  _BYTE v109[16];
  uint64_t v110;
  uint64_t v111[3];
  uint64_t v112;
  re::DynamicString *v113;
  uint64_t v114[6];
  uint64_t v115[6];
  uint64_t v116[6];
  uint64_t v117[6];
  uint64_t v118[9];
  uint64_t v119;
  _OWORD v120[2];
  _OWORD v121[2];
  int v122;
  uint64_t v123;
  _OWORD v124[2];
  _OWORD v125[2];
  _OWORD v126[2];
  _OWORD v127[2];
  _QWORD v128[2];
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  _BYTE v134[7];
  const char *v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  _BYTE v140[7];
  const char *v141;

  v131 = 0;
  v128[1] = 0;
  v129 = 0;
  v128[0] = 0;
  v130 = 0;
  v6 = strcmp(a2, "*");
  if ((_DWORD)v6)
  {
    re::makeTruncatedAssetPath((char *)v125, (re::DynamicString *)v107);
    v7.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v128, v107);
    if (v107[0].__locale_)
    {
      if (((uint64_t)v107[1].__locale_ & 1) != 0)
        (*(void (**)(double))(*(_QWORD *)v107[0].__locale_ + 40))(v7.n128_f64[0]);
      v7 = 0uLL;
      *(_OWORD *)&v107[0].__locale_ = 0u;
      v108 = 0u;
    }
    v6 = *(_QWORD *)&v125[0];
    if (*(_QWORD *)&v125[0])
    {
      if ((BYTE8(v125[0]) & 1) != 0)
        v6 = (*(uint64_t (**)(__n128))(**(_QWORD **)&v125[0] + 40))(v7);
      memset(v125, 0, sizeof(v125));
    }
  }
  else
  {
    v8 = *((unsigned int *)this + 74);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = (_DWORD *)(*((_QWORD *)this + 35) + 8);
      while ((*v10 & 0x80000000) == 0)
      {
        v10 += 114;
        if (v8 == ++v9)
        {
          LODWORD(v9) = *((_DWORD *)this + 74);
          break;
        }
      }
    }
    else
    {
      LODWORD(v9) = 0;
    }
    if ((_DWORD)v8 != (_DWORD)v9)
    {
      v11 = v9;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)v127, (const re::DynamicString *)(*((_QWORD *)this + 35) + 456 * v11 + 16));
        re::makeTruncatedAssetPath((char *)v127, (re::DynamicString *)v107);
        v12.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v128, v107);
        if (v107[0].__locale_)
        {
          if (((uint64_t)v107[1].__locale_ & 1) != 0)
            (*(void (**)(double))(*(_QWORD *)v107[0].__locale_ + 40))(v12.n128_f64[0]);
          v12 = 0uLL;
          *(_OWORD *)&v107[0].__locale_ = 0u;
          v108 = 0u;
        }
        v6 = *(_QWORD *)&v127[0];
        if (*(_QWORD *)&v127[0])
        {
          if ((BYTE8(v127[0]) & 1) != 0)
            v6 = (*(uint64_t (**)(__n128))(**(_QWORD **)&v127[0] + 40))(v12);
          memset(v127, 0, sizeof(v127));
        }
        if (*((_DWORD *)this + 74) <= (v9 + 1))
          v13 = v9 + 1;
        else
          v13 = *((_DWORD *)this + 74);
        while (1)
        {
          v11 = (v9 + 1);
          if (v13 - 1 == (_DWORD)v9)
            break;
          LODWORD(v9) = v9 + 1;
          v14 = v11;
          if ((*(_DWORD *)(*((_QWORD *)this + 35) + 456 * v11 + 8) & 0x80000000) != 0)
            goto LABEL_33;
        }
        v14 = v13;
LABEL_33:
        LODWORD(v9) = v14;
      }
      while ((_DWORD)v8 != v14);
    }
    v15 = *((unsigned int *)this + 62);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = (_DWORD *)(*((_QWORD *)this + 29) + 8);
      while ((*v17 & 0x80000000) == 0)
      {
        v17 += 196;
        if (v15 == ++v16)
        {
          LODWORD(v16) = *((_DWORD *)this + 62);
          break;
        }
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
    if ((_DWORD)v15 != (_DWORD)v16)
    {
      v18 = v16;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)v126, (const re::DynamicString *)(*((_QWORD *)this + 29) + 784 * v18 + 16));
        re::makeTruncatedAssetPath((char *)v126, (re::DynamicString *)v107);
        v19.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v128, v107);
        if (v107[0].__locale_)
        {
          if (((uint64_t)v107[1].__locale_ & 1) != 0)
            (*(void (**)(double))(*(_QWORD *)v107[0].__locale_ + 40))(v19.n128_f64[0]);
          v19 = 0uLL;
          *(_OWORD *)&v107[0].__locale_ = 0u;
          v108 = 0u;
        }
        v6 = *(_QWORD *)&v126[0];
        if (*(_QWORD *)&v126[0])
        {
          if ((BYTE8(v126[0]) & 1) != 0)
            v6 = (*(uint64_t (**)(__n128))(**(_QWORD **)&v126[0] + 40))(v19);
          memset(v126, 0, sizeof(v126));
        }
        if (*((_DWORD *)this + 62) <= (v16 + 1))
          v20 = v16 + 1;
        else
          v20 = *((_DWORD *)this + 62);
        while (1)
        {
          v18 = (v16 + 1);
          if (v20 - 1 == (_DWORD)v16)
            break;
          LODWORD(v16) = v16 + 1;
          v21 = v18;
          if ((*(_DWORD *)(*((_QWORD *)this + 29) + 784 * v18 + 8) & 0x80000000) != 0)
            goto LABEL_57;
        }
        v21 = v20;
LABEL_57:
        LODWORD(v16) = v21;
      }
      while ((_DWORD)v15 != v21);
    }
  }
  if (!v129)
  {
LABEL_221:
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)v128);
    result = v132;
    if (v132)
    {
      if ((v133 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v132 + 40))();
    }
    return result;
  }
  v22 = v131;
  v102 = (_QWORD *)((char *)this + 216);
  v103 = v131 + 32 * v129;
  v101 = (_QWORD *)((char *)this + 312);
  while (1)
  {
    v23 = *((_QWORD *)this + 77);
    v24 = *((_QWORD *)this + 79);
    if (v23)
    {
      v25 = 32 * v23;
      v26 = *((_QWORD *)this + 79);
      while (1)
      {
        v6 = re::DynamicString::operator==(v26, v22);
        if ((v6 & 1) != 0)
          break;
        v26 += 32;
        v25 -= 32;
        if (!v25)
        {
          v26 = v24 + 32 * v23;
          break;
        }
      }
    }
    else
    {
      v26 = *((_QWORD *)this + 79);
    }
    if (v23 != (v26 - v24) >> 5)
      goto LABEL_220;
    memset(v124, 0, sizeof(v124));
    re::DynamicString::setCapacity(v124, 0);
    v122 = 0;
    memset(v121, 0, sizeof(v121));
    v123 = 0x7FFFFFFFLL;
    v27 = re::Hash<re::DynamicString>::operator()((uint64_t)v107, v22);
    if (!*((_QWORD *)this + 33))
      break;
    v28 = *(unsigned int *)(*((_QWORD *)this + 34) + 4 * (v27 % *((unsigned int *)this + 72)));
    if ((_DWORD)v28 == 0x7FFFFFFF)
      break;
    v29 = *((_QWORD *)this + 35);
    while (!re::DynamicString::operator==(v29 + 456 * v28 + 16, v22))
    {
      v28 = *(_DWORD *)(v29 + 456 * v28 + 8) & 0x7FFFFFFF;
      if (v28 == 0x7FFFFFFF)
        goto LABEL_73;
    }
    v41 = re::Hash<re::DynamicString>::operator()((uint64_t)&v104, v22);
    if (*((_QWORD *)this + 33))
    {
      v42 = *((_QWORD *)this + 35);
      v43 = *(unsigned int *)(*((_QWORD *)this + 34) + 4 * (v41 % *((unsigned int *)this + 72)));
      if ((_DWORD)v43 != 0x7FFFFFFF)
      {
        while (!re::DynamicString::operator==(v42 + 456 * v43 + 16, v22))
        {
          v43 = *(_DWORD *)(v42 + 456 * v43 + 8) & 0x7FFFFFFF;
          if (v43 == 0x7FFFFFFF)
            goto LABEL_149;
        }
        goto LABEL_150;
      }
    }
    else
    {
      v42 = *((_QWORD *)this + 35);
    }
LABEL_149:
    v43 = 0x7FFFFFFFLL;
LABEL_150:
    re::MaterialFile::MaterialFile((uint64_t)v107, v42 + 456 * v43 + 48);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v121, (uint64_t)v118);
    re::AssetHandle::serializationString((re::AssetHandle *)v109, (re::DynamicString *)v120);
    re::makeTruncatedAssetPath((char *)v120, (re::DynamicString *)&v104);
    re::DynamicString::operator=((re::DynamicString *)v124, (re::DynamicString *)&v104);
    if ((_QWORD)v104)
    {
      if ((BYTE8(v104) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v104 + 40))();
      v76 = 0.0;
      v104 = 0u;
      v105 = 0u;
    }
    if (*(_QWORD *)&v120[0])
    {
      if ((BYTE8(v120[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v120[0] + 40))();
      v76 = 0.0;
      memset(v120, 0, sizeof(v120));
    }
    re::DynamicArray<re::FunctionLink>::deinit((uint64_t)&v119, v76);
    v77 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v118);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v117, v77);
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v116);
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v115);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v114);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v111);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v109);
    if (v107[0].__locale_ && ((uint64_t)v107[1].__locale_ & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v107[0].__locale_ + 40))();
LABEL_75:
    v31 = *((_QWORD *)this + 77);
    v32 = *((_QWORD *)this + 79);
    if (v31)
    {
      v33 = 32 * v31;
      v34 = *((_QWORD *)this + 79);
      while (!re::DynamicString::operator==(v34, (uint64_t)v124))
      {
        v34 += 32;
        v33 -= 32;
        if (!v33)
        {
          v34 = v32 + 32 * v31;
          break;
        }
      }
    }
    else
    {
      v34 = *((_QWORD *)this + 79);
    }
    if (v31 != (v34 - v32) >> 5)
      goto LABEL_217;
    v35 = re::Hash<re::DynamicString>::operator()((uint64_t)v107, (uint64_t)v124);
    if (!*v101
      || (v36 = *(unsigned int *)(*((_QWORD *)this + 40) + 4 * (v35 % *((unsigned int *)this + 84))),
          (_DWORD)v36 == 0x7FFFFFFF))
    {
LABEL_88:
      v38 = re::Hash<re::DynamicString>::operator()((uint64_t)v107, (uint64_t)v124);
      if (*v102)
      {
        v39 = *((_QWORD *)this + 29);
        v40 = *(unsigned int *)(*((_QWORD *)this + 28) + 4 * (v38 % *((unsigned int *)this + 60)));
        if ((_DWORD)v40 != 0x7FFFFFFF)
        {
          while (!re::DynamicString::operator==(v39 + 784 * v40 + 16, (uint64_t)v124))
          {
            v40 = *(_DWORD *)(v39 + 784 * v40 + 8) & 0x7FFFFFFF;
            if (v40 == 0x7FFFFFFF)
              goto LABEL_99;
          }
LABEL_100:
          re::MaterialDefinitionFile::MaterialDefinitionFile((re::MaterialDefinitionFile *)v107, (const re::MaterialDefinitionFile *)(v39 + 784 * v40 + 48));
          FlattenedMaterialFile = re::makeFlattenedMaterialFile((uint64_t)v102, (char *)v107);
          v45 = re::Hash<re::DynamicString>::operator()((uint64_t)&v104, (uint64_t)v124);
          v46 = v45;
          if (*v101)
          {
            v47 = v45 % *((unsigned int *)this + 84);
            v48 = *(unsigned int *)(*((_QWORD *)this + 40) + 4 * v47);
            if ((_DWORD)v48 != 0x7FFFFFFF)
            {
              v49 = *((_QWORD *)this + 41);
              while (!re::DynamicString::operator==(v49 + 56 * v48 + 16, (uint64_t)v124))
              {
                v48 = *(_DWORD *)(v49 + 56 * v48 + 8) & 0x7FFFFFFF;
                if (v48 == 0x7FFFFFFF)
                  goto LABEL_107;
              }
              goto LABEL_113;
            }
          }
          else
          {
            v47 = 0;
          }
LABEL_107:
          v50 = *((unsigned int *)this + 87);
          if ((_DWORD)v50 == 0x7FFFFFFF)
          {
            v50 = *((unsigned int *)this + 86);
            v51 = v50;
            if ((_DWORD)v50 == *((_DWORD *)this + 84))
            {
              re::HashTable<re::DynamicString,re::MaterialDefinitionFile *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v101, 2 * *((_DWORD *)this + 85));
              v47 = v46 % *((unsigned int *)this + 84);
              v51 = *((_DWORD *)this + 86);
            }
            *((_DWORD *)this + 86) = v51 + 1;
            v52 = *((_QWORD *)this + 41);
            v53 = *(_DWORD *)(v52 + 56 * v50 + 8);
          }
          else
          {
            v52 = *((_QWORD *)this + 41);
            v53 = *(_DWORD *)(v52 + 56 * v50 + 8);
            *((_DWORD *)this + 87) = v53 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v52 + 56 * v50 + 8) = v53 | 0x80000000;
          *(_DWORD *)(*((_QWORD *)this + 41) + 56 * v50 + 8) = *(_DWORD *)(*((_QWORD *)this + 41) + 56 * v50 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 40) + 4 * v47);
          *(_QWORD *)(*((_QWORD *)this + 41) + 56 * v50) = v46;
          re::DynamicString::DynamicString((re::DynamicString *)(*((_QWORD *)this + 41) + 56 * v50 + 16), (const re::DynamicString *)v124);
          *(_QWORD *)(*((_QWORD *)this + 41) + 56 * v50 + 48) = FlattenedMaterialFile;
          *(_DWORD *)(*((_QWORD *)this + 40) + 4 * v47) = v50;
          ++*((_DWORD *)this + 85);
          ++*((_DWORD *)this + 88);
LABEL_113:
          re::MaterialDefinitionFile::~MaterialDefinitionFile((re::MaterialDefinitionFile *)v107);
          goto LABEL_114;
        }
      }
      else
      {
        v39 = *((_QWORD *)this + 29);
      }
LABEL_99:
      v40 = 0x7FFFFFFFLL;
      goto LABEL_100;
    }
    v37 = *((_QWORD *)this + 41);
    while (!re::DynamicString::operator==(v37 + 56 * v36 + 16, (uint64_t)v124))
    {
      v36 = *(_DWORD *)(v37 + 56 * v36 + 8) & 0x7FFFFFFF;
      if (v36 == 0x7FFFFFFF)
        goto LABEL_88;
    }
LABEL_114:
    v54 = re::Hash<re::DynamicString>::operator()((uint64_t)v107, (uint64_t)v124);
    if (*v101)
    {
      v55 = *((_QWORD *)this + 41);
      v56 = *(unsigned int *)(*((_QWORD *)this + 40) + 4 * (v54 % *((unsigned int *)this + 84)));
      if ((_DWORD)v56 != 0x7FFFFFFF)
      {
        while (!re::DynamicString::operator==(v55 + 56 * v56 + 16, (uint64_t)v124))
        {
          v56 = *(_DWORD *)(v55 + 56 * v56 + 8) & 0x7FFFFFFF;
          if (v56 == 0x7FFFFFFF)
            goto LABEL_120;
        }
        goto LABEL_121;
      }
    }
    else
    {
      v55 = *((_QWORD *)this + 41);
    }
LABEL_120:
    v56 = 0x7FFFFFFFLL;
LABEL_121:
    v57 = *(_QWORD *)(v55 + 56 * v56 + 48);
    v106 = 0;
    *(_QWORD *)&v105 = 0;
    v104 = 0uLL;
    DWORD2(v105) = 0;
    if ((v133 & 1) != 0)
      v58 = v135;
    else
      v58 = v134;
    if (!strcmp(v58, "*"))
    {
      v62 = *(_QWORD *)(v57 + 400);
      if (v62)
      {
        v63 = *(const re::MaterialTechniqueData **)(v57 + 416);
        v64 = 664 * v62;
        do
        {
          re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v107, v63);
          re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v104, (re::DynamicString *)v107);
          re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v107);
          v63 = (const re::MaterialTechniqueData *)((char *)v63 + 664);
          v64 -= 664;
        }
        while (v64);
      }
    }
    else if (re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v57 + 464, (uint64_t)&v132))
    {
      v59 = re::Hash<re::DynamicString>::operator()((uint64_t)v107, (uint64_t)&v132);
      if (*(_QWORD *)(v57 + 464))
      {
        v60 = *(unsigned int *)(*(_QWORD *)(v57 + 472) + 4 * (v59 % *(unsigned int *)(v57 + 488)));
        if ((_DWORD)v60 == 0x7FFFFFFF)
        {
          v61 = 0x7FFFFFFFLL;
        }
        else
        {
          v81 = *(_QWORD *)(v57 + 480);
          while (!re::DynamicString::operator==(v81 + 80 * v60 + 16, (uint64_t)&v132))
          {
            v60 = *(_DWORD *)(v81 + 80 * v60 + 8) & 0x7FFFFFFF;
            v61 = 0x7FFFFFFFLL;
            if (v60 == 0x7FFFFFFF)
              goto LABEL_170;
          }
          v61 = v60;
        }
      }
      else
      {
        v61 = 0x7FFFFFFFLL;
      }
LABEL_170:
      re::DynamicString::DynamicString((re::DynamicString *)&v138, (const re::DynamicString *)(*(_QWORD *)(v57 + 480) + 80 * v61 + 48));
      v82 = *(_QWORD *)(v57 + 440);
      if (v82)
      {
        v83 = *(uint64_t **)(v57 + 456);
        v84 = &v83[9 * v82];
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)v107, (const re::DynamicString *)v83);
          re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v109, v83 + 4);
          if (((uint64_t)v107[1].__locale_ & 1) != 0)
            v85 = (const char *)v108;
          else
            v85 = (char *)&v107[1].__locale_ + 1;
          if ((v139 & 1) != 0)
            v86 = v141;
          else
            v86 = v140;
          if (!strcmp(v85, v86) && v110)
          {
            v87 = (const re::DynamicString *)v111[1];
            v88 = 32 * v110;
            do
            {
              re::DynamicString::DynamicString((re::DynamicString *)&v136, v87);
              re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v104, (re::DynamicString *)&v136);
              if (v136 && (v137 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v136 + 40))();
              v87 = (const re::DynamicString *)((char *)v87 + 32);
              v88 -= 32;
            }
            while (v88);
          }
          re::MaterialTechniqueGroupData::deinit((re::MaterialTechniqueGroupData *)v107);
          re::DynamicArray<re::DynamicString>::deinit((uint64_t)v109);
          if (v107[0].__locale_ && ((uint64_t)v107[1].__locale_ & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v107[0].__locale_ + 40))();
          v83 += 9;
        }
        while (v83 != v84);
      }
      v89 = *(_QWORD *)(v57 + 664);
      if (v89)
      {
        v90 = *(const re::MaterialTechniqueQualityLevelSetData **)(v57 + 680);
        v91 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v90 + 104 * v89);
        do
        {
          re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)v107, v90);
          if (((uint64_t)v107[1].__locale_ & 1) != 0)
            v92 = (const char *)v108;
          else
            v92 = (char *)&v107[1].__locale_ + 1;
          if ((v139 & 1) != 0)
            v93 = v141;
          else
            v93 = v140;
          if (!strcmp(v92, v93) && v112)
          {
            v94 = v113;
            v95 = 32 * v112;
            do
            {
              re::DynamicString::DynamicString((re::DynamicString *)&v136, v94);
              re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v104, (re::DynamicString *)&v136);
              if (v136 && (v137 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v136 + 40))();
              v94 = (re::DynamicString *)((char *)v94 + 32);
              v95 -= 32;
            }
            while (v95);
          }
          re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)v107);
          v90 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v90 + 104);
        }
        while (v90 != v91);
      }
      if (!(_QWORD)v105)
        re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v104, (re::DynamicString *)&v138);
      if (v138 && (v139 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v138 + 40))();
    }
    else
    {
      v65 = *(_QWORD *)(v57 + 400);
      if (v65)
      {
        v66 = *(const re::MaterialTechniqueData **)(v57 + 416);
        v67 = 664 * v65;
        while (1)
        {
          re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v107, v66);
          v68 = ((uint64_t)v107[1].__locale_ & 1) != 0 ? (const char *)v108 : (char *)&v107[1].__locale_ + 1;
          v69 = (v133 & 1) != 0 ? v135 : v134;
          if (!strcmp(v68, v69))
            break;
          re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v107);
          v66 = (const re::MaterialTechniqueData *)((char *)v66 + 664);
          v67 -= 664;
          if (!v67)
            goto LABEL_143;
        }
        re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v104, (re::DynamicString *)&v132);
        re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v107);
      }
      else
      {
LABEL_143:
        v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Cannot find technique mapping for ", 34);
        if ((v133 & 1) != 0)
          v71 = v135;
        else
          v71 = v134;
        v72 = strlen(v71);
        v73 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
        v74 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)" in ", 4);
        if ((*(_BYTE *)(v57 + 8) & 1) != 0)
          v75 = *(const char **)(v57 + 16);
        else
          v75 = (const char *)(v57 + 9);
        v78 = strlen(v75);
        v79 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v78);
        std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(_QWORD *)(*v79 - 24)));
        v80 = std::locale::use_facet(v107, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
        std::locale::~locale(v107);
        std::ostream::put();
        std::ostream::flush();
      }
    }
    if ((_QWORD)v105)
    {
      v96 = v106;
      v97 = 32 * v105;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)v107, v96);
        re::PSOToolManager::generateVariantsForTechnique((uint64_t)this, v57, (uint64_t)v107, (uint64_t)v121);
        if (v107[0].__locale_ && ((uint64_t)v107[1].__locale_ & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v107[0].__locale_ + 40))();
        v96 = (re::DynamicString *)((char *)v96 + 32);
        v97 -= 32;
      }
      while (v97);
    }
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v104);
LABEL_217:
    v98 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v121);
    v6 = *(_QWORD *)&v124[0];
    if (*(_QWORD *)&v124[0] && (BYTE8(v124[0]) & 1) != 0)
      v6 = (*(uint64_t (**)(double))(**(_QWORD **)&v124[0] + 40))(v98);
LABEL_220:
    v22 += 32;
    if (v22 == v103)
      goto LABEL_221;
  }
LABEL_73:
  if (re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v102, v22))
  {
    re::DynamicString::operator=((re::DynamicString *)v124, (re::DynamicString *)v22);
    goto LABEL_75;
  }
  if ((*(_BYTE *)(v22 + 8) & 1) != 0)
    v100 = *(_QWORD *)(v22 + 16);
  else
    v100 = v22 + 9;
  re::internal::assertLog((re::internal *)5, v30, "assertion failure: '%s' (%s:line %i) No material or material defintion for %s\n", "false", "generateFunctionVariationsForTechnique", 131, v100);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::PSOToolManager::generateVariantsForTechnique(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  _anonymous_namespace_ *v31;
  _anonymous_namespace_ *v32;
  _anonymous_namespace_ *v33;
  _anonymous_namespace_ *v34;
  _anonymous_namespace_ *v35;
  _anonymous_namespace_ *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t jj;
  const char *v65;
  double v66;
  uint64_t kk;
  const char *v68;
  double v69;
  uint64_t i;
  const char *v71;
  double v72;
  double v73;
  uint64_t j;
  const char *v75;
  double v76;
  uint64_t k;
  const char *v78;
  double v79;
  uint64_t m;
  const char *v81;
  double v82;
  uint64_t n;
  const char *v84;
  double v85;
  uint64_t ii;
  const char *v87;
  double v88;
  re::DynamicString *v89;
  re::DynamicString *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int16 v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  int *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  unint64_t v103;
  _anonymous_namespace_ *v104;
  re::DynamicString *v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  int *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  _anonymous_namespace_ *v117;
  _BYTE *v118;
  _anonymous_namespace_ *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int16 v125;
  uint64_t v126;
  unint64_t *v127;
  std::string *v128;
  int v129;
  unint64_t v130;
  _anonymous_namespace_ *v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  _anonymous_namespace_ *v135;
  re::DynamicString *v136;
  uint64_t v137;
  _anonymous_namespace_ *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  const char *v142;
  const char *v143;
  size_t v144;
  _QWORD *v145;
  _QWORD *v146;
  const char *v147;
  size_t v148;
  _QWORD *v149;
  _QWORD *v150;
  const std::locale::facet *v151;
  size_t v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  const char *v156;
  size_t v157;
  _QWORD *v158;
  _QWORD *v159;
  const char *v160;
  size_t v161;
  _QWORD *v162;
  _QWORD *v163;
  const char *v164;
  size_t v165;
  _QWORD *v166;
  std::locale::id *v167;
  const std::locale::facet *v168;
  _QWORD *v169;
  _QWORD *v170;
  const std::locale::facet *v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  std::locale::id *v175;
  _QWORD *v176;
  const char *v177;
  size_t v178;
  _QWORD *v179;
  const std::locale::facet *v180;
  unint64_t v181;
  unsigned int v182;
  _anonymous_namespace_ *Permutation;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  const char *v192;
  const char *v193;
  _QWORD *v195;
  _QWORD *v196;
  const char *v197;
  size_t v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  const char *v203;
  size_t v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  std::locale::id *v208;
  const std::locale::facet *v209;
  const std::locale::facet *v210;
  uint64_t v211;
  re::DynamicString *v212;
  uint64_t v213;
  __n128 v214;
  re::DynamicString *v215;
  unint64_t v216;
  _QWORD v218[2];
  uint64_t v219;
  int v220;
  re::DynamicString *v221;
  __int128 v222;
  __int128 v223;
  unsigned int v224;
  uint64_t v225;
  _OWORD v226[4];
  uint64_t v227[4];
  int v228;
  uint64_t v229;
  char v230[8];
  char v231;
  _BYTE v232[7];
  const char *v233;
  _BYTE v234[24];
  uint64_t v235;
  unint64_t v236;
  const char *v237;
  _BYTE v238[24];
  uint64_t v239;
  unint64_t v240;
  const char *v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  int v245;
  char v246;
  char v247;
  uint64_t v248[11];
  uint64_t v249;
  unsigned int v250;
  _BYTE v251[64];
  unint64_t v252;
  re::DynamicString *v253;
  char v254;
  uint64_t v255;
  char v256;
  __int128 v257;
  _OWORD v258[3];
  int v259;
  char v260;
  char v261;
  _QWORD v262[4];
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  __int128 v271;
  __int128 v272;
  int v273;
  uint64_t v274;
  unint64_t v275;
  const char *v276[4];
  uint64_t v277[3];
  int v278;
  uint64_t v279;
  std::string v280;
  int v281;
  uint64_t v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  unsigned int v288;
  uint64_t v289;
  _QWORD v290[4];
  unint64_t v291;
  _QWORD v292[2];
  uint64_t v293;
  int v294;
  unint64_t v295;
  _QWORD v296[2];
  uint64_t v297;
  int v298;
  uint64_t *v299;
  uint64_t v300;

  v7 = (uint64_t)re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v230);
  v8 = *(_QWORD *)(a2 + 400);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 416);
    v10 = 664 * v8;
    while (1)
    {
      v7 = re::DynamicString::operator==(v9, a3);
      if ((_DWORD)v7)
        break;
      v9 += 664;
      v10 -= 664;
      if (!v10)
        goto LABEL_7;
    }
    v7 = re::MaterialTechniqueData::operator=((uint64_t)v230, v9);
  }
LABEL_7:
  v228 = 0;
  memset(v227, 0, sizeof(v227));
  v229 = 0x7FFFFFFFLL;
  v11 = v250;
  if (v250)
  {
    v12 = 0;
    v13 = (int *)(v249 + 8);
    while (1)
    {
      v14 = *v13;
      v13 += 20;
      if (v14 < 0)
        break;
      if (v250 == ++v12)
      {
        LODWORD(v12) = v250;
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  if (v250 != (_DWORD)v12)
  {
    v15 = v12;
    v16 = v249;
    do
    {
      v7 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString&>((uint64_t)v227, (re::DynamicString *)(v16 + 80 * v15 + 16), 2, (const re::DynamicString *)(v16 + 80 * v15 + 48));
      v16 = v249;
      if (v250 <= (int)v12 + 1)
        v17 = v12 + 1;
      else
        v17 = v250;
      v18 = v12;
      while (1)
      {
        v15 = (v18 + 1);
        if (v17 - 1 == v18)
          break;
        ++v18;
        LODWORD(v12) = v15;
        if ((*(_DWORD *)(v249 + 80 * v15 + 8) & 0x80000000) != 0)
          goto LABEL_23;
      }
      LODWORD(v12) = v17;
LABEL_23:
      ;
    }
    while (v11 != (_DWORD)v12);
  }
  v19 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = (int *)(*(_QWORD *)(a4 + 16) + 8);
    while (1)
    {
      v22 = *v21;
      v21 += 20;
      if (v22 < 0)
        break;
      if (v19 == ++v20)
      {
        LODWORD(v20) = *(_DWORD *)(a4 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v20) = 0;
  }
  if ((_DWORD)v19 != (_DWORD)v20)
  {
    v23 = v20;
    v24 = *(_QWORD *)(a4 + 16);
    do
    {
      v7 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString&>((uint64_t)v227, (re::DynamicString *)(v24 + 80 * v23 + 16), 2, (const re::DynamicString *)(v24 + 80 * v23 + 48));
      v24 = *(_QWORD *)(a4 + 16);
      if (*(_DWORD *)(a4 + 32) <= (v20 + 1))
        v25 = v20 + 1;
      else
        v25 = *(_DWORD *)(a4 + 32);
      v26 = v20;
      while (1)
      {
        v23 = (v26 + 1);
        if (v25 - 1 == v26)
          break;
        ++v26;
        LODWORD(v20) = v23;
        if ((*(_DWORD *)(v24 + 80 * v23 + 8) & 0x80000000) != 0)
          goto LABEL_40;
      }
      LODWORD(v20) = v25;
LABEL_40:
      ;
    }
    while ((_DWORD)v19 != (_DWORD)v20);
  }
  v27 = a1;
  if (*(_BYTE *)(a1 + 952) && *(_DWORD *)(a1 + 956) == 1)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "false");
    v28 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "false");
    v29 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "false");
    v30 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "false");
    v31 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[2]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "0");
    v32 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v32 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "false");
    v33 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v33 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "false");
    v34 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v34 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "false");
    v35 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v35 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[2]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "0");
    v36 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v36 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)v227, (re::DynamicString *)&v257, 2, "false");
    v7 = v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
  }
  memset(v226, 0, sizeof(v226));
  v224 = 0;
  v222 = 0u;
  v223 = 0u;
  v225 = 0x7FFFFFFFLL;
  if ((v236 & 1) != 0)
    v37 = v236 >> 1;
  else
    v37 = v236 >> 1;
  if (v37)
  {
    v257 = 0uLL;
    memset(v258, 0, sizeof(v258));
    v288 = 0;
    v286 = 0uLL;
    v287 = 0uLL;
    v289 = 0x7FFFFFFFLL;
    re::PSOToolManager::gatherFunctionConstantsForShader(a1, (uint64_t)v230, &v235, (uint64_t)v227, (uint64_t)v251, (_anonymous_namespace_ *)&v257, (uint64_t)&v286);
    *(_QWORD *)&v283 = &v257;
    *((_QWORD *)&v283 + 1) = 0;
    if (*(_QWORD *)&v258[0] >= 0x10uLL)
    {
      v38 = 0;
      v39 = *(_QWORD *)&v258[0] >> 4;
      while (1)
      {
        v40 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v257 + v38)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        *((_QWORD *)&v283 + 1) = (unsigned __int16)~v40;
        if (v40 != 0xFFFF)
          break;
        v38 += 16;
        if (!--v39)
          goto LABEL_84;
      }
      v41 = __clz(__rbit64((unsigned __int16)~v40)) + v38;
      *(_QWORD *)&v284 = v41;
      if (v41 != -1)
      {
        do
        {
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addOrReplace((uint64_t *)v226, (const re::DynamicString *)(*(_QWORD *)(v283 + 8) + 96 * v41), *(_QWORD *)(v283 + 8) + 96 * v41 + 32);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v283);
          v41 = v284;
        }
        while ((_QWORD)v284 != -1);
      }
    }
LABEL_84:
    v42 = v288;
    if (v288)
    {
      v43 = 0;
      v44 = (int *)(v287 + 8);
      while (1)
      {
        v45 = *v44;
        v44 += 28;
        if (v45 < 0)
          break;
        if (v288 == ++v43)
        {
          LODWORD(v43) = v288;
          break;
        }
      }
    }
    else
    {
      LODWORD(v43) = 0;
    }
    if (v288 != (_DWORD)v43)
    {
      v46 = v43;
      v47 = v287;
      do
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>((uint64_t)&v222, (re::DynamicString *)(v47 + 112 * v46 + 16), 2, v47 + 112 * v46 + 48);
        v47 = v287;
        if (v288 <= (int)v43 + 1)
          v48 = v43 + 1;
        else
          v48 = v288;
        v49 = v43;
        while (1)
        {
          v46 = (v49 + 1);
          if (v48 - 1 == v49)
            break;
          ++v49;
          LODWORD(v43) = v46;
          if ((*(_DWORD *)(v287 + 112 * v46 + 8) & 0x80000000) != 0)
            goto LABEL_100;
        }
        LODWORD(v43) = v48;
LABEL_100:
        ;
      }
      while (v42 != (_DWORD)v43);
    }
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v286);
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v257);
    v27 = a1;
  }
  if ((v240 & 1) != 0)
    v50 = v240 >> 1;
  else
    v50 = v240 >> 1;
  if (v50)
  {
    v257 = 0u;
    memset(v258, 0, sizeof(v258));
    v288 = 0;
    v286 = 0u;
    v287 = 0u;
    v289 = 0x7FFFFFFFLL;
    re::PSOToolManager::gatherFunctionConstantsForShader(v27, (uint64_t)v230, &v239, (uint64_t)v227, (uint64_t)v251, (_anonymous_namespace_ *)&v257, (uint64_t)&v286);
    *(_QWORD *)&v283 = &v257;
    *((_QWORD *)&v283 + 1) = 0;
    if (*(_QWORD *)&v258[0] >= 0x10uLL)
    {
      v51 = 0;
      v52 = *(_QWORD *)&v258[0] >> 4;
      while (1)
      {
        v53 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v257 + v51)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        *((_QWORD *)&v283 + 1) = (unsigned __int16)~v53;
        if (v53 != 0xFFFF)
          break;
        v51 += 16;
        if (!--v52)
          goto LABEL_113;
      }
      v54 = __clz(__rbit64((unsigned __int16)~v53)) + v51;
      *(_QWORD *)&v284 = v54;
      if (v54 != -1)
      {
        do
        {
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addOrReplace((uint64_t *)v226, (const re::DynamicString *)(*(_QWORD *)(v283 + 8) + 96 * v54), *(_QWORD *)(v283 + 8) + 96 * v54 + 32);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v283);
          v54 = v284;
        }
        while ((_QWORD)v284 != -1);
      }
    }
LABEL_113:
    v55 = v288;
    if (v288)
    {
      v56 = 0;
      v57 = (int *)(v287 + 8);
      while (1)
      {
        v58 = *v57;
        v57 += 28;
        if (v58 < 0)
          break;
        if (v288 == ++v56)
        {
          LODWORD(v56) = v288;
          break;
        }
      }
    }
    else
    {
      LODWORD(v56) = 0;
    }
    if (v288 != (_DWORD)v56)
    {
      v59 = v56;
      v60 = v287;
      do
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>((uint64_t)&v222, (re::DynamicString *)(v60 + 112 * v59 + 16), 2, v60 + 112 * v59 + 48);
        v60 = v287;
        if (v288 <= (int)v56 + 1)
          v61 = v56 + 1;
        else
          v61 = v288;
        v62 = v56;
        while (1)
        {
          v59 = (v62 + 1);
          if (v61 - 1 == v62)
            break;
          ++v62;
          LODWORD(v56) = v59;
          if ((*(_DWORD *)(v287 + 112 * v59 + 8) & 0x80000000) != 0)
            goto LABEL_129;
        }
        LODWORD(v56) = v61;
LABEL_129:
        ;
      }
      while (v55 != (_DWORD)v56);
    }
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v286);
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v257);
    v27 = a1;
  }
  v221 = 0;
  v218[1] = 0;
  v219 = 0;
  v218[0] = 0;
  v220 = 0;
  if (*(_BYTE *)(v27 + 952))
  {
    v63 = *(_DWORD *)(a1 + 956);
    if (v63 == 1)
    {
      for (i = 0; i != 12; ++i)
      {
        v71 = realitykit_shader_api::textureFunctions[i];
        LOWORD(v258[1]) = 257;
        v72 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v218, (uint64_t)&v257);
        v7 = v257;
        if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          v7 = (*(uint64_t (**)(double))(*(_QWORD *)v257 + 40))(v72);
      }
      LOWORD(v258[1]) = 257;
      v73 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v218, (uint64_t)&v257);
      v7 = v257;
      if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
        v7 = (*(uint64_t (**)(double))(*(_QWORD *)v257 + 40))(v73);
      for (j = 0; j != 9; ++j)
      {
        v75 = realitykit_shader_api::materialFunctions[j];
        LOWORD(v258[1]) = 257;
        v76 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v218, (uint64_t)&v257);
        v7 = v257;
        if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          v7 = (*(uint64_t (**)(double))(*(_QWORD *)v257 + 40))(v76);
      }
      for (k = 0; k != 54; ++k)
      {
        v78 = realitykit_shader_api::surfaceFunctions[k];
        LOWORD(v258[1]) = 256;
        v79 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v218, (uint64_t)&v257);
        v7 = v257;
        if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          v7 = (*(uint64_t (**)(double))(*(_QWORD *)v257 + 40))(v79);
      }
      for (m = 0; m != 60; ++m)
      {
        v81 = realitykit_shader_api::surface_privateFunctions[m];
        LOWORD(v258[1]) = 256;
        v82 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v218, (uint64_t)&v257);
        v7 = v257;
        if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          v7 = (*(uint64_t (**)(double))(*(_QWORD *)v257 + 40))(v82);
      }
      for (n = 0; n != 47; ++n)
      {
        v84 = realitykit_shader_api::geometry_modifierFunctions[n];
        LOWORD(v258[1]) = 1;
        v85 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v218, (uint64_t)&v257);
        v7 = v257;
        if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          v7 = (*(uint64_t (**)(double))(*(_QWORD *)v257 + 40))(v85);
      }
      for (ii = 0; ii != 55; ++ii)
      {
        v87 = realitykit_shader_api::geometry_modifier_privateFunctions[ii];
        LOWORD(v258[1]) = 1;
        v88 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v218, (uint64_t)&v257);
        v7 = v257;
        if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          v7 = (*(uint64_t (**)(double))(*(_QWORD *)v257 + 40))(v88);
      }
    }
    else if (v63 == 2)
    {
      for (jj = 0; jj != 13; ++jj)
      {
        v65 = realitykit_shader_api::ui_geometry_modifier_privateFunctions[jj];
        LOWORD(v258[1]) = 1;
        v66 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v218, (uint64_t)&v257);
        v7 = v257;
        if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          v7 = (*(uint64_t (**)(double))(*(_QWORD *)v257 + 40))(v66);
      }
      for (kk = 0; kk != 22; ++kk)
      {
        v68 = realitykit_shader_api::uisurface_privateFunctions[kk];
        LOWORD(v258[1]) = 256;
        v69 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v218, (uint64_t)&v257);
        v7 = v257;
        if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          v7 = (*(uint64_t (**)(double))(*(_QWORD *)v257 + 40))(v69);
      }
    }
    if (v219)
    {
      v89 = v221;
      v90 = (re::DynamicString *)((char *)v221 + 40 * v219);
      do
      {
        v257 = 0u;
        memset(v258, 0, sizeof(v258));
        v288 = 0;
        v286 = 0u;
        v287 = 0u;
        v289 = 0x7FFFFFFFLL;
        re::PSOToolManager::gatherFunctionConstantsForShader(a1, (uint64_t)v230, v89, (uint64_t)v227, (uint64_t)v251, (_anonymous_namespace_ *)&v257, (uint64_t)&v286);
        *(_QWORD *)&v283 = &v257;
        *((_QWORD *)&v283 + 1) = 0;
        if (*(_QWORD *)&v258[0] >= 0x10uLL)
        {
          v91 = 0;
          v92 = *(_QWORD *)&v258[0] >> 4;
          while (1)
          {
            v93 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v257 + v91)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *((_QWORD *)&v283 + 1) = (unsigned __int16)~v93;
            if (v93 != 0xFFFF)
              break;
            v91 += 16;
            if (!--v92)
              goto LABEL_187;
          }
          v94 = __clz(__rbit64((unsigned __int16)~v93)) + v91;
          *(_QWORD *)&v284 = v94;
          if (v94 != -1)
          {
            do
            {
              re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addOrReplace((uint64_t *)v226, (const re::DynamicString *)(*(_QWORD *)(v283 + 8) + 96 * v94), *(_QWORD *)(v283 + 8) + 96 * v94 + 32);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v283);
              v94 = v284;
            }
            while ((_QWORD)v284 != -1);
          }
        }
LABEL_187:
        v95 = v288;
        if (v288)
        {
          v96 = 0;
          v97 = (int *)(v287 + 8);
          while (1)
          {
            v98 = *v97;
            v97 += 28;
            if (v98 < 0)
              break;
            if (v288 == ++v96)
            {
              LODWORD(v96) = v288;
              break;
            }
          }
        }
        else
        {
          LODWORD(v96) = 0;
        }
        if (v288 != (_DWORD)v96)
        {
          v99 = v96;
          v100 = v287;
          do
          {
            re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>((uint64_t)&v222, (re::DynamicString *)(v100 + 112 * v99 + 16), 2, v100 + 112 * v99 + 48);
            v100 = v287;
            if (v288 <= (int)v96 + 1)
              v101 = v96 + 1;
            else
              v101 = v288;
            v102 = v96;
            while (1)
            {
              v99 = (v102 + 1);
              if (v101 - 1 == v102)
                break;
              ++v102;
              LODWORD(v96) = v99;
              if ((*(_DWORD *)(v287 + 112 * v99 + 8) & 0x80000000) != 0)
                goto LABEL_203;
            }
            LODWORD(v96) = v101;
LABEL_203:
            ;
          }
          while (v95 != (_DWORD)v96);
        }
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v286);
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v257);
        v89 = (re::DynamicString *)((char *)v89 + 40);
      }
      while (v89 != v90);
    }
  }
  v299 = 0;
  v300 = a2;
  v103 = v252;
  v296[1] = 0;
  v297 = 0;
  v298 = 0;
  v104 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v296, v103);
  ++v298;
  if (v252)
  {
    v105 = v253;
    v106 = 32 * v252;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v257, v105);
      *(_QWORD *)&v286 = re::Hash<re::DynamicString>::operator()((uint64_t)&v286, (uint64_t)&v257);
      re::DynamicArray<unsigned long>::add(v296, &v286);
      v104 = (_anonymous_namespace_ *)v257;
      if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
        v104 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
      v105 = (re::DynamicString *)((char *)v105 + 32);
      v106 -= 32;
    }
    while (v106);
  }
  v107 = HIDWORD(v223);
  v295 = 0;
  v292[1] = 0;
  v293 = 0;
  v292[0] = 0;
  v294 = 0;
  re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v292, v107);
  ++v294;
  v108 = v224;
  if (v224)
  {
    v109 = 0;
    v110 = (int *)(v223 + 8);
    while (1)
    {
      v111 = *v110;
      v110 += 28;
      if (v111 < 0)
        break;
      if (v224 == ++v109)
      {
        LODWORD(v109) = v224;
        break;
      }
    }
  }
  else
  {
    LODWORD(v109) = 0;
  }
  if (v224 != (_DWORD)v109)
  {
    v112 = v109;
    v113 = v223;
    do
    {
      re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v292, (re::DynamicString *)(v113 + 112 * v112 + 48));
      v113 = v223;
      if (v224 <= (int)v109 + 1)
        v114 = v109 + 1;
      else
        v114 = v224;
      v115 = v109;
      while (1)
      {
        v112 = (v115 + 1);
        if (v114 - 1 == v115)
          break;
        ++v115;
        LODWORD(v109) = v112;
        if ((*(_DWORD *)(v223 + 112 * v112 + 8) & 0x80000000) != 0)
          goto LABEL_227;
      }
      LODWORD(v109) = v114;
LABEL_227:
      ;
    }
    while (v108 != (_DWORD)v109);
  }
  v116 = a1;
  re::FunctionConstantsEnumerator::createEnumerator((uint64_t *)v226, v299, v297, (uint64_t)v292, (_QWORD *)a1, (uint64_t)v290);
  if (v254)
  {
    v117 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v286, (uint64_t)&v255);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v286, (re::DynamicString *)&v257, "true");
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v257 + 40))();
    re::StringID::StringID((re::StringID *)&v257, (const re::DynamicString *)&v235);
    v118 = (_BYTE *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 168, &v257);
    re::StringID::destroyString((re::StringID *)&v257);
    if (v118)
    {
      if (*v118)
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v286, (re::DynamicString *)&v257, "true");
        v119 = (_anonymous_namespace_ *)v257;
        if ((_QWORD)v257)
        {
          if ((BYTE8(v257) & 1) != 0)
            v119 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
        }
      }
    }
    if (v297)
    {
      v120 = v299;
      v121 = &v299[v297];
      do
      {
        v277[0] = 0;
        v277[0] = *v120;
        v122 = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find((_QWORD *)a1, v277);
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)&v257, (uint64_t *)(*(_QWORD *)(a1 + 8) + 72 * v122 + 8));
        *(_QWORD *)&v283 = &v257;
        *((_QWORD *)&v283 + 1) = 0;
        if (*(_QWORD *)&v258[0] >= 0x10uLL)
        {
          v123 = 0;
          v124 = *(_QWORD *)&v258[0] >> 4;
          while (1)
          {
            v125 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v257 + v123)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *((_QWORD *)&v283 + 1) = (unsigned __int16)~v125;
            if (v125 != 0xFFFF)
              break;
            v123 += 16;
            if (!--v124)
              goto LABEL_251;
          }
          v126 = __clz(__rbit64((unsigned __int16)~v125)) + v123;
          *(_QWORD *)&v284 = v126;
          if (v126 != -1)
          {
            do
            {
              v127 = (unint64_t *)(*(_QWORD *)(v283 + 8) + 96 * v126);
              std::to_string(&v280, v127[10]);
              if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v128 = &v280;
              else
                v128 = (std::string *)v280.__r_.__value_.__r.__words[0];
              v276[0] = (const char *)v128;
              re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*>((uint64_t)&v286, (re::DynamicString *)v127, 2, v276);
              if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v280.__r_.__value_.__l.__data_);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v283);
              v126 = v284;
            }
            while ((_QWORD)v284 != -1);
          }
        }
LABEL_251:
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v257);
        ++v120;
      }
      while (v120 != v121);
    }
    *(_QWORD *)&v283 = a1;
    *((_QWORD *)&v283 + 1) = v230;
    *(_QWORD *)&v284 = &v286;
    *((_QWORD *)&v284 + 1) = v290;
    *(_QWORD *)&v285 = v292;
    *((_QWORD *)&v285 + 1) = &v300;
    v129 = *(unsigned __int8 *)(a1 + 952);
    v257 = 0u;
    v258[0] = 0u;
    re::DynamicString::setCapacity(&v257, 0);
    v130 = re::PSOToolManager::enumerateFunctionConstantVariations(re::MaterialDefinitionFile const*,re::MaterialTechniqueData const&,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false> const&,re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,re::DynamicArray<re::PSOToolLinkedFunctionDescriptor> const&)::$_0::operator()((uint64_t)&v283, (uint64_t)v234, v129, (re::DynamicString *)&v257);
    v131 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v131 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    v132 = a1;
    v133 = *(unsigned __int8 *)(a1 + 952);
    v257 = 0u;
    v258[0] = 0u;
    re::DynamicString::setCapacity(&v257, 0);
    v134 = re::PSOToolManager::enumerateFunctionConstantVariations(re::MaterialDefinitionFile const*,re::MaterialTechniqueData const&,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false> const&,re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,re::DynamicArray<re::PSOToolLinkedFunctionDescriptor> const&)::$_0::operator()((uint64_t)&v283, (uint64_t)v238, v133, (re::DynamicString *)&v257);
    v135 = (_anonymous_namespace_ *)v257;
    if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
      v135 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v257 + 40))();
    v282 = 0;
    memset(&v280, 0, sizeof(v280));
    v281 = 0;
    v279 = 0;
    memset(v277, 0, sizeof(v277));
    v278 = 0;
    if (*(_BYTE *)(a1 + 952))
    {
      memset(v258, 0, 40);
      v257 = 0u;
      re::DynamicString::setCapacity((_QWORD *)v258 + 1, 0);
      if (v219)
      {
        v136 = v221;
        v137 = 40 * v219;
        do
        {
          v138 = re::DynamicString::operator=((re::DynamicString *)((char *)v258 + 8), v136);
          memset(v276, 0, sizeof(v276));
          re::DynamicString::setCapacity(v276, 0);
          v275 = 0;
          v275 = re::PSOToolManager::enumerateFunctionConstantVariations(re::MaterialDefinitionFile const*,re::MaterialTechniqueData const&,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false> const&,re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,re::DynamicArray<re::PSOToolLinkedFunctionDescriptor> const&)::$_0::operator()((uint64_t)&v283, (uint64_t)&v257, 1, (re::DynamicString *)v276);
          if (*((_BYTE *)v136 + 32))
            re::DynamicArray<unsigned long>::add(&v280, &v275);
          if (*((_BYTE *)v136 + 33))
            re::DynamicArray<unsigned long>::add(v277, &v275);
          if (v276[0] && ((uint64_t)v276[1] & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v276[0] + 40))();
          v136 = (re::DynamicString *)((char *)v136 + 40);
          v137 -= 40;
        }
        while (v137);
      }
      v132 = a1;
      if (*((_QWORD *)&v258[0] + 1))
      {
        if ((v258[1] & 1) != 0)
          (*(void (**)(void))(**((_QWORD **)&v258[0] + 1) + 40))();
        memset((char *)v258 + 8, 0, 32);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v257);
    }
    *(_QWORD *)&v257 = v130;
    *((_QWORD *)&v257 + 1) = v134;
    v258[0] = v242;
    v258[1] = v243;
    v258[2] = v244;
    v259 = v245;
    v260 = v246;
    if (v246)
      v261 = v247;
    re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v262, v248);
    re::DynamicString::DynamicString((re::DynamicString *)&v264, (const re::DynamicString *)v230);
    v266 = v256;
    re::DynamicArray<unsigned long>::DynamicArray((uint64_t)&v267, (uint64_t *)&v280);
    re::DynamicArray<unsigned long>::DynamicArray((uint64_t)&v271 + 8, v277);
    re::DynamicArray<re::PSOToolRenderDescriptor>::add(v132 + 808, (uint64_t)&v257);
    if (*((_QWORD *)&v271 + 1))
    {
      if (v274)
        (*(void (**)(void))(**((_QWORD **)&v271 + 1) + 40))();
      v274 = 0;
      v272 = 0uLL;
      *((_QWORD *)&v271 + 1) = 0;
      ++v273;
    }
    v116 = a1;
    if (v267)
    {
      if ((_QWORD)v271)
        (*(void (**)(void))(*(_QWORD *)v267 + 40))();
      *(_QWORD *)&v271 = 0;
      v268 = 0;
      v269 = 0;
      v267 = 0;
      ++v270;
    }
    if ((_QWORD)v264)
    {
      if ((BYTE8(v264) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v264 + 40))();
      v264 = 0u;
      v265 = 0u;
    }
    if (v262[0] && v263)
      (*(void (**)(void))(*(_QWORD *)v262[0] + 40))();
    if (v277[0] && v279)
      (*(void (**)(void))(*(_QWORD *)v277[0] + 40))();
    if (v280.__r_.__value_.__r.__words[0] && v282)
      (*(void (**)(void))(*(_QWORD *)v280.__r_.__value_.__l.__data_ + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v286);
  }
  if (v291 <= *(_QWORD *)(v116 + 912))
  {
    v216 = v291;
    if ((*(_BYTE *)(v300 + 8) & 1) != 0)
      v143 = *(const char **)(v300 + 16);
    else
      v143 = (const char *)(v300 + 9);
    v152 = strlen(v143);
    v153 = (_QWORD *)MEMORY[0x24BEDB318];
    v154 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v143, v152);
    v155 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v154, (uint64_t)"_", 1);
    if ((v231 & 1) != 0)
      v156 = v233;
    else
      v156 = v232;
    v157 = strlen(v156);
    v158 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v155, (uint64_t)v156, v157);
    v159 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v158, (uint64_t)"_", 1);
    if ((v236 & 1) != 0)
      v160 = v237;
    else
      v160 = (char *)&v236 + 1;
    v161 = strlen(v160);
    v162 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v159, (uint64_t)v160, v161);
    v163 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v162, (uint64_t)"_", 1);
    if ((v240 & 1) != 0)
      v164 = v241;
    else
      v164 = (char *)&v240 + 1;
    v165 = strlen(v164);
    v166 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v163, (uint64_t)v164, v165);
    std::ios_base::getloc((const std::ios_base *)((char *)v166 + *(_QWORD *)(*v166 - 24)));
    v167 = (std::locale::id *)MEMORY[0x24BEDB350];
    v168 = std::locale::use_facet((const std::locale *)&v257, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v168->__vftable[2].~facet_0)(v168, 10);
    std::locale::~locale((std::locale *)&v257);
    std::ostream::put();
    std::ostream::flush();
    v169 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v153, (uint64_t)"    ", 4);
    v170 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v169, (uint64_t)"constants:", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v170 + *(_QWORD *)(*v170 - 24)));
    v171 = std::locale::use_facet((const std::locale *)&v257, v167);
    ((void (*)(const std::locale::facet *, uint64_t))v171->__vftable[2].~facet_0)(v171, 10);
    std::locale::~locale((std::locale *)&v257);
    std::ostream::put();
    std::ostream::flush();
    if (v293)
    {
      v172 = v295;
      v173 = v295 + (v293 << 6);
      v174 = (_QWORD *)MEMORY[0x24BEDB318];
      v175 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v257, (const re::DynamicString *)v172);
        LODWORD(v258[1]) = *(_DWORD *)(v172 + 32);
        re::FixedArray<unsigned char>::FixedArray((_QWORD *)&v258[1] + 1, (uint64_t *)(v172 + 40));
        v176 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v174, (uint64_t)"      ", 6);
        if ((BYTE8(v257) & 1) != 0)
          v177 = *(const char **)&v258[0];
        else
          v177 = (char *)&v257 + 9;
        v178 = strlen(v177);
        v179 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v176, (uint64_t)v177, v178);
        std::ios_base::getloc((const std::ios_base *)((char *)v179 + *(_QWORD *)(*v179 - 24)));
        v180 = std::locale::use_facet((const std::locale *)&v286, v175);
        ((void (*)(const std::locale::facet *, uint64_t))v180->__vftable[2].~facet_0)(v180, 10);
        std::locale::~locale((std::locale *)&v286);
        std::ostream::put();
        std::ostream::flush();
        if (*((_QWORD *)&v258[1] + 1))
        {
          if (*(_QWORD *)&v258[2])
          {
            (*(void (**)(void))(**((_QWORD **)&v258[1] + 1) + 40))();
            v258[2] = 0uLL;
          }
          *((_QWORD *)&v258[1] + 1) = 0;
        }
        if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v257 + 40))();
        v172 += 64;
      }
      while (v172 != v173);
    }
    re::FunctionConstantsEnumerator::printDebugData((re::FunctionConstantsEnumerator *)v290);
    v288 = 0;
    v286 = 0u;
    v287 = 0u;
    v289 = 0x7FFFFFFFLL;
    LODWORD(v285) = 0;
    v283 = 0u;
    v284 = 0u;
    *(_QWORD *)((char *)&v285 + 4) = 0x7FFFFFFFLL;
    if (v216)
    {
      v181 = 0;
      v182 = 1;
      do
      {
        Permutation = (_anonymous_namespace_ *)re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)v290, v181, v295, v293, (uint64_t)&v280);
        v277[0] = 0;
        v276[0] = 0;
        if ((v236 & 1) != 0)
          v184 = v236 >> 1;
        else
          v184 = v236 >> 1;
        if (v184)
        {
          v185 = v300;
          v186 = v282;
          v187 = v280.__r_.__value_.__r.__words[2];
          v257 = 0u;
          v258[0] = 0u;
          re::DynamicString::setCapacity(&v257, 0);
          Permutation = (_anonymous_namespace_ *)re::PSOToolManager::addFunctionConstantVariation(a1, v185, (uint64_t)v230, (uint64_t)v234, v186, v187, 0, (re::DynamicString *)&v257);
          v277[0] = (uint64_t)Permutation;
          if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v257 + 40))(v257, *(_QWORD *)&v258[0]);
            Permutation = (_anonymous_namespace_ *)v277[0];
          }
          if (Permutation)
            Permutation = (_anonymous_namespace_ *)re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&v286, v277);
        }
        if ((v240 & 1) != 0)
          v188 = v240 >> 1;
        else
          v188 = v240 >> 1;
        if (v188)
        {
          v189 = v300;
          v190 = v282;
          v191 = v280.__r_.__value_.__r.__words[2];
          v257 = 0u;
          v258[0] = 0u;
          re::DynamicString::setCapacity(&v257, 0);
          v192 = (const char *)re::PSOToolManager::addFunctionConstantVariation(a1, v189, (uint64_t)v230, (uint64_t)v238, v190, v191, 0, (re::DynamicString *)&v257);
          v276[0] = v192;
          if ((_QWORD)v257 && (BYTE8(v257) & 1) != 0)
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v257 + 40))(v257, *(_QWORD *)&v258[0]);
            v192 = v276[0];
          }
          if (v192)
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&v283, (uint64_t *)v276);
        }
        if ((v236 & 1) != 0)
          v193 = v237;
        else
          v193 = (char *)&v236 + 1;
        if (strcmp(v193, "realitykit::vsGeometryModifier") && v277[0] | (uint64_t)v276[0])
        {
          *(_QWORD *)&v257 = v277[0];
          *((const char **)&v257 + 1) = v276[0];
          v258[0] = v242;
          v258[1] = v243;
          v258[2] = v244;
          v259 = v245;
          v260 = v246;
          if (v246)
            v261 = v247;
          re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v262, v248);
          re::DynamicString::DynamicString((re::DynamicString *)&v264, (const re::DynamicString *)v230);
          v266 = v256;
          v268 = 0;
          v269 = 0;
          v267 = 0;
          v270 = 0;
          v274 = 0;
          v271 = 0u;
          v272 = 0u;
          v273 = 0;
          re::DynamicArray<re::PSOToolRenderDescriptor>::add(a1 + 808, (uint64_t)&v257);
          if (*((_QWORD *)&v271 + 1))
          {
            if (v274)
              (*(void (**)(void))(**((_QWORD **)&v271 + 1) + 40))();
            v274 = 0;
            v272 = 0uLL;
            *((_QWORD *)&v271 + 1) = 0;
            ++v273;
          }
          if (v267)
          {
            if ((_QWORD)v271)
              (*(void (**)(void))(*(_QWORD *)v267 + 40))();
            *(_QWORD *)&v271 = 0;
            v268 = 0;
            v269 = 0;
            v267 = 0;
            ++v270;
          }
          if ((_QWORD)v264)
          {
            if ((BYTE8(v264) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v264 + 40))();
            v264 = 0u;
            v265 = 0u;
          }
          if (v262[0] && v263)
            (*(void (**)(void))(*(_QWORD *)v262[0] + 40))();
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v280);
        v181 = v182;
      }
      while (v216 > v182++);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Generated ", 10);
    v195 = (_QWORD *)std::ostream::operator<<();
    v196 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v195, (uint64_t)" unique permutations for ", 25);
    if ((v236 & 1) != 0)
      v197 = v237;
    else
      v197 = (char *)&v236 + 1;
    v198 = strlen(v197);
    v199 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v196, (uint64_t)v197, v198);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v199, (uint64_t)" (", 2);
    v200 = (_QWORD *)std::ostream::operator<<();
    v201 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)")", 1);
    v202 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v201, (uint64_t)" ", 1);
    if ((v240 & 1) != 0)
      v203 = v241;
    else
      v203 = (char *)&v240 + 1;
    v204 = strlen(v203);
    v205 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v202, (uint64_t)v203, v204);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v205, (uint64_t)" (", 2);
    v206 = (_QWORD *)std::ostream::operator<<();
    v207 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v206, (uint64_t)")", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v207 + *(_QWORD *)(*v207 - 24)));
    v208 = (std::locale::id *)MEMORY[0x24BEDB350];
    v209 = std::locale::use_facet((const std::locale *)&v257, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v209->__vftable[2].~facet_0)(v209, 10);
    std::locale::~locale((std::locale *)&v257);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v207 + *(_QWORD *)(*v207 - 24)));
    v210 = std::locale::use_facet((const std::locale *)&v257, v208);
    ((void (*)(const std::locale::facet *, uint64_t))v210->__vftable[2].~facet_0)(v210, 10);
    std::locale::~locale((std::locale *)&v257);
    std::ostream::put();
    std::ostream::flush();
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v283);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v286);
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"More than ", 10);
    v139 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v139, (uint64_t)" permutations (", 15);
    v140 = (_QWORD *)std::ostream::operator<<();
    v141 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v140, (uint64_t)") to precompile for ", 20);
    if ((*(_BYTE *)(v300 + 8) & 1) != 0)
      v142 = *(const char **)(v300 + 16);
    else
      v142 = (const char *)(v300 + 9);
    v144 = strlen(v142);
    v145 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v141, (uint64_t)v142, v144);
    v146 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v145, (uint64_t)"_", 1);
    if ((v231 & 1) != 0)
      v147 = v233;
    else
      v147 = v232;
    v148 = strlen(v147);
    v149 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v146, (uint64_t)v147, v148);
    v150 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v149, (uint64_t)", skipping.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v150 + *(_QWORD *)(*v150 - 24)));
    v151 = std::locale::use_facet((const std::locale *)&v257, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v151->__vftable[2].~facet_0)(v151, 10);
    std::locale::~locale((std::locale *)&v257);
    std::ostream::put();
    std::ostream::flush();
  }
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v290);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v292);
  if (v296[0] && v299)
    (*(void (**)(void))(*(_QWORD *)v296[0] + 40))();
  v211 = v218[0];
  if (v218[0])
  {
    v212 = v221;
    if (v221)
    {
      if (v219)
      {
        v213 = 40 * v219;
        v214 = 0uLL;
        v215 = v221;
        do
        {
          if (*(_QWORD *)v215)
          {
            if ((*((_BYTE *)v215 + 8) & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)v215 + 40))(*(_QWORD *)v215, *((_QWORD *)v215 + 2), v214);
              v214 = 0uLL;
            }
            *(__n128 *)v215 = v214;
            *((__n128 *)v215 + 1) = v214;
          }
          v215 = (re::DynamicString *)((char *)v215 + 40);
          v213 -= 40;
        }
        while (v213);
      }
      (*(void (**)(uint64_t, re::DynamicString *))(*(_QWORD *)v211 + 40))(v211, v212);
    }
  }
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v222);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v226);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v227);
  re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v230);
}

void re::PSOToolManager::gatherFunctionConstantsForShader(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _anonymous_namespace_ *a6, uint64_t a7)
{
  _QWORD *v13;
  re::ns *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const char *v24;
  size_t v25;
  _QWORD *v26;
  std::locale::id *v27;
  const std::locale::facet *v28;
  const char *v29;
  size_t v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  _BOOL4 v37;
  BOOL v38;
  _anonymous_namespace_ *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  double v44;
  _QWORD *v45;
  _QWORD *v46;
  const char *v47;
  size_t v48;
  _QWORD *v49;
  std::locale::id *v50;
  const std::locale::facet *v51;
  const char *v52;
  size_t v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _BYTE v67[8];
  uint64_t v68[6];
  std::locale v69[2];
  __int128 v70;
  int v71;
  uint64_t v72;
  std::locale v73;
  id v74;
  id v75;
  char *v76;
  uint64_t v77;
  char v78;
  _BYTE v79[7];
  const char *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v13 = (_QWORD *)(a1 + 64);
  if (!re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a1 + 64, (uint64_t)a3))
  {
    if ((a3[1] & 1) != 0)
      v14 = (re::ns *)a3[2];
    else
      v14 = (re::ns *)((char *)a3 + 9);
    re::mtl::Library::makeFunction((void **)(a1 + 160), v14, &v76);
    if (!v76)
    {
      v56 = std::operator<<[abi:nn180100]<std::char_traits<char>>(MEMORY[0x24BEDB310], "Failed to make function ");
      if ((a3[1] & 1) != 0)
        v57 = (char *)a3[2];
      else
        v57 = (char *)a3 + 9;
      v58 = std::operator<<[abi:nn180100]<std::char_traits<char>>(v56, v57);
      std::endl[abi:nn180100]<char,std::char_traits<char>>(v58);
      re::internal::assertLog((re::internal *)4, v59, "assertion failure: '%s' (%s:line %i) ", "false", "gatherFunctionConstantsForShader", 233, a7);
      _os_crash();
      __break(1u);
      return;
    }
    re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<NS::SharedPtr<MTL::Function>&>((uint64_t)v13, (const re::DynamicString *)a3, (id *)&v76);
    if (v76)

  }
  v15 = re::Hash<re::DynamicString>::operator()((uint64_t)&v76, (uint64_t)a3);
  v16 = 0x7FFFFFFFLL;
  if (*v13)
  {
    v17 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v15 % *(unsigned int *)(a1 + 88)));
    if ((_DWORD)v17 != 0x7FFFFFFF)
    {
      v18 = *(_QWORD *)(a1 + 80);
      v16 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v18 + 56 * v17 + 16, (uint64_t)a3))
      {
        v17 = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
        if (v17 == 0x7FFFFFFF)
          goto LABEL_15;
      }
      v16 = v17;
    }
  }
LABEL_15:
  v19 = *(id *)(*(_QWORD *)(a1 + 80) + 56 * v16 + 48);
  v20 = v19;
  if (*(_DWORD *)(a2 + 404))
  {
    if ((*(_QWORD *)(a2 + 8) & 1) != 0)
      v21 = *(_QWORD *)(a2 + 16);
    else
      v21 = a2 + 9;
    v74 = v19;
    re::parseVariationTable(v21, &v74, a5, (uint64_t)&v76);
    if (v74)
    {

      v74 = 0;
    }
    if ((_BYTE)v76)
    {
      if (&v77 != (uint64_t *)a6)
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::copy(a6, &v77);
    }
    else
    {
      v22 = (_QWORD *)MEMORY[0x24BEDB310];
      v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Failed to parse function constants for ", 39);
      if ((*(_QWORD *)(a2 + 8) & 1) != 0)
        v24 = *(const char **)(a2 + 16);
      else
        v24 = (const char *)(a2 + 9);
      v25 = strlen(v24);
      v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
      v27 = (std::locale::id *)MEMORY[0x24BEDB350];
      v28 = std::locale::use_facet(&v73, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale(&v73);
      std::ostream::put();
      std::ostream::flush();
      if ((v78 & 1) != 0)
        v29 = v80;
      else
        v29 = v79;
      v30 = strlen(v29);
      v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)v29, v30);
      std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
      v32 = std::locale::use_facet(&v73, v27);
      ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale(&v73);
      std::ostream::put();
      std::ostream::flush();
    }
    re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result((uint64_t)&v76);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v73, a4);
  v33 = *(_QWORD *)(a2 + 272);
  if (v33)
  {
    v34 = 32 * v33 - 32;
    v35 = (unsigned __int8 *)(*(_QWORD *)(a2 + 288) + 1);
    do
    {
      v36 = *v35;
      v35 += 32;
      v37 = v36 != 0;
      if (v36)
        v38 = 1;
      else
        v38 = v34 == 0;
      v34 -= 32;
    }
    while (!v38);
  }
  else
  {
    v37 = *(_BYTE *)(a2 + 201) != 0;
  }
  re::MaterialManager::addSupportConstantsToArray((_anonymous_namespace_ *)1, 1, 1, v37, 0, (uint64_t)&v73);
  if ((*(_QWORD *)(a2 + 8) & 1) != 0)
    v39 = *(_anonymous_namespace_ **)(a2 + 16);
  else
    v39 = (_anonymous_namespace_ *)(a2 + 9);
  v40 = objc_msgSend(v20, sel_functionConstantsDictionary);
  *(_OWORD *)&v69[0].__locale_ = 0u;
  v70 = 0u;
  v71 = 0;
  v72 = 0x7FFFFFFFLL;
  v41 = objc_msgSend(v40, sel_keyEnumerator);
  v42 = objc_msgSend(v41, sel_nextObject);
  if (v42)
  {
    v43 = v42;
    do
    {
      v76 = (char *)objc_msgSend(v43, sel_UTF8String);
      v75 = objc_msgSend(v40, sel_objectForKey_, v43);
      re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v69, &v76, &v75);
      if (v75)

      v43 = objc_msgSend(v41, sel_nextObject);
    }
    while (v43);
  }
  v67[0] = 0;
  v61[0] = 0;
  v44 = re::parseFunctionConstants(v39, (uint64_t)v69, (uint64_t)&v73, v67, (uint64_t)v61, 0, 0, 0, (uint64_t)&v76);
  if (v61[0] && v62)
  {
    if (v66)
      (*(void (**)(double))(*(_QWORD *)v62 + 40))(v44);
    v66 = 0;
    v63 = 0;
    v64 = 0;
    v62 = 0;
    ++v65;
  }
  if (v67[0])
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v68, v44);
  re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v69);
  if ((_BYTE)v76)
  {
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a7, (uint64_t)&v77);
  }
  else
  {
    v45 = (_QWORD *)MEMORY[0x24BEDB310];
    v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Failed to parse function constants for ", 39);
    if ((*(_QWORD *)(a2 + 8) & 1) != 0)
      v47 = *(const char **)(a2 + 16);
    else
      v47 = (const char *)(a2 + 9);
    v48 = strlen(v47);
    v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
    std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
    v50 = (std::locale::id *)MEMORY[0x24BEDB350];
    v51 = std::locale::use_facet(v69, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
    std::locale::~locale(v69);
    std::ostream::put();
    std::ostream::flush();
    if ((v78 & 1) != 0)
      v52 = v80;
    else
      v52 = v79;
    v53 = strlen(v52);
    v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)v52, v53);
    std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(*v54 - 24)));
    v55 = std::locale::use_facet(v69, v50);
    ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
    std::locale::~locale(v69);
    std::ostream::put();
    std::ostream::flush();
  }
  re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)&v76);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v73);
  if (v20)

}

id re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<NS::SharedPtr<MTL::Function>&>(uint64_t a1, const re::DynamicString *a2, id *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v17, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v12 == 0x7FFFFFFF)
    {
      v12 = *(unsigned int *)(a1 + 32);
      v13 = v12;
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 56 * v12 + 8) = v15 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v12 + 16), a2);
    v16 = *(_QWORD *)(a1 + 16) + 56 * v12;
    result = *a3;
    *(_QWORD *)(v16 + 48) = result;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = (id)re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2);
    if ((result & 1) != 0)
      return result;
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

unint64_t re::PSOToolManager::enumerateFunctionConstantVariations(re::MaterialDefinitionFile const*,re::MaterialTechniqueData const&,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false> const&,re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,re::DynamicArray<re::PSOToolLinkedFunctionDescriptor> const&)::$_0::operator()(uint64_t a1, uint64_t a2, int a3, re::DynamicString *a4)
{
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  re::DynamicString *v33;
  re::DynamicString *v34;
  double v35;
  re::DynamicString *v37;
  _BYTE v38[16];
  uint64_t v39;
  re::DynamicString *v40;
  char *v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  char v53[8];
  uint64_t v54[6];
  _OWORD v55[2];
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD v60[2];
  unint64_t v61;
  int v62;
  uint64_t v63;
  _OWORD v64[2];
  int v65;
  uint64_t v66;
  id v67[3];
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a1;
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v66 = 0x7FFFFFFFLL;
  v63 = 0;
  v60[1] = 0;
  v61 = 0;
  v60[0] = 0;
  v62 = 0;
  re::DynamicString::DynamicString((re::DynamicString *)&v58, (const re::DynamicString *)(a2 + 24));
  if ((v59 & 1) != 0)
    v10 = v59 >> 1;
  else
    v10 = v59 >> 1;
  if (v10)
  {
    v37 = a4;
    v11 = re::Hash<re::DynamicString>::operator()((uint64_t)&v41, (uint64_t)&v58);
    v12 = 0x7FFFFFFFLL;
    if (*(_QWORD *)(v8 + 64))
    {
      v13 = *(unsigned int *)(*(_QWORD *)(v8 + 72) + 4 * (v11 % *(unsigned int *)(v8 + 88)));
      if ((_DWORD)v13 != 0x7FFFFFFF)
      {
        v14 = *(_QWORD *)(v8 + 80);
        v12 = 0x7FFFFFFFLL;
        while (!re::DynamicString::operator==(v14 + 56 * v13 + 16, (uint64_t)&v58))
        {
          v13 = *(_DWORD *)(v14 + 56 * v13 + 8) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF)
            goto LABEL_13;
        }
        v12 = v13;
      }
    }
LABEL_13:
    v16 = objc_msgSend(*(id *)(*(_QWORD *)(v8 + 80) + 56 * v12 + 48), sel_functionConstantsDictionary);
    memset(v55, 0, sizeof(v55));
    v56 = 0;
    v57 = 0x7FFFFFFFLL;
    v17 = objc_msgSend(v16, sel_keyEnumerator);
    v18 = objc_msgSend(v17, sel_nextObject);
    if (v18)
    {
      v19 = v18;
      do
      {
        v41 = (char *)objc_msgSend(v19, sel_UTF8String);
        v67[0] = objc_msgSend(v16, sel_objectForKey_, v19);
        re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v55, &v41, v67);
        if (v67[0])

        v19 = objc_msgSend(v17, sel_nextObject);
      }
      while (v19);
    }
    v20 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(v20 + 8) & 1) != 0)
      v21 = *(_anonymous_namespace_ **)(v20 + 16);
    else
      v21 = (_anonymous_namespace_ *)(v20 + 9);
    v22 = *(_QWORD *)(a1 + 16);
    v53[0] = 0;
    v47[0] = 0;
    v23 = re::parseFunctionConstants(v21, (uint64_t)v55, v22, v53, (uint64_t)v47, 0, 0, 1, (uint64_t)v67);
    if (v47[0] && v48)
    {
      if (v52)
        (*(void (**)(double))(*(_QWORD *)v48 + 40))(v23);
      v52 = 0;
      v49 = 0;
      v50 = 0;
      v48 = 0;
      ++v51;
    }
    if (v53[0])
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v54, v23);
    v24 = v69;
    if (v69)
    {
      v25 = 0;
      v26 = (int *)(v68 + 8);
      while (1)
      {
        v27 = *v26;
        v26 += 28;
        if (v27 < 0)
          break;
        if (v69 == ++v25)
        {
          LODWORD(v25) = v69;
          break;
        }
      }
    }
    else
    {
      LODWORD(v25) = 0;
    }
    if (v69 != (_DWORD)v25)
    {
      v28 = v25;
      v29 = v68;
      do
      {
        v30 = v29 + 112 * v28;
        re::DynamicString::DynamicString((re::DynamicString *)&v41, (const re::DynamicString *)(v30 + 48));
        v43 = *(_DWORD *)(v30 + 80);
        re::FixedArray<unsigned char>::FixedArray(&v44, (uint64_t *)(v30 + 88));
        if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v64, (uint64_t)&v41))
        {
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v64, (re::DynamicString *)&v41);
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v60, (re::DynamicString *)&v41);
        }
        if (v44)
        {
          if (v45)
          {
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
            v45 = 0;
            v46 = 0;
          }
          v44 = 0;
        }
        if (v41 && (v42 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v41 + 40))();
        v29 = v68;
        if (v69 <= (int)v25 + 1)
          v31 = v25 + 1;
        else
          v31 = v69;
        while (1)
        {
          v28 = (v25 + 1);
          if (v31 - 1 == (_DWORD)v25)
            break;
          LODWORD(v25) = v25 + 1;
          v32 = v28;
          if ((*(_DWORD *)(v68 + 112 * v28 + 8) & 0x80000000) != 0)
            goto LABEL_52;
        }
        v32 = v31;
LABEL_52:
        LODWORD(v25) = v32;
      }
      while (v24 != v32);
    }
    re::FunctionConstantsEnumerator::createPermutation(*(_anonymous_namespace_ **)(a1 + 24), 0, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), (uint64_t)v38);
    if (v39)
    {
      v33 = v40;
      v34 = (re::DynamicString *)((char *)v40 + 64 * v39);
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v41, v33);
        v43 = *((_DWORD *)v33 + 8);
        re::FixedArray<unsigned char>::FixedArray(&v44, (uint64_t *)v33 + 5);
        if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v64, (uint64_t)&v41))
        {
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v64, (re::DynamicString *)&v41);
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v60, (re::DynamicString *)&v41);
        }
        if (v44)
        {
          if (v45)
          {
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
            v45 = 0;
            v46 = 0;
          }
          v44 = 0;
        }
        if (v41 && (v42 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v41 + 40))();
        v33 = (re::DynamicString *)((char *)v33 + 64);
      }
      while (v33 != v34);
    }
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v38);
    v15 = re::PSOToolManager::addFunctionConstantVariation(v8, **(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 8), a2, v63, v61, a3, v37);
    re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)v67);
    v9.n128_f64[0] = re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v55);
  }
  else
  {
    v15 = 0;
  }
  if (v58 && (v59 & 1) != 0)
    (*(void (**)(__n128))(*(_QWORD *)v58 + 40))(v9);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v60);
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v64, v35);
  return v15;
}

void re::DynamicArray<re::PSOToolRenderDescriptor>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::PSOToolRenderDescriptor>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::PSOToolRenderDescriptor>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  re::PSOToolRenderDescriptor::PSOToolRenderDescriptor(*(_QWORD *)(a1 + 32) + 232 * v5, a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

unint64_t re::PSOToolManager::addFunctionConstantVariation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7, re::DynamicString *a8)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  uint64_t v25;
  char *v26;
  re::DynamicString *v27;
  re::DynamicString *v28;
  const char *v29;
  int v30;
  re::DynamicString *v31;
  re::DynamicString *v32;
  const char *v33;
  int v34;
  re::DynamicString *v35;
  re::DynamicString *v36;
  const char *v37;
  int v38;
  re::DynamicString *v39;
  re::DynamicString *v40;
  const char *v41;
  int v42;
  re::DynamicString *v43;
  re::DynamicString *v44;
  const char *v45;
  int v46;
  re::DynamicString *v47;
  re::DynamicString *v48;
  const char *v49;
  int v50;
  BOOL v51;
  const char *v52;
  unint64_t FunctionVariantHash;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  re::AssetHandle *v68;
  int v69;
  _OWORD v71[2];
  uint64_t v72[2];
  uint64_t v73;
  int v74;
  _BYTE v75[40];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  _BYTE v90[23];
  id v91[2];
  uint64_t v92;
  re::DynamicString *v93;
  _QWORD v94[4];
  _QWORD v95[4];
  _QWORD v96[4];
  _QWORD v97[4];
  __int128 v98;
  char v99;
  __int128 v100;
  __int128 v101;
  re::DynamicString *v102;
  __int128 v103;
  __int128 v104;
  _QWORD v105[4];
  _QWORD v106[4];
  _QWORD v107[4];
  __int128 v108;
  char v109;
  uint64_t v110;
  char v111;
  _BYTE v112[7];
  const char *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  re::DynamicString::DynamicString((re::DynamicString *)&v88, (const re::DynamicString *)(a4 + 24));
  v13 = re::Hash<re::DynamicString>::operator()((uint64_t)&v100, (uint64_t)&v88);
  v14 = 0x7FFFFFFFLL;
  v69 = a7;
  v68 = (re::AssetHandle *)a4;
  if (*(_QWORD *)(a1 + 64))
  {
    v15 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v13 % *(unsigned int *)(a1 + 88)));
    if ((_DWORD)v15 != 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(a1 + 80);
      v14 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v16 + 56 * v15 + 16, (uint64_t)&v88))
      {
        v15 = *(_DWORD *)(v16 + 56 * v15 + 8) & 0x7FFFFFFF;
        if (v15 == 0x7FFFFFFF)
          goto LABEL_8;
      }
      v14 = v15;
    }
  }
LABEL_8:
  v17 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 80) + 56 * v14 + 48), sel_functionConstantsDictionary);
  v84 = 0u;
  v85 = 0u;
  v86 = 0;
  v87 = 0x7FFFFFFFLL;
  v18 = objc_msgSend(v17, sel_keyEnumerator);
  v19 = (_anonymous_namespace_ *)objc_msgSend(v18, sel_nextObject);
  if (v19)
  {
    v20 = v19;
    do
    {
      *(_QWORD *)&v100 = -[_anonymous_namespace_ UTF8String](v20, sel_UTF8String);
      v91[0] = objc_msgSend(v17, sel_objectForKey_, v20);
      re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)&v84, (char **)&v100, v91);
      if (v91[0])

      v19 = (_anonymous_namespace_ *)objc_msgSend(v18, sel_nextObject);
      v20 = v19;
    }
    while (v19);
  }
  v72[0] = 0;
  v72[1] = 0;
  v74 = 0;
  v73 = 0;
  memset(v75, 0, sizeof(v75));
  v21 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v75[8], 0);
  v77 = 0u;
  v76 = 0u;
  v22 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v76, 0);
  v79 = 0u;
  v78 = 0u;
  v23 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v78, 0);
  v81 = 0u;
  v80 = 0u;
  v24 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v80, 0);
  v83 = 0;
  re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v72, a6);
  ++v74;
  if (a6)
  {
    v25 = a5 + (a6 << 6);
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v100, (const re::DynamicString *)a5);
      LODWORD(v102) = *(_DWORD *)(a5 + 32);
      re::FixedArray<unsigned char>::FixedArray(&v103, (uint64_t *)(a5 + 40));
      if ((BYTE8(v100) & 1) != 0)
        v26 = (char *)v101;
      else
        v26 = (char *)&v100 + 9;
      v91[0] = v26;
      if (re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::containsKey((uint64_t)&v84, (char **)v91))
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v72, (re::DynamicString *)&v100);
      }
      if ((_QWORD)v103)
      {
        if (*((_QWORD *)&v103 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v103 + 40))();
          *((_QWORD *)&v103 + 1) = 0;
          *(_QWORD *)&v104 = 0;
        }
        *(_QWORD *)&v103 = 0;
      }
      if ((_QWORD)v100 && (BYTE8(v100) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v100 + 40))();
      a5 += 64;
    }
    while (a5 != v25);
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v100, v72);
  re::DynamicString::DynamicString((re::DynamicString *)&v103, (const re::DynamicString *)&v75[8]);
  re::DynamicString::DynamicString((re::DynamicString *)v105, (const re::DynamicString *)&v76);
  re::DynamicString::DynamicString((re::DynamicString *)v106, (const re::DynamicString *)&v78);
  re::DynamicString::DynamicString((re::DynamicString *)v107, (const re::DynamicString *)&v80);
  v108 = v82;
  v109 = v83;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)v91, v72);
  re::DynamicString::DynamicString((re::DynamicString *)v94, (const re::DynamicString *)&v75[8]);
  re::DynamicString::DynamicString((re::DynamicString *)v95, (const re::DynamicString *)&v76);
  re::DynamicString::DynamicString((re::DynamicString *)v96, (const re::DynamicString *)&v78);
  re::DynamicString::DynamicString((re::DynamicString *)v97, (const re::DynamicString *)&v80);
  v98 = v82;
  v99 = v83;
  if ((_QWORD)v101)
  {
    v27 = v102;
    v28 = (re::DynamicString *)((char *)v102 + 64 * (_QWORD)v101);
    while (1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v110, v27);
      v114 = *((_DWORD *)v27 + 8);
      re::FixedArray<unsigned char>::FixedArray(&v115, (uint64_t *)v27 + 5);
      if ((v111 & 1) != 0)
        v29 = v113;
      else
        v29 = v112;
      v30 = strcmp(v29, "EnableVRROnCapableDevice");
      if (v115)
      {
        if (v116)
        {
          (*(void (**)(void))(*(_QWORD *)v115 + 40))();
          v116 = 0;
          v117 = 0;
        }
        v115 = 0;
      }
      if (v110 && (v111 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v110 + 40))();
      if (!v30)
        break;
      v27 = (re::DynamicString *)((char *)v27 + 64);
      if (v27 == v28)
        goto LABEL_42;
    }
    if (v92)
    {
      v35 = v93;
      v36 = (re::DynamicString *)((char *)v93 + 64 * v92);
      while (1)
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v110, v35);
        v114 = *((_DWORD *)v35 + 8);
        re::FixedArray<unsigned char>::FixedArray(&v115, (uint64_t *)v35 + 5);
        if ((v111 & 1) != 0)
          v37 = v113;
        else
          v37 = v112;
        v38 = strcmp(v37, "EnableVRROnCapableDevice");
        if (!v38)
          LOBYTE(v28) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)&v110) != 0;
        if (v115)
        {
          if (v116)
          {
            (*(void (**)(void))(*(_QWORD *)v115 + 40))();
            v116 = 0;
            v117 = 0;
          }
          v115 = 0;
        }
        if (v110 && (v111 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v110 + 40))();
        if (!v38)
          break;
        v35 = (re::DynamicString *)((char *)v35 + 64);
        if (v35 == v36)
          goto LABEL_128;
      }
      if ((v28 & 1) != 0)
      {
LABEL_42:
        if ((_QWORD)v101)
        {
          v31 = v102;
          v32 = (re::DynamicString *)((char *)v102 + 64 * (_QWORD)v101);
          while (1)
          {
            re::DynamicString::DynamicString((re::DynamicString *)&v110, v31);
            v114 = *((_DWORD *)v31 + 8);
            re::FixedArray<unsigned char>::FixedArray(&v115, (uint64_t *)v31 + 5);
            if ((v111 & 1) != 0)
              v33 = v113;
            else
              v33 = v112;
            v34 = strcmp(v33, "EnableSingleRMAS");
            if (v115)
            {
              if (v116)
              {
                (*(void (**)(void))(*(_QWORD *)v115 + 40))();
                v116 = 0;
                v117 = 0;
              }
              v115 = 0;
            }
            if (v110 && (v111 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v110 + 40))();
            if (!v34)
              break;
            v31 = (re::DynamicString *)((char *)v31 + 64);
            if (v31 == v32)
              goto LABEL_128;
          }
          if ((_QWORD)v101)
          {
            v39 = v102;
            v40 = (re::DynamicString *)((char *)v102 + 64 * (_QWORD)v101);
            while (1)
            {
              re::DynamicString::DynamicString((re::DynamicString *)&v110, v39);
              v114 = *((_DWORD *)v39 + 8);
              re::FixedArray<unsigned char>::FixedArray(&v115, (uint64_t *)v39 + 5);
              if ((v111 & 1) != 0)
                v41 = v113;
              else
                v41 = v112;
              v42 = strcmp(v41, "EnableSeparateRMAS");
              if (v115)
              {
                if (v116)
                {
                  (*(void (**)(void))(*(_QWORD *)v115 + 40))();
                  v116 = 0;
                  v117 = 0;
                }
                v115 = 0;
              }
              if (v110 && (v111 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v110 + 40))();
              if (!v42)
                break;
              v39 = (re::DynamicString *)((char *)v39 + 64);
              if (v39 == v40)
                goto LABEL_128;
            }
            if (v92)
            {
              v43 = v93;
              v44 = (re::DynamicString *)((char *)v93 + 64 * v92);
              while (1)
              {
                re::DynamicString::DynamicString((re::DynamicString *)&v110, v43);
                v114 = *((_DWORD *)v43 + 8);
                re::FixedArray<unsigned char>::FixedArray(&v115, (uint64_t *)v43 + 5);
                if ((v111 & 1) != 0)
                  v45 = v113;
                else
                  v45 = v112;
                v46 = strcmp(v45, "EnableSingleRMAS");
                if (!v46)
                  LOBYTE(v40) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)&v110) != 0;
                if (v115)
                {
                  if (v116)
                  {
                    (*(void (**)(void))(*(_QWORD *)v115 + 40))();
                    v116 = 0;
                    v117 = 0;
                  }
                  v115 = 0;
                }
                if (v110 && (v111 & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v110 + 40))();
                if (!v46)
                  break;
                v43 = (re::DynamicString *)((char *)v43 + 64);
                if (v43 == v44)
                  goto LABEL_128;
              }
              if ((v40 & 1) != 0 && v92)
              {
                v47 = v93;
                v48 = (re::DynamicString *)((char *)v93 + 64 * v92);
                do
                {
                  re::DynamicString::DynamicString((re::DynamicString *)&v110, v47);
                  v114 = *((_DWORD *)v47 + 8);
                  re::FixedArray<unsigned char>::FixedArray(&v115, (uint64_t *)v47 + 5);
                  if ((v111 & 1) != 0)
                    v49 = v113;
                  else
                    v49 = v112;
                  v50 = strcmp(v49, "EnableSeparateRMAS");
                  if (!v50)
                    re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)&v110);
                  if (v115)
                  {
                    if (v116)
                    {
                      (*(void (**)(void))(*(_QWORD *)v115 + 40))();
                      v116 = 0;
                      v117 = 0;
                    }
                    v115 = 0;
                  }
                  if (v110 && (v111 & 1) != 0)
                    (*(void (**)(void))(*(_QWORD *)v110 + 40))();
                  v47 = (re::DynamicString *)((char *)v47 + 64);
                  if (v50)
                    v51 = v47 == v48;
                  else
                    v51 = 1;
                }
                while (!v51);
              }
            }
          }
        }
      }
    }
  }
LABEL_128:
  if (v97[0])
  {
    if ((v97[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v97[0] + 40))();
    memset(v97, 0, sizeof(v97));
  }
  if (v96[0])
  {
    if ((v96[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v96[0] + 40))();
    memset(v96, 0, sizeof(v96));
  }
  if (v95[0])
  {
    if ((v95[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v95[0] + 40))();
    memset(v95, 0, sizeof(v95));
  }
  if (v94[0])
  {
    if ((v94[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v94[0] + 40))();
    memset(v94, 0, sizeof(v94));
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v91);
  if (v107[0])
  {
    if ((v107[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v107[0] + 40))();
    memset(v107, 0, sizeof(v107));
  }
  if (v106[0])
  {
    if ((v106[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v106[0] + 40))();
    memset(v106, 0, sizeof(v106));
  }
  if (v105[0])
  {
    if ((v105[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v105[0] + 40))();
    memset(v105, 0, sizeof(v105));
  }
  if ((_QWORD)v103)
  {
    if ((BYTE8(v103) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v103 + 40))();
    v103 = 0u;
    v104 = 0u;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v100);
  re::DynamicString::operator=((re::DynamicString *)&v75[8], (re::DynamicString *)&v88);
  *(_QWORD *)&v100 = *(_QWORD *)v75;
  *((_QWORD *)&v100 + 1) = v73;
  if ((v75[16] & 1) != 0)
    v52 = *(const char **)&v75[24];
  else
    v52 = &v75[17];
  FunctionVariantHash = re::generateFunctionVariantHash((uint64_t *)&v100, v52);
  v91[0] = (id)FunctionVariantHash;
  if (!re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(a1 + 360, FunctionVariantHash))
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      v54 = *(_QWORD *)(a2 + 16);
    else
      v54 = a2 + 9;
    if ((*(_QWORD *)(a3 + 8) & 1) != 0)
      v55 = *(_QWORD *)(a3 + 16);
    else
      v55 = a3 + 9;
    if ((v89 & 1) != 0)
      v56 = *(_BYTE **)&v90[7];
    else
      v56 = v90;
    re::DynamicString::format((re::DynamicString *)"%s_%s_%s_%zu", (re::DynamicString *)&v100, v54, v55, v56, FunctionVariantHash);
    re::DynamicString::operator=((re::DynamicString *)&v76, (re::DynamicString *)&v100);
    if ((_QWORD)v100 && (BYTE8(v100) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v100 + 40))();
    re::AssetHandle::serializationString(v68, (re::DynamicString *)v71);
    re::makeTruncatedAssetPath((char *)v71, (re::DynamicString *)&v100);
    re::DynamicString::operator=((re::DynamicString *)&v78, (re::DynamicString *)&v100);
    if ((_QWORD)v100)
    {
      if ((BYTE8(v100) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v100 + 40))();
      v100 = 0u;
      v101 = 0u;
    }
    if (*(_QWORD *)&v71[0])
    {
      if ((BYTE8(v71[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v71[0] + 40))();
      memset(v71, 0, sizeof(v71));
    }
    if ((BYTE8(v78) & 1) != 0)
      v57 = *((_QWORD *)&v78 + 1) >> 1;
    else
      v57 = BYTE8(v78) >> 1;
    if (!v57)
    {
      *(_QWORD *)&v100 = "default.metallib";
      *((_QWORD *)&v100 + 1) = 16;
      re::DynamicString::operator=((re::DynamicString *)&v78, (uint64_t)&v100);
    }
    if (v69)
    {
      *(_QWORD *)&v100 = "default-corere.metallib";
      *((_QWORD *)&v100 + 1) = 23;
      re::DynamicString::operator=((re::DynamicString *)&v78, (uint64_t)&v100);
    }
    v58 = *((_QWORD *)a8 + 1);
    if ((v58 & 1) != 0)
      v59 = v58 >> 1;
    else
      v59 = v58 >> 1;
    if (v59)
      re::DynamicString::operator=((re::DynamicString *)&v80, a8);
    if (!re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a1 + 640, (uint64_t)&v78))
    {
      v60 = (BYTE8(v78) & 1) != 0 ? *((_QWORD *)&v78 + 1) >> 1 : BYTE8(v78) >> 1;
      re::DynamicString::substr((re::DynamicString *)&v78, 0, v60 - 9, (re::DynamicString *)&v100);
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString&>(a1 + 640, (re::DynamicString *)&v78, 2, (const re::DynamicString *)&v100);
      if ((_QWORD)v100)
      {
        if ((BYTE8(v100) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v100 + 40))();
      }
    }
    LOBYTE(v82) = HIDWORD(v85) != 0;
    if (*(_QWORD *)(a1 + 360))
    {
      v61 = FunctionVariantHash % *(unsigned int *)(a1 + 384);
      v62 = *(unsigned int *)(*(_QWORD *)(a1 + 368) + 4 * v61);
      if ((_DWORD)v62 != 0x7FFFFFFF)
      {
        v63 = *(_QWORD *)(a1 + 376);
        if (*(_QWORD *)(v63 + 208 * v62 + 8) == FunctionVariantHash)
          goto LABEL_211;
        while (1)
        {
          LODWORD(v62) = *(_DWORD *)(v63 + 208 * v62) & 0x7FFFFFFF;
          if ((_DWORD)v62 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v63 + 208 * v62 + 8) == FunctionVariantHash)
            goto LABEL_211;
        }
      }
    }
    else
    {
      LODWORD(v61) = 0;
    }
    re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::FunctionVariantDescriptor&>(a1 + 360, v61, FunctionVariantHash, v91, (uint64_t)v72);
    ++*(_DWORD *)(a1 + 400);
  }
LABEL_211:
  if ((_QWORD)v80)
  {
    if ((BYTE8(v80) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v80 + 40))();
    v80 = 0u;
    v81 = 0u;
  }
  if ((_QWORD)v78)
  {
    if ((BYTE8(v78) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v78 + 40))();
    v78 = 0u;
    v79 = 0u;
  }
  if ((_QWORD)v76)
  {
    if ((BYTE8(v76) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v76 + 40))();
    v76 = 0u;
    v77 = 0u;
  }
  if (*(_QWORD *)&v75[8])
  {
    if ((v75[16] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v75[8] + 40))();
    memset(&v75[8], 0, 32);
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v72);
  v64 = re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v84);
  if (v88 && (v89 & 1) != 0)
    (*(void (**)(double))(*(_QWORD *)v88 + 40))(v64);
  return FunctionVariantHash;
}

BOOL re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v2 == 0x7FFFFFFF)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v4 + 208 * v2 + 8) == a2)
    return 1;
  do
  {
    LODWORD(v2) = *(_DWORD *)(v4 + 208 * v2) & 0x7FFFFFFF;
    result = (_DWORD)v2 != 0x7FFFFFFF;
  }
  while ((_DWORD)v2 != 0x7FFFFFFF && *(_QWORD *)(v4 + 208 * v2 + 8) != a2);
  return result;
}

uint64_t re::MaterialTechniqueData::operator=(uint64_t a1, uint64_t a2)
{
  re::DynamicString *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = re::DynamicString::operator=((re::DynamicString *)a1, (re::DynamicString *)a2);
  re::DynamicString::operator=((re::DynamicString *)((char *)v4 + 32), (re::DynamicString *)(a2 + 32));
  re::AssetHandle::operator=((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  re::AssetHandle::operator=((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 112), (re::DynamicString *)(a2 + 112));
  re::AssetHandle::operator=((uint64_t *)(a1 + 144), (uint64_t *)(a2 + 144));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 168), (re::DynamicString *)(a2 + 168));
  v5 = *(_OWORD *)(a2 + 200);
  v6 = *(_OWORD *)(a2 + 216);
  v7 = *(_OWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v7;
  *(_OWORD *)(a1 + 216) = v6;
  *(_OWORD *)(a1 + 200) = v5;
  if (*(_BYTE *)(a1 + 252) || *(_BYTE *)(a2 + 252))
  {
    if (!*(_BYTE *)(a1 + 252) || *(_BYTE *)(a2 + 252))
    {
      if (!*(_BYTE *)(a1 + 252) && *(_BYTE *)(a2 + 252))
        *(_BYTE *)(a1 + 252) = 1;
      *(_BYTE *)(a1 + 253) = *(_BYTE *)(a2 + 253);
    }
    else
    {
      *(_BYTE *)(a1 + 252) = 0;
    }
  }
  re::DynamicArray<re::RenderAttachmentState>::operator=(a1 + 256, (uint64_t *)(a2 + 256));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 296), (re::DynamicString *)(a2 + 296));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 328, a2 + 328);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 376, a2 + 376);
  re::DynamicArray<re::DynamicString>::operator=(a1 + 424, (uint64_t *)(a2 + 424));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 464, a2 + 464);
  re::DynamicArray<re::DynamicString>::operator=(a1 + 512, (uint64_t *)(a2 + 512));
  *(_WORD *)(a1 + 552) = *(_WORD *)(a2 + 552);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 560, a2 + 560);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 608, a2 + 608);
  *(_BYTE *)(a1 + 656) = *(_BYTE *)(a2 + 656);
  if (*(_BYTE *)(a1 + 657) || *(_BYTE *)(a2 + 657))
  {
    if (!*(_BYTE *)(a1 + 657) || *(_BYTE *)(a2 + 657))
    {
      if (!*(_BYTE *)(a1 + 657) && *(_BYTE *)(a2 + 657))
        *(_BYTE *)(a1 + 657) = 1;
      *(_BYTE *)(a1 + 658) = *(_BYTE *)(a2 + 658);
    }
    else
    {
      *(_BYTE *)(a1 + 657) = 0;
    }
  }
  return a1;
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addOrReplace(uint64_t *a1, const re::DynamicString *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int16 v9;

  v6 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(a1, (uint64_t)a2);
  if (v6 == -1)
    return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, (uint64_t *)a3);
  v7 = a1[1] + 96 * v6;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)a3;
  result = re::DynamicArray<unsigned long long>::operator=(v7 + 40, (uint64_t *)(a3 + 8));
  v9 = *(_WORD *)(a3 + 56);
  *(_QWORD *)(v7 + 80) = *(_QWORD *)(a3 + 48);
  *(_WORD *)(v7 + 88) = v9;
  return result;
}

double re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 40 * v5;
  result = 0.0;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v14 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v16 = *(_QWORD *)(v11 + 8);
  v15 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 8) = v13;
  *(_QWORD *)(v11 + 16) = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v15;
  *(_WORD *)(v11 + 32) = *(_WORD *)(a2 + 32);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t validateAlias(uint64_t result)
{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(result + 8);
  v2 = (v1 & 1) == 0;
  v3 = v1 >> 1;
  if ((v1 & 1) == 0)
    v3 = v1 >> 1;
  if (v3)
  {
    v4 = 0;
    do
    {
      if (v2)
      {
        v5 = *(unsigned __int8 *)(result + 9 + v4);
        v6 = result + 9;
      }
      else
      {
        v6 = *(_QWORD *)(result + 16);
        v5 = *(unsigned __int8 *)(v6 + v4);
      }
      if (v5 == 32)
      {
        *(_BYTE *)(v6 + v4) = 95;
        v1 = *(_QWORD *)(result + 8);
      }
      ++v4;
      v2 = (v1 & 1) == 0;
      v7 = v1 >> 1;
      if ((v1 & 1) == 0)
        v7 = v1 >> 1;
    }
    while (v7 > v4);
  }
  return result;
}

uint64_t generateJSONForFunctionVariant(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  const char *v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  __n128 *p_dst;
  __int16 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  unsigned __int32 v24;
  unsigned __int32 v25;
  __n128 *v26;
  __int16 v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  unsigned __int32 v31;
  unsigned __int32 v32;
  __n128 *v33;
  __int16 v34;
  unint64_t v35;
  uint64_t v36;
  re::DynamicString *v37;
  re::DynamicString *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  unsigned __int32 v43;
  unsigned __int32 v44;
  __n128 *v45;
  __int16 v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  BOOL v50;
  __int16 v51;
  int v52;
  float v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t result;
  int *v58;
  uint64_t *v59;
  uint64_t v61;
  char v62;
  _BYTE v63[23];
  uint64_t v64;
  char v65;
  _BYTE v66[23];
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  __n128 v75;
  unint64_t v76;
  re::DynamicString *v77;
  __n128 v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  __n128 __dst;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 22) = 3;
  v83 = 0x150000000000;
  __dst = 0uLL;
  re::DynamicString::DynamicString((re::DynamicString *)&v64, (const re::DynamicString *)(a2 + 9));
  validateAlias((uint64_t)&v64);
  if ((v65 & 1) != 0)
    v10 = *(const char **)&v66[7];
  else
    v10 = v66;
  v11 = strlen(v10);
  v12 = v11;
  if (v11 > 0x15)
  {
    __dst.n128_u32[0] = v11;
    p_dst = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v9, v11 + 1);
    __dst.n128_u64[1] = (unint64_t)p_dst;
    v14 = 3077;
  }
  else
  {
    BYTE5(v83) = 21 - v11;
    p_dst = &__dst;
    v14 = 7173;
  }
  HIWORD(v83) = v14;
  memcpy(p_dst, v10, v12);
  p_dst->n128_u8[v12] = 0;
  v70 = 0x405000000000000;
  *((_QWORD *)&v69 + 1) = "label";
  *(_QWORD *)&v69 = 5;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v69, &__dst, v9);
  v15 = (uint64_t)(a2 + 13);
  v16 = re::Hash<re::DynamicString>::operator()((uint64_t)&v69, (uint64_t)(a2 + 13));
  v17 = 0x7FFFFFFFLL;
  v59 = a2;
  if (*(_QWORD *)a4)
  {
    v18 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4 * (v16 % *(unsigned int *)(a4 + 24)));
    if ((_DWORD)v18 != 0x7FFFFFFF)
    {
      v19 = *(_QWORD *)(a4 + 16);
      v17 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v19 + 80 * v18 + 16, v15))
      {
        v18 = *(_DWORD *)(v19 + 80 * v18 + 8) & 0x7FFFFFFF;
        if (v18 == 0x7FFFFFFF)
          goto LABEL_14;
      }
      v17 = v18;
    }
  }
LABEL_14:
  v20 = *(_QWORD *)(a4 + 16);
  if ((*(_BYTE *)(v20 + 80 * v17 + 56) & 1) != 0)
    v21 = *(_QWORD *)(v20 + 80 * v17 + 64);
  else
    v21 = v20 + 80 * v17 + 57;
  if ((v59[6] & 1) != 0)
    v22 = (char *)v59[7];
  else
    v22 = (char *)v59 + 49;
  re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)&v61, v21, v22);
  validateAlias((uint64_t)&v61);
  v81 = 0x150000000000;
  v80 = 0uLL;
  if ((v62 & 1) != 0)
    v23 = *(const char **)&v63[7];
  else
    v23 = v63;
  v24 = strlen(v23);
  v25 = v24;
  if (v24 > 0x15)
  {
    v80.n128_u32[0] = v24;
    v26 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v9, v24 + 1);
    v80.n128_u64[1] = (unint64_t)v26;
    v27 = 3077;
  }
  else
  {
    BYTE5(v81) = 21 - v24;
    v26 = &v80;
    v27 = 7173;
  }
  HIWORD(v81) = v27;
  memcpy(v26, v23, v25);
  v26->n128_u8[v25] = 0;
  v70 = 0x405000000000000;
  *((_QWORD *)&v69 + 1) = "function";
  *(_QWORD *)&v69 = 8;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v69, &v80, v9);
  v28 = v59[18];
  v29 = v28 >> 1;
  if ((v28 & 1) == 0)
    v29 = v28 >> 1;
  if (v29)
  {
    v76 = 0x150000000000;
    v75 = 0uLL;
    if ((v28 & 1) != 0)
      v30 = (const char *)v59[19];
    else
      v30 = (char *)v59 + 145;
    v31 = strlen(v30);
    v32 = v31;
    if (v31 > 0x15)
    {
      v75.n128_u32[0] = v31;
      v33 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v9, v31 + 1);
      v75.n128_u64[1] = (unint64_t)v33;
      v34 = 3077;
    }
    else
    {
      BYTE5(v76) = 21 - v31;
      v33 = &v75;
      v34 = 7173;
    }
    HIWORD(v76) = v34;
    memcpy(v33, v30, v32);
    v33->n128_u8[v32] = 0;
    v70 = 0x405000000000000;
    *((_QWORD *)&v69 + 1) = "specialized_name";
    *(_QWORD *)&v69 = 16;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v69, &v75, v9);
  }
  v58 = (int *)a1;
  v79 = 0x4000000000000;
  v78 = 0uLL;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v75, v59);
  LOBYTE(v69) = a5;
  v35 = 126 - 2 * __clz(v76);
  if (v76)
    v36 = v35;
  else
    v36 = 0;
  std::__introsort<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,false>((uint64_t)v77, (unint64_t)v77 + 64 * v76, (unsigned __int8 *)&v69, v36, 1);
  if (v76)
  {
    v37 = v77;
    v38 = (re::DynamicString *)((char *)v77 + 64 * v76);
    while (1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v69, v37);
      v71 = *((_DWORD *)v37 + 8);
      re::FixedArray<unsigned char>::FixedArray(&v72, (uint64_t *)v37 + 5);
      v39 = *(_QWORD *)(a3 + 24);
      v68 = 0x3000000000000;
      v67 = 0uLL;
      v89 = 0x3000000000000;
      v88 = 0uLL;
      v40 = a5;
      v41 = v9;
      if ((_DWORD)a5)
      {
        v87 = 0x150000000000;
        v86 = 0uLL;
        v42 = (BYTE8(v69) & 1) != 0 ? (const char *)v70 : (char *)&v69 + 9;
        v43 = strlen(v42);
        v44 = v43;
        if (v43 > 0x15)
        {
          v86.n128_u32[0] = v43;
          v45 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v39, v43 + 1);
          v86.n128_u64[1] = (unint64_t)v45;
          v46 = 3077;
        }
        else
        {
          BYTE5(v87) = 21 - v43;
          v45 = &v86;
          v46 = 7173;
        }
        HIWORD(v87) = v46;
        memcpy(v45, v42, v44);
        v45->n128_u8[v44] = 0;
        v93 = 0x405000000000000;
        v92.n128_u64[0] = 2;
        v92.n128_u64[1] = (unint64_t)"id";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (__int128 *)&v92, &v86, v39);
        v91 = 0x405000000000000;
        v92.n128_u64[0] = 7;
        v90.n128_u64[0] = 20;
        v90.n128_u64[1] = (unint64_t)"FunctionConstantName";
        v93 = 0x405000000000000;
        v92.n128_u64[1] = (unint64_t)"id_type";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (__int128 *)&v92, &v90, v39);
      }
      else
      {
        v87 = 0x3000000000000;
        v86 = 0uLL;
        v85 = 0x1F6000000000000;
        v84 = (__n128)HIWORD(v71);
        v93 = 0x405000000000000;
        v92.n128_u64[0] = 4;
        v92.n128_u64[1] = (unint64_t)"data";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v86, (__int128 *)&v92, &v84, v39);
        v93 = 0x405000000000000;
        v92.n128_u64[0] = 2;
        v92.n128_u64[1] = (unint64_t)"id";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (__int128 *)&v92, &v86, v39);
        v91 = 0x405000000000000;
        v92.n128_u64[0] = 7;
        v90.n128_u64[0] = 21;
        v90.n128_u64[1] = (unint64_t)"FunctionConstantIndex";
        v93 = 0x405000000000000;
        v92.n128_u64[1] = (unint64_t)"id_type";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (__int128 *)&v92, &v90, v39);
      }
      v91 = 0x405000000000000;
      v92 = (__n128)(unsigned __int16)v71;
      v90.n128_u64[0] = 10;
      v90.n128_u64[1] = (unint64_t)"value_type";
      v93 = 0x1F6000000000000;
      *(_QWORD *)&v48 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (__int128 *)&v90, &v92, v39).n128_u64[0];
      if ((unsigned __int16)v71 > 0x20u)
        break;
      a5 = v40;
      if ((unsigned __int16)v71 != 3)
      {
        if ((unsigned __int16)v71 != 29)
          goto LABEL_83;
        v49 = *(int *)v74;
        v91 = 0x405000000000000;
        v92 = (__n128)(unint64_t)v49;
        v90.n128_u64[0] = 4;
        v90.n128_u64[1] = (unint64_t)"data";
        v93 = 0;
        v50 = v49 < 0;
        v51 = 182;
LABEL_61:
        if (!v50)
          v51 = 502;
        goto LABEL_63;
      }
      v53 = *v74;
      v91 = 0x405000000000000;
      v90.n128_u64[0] = 4;
      v90.n128_u64[1] = (unint64_t)"data";
      v92.n128_u64[1] = 0;
      v93 = 0;
      v92.n128_f64[0] = v53;
      v51 = 534;
LABEL_63:
      HIWORD(v93) = v51;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v88, (__int128 *)&v90, &v92, v39);
      v93 = 0x405000000000000;
      v92.n128_u64[0] = 5;
      v92.n128_u64[1] = (unint64_t)"value";
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (__int128 *)&v92, &v88, v39);
      v9 = v41;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v78, &v67, v41);
      if (v72)
      {
        if (v73)
        {
          (*(void (**)(void))(*(_QWORD *)v72 + 40))();
          v73 = 0;
          v74 = 0;
        }
        v72 = 0;
      }
      if ((_QWORD)v69 && (BYTE8(v69) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v69 + 40))();
      v37 = (re::DynamicString *)((char *)v37 + 64);
      if (v37 == v38)
        goto LABEL_71;
    }
    a5 = v40;
    if ((unsigned __int16)v71 != 33)
    {
      if ((unsigned __int16)v71 != 53)
      {
LABEL_83:
        re::internal::assertLog((re::internal *)5, v47, v48, "assertion failure: '%s' (%s:line %i) PSOToolManager serialization for function constant type %d not implemented yet.", "!\"Unreachable code\"", "generateJSONForFunctionConstant", 768, (unsigned __int16)v71, v58);
        _os_crash();
        __break(1u);
      }
      v52 = *(unsigned __int8 *)v74;
      v91 = 0x405000000000000;
      v92 = 0uLL;
      v90.n128_u64[0] = 4;
      v90.n128_u64[1] = (unint64_t)"data";
      v93 = 0;
      if (v52)
        v51 = 10;
      else
        v51 = 9;
      goto LABEL_63;
    }
    v54 = *(unsigned int *)v74;
    v91 = 0x405000000000000;
    v92 = (__n128)v54;
    v90.n128_u64[0] = 4;
    v90.n128_u64[1] = (unint64_t)"data";
    v93 = 0;
    v50 = (v54 & 0x80000000) != 0;
    v51 = 470;
    goto LABEL_61;
  }
LABEL_71:
  v55 = v59[18];
  if ((v55 & 1) != 0)
    v56 = v55 >> 1;
  else
    v56 = v55 >> 1;
  if (!v56)
  {
    v70 = 0x405000000000000;
    *((_QWORD *)&v69 + 1) = "constant_values";
    *(_QWORD *)&v69 = 15;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(v58, &v69, &v78, v9);
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v75);
  if (v61 && (v62 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v61 + 40))();
  result = v64;
  if (v64)
  {
    if ((v65 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v64 + 40))();
  }
  return result;
}

int *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack(int *a1, __int128 *a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 >= v6)
  {
    if ((_DWORD)v6)
      v7 = v6 + ((v6 + 1) >> 1);
    else
      v7 = 16;
    if (v6 < v7)
    {
      *((_QWORD *)a1 + 1) = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Realloc(a3, *((char **)a1 + 1), 24 * v6, 24 * v7);
      a1[1] = v7;
      v5 = *a1;
    }
  }
  v8 = *((_QWORD *)a1 + 1);
  *a1 = v5 + 1;
  v9 = v8 + 24 * v5;
  v10 = *a2;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v9 = v10;
  *((_WORD *)a2 + 11) = 0;
  return a1;
}

uint64_t generateJSONForComputeShader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  const char *v9;
  uint64_t v10;
  char v11;
  const char *v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  __n128 *p_dst;
  __int16 v16;
  __n128 v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  _BYTE v21[23];
  __n128 v22;
  uint64_t v23;
  __n128 __dst;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 22) = 3;
  if (a5)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      v9 = *(const char **)(a2 + 16);
    else
      v9 = (const char *)(a2 + 9);
  }
  else
  {
    v9 = "default";
  }
  if ((*(_QWORD *)(a3 + 8) & 1) != 0)
    v10 = *(_QWORD *)(a3 + 16);
  else
    v10 = a3 + 9;
  re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)&v19, v9, v10);
  validateAlias((uint64_t)&v19);
  v25 = 0x150000000000;
  __dst = 0uLL;
  v11 = v20;
  if ((v20 & 1) != 0)
    v12 = *(const char **)&v21[7];
  else
    v12 = v21;
  v13 = strlen(v12);
  v14 = v13;
  if (v13 > 0x15)
  {
    __dst.n128_u32[0] = v13;
    p_dst = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a4, v13 + 1);
    __dst.n128_u64[1] = (unint64_t)p_dst;
    v16 = 3077;
  }
  else
  {
    BYTE5(v25) = 21 - v13;
    p_dst = &__dst;
    v16 = 7173;
  }
  HIWORD(v25) = v16;
  memcpy(p_dst, v12, v14);
  p_dst->n128_u8[v14] = 0;
  v27 = 0x405000000000000;
  *((_QWORD *)&v26 + 1) = "compute_function";
  *(_QWORD *)&v26 = 16;
  v17 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v26, &__dst, a4);
  if (a6)
  {
    v23 = 0x1F6000000000000;
    v22 = (__n128)1uLL;
    v27 = 0x405000000000000;
    *((_QWORD *)&v26 + 1) = "threadgroup_size_is_multiple_of_thread_execution_width";
    *(_QWORD *)&v26 = 54;
    v17 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v26, &v22, a4);
  }
  result = v19;
  if (v19)
  {
    if ((v11 & 1) != 0)
      return (*(uint64_t (**)(__n128))(*(_QWORD *)v19 + 40))(v17);
  }
  return result;
}

uint64_t generateJSONForTileShader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8)
{
  const char *v12;
  uint64_t v13;
  const char *v14;
  unsigned __int32 v15;
  unsigned __int32 v16;
  __n128 *p_dst;
  __int16 v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  __n128 v25;
  uint64_t result;
  char v27;
  uint64_t v29;
  char v30;
  _BYTE v31[23];
  __int128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 __dst;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 22) = 3;
  if (a5)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      v12 = *(const char **)(a2 + 16);
    else
      v12 = (const char *)(a2 + 9);
  }
  else
  {
    v12 = "default";
  }
  if ((*(_QWORD *)(a3 + 8) & 1) != 0)
    v13 = *(_QWORD *)(a3 + 16);
  else
    v13 = a3 + 9;
  re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)&v29, v12, v13);
  validateAlias((uint64_t)&v29);
  v37 = 0x150000000000;
  __dst = 0uLL;
  v27 = v30;
  if ((v30 & 1) != 0)
    v14 = *(const char **)&v31[7];
  else
    v14 = v31;
  v15 = strlen(v14);
  v16 = v15;
  if (v15 > 0x15)
  {
    __dst.n128_u32[0] = v15;
    p_dst = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a4, v15 + 1);
    __dst.n128_u64[1] = (unint64_t)p_dst;
    v18 = 3077;
  }
  else
  {
    BYTE5(v37) = 21 - v15;
    p_dst = &__dst;
    v18 = 7173;
  }
  HIWORD(v37) = v18;
  memcpy(p_dst, v14, v16);
  p_dst->n128_u8[v16] = 0;
  v41 = 0x405000000000000;
  v40.n128_u64[0] = 13;
  v40.n128_u64[1] = (unint64_t)"tile_function";
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, (__int128 *)&v40, &__dst, a4);
  if (a6)
  {
    v39 = 0x1F6000000000000;
    v38 = (__n128)1uLL;
    v41 = 0x405000000000000;
    v40.n128_u64[0] = 34;
    v40.n128_u64[1] = (unint64_t)"threadgroup_size_matches_tile_size";
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, (__int128 *)&v40, &v38, a4);
  }
  v35 = 0x4000000000000;
  v34 = 0uLL;
  v19 = *(_QWORD *)(a7 + 16);
  if (v19)
  {
    v20 = *(int **)(a7 + 32);
    v21 = 4 * v19;
    do
    {
      v22 = *v20++;
      v33 = 0x3000000000000;
      v32 = 0uLL;
      v38.n128_u64[1] = (unint64_t)"pixel_format";
      v39 = 0x405000000000000;
      v38.n128_u64[0] = 12;
      v41 = 0;
      v40 = (__n128)(unint64_t)v22;
      if (v22 < 0)
        v23 = 182;
      else
        v23 = 502;
      HIWORD(v41) = v23;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v32, (__int128 *)&v38, &v40, a4);
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v34, &v32, a4);
      v21 -= 4;
    }
    while (v21);
  }
  if (a8 != 1)
  {
    v39 = 0x405000000000000;
    v38.n128_u64[0] = 19;
    v38.n128_u64[1] = (unint64_t)"raster_sample_count";
    v41 = 0;
    v40 = (__n128)(unint64_t)a8;
    if (a8 < 0)
      v24 = 182;
    else
      v24 = 502;
    HIWORD(v41) = v24;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, (__int128 *)&v38, &v40, a4);
  }
  v41 = 0x405000000000000;
  v40.n128_u64[0] = 17;
  v40.n128_u64[1] = (unint64_t)"color_attachments";
  v25 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, (__int128 *)&v40, &v34, a4);
  result = v29;
  if (v29)
  {
    if ((v27 & 1) != 0)
      return (*(uint64_t (**)(__n128))(*(_QWORD *)v29 + 40))(v25);
  }
  return result;
}

uint64_t re::PSOToolManager::setCustomMaterialWrappingDefinition(re::PSOToolManager *this, const re::DynamicString *a2)
{
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  __n128 v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  __n128 v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  uint64_t v25;
  __n128 v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  _anonymous_namespace_ *v31;
  _anonymous_namespace_ *v32;
  _anonymous_namespace_ *v33;
  const char *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char **v43;
  const char *v44;
  const char *v45;
  _anonymous_namespace_ *v47;
  char v48;
  uint64_t v49[5];
  uint64_t v50[5];
  uint64_t v51[5];
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  _BYTE v56[32];
  _BYTE v57[32];
  _BYTE v58[32];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[6];

  v62[5] = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 952) = 1;
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v51, (re::DynamicString *)&v52, 5uLL);
  v8 = 0;
  v9 = 0uLL;
  do
  {
    v10 = *(_anonymous_namespace_ **)&v58[v8];
    if (v10)
    {
      if ((v58[v8 + 8] & 1) != 0)
      {
        v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD, __n128))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)&v58[v8 + 16], v9);
        v9 = 0uLL;
      }
      *(__n128 *)&v58[v8] = v9;
      *(__n128 *)&v58[v8 + 16] = v9;
    }
    v8 -= 32;
  }
  while (v8 != -160);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v50, (re::DynamicString *)&v52, 4uLL);
  v14 = 0;
  v15 = 0uLL;
  do
  {
    v16 = *(_anonymous_namespace_ **)&v57[v14];
    if (v16)
    {
      if ((v57[v14 + 8] & 1) != 0)
      {
        v16 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD, __n128))(*(_QWORD *)v16 + 40))(v16, *(_QWORD *)&v57[v14 + 16], v15);
        v15 = 0uLL;
      }
      *(__n128 *)&v57[v14] = v15;
      *(__n128 *)&v57[v14 + 16] = v15;
    }
    v14 -= 32;
  }
  while (v14 != -128);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v49, (re::DynamicString *)&v52, 9uLL);
  v25 = 36;
  v26 = 0uLL;
  do
  {
    v27 = (_anonymous_namespace_ *)v51[v25 + 1];
    if (v27)
    {
      if ((v51[v25 + 2] & 1) != 0)
      {
        v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, __n128))(*(_QWORD *)v27 + 40))(v27, v51[v25 + 3], v26);
        v26 = 0uLL;
      }
      *(__n128 *)&v51[v25 + 1] = v26;
      *(__n128 *)&v51[v25 + 3] = v26;
    }
    v25 -= 4;
  }
  while (v25 * 8);
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0x7FFFFFFFLL;
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v52, (re::DynamicString *)&v47, v50);
  v28 = v47;
  if (v47 && (v48 & 1) != 0)
    v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 40))();
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v52, (re::DynamicString *)&v47, v50);
  v29 = v47;
  if (v47 && (v48 & 1) != 0)
    v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 40))();
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v52, (re::DynamicString *)&v47, v50);
  v30 = v47;
  if (v47 && (v48 & 1) != 0)
    v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 40))();
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v52, (re::DynamicString *)&v47, v50);
  v31 = v47;
  if (v47 && (v48 & 1) != 0)
    v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 40))();
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v52, (re::DynamicString *)&v47, v51);
  v32 = v47;
  if (v47 && (v48 & 1) != 0)
    v32 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 40))();
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v52, (re::DynamicString *)&v47, v51);
  v33 = v47;
  if (v47 && (v48 & 1) != 0)
    v33 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 40))();
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v52, (re::DynamicString *)&v47, v49);
  if (v47 && (v48 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v47 + 40))();
  if ((*((_QWORD *)a2 + 1) & 1) != 0)
    v34 = (const char *)*((_QWORD *)a2 + 2);
  else
    v34 = (char *)a2 + 9;
  if (!strcmp(v34, "CustomUICALayer.rematerialdefinition"))
    v35 = 2;
  else
    v35 = 1;
  *((_DWORD *)this + 239) = v35;
  v36 = re::Hash<re::DynamicString>::operator()((uint64_t)&v47, (uint64_t)a2);
  v37 = 0x7FFFFFFFLL;
  if ((_QWORD)v52)
  {
    v38 = *(unsigned int *)(*((_QWORD *)&v52 + 1) + 4 * (v36 % DWORD2(v53)));
    if ((_DWORD)v38 != 0x7FFFFFFF)
    {
      v39 = v53;
      v37 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v39 + 88 * v38 + 16, (uint64_t)a2))
      {
        v38 = *(_DWORD *)(v39 + 88 * v38 + 8) & 0x7FFFFFFF;
        if (v38 == 0x7FFFFFFF)
          goto LABEL_53;
      }
      v37 = v38;
    }
  }
LABEL_53:
  v40 = v53 + 88 * v37;
  v41 = *(_QWORD *)(v40 + 64);
  if (v41)
  {
    v42 = 32 * v41;
    v43 = (const char **)(*(_QWORD *)(v40 + 80) + 16);
    do
    {
      if ((*((_BYTE *)a2 + 8) & 1) != 0)
        v44 = (const char *)*((_QWORD *)a2 + 2);
      else
        v44 = (char *)a2 + 9;
      if ((*(_BYTE *)(v43 - 1) & 1) != 0)
        v45 = *v43;
      else
        v45 = (char *)v43 - 7;
      re::PSOToolManager::generateFunctionVariationsForTechnique(this, v44, v45);
      v43 += 4;
      v42 -= 32;
    }
    while (v42);
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v52);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v49);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v50);
  return re::DynamicArray<re::DynamicString>::deinit((uint64_t)v51);
}

_QWORD *re::PSOToolManager::serializeToURL(uint64_t this, char *a2)
{
  const char *v2;
  char *v4;
  int locale_low;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int8 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _anonymous_namespace_ *v22;
  re::DynamicString *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  unsigned __int32 v32;
  unsigned __int32 v33;
  uint64_t v34;
  __n128 *v35;
  const char *v36;
  unsigned __int32 v37;
  unsigned __int32 v38;
  __n128 *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  id v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  std::string::value_type *v70;
  _BYTE *v71;
  const char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  __int128 v80;
  _anonymous_namespace_ *v81;
  uint64_t v82;
  uint64_t v83;
  std::locale::__imp *v84;
  _anonymous_namespace_ *v85;
  _anonymous_namespace_ *v86;
  _anonymous_namespace_ *v87;
  std::locale::__imp *locale;
  std::locale::__imp *v89;
  const char *v90;
  _anonymous_namespace_ *v91;
  _anonymous_namespace_ *v92;
  uint64_t v93;
  unint64_t v94;
  const char *v95;
  _anonymous_namespace_ *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _anonymous_namespace_ *v100;
  _anonymous_namespace_ *v101;
  _anonymous_namespace_ *v102;
  _anonymous_namespace_ *v103;
  unint64_t v104;
  unint64_t v105;
  id v106;
  re::DynamicString *v107;
  re::DynamicString *v108;
  unint64_t v109;
  const char *v110;
  const char *v111;
  const char *v112;
  const char *v113;
  _anonymous_namespace_ *v114;
  const char *v115;
  _anonymous_namespace_ *v116;
  const char *v117;
  _anonymous_namespace_ *v118;
  std::locale::__imp *v119;
  uint64_t v120;
  unsigned __int16 *v121;
  std::locale *v122;
  std::locale *v123;
  unint64_t v124;
  int v125;
  uint64_t VertexFormatFromDataType;
  unint64_t v127;
  unsigned int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int16 *v140;
  _anonymous_namespace_ *v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unsigned __int8 v150;
  unint64_t v151;
  const char *v152;
  unsigned __int32 v153;
  unsigned __int32 v154;
  __n128 *v155;
  __int16 v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unsigned __int8 v168;
  unint64_t v169;
  const char *v170;
  unsigned __int32 v171;
  unsigned __int32 v172;
  __n128 *v173;
  __int16 v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  unsigned __int8 v183;
  const char *v184;
  size_t v185;
  __n128 v186;
  unsigned __int16 *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 v193;
  const char *v194;
  size_t v195;
  __int16 v196;
  __n128 v197;
  unsigned __int16 v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int16 *v203;
  int v204;
  int v205;
  std::locale *v206;
  std::locale *v207;
  unsigned __int16 *v208;
  unsigned int v209;
  uint64_t v210;
  int *v211;
  int *v212;
  unint64_t v213;
  unint64_t v214;
  int *v215;
  unsigned __int16 v216;
  __int16 v217;
  int *v218;
  int *v219;
  int *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unsigned __int16 v224;
  unsigned __int16 v225;
  int v226;
  unsigned __int16 v227;
  unsigned __int16 v228;
  unsigned __int16 v229;
  unsigned __int16 v230;
  unsigned __int16 v231;
  unsigned __int16 v232;
  unsigned __int16 v233;
  unint64_t v234;
  unsigned __int16 v235;
  unint64_t v236;
  unsigned __int16 v237;
  unint64_t v238;
  unsigned __int16 v239;
  unint64_t v240;
  unsigned __int16 v241;
  unint64_t v242;
  unsigned __int16 v243;
  unint64_t v244;
  __n128 v245;
  double v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  re::ns *v255;
  uint64_t v256;
  int *v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  __int128 v261;
  unint64_t v262;
  __int128 *v263;
  int v264;
  int v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  re::ns *v274;
  uint64_t v275;
  int *v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  _anonymous_namespace_ *v285;
  _anonymous_namespace_ *v286;
  _anonymous_namespace_ *v287;
  _anonymous_namespace_ *v288;
  _anonymous_namespace_ *v289;
  _anonymous_namespace_ *v290;
  _anonymous_namespace_ *v291;
  _anonymous_namespace_ *v292;
  _anonymous_namespace_ *v293;
  std::string::size_type v294;
  std::locale::__imp *v295;
  _anonymous_namespace_ *v296;
  int *v297;
  unint64_t v298;
  unint64_t v299;
  std::string::size_type v300;
  const char *v301;
  const char *v302;
  char *v303;
  _BYTE *v304;
  _anonymous_namespace_ *v305;
  char *v306;
  char *v307;
  const char *v308;
  unsigned __int32 v309;
  unsigned __int32 v310;
  __n128 *v311;
  __int16 v312;
  _BYTE *v313;
  _BYTE *v314;
  char v315;
  const char *v316;
  unsigned __int32 v317;
  unsigned __int32 v318;
  __n128 *v319;
  __int16 v320;
  unsigned __int16 v321;
  unsigned __int16 v322;
  unsigned __int16 v323;
  int *v324;
  uint64_t v325;
  unint64_t v326;
  unsigned __int16 v327;
  __n128 v328;
  uint64_t v329;
  uint64_t v330;
  std::string::size_type v331;
  std::string::size_type v332;
  std::ios_base *v333;
  uint64_t v334;
  _QWORD *v335;
  size_t v336;
  _QWORD *v337;
  _QWORD *v338;
  const std::locale::facet *v339;
  _anonymous_namespace_ *v340;
  uint64_t v341;
  int *v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  id v347;
  id v348;
  id v349;
  id v350;
  const char *v351;
  size_t v352;
  _QWORD *v353;
  _QWORD *v354;
  const std::locale::facet *v355;
  _anonymous_namespace_ *v356;
  int v357;
  uint64_t v358;
  int *v359;
  int v360;
  unsigned __int16 *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  size_t v366;
  int v367;
  int v368;
  uint64_t v369;
  _QWORD *v370;
  std::locale::id *v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  std::locale::__imp *v375;
  size_t v376;
  _QWORD *v377;
  _QWORD *v378;
  const std::locale::facet *v379;
  _QWORD *v380;
  const std::locale::facet *v381;
  unsigned int v382;
  unsigned int v383;
  signed int v384;
  unsigned int v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t i;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unsigned int v395;
  unint64_t v396;
  int v397;
  uint64_t v398;
  int v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  __int128 v403;
  uint64_t v404;
  uint64_t v405;
  int *v406;
  int v407;
  char *v408;
  _anonymous_namespace_ *v409;
  _OWORD *v410;
  _anonymous_namespace_ *v411;
  uint64_t v412;
  int v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  int *v417;
  int v418;
  uint64_t v419;
  int v420;
  int v421;
  uint64_t v422;
  int *v423;
  int v424;
  float v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  __int128 v430;
  int v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  std::locale::__imp *v438;
  int v439;
  int v440;
  std::locale::__imp *v441;
  std::locale::__imp *v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int *v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  int v452;
  int v453;
  int v454;
  unint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  _QWORD *v458;
  _QWORD *v459;
  std::locale::id *v460;
  const std::locale::facet *v461;
  _QWORD *v462;
  const std::locale::facet *v463;
  _QWORD *v464;
  const std::locale::facet *v465;
  _QWORD *v466;
  const std::locale::facet *v467;
  _QWORD *v468;
  const std::locale::facet *v469;
  _QWORD *v470;
  const std::locale::facet *v471;
  const re::DynamicString *v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  _QWORD *v479;
  const char *v480;
  size_t v481;
  _QWORD *v482;
  _QWORD *v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  _QWORD *v487;
  _QWORD *v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  _QWORD *v492;
  uint64_t *v493;
  uint64_t v494;
  _QWORD *v495;
  _QWORD *v496;
  const std::locale::facet *v497;
  _BYTE *v498;
  uint64_t v499;
  const char *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  id v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _QWORD *v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  id v515;
  unint64_t v516;
  unint64_t v517;
  unsigned __int8 v518;
  _QWORD *v519;
  uint64_t v520;
  std::string::size_type *p_size;
  uint64_t *v522;
  re::DynamicString *v523;
  re::DynamicString *v524;
  uint64_t v525;
  re::DynamicString *v526;
  re::DynamicString *v527;
  uint64_t v528;
  char As64Bits;
  re::DynamicString *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  _QWORD *v536;
  _QWORD v537[2];
  uint64_t v538;
  int v539;
  uint64_t *v540;
  unint64_t v541;
  uint64_t v542[6];
  uint64_t v543[6];
  _QWORD v544[3];
  _BYTE v545[16];
  uint64_t v546;
  re::DynamicString *v547;
  uint64_t v548[4];
  unint64_t v549;
  _OWORD v550[2];
  _QWORD v551[3];
  uint64_t v552;
  std::string::size_type *v553;
  unsigned __int16 *v554;
  uint64_t v555[4];
  __int128 v556;
  uint64_t v557[4];
  __int128 v558;
  _QWORD v559[3];
  _QWORD v560[3];
  char v561[8];
  char *v562;
  __int128 v563;
  __int128 v564;
  _DWORD v565[7];
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  uint64_t v571;
  int v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  uint64_t v577[5];
  id v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  int v582;
  char v583;
  char v584;
  uint64_t v585;
  unint64_t v586;
  unint64_t v587;
  uint64_t v588;
  char v589;
  _BYTE v590[7];
  const char *v591;
  char v592;
  std::__fs::filesystem::path v593;
  uint64_t v594;
  unint64_t v595[5];
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  char v603;
  uint64_t v604[19];
  __int128 v605;
  uint64_t v606;
  _BYTE v607[28];
  __int16 v608;
  _BYTE v609[10];
  __n128 __dst[3];
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  int v616;
  uint64_t v617;
  __n128 v618;
  __int128 v619;
  int v620;
  uint64_t v621;
  std::locale v622[4];
  _BYTE v623[152];
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  int v635;
  __int128 v636;
  __int128 v637;
  int v638;
  uint64_t v639;
  int v640;
  __n128 v641;
  __n128 v642;
  __n128 v643;
  int v644;
  __n128 v645;
  __int128 v646;
  int v647;
  uint64_t v648;
  __n128 v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  char v655;
  char v656;
  __n128 v657;
  uint64_t v658;
  uint64_t v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  char v663;
  char v664;
  __int128 v665;
  uint64_t v666;
  uint64_t v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  char v671;
  char v672;
  __n128 v673[4];
  __n128 v674;
  __n128 v675;
  __n128 v676;
  int v677;
  _BYTE v678[40];
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  char v688;
  __n128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  _OWORD v693[2];
  uint64_t v694;
  __int128 v695;
  __int128 v696;
  unsigned __int8 v697;
  _QWORD v698[2];
  uint64_t v699;
  int v700;
  unint64_t *v701;
  _QWORD v702[2];
  uint64_t v703;
  int v704;
  unint64_t *v705;
  __n128 v706;
  uint64_t v707;
  __n128 v708;
  uint64_t v709;
  __n128 v710;
  uint64_t v711;
  __n128 v712;
  uint64_t v713;
  __n128 v714;
  uint64_t v715;
  _QWORD v716[3];
  _anonymous_namespace_ *v717;
  _anonymous_namespace_ *v718;
  __int128 v719;
  __int128 v720;
  uint64_t v721;
  uint64_t v722;
  int v723;
  uint64_t v724;
  __n128 v725;
  uint64_t v726;
  __n128 v727;
  uint64_t v728;
  __n128 v729;
  uint64_t v730;
  _BYTE v731[28];
  __int16 v732;
  unint64_t v733;
  uint64_t v734;

  v2 = a2;
  v734 = *MEMORY[0x24BDAC8D0];
  memset(&v593, 0, sizeof(v593));
  v4 = a2 - 1;
  while (*++v4)
    ;
  std::string::append[abi:nn180100]<char const*,0>(&v593.__pn_, a2, v4);
  std::__fs::filesystem::__status(&v593, 0);
  locale_low = LOBYTE(v622[0].__locale_);
  if (SHIBYTE(v593.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v593.__pn_.__r_.__value_.__l.__data_);
  if (locale_low == 2)
  {
    v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"provided url ", 13);
    v8 = strlen(v2);
    v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v8);
    v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)" is a directory", 15);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet((const std::locale *)&v593, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)&v593);
    std::ostream::put();
    return (_QWORD *)std::ostream::flush();
  }
  v720 = 0u;
  v719 = 0u;
  v721 = 0;
  v722 = 1024;
  v723 = 0;
  v724 = 0;
  v511 = (_QWORD *)operator new();
  v718 = (_anonymous_namespace_ *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::MemoryPoolAllocator(v511, 0x10000, 0);
  v717 = v718;
  v716[2] = 0x3000000000000;
  v716[0] = 0;
  v716[1] = 0;
  v715 = 0x3000000000000;
  v714 = 0uLL;
  v713 = 0x3000000000000;
  v712 = 0uLL;
  v711 = 0x4000000000000;
  v710 = 0uLL;
  v709 = 0x4000000000000;
  v519 = (_QWORD *)(this + 640);
  v708 = 0uLL;
  v13 = re::Hash<re::DynamicString>::operator()((uint64_t)v622, (uint64_t)&v593);
  v14 = v13;
  if (*(_QWORD *)(this + 640))
  {
    v15 = v13 % *(unsigned int *)(this + 664);
    v16 = *(unsigned int *)(*(_QWORD *)(this + 648) + 4 * v15);
    if ((_DWORD)v16 != 0x7FFFFFFF)
    {
      v17 = *(__int8 **)(this + 656);
      do
      {
        if (re::DynamicString::operator==((uint64_t)&v17[80 * v16 + 16], (uint64_t)&v593))
          goto LABEL_917;
        v16 = *(_DWORD *)&v17[80 * v16 + 8] & 0x7FFFFFFF;
      }
      while (v16 != 0x7FFFFFFF);
    }
  }
  else
  {
    LODWORD(v15) = 0;
  }
  v18 = *(unsigned int *)(this + 676);
  if ((_DWORD)v18 == 0x7FFFFFFF)
  {
    v18 = *(unsigned int *)(this + 672);
    v19 = v18;
    if ((_DWORD)v18 == *(_DWORD *)(this + 664))
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v519, 2 * *(_DWORD *)(this + 668));
      LODWORD(v15) = v14 % *(unsigned int *)(this + 664);
      v19 = *(_DWORD *)(this + 672);
    }
    *(_DWORD *)(this + 672) = v19 + 1;
    v20 = *(_QWORD *)(this + 656);
    v21 = *(_DWORD *)(v20 + 80 * v18 + 8);
  }
  else
  {
    v20 = *(_QWORD *)(this + 656);
    v21 = *(_DWORD *)(v20 + 80 * v18 + 8);
    *(_DWORD *)(this + 676) = v21 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v20 + 80 * v18 + 8) = v21 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(this + 656) + 80 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(this + 656) + 80 * v18 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(this + 648) + 4 * v15);
  *(_QWORD *)(*(_QWORD *)(this + 656) + 80 * v18) = v14;
  v22 = re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(this + 656) + 80 * v18 + 16), (const re::DynamicString *)&v593);
  v23 = (re::DynamicString *)(*(_QWORD *)(this + 656) + 80 * v18 + 48);
  *(_DWORD *)(*(_QWORD *)(this + 648) + 4 * v15) = v18;
  ++*(_DWORD *)(this + 668);
LABEL_20:
  ++*(_DWORD *)(this + 680);
  v24 = (uint64_t)v511;
  if (v593.__pn_.__r_.__value_.__r.__words[0] && (v593.__pn_.__r_.__value_.__s.__data_[8] & 1) != 0)
    (*(void (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v593.__pn_.__r_.__value_.__l.__data_
                                                                           + 40))(v593.__pn_.__r_.__value_.__r.__words[0], v593.__pn_.__r_.__value_.__r.__words[2]);
  v531 = *(unsigned int *)(this + 672);
  v500 = v2;
  v25 = 0;
  if ((_DWORD)v531)
  {
    v26 = (int *)(*(_QWORD *)(this + 656) + 8);
    while (1)
    {
      v27 = *v26;
      v26 += 20;
      if (v27 < 0)
        break;
      if (v531 == ++v25)
      {
        LODWORD(v25) = *(_DWORD *)(this + 672);
        break;
      }
    }
  }
  v528 = this;
  if ((_DWORD)v531 != (_DWORD)v25)
  {
    v28 = v25;
    do
    {
      v29 = *(_QWORD *)(this + 656);
      v30 = v29 + 80 * v28;
      v622[2].__locale_ = (std::locale::__imp *)0x3000000000000;
      v622[1].__locale_ = 0;
      v622[0].__locale_ = 0;
      __dst[1].n128_u64[0] = 0x1C05150000000000;
      __dst[0] = 0uLL;
      if ((*(_BYTE *)(v30 + 56) & 1) != 0)
        v31 = *(const char **)(v29 + 80 * v28 + 64);
      else
        v31 = (const char *)(v29 + 80 * v28 + 57);
      v32 = strlen(v31);
      v33 = v32;
      if (v32 > 0x15)
      {
        __dst[1].n128_u16[3] = 3077;
        __dst[0].n128_u32[0] = v32;
        v34 = v24;
        v35 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v24, v32 + 1);
        __dst[0].n128_u64[1] = (unint64_t)v35;
      }
      else
      {
        __dst[1].n128_u8[5] = 21 - v32;
        v34 = v24;
        v35 = __dst;
      }
      memcpy(v35, v31, v33);
      v35->n128_u8[v33] = 0;
      v593.__pn_.__r_.__value_.__r.__words[2] = 0x405000000000000;
      v593.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"label";
      v593.__pn_.__r_.__value_.__r.__words[0] = 5;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)v622, (__int128 *)&v593, __dst, v34);
      *(_QWORD *)&v690 = 0x1C05150000000000;
      v689 = 0uLL;
      if ((*(_BYTE *)(v29 + 80 * v28 + 24) & 1) != 0)
        v36 = *(const char **)(v29 + 80 * v28 + 32);
      else
        v36 = (const char *)(v30 + 25);
      this = v528;
      v37 = strlen(v36);
      v38 = v37;
      if (v37 > 0x15)
      {
        WORD3(v690) = 3077;
        v689.n128_u32[0] = v37;
        v39 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v34, v37 + 1);
        v689.n128_u64[1] = (unint64_t)v39;
      }
      else
      {
        BYTE5(v690) = 21 - v37;
        v39 = &v689;
      }
      memcpy(v39, v36, v38);
      v39->n128_u8[v38] = 0;
      v593.__pn_.__r_.__value_.__r.__words[2] = 0x405000000000000;
      v593.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"path";
      v593.__pn_.__r_.__value_.__r.__words[0] = 4;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)v622, (__int128 *)&v593, &v689, v34);
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v710, (__int128 *)v622, v34);
      v40 = *(_DWORD *)(v528 + 672);
      if (v40 <= (int)v25 + 1)
        v40 = v25 + 1;
      v24 = v34;
      while (1)
      {
        v28 = (v25 + 1);
        if (v40 - 1 == (_DWORD)v25)
          break;
        LODWORD(v25) = v25 + 1;
        v41 = v28;
        if ((*(_DWORD *)(*(_QWORD *)(v528 + 656) + 80 * v28 + 8) & 0x80000000) != 0)
          goto LABEL_49;
      }
      v41 = v40;
LABEL_49:
      LODWORD(v25) = v41;
    }
    while ((_DWORD)v531 != v41);
  }
  v593.__pn_.__r_.__value_.__r.__words[2] = 0x405000000000000;
  v593.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"paths";
  v593.__pn_.__r_.__value_.__r.__words[0] = 5;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v714, (__int128 *)&v593, &v710, v24);
  v42 = *(unsigned int *)(this + 392);
  if ((_DWORD)v42)
  {
    v43 = 0;
    v44 = *(int **)(this + 376);
    while (1)
    {
      v45 = *v44;
      v44 += 52;
      if (v45 < 0)
        break;
      if (v42 == ++v43)
      {
        LODWORD(v43) = *(_DWORD *)(this + 392);
        break;
      }
    }
  }
  else
  {
    LODWORD(v43) = 0;
  }
  if ((_DWORD)v42 != (_DWORD)v43)
  {
    v46 = v43;
    v47 = *(_DWORD *)(this + 392);
    do
    {
      v48 = *(_QWORD *)(this + 376);
      v49 = v48 + 208 * v46;
      if (*(_BYTE *)(v49 + 184)
        || ((v50 = *(_QWORD *)(v48 + 208 * v46 + 160), (v50 & 1) != 0)
          ? (v51 = v50 >> 1)
          : (v51 = v50 >> 1),
            v51))
      {
        generateJSONForFunctionVariant((uint64_t)&v593, (uint64_t *)(v49 + 16), (uint64_t)v716, (uint64_t)v519, 1);
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v708, (__int128 *)&v593, v24);
        v47 = *(_DWORD *)(this + 392);
      }
      if (v47 <= (int)v43 + 1)
        v52 = v43 + 1;
      else
        v52 = v47;
      while (1)
      {
        v46 = (v43 + 1);
        if (v52 - 1 == (_DWORD)v43)
          break;
        LODWORD(v43) = v43 + 1;
        v53 = v46;
        if ((*(_DWORD *)(*(_QWORD *)(this + 376) + 208 * v46) & 0x80000000) != 0)
          goto LABEL_71;
      }
      v53 = v52;
LABEL_71:
      LODWORD(v43) = v53;
    }
    while ((_DWORD)v42 != v53);
  }
  v54 = (uint64_t *)(this + 360);
  v707 = 0x4000000000000;
  v706 = 0uLL;
  v55 = *(_QWORD *)(this + 824);
  v522 = (uint64_t *)(this + 360);
  if (v55)
  {
    v56 = *(_QWORD *)(v528 + 840);
    v501 = v56 + 232 * v55;
    v2 = &__dst[0].n128_i8[8];
    v17 = &__dst[0].n128_i8[9];
    v509 = v528 + 864;
    do
    {
      v57 = *(_OWORD *)(v56 + 16);
      v689 = *(__n128 *)v56;
      v58 = *(_OWORD *)(v56 + 32);
      v59 = *(_OWORD *)(v56 + 48);
      LODWORD(v693[0]) = *(_DWORD *)(v56 + 64);
      v691 = v58;
      v692 = v59;
      v690 = v57;
      BYTE4(v693[0]) = *(_BYTE *)(v56 + 68);
      if (BYTE4(v693[0]))
        BYTE5(v693[0]) = *(_BYTE *)(v56 + 69);
      re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v693 + 8, (uint64_t *)(v56 + 72));
      re::DynamicString::DynamicString((re::DynamicString *)&v695, (const re::DynamicString *)(v56 + 112));
      v697 = *(_BYTE *)(v56 + 144);
      re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v698, (uint64_t *)(v56 + 152));
      v503 = v56;
      re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v702, (uint64_t *)(v56 + 192));
      v61 = v689.n128_u64[1];
      v60 = v689.n128_u64[0];
      re::DynamicString::DynamicString((re::DynamicString *)&v588, (const re::DynamicString *)&v695);
      v579 = v690;
      v580 = v691;
      v581 = v692;
      v582 = v693[0];
      v583 = BYTE4(v693[0]);
      if (BYTE4(v693[0]))
        v584 = BYTE5(v693[0]);
      re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)&v585, (uint64_t *)v693 + 1);
      if (*v54)
      {
        v62 = *(_QWORD *)(v528 + 376);
        v63 = *(unsigned int *)(*(_QWORD *)(v528 + 368) + 4 * (v60 % *(unsigned int *)(v528 + 384)));
        if ((_DWORD)v63 == 0x7FFFFFFF)
        {
LABEL_82:
          LODWORD(v63) = 0x7FFFFFFF;
        }
        else
        {
          while (*(_QWORD *)(v62 + 208 * v63 + 8) != v60)
          {
            v63 = *(_DWORD *)(v62 + 208 * v63) & 0x7FFFFFFF;
            if (v63 == 0x7FFFFFFF)
              goto LABEL_82;
          }
        }
      }
      else
      {
        v62 = *(_QWORD *)(v528 + 376);
        LODWORD(v63) = 0x7FFFFFFF;
      }
      v64 = v62 + 208 * v63;
      re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)v678, (uint64_t *)(v64 + 16));
      re::DynamicString::DynamicString((re::DynamicString *)&v679, (const re::DynamicString *)(v64 + 56));
      re::DynamicString::DynamicString((re::DynamicString *)&v681, (const re::DynamicString *)(v64 + 88));
      re::DynamicString::DynamicString((re::DynamicString *)&v683, (const re::DynamicString *)(v64 + 120));
      re::DynamicString::DynamicString((re::DynamicString *)&v685, (const re::DynamicString *)(v64 + 152));
      v65 = *(_OWORD *)(v64 + 184);
      v688 = *(_BYTE *)(v64 + 200);
      v687 = v65;
      v66 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5B0], sel_alloc), sel_init);
      if ((BYTE8(v679) & 1) != 0)
        v67 = (char *)v680;
      else
        v67 = (char *)&v679 + 9;
      v504 = v66;
      objc_msgSend(v66, sel_setName_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v67, 4, v498, v499));
      v515 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
      if (*(_QWORD *)&v678[16])
      {
        v68 = *(_QWORD *)&v678[32];
        v69 = *(_QWORD *)&v678[32] + (*(_QWORD *)&v678[16] << 6);
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v593, (const re::DynamicString *)v68);
          LODWORD(v595[0]) = *(_DWORD *)(v68 + 32);
          re::FixedArray<unsigned char>::FixedArray(&v595[1], (uint64_t *)(v68 + 40));
          if ((v593.__pn_.__r_.__value_.__s.__data_[8] & 1) != 0)
            v70 = (std::string::value_type *)v593.__pn_.__r_.__value_.__r.__words[2];
          else
            v70 = &v593.__pn_.__r_.__value_.__s.__data_[9];
          objc_msgSend(v515, sel_setConstantValue_type_withName_, v595[3], LOWORD(v595[0]), objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v70, 4));
          if (v595[1])
          {
            if (v595[2])
            {
              (*(void (**)(void))(*(_QWORD *)v595[1] + 40))();
              v595[2] = 0;
              v595[3] = 0;
            }
            v595[1] = 0;
          }
          if (v593.__pn_.__r_.__value_.__r.__words[0] && (v593.__pn_.__r_.__value_.__s.__data_[8] & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v593.__pn_.__r_.__value_.__l.__data_ + 40))();
          v68 += 64;
        }
        while (v68 != v69);
      }
      objc_msgSend(v66, sel_setConstantValues_, v515);
      re::mtl::Library::makeFunctionWithDescriptor((id *)(v528 + 160), v66, &v578);
      re::mtl::reflectionArguments((re::mtl *)v578, (uint64_t)v577);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v563, 0);
      v564 = 0u;
      memset(v565, 0, sizeof(v565));
      v566 = 0x7FFFFFFFLL;
      *(_QWORD *)&v563 = &off_24ED73208;
      v571 = 0;
      v568 = 0;
      v569 = 0;
      v567 = 0;
      v570 = 0;
      v572 = 0;
      v573 = 0u;
      v574 = 0u;
      v575 = 0u;
      v576 = 0u;
      re::StringID::StringID((re::StringID *)&v593, (const re::DynamicString *)&v679);
      v71 = (_BYTE *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v528 + 168, &v593);
      re::StringID::destroyString((re::StringID *)&v593);
      if (v71)
        LODWORD(v71) = *v71 != 0;
      v688 = (char)v71;
      if ((BYTE8(v679) & 1) != 0)
        v72 = (const char *)v680;
      else
        v72 = (char *)&v679 + 9;
      memset(v622, 0, 24);
      re::makeAttributeArguments(&v578, (uint64_t)&v593);
      re::makeStage((re *)1, &v578, v72, 0, (int)v71, 1, (uint64_t)v577, (id *)&v622[0].__locale_, (uint64_t)v561, (uint64_t)&v563, (uint64_t)&v593);
      re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v593);
      re::FixedArray<re::LinkedFunction>::deinit(v622);
      v73 = v562;
      if (!v61)
      {
        v76 = 0;
        v77 = 0;
        goto LABEL_115;
      }
      if (*v54)
      {
        v74 = *(_QWORD *)(v528 + 376);
        v75 = *(unsigned int *)(*(_QWORD *)(v528 + 368) + 4 * (v61 % *(unsigned int *)(v528 + 384)));
        if ((_DWORD)v75 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v74 + 208 * v75 + 8) != v61)
          {
            v75 = *(_DWORD *)(v74 + 208 * v75) & 0x7FFFFFFF;
            if (v75 == 0x7FFFFFFF)
              goto LABEL_113;
          }
          goto LABEL_114;
        }
      }
      else
      {
        v74 = *(_QWORD *)(v528 + 376);
      }
LABEL_113:
      LODWORD(v75) = 0x7FFFFFFF;
LABEL_114:
      v78 = v74 + 208 * v75;
      v76 = *(_BYTE **)(v78 + 48);
      v77 = *(_QWORD *)(v78 + 32);
LABEL_115:
      if ((v589 & 1) != 0)
        v79 = v591;
      else
        v79 = v590;
      re::makeDepthPixelFormatPredictions((uint64_t)&v593);
      re::makeStencilPixelFormatPredictions((uint64_t)v622);
      re::makeSampleCountPredictions((uint64_t)__dst);
      re::makePixel0FormatsPredictions((uint64_t)v673);
      re::makePixel1FormatsPredictions((uint64_t)&v665);
      re::makePixel2FormatsPredictions((uint64_t)&v657);
      v498 = v76;
      v499 = v77;
      re::makeRenderTargetInfoPrediction(v79, (uint64_t)&v593, (uint64_t)v622, (uint64_t)__dst, (uint64_t)v673, (uint64_t)&v665, (uint64_t)&v657, 1, (uint64_t)&v674);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v657);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v665);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v673);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)__dst);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v622);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v593);
      re::FixedArray<re::AttributeArgument>::FixedArray(v560, (uint64_t)(v73 + 264));
      re::FixedArray<re::AttributeArgument>::FixedArray(v559, (uint64_t)v560);
      v558 = 0u;
      DWORD1(v558) = 0x7FFFFFFF;
      v556 = 0u;
      memset(v557, 0, sizeof(v557));
      memset(v555, 0, sizeof(v555));
      DWORD1(v556) = 0x7FFFFFFF;
      re::makeAttributeTablePrediction((_anonymous_namespace_ *)v559, (uint64_t)v557, (uint64_t)v555, (uint64_t)&v593);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v555);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v557);
      re::FixedArray<re::AttributeArgument>::deinit(v559);
      re::FixedArray<re::AttributeArgument>::FixedArray(v551, (uint64_t)v560);
      v80 = *(_OWORD *)(v73 + 312);
      v550[0] = *(_OWORD *)(v73 + 296);
      v550[1] = v80;
      re::makeAttributeResolutionsPrediction((_anonymous_namespace_ *)v551, (uint64_t)v550, v697, &v552);
      v81 = (_anonymous_namespace_ *)re::FixedArray<re::AttributeArgument>::deinit(v551);
      if (v61)
      {
        if (*v54)
        {
          v82 = *(_QWORD *)(v528 + 376);
          v83 = *(unsigned int *)(*(_QWORD *)(v528 + 368) + 4 * (v61 % *(unsigned int *)(v528 + 384)));
          if ((_DWORD)v83 == 0x7FFFFFFF)
          {
LABEL_123:
            LODWORD(v83) = 0x7FFFFFFF;
          }
          else
          {
            while (*(_QWORD *)(v82 + 208 * v83 + 8) != v61)
            {
              v83 = *(_DWORD *)(v82 + 208 * v83) & 0x7FFFFFFF;
              if (v83 == 0x7FFFFFFF)
                goto LABEL_123;
            }
          }
        }
        else
        {
          v82 = *(_QWORD *)(v528 + 376);
          LODWORD(v83) = 0x7FFFFFFF;
        }
        v507 = v82 + 208 * v83 + 16;
      }
      else
      {
        v507 = 0;
      }
      memset(v673, 0, sizeof(v673));
      *((_QWORD *)&v665 + 1) = 0;
      v666 = 0;
      v668 = 0;
      v667 = 0;
      v672 = 0;
      v669 = 0;
      v670 = 0;
      LOWORD(v665) = 29;
      v671 = 1;
      if (v674.n128_u32[1] == 115 || v674.n128_u32[1] == 81)
      {
        re::DynamicArray<float *>::setCapacity((_QWORD *)&v665 + 1, 2uLL);
        ++v668;
        v622[0].__locale_ = (std::locale::__imp *)81;
        re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v665 + 1, v622);
        v622[0].__locale_ = (std::locale::__imp *)115;
      }
      else
      {
        v84 = (std::locale::__imp *)v674.n128_i32[1];
        re::DynamicArray<float *>::setCapacity((_QWORD *)&v665 + 1, 1uLL);
        ++v668;
        v622[0].__locale_ = v84;
      }
      v85 = (_anonymous_namespace_ *)re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v665 + 1, v622);
      v657.n128_u64[1] = 0;
      v658 = 0;
      v660 = 0;
      v659 = 0;
      v664 = 0;
      v661 = 0;
      v662 = 0;
      v657.n128_u16[0] = 29;
      this = 1;
      v663 = 1;
      re::DynamicArray<float *>::setCapacity(&v657.n128_u64[1], 2uLL);
      ++v660;
      v622[0].__locale_ = (std::locale::__imp *)1;
      re::DynamicArray<re::TransitionCondition *>::add(&v657.n128_u64[1], v622);
      v622[0].__locale_ = (std::locale::__imp *)4;
      v86 = (_anonymous_namespace_ *)re::DynamicArray<re::TransitionCondition *>::add(&v657.n128_u64[1], v622);
      v649.n128_u64[1] = 0;
      v650 = 0;
      v652 = 0;
      v651 = 0;
      v656 = 0;
      v653 = 0;
      v654 = 0;
      v649.n128_u16[0] = 29;
      v655 = 1;
      re::DynamicArray<float *>::setCapacity(&v649.n128_u64[1], 2uLL);
      ++v652;
      v622[0].__locale_ = 0;
      re::DynamicArray<re::TransitionCondition *>::add(&v649.n128_u64[1], v622);
      v622[0].__locale_ = (std::locale::__imp *)2;
      v87 = (_anonymous_namespace_ *)re::DynamicArray<re::TransitionCondition *>::add(&v649.n128_u64[1], v622);
      re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v673, (const re::DynamicString *)v622, (uint64_t *)&v665);
      locale = v622[0].__locale_;
      if (v622[0].__locale_ && ((uint64_t)v622[1].__locale_ & 1) != 0)
        locale = (std::locale::__imp *)(*(uint64_t (**)(std::locale::__imp *, std::locale::__imp *))(*(_QWORD *)v622[0].__locale_ + 40))(v622[0].__locale_, v622[2].__locale_);
      re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v673, (const re::DynamicString *)v622, (uint64_t *)&v657);
      v89 = v622[0].__locale_;
      if (v622[0].__locale_ && ((uint64_t)v622[1].__locale_ & 1) != 0)
        v89 = (std::locale::__imp *)(*(uint64_t (**)(std::locale::__imp *, std::locale::__imp *))(*(_QWORD *)v622[0].__locale_ + 40))(v622[0].__locale_, v622[2].__locale_);
      re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v673, (const re::DynamicString *)v622, (uint64_t *)&v649);
      if (v622[0].__locale_ && ((uint64_t)v622[1].__locale_ & 1) != 0)
        (*(void (**)(std::locale::__imp *, std::locale::__imp *))(*(_QWORD *)v622[0].__locale_ + 40))(v622[0].__locale_, v622[2].__locale_);
      if (v507)
      {
        v90 = (*(_QWORD *)(v507 + 48) & 1) != 0 ? *(const char **)(v507 + 56) : (const char *)(v507 + 49);
        v91 = (_anonymous_namespace_ *)strcmp(v90, "fsRealityPbr");
        if (!(_DWORD)v91)
        {
          memset(&v622[1], 0, 24);
          *(_DWORD *)v623 = 0;
          *(_QWORD *)&v623[8] = 0;
          *(_QWORD *)&v623[16] = 0;
          LOWORD(v622[0].__locale_) = 29;
          this = 1;
          *(_WORD *)&v623[24] = 1;
          re::DynamicArray<float *>::setCapacity(&v622[1].__locale_, 2uLL);
          ++*(_DWORD *)v623;
          __dst[0].n128_u64[0] = 0;
          re::DynamicArray<re::TransitionCondition *>::add(&v622[1].__locale_, __dst);
          __dst[0].n128_u64[0] = 1;
          v100 = (_anonymous_namespace_ *)re::DynamicArray<re::TransitionCondition *>::add(&v622[1].__locale_, __dst);
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v673, (const re::DynamicString *)__dst, (uint64_t *)v622);
          v101 = (_anonymous_namespace_ *)__dst[0].n128_u64[0];
          if (__dst[0].n128_u64[0] && (__dst[0].n128_u8[8] & 1) != 0)
            v101 = (_anonymous_namespace_ *)(*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)__dst[0].n128_u64[0] + 40))(__dst[0].n128_u64[0], __dst[1].n128_u64[0]);
          memset(&__dst[0].n128_i8[8], 0, 28);
          __dst[2].n128_u64[1] = 0;
          *(_QWORD *)&v611 = 0;
          __dst[0].n128_u16[0] = 29;
          WORD4(v611) = 1;
          re::DynamicArray<float *>::setCapacity(&__dst[0].n128_u64[1], 2uLL);
          ++__dst[2].n128_u32[0];
          v641.n128_u64[0] = 0;
          re::DynamicArray<re::TransitionCondition *>::add(&__dst[0].n128_u64[1], &v641);
          v641.n128_u64[0] = 1;
          v102 = (_anonymous_namespace_ *)re::DynamicArray<re::TransitionCondition *>::add(&__dst[0].n128_u64[1], &v641);
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v673, (const re::DynamicString *)&v641, (uint64_t *)__dst);
          if (v641.n128_u64[0] && (v641.n128_u8[8] & 1) != 0)
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v641.n128_u64[0] + 40))(v641.n128_u64[0], v642.n128_u64[0]);
          if (__dst[0].n128_u64[1] && __dst[2].n128_u64[1])
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)__dst[0].n128_u64[1] + 40))(__dst[0].n128_u64[1], __dst[2].n128_u64[1]);
          if (v622[1].__locale_ && *(_QWORD *)&v623[8])
            (*(void (**)(std::locale::__imp *, _QWORD))(*(_QWORD *)v622[1].__locale_ + 40))(v622[1].__locale_, *(_QWORD *)&v623[8]);
        }
      }
      MurmurHash3_x64_128((uint64_t)"vsImmersiveEnvironmentPrecomputed", 33, 0, (unint64_t *)v622);
      v622[0].__locale_ = (std::locale::__imp *)((uint64_t)v622[0].__locale_ ^ ((uint64_t)v622[1].__locale_
                                                                             + 64 * (uint64_t)v622[0].__locale_
                                                                             + ((unint64_t)v622[0].__locale_ >> 2)
                                                                             - 0x61C8864680B583E9));
      MurmurHash3_x64_128((uint64_t)"vsStencilGrid", 13, 0, __dst[0].n128_u64);
      v622[1].__locale_ = (std::locale::__imp *)((__dst[0].n128_u64[1]
                                                - 0x61C8864680B583E9
                                                + (__dst[0].n128_u64[0] << 6)
                                                + (__dst[0].n128_u64[0] >> 2)) ^ __dst[0].n128_u64[0]);
      MurmurHash3_x64_128((uint64_t)"vsStencilGridRemoveOpaque", 25, 0, __dst[0].n128_u64);
      v622[2].__locale_ = (std::locale::__imp *)((__dst[0].n128_u64[1]
                                                - 0x61C8864680B583E9
                                                + (__dst[0].n128_u64[0] << 6)
                                                + (__dst[0].n128_u64[0] >> 2)) ^ __dst[0].n128_u64[0]);
      v92 = (_anonymous_namespace_ *)MurmurHash3_x64_128((uint64_t)"vsMeshShadowPatchReceiver", 25, 0, __dst[0].n128_u64);
      v622[3].__locale_ = (std::locale::__imp *)((__dst[0].n128_u64[1]
                                                - 0x61C8864680B583E9
                                                + (__dst[0].n128_u64[0] << 6)
                                                + (__dst[0].n128_u64[0] >> 2)) ^ __dst[0].n128_u64[0]);
      v645 = 0u;
      v646 = 0u;
      v647 = 0;
      v648 = 0x7FFFFFFFLL;
      v93 = 0;
      v94 = (unint64_t)v622;
      do
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&v645, (uint64_t *)&v622[v93++]);
      while (v93 != 4);
      if ((BYTE8(v679) & 1) != 0)
        v95 = (const char *)v680;
      else
        v95 = (char *)&v679 + 9;
      v96 = (_anonymous_namespace_ *)strlen(v95);
      if (v96)
      {
        v96 = (_anonymous_namespace_ *)MurmurHash3_x64_128((uint64_t)v95, (int)v96, 0, (unint64_t *)v622);
        v97 = ((uint64_t)v622[1].__locale_
             + 64 * (uint64_t)v622[0].__locale_
             + ((unint64_t)v622[0].__locale_ >> 2)
             - 0x61C8864680B583E9) ^ (uint64_t)v622[0].__locale_;
      }
      else
      {
        v97 = 0;
      }
      if (DWORD2(v646))
      {
        v98 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v97 ^ (v97 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v97 ^ (v97 >> 30))) >> 27));
        v99 = *(unsigned int *)(v645.n128_u64[1] + 4 * ((v98 ^ (v98 >> 31)) % DWORD2(v646)));
        if ((_DWORD)v99 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v646 + 24 * v99 + 16) != v97)
          {
            LODWORD(v99) = *(_DWORD *)(v646 + 24 * v99 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v99 == 0x7FFFFFFF)
              goto LABEL_176;
          }
          memset(&v622[1], 0, 24);
          *(_DWORD *)v623 = 0;
          *(_QWORD *)&v623[8] = 0;
          *(_QWORD *)&v623[16] = 0;
          LOWORD(v622[0].__locale_) = 29;
          v94 = 1;
          *(_WORD *)&v623[24] = 1;
          re::DynamicArray<float *>::setCapacity(&v622[1].__locale_, 2uLL);
          ++*(_DWORD *)v623;
          __dst[0].n128_u64[0] = 0;
          re::DynamicArray<re::TransitionCondition *>::add(&v622[1].__locale_, __dst);
          __dst[0].n128_u64[0] = 1;
          v103 = (_anonymous_namespace_ *)re::DynamicArray<re::TransitionCondition *>::add(&v622[1].__locale_, __dst);
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v673, (const re::DynamicString *)__dst, (uint64_t *)v622);
          if (__dst[0].n128_u64[0] && (__dst[0].n128_u8[8] & 1) != 0)
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)__dst[0].n128_u64[0] + 40))(__dst[0].n128_u64[0], __dst[1].n128_u64[0]);
          if (v622[1].__locale_ && *(_QWORD *)&v623[8])
            (*(void (**)(std::locale::__imp *, _QWORD))(*(_QWORD *)v622[1].__locale_ + 40))(v622[1].__locale_, *(_QWORD *)&v623[8]);
        }
      }
LABEL_176:
      __dst[2].n128_u64[0] = 0;
      memset(__dst, 0, 28);
      memset(v623, 0, 32);
      memset(v622, 0, sizeof(v622));
      re::FunctionConstantsEnumerator::createEnumerator((uint64_t *)v673, 0, 0, (uint64_t)__dst, v622, (uint64_t)v548);
      re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)v622);
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)__dst);
      if (v549)
      {
        v104 = 0;
        v105 = (v61 - 0x61C8864680B583E9 + (v60 << 6) + (v60 >> 2)) ^ v60;
        v505 = (v105 << 6) - 0x61C8864680B583E9 + (v105 >> 2);
        v506 = v105;
        v502 = v507 + 104;
        while (1)
        {
          v641 = v674;
          v642 = v675;
          v643 = v676;
          v644 = v677;
          v622[0] = (std::locale)v593.__pn_.__r_.__value_.__l.__data_;
          if (v593.__pn_.__r_.__value_.__r.__words[0])
            v106 = (id)(v593.__pn_.__r_.__value_.__r.__words[0] + 8);
          *(_OWORD *)&v622[1].__locale_ = *(_OWORD *)&v593.__pn_.__r_.__value_.__r.__words[1];
          *(_QWORD *)v623 = 0;
          *(_QWORD *)&v623[8] = 0;
          v622[3].__locale_ = 0;
          if (v594)
          {
            re::FixedArray<re::VertexBufferFormat>::init<>((uint64_t)&v622[3], v594, v595[0]);
            re::FixedArray<re::VertexBufferFormat>::copy((uint64_t)&v622[3], (uint64_t)&v594);
          }
          memset(&v623[16], 0, 92);
          memset(&v623[112], 0, 36);
          v625 = 0;
          v626 = 0;
          v624 = 0;
          v627 = 1;
          v629 = 0;
          v630 = 0;
          v628 = 0;
          v631 = 0;
          v632 = 0;
          v633 = 0;
          v635 = 0;
          v634 = 0;
          v639 = 0;
          v640 = 0;
          v636 = 0u;
          v637 = 0u;
          v638 = 0;
          re::BufferTable::operator=((uint64_t)&v623[16], (uint64_t)&v595[2]);
          v517 = v104;
          re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)v548, v104, 0, 0, (uint64_t)v545);
          v620 = 0;
          v618 = 0u;
          v619 = 0u;
          v621 = 0x7FFFFFFFLL;
          v616 = 0;
          v614 = 0u;
          v615 = 0u;
          v617 = 0x7FFFFFFFLL;
          if (v546)
          {
            As64Bits = 0;
            v107 = v547;
            v108 = (re::DynamicString *)((char *)v547 + 64 * v546);
            do
            {
              re::DynamicString::DynamicString((re::DynamicString *)__dst, v107);
              __dst[2].n128_u32[0] = *((_DWORD *)v107 + 8);
              re::FixedArray<unsigned char>::FixedArray(&__dst[2].n128_u64[1], (uint64_t *)v107 + 5);
              v109 = __dst[1].n128_u64[0];
              v94 = __dst[0].n128_u8[8] & 1;
              if ((__dst[0].n128_u8[8] & 1) != 0)
                v110 = (const char *)__dst[1].n128_u64[0];
              else
                v110 = &__dst[0].n128_i8[9];
              if (!strcmp(v110, "PixelFormat"))
              {
                v641.n128_u32[1] = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)__dst);
                v109 = __dst[1].n128_u64[0];
                v94 = __dst[0].n128_u8[8] & 1;
              }
              if (v94)
                v111 = (const char *)v109;
              else
                v111 = &__dst[0].n128_i8[9];
              if (!strcmp(v111, "SampleCount"))
              {
                v641.n128_u32[0] = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)__dst);
                v109 = __dst[1].n128_u64[0];
                v94 = __dst[0].n128_u8[8] & 1;
              }
              if (v94)
                v112 = (const char *)v109;
              else
                v112 = &__dst[0].n128_i8[9];
              if (!strcmp(v112, "OverrideFlags"))
                As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)__dst);
              if (!v697)
              {
                if ((__dst[0].n128_u8[8] & 1) != 0)
                  v113 = (const char *)__dst[1].n128_u64[0];
                else
                  v113 = &__dst[0].n128_i8[9];
                if (!strcmp(v113, "TexcoordFormatOverride"))
                {
                  v114 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)__dst);
                  if (v114)
                  {
                    *(_QWORD *)v607 = 0;
                    *(_QWORD *)&v607[8] = &str_110;
                    LOWORD(v537[0]) = 5;
                    re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v618, (StringID *)v607, v537);
                    re::StringID::destroyString((re::StringID *)v607);
                  }
                }
                if ((__dst[0].n128_u8[8] & 1) != 0)
                  v115 = (const char *)__dst[1].n128_u64[0];
                else
                  v115 = &__dst[0].n128_i8[9];
                if (!strcmp(v115, "StepFormatOverride"))
                {
                  v116 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)__dst);
                  if (v116)
                  {
                    *(_QWORD *)v607 = 0;
                    *(_QWORD *)&v607[8] = &str_110;
                    LOBYTE(v537[0]) = 0;
                    re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v614, (StringID *)v607, v537);
                    re::StringID::destroyString((re::StringID *)v607);
                  }
                }
                if ((__dst[0].n128_u8[8] & 1) != 0)
                  v117 = (const char *)__dst[1].n128_u64[0];
                else
                  v117 = &__dst[0].n128_i8[9];
                if (!strcmp(v117, "PositionFormatOverride"))
                {
                  v118 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)__dst);
                  *(_QWORD *)v607 = 0;
                  *(_QWORD *)&v607[8] = &str_110;
                  if (v118)
                  {
                    LOWORD(v537[0]) = 5;
                  }
                  else
                  {
                    LOWORD(v537[0]) = 6;
                  }
                  re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&v618, (StringID *)v607, v537);
                  re::StringID::destroyString((re::StringID *)v607);
                }
              }
              if (__dst[2].n128_u64[1])
              {
                if ((_QWORD)v611)
                {
                  (*(void (**)(void))(*(_QWORD *)__dst[2].n128_u64[1] + 40))();
                  v611 = 0uLL;
                }
                __dst[2].n128_u64[1] = 0;
              }
              if (__dst[0].n128_u64[0] && (__dst[0].n128_u8[8] & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)__dst[0].n128_u64[0] + 40))();
              v107 = (re::DynamicString *)((char *)v107 + 64);
            }
            while (v107 != v108);
          }
          else
          {
            As64Bits = 0;
          }
          if (v674.n128_u32[0] == 1 || v641.n128_u64[0] != 0x7300000001)
            break;
LABEL_541:
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v614);
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v618);
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v545);
          re::AttributeTable::~AttributeTable((re::AttributeTable *)v622);
          v104 = v517 + 1;
          if (v549 <= v517 + 1)
            goto LABEL_542;
        }
        re::FixedArray<re::AttributeArgument>::FixedArray(v544, (uint64_t)v560);
        re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)v543, (uint64_t)&v618);
        re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)v542, (uint64_t)&v614);
        re::makeAttributeTablePrediction((_anonymous_namespace_ *)v544, (uint64_t)v543, (uint64_t)v542, (uint64_t)__dst);
        v119 = v622[0].__locale_;
        v622[0] = (std::locale)__dst[0].n128_u64[0];
        __dst[0].n128_u64[0] = (unint64_t)v119;
        *(__n128 *)&v622[1].__locale_ = *(__n128 *)((char *)__dst + 8);
        re::FixedArray<float>::operator=((uint64_t *)&v622[3], &__dst[1].n128_i64[1]);
        re::BufferTable::operator=((uint64_t)&v623[16], (uint64_t)&v611);
        re::AttributeTable::~AttributeTable((re::AttributeTable *)__dst);
        re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v542);
        re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v543);
        re::FixedArray<re::AttributeArgument>::deinit(v544);
        if (v553)
        {
          v120 = 0;
          v121 = v554;
          v94 = (unint64_t)&v554[5 * (_QWORD)v553];
          while (1)
          {
            v122 = v622;
            while (1)
            {
              v123 = v122;
              v122 = (std::locale *)v122[1].__locale_;
              if (!v122)
                break;
              v124 = (unint64_t)v123[4].__locale_;
              if (v124)
                goto LABEL_239;
            }
            v124 = (unint64_t)v123[4].__locale_;
LABEL_239:
            v61 = v121[2];
            if (v124 <= v61)
              break;
            this = (uint64_t)v123[5].__locale_;
            v125 = v121[3];
            if (v121[3])
            {
              VertexFormatFromDataType = re::getVertexFormatFromDataType((re *)v121[3]);
              v127 = -1;
              v128 = 1;
            }
            else
            {
              v128 = 0;
              VertexFormatFromDataType = 0;
              v127 = 0;
            }
            v120 ^= re::VertexBufferFormat::hash((unsigned __int16 *)(this + 16 * v61), v125 != 0, v127, VertexFormatFromDataType, v128, 1);
            v121 += 5;
            if (v121 == (unsigned __int16 *)v94)
              goto LABEL_246;
          }
          v537[0] = 0;
          v16 = (unint64_t)v607;
          v611 = 0u;
          v612 = 0u;
          memset(__dst, 0, sizeof(__dst));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v607 = 136315906;
          *(_QWORD *)&v607[4] = "operator[]";
          *(_WORD *)&v607[12] = 1024;
          *(_DWORD *)&v607[14] = 476;
          *(_WORD *)&v607[18] = 2048;
          *(_QWORD *)&v607[20] = v61;
          v608 = 2048;
          *(_QWORD *)v609 = v124;
          LODWORD(v499) = 38;
          v498 = v607;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_917:
          v408 = &v17[80 * v16];
          v411 = (_anonymous_namespace_ *)*((_QWORD *)v408 + 6);
          v410 = v408 + 48;
          v409 = v411;
          if (v411)
          {
            if ((v17[80 * v16 + 56] & 1) != 0)
              v409 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v409 + 40))(v409, *(_QWORD *)&v17[80 * v16 + 64]);
            *v410 = 0u;
            v410[1] = 0u;
            v17 = *(__int8 **)(this + 656);
          }
          goto LABEL_20;
        }
        v120 = 0;
LABEL_246:
        v541 = 0;
        __dst[0] = v641;
        __dst[1] = v642;
        __dst[2] = v643;
        LODWORD(v611) = v644;
        MurmurHash3_x64_128((uint64_t)__dst, 44, 0, (unint64_t *)v607);
        v129 = (*(_QWORD *)&v607[8] - 0x61C8864680B583E9 + (*(_QWORD *)v607 << 6) + (*(_QWORD *)v607 >> 2)) ^ *(_QWORD *)v607;
        v130 = (re::TechniqueState::hashForPSO((re::TechniqueState *)&v579, As64Bits)
              - 0x61C8864680B583E9
              + (v129 << 6)
              + (v129 >> 2)) ^ v129;
        v541 = (((v505 + v120) ^ v506) - 0x61C8864680B583E9 + (v130 << 6) + (v130 >> 2)) ^ v130;
        if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v509, (uint64_t *)&v541))
        {
          goto LABEL_541;
        }
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(v509, (uint64_t *)&v541);
        *(_QWORD *)&v609[2] = 0;
        memset(v607, 0, sizeof(v607));
        v540 = 0;
        v538 = 0;
        v537[0] = 0;
        v537[1] = 0;
        v539 = 0;
        if (v699)
        {
          v131 = v701;
          v132 = 8 * v699;
          while (1)
          {
            v133 = *v131;
            if (!re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)v54, *v131))break;
            __dst[0].n128_u64[0] = re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v54, v133);
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v607, __dst);
            ++v131;
            v132 -= 8;
            if (!v132)
              goto LABEL_251;
          }
          re::internal::assertLog((re::internal *)4, v134, "assertion failure: '%s' (%s:line %i) ", "functionVariantsTable.containsKey(linkedHash)", "serializeToURL", 1496);
          _os_crash();
          __break(1u);
LABEL_923:
          re::internal::assertLog((re::internal *)4, v138, "assertion failure: '%s' (%s:line %i) ", "functionVariantsTable.containsKey(linkedHash)", "serializeToURL", 1501);
          _os_crash();
          __break(1u);
LABEL_924:
          v725.n128_u64[0] = 0;
          v611 = 0u;
          v612 = 0u;
          memset(__dst, 0, sizeof(__dst));
          LODWORD(v404) = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v731 = 136315906;
          *(_QWORD *)&v731[4] = "operator[]";
          *(_WORD *)&v731[12] = 1024;
          *(_DWORD *)&v731[14] = 476;
          *(_WORD *)&v731[18] = 2048;
          *(_QWORD *)&v731[20] = v61;
          v732 = 2048;
          v733 = v94;
          _os_log_send_and_compose_impl();
          v340 = (_anonymous_namespace_ *)_os_crash_msg();
          __break(1u);
LABEL_925:
          LODWORD(v405) = 0;
          goto LABEL_926;
        }
LABEL_251:
        if (v703)
        {
          v135 = v705;
          v136 = 8 * v703;
          do
          {
            v137 = *v135;
            if (!re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)v54, *v135))goto LABEL_923;
            __dst[0].n128_u64[0] = re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v54, v137);
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v537, __dst);
            ++v135;
            v136 -= 8;
          }
          while (v136);
          v139 = v538;
        }
        else
        {
          v139 = 0;
        }
        v140 = v554;
        p_size = v553;
        v141 = v717;
        v142 = *(uint64_t **)&v609[2];
        v606 = 0x3000000000000;
        v605 = 0uLL;
        if (*(_QWORD *)&v607[16] | v139)
        {
          *(_QWORD *)&v731[8] = 0;
          *(_QWORD *)&v731[16] = 0x4000000000000;
          *(_QWORD *)v731 = 0;
          if (!*(_QWORD *)&v607[16])
            goto LABEL_298;
          v523 = (re::DynamicString *)(*(_QWORD *)&v609[2] + 8 * *(_QWORD *)&v607[16]);
          while (2)
          {
            v143 = *v142;
            v730 = 0x1C05150000000000;
            v729 = 0uLL;
            if (*(_BYTE *)(v143 + 168)
              || ((v144 = *(_QWORD *)(v143 + 144), (v144 & 1) != 0)
                ? (v145 = v144 >> 1)
                : (v145 = v144 >> 1),
                  v145))
            {
              if ((*(_BYTE *)(v143 + 80) & 1) != 0)
                v146 = *(_QWORD *)(v143 + 88);
              else
                v146 = v143 + 81;
              goto LABEL_268;
            }
            v157 = re::Hash<re::DynamicString>::operator()((uint64_t)&v727, v143 + 104);
            if (*v519)
            {
              v158 = *(unsigned int *)(*(_QWORD *)(v528 + 648) + 4 * (v157 % *(unsigned int *)(v528 + 664)));
              v159 = *(_QWORD *)(v528 + 656);
              if ((_DWORD)v158 != 0x7FFFFFFF)
              {
                do
                {
                  if (re::DynamicString::operator==(v159 + 80 * v158 + 16, v143 + 104))
                    goto LABEL_295;
                  v158 = *(_DWORD *)(v159 + 80 * v158 + 8) & 0x7FFFFFFF;
                }
                while (v158 != 0x7FFFFFFF);
                v158 = 0x7FFFFFFFLL;
                goto LABEL_295;
              }
            }
            else
            {
              v159 = *(_QWORD *)(v528 + 656);
            }
            v158 = 0x7FFFFFFFLL;
LABEL_295:
            if ((*(_BYTE *)(v159 + 80 * v158 + 56) & 1) != 0)
              v146 = *(_QWORD *)(v159 + 80 * v158 + 64);
            else
              v146 = v159 + 80 * v158 + 57;
LABEL_268:
            v147 = *(_QWORD *)(v143 + 144);
            v148 = v147 >> 1;
            if ((v147 & 1) == 0)
              v148 = v147 >> 1;
            if (v148)
            {
              if ((v147 & 1) != 0)
                v149 = *(_QWORD *)(v143 + 152);
              else
                v149 = v143 + 145;
            }
            else if ((*(_BYTE *)(v143 + 48) & 1) != 0)
            {
              v149 = *(_QWORD *)(v143 + 56);
            }
            else
            {
              v149 = v143 + 49;
            }
            re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)__dst, v146, v149);
            v150 = __dst[0].n128_u8[8];
            v151 = __dst[1].n128_u64[0];
            if ((__dst[0].n128_u8[8] & 1) != 0)
              v152 = (const char *)__dst[1].n128_u64[0];
            else
              v152 = &__dst[0].n128_i8[9];
            v153 = strlen(v152);
            v154 = v153;
            if (v153 > 0x15)
            {
              v729.n128_u32[0] = v153;
              v155 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)v141, v153 + 1);
              v729.n128_u64[1] = (unint64_t)v155;
              v156 = 3077;
            }
            else
            {
              BYTE5(v730) = 21 - v153;
              v155 = &v729;
              v156 = 7173;
            }
            HIWORD(v730) = v156;
            memcpy(v155, v152, v154);
            v155->n128_u8[v154] = 0;
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)v731, (__int128 *)&v729, (uint64_t)v141);
            if ((v150 & 1) != 0 && __dst[0].n128_u64[0])
              (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)__dst[0].n128_u64[0] + 40))(__dst[0].n128_u64[0], v151);
            if (++v142 != (uint64_t *)v523)
              continue;
            break;
          }
          v139 = v538;
LABEL_298:
          v730 = 0x3000000000000;
          v729 = 0uLL;
          __dst[1].n128_u64[0] = 0x405000000000000;
          __dst[0].n128_u64[1] = (unint64_t)"private_functions";
          __dst[0].n128_u64[0] = 17;
          rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v729, (__int128 *)__dst, (__n128 *)v731, (uint64_t)v141);
          __dst[1].n128_u64[0] = 0x405000000000000;
          __dst[0].n128_u64[1] = (unint64_t)"vertex_linked_functions";
          __dst[0].n128_u64[0] = 23;
          rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)__dst, &v729, (uint64_t)v141);
          v728 = 0x4000000000000;
          v727 = 0uLL;
          if (v139)
          {
            v160 = v540;
            v524 = (re::DynamicString *)&v540[v139];
            while (1)
            {
              v161 = *v160;
              v726 = 0x1C05150000000000;
              v725 = 0uLL;
              if (!*(_BYTE *)(v161 + 168))
              {
                v162 = *(_QWORD *)(v161 + 144);
                if (!((v162 & 1) != 0 ? v162 >> 1 : v162 >> 1))
                  break;
              }
              if ((*(_BYTE *)(v161 + 80) & 1) != 0)
                v164 = *(_QWORD *)(v161 + 88);
              else
                v164 = v161 + 81;
LABEL_308:
              v165 = *(_QWORD *)(v161 + 144);
              v166 = v165 >> 1;
              if ((v165 & 1) == 0)
                v166 = v165 >> 1;
              if (v166)
              {
                if ((v165 & 1) != 0)
                  v167 = *(_QWORD *)(v161 + 152);
                else
                  v167 = v161 + 145;
              }
              else if ((*(_BYTE *)(v161 + 48) & 1) != 0)
              {
                v167 = *(_QWORD *)(v161 + 56);
              }
              else
              {
                v167 = v161 + 49;
              }
              re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)__dst, v164, v167);
              v168 = __dst[0].n128_u8[8];
              v169 = __dst[1].n128_u64[0];
              if ((__dst[0].n128_u8[8] & 1) != 0)
                v170 = (const char *)__dst[1].n128_u64[0];
              else
                v170 = &__dst[0].n128_i8[9];
              v171 = strlen(v170);
              v172 = v171;
              if (v171 > 0x15)
              {
                v725.n128_u32[0] = v171;
                v173 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)v141, v171 + 1);
                v725.n128_u64[1] = (unint64_t)v173;
                v174 = 3077;
              }
              else
              {
                BYTE5(v726) = 21 - v171;
                v173 = &v725;
                v174 = 7173;
              }
              HIWORD(v726) = v174;
              memcpy(v173, v170, v172);
              v173->n128_u8[v172] = 0;
              rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v727, (__int128 *)&v725, (uint64_t)v141);
              if ((v168 & 1) != 0 && __dst[0].n128_u64[0])
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)__dst[0].n128_u64[0] + 40))(__dst[0].n128_u64[0], v169);
              if (++v160 == (uint64_t *)v524)
                goto LABEL_338;
            }
            v175 = re::Hash<re::DynamicString>::operator()((uint64_t)&v592, v161 + 104);
            if (*v519)
            {
              v176 = *(unsigned int *)(*(_QWORD *)(v528 + 648) + 4 * (v175 % *(unsigned int *)(v528 + 664)));
              v177 = *(_QWORD *)(v528 + 656);
              if ((_DWORD)v176 != 0x7FFFFFFF)
              {
                do
                {
                  if (re::DynamicString::operator==(v177 + 80 * v176 + 16, v161 + 104))
                    goto LABEL_335;
                  v176 = *(_DWORD *)(v177 + 80 * v176 + 8) & 0x7FFFFFFF;
                }
                while (v176 != 0x7FFFFFFF);
                v176 = 0x7FFFFFFFLL;
                goto LABEL_335;
              }
            }
            else
            {
              v177 = *(_QWORD *)(v528 + 656);
            }
            v176 = 0x7FFFFFFFLL;
LABEL_335:
            if ((*(_BYTE *)(v177 + 80 * v176 + 56) & 1) != 0)
              v164 = *(_QWORD *)(v177 + 80 * v176 + 64);
            else
              v164 = v177 + 80 * v176 + 57;
            goto LABEL_308;
          }
LABEL_338:
          v726 = 0x3000000000000;
          v725 = 0uLL;
          __dst[1].n128_u64[0] = 0x405000000000000;
          __dst[0].n128_u64[1] = (unint64_t)"private_functions";
          __dst[0].n128_u64[0] = 17;
          rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v725, (__int128 *)__dst, &v727, (uint64_t)v141);
          __dst[1].n128_u64[0] = 0x405000000000000;
          __dst[0].n128_u64[1] = (unint64_t)"fragment_linked_functions";
          __dst[0].n128_u64[0] = 25;
          rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)__dst, &v725, (uint64_t)v141);
        }
        if ((_BYTE)v687)
        {
          v178 = (char *)v682;
          if ((BYTE8(v681) & 1) == 0)
            v178 = (char *)&v681 + 9;
LABEL_353:
          v182 = (char *)&v679 + 9;
          if ((BYTE8(v679) & 1) != 0)
            v182 = (char *)v680;
          re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)__dst, v178, v182);
          validateAlias((uint64_t)__dst);
          v728 = 0x1C05150000000000;
          v727 = 0uLL;
          v183 = __dst[0].n128_u8[8];
          v94 = __dst[1].n128_u64[0];
          if ((__dst[0].n128_u8[8] & 1) != 0)
            v184 = (const char *)__dst[1].n128_u64[0];
          else
            v184 = &__dst[0].n128_i8[9];
          v185 = strlen(v184);
          v61 = v185;
          if (v185 > 0x15)
          {
            HIWORD(v728) = 3077;
            v727.n128_u32[0] = v185;
            this = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)v141, (v185 + 1));
            v727.n128_u64[1] = this;
          }
          else
          {
            BYTE5(v728) = 21 - v185;
            this = (uint64_t)&v727;
          }
          memcpy((void *)this, v184, v61);
          *(_BYTE *)(this + v61) = 0;
          *(_QWORD *)&v731[16] = 0x405000000000000;
          *(_QWORD *)v731 = 15;
          *(_QWORD *)&v731[8] = "vertex_function";
          v186 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)v731, &v727, (uint64_t)v141);
          if (v688)
          {
            v730 = 0x405000000000000;
            *(_QWORD *)v731 = 0;
            v729.n128_u64[0] = 38;
            v729.n128_u64[1] = (unint64_t)"support_adding_vertex_binary_functions";
            *(_QWORD *)&v731[8] = 0;
            *(_QWORD *)&v731[16] = 0xA000000000000;
            v186 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)&v729, (__n128 *)v731, (uint64_t)v141);
          }
          v187 = v140;
          if ((v183 & 1) != 0 && __dst[0].n128_u64[0])
            (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)__dst[0].n128_u64[0] + 40))(__dst[0].n128_u64[0], v94, v186);
          if (!v507)
            goto LABEL_392;
          if (*(_BYTE *)(v507 + 168))
          {
            v188 = v507 + 81;
            if ((*(_BYTE *)(v507 + 80) & 1) != 0)
              v188 = *(_QWORD *)(v507 + 88);
LABEL_380:
            v192 = v507 + 49;
            if ((*(_BYTE *)(v507 + 48) & 1) != 0)
              v192 = *(_QWORD *)(v507 + 56);
            re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)__dst, v188, v192);
            validateAlias((uint64_t)__dst);
            v730 = 0x150000000000;
            v729 = 0uLL;
            v193 = __dst[0].n128_u8[8];
            v94 = __dst[1].n128_u64[0];
            if ((__dst[0].n128_u8[8] & 1) != 0)
              v194 = (const char *)__dst[1].n128_u64[0];
            else
              v194 = &__dst[0].n128_i8[9];
            v195 = strlen(v194);
            v61 = v195;
            if (v195 > 0x15)
            {
              v729.n128_u32[0] = v195;
              this = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)v141, (v195 + 1));
              v729.n128_u64[1] = this;
              v196 = 3077;
            }
            else
            {
              BYTE5(v730) = 21 - v195;
              this = (uint64_t)&v729;
              v196 = 7173;
            }
            HIWORD(v730) = v196;
            memcpy((void *)this, v194, v61);
            *(_BYTE *)(this + v61) = 0;
            *(_QWORD *)&v731[16] = 0x405000000000000;
            *(_QWORD *)v731 = 17;
            *(_QWORD *)&v731[8] = "fragment_function";
            v197 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)v731, &v729, (uint64_t)v141);
            if ((v193 & 1) != 0 && __dst[0].n128_u64[0])
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)__dst[0].n128_u64[0] + 40))(__dst[0].n128_u64[0], v94, v197);
            v187 = v140;
LABEL_392:
            v54 = v522;
            if (v641.n128_u32[0] != 1)
            {
              *(_QWORD *)&v731[16] = 0x405000000000000;
              *(_QWORD *)v731 = 19;
              *(_QWORD *)&v731[8] = "raster_sample_count";
              __dst[1].n128_u64[0] = 0;
              __dst[0] = (__n128)v641.n128_u32[0];
              if (v641.n128_i32[0] < 0)
                v198 = 470;
              else
                v198 = 502;
              __dst[1].n128_u16[3] = v198;
              rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)v731, __dst, (uint64_t)v141);
            }
            *(_QWORD *)&v731[16] = 0x405000000000000;
            *(_QWORD *)v731 = 30;
            *(_QWORD *)&v731[8] = "max_vertex_amplification_count";
            __dst[1].n128_u64[0] = 0x1F6000000000000;
            __dst[0] = (__n128)2uLL;
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)v731, __dst, (uint64_t)v141);
            if (BYTE3(v579))
            {
              *(_QWORD *)&v731[16] = 0x405000000000000;
              *(_QWORD *)v731 = 25;
              *(_QWORD *)&v731[8] = "alpha_to_coverage_enabled";
              __dst[1].n128_u64[0] = 0xA000000000000;
              __dst[0] = 0uLL;
              rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)v731, __dst, (uint64_t)v141);
              if (BYTE4(v579))
              {
                if (BYTE3(v579))
                {
                  *(_QWORD *)&v731[16] = 0x405000000000000;
                  *(_QWORD *)v731 = 20;
                  *(_QWORD *)&v731[8] = "alpha_to_one_enabled";
                  __dst[1].n128_u64[0] = 0xA000000000000;
                  __dst[0] = 0uLL;
                  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)v731, __dst, (uint64_t)v141);
                }
              }
            }
            *(_QWORD *)&v731[16] = 0x405000000000000;
            *(_QWORD *)v731 = 24;
            *(_QWORD *)&v731[8] = "input_primitive_topology";
            __dst[1].n128_u64[0] = 0x1F6000000000000;
            __dst[0] = (__n128)3uLL;
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)v731, __dst, (uint64_t)v141);
            if (v643.n128_u32[1] - 250 <= 0xA && ((1 << (v643.n128_u8[4] + 6)) & 0x425) != 0)
            {
              *(_QWORD *)&v731[16] = 0x405000000000000;
              *(_QWORD *)v731 = 29;
              *(_QWORD *)&v731[8] = "depth_attachment_pixel_format";
              __dst[1].n128_u64[0] = 0x1F6000000000000;
              __dst[0] = (__n128)v643.n128_u32[1];
              rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)v731, __dst, (uint64_t)v141);
            }
            if (v643.n128_u32[2] - 253 <= 9 && ((1 << (v643.n128_u8[8] + 3)) & 0x385) != 0)
            {
              *(_QWORD *)&v731[16] = 0x405000000000000;
              *(_QWORD *)v731 = 31;
              *(_QWORD *)&v731[8] = "stencil_attachment_pixel_format";
              __dst[1].n128_u64[0] = 0x1F6000000000000;
              __dst[0] = (__n128)v643.n128_u32[2];
              rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)v731, __dst, (uint64_t)v141);
            }
            if (p_size)
            {
              LOWORD(v199) = 0;
              LOWORD(v200) = 0;
              v730 = 0x4000000000000;
              v728 = 0x4000000000000;
              v729 = 0uLL;
              v201 = 5 * (_QWORD)p_size;
              v727 = 0uLL;
              p_size = (std::string::size_type *)&v187[5 * (_QWORD)p_size];
              v202 = 2 * v201;
              v203 = v187 + 1;
              do
              {
                if (*v203 <= (unsigned __int16)v199)
                  v199 = (unsigned __int16)v199;
                else
                  v199 = *v203;
                if (*(v203 - 1) <= (unsigned __int16)v200)
                  v200 = (unsigned __int16)v200;
                else
                  v200 = *(v203 - 1);
                v203 += 5;
                v202 -= 10;
              }
              while (v202);
              v204 = 0;
              do
              {
                __dst[1].n128_u64[0] = 0x3000000000000;
                __dst[0] = 0uLL;
                rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v729, (__int128 *)__dst, (uint64_t)v141);
                ++v204;
              }
              while (v199 >= (unsigned __int16)v204);
              v205 = 0;
              do
              {
                __dst[1].n128_u64[0] = 0x3000000000000;
                __dst[0] = 0uLL;
                rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v727, (__int128 *)__dst, (uint64_t)v141);
                ++v205;
              }
              while (v200 >= (unsigned __int16)v205);
              do
              {
                v206 = v622;
                while (1)
                {
                  v207 = v206;
                  v206 = (std::locale *)v206[1].__locale_;
                  if (!v206)
                    break;
                  v94 = (unint64_t)v207[4].__locale_;
                  if (v94)
                    goto LABEL_425;
                }
                v94 = (unint64_t)v207[4].__locale_;
LABEL_425:
                v61 = v187[2];
                if (v94 <= v61)
                  goto LABEL_924;
                v208 = (unsigned __int16 *)((char *)v207[5].__locale_ + 16 * v61);
                v61 = (unint64_t)(v208 + 1);
                if (v187[3])
                {
                  v209 = re::getVertexFormatFromDataType((re *)v187[3]);
                  v525 = 1;
                  v210 = -1;
                  this = 1;
                }
                else
                {
                  v525 = v208[1];
                  v209 = *((unsigned __int8 *)v208 + 12);
                  v210 = *v208;
                  this = *((unsigned __int8 *)v208 + 5);
                }
                v94 = 24;
                v211 = (int *)(v729.n128_u64[1] + 24 * v187[1]);
                *(_QWORD *)&v731[16] = 0x405000000000000;
                *(_QWORD *)v731 = 6;
                *(_QWORD *)&v731[8] = "format";
                v2 = &__dst[0].n128_i8[8];
                __dst[1].n128_u64[0] = 0x1F6000000000000;
                __dst[0] = (__n128)v209;
                rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(v211, (__int128 *)v731, __dst, (uint64_t)v141);
                v212 = (int *)(v729.n128_u64[1] + 24 * v187[1]);
                v213 = *v187;
                *(_QWORD *)&v731[16] = 0x405000000000000;
                *(_QWORD *)v731 = 12;
                *(_QWORD *)&v731[8] = "buffer_index";
                __dst[1].n128_u64[0] = 0x1F6000000000000;
                __dst[0] = (__n128)v213;
                rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(v212, (__int128 *)v731, __dst, (uint64_t)v141);
                v214 = *((int *)v208 + 2);
                if ((_DWORD)v214)
                {
                  v215 = (int *)(v729.n128_u64[1] + 24 * v187[1]);
                  *(_QWORD *)&v731[16] = 0x405000000000000;
                  *(_QWORD *)v731 = 6;
                  *(_QWORD *)&v731[8] = "offset";
                  __dst[1].n128_u64[0] = 0;
                  __dst[0] = (__n128)v214;
                  if ((v214 & 0x80000000) != 0)
                    v216 = 182;
                  else
                    v216 = 502;
                  __dst[1].n128_u16[3] = v216;
                  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(v215, (__int128 *)v731, __dst, (uint64_t)v141);
                }
                v726 = 0;
                v725 = (__n128)(unint64_t)v210;
                if (v210 < 0)
                  v217 = 278;
                else
                  v217 = 406;
                if (!HIDWORD(v210))
                  v217 |= 0x60u;
                HIWORD(v726) = v217;
                v218 = (int *)(v727.n128_u64[1] + 24 * *v187);
                __dst[1].n128_u64[0] = 0x405000000000000;
                __dst[0].n128_u64[1] = (unint64_t)"stride";
                __dst[0].n128_u64[0] = 6;
                rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(v218, (__int128 *)__dst, &v725, (uint64_t)v141);
                v17 = &__dst[0].n128_i8[9];
                if ((_DWORD)this != 1)
                {
                  v219 = (int *)(v727.n128_u64[1] + 24 * *v187);
                  *(_QWORD *)&v731[16] = 0x405000000000000;
                  *(_QWORD *)v731 = 13;
                  *(_QWORD *)&v731[8] = "step_function";
                  __dst[1].n128_u64[0] = 0x1F6000000000000;
                  __dst[0] = (__n128)this;
                  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(v219, (__int128 *)v731, __dst, (uint64_t)v141);
                }
                v54 = v522;
                if (*(_WORD *)v61 != 1)
                {
                  v220 = (int *)(v727.n128_u64[1] + 24 * *v187);
                  *(_QWORD *)&v731[16] = 0x405000000000000;
                  *(_QWORD *)v731 = 9;
                  *(_QWORD *)&v731[8] = "step_rate";
                  __dst[1].n128_u64[0] = 0x1F6000000000000;
                  __dst[0] = (__n128)(unint64_t)v525;
                  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(v220, (__int128 *)v731, __dst, (uint64_t)v141);
                }
                v187 += 5;
              }
              while (v187 != (unsigned __int16 *)p_size);
              *(_QWORD *)&v731[8] = 0;
              *(_QWORD *)&v731[16] = 0x3000000000000;
              *(_QWORD *)v731 = 0;
              __dst[1].n128_u64[0] = 0x405000000000000;
              __dst[0].n128_u64[1] = (unint64_t)"attributes";
              __dst[0].n128_u64[0] = 10;
              rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)v731, (__int128 *)__dst, &v729, (uint64_t)v141);
              __dst[1].n128_u64[0] = 0x405000000000000;
              __dst[0].n128_u64[1] = (unint64_t)"layouts";
              __dst[0].n128_u64[0] = 7;
              rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)v731, (__int128 *)__dst, &v727, (uint64_t)v141);
              __dst[1].n128_u64[0] = 0x405000000000000;
              __dst[0].n128_u64[1] = (unint64_t)"vertex_descriptor";
              __dst[0].n128_u64[0] = 17;
              rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)__dst, (__n128 *)v731, (uint64_t)v141);
            }
            v221 = 0;
            v222 = 0;
            v730 = 0x4000000000000;
            v729 = 0uLL;
            while (2)
            {
              v728 = 0x3000000000000;
              v727 = 0uLL;
              v223 = v641.n128_i32[v222 + 1];
              if ((_DWORD)v223)
              {
                *(_QWORD *)&v731[16] = 0x405000000000000;
                *(_QWORD *)v731 = 12;
                *(_QWORD *)&v731[8] = "pixel_format";
                __dst[1].n128_u64[0] = 0;
                __dst[0] = (__n128)v223;
                if ((v223 & 0x80000000) != 0)
                  v224 = 182;
                else
                  v224 = 502;
                __dst[1].n128_u16[3] = v224;
                rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                if (v586)
                {
                  if (v586 > v222)
                  {
                    v94 = v587;
                    if (*(_BYTE *)(v587 + v221 + 1))
                    {
                      *(_QWORD *)&v731[16] = 0x405000000000000;
                      *(_QWORD *)v731 = 16;
                      *(_QWORD *)&v731[8] = "blending_enabled";
                      memset(__dst, 0, 24);
                      v225 = 9;
                      goto LABEL_454;
                    }
                    if (*(_BYTE *)(v587 + v221))
                    {
                      *(_QWORD *)&v731[16] = 0x405000000000000;
                      *(_QWORD *)v731 = 16;
                      *(_QWORD *)&v731[8] = "blending_enabled";
                      __dst[1].n128_u64[0] = 0xA000000000000;
                      __dst[0] = 0uLL;
                      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                      v234 = *(int *)(v94 + v221 + 4);
                      if ((_DWORD)v234 != 1)
                      {
                        *(_QWORD *)&v731[16] = 0x405000000000000;
                        *(_QWORD *)v731 = 23;
                        *(_QWORD *)&v731[8] = "source_rgb_blend_factor";
                        __dst[1].n128_u64[0] = 0;
                        __dst[0] = (__n128)v234;
                        if ((v234 & 0x80000000) != 0)
                          v235 = 182;
                        else
                          v235 = 502;
                        __dst[1].n128_u16[3] = v235;
                        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                      }
                      v236 = *(int *)(v94 + v221 + 8);
                      if ((_DWORD)v236)
                      {
                        *(_QWORD *)&v731[16] = 0x405000000000000;
                        *(_QWORD *)v731 = 28;
                        *(_QWORD *)&v731[8] = "destination_rgb_blend_factor";
                        __dst[1].n128_u64[0] = 0;
                        __dst[0] = (__n128)v236;
                        if ((v236 & 0x80000000) != 0)
                          v237 = 182;
                        else
                          v237 = 502;
                        __dst[1].n128_u16[3] = v237;
                        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                      }
                      v61 = v94 + v221;
                      v238 = *(int *)(v94 + v221 + 12);
                      if ((_DWORD)v238)
                      {
                        *(_QWORD *)&v731[16] = 0x405000000000000;
                        *(_QWORD *)v731 = 19;
                        *(_QWORD *)&v731[8] = "rgb_blend_operation";
                        __dst[1].n128_u64[0] = 0;
                        __dst[0] = (__n128)v238;
                        if ((v238 & 0x80000000) != 0)
                          v239 = 182;
                        else
                          v239 = 502;
                        __dst[1].n128_u16[3] = v239;
                        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                      }
                      v240 = *(int *)(v61 + 16);
                      if ((_DWORD)v240 != 1)
                      {
                        *(_QWORD *)&v731[16] = 0x405000000000000;
                        *(_QWORD *)v731 = 25;
                        *(_QWORD *)&v731[8] = "source_alpha_blend_factor";
                        __dst[1].n128_u64[0] = 0;
                        __dst[0] = (__n128)v240;
                        if ((v240 & 0x80000000) != 0)
                          v241 = 182;
                        else
                          v241 = 502;
                        __dst[1].n128_u16[3] = v241;
                        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                      }
                      v94 += v221;
                      v242 = *(int *)(v94 + 20);
                      if ((_DWORD)v242)
                      {
                        *(_QWORD *)&v731[16] = 0x405000000000000;
                        *(_QWORD *)v731 = 30;
                        *(_QWORD *)&v731[8] = "destination_alpha_blend_factor";
                        __dst[1].n128_u64[0] = 0;
                        __dst[0] = (__n128)v242;
                        if ((v242 & 0x80000000) != 0)
                          v243 = 182;
                        else
                          v243 = 502;
                        __dst[1].n128_u16[3] = v243;
                        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                      }
                      v244 = *(int *)(v94 + 24);
                      if ((_DWORD)v244)
                      {
                        *(_QWORD *)&v731[16] = 0x405000000000000;
                        *(_QWORD *)v731 = 21;
                        *(_QWORD *)&v731[8] = "alpha_blend_operation";
                        __dst[1].n128_u64[0] = 0;
                        __dst[0] = (__n128)v244;
                        if ((v244 & 0x80000000) != 0)
                          v225 = 182;
                        else
                          v225 = 502;
LABEL_454:
                        __dst[1].n128_u16[3] = v225;
                        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                      }
                    }
                    if ((As64Bits & 2) == 0)
                    {
                      if (v586 > v222)
                      {
                        v226 = *(_DWORD *)(v587 + v221 + 28);
                        goto LABEL_463;
                      }
                      goto LABEL_472;
                    }
LABEL_465:
                    v226 = 0;
                    goto LABEL_466;
                  }
                  *(_QWORD *)&v731[16] = 0x405000000000000;
                  *(_QWORD *)v731 = 16;
                  *(_QWORD *)&v731[8] = "blending_enabled";
                  __dst[1].n128_u64[0] = 0x1F6000000000000;
                  __dst[0] = 0uLL;
                  v94 = 502;
                  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                  *(_QWORD *)&v731[16] = 0x405000000000000;
                  *(_QWORD *)v731 = 10;
                  *(_QWORD *)&v731[8] = "write_mask";
                  __dst[1].n128_u64[0] = 0x1F6000000000000;
                  __dst[0] = (__n128)0xFuLL;
LABEL_471:
                  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                  goto LABEL_472;
                }
                if (BYTE1(v579))
                {
                  *(_QWORD *)&v731[16] = 0x405000000000000;
                  *(_QWORD *)v731 = 16;
                  *(_QWORD *)&v731[8] = "blending_enabled";
                  memset(__dst, 0, 24);
                  v227 = 9;
                  goto LABEL_460;
                }
                if ((_BYTE)v579)
                {
                  *(_QWORD *)&v731[16] = 0x405000000000000;
                  *(_QWORD *)v731 = 16;
                  *(_QWORD *)&v731[8] = "blending_enabled";
                  __dst[1].n128_u64[0] = 0xA000000000000;
                  __dst[0] = 0uLL;
                  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                  if (HIDWORD(v579) != 1)
                  {
                    *(_QWORD *)&v731[16] = 0x405000000000000;
                    *(_QWORD *)v731 = 23;
                    *(_QWORD *)&v731[8] = "source_rgb_blend_factor";
                    __dst[1].n128_u64[0] = 0;
                    __dst[0] = (__n128)(unint64_t)SHIDWORD(v579);
                    if (v579 < 0)
                      v229 = 182;
                    else
                      v229 = 502;
                    __dst[1].n128_u16[3] = v229;
                    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                  }
                  if ((_DWORD)v580)
                  {
                    *(_QWORD *)&v731[16] = 0x405000000000000;
                    *(_QWORD *)v731 = 28;
                    *(_QWORD *)&v731[8] = "destination_rgb_blend_factor";
                    __dst[1].n128_u64[0] = 0;
                    __dst[0] = (__n128)(unint64_t)(int)v580;
                    if ((int)v580 < 0)
                      v230 = 182;
                    else
                      v230 = 502;
                    __dst[1].n128_u16[3] = v230;
                    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                  }
                  if (DWORD1(v580))
                  {
                    *(_QWORD *)&v731[16] = 0x405000000000000;
                    *(_QWORD *)v731 = 19;
                    *(_QWORD *)&v731[8] = "rgb_blend_operation";
                    __dst[1].n128_u64[0] = 0;
                    __dst[0] = (__n128)(unint64_t)SDWORD1(v580);
                    if (SDWORD1(v580) < 0)
                      v231 = 182;
                    else
                      v231 = 502;
                    __dst[1].n128_u16[3] = v231;
                    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                  }
                  if (DWORD2(v580) != 1)
                  {
                    *(_QWORD *)&v731[16] = 0x405000000000000;
                    *(_QWORD *)v731 = 25;
                    *(_QWORD *)&v731[8] = "source_alpha_blend_factor";
                    __dst[1].n128_u64[0] = 0;
                    __dst[0] = (__n128)(unint64_t)SDWORD2(v580);
                    if (SDWORD2(v580) < 0)
                      v232 = 182;
                    else
                      v232 = 502;
                    __dst[1].n128_u16[3] = v232;
                    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                  }
                  if (HIDWORD(v580))
                  {
                    *(_QWORD *)&v731[16] = 0x405000000000000;
                    *(_QWORD *)v731 = 30;
                    *(_QWORD *)&v731[8] = "destination_alpha_blend_factor";
                    __dst[1].n128_u64[0] = 0;
                    __dst[0] = (__n128)(unint64_t)SHIDWORD(v580);
                    if (v580 < 0)
                      v233 = 182;
                    else
                      v233 = 502;
                    __dst[1].n128_u16[3] = v233;
                    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                  }
                  if ((_DWORD)v581)
                  {
                    *(_QWORD *)&v731[16] = 0x405000000000000;
                    *(_QWORD *)v731 = 21;
                    *(_QWORD *)&v731[8] = "alpha_blend_operation";
                    __dst[1].n128_u64[0] = 0;
                    __dst[0] = (__n128)(unint64_t)(int)v581;
                    if ((int)v581 < 0)
                      v227 = 182;
                    else
                      v227 = 502;
LABEL_460:
                    __dst[1].n128_u16[3] = v227;
                    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v727, (__int128 *)v731, __dst, (uint64_t)v141);
                  }
                }
                if ((As64Bits & 2) != 0)
                  goto LABEL_465;
                v226 = DWORD1(v581);
LABEL_463:
                if (v226 != 15)
                {
LABEL_466:
                  *(_QWORD *)&v731[16] = 0x405000000000000;
                  *(_QWORD *)v731 = 10;
                  *(_QWORD *)&v731[8] = "write_mask";
                  __dst[1].n128_u64[0] = 0;
                  __dst[0] = (__n128)(unint64_t)v226;
                  if (v226 < 0)
                    v228 = 182;
                  else
                    v228 = 502;
                  __dst[1].n128_u16[3] = v228;
                  goto LABEL_471;
                }
LABEL_472:
                rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v729, (__int128 *)&v727, (uint64_t)v141);
              }
              ++v222;
              v221 += 32;
              if (v221 == 256)
              {
                __dst[1].n128_u64[0] = 0x405000000000000;
                __dst[0].n128_u64[1] = (unint64_t)"color_attachments";
                __dst[0].n128_u64[0] = 17;
                rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v605, (__int128 *)__dst, &v729, (uint64_t)v141);
                ++*(_DWORD *)(v528 + 856);
                rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v706, &v605, (uint64_t)v511);
                if (v537[0] && v540)
                  (*(void (**)(void))(*(_QWORD *)v537[0] + 40))();
                if (*(_QWORD *)v607 && *(_QWORD *)&v609[2])
                  (*(void (**)(void))(**(_QWORD **)v607 + 40))();
                goto LABEL_541;
              }
              continue;
            }
          }
          v189 = re::Hash<re::DynamicString>::operator()((uint64_t)v731, v502);
          if (*v519)
          {
            v190 = *(unsigned int *)(*(_QWORD *)(v528 + 648) + 4 * (v189 % *(unsigned int *)(v528 + 664)));
            v191 = *(_QWORD *)(v528 + 656);
            if ((_DWORD)v190 != 0x7FFFFFFF)
            {
              do
              {
                if (re::DynamicString::operator==(v191 + 80 * v190 + 16, v502))
                  goto LABEL_377;
                v190 = *(_DWORD *)(v191 + 80 * v190 + 8) & 0x7FFFFFFF;
              }
              while (v190 != 0x7FFFFFFF);
              v190 = 0x7FFFFFFFLL;
              goto LABEL_377;
            }
          }
          else
          {
            v191 = *(_QWORD *)(v528 + 656);
          }
          v190 = 0x7FFFFFFFLL;
LABEL_377:
          if ((*(_BYTE *)(v191 + 80 * v190 + 56) & 1) != 0)
            v188 = *(_QWORD *)(v191 + 80 * v190 + 64);
          else
            v188 = v191 + 80 * v190 + 57;
          goto LABEL_380;
        }
        v179 = re::Hash<re::DynamicString>::operator()((uint64_t)v731, (uint64_t)&v683);
        if (*v519)
        {
          v180 = *(unsigned int *)(*(_QWORD *)(v528 + 648) + 4 * (v179 % *(unsigned int *)(v528 + 664)));
          v181 = *(_QWORD *)(v528 + 656);
          if ((_DWORD)v180 != 0x7FFFFFFF)
          {
            do
            {
              if (re::DynamicString::operator==(v181 + 80 * v180 + 16, (uint64_t)&v683))
                goto LABEL_350;
              v180 = *(_DWORD *)(v181 + 80 * v180 + 8) & 0x7FFFFFFF;
            }
            while (v180 != 0x7FFFFFFF);
            v180 = 0x7FFFFFFFLL;
            goto LABEL_350;
          }
        }
        else
        {
          v181 = *(_QWORD *)(v528 + 656);
        }
        v180 = 0x7FFFFFFFLL;
LABEL_350:
        if ((*(_BYTE *)(v181 + 80 * v180 + 56) & 1) != 0)
          v178 = *(char **)(v181 + 80 * v180 + 64);
        else
          v178 = (char *)(v181 + 80 * v180 + 57);
        goto LABEL_353;
      }
LABEL_542:
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v548);
      v245.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v645);
      if (v649.n128_u64[1] && v653)
        (*(void (**)(double))(*(_QWORD *)v649.n128_u64[1] + 40))(v245.n128_f64[0]);
      if (v657.n128_u64[1] && v661)
        (*(void (**)(__n128))(*(_QWORD *)v657.n128_u64[1] + 40))(v245);
      if (*((_QWORD *)&v665 + 1) && v669)
        (*(void (**)(__n128))(**((_QWORD **)&v665 + 1) + 40))(v245);
      v246 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v673);
      if (v552 && v553)
        (*(void (**)(double))(*(_QWORD *)v552 + 40))(v246);
      re::AttributeTable::~AttributeTable((re::AttributeTable *)&v593);
      re::FixedArray<re::AttributeArgument>::deinit(v560);
      if (!v561[0])

      re::FunctionReflectionCache::~FunctionReflectionCache((re::FunctionReflectionCache *)&v563);
      re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v577);
      if (v578)

      if (v515)
      if (v504)

      if ((_QWORD)v685)
      {
        if ((BYTE8(v685) & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v685 + 40))(v685, v686);
        v685 = 0u;
        v686 = 0u;
      }
      if ((_QWORD)v683)
      {
        if ((BYTE8(v683) & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v683 + 40))(v683, v684);
        v683 = 0u;
        v684 = 0u;
      }
      if ((_QWORD)v681)
      {
        if ((BYTE8(v681) & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v681 + 40))(v681, v682);
        v681 = 0u;
        v682 = 0u;
      }
      if ((_QWORD)v679)
      {
        if ((BYTE8(v679) & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v679 + 40))(v679, v680);
        v679 = 0u;
        v680 = 0u;
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v678);
      if (v585 && v587)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v585 + 40))(v585, v587);
      if (v588 && (v589 & 1) != 0)
        (*(void (**)(uint64_t, const char *))(*(_QWORD *)v588 + 40))(v588, v591);
      if (v702[0])
      {
        if (v705)
          (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v702[0] + 40))(v702[0], v705);
        v705 = 0;
        v702[1] = 0;
        v703 = 0;
        v702[0] = 0;
        ++v704;
      }
      if (v698[0])
      {
        if (v701)
          (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v698[0] + 40))(v698[0], v701);
        v701 = 0;
        v698[1] = 0;
        v699 = 0;
        v698[0] = 0;
        ++v700;
      }
      if ((_QWORD)v695)
      {
        if ((BYTE8(v695) & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v695 + 40))(v695, v696);
        v695 = 0u;
        v696 = 0u;
      }
      if (*((_QWORD *)&v693[0] + 1) && v694)
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)&v693[0] + 1) + 40))(*((_QWORD *)&v693[0] + 1), v694);
      v56 = v503 + 232;
    }
    while (v503 + 232 != v501);
  }
  *(_QWORD *)&v646 = 0x4000000000000;
  v645 = 0uLL;
  v247 = *(_QWORD *)(v528 + 704);
  if (v247)
  {
    v248 = 0;
    v249 = 0;
    v250 = *(_QWORD *)(v528 + 720);
    v251 = v528 + 64;
    v252 = 136 * v247;
    do
    {
      v253 = v250 + v249;
      if (*(_DWORD *)(v250 + v249 + 60) || *(_DWORD *)(v253 + 108))
      {
        re::PSOToolManager::serializeToURL(char const*)::$_0::operator()((_anonymous_namespace_ *)v528, (char *)(v250 + v249), v253 + 32, v253 + 80, v528 + 408, v248, 0);
      }
      else
      {
        if (!re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v251, v250 + v249))
        {
          v254 = v250 + v249;
          v255 = (*(_BYTE *)(v250 + v249 + 8) & 1) != 0 ? *(re::ns **)(v254 + 16) : (re::ns *)(v254 + 9);
          re::mtl::Library::makeFunction((void **)(v528 + 160), v255, &v593);
          re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<NS::SharedPtr<MTL::Function>&>(v251, (const re::DynamicString *)(v250 + v249), (id *)&v593.__pn_.__r_.__value_.__l.__data_);
          if (v593.__pn_.__r_.__value_.__r.__words[0])

        }
        generateJSONForComputeShader((uint64_t)&v593, v250 + v249, v250 + v249, (uint64_t)v717, 0, *(unsigned __int8 *)(v250 + v249 + 128));
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v645, (__int128 *)&v593, (uint64_t)v511);
        ++*(_DWORD *)(v528 + 848);
      }
      v249 += 136;
      ++v248;
    }
    while (v252 != v249);
  }
  v532 = *(unsigned int *)(v528 + 440);
  v256 = 0;
  if ((_DWORD)v532)
  {
    v257 = *(int **)(v528 + 424);
    while (1)
    {
      v258 = *v257;
      v257 += 52;
      if (v258 < 0)
        break;
      if (v532 == ++v256)
      {
        LODWORD(v256) = *(_DWORD *)(v528 + 440);
        break;
      }
    }
  }
  if ((_DWORD)v532 != (_DWORD)v256)
  {
    v259 = v256;
    do
    {
      v260 = *(_QWORD *)(v528 + 424) + 208 * v259;
      re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v593, (uint64_t *)(v260 + 16));
      re::DynamicString::DynamicString((re::DynamicString *)&v595[1], (const re::DynamicString *)(v260 + 56));
      re::DynamicString::DynamicString((re::DynamicString *)&v596, (const re::DynamicString *)(v260 + 88));
      re::DynamicString::DynamicString((re::DynamicString *)&v598, (const re::DynamicString *)(v260 + 120));
      re::DynamicString::DynamicString((re::DynamicString *)&v600, (const re::DynamicString *)(v260 + 152));
      v261 = *(_OWORD *)(v260 + 184);
      v603 = *(_BYTE *)(v260 + 200);
      v602 = v261;
      generateJSONForFunctionVariant((uint64_t)&v689, (uint64_t *)&v593, (uint64_t)v716, (uint64_t)v519, 1);
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v708, (__int128 *)&v689, (uint64_t)v511);
      v262 = *((_QWORD *)&v602 + 1);
      v263 = *(__int128 **)(v528 + 704);
      if ((unint64_t)v263 <= *((_QWORD *)&v602 + 1))
        goto LABEL_1065;
      generateJSONForComputeShader((uint64_t)v622, (uint64_t)&v596, (uint64_t)&v595[1], (uint64_t)v717, 1, *(unsigned __int8 *)(*(_QWORD *)(v528 + 720) + 136 * *((_QWORD *)&v602 + 1) + 128));
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v645, (__int128 *)v622, (uint64_t)v511);
      ++*(_DWORD *)(v528 + 848);
      if ((_QWORD)v600)
      {
        if ((BYTE8(v600) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v600 + 40))();
        v600 = 0u;
        v601 = 0u;
      }
      if ((_QWORD)v598)
      {
        if ((BYTE8(v598) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v598 + 40))();
        v598 = 0u;
        v599 = 0u;
      }
      if ((_QWORD)v596)
      {
        if ((BYTE8(v596) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v596 + 40))();
        v596 = 0u;
        v597 = 0u;
      }
      if (v595[1])
      {
        if ((v595[2] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v595[1] + 40))();
        memset(&v595[1], 0, 32);
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v593);
      if (*(_DWORD *)(v528 + 440) <= (v256 + 1))
        v264 = v256 + 1;
      else
        v264 = *(_DWORD *)(v528 + 440);
      while (1)
      {
        v259 = (v256 + 1);
        if (v264 - 1 == (_DWORD)v256)
          break;
        LODWORD(v256) = v256 + 1;
        v265 = v259;
        if ((*(_DWORD *)(*(_QWORD *)(v528 + 424) + 208 * v259) & 0x80000000) != 0)
          goto LABEL_645;
      }
      v265 = v264;
LABEL_645:
      LODWORD(v256) = v265;
    }
    while ((_DWORD)v532 != v265);
  }
  v593.__pn_.__r_.__value_.__r.__words[2] = 0x405000000000000;
  v593.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"compute_pipelines";
  v593.__pn_.__r_.__value_.__r.__words[0] = 17;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v712, (__int128 *)&v593, &v645, (uint64_t)v511);
  *(_QWORD *)&v619 = 0x4000000000000;
  v618 = 0uLL;
  v266 = *(_QWORD *)(v528 + 744);
  if (v266)
  {
    v267 = 0;
    v268 = 0;
    v269 = *(_QWORD *)(v528 + 760);
    v270 = v528 + 64;
    v271 = 176 * v266;
    do
    {
      v272 = v269 + v268;
      if (*(_DWORD *)(v269 + v268 + 60) || *(_DWORD *)(v272 + 108))
      {
        re::PSOToolManager::serializeToURL(char const*)::$_0::operator()((_anonymous_namespace_ *)v528, (char *)(v269 + v268), v272 + 32, v272 + 80, v528 + 456, v267, 1);
      }
      else
      {
        if (!re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v270, v269 + v268))
        {
          v273 = v269 + v268;
          v274 = (*(_BYTE *)(v269 + v268 + 8) & 1) != 0 ? *(re::ns **)(v273 + 16) : (re::ns *)(v273 + 9);
          re::mtl::Library::makeFunction((void **)(v528 + 160), v274, &v593);
          re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<NS::SharedPtr<MTL::Function>&>(v270, (const re::DynamicString *)(v269 + v268), (id *)&v593.__pn_.__r_.__value_.__l.__data_);
          if (v593.__pn_.__r_.__value_.__r.__words[0])

        }
        generateJSONForTileShader((uint64_t)&v593, v269 + v268, v269 + v268, (uint64_t)v717, 0, *(unsigned __int8 *)(v269 + v268 + 128), v269 + v268 + 136, *(_DWORD *)(v269 + v268 + 132));
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v618, (__int128 *)&v593, (uint64_t)v511);
        ++*(_DWORD *)(v528 + 852);
      }
      v268 += 176;
      ++v267;
    }
    while (v271 != v268);
  }
  v565[0] = 0;
  v563 = 0u;
  v564 = 0u;
  *(_QWORD *)&v565[1] = 0x7FFFFFFFLL;
  v533 = *(unsigned int *)(v528 + 488);
  v275 = 0;
  if ((_DWORD)v533)
  {
    v276 = *(int **)(v528 + 472);
    while (1)
    {
      v277 = *v276;
      v276 += 52;
      if (v277 < 0)
        break;
      if (v533 == ++v275)
      {
        LODWORD(v275) = *(_DWORD *)(v528 + 488);
        break;
      }
    }
  }
  if ((_DWORD)v533 != (_DWORD)v275)
  {
    v278 = v275;
    do
    {
      v279 = *(_QWORD *)(v528 + 472) + 208 * v278;
      re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v593, (uint64_t *)(v279 + 16));
      re::DynamicString::DynamicString((re::DynamicString *)&v595[1], (const re::DynamicString *)(v279 + 56));
      re::DynamicString::DynamicString((re::DynamicString *)&v596, (const re::DynamicString *)(v279 + 88));
      re::DynamicString::DynamicString((re::DynamicString *)&v598, (const re::DynamicString *)(v279 + 120));
      re::DynamicString::DynamicString((re::DynamicString *)&v600, (const re::DynamicString *)(v279 + 152));
      v280 = *(_OWORD *)(v279 + 184);
      v603 = *(_BYTE *)(v279 + 200);
      v602 = v280;
      generateJSONForFunctionVariant((uint64_t)&v689, (uint64_t *)&v593, (uint64_t)v716, (uint64_t)v519, 1);
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v708, (__int128 *)&v689, (uint64_t)v511);
      v262 = *((_QWORD *)&v602 + 1);
      v263 = *(__int128 **)(v528 + 744);
      if ((unint64_t)v263 <= *((_QWORD *)&v602 + 1))
        goto LABEL_1066;
      generateJSONForTileShader((uint64_t)v622, (uint64_t)&v596, (uint64_t)&v595[1], (uint64_t)v717, 1, *(unsigned __int8 *)(*(_QWORD *)(v528 + 760) + 176 * *((_QWORD *)&v602 + 1) + 128), *(_QWORD *)(v528 + 760) + 176 * *((_QWORD *)&v602 + 1) + 136, *(_DWORD *)(*(_QWORD *)(v528 + 760) + 176 * *((_QWORD *)&v602 + 1) + 132));
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v618, (__int128 *)v622, (uint64_t)v511);
      ++*(_DWORD *)(v528 + 852);
      if ((_QWORD)v600)
      {
        if ((BYTE8(v600) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v600 + 40))();
        v600 = 0u;
        v601 = 0u;
      }
      if ((_QWORD)v598)
      {
        if ((BYTE8(v598) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v598 + 40))();
        v598 = 0u;
        v599 = 0u;
      }
      if ((_QWORD)v596)
      {
        if ((BYTE8(v596) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v596 + 40))();
        v596 = 0u;
        v597 = 0u;
      }
      if (v595[1])
      {
        if ((v595[2] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v595[1] + 40))();
        memset(&v595[1], 0, 32);
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v593);
      if (*(_DWORD *)(v528 + 488) <= (v275 + 1))
        v281 = v275 + 1;
      else
        v281 = *(_DWORD *)(v528 + 488);
      while (1)
      {
        v278 = (v275 + 1);
        if (v281 - 1 == (_DWORD)v275)
          break;
        LODWORD(v275) = v275 + 1;
        v282 = v278;
        if ((*(_DWORD *)(*(_QWORD *)(v528 + 472) + 208 * v278) & 0x80000000) != 0)
          goto LABEL_691;
      }
      v282 = v281;
LABEL_691:
      LODWORD(v275) = v282;
    }
    while ((_DWORD)v533 != v282);
  }
  v593.__pn_.__r_.__value_.__r.__words[2] = 0x405000000000000;
  v593.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"tile_render_pipelines";
  v593.__pn_.__r_.__value_.__r.__words[0] = 21;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v712, (__int128 *)&v593, &v618, (uint64_t)v511);
  LODWORD(v581) = 0;
  v579 = 0u;
  v580 = 0u;
  *(_QWORD *)((char *)&v581 + 4) = 0x7FFFFFFFLL;
  v283 = *(_QWORD *)(v528 + 784);
  if (v283)
  {
    v284 = *(_QWORD *)(v528 + 800);
    v508 = v284 + 96 * v283;
    v263 = &v679;
    while (1)
    {
      re::DynamicArray<float>::DynamicArray((uint64_t)__dst, (uint64_t *)v284);
      v285 = (_anonymous_namespace_ *)re::DynamicArray<float>::DynamicArray((uint64_t)&__dst[2].n128_i64[1], (uint64_t *)(v284 + 40));
      v613 = *(_OWORD *)(v284 + 80);
      memset(&v593, 0, sizeof(v593));
      LODWORD(v594) = 0;
      memset(v595, 0, sizeof(v595));
      v286 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v595[1], 0);
      v596 = 0u;
      v597 = 0u;
      v287 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v596, 0);
      v598 = 0u;
      v599 = 0u;
      v288 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v598, 0);
      v600 = 0u;
      v601 = 0u;
      v289 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v600, 0);
      v603 = 0;
      memset(v622, 0, 28);
      memset(v623, 0, 40);
      v290 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v623[8], 0);
      memset(&v623[40], 0, 32);
      v291 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v623[40], 0);
      memset(&v623[72], 0, 32);
      v292 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v623[72], 0);
      memset(&v623[104], 0, 32);
      v293 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v623[104], 0);
      v294 = 0;
      LOBYTE(v624) = 0;
      LOBYTE(v602) = 1;
      v623[136] = 1;
      v262 = 21;
      do
      {
        memset(v678, 0, 32);
        v296 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v678, 0);
        v679 = 0uLL;
        *(_QWORD *)&v680 = 0;
        strcpy(&v678[32], "5");
        *(_WORD *)&v678[34] = v294;
        if (!*((_QWORD *)&v679 + 1))
        {
          *(_QWORD *)&v665 = 0;
          v692 = 0u;
          v693[0] = 0u;
          v690 = 0u;
          v691 = 0u;
          v689 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v673[0].n128_u32[0] = 136315906;
          *(unint64_t *)((char *)v673[0].n128_u64 + 4) = (unint64_t)"operator[]";
          v673[0].n128_u16[6] = 1024;
          *(unsigned __int32 *)((char *)&v673[0].n128_u32[3] + 2) = 468;
          v673[1].n128_u16[1] = 2048;
          *(unint64_t *)((char *)v673[1].n128_u64 + 4) = 0;
          v673[1].n128_u16[6] = 2048;
          *(unint64_t *)((char *)&v673[1].n128_u64[1] + 6) = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_1061;
        }
        *(_BYTE *)v680 = 0;
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)&v593, (re::DynamicString *)v678);
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v622, (re::DynamicString *)v678);
        if ((_QWORD)v679)
        {
          if (*((_QWORD *)&v679 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v679 + 40))();
            *((_QWORD *)&v679 + 1) = 0;
            *(_QWORD *)&v680 = 0;
          }
          *(_QWORD *)&v679 = 0;
        }
        v293 = *(_anonymous_namespace_ **)v678;
        if (*(_QWORD *)v678 && (v678[8] & 1) != 0)
          v293 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v678 + 40))();
        v294 = (v294 + 1);
      }
      while ((_DWORD)v294 != 96);
      if (__dst[1].n128_u64[0])
        break;
LABEL_711:
      v689.n128_u64[0] = (unint64_t)"vertexShaderClearAll";
      v689.n128_u64[1] = 20;
      re::DynamicString::operator=((re::DynamicString *)&v595[1], (uint64_t)&v689);
      v689.n128_u64[0] = (unint64_t)"fragmentShaderClearAll";
      v689.n128_u64[1] = 22;
      re::DynamicString::operator=((re::DynamicString *)&v623[8], (uint64_t)&v689);
      v577[0] = 0;
      v689.n128_u64[0] = v595[0];
      v689.n128_u64[1] = v593.__pn_.__r_.__value_.__r.__words[2];
      if ((v595[2] & 1) != 0)
        v301 = (const char *)v595[3];
      else
        v301 = (char *)&v595[2] + 1;
      v577[0] = re::generateFunctionVariantHash((uint64_t *)&v689, v301);
      v548[0] = 0;
      v689.n128_u64[0] = *(_QWORD *)v623;
      *(std::locale *)&v689.n128_i8[8] = v622[2];
      if ((v623[16] & 1) != 0)
        v302 = *(const char **)&v623[24];
      else
        v302 = &v623[17];
      v548[0] = re::generateFunctionVariantHash((uint64_t *)&v689, v302);
      if ((v595[2] & 1) != 0)
        v303 = (char *)v595[3];
      else
        v303 = (char *)&v595[2] + 1;
      re::DynamicString::format((re::DynamicString *)"%s_%zu", (re::DynamicString *)&v689, v303, v577[0]);
      re::DynamicString::operator=((re::DynamicString *)&v596, (re::DynamicString *)&v689);
      if (v689.n128_u64[0] && (v689.n128_u8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v689.n128_u64[0] + 40))();
      v304 = &v623[17];
      if ((v623[16] & 1) != 0)
        v304 = *(_BYTE **)&v623[24];
      re::DynamicString::format((re::DynamicString *)"%s_%zu", (re::DynamicString *)&v689, v304, v548[0]);
      re::DynamicString::operator=((re::DynamicString *)&v623[40], (re::DynamicString *)&v689);
      if (v689.n128_u64[0] && (v689.n128_u8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v689.n128_u64[0] + 40))();
      v689.n128_u64[0] = (unint64_t)"default.metallib";
      v689.n128_u64[1] = 16;
      re::DynamicString::operator=((re::DynamicString *)&v598, (uint64_t)&v689);
      v689.n128_u64[0] = (unint64_t)"default.metallib";
      v689.n128_u64[1] = 16;
      re::DynamicString::operator=((re::DynamicString *)&v623[72], (uint64_t)&v689);
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)&v579, v577))
      {
        generateJSONForFunctionVariant((uint64_t)&v689, (uint64_t *)&v593, (uint64_t)v716, (uint64_t)v519, 0);
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v708, (__int128 *)&v689, (uint64_t)v511);
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&v579, v577);
      }
      v520 = v284;
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)&v579, v548))
      {
        generateJSONForFunctionVariant((uint64_t)&v689, (uint64_t *)v622, (uint64_t)v716, (uint64_t)v519, 0);
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v708, (__int128 *)&v689, (uint64_t)v511);
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&v579, v548);
      }
      v513 = (int)v613;
      v514 = SDWORD2(v613);
      v516 = SHIDWORD(v613);
      v305 = v717;
      *(_QWORD *)&v615 = 0x3000000000000;
      v614 = 0uLL;
      v306 = (char *)&v596 + 9;
      if ((BYTE8(v596) & 1) != 0)
        v306 = (char *)v597;
      v307 = (char *)&v595[2] + 1;
      if ((v595[2] & 1) != 0)
        v307 = (char *)v595[3];
      re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)&v689, v306, v307);
      validateAlias((uint64_t)&v689);
      v658 = 0x150000000000;
      v657 = 0uLL;
      v518 = v689.n128_u8[8];
      v512 = v690;
      if ((v689.n128_u8[8] & 1) != 0)
        v308 = (const char *)v690;
      else
        v308 = &v689.n128_i8[9];
      v309 = strlen(v308);
      v310 = v309;
      if (v309 > 0x15)
      {
        v657.n128_u32[0] = v309;
        v311 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)v305, v309 + 1);
        v657.n128_u64[1] = (unint64_t)v311;
        v312 = 3077;
      }
      else
      {
        BYTE5(v658) = 21 - v309;
        v311 = &v657;
        v312 = 7173;
      }
      HIWORD(v658) = v312;
      memcpy(v311, v308, v310);
      v311->n128_u8[v310] = 0;
      v313 = &v623[49];
      if ((v623[48] & 1) != 0)
        v313 = *(_BYTE **)&v623[56];
      v314 = &v623[17];
      if ((v623[16] & 1) != 0)
        v314 = *(_BYTE **)&v623[24];
      re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)v678, v313, v314);
      validateAlias((uint64_t)v678);
      v650 = 0x150000000000;
      v649 = 0uLL;
      v315 = v678[8];
      v510 = *(_QWORD *)&v678[16];
      if ((v678[8] & 1) != 0)
        v316 = *(const char **)&v678[16];
      else
        v316 = &v678[9];
      v317 = strlen(v316);
      v318 = v317;
      if (v317 > 0x15)
      {
        v649.n128_u32[0] = v317;
        v319 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)v305, v317 + 1);
        v649.n128_u64[1] = (unint64_t)v319;
        v320 = 3077;
      }
      else
      {
        BYTE5(v650) = 21 - v317;
        v319 = &v649;
        v320 = 7173;
      }
      HIWORD(v650) = v320;
      memcpy(v319, v316, v318);
      v319->n128_u8[v318] = 0;
      v673[1].n128_u64[0] = 0x405000000000000;
      v673[0].n128_u64[1] = (unint64_t)"vertex_function";
      v673[0].n128_u64[0] = 15;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v614, (__int128 *)v673, &v657, (uint64_t)v305);
      v673[1].n128_u64[0] = 0x405000000000000;
      v673[0].n128_u64[1] = (unint64_t)"fragment_function";
      v673[0].n128_u64[0] = 17;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v614, (__int128 *)v673, &v649, (uint64_t)v305);
      v666 = 0x405000000000000;
      *((_QWORD *)&v665 + 1) = "max_vertex_amplification_count";
      *(_QWORD *)&v665 = 30;
      v673[1].n128_u64[0] = 0x1F6000000000000;
      v673[0] = (__n128)2uLL;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v614, &v665, v673, (uint64_t)v305);
      if ((_DWORD)v513 != 1)
      {
        v666 = 0x405000000000000;
        *((_QWORD *)&v665 + 1) = "raster_sample_count";
        *(_QWORD *)&v665 = 19;
        v673[1].n128_u64[0] = 0;
        v673[0] = (__n128)v513;
        if ((v513 & 0x80000000) != 0)
          v321 = 182;
        else
          v321 = 502;
        v673[1].n128_u16[3] = v321;
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v614, &v665, v673, (uint64_t)v305);
      }
      if ((_DWORD)v514)
      {
        v666 = 0x405000000000000;
        *((_QWORD *)&v665 + 1) = "depth_attachment_pixel_format";
        *(_QWORD *)&v665 = 29;
        v673[1].n128_u64[0] = 0;
        v673[0] = (__n128)v514;
        if ((v514 & 0x80000000) != 0)
          v322 = 182;
        else
          v322 = 502;
        v673[1].n128_u16[3] = v322;
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v614, &v665, v673, (uint64_t)v305);
      }
      if ((_DWORD)v516)
      {
        v666 = 0x405000000000000;
        *((_QWORD *)&v665 + 1) = "stencil_attachment_pixel_format";
        *(_QWORD *)&v665 = 31;
        v673[1].n128_u64[0] = 0;
        v673[0] = (__n128)v516;
        if ((v516 & 0x80000000) != 0)
          v323 = 182;
        else
          v323 = 502;
        v673[1].n128_u16[3] = v323;
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v614, &v665, v673, (uint64_t)v305);
      }
      v675.n128_u64[0] = 0x4000000000000;
      v674 = 0uLL;
      if (*((_QWORD *)&v611 + 1))
      {
        v324 = (int *)*((_QWORD *)&v612 + 1);
        v325 = 4 * *((_QWORD *)&v611 + 1);
        do
        {
          v326 = *v324;
          if ((_DWORD)v326)
          {
            v642.n128_u64[0] = 0x3000000000000;
            v641 = 0uLL;
            v666 = 0x405000000000000;
            *((_QWORD *)&v665 + 1) = "pixel_format";
            *(_QWORD *)&v665 = 12;
            v673[1].n128_u64[0] = 0;
            v673[0] = (__n128)v326;
            if ((v326 & 0x80000000) != 0)
              v327 = 182;
            else
              v327 = 502;
            v673[1].n128_u16[3] = v327;
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v641, &v665, v673, (uint64_t)v305);
            rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v674, (__int128 *)&v641, (uint64_t)v305);
          }
          ++v324;
          v325 -= 4;
        }
        while (v325);
      }
      v673[1].n128_u64[0] = 0x405000000000000;
      v673[0].n128_u64[1] = (unint64_t)"color_attachments";
      v673[0].n128_u64[0] = 17;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v614, (__int128 *)v673, &v674, (uint64_t)v305);
      v666 = 0x405000000000000;
      *((_QWORD *)&v665 + 1) = "input_primitive_topology";
      *(_QWORD *)&v665 = 24;
      v673[1].n128_u64[0] = 0x1F6000000000000;
      v673[0] = (__n128)3uLL;
      v328 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v614, &v665, v673, (uint64_t)v305);
      if ((v315 & 1) != 0 && *(_QWORD *)v678)
        (*(void (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)v678 + 40))(*(_QWORD *)v678, v510, v328);
      if ((v518 & 1) != 0 && v689.n128_u64[0])
        (*(void (**)(unint64_t, uint64_t, __n128))(*(_QWORD *)v689.n128_u64[0] + 40))(v689.n128_u64[0], v512, v328);
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v706, &v614, (uint64_t)v511);
      ++*(_DWORD *)(v528 + 860);
      if (*(_QWORD *)&v623[104])
      {
        if ((v623[112] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v623[104] + 40))();
        memset(&v623[104], 0, 32);
      }
      if (*(_QWORD *)&v623[72])
      {
        if ((v623[80] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v623[72] + 40))();
        memset(&v623[72], 0, 32);
      }
      if (*(_QWORD *)&v623[40])
      {
        if ((v623[48] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v623[40] + 40))();
        memset(&v623[40], 0, 32);
      }
      if (*(_QWORD *)&v623[8])
      {
        if ((v623[16] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v623[8] + 40))();
        memset(&v623[8], 0, 32);
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v622);
      if ((_QWORD)v600)
      {
        if ((BYTE8(v600) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v600 + 40))();
        v600 = 0u;
        v601 = 0u;
      }
      if ((_QWORD)v598)
      {
        if ((BYTE8(v598) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v598 + 40))();
        v598 = 0u;
        v599 = 0u;
      }
      if ((_QWORD)v596)
      {
        if ((BYTE8(v596) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v596 + 40))();
        v596 = 0u;
        v597 = 0u;
      }
      if (v595[1])
      {
        if ((v595[2] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v595[1] + 40))();
        memset(&v595[1], 0, 32);
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v593);
      if (__dst[2].n128_u64[1])
      {
        if (*((_QWORD *)&v612 + 1))
          (*(void (**)(void))(*(_QWORD *)__dst[2].n128_u64[1] + 40))();
        *((_QWORD *)&v612 + 1) = 0;
        v611 = 0uLL;
        __dst[2].n128_u64[1] = 0;
        LODWORD(v612) = v612 + 1;
      }
      if (__dst[0].n128_u64[0] && __dst[2].n128_u64[0])
        (*(void (**)(void))(*(_QWORD *)__dst[0].n128_u64[0] + 40))();
      v284 = v520 + 96;
      if (v520 + 96 == v508)
        goto LABEL_821;
    }
    v297 = (int *)__dst[2].n128_u64[0];
    v298 = 4 * __dst[1].n128_u64[0];
    while (1)
    {
      v294 = *v297;
      v295 = (std::locale::__imp *)v593.__pn_.__r_.__value_.__r.__words[2];
      if (v593.__pn_.__r_.__value_.__r.__words[2] <= v294)
        break;
      v299 = v595[0] + (v294 << 6);
      if (!*(_QWORD *)(v299 + 48))
        goto LABEL_1062;
      **(_BYTE **)(v299 + 56) = 1;
      v295 = v622[2].__locale_;
      if (v622[2].__locale_ <= (std::locale::__imp *)v294)
        goto LABEL_1063;
      v300 = *(_QWORD *)v623 + (v294 << 6);
      if (!*(_QWORD *)(v300 + 48))
        goto LABEL_1064;
      **(_BYTE **)(v300 + 56) = 1;
      ++v297;
      v298 -= 4;
      if (!v298)
        goto LABEL_711;
    }
LABEL_1061:
    v673[0].n128_u64[0] = 0;
    v692 = 0u;
    v693[0] = 0u;
    v690 = 0u;
    v691 = 0u;
    v689 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v678 = 136315906;
    *(_QWORD *)&v678[4] = "operator[]";
    *(_WORD *)&v678[12] = 1024;
    *(_DWORD *)&v678[14] = 789;
    *(_WORD *)&v678[18] = 2048;
    *(_QWORD *)&v678[20] = v294;
    *(_WORD *)&v678[28] = 2048;
    *(_QWORD *)&v678[30] = v295;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_1062:
    v673[0].n128_u64[0] = 0;
    v692 = 0u;
    v693[0] = 0u;
    v690 = 0u;
    v691 = 0u;
    v689 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v678 = 136315906;
    *(_QWORD *)&v678[4] = "operator[]";
    *(_WORD *)&v678[12] = 1024;
    *(_DWORD *)&v678[14] = 468;
    *(_WORD *)&v678[18] = 2048;
    *(_QWORD *)&v678[20] = 0;
    *(_WORD *)&v678[28] = 2048;
    *(_QWORD *)&v678[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_1063:
    v673[0].n128_u64[0] = 0;
    v692 = 0u;
    v693[0] = 0u;
    v690 = 0u;
    v691 = 0u;
    v689 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v678 = 136315906;
    *(_QWORD *)&v678[4] = "operator[]";
    *(_WORD *)&v678[12] = 1024;
    *(_DWORD *)&v678[14] = 789;
    *(_WORD *)&v678[18] = 2048;
    *(_QWORD *)&v678[20] = v294;
    *(_WORD *)&v678[28] = 2048;
    *(_QWORD *)&v678[30] = v295;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_1064:
    v673[0].n128_u64[0] = 0;
    v692 = 0u;
    v693[0] = 0u;
    v690 = 0u;
    v691 = 0u;
    v689 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v678 = 136315906;
    *(_QWORD *)&v678[4] = "operator[]";
    *(_WORD *)&v678[12] = 1024;
    *(_DWORD *)&v678[14] = 468;
    *(_WORD *)&v678[18] = 2048;
    *(_QWORD *)&v678[20] = 0;
    *(_WORD *)&v678[28] = 2048;
    *(_QWORD *)&v678[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_1065:
    *(_QWORD *)v678 = 0;
    memset(v623, 0, 48);
    memset(v622, 0, sizeof(v622));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    __dst[0].n128_u32[0] = 136315906;
    *(unint64_t *)((char *)__dst[0].n128_u64 + 4) = (unint64_t)"operator[]";
    __dst[0].n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&__dst[0].n128_u32[3] + 2) = 789;
    __dst[1].n128_u16[1] = 2048;
    *(unint64_t *)((char *)__dst[1].n128_u64 + 4) = v262;
    __dst[1].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&__dst[1].n128_u64[1] + 6) = (unint64_t)v263;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_1066:
    *(_QWORD *)v678 = 0;
    memset(v623, 0, 48);
    memset(v622, 0, sizeof(v622));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    __dst[0].n128_u32[0] = 136315906;
    *(unint64_t *)((char *)__dst[0].n128_u64 + 4) = (unint64_t)"operator[]";
    __dst[0].n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&__dst[0].n128_u32[3] + 2) = 789;
    __dst[1].n128_u16[1] = 2048;
    *(unint64_t *)((char *)__dst[1].n128_u64 + 4) = v262;
    __dst[1].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&__dst[1].n128_u64[1] + 6) = (unint64_t)v263;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_1067;
  }
LABEL_821:
  v593.__pn_.__r_.__value_.__r.__words[2] = 0x405000000000000;
  v593.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"render_pipelines";
  v593.__pn_.__r_.__value_.__r.__words[0] = 16;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v712, (__int128 *)&v593, &v706, (uint64_t)v511);
  v593.__pn_.__r_.__value_.__r.__words[2] = 0x405000000000000;
  v593.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"specialized_functions";
  v593.__pn_.__r_.__value_.__r.__words[0] = 21;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v714, (__int128 *)&v593, &v708, (uint64_t)v511);
  v593.__pn_.__r_.__value_.__r.__words[2] = 0x405000000000000;
  v593.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"libraries";
  v593.__pn_.__r_.__value_.__r.__words[0] = 9;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)v716, (__int128 *)&v593, &v714, (uint64_t)v511);
  v593.__pn_.__r_.__value_.__r.__words[2] = 0x405000000000000;
  v593.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)"pipelines";
  v593.__pn_.__r_.__value_.__r.__words[0] = 9;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)v716, (__int128 *)&v593, &v712, (uint64_t)v511);
  v329 = MEMORY[0x24BEDB840];
  v330 = MEMORY[0x24BEDB840] + 64;
  v331 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v332 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v604[0] = MEMORY[0x24BEDB840] + 64;
  v593.__pn_.__r_.__value_.__r.__words[0] = v331;
  *(std::string::size_type *)((char *)v593.__pn_.__r_.__value_.__r.__words + *(_QWORD *)(v331 - 24)) = v332;
  v333 = (std::ios_base *)((char *)&v593 + *(_QWORD *)(v593.__pn_.__r_.__value_.__r.__words[0] - 24));
  std::ios_base::init(v333, &v593.__pn_.__r_.__value_.__r.__words[1]);
  v333[1].__vftable = 0;
  v333[1].__fmtflags_ = -1;
  v593.__pn_.__r_.__value_.__r.__words[0] = v329 + 24;
  v604[0] = v330;
  MEMORY[0x227692FD4](&v593.__pn_.__r_.__value_.__r.__words[1]);
  p_size = &v593.__pn_.__r_.__value_.__l.__size_;
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)&v593 + *(_QWORD *)(v593.__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)v595 + *(_QWORD *)(v593.__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
  *(_QWORD *)&v665 = &v593;
  memset(&__dst[0].n128_i8[8], 0, 40);
  __dst[0].n128_u64[0] = (unint64_t)&v665;
  *(_QWORD *)&v611 = 512;
  DWORD2(v611) = 324;
  WORD6(v611) = 0x2000;
  *(_QWORD *)&v612 = 4;
  v94 = v528;
  if ((rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>((unsigned int *)v716, (uint64_t)__dst) & 1) == 0)
  {
LABEL_1067:
    re::internal::assertLog((re::internal *)4, v334, "assertion failure: '%s' (%s:line %i) ", "success", "serializeToURL", 1692);
    _os_crash();
    __break(1u);
  }
  v335 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"JSON written to ", 16);
  v336 = strlen(v500);
  v337 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v335, (uint64_t)v500, v336);
  v338 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v337, (uint64_t)" successfully 🥳", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v338 + *(_QWORD *)(*v338 - 24)));
  v339 = std::locale::use_facet(v622, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v339->__vftable[2].~facet_0)(v339, 10);
  std::locale::~locale(v622);
  std::ostream::put();
  v340 = (_anonymous_namespace_ *)std::ostream::flush();
  v534 = *(unsigned int *)(v528 + 96);
  v341 = 0;
  if ((_DWORD)v534)
  {
    v342 = (int *)(*(_QWORD *)(v528 + 80) + 8);
    while (1)
    {
      v343 = *v342;
      v342 += 14;
      if (v343 < 0)
        break;
      if (v534 == ++v341)
      {
        LODWORD(v341) = *(_DWORD *)(v528 + 96);
        break;
      }
    }
  }
  if ((_DWORD)v534 != (_DWORD)v341)
  {
    v344 = v341;
    do
    {
      v345 = *(_QWORD *)(v94 + 80);
      v346 = v345 + 56 * v344;
      v347 = objc_msgSend(*(id *)(v346 + 48), sel_functionConstantsDictionary, v498, v499);
      v689 = 0u;
      v690 = 0u;
      LODWORD(v691) = 0;
      *(_QWORD *)((char *)&v691 + 4) = 0x7FFFFFFFLL;
      v348 = objc_msgSend(v347, sel_keyEnumerator);
      v349 = objc_msgSend(v348, sel_nextObject);
      if (v349)
      {
        v350 = v349;
        do
        {
          v622[0].__locale_ = (std::locale::__imp *)objc_msgSend(v350, sel_UTF8String);
          *(_QWORD *)v678 = objc_msgSend(v347, sel_objectForKey_, v350);
          re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)&v689, (char **)v622, v678);
          if (*(_QWORD *)v678)

          v350 = objc_msgSend(v348, sel_nextObject);
        }
        while (v350);
      }
      if ((*(_BYTE *)(v345 + 56 * v344 + 24) & 1) != 0)
        v351 = *(const char **)(v345 + 56 * v344 + 32);
      else
        v351 = (const char *)(v346 + 25);
      v352 = strlen(v351);
      v353 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v351, v352);
      v354 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v353, (uint64_t)":", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v354 + *(_QWORD *)(*v354 - 24)));
      v355 = std::locale::use_facet(v622, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v355->__vftable[2].~facet_0)(v355, 10);
      std::locale::~locale(v622);
      std::ostream::put();
      v356 = (_anonymous_namespace_ *)std::ostream::flush();
      *(_QWORD *)&v678[32] = 0;
      memset(v678, 0, 28);
      v357 = v691;
      if ((_DWORD)v691)
      {
        v358 = 0;
        v359 = (int *)(v690 + 8);
        while (1)
        {
          v360 = *v359;
          v359 += 8;
          if (v360 < 0)
            break;
          if (v691 == ++v358)
          {
            LODWORD(v358) = v691;
            break;
          }
        }
      }
      else
      {
        LODWORD(v358) = 0;
      }
      if ((_DWORD)v691 == (_DWORD)v358)
      {
        v361 = 0;
        v362 = 0;
      }
      else
      {
        v363 = v358;
        v364 = v690;
        do
        {
          v365 = v364 + 32 * v363;
          memset(v622, 0, sizeof(v622));
          re::DynamicString::setCapacity(v622, 0);
          memset(&v623[8], 0, 24);
          v366 = strlen(*(const char **)(v365 + 16));
          v673[0].n128_u64[0] = *(_QWORD *)(v365 + 16);
          v673[0].n128_u64[1] = v366;
          re::DynamicString::operator=((re::DynamicString *)v622, (uint64_t)v673);
          *(_WORD *)&v623[2] = (unsigned __int16)objc_msgSend(*(id *)(v365 + 24), sel_index);
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v678, (re::DynamicString *)v622);
          if (*(_QWORD *)&v623[8])
          {
            if (*(_QWORD *)&v623[16])
            {
              (*(void (**)(void))(**(_QWORD **)&v623[8] + 40))();
              *(_QWORD *)&v623[16] = 0;
              *(_QWORD *)&v623[24] = 0;
            }
            *(_QWORD *)&v623[8] = 0;
          }
          v356 = v622[0].__locale_;
          if (v622[0].__locale_ && ((uint64_t)v622[1].__locale_ & 1) != 0)
            v356 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v622[0].__locale_ + 40))();
          v364 = v690;
          if (v691 <= (int)v358 + 1)
            v367 = v358 + 1;
          else
            v367 = v691;
          while (1)
          {
            v363 = (v358 + 1);
            if (v367 - 1 == (_DWORD)v358)
              break;
            LODWORD(v358) = v358 + 1;
            v368 = v363;
            if ((*(_DWORD *)(v690 + 32 * v363 + 8) & 0x80000000) != 0)
              goto LABEL_862;
          }
          v368 = v367;
LABEL_862:
          LODWORD(v358) = v368;
        }
        while (v357 != v368);
        v362 = *(_QWORD *)&v678[32];
        v361 = (unsigned __int16 *)(*(_QWORD *)&v678[32] + (*(_QWORD *)&v678[16] << 6));
        if (*(_QWORD *)&v678[16])
        {
          v369 = 126 - 2 * __clz(*(unint64_t *)&v678[16]);
          v370 = (_QWORD *)MEMORY[0x24BEDB318];
          v371 = (std::locale::id *)MEMORY[0x24BEDB350];
          goto LABEL_866;
        }
      }
      v370 = (_QWORD *)MEMORY[0x24BEDB318];
      v371 = (std::locale::id *)MEMORY[0x24BEDB350];
      v369 = 0;
LABEL_866:
      std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *,false>(v362, v361, v369, 1);
      if (*(_QWORD *)&v678[16])
      {
        v372 = *(_QWORD *)&v678[32];
        v373 = *(_QWORD *)&v678[32] + (*(_QWORD *)&v678[16] << 6);
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)v622, (const re::DynamicString *)v372);
          *(_DWORD *)v623 = *(_DWORD *)(v372 + 32);
          re::FixedArray<unsigned char>::FixedArray(&v623[8], (uint64_t *)(v372 + 40));
          v374 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v370, (uint64_t)"  ", 2);
          if (((uint64_t)v622[1].__locale_ & 1) != 0)
            v375 = v622[2].__locale_;
          else
            v375 = (std::locale::__imp *)((char *)&v622[1].__locale_ + 1);
          v376 = strlen((const char *)v375);
          v377 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v374, (uint64_t)v375, v376);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v377, (uint64_t)" ", 1);
          v378 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v378 + *(_QWORD *)(*v378 - 24)));
          v379 = std::locale::use_facet((const std::locale *)v673, v371);
          ((void (*)(const std::locale::facet *, uint64_t))v379->__vftable[2].~facet_0)(v379, 10);
          std::locale::~locale((std::locale *)v673);
          std::ostream::put();
          std::ostream::flush();
          if (*(_QWORD *)&v623[8])
          {
            if (*(_QWORD *)&v623[16])
            {
              (*(void (**)(void))(**(_QWORD **)&v623[8] + 40))();
              *(_QWORD *)&v623[16] = 0;
              *(_QWORD *)&v623[24] = 0;
            }
            *(_QWORD *)&v623[8] = 0;
          }
          if (v622[0].__locale_ && ((uint64_t)v622[1].__locale_ & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v622[0].__locale_ + 40))();
          v372 += 64;
        }
        while (v372 != v373);
      }
      if (!HIDWORD(v690))
      {
        v380 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v370, (uint64_t)"  no function constants", 23);
        std::ios_base::getloc((const std::ios_base *)((char *)v380 + *(_QWORD *)(*v380 - 24)));
        v381 = std::locale::use_facet(v622, v371);
        ((void (*)(const std::locale::facet *, uint64_t))v381->__vftable[2].~facet_0)(v381, 10);
        std::locale::~locale(v622);
        std::ostream::put();
        std::ostream::flush();
      }
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v678);
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v689);
      v94 = v528;
      v382 = *(_DWORD *)(v528 + 96);
      if (v382 <= (int)v341 + 1)
        v382 = v341 + 1;
      while (1)
      {
        v344 = (v341 + 1);
        if (v382 - 1 == (_DWORD)v341)
          break;
        LODWORD(v341) = v341 + 1;
        v383 = v344;
        if ((*(_DWORD *)(*(_QWORD *)(v528 + 80) + 56 * v344 + 8) & 0x80000000) != 0)
          goto LABEL_887;
      }
      v383 = v382;
LABEL_887:
      LODWORD(v341) = v383;
    }
    while ((_DWORD)v534 != v383);
  }
  v657.n128_u32[0] = 0;
  v649.n128_u32[0] = 0;
  LODWORD(v691) = 0;
  v689 = 0u;
  v690 = 0u;
  *(_QWORD *)((char *)&v691 + 4) = 0x7FFFFFFFLL;
  if (*v522)
  {
    if (*(_DWORD *)(v94 + 388) <= 3u)
      v384 = 3;
    else
      v384 = *(_DWORD *)(v94 + 388);
    re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)&v689, *v522, v384);
    v385 = DWORD2(v690);
    if (HIDWORD(v690))
    {
      if (DWORD2(v690))
        memset_pattern16((void *)v689.n128_u64[1], &unk_2260EB7B0, 4 * DWORD2(v690));
      v386 = v691;
      if ((_DWORD)v691)
      {
        v387 = v690;
        do
        {
          v340 = (_anonymous_namespace_ *)re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free(v387);
          v387 += 208;
          --v386;
        }
        while (v386);
      }
      *(_QWORD *)&v691 = 0x7FFFFFFF00000000;
      HIDWORD(v690) = 0;
      ++DWORD2(v691);
    }
    v388 = *(_DWORD *)(v94 + 388);
    if (v385 < v388)
      re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)&v689, v388);
    v389 = *(unsigned int *)(v94 + 392);
    if ((_DWORD)v389)
    {
      v390 = 0;
      for (i = 0; i < v389; ++i)
      {
        v392 = *(_QWORD *)(v94 + 376);
        if ((*(_DWORD *)(v392 + v390) & 0x80000000) != 0)
        {
          v393 = v392 + v390;
          v394 = *(_QWORD *)(v392 + v390 + 8);
          v395 = DWORD1(v691);
          v396 = v394 % DWORD2(v690);
          if (DWORD1(v691) == 0x7FFFFFFF)
          {
            v395 = v691;
            v397 = v691;
            if ((_DWORD)v691 == DWORD2(v690))
            {
              re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)&v689, 2 * HIDWORD(v690));
              v397 = v691;
              v396 = v394 % DWORD2(v690);
              v394 = *(_QWORD *)(v393 + 8);
            }
            LODWORD(v691) = v397 + 1;
            v398 = v690;
            v399 = *(_DWORD *)(v690 + 208 * v395);
          }
          else
          {
            v398 = v690;
            v399 = *(_DWORD *)(v690 + 208 * DWORD1(v691));
            DWORD1(v691) = v399 & 0x7FFFFFFF;
          }
          v400 = (uint64_t *)(v393 + 16);
          v401 = v398 + 208 * v395;
          *(_DWORD *)v401 = v399 | 0x80000000;
          *(_DWORD *)v401 = *(_DWORD *)(v689.n128_u64[1] + 4 * v396) | 0x80000000;
          *(_QWORD *)(v401 + 8) = v394;
          re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(v401 + 16, v400);
          v402 = v392 + v390;
          re::DynamicString::DynamicString((re::DynamicString *)(v401 + 56), (const re::DynamicString *)(v402 + 56));
          re::DynamicString::DynamicString((re::DynamicString *)(v401 + 88), (const re::DynamicString *)(v402 + 88));
          re::DynamicString::DynamicString((re::DynamicString *)(v401 + 120), (const re::DynamicString *)(v402 + 120));
          v340 = re::DynamicString::DynamicString((re::DynamicString *)(v401 + 152), (const re::DynamicString *)(v402 + 152));
          v403 = *(_OWORD *)(v402 + 184);
          *(_BYTE *)(v401 + 200) = *(_BYTE *)(v402 + 200);
          *(_OWORD *)(v401 + 184) = v403;
          *(_DWORD *)(v689.n128_u64[1] + 4 * v396) = v395;
          ++HIDWORD(v690);
          v94 = v528;
          v389 = *(unsigned int *)(v528 + 392);
        }
        v390 += 208;
      }
    }
  }
  v404 = *(unsigned int *)(v94 + 440);
  if (!(_DWORD)v404)
    goto LABEL_925;
  v405 = 0;
  v406 = *(int **)(v94 + 424);
  while (1)
  {
    v407 = *v406;
    v406 += 52;
    if (v407 < 0)
      break;
    if (v404 == ++v405)
    {
      LODWORD(v405) = *(_DWORD *)(v94 + 440);
      break;
    }
  }
LABEL_926:
  if ((_DWORD)v404 != (_DWORD)v405)
  {
    v412 = v405;
    do
    {
      v340 = (_anonymous_namespace_ *)re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addInternal<re::FunctionVariantDescriptor&>((uint64_t)&v689, (unint64_t *)(*(_QWORD *)(v94 + 424) + 208 * v412 + 8), *(_QWORD *)(v94 + 424) + 208 * v412 + 16);
      if (*(_DWORD *)(v94 + 440) <= (v405 + 1))
        v413 = v405 + 1;
      else
        v413 = *(_DWORD *)(v94 + 440);
      v414 = v405;
      while (1)
      {
        v412 = (v414 + 1);
        if (v413 - 1 == v414)
          break;
        ++v414;
        LODWORD(v405) = v412;
        if ((*(_DWORD *)(*(_QWORD *)(v94 + 424) + 208 * v412) & 0x80000000) != 0)
          goto LABEL_936;
      }
      LODWORD(v405) = v413;
LABEL_936:
      ;
    }
    while ((_DWORD)v404 != (_DWORD)v405);
  }
  v415 = *(unsigned int *)(v94 + 488);
  if ((_DWORD)v415)
  {
    v416 = 0;
    v417 = *(int **)(v94 + 472);
    while (1)
    {
      v418 = *v417;
      v417 += 52;
      if (v418 < 0)
        break;
      if (v415 == ++v416)
      {
        LODWORD(v416) = *(_DWORD *)(v94 + 488);
        break;
      }
    }
  }
  else
  {
    LODWORD(v416) = 0;
  }
  if ((_DWORD)v415 != (_DWORD)v416)
  {
    v419 = v416;
    do
    {
      v340 = (_anonymous_namespace_ *)re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addInternal<re::FunctionVariantDescriptor&>((uint64_t)&v689, (unint64_t *)(*(_QWORD *)(v94 + 472) + 208 * v419 + 8), *(_QWORD *)(v94 + 472) + 208 * v419 + 16);
      if (*(_DWORD *)(v94 + 488) <= (v416 + 1))
        v420 = v416 + 1;
      else
        v420 = *(_DWORD *)(v94 + 488);
      v421 = v416;
      while (1)
      {
        v419 = (v421 + 1);
        if (v420 - 1 == v421)
          break;
        ++v421;
        LODWORD(v416) = v419;
        if ((*(_DWORD *)(*(_QWORD *)(v94 + 472) + 208 * v419) & 0x80000000) != 0)
          goto LABEL_953;
      }
      LODWORD(v416) = v420;
LABEL_953:
      ;
    }
    while ((_DWORD)v415 != (_DWORD)v416);
  }
  v535 = v691;
  v422 = 0;
  if ((_DWORD)v691)
  {
    v423 = (int *)v690;
    while (1)
    {
      v424 = *v423;
      v423 += 52;
      if (v424 < 0)
        break;
      if (v691 == ++v422)
      {
        LODWORD(v422) = v691;
        break;
      }
    }
  }
  v425 = 0.0;
  if ((_DWORD)v691 != (_DWORD)v422)
  {
    v426 = v422;
    v427 = (_QWORD *)(v528 + 504);
    v526 = (re::DynamicString *)(v528 + 552);
    v428 = v690;
    while (1)
    {
      v429 = v428 + 208 * v426;
      re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)v622, (uint64_t *)(v429 + 16));
      re::DynamicString::DynamicString((re::DynamicString *)&v623[8], (const re::DynamicString *)(v429 + 56));
      re::DynamicString::DynamicString((re::DynamicString *)&v623[40], (const re::DynamicString *)(v429 + 88));
      re::DynamicString::DynamicString((re::DynamicString *)&v623[72], (const re::DynamicString *)(v429 + 120));
      re::DynamicString::DynamicString((re::DynamicString *)&v623[104], (const re::DynamicString *)(v429 + 152));
      v430 = *(_OWORD *)(v429 + 184);
      LOBYTE(v624) = *(_BYTE *)(v429 + 200);
      *(_OWORD *)&v623[136] = v430;
      if (!re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v427, (uint64_t)&v623[8]))
      {
        *(_DWORD *)v678 = 0;
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v427, (re::DynamicString *)&v623[8], v678);
        *(_DWORD *)v678 = 0;
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v526, (re::DynamicString *)&v623[8], v678);
      }
      v431 = (int)v622[2].__locale_;
      v432 = re::Hash<re::DynamicString>::operator()((uint64_t)v678, (uint64_t)&v623[8]);
      if (!*v427)
        break;
      v433 = *(unsigned int *)(*(_QWORD *)(v528 + 512) + 4 * (v432 % *(unsigned int *)(v528 + 528)));
      v434 = *(_QWORD *)(v528 + 520);
      if ((_DWORD)v433 == 0x7FFFFFFF)
        goto LABEL_969;
      while (!re::DynamicString::operator==(v434 + 56 * v433 + 16, (uint64_t)&v623[8]))
      {
        v433 = *(_DWORD *)(v434 + 56 * v433 + 8) & 0x7FFFFFFF;
        if (v433 == 0x7FFFFFFF)
          goto LABEL_969;
      }
LABEL_970:
      *(_DWORD *)(v434 + 56 * v433 + 48) += v431;
      v435 = re::Hash<re::DynamicString>::operator()((uint64_t)v678, (uint64_t)&v623[8]);
      if (*(_QWORD *)v526)
      {
        v436 = *(unsigned int *)(*(_QWORD *)(v528 + 560) + 4 * (v435 % *(unsigned int *)(v528 + 576)));
        v437 = *(_QWORD *)(v528 + 568);
        if ((_DWORD)v436 != 0x7FFFFFFF)
        {
          while (!re::DynamicString::operator==(v437 + 56 * v436 + 16, (uint64_t)&v623[8]))
          {
            v436 = *(_DWORD *)(v437 + 56 * v436 + 8) & 0x7FFFFFFF;
            if (v436 == 0x7FFFFFFF)
              goto LABEL_976;
          }
          goto LABEL_977;
        }
      }
      else
      {
        v437 = *(_QWORD *)(v528 + 568);
      }
LABEL_976:
      v436 = 0x7FFFFFFFLL;
LABEL_977:
      ++*(_DWORD *)(v437 + 56 * v436 + 48);
      v438 = v622[2].__locale_;
      v649.n128_u32[0] += LODWORD(v622[2].__locale_);
      ++v657.n128_u32[0];
      if (*(_QWORD *)&v623[104])
      {
        if ((v623[112] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v623[104] + 40))();
        memset(&v623[104], 0, 32);
      }
      if (*(_QWORD *)&v623[72])
      {
        if ((v623[80] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v623[72] + 40))();
        memset(&v623[72], 0, 32);
      }
      if (*(_QWORD *)&v623[40])
      {
        if ((v623[48] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v623[40] + 40))();
        memset(&v623[40], 0, 32);
      }
      if (*(_QWORD *)&v623[8])
      {
        if ((v623[16] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v623[8] + 40))();
        memset(&v623[8], 0, 32);
      }
      v425 = v425 + (float)(unint64_t)(5 * (_QWORD)v438 + 10);
      v340 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v622);
      v428 = v690;
      if (v691 <= (int)v422 + 1)
        v439 = v422 + 1;
      else
        v439 = v691;
      while (1)
      {
        v426 = (v422 + 1);
        if (v439 - 1 == (_DWORD)v422)
          break;
        LODWORD(v422) = v422 + 1;
        v440 = v426;
        if ((*(_DWORD *)(v690 + 208 * v426) & 0x80000000) != 0)
          goto LABEL_1000;
      }
      v440 = v439;
LABEL_1000:
      LODWORD(v422) = v440;
      if (v535 == v440)
        goto LABEL_1001;
    }
    v434 = *(_QWORD *)(v528 + 520);
LABEL_969:
    v433 = 0x7FFFFFFFLL;
    goto LABEL_970;
  }
LABEL_1001:
  v536 = (_QWORD *)(v528 + 552);
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<int &>(v528 + 552, (re::DynamicString *)v622, &v657);
  v441 = v622[0].__locale_;
  if (v622[0].__locale_ && ((uint64_t)v622[1].__locale_ & 1) != 0)
    v441 = (std::locale::__imp *)(*(uint64_t (**)(void))(*(_QWORD *)v622[0].__locale_ + 40))();
  v530 = (re::DynamicString *)(v528 + 504);
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<int &>(v528 + 504, (re::DynamicString *)v622, &v649);
  v442 = v622[0].__locale_;
  if (v622[0].__locale_ && ((uint64_t)v622[1].__locale_ & 1) != 0)
    v442 = (std::locale::__imp *)(*(uint64_t (**)(void))(*(_QWORD *)v622[0].__locale_ + 40))();
  v443 = *(unsigned int *)(v528 + 580);
  *(_QWORD *)v623 = 0;
  memset(&v622[1], 0, 20);
  re::DynamicArray<re::DynamicString>::setCapacity(v622, v443);
  ++LODWORD(v622[3].__locale_);
  v444 = *(unsigned int *)(v528 + 584);
  if ((_DWORD)v444)
  {
    v445 = 0;
    v446 = (int *)(*(_QWORD *)(v528 + 568) + 8);
    while (1)
    {
      v447 = *v446;
      v446 += 14;
      if (v447 < 0)
        break;
      if (v444 == ++v445)
      {
        LODWORD(v445) = *(_DWORD *)(v528 + 584);
        break;
      }
    }
  }
  else
  {
    LODWORD(v445) = 0;
  }
  if ((_DWORD)v444 == (_DWORD)v445)
  {
    v448 = 0;
  }
  else
  {
    LODWORD(v448) = 0;
    v449 = v445;
    do
    {
      v450 = *(_QWORD *)(v528 + 568) + 56 * v449;
      re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v622, (re::DynamicString *)(v450 + 16));
      v451 = *(_QWORD *)(v450 + 24);
      if ((v451 & 1) != 0)
        v452 = v451 >> 1;
      else
        v452 = v451 >> 1;
      if (v452 <= (int)v448)
        v448 = v448;
      else
        v448 = v452;
      if (*(_DWORD *)(v528 + 584) <= (v445 + 1))
        v453 = v445 + 1;
      else
        v453 = *(_DWORD *)(v528 + 584);
      v454 = v445;
      while (1)
      {
        v449 = (v454 + 1);
        if (v453 - 1 == v454)
          break;
        ++v454;
        LODWORD(v445) = v449;
        if ((*(_DWORD *)(*(_QWORD *)(v528 + 568) + 56 * v449 + 8) & 0x80000000) != 0)
          goto LABEL_1030;
      }
      LODWORD(v445) = v453;
LABEL_1030:
      ;
    }
    while ((_DWORD)v444 != (_DWORD)v445);
  }
  *(_QWORD *)v678 = v528;
  v455 = 126 - 2 * __clz((unint64_t)v622[2].__locale_);
  if (v622[2].__locale_)
    v456 = v455;
  else
    v456 = 0;
  std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,false>(*(uint64_t *)v623, *(_QWORD *)v623 + 32 * (uint64_t)v622[2].__locale_, (uint64_t *)v678, v456, 1);
  v457 = (_QWORD *)MEMORY[0x24BEDB318];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"json file: approx ", 18);
  v458 = (_QWORD *)std::ostream::operator<<();
  v459 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v458, (uint64_t)" lines.", 7);
  std::ios_base::getloc((const std::ios_base *)((char *)v459 + *(_QWORD *)(*v459 - 24)));
  v460 = (std::locale::id *)MEMORY[0x24BEDB350];
  v461 = std::locale::use_facet((const std::locale *)v678, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v461->__vftable[2].~facet_0)(v461, 10);
  std::locale::~locale((std::locale *)v678);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v457, (uint64_t)"custom clear pipelines: ", 24);
  v462 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v462 + *(_QWORD *)(*v462 - 24)));
  v463 = std::locale::use_facet((const std::locale *)v678, v460);
  ((void (*)(const std::locale::facet *, uint64_t))v463->__vftable[2].~facet_0)(v463, 10);
  std::locale::~locale((std::locale *)v678);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v457, (uint64_t)"tile pipelines: ", 16);
  v464 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v464 + *(_QWORD *)(*v464 - 24)));
  v465 = std::locale::use_facet((const std::locale *)v678, v460);
  ((void (*)(const std::locale::facet *, uint64_t))v465->__vftable[2].~facet_0)(v465, 10);
  std::locale::~locale((std::locale *)v678);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v457, (uint64_t)"compute pipelines: ", 19);
  v466 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v466 + *(_QWORD *)(*v466 - 24)));
  v467 = std::locale::use_facet((const std::locale *)v678, v460);
  ((void (*)(const std::locale::facet *, uint64_t))v467->__vftable[2].~facet_0)(v467, 10);
  std::locale::~locale((std::locale *)v678);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v457, (uint64_t)"render pipelines: ", 18);
  v468 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v468 + *(_QWORD *)(*v468 - 24)));
  v469 = std::locale::use_facet((const std::locale *)v678, v460);
  ((void (*)(const std::locale::facet *, uint64_t))v469->__vftable[2].~facet_0)(v469, 10);
  std::locale::~locale((std::locale *)v678);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v457, (uint64_t)"functions: ", 11);
  v470 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v470 + *(_QWORD *)(*v470 - 24)));
  v471 = std::locale::use_facet((const std::locale *)v678, v460);
  ((void (*)(const std::locale::facet *, uint64_t))v471->__vftable[2].~facet_0)(v471, 10);
  std::locale::~locale((std::locale *)v678);
  std::ostream::put();
  std::ostream::flush();
  if (v622[2].__locale_)
  {
    v472 = *(const re::DynamicString **)v623;
    v527 = (re::DynamicString *)(*(_QWORD *)v623 + 32 * (uint64_t)v622[2].__locale_);
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)v678, v472);
      v473 = re::Hash<re::DynamicString>::operator()((uint64_t)v673, (uint64_t)v678);
      if (*v536)
      {
        v474 = *(unsigned int *)(*(_QWORD *)(v528 + 560) + 4 * (v473 % *(unsigned int *)(v528 + 576)));
        v475 = *(_QWORD *)(v528 + 568);
        if ((_DWORD)v474 != 0x7FFFFFFF)
        {
          do
          {
            if (re::DynamicString::operator==(v475 + 56 * v474 + 16, (uint64_t)v678))
              break;
            v474 = *(_DWORD *)(v475 + 56 * v474 + 8) & 0x7FFFFFFF;
          }
          while (v474 != 0x7FFFFFFF);
        }
      }
      v476 = re::Hash<re::DynamicString>::operator()((uint64_t)v673, (uint64_t)v678);
      if (*(_QWORD *)v530)
      {
        v477 = *(unsigned int *)(*(_QWORD *)(v528 + 512) + 4 * (v476 % *(unsigned int *)(v528 + 528)));
        v478 = *(_QWORD *)(v528 + 520);
        if ((_DWORD)v477 != 0x7FFFFFFF)
        {
          do
          {
            if (re::DynamicString::operator==(v478 + 56 * v477 + 16, (uint64_t)v678))
              break;
            v477 = *(_DWORD *)(v478 + 56 * v477 + 8) & 0x7FFFFFFF;
          }
          while (v477 != 0x7FFFFFFF);
        }
      }
      v479 = (_QWORD *)MEMORY[0x24BEDB318];
      *(_QWORD *)(MEMORY[0x24BEDB318] + *(_QWORD *)(*MEMORY[0x24BEDB318] - 24) + 24) = v448;
      if ((v678[8] & 1) != 0)
        v480 = *(const char **)&v678[16];
      else
        v480 = &v678[9];
      v481 = strlen(v480);
      v482 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v479, (uint64_t)v480, v481);
      v483 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v482, (uint64_t)": ", 2);
      *(_QWORD *)((char *)v483 + *(_QWORD *)(*v483 - 24) + 24) = 5;
      v484 = re::Hash<re::DynamicString>::operator()((uint64_t)v673, (uint64_t)v678);
      if (*v536)
      {
        v485 = *(unsigned int *)(*(_QWORD *)(v528 + 560) + 4 * (v484 % *(unsigned int *)(v528 + 576)));
        v486 = *(_QWORD *)(v528 + 568);
        if ((_DWORD)v485 != 0x7FFFFFFF)
        {
          do
          {
            if (re::DynamicString::operator==(v486 + 56 * v485 + 16, (uint64_t)v678))
              break;
            v485 = *(_DWORD *)(v486 + 56 * v485 + 8) & 0x7FFFFFFF;
          }
          while (v485 != 0x7FFFFFFF);
        }
      }
      v487 = (_QWORD *)std::ostream::operator<<();
      v488 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v487, (uint64_t)" variants, ", 11);
      *(_QWORD *)((char *)v488 + *(_QWORD *)(*v488 - 24) + 24) = 6;
      v489 = re::Hash<re::DynamicString>::operator()((uint64_t)v673, (uint64_t)v678);
      if (*(_QWORD *)v530)
      {
        v490 = *(unsigned int *)(*(_QWORD *)(v528 + 512) + 4 * (v489 % *(unsigned int *)(v528 + 528)));
        v491 = *(_QWORD *)(v528 + 520);
        if ((_DWORD)v490 != 0x7FFFFFFF)
        {
          do
          {
            if (re::DynamicString::operator==(v491 + 56 * v490 + 16, (uint64_t)v678))
              break;
            v490 = *(_DWORD *)(v491 + 56 * v490 + 8) & 0x7FFFFFFF;
          }
          while (v490 != 0x7FFFFFFF);
        }
      }
      v492 = (_QWORD *)std::ostream::operator<<();
      v493 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v492, (uint64_t)" constants, ", 12);
      v494 = *v493;
      *(uint64_t *)((char *)v493 + *(_QWORD *)(*v493 - 24) + 24) = 8;
      *(uint64_t *)((char *)v493 + *(_QWORD *)(v494 - 24) + 16) = 4;
      *(_DWORD *)((char *)v493 + *(_QWORD *)(v494 - 24) + 8) = *(_DWORD *)((_BYTE *)v493 + *(_QWORD *)(v494 - 24) + 8) & 0xFFFFFEFB | 4;
      v495 = (_QWORD *)std::ostream::operator<<();
      v496 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v495, (uint64_t)"% of json", 9);
      std::ios_base::getloc((const std::ios_base *)((char *)v496 + *(_QWORD *)(*v496 - 24)));
      v497 = std::locale::use_facet((const std::locale *)v673, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v497->__vftable[2].~facet_0)(v497, 10);
      std::locale::~locale((std::locale *)v673);
      std::ostream::put();
      std::ostream::flush();
      if (*(_QWORD *)v678)
      {
        if ((v678[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)v678 + 40))();
      }
      v472 = (const re::DynamicString *)((char *)v472 + 32);
    }
    while (v472 != v527);
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v622);
  re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)&v689);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&__dst[0].n128_i64[1]);
  v593.__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
  *(std::string::size_type *)((char *)v593.__pn_.__r_.__value_.__r.__words
                            + *(_QWORD *)(v593.__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x227692FE0](p_size);
  std::ostream::~ostream();
  MEMORY[0x227693328](v604);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v579);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v563);
  return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v716);
}

uint64_t re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v2 == 0x7FFFFFFF)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v4 + 208 * v2 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v2) = *(_DWORD *)(v4 + 208 * v2) & 0x7FFFFFFF;
      if ((_DWORD)v2 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v4 + 208 * v2 + 8) == a2)
        return v4 + 208 * v2 + 16;
    }
    return 0;
  }
  return v4 + 208 * v2 + 16;
}

void re::PSOToolManager::serializeToURL(char const*)::$_0::operator()(_anonymous_namespace_ *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  unint64_t v12;
  _anonymous_namespace_ *v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t FunctionVariantHash;
  unint64_t v26;
  _BOOL8 v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[40];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52[5];
  _QWORD v53[4];
  unint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  int v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  unsigned int v61;
  uint64_t v62;
  _OWORD v63[4];
  _BYTE v64[328];
  _BYTE v65[48];
  _BYTE v66[288];
  __int128 v67;
  uint64_t v68;
  _QWORD v69[5];

  if (*(_DWORD *)(a3 + 28) | *(_DWORD *)(a4 + 28))
  {
    v68 = 0;
    memset(&v69[1], 0, 24);
    v67 = 0u;
    re::DynamicString::setCapacity(v69, 0);
    re::DynamicString::operator=((re::DynamicString *)v69, (re::DynamicString *)a2);
    re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v64);
    *(_QWORD *)&v40 = "pretendTechnique";
    *((_QWORD *)&v40 + 1) = 16;
    re::DynamicString::operator=((re::DynamicString *)v64, (uint64_t)&v40);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v65, a3);
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v66, a4);
    memset(v63, 0, sizeof(v63));
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
    v62 = 0x7FFFFFFFLL;
    re::PSOToolManager::gatherFunctionConstantsForShader((uint64_t)a1, (uint64_t)v64, v69, (uint64_t)v65, (uint64_t)v66, (_anonymous_namespace_ *)v63, (uint64_t)&v59);
    v12 = HIDWORD(v60);
    v58 = 0;
    v55[1] = 0;
    v56 = 0;
    v57 = 0;
    re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v55, v12);
    ++v57;
    v14 = v61;
    v15 = 0;
    if (v61)
    {
      v16 = (int *)(v60 + 8);
      while (1)
      {
        v17 = *v16;
        v16 += 28;
        if (v17 < 0)
          break;
        if (v61 == ++v15)
        {
          LODWORD(v15) = v61;
          break;
        }
      }
    }
    if (v61 != (_DWORD)v15)
    {
      v18 = v15;
      v19 = v60;
      do
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v55, (re::DynamicString *)(v19 + 112 * v18 + 48));
        v19 = v60;
        if (v61 <= (int)v15 + 1)
          v20 = v15 + 1;
        else
          v20 = v61;
        v21 = v15;
        while (1)
        {
          v18 = (v21 + 1);
          if (v20 - 1 == v21)
            break;
          ++v21;
          LODWORD(v15) = v18;
          if ((*(_DWORD *)(v60 + 112 * v18 + 8) & 0x80000000) != 0)
            goto LABEL_17;
        }
        LODWORD(v15) = v20;
LABEL_17:
        ;
      }
      while (v14 != (_DWORD)v15);
    }
    memset(v42, 0, 32);
    v40 = 0u;
    v41 = 0u;
    re::FunctionConstantsEnumerator::createEnumerator((uint64_t *)v63, 0, 0, (uint64_t)v55, &v40, (uint64_t)v53);
    re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)&v40);
    if (v54)
    {
      v22 = 0;
      v23 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a6 ^ (a6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a6 ^ (a6 >> 30))) >> 27));
      v35 = (v23 ^ (v23 >> 31)) - 0x61C8864680B583E9;
      do
      {
        re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)v53, v22, v58, v56, (uint64_t)v52);
        *(_QWORD *)&v40 = v52[4];
        *((_QWORD *)&v40 + 1) = v52[2];
        if ((*((_QWORD *)a2 + 1) & 1) != 0)
          v24 = (const char *)*((_QWORD *)a2 + 2);
        else
          v24 = a2 + 9;
        FunctionVariantHash = re::generateFunctionVariantHash((uint64_t *)&v40, v24);
        v26 = FunctionVariantHash;
        if (a7)
          v26 = (v35 + (FunctionVariantHash << 6) + (FunctionVariantHash >> 2)) ^ FunctionVariantHash;
        v51 = v26;
        v27 = re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(a5, v26);
        if (v27)
          goto LABEL_56;
        v40 = 0uLL;
        DWORD2(v41) = 0;
        *(_QWORD *)&v41 = 0;
        memset(v42, 0, sizeof(v42));
        v28 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v42[8], 0);
        v43 = 0u;
        v44 = 0u;
        v29 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v43, 0);
        v45 = 0u;
        v46 = 0u;
        v30 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v45, 0);
        v47 = 0u;
        v48 = 0u;
        re::DynamicString::setCapacity(&v47, 0);
        v50 = 0;
        re::DynamicString::operator=((re::DynamicString *)&v42[8], (re::DynamicString *)a2);
        re::DynamicArray<re::TechniqueFunctionConstant>::operator=((uint64_t)&v40, v52);
        v31 = &v42[17];
        if ((v42[16] & 1) != 0)
          v31 = *(_BYTE **)&v42[24];
        re::DynamicString::format((re::DynamicString *)"%s_%zu", (re::DynamicString *)&v38, v31, v26);
        re::DynamicString::operator=((re::DynamicString *)&v43, (re::DynamicString *)&v38);
        if (v38 && (v39 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v38 = "default.metallib";
        v39 = 16;
        re::DynamicString::operator=((re::DynamicString *)&v45, (uint64_t)&v38);
        v49 = a6;
        if (*(_QWORD *)a5)
        {
          v32 = v26 % *(unsigned int *)(a5 + 24);
          v33 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v32);
          if ((_DWORD)v33 != 0x7FFFFFFF)
          {
            v34 = *(_QWORD *)(a5 + 16);
            while (*(_QWORD *)(v34 + 208 * v33 + 8) != v26)
            {
              LODWORD(v33) = *(_DWORD *)(v34 + 208 * v33) & 0x7FFFFFFF;
              if ((_DWORD)v33 == 0x7FFFFFFF)
                goto LABEL_38;
            }
            goto LABEL_39;
          }
        }
        else
        {
          LODWORD(v32) = 0;
        }
LABEL_38:
        re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::FunctionVariantDescriptor&>(a5, v32, v26, &v51, (uint64_t)&v40);
        ++*(_DWORD *)(a5 + 40);
LABEL_39:
        if ((_QWORD)v47)
        {
          if ((BYTE8(v47) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v47 + 40))();
          v47 = 0u;
          v48 = 0u;
        }
        if ((_QWORD)v45)
        {
          if ((BYTE8(v45) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v45 + 40))();
          v45 = 0u;
          v46 = 0u;
        }
        if ((_QWORD)v43)
        {
          if ((BYTE8(v43) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v43 + 40))();
          v43 = 0u;
          v44 = 0u;
        }
        if (*(_QWORD *)&v42[8])
        {
          if ((v42[16] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v42[8] + 40))();
          memset(&v42[8], 0, 32);
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v40);
LABEL_56:
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v52);
        ++v22;
      }
      while (v54 > v22);
    }
    re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v53);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v55);
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v59);
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v63);
    re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v64);
    if (v69[0])
    {
      if ((v69[1] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v69[0] + 40))();
      memset(v69, 0, 32);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v67);
  }
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(unsigned int *a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x24BDAC8D0];
  v4 = *((_WORD *)a1 + 11);
  switch(v4 & 7)
  {
    case 0:
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      std::ostream::put();
      std::ostream::put();
      std::ostream::put();
      std::ostream::put();
      goto LABEL_3;
    case 1:
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Bool(a2, 0);
      return 1;
    case 2:
      v8 = 1;
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Bool(a2, 1);
      return v8;
    case 3:
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      v9 = *(_QWORD *)(a2 + 32);
      if (*(_QWORD *)(a2 + 40) - v9 <= 15)
      {
        rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((uint64_t *)(a2 + 8));
        v9 = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 32) = v9 + 16;
      *(_QWORD *)v9 = 0;
      *(_BYTE *)(v9 + 8) = 0;
      std::ostream::put();
      if (!*a1)
        goto LABEL_23;
      v10 = *((_QWORD *)a1 + 1) + 24;
      while (1)
      {
        v11 = (*(_WORD *)(v10 - 2) & 0x1000) != 0 ? v10 - 24 : *(_QWORD *)(v10 - 16);
        v12 = (*(_WORD *)(v10 - 2) & 0x1000) != 0 ? 21 - *(char *)(v10 - 3) : *(_DWORD *)(v10 - 24);
        rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, v11, v12);
        if ((rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v10, a2) & 1) == 0)return 0;
        v13 = v10 + 24;
        v10 += 48;
        if (v13 == *((_QWORD *)a1 + 1) + 48 * *a1)
        {
LABEL_23:
          v14 = *(_QWORD *)(a2 + 32);
          v15 = *(_QWORD *)(v14 - 16);
          *(_QWORD *)(a2 + 32) = v14 - 16;
          if (v15)
          {
            std::ostream::put();
            rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent(a2);
          }
          goto LABEL_35;
        }
      }
    case 4:
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      v16 = *(_QWORD *)(a2 + 32);
      if (*(_QWORD *)(a2 + 40) - v16 <= 15)
      {
        rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((uint64_t *)(a2 + 8));
        v16 = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 32) = v16 + 16;
      *(_QWORD *)v16 = 0;
      *(_BYTE *)(v16 + 8) = 1;
      std::ostream::put();
      if (!*a1)
        goto LABEL_32;
      v17 = *((_QWORD *)a1 + 1);
      break;
    case 5:
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v20 = (uint64_t)a1;
      else
        v20 = *((_QWORD *)a1 + 1);
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
        v21 = 21 - *((char *)a1 + 21);
      else
        v21 = *a1;
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, v20, v21);
      return 1;
    default:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        v22 = *(double *)a1;
        rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
        v8 = (*(_QWORD *)&v22 & 0x7FF0000000000000) != 0x7FF0000000000000;
        if ((*(_QWORD *)&v22 & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          v23 = rapidjson::internal::dtoa((rapidjson::internal *)&v33, v22, (char *)*(unsigned int *)(a2 + 56));
          if (&v33 != v23)
          {
            v24 = v23;
            v25 = &v33;
            do
            {
              ++v25;
              std::ostream::put();
            }
            while (v25 != v24);
          }
        }
        if (*(_QWORD *)(a2 + 32) == *(_QWORD *)(a2 + 24))
          std::ostream::flush();
        return v8;
      }
      if ((v4 & 0x20) == 0)
      {
        if ((v4 & 0x40) != 0)
        {
          rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(a2, (rapidjson::internal *)*a1);
        }
        else
        {
          v7 = *(_QWORD *)a1;
          if ((v4 & 0x80) != 0)
            rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(a2, v7);
          else
            rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(a2, v7);
        }
        return 1;
      }
      v27 = *a1;
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      if ((v27 & 0x80000000) != 0)
      {
        v29 = (char *)v34;
        v33 = 45;
        v27 = -(int)v27;
      }
      else
      {
        v29 = &v33;
      }
      v30 = rapidjson::internal::u32toa((rapidjson::internal *)v27, v29, v28);
      if (&v33 != v30)
      {
        v31 = v30;
        v32 = &v33;
        do
        {
          ++v32;
          std::ostream::put();
        }
        while (v32 != v31);
      }
      goto LABEL_3;
  }
  do
  {
    if ((rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v17, a2) & 1) == 0)return 0;
    v17 += 24;
  }
  while (v17 != *((_QWORD *)a1 + 1) + 24 * *a1);
LABEL_32:
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(v18 - 16);
  *(_QWORD *)(a2 + 32) = v18 - 16;
  if (v19 && (*(_BYTE *)(a2 + 68) & 1) == 0)
  {
    std::ostream::put();
    rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent(a2);
  }
LABEL_35:
  std::ostream::put();
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 == v6)
  {
    std::ostream::flush();
LABEL_3:
    v6 = *(_QWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 32);
  }
  if (v5 == v6)
    std::ostream::flush();
  return 1;
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<int &>(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v12, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2);
    if ((result & 1) != 0)
      return result;
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::DynamicArray<re::PSOToolComputeDescriptor>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4;
  re::DynamicString *v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PSOToolComputeDescriptor>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (re::DynamicString *)(*((_QWORD *)this + 4) + 136 * v4);
  re::DynamicString::DynamicString(v5, a2);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v5 + 32, (uint64_t)a2 + 32);
  result = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v5 + 80, (uint64_t)a2 + 80);
  *((_BYTE *)v5 + 128) = *((_BYTE *)a2 + 128);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::PSOToolTileDescriptor>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4;
  re::DynamicString *v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PSOToolTileDescriptor>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (re::DynamicString *)(*((_QWORD *)this + 4) + 176 * v4);
  re::DynamicString::DynamicString(v5, a2);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v5 + 32, (uint64_t)a2 + 32);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v5 + 80, (uint64_t)a2 + 80);
  *((_QWORD *)v5 + 16) = *((_QWORD *)a2 + 16);
  result = re::DynamicArray<re::ShaderAPIFlags::Values>::DynamicArray((uint64_t)v5 + 136, (uint64_t *)a2 + 17);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::PSOToolCustomClearDescriptor>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 *v5;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PSOToolCustomClearDescriptor>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (__n128 *)(*((_QWORD *)this + 4) + 96 * v4);
  re::DynamicArray<float>::DynamicArray((uint64_t)v5, (uint64_t *)a2);
  re::DynamicArray<float>::DynamicArray((uint64_t)&v5[2].n128_i64[1], &a2[2].n128_i64[1]);
  result = a2[5];
  v5[5] = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::MaterialFile::MaterialFile(uint64_t a1, uint64_t a2)
{
  re::DynamicString *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;

  v4 = re::DynamicString::DynamicString((re::DynamicString *)a1, (const re::DynamicString *)a2);
  re::AssetHandle::AssetHandle((re::DynamicString *)((char *)v4 + 32), (const re::AssetHandle *)(a2 + 32));
  re::MaterialParameterData::MaterialParameterData(a1 + 56, a2 + 56);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a1 + 296, a2 + 296);
  v5 = *(unsigned __int8 *)(a2 + 344);
  *(_BYTE *)(a1 + 344) = v5;
  if (v5)
    *(_BYTE *)(a1 + 345) = *(_BYTE *)(a2 + 345);
  v6 = *(unsigned __int8 *)(a2 + 346);
  *(_BYTE *)(a1 + 346) = v6;
  if (v6)
    *(_BYTE *)(a1 + 347) = *(_BYTE *)(a2 + 347);
  v7 = *(unsigned __int8 *)(a2 + 348);
  *(_BYTE *)(a1 + 348) = v7;
  if (v7)
    *(_BYTE *)(a1 + 349) = *(_BYTE *)(a2 + 349);
  v8 = *(unsigned __int8 *)(a2 + 350);
  *(_BYTE *)(a1 + 350) = v8;
  if (v8)
    *(_BYTE *)(a1 + 351) = *(_BYTE *)(a2 + 351);
  v9 = *(unsigned __int8 *)(a2 + 352);
  *(_BYTE *)(a1 + 352) = v9;
  if (v9)
    *(_BYTE *)(a1 + 353) = *(_BYTE *)(a2 + 353);
  v10 = *(unsigned __int8 *)(a2 + 354);
  *(_BYTE *)(a1 + 354) = v10;
  if (v10)
    *(_BYTE *)(a1 + 355) = *(_BYTE *)(a2 + 355);
  v11 = *(unsigned __int8 *)(a2 + 356);
  *(_BYTE *)(a1 + 356) = v11;
  if (v11)
    *(_BYTE *)(a1 + 357) = *(_BYTE *)(a2 + 357);
  v12 = *(unsigned __int8 *)(a2 + 358);
  *(_BYTE *)(a1 + 358) = v12;
  if (v12)
    *(_BYTE *)(a1 + 359) = *(_BYTE *)(a2 + 359);
  v13 = *(unsigned __int8 *)(a2 + 360);
  *(_BYTE *)(a1 + 360) = v13;
  if (v13)
    *(_BYTE *)(a1 + 361) = *(_BYTE *)(a2 + 361);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  v14 = *(_QWORD *)(a2 + 368);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 368) = v14;
    re::DynamicArray<re::FunctionLink>::setCapacity((_QWORD *)(a1 + 368), v15);
    ++*(_DWORD *)(a1 + 392);
    re::DynamicArray<re::FunctionLink>::copy((_QWORD *)(a1 + 368), a2 + 368);
  }
  return a1;
}

uint64_t re::MaterialParameterData::MaterialParameterData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  signed int v7;
  uint64_t v8;
  signed int v9;
  uint64_t v10;
  signed int v11;

  v4 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a1, a2);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v4 + 48, a2 + 48);
  v5 = 0uLL;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 132) = 0x7FFFFFFFLL;
  if (v6)
  {
    if (*(_DWORD *)(a2 + 124) <= 3u)
      v7 = 3;
    else
      v7 = *(_DWORD *)(a2 + 124);
    re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1 + 96, v6, v7);
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1 + 96, a2 + 96);
    v5 = 0uLL;
  }
  *(_OWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = v5;
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 180) = 0x7FFFFFFFLL;
  if (v8)
  {
    if (*(_DWORD *)(a2 + 172) <= 3u)
      v9 = 3;
    else
      v9 = *(_DWORD *)(a2 + 172);
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1 + 144, v8, v9);
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1 + 144, a2 + 144);
  }
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  v10 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 228) = 0x7FFFFFFFLL;
  if (v10)
  {
    if (*(_DWORD *)(a2 + 220) <= 3u)
      v11 = 3;
    else
      v11 = *(_DWORD *)(a2 + 220);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1 + 192, v10, v11);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1 + 192, a2 + 192);
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 84) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 132) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v4 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v4;
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = v5;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 180) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  v6 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v6;
  v7 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 168) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a2 + 172) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 180);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = v7;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 228) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v8 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = v8;
  v9 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a2 + 216) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 220);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a2 + 220) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 224);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a2 + 228) = v9;
  return a1;
}

re::MaterialDefinitionFile *re::MaterialDefinitionFile::MaterialDefinitionFile(re::MaterialDefinitionFile *this, const re::MaterialDefinitionFile *a2)
{
  re::DynamicString *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  unint64_t v14;

  v4 = re::DynamicString::DynamicString(this, a2);
  re::DynamicString::DynamicString((re::DynamicString *)((char *)v4 + 32), (const re::MaterialDefinitionFile *)((char *)a2 + 32));
  re::DynamicString::DynamicString((re::MaterialDefinitionFile *)((char *)this + 64), (const re::MaterialDefinitionFile *)((char *)a2 + 64));
  re::AssetHandle::AssetHandle((re::MaterialDefinitionFile *)((char *)this + 96), (const re::MaterialDefinitionFile *)((char *)a2 + 96));
  re::AssetHandle::AssetHandle((re::MaterialDefinitionFile *)((char *)this + 120), (const re::MaterialDefinitionFile *)((char *)a2 + 120));
  re::MaterialParameterData::MaterialParameterData((uint64_t)this + 144, (uint64_t)a2 + 144);
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_DWORD *)this + 102) = 0;
  v5 = *((_QWORD *)a2 + 48);
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 50);
    *((_QWORD *)this + 48) = v5;
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity((_QWORD *)this + 48, v6);
    ++*((_DWORD *)this + 102);
    re::DynamicArray<re::MaterialTechniqueData>::copy((_QWORD *)this + 48, (uint64_t)a2 + 384);
  }
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 112) = 0;
  v7 = *((_QWORD *)a2 + 53);
  if (v7)
  {
    v8 = *((_QWORD *)a2 + 55);
    *((_QWORD *)this + 53) = v7;
    re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((_QWORD *)this + 53, v8);
    ++*((_DWORD *)this + 112);
    re::DynamicArray<re::MaterialTechniqueGroupData>::copy((uint64_t)this + 424, (uint64_t)a2 + 424);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 464, (uint64_t)a2 + 464);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 512, (uint64_t)a2 + 512);
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_DWORD *)this + 146) = 0;
  v9 = *((_QWORD *)a2 + 70);
  if (v9)
  {
    v10 = *((_QWORD *)a2 + 72);
    *((_QWORD *)this + 70) = v9;
    re::DynamicArray<re::DebugMapping>::setCapacity((_QWORD *)this + 70, v10);
    ++*((_DWORD *)this + 146);
    re::DynamicArray<re::DebugMapping>::copy((uint64_t)this + 560, (uint64_t)a2 + 560);
  }
  *((_QWORD *)this + 79) = 0x7FFFFFFF00000000;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_DWORD *)this + 160) = 0;
  v11 = *((_QWORD *)a2 + 75);
  if (v11)
  {
    if (*((_DWORD *)a2 + 157) <= 3u)
      v12 = 3;
    else
      v12 = *((_DWORD *)a2 + 157);
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)this + 600, v11, v12);
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy((uint64_t)this + 600, (uint64_t)a2 + 600);
  }
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_DWORD *)this + 168) = 0;
  v13 = *((_QWORD *)a2 + 81);
  if (v13)
  {
    v14 = *((_QWORD *)a2 + 83);
    *((_QWORD *)this + 81) = v13;
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((_QWORD *)this + 81, v14);
    ++*((_DWORD *)this + 168);
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::copy((uint64_t)this + 648, (uint64_t)a2 + 648);
  }
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 688, (uint64_t)a2 + 688);
  return this;
}

re::MaterialTechniqueData *re::DynamicArray<re::MaterialTechniqueData>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  re::MaterialTechniqueData *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const re::MaterialTechniqueData *v11;
  uint64_t v12;
  re::MaterialTechniqueData *v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = (re::MaterialTechniqueData *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueData *,re::MaterialTechniqueData *,re::MaterialTechniqueData *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 664 * a1[2], a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = 664 * v9;
      v11 = (const re::MaterialTechniqueData *)(*(_QWORD *)(a2 + 32) + v10);
      result = (re::MaterialTechniqueData *)(a1[4] + v10);
      v12 = 664 * v4 - v10;
      do
      {
        v13 = re::MaterialTechniqueData::MaterialTechniqueData(result, v11);
        v11 = (const re::MaterialTechniqueData *)((char *)v11 + 664);
        result = (re::MaterialTechniqueData *)((char *)v13 + 664);
        v12 -= 664;
      }
      while (v12);
    }
  }
  else
  {
    result = (re::MaterialTechniqueData *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueData *,re::MaterialTechniqueData *,re::MaterialTechniqueData *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 664 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      result = (re::MaterialTechniqueData *)(a1[4] + 664 * v4);
      v7 = 664 * v6 - 664 * v4;
      do
      {
        re::MaterialTechniqueData::~MaterialTechniqueData(result);
        result = (re::MaterialTechniqueData *)(v8 + 664);
        v7 -= 664;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueData *,re::MaterialTechniqueData *,re::MaterialTechniqueData *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::MaterialTechniqueData::operator=(a3, v4);
      v4 += 664;
      a3 += 664;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::MaterialTechniqueGroupData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  re::DynamicString *v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *>((int)&v15, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 72 * *(_QWORD *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = 9 * v9;
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 8 * v10);
      v12 = (re::DynamicString *)(*(_QWORD *)(a1 + 32) + 8 * v10);
      v13 = 72 * v4 - 8 * v10;
      do
      {
        re::DynamicString::DynamicString(v12, (const re::DynamicString *)v11);
        result = re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v12 + 32, v11 + 4);
        v11 += 9;
        v12 = (re::DynamicString *)((char *)v12 + 72);
        v13 -= 72;
      }
      while (v13);
    }
  }
  else
  {
    result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *>((int)&v14, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 72 * v4), *(re::DynamicString **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = *(_QWORD *)(a1 + 32) + 72 * v4;
      v8 = 72 * v6 - 72 * v4;
      do
      {
        re::MaterialTechniqueGroupData::deinit((re::MaterialTechniqueGroupData *)v7);
        re::DynamicArray<re::DynamicString>::deinit(v7 + 32);
        result = *(_QWORD *)v7;
        if (*(_QWORD *)v7)
        {
          if ((*(_BYTE *)(v7 + 8) & 1) != 0)
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v7 + 16));
          *(_OWORD *)v7 = 0u;
          *(_OWORD *)(v7 + 16) = 0u;
        }
        v7 += 72;
        v8 -= 72;
      }
      while (v8);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  uint64_t *v5;

  v5 = (uint64_t *)a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, (re::DynamicString *)v5);
      re::DynamicArray<re::DynamicString>::operator=((uint64_t)this + 32, v5 + 4);
      v5 += 9;
      this = (re::DynamicString *)((char *)this + 72);
    }
    while (v5 != (uint64_t *)a3);
    return (uint64_t *)a3;
  }
  return v5;
}

uint64_t re::DynamicArray<re::DebugMapping>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  double v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const re::DynamicString *v12;
  re::DynamicString *v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::DebugMapping>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DebugMapping *,re::DebugMapping *,re::DebugMapping *>((int)&v16, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 80 * *(_QWORD *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 != v4)
    {
      v11 = 5 * v10;
      v12 = (const re::DynamicString *)(*(_QWORD *)(a2 + 32) + 16 * v11);
      v13 = (re::DynamicString *)(*(_QWORD *)(a1 + 32) + 16 * v11);
      v14 = 80 * v4 - 16 * v11;
      do
      {
        re::DynamicString::DynamicString(v13, v12);
        result = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v13 + 32, (uint64_t)v12 + 32);
        v12 = (const re::DynamicString *)((char *)v12 + 80);
        v13 = (re::DynamicString *)((char *)v13 + 80);
        v14 -= 80;
      }
      while (v14);
    }
  }
  else
  {
    result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DebugMapping *,re::DebugMapping *,re::DebugMapping *>((int)&v15, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 80 * v4), *(re::DynamicString **)(a1 + 32));
    v7 = *(_QWORD *)(a1 + 16);
    if (v4 != v7)
    {
      v8 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 80 * v4 + 32);
      v9 = 80 * v7 - 80 * v4;
      do
      {
        v6 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v8, v6);
        result = *(v8 - 4);
        if (result)
        {
          if ((*(_BYTE *)(v8 - 3) & 1) != 0)
            result = (*(uint64_t (**)(uint64_t, _QWORD, double))(*(_QWORD *)result + 40))(result, *(v8 - 2), v6);
          v6 = 0.0;
          *((_OWORD *)v8 - 2) = 0u;
          *((_OWORD *)v8 - 1) = 0u;
        }
        v8 += 10;
        v9 -= 80;
      }
      while (v9);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DebugMapping *,re::DebugMapping *,re::DebugMapping *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  re::DynamicString *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, v5);
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)this + 32, (uint64_t)v5 + 32);
      v5 = (re::DynamicString *)((char *)v5 + 80);
      this = (re::DynamicString *)((char *)this + 80);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (unsigned __int8 *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 96;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, unsigned __int8 *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + 8) = v12 | 0x80000000;
  v13 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = v14 + 96 * v9;
  v16 = *a5;
  *(_BYTE *)(v15 + 48) = v16;
  v17 = v15 + 48;
  if (v16)
    re::DynamicString::DynamicString((re::DynamicString *)(v17 + 8), (const re::DynamicString *)(a5 + 8));
  v18 = a5[40];
  *(_BYTE *)(v14 + 96 * v9 + 88) = v18;
  if (v18)
    *(_BYTE *)(v14 + 96 * v9 + 89) = a5[41];
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t *re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const re::MaterialTechniqueQualityLevelSetData *v11;
  uint64_t v12;
  re::MaterialTechniqueQualityLevelSetData *v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 104 * *(_QWORD *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = 104 * v9;
      v11 = (const re::MaterialTechniqueQualityLevelSetData *)(*(_QWORD *)(a2 + 32) + v10);
      result = (uint64_t *)(*(_QWORD *)(a1 + 32) + v10);
      v12 = 104 * v4 - v10;
      do
      {
        v13 = re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)result, v11);
        v11 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v11 + 104);
        result = (uint64_t *)((char *)v13 + 104);
        v12 -= 104;
      }
      while (v12);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 104 * v4), *(re::DynamicString **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      result = (uint64_t *)(*(_QWORD *)(a1 + 32) + 104 * v4);
      v7 = 104 * v6 - 104 * v4;
      do
      {
        re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)result);
        result = (uint64_t *)(v8 + 104);
        v7 -= 104;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,0>(uint64_t *a1, uint64_t *a2, re::DynamicString *a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::MaterialTechniqueQualityLevelSetData::operator=(a3, v4);
      v4 += 13;
      a3 = (re::DynamicString *)((char *)a3 + 104);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

re::DynamicString *re::MaterialTechniqueQualityLevelSetData::operator=(re::DynamicString *a1, uint64_t *a2)
{
  re::DynamicString *v4;

  v4 = re::DynamicString::operator=(a1, (re::DynamicString *)a2);
  re::DynamicString::operator=((re::DynamicString *)((char *)v4 + 32), (re::DynamicString *)(a2 + 4));
  re::DynamicArray<re::DynamicString>::operator=((uint64_t)a1 + 64, a2 + 8);
  return a1;
}

uint64_t re::FixedArray<re::VertexBufferFormat>::copy(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(result + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
    {
      v3 = 0;
      v4 = *(_QWORD *)(a2 + 16);
      v5 = *(_QWORD *)(result + 16);
      v6 = 16 * v2;
      do
      {
        v7 = v5 + v3;
        v8 = v4 + v3;
        v9 = *(_DWORD *)(v4 + v3);
        *(_WORD *)(v7 + 4) = *(_WORD *)(v4 + v3 + 4);
        *(_DWORD *)v7 = v9;
        if (v4 != v5)
        {
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
          *(_BYTE *)(v7 + 12) = *(_BYTE *)(v8 + 12);
        }
        v3 += 16;
      }
      while (v6 != v3);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::DynamicArray<re::BufferView>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicArray<re::RigNodeChannel>::copy((void **)a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RigNodeChannel>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 48);
      }
      else
      {
        re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::clear(a1);
      }
    }
    else if (v4)
    {
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::init(a1, v4, *(_QWORD *)(a2 + 8));
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::FixedArray<unsigned long>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::FixedArray<unsigned long>>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::FixedArray<unsigned char>>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::FixedArray<unsigned long>>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[5];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 40);
  if (v4 >= *(_QWORD *)(a1 + 40))
  {
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity((uint64_t *)a1, (v4 + 7) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(a2, 0, a2, *(_QWORD *)(a1 + 40), a1, 0, (uint64_t *)v13);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = v4 - v7;
    if (v4 != v7)
    {
      v9 = 0;
      do
      {
        v10 = v9 + *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(a1 + 8) <= v10 >> 3)
        {
          memset(v13, 0, sizeof(v13));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v11 = a1 + 24;
        if ((*(_BYTE *)(a1 + 16) & 1) == 0)
          v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(v11 + 8 * (v10 >> 3));
        *(_QWORD *)(v12 + 8 * (v10 & 7)) = *(id *)re::BucketArray<re::ecs2::System *,8ul>::operator[](a2, v10);
        ++v9;
      }
      while (v8 != v9);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(a2, 0, a2, *(_QWORD *)(a2 + 40), a1, 0, (uint64_t *)v13);
    if (v4 != *(_QWORD *)(a1 + 40))
    {
      v5 = v4;
      do
      {
        v6 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, v5);
        if (*v6)
        {

          *v6 = 0;
        }
        ++v5;
      }
      while (v5 != *(_QWORD *)(a1 + 40));
    }
  }
  *(_QWORD *)(a1 + 40) = v4;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void **v16;

  if (a1 != a3 || a2 != a4)
  {
    v13 = a4 - 1;
    do
    {
      do
      {
        v14 = a2;
        v15 = (void **)re::BucketArray<re::ecs2::System *,8ul>::operator[](a1, a2);
        v16 = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a5, a6);
        NS::SharedPtr<MTL::Texture>::operator=(v16, v15);
        a2 = v14 + 1;
        ++a6;
      }
      while (a1 != a3);
    }
    while (v13 != v14);
    a2 = a4;
  }
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a5;
  a7[3] = a6;
}

_QWORD *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  _QWORD v14[2];
  uint64_t i;

  result = re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(a1);
  v14[0] = a2;
  v5 = a2[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a2;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        return result;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    for (i = v10; i != -1; v10 = i)
    {
      v11 = *(_QWORD *)(v14[0] + 8) + 16 * v10;
      v12 = *(_QWORD *)v11;
      v13[0] = *(_BYTE *)(v11 + 8);
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(a1, &v12, v13);
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

uint64_t *re::DynamicArray<re::FixedArray<unsigned long>>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 24 * *(_QWORD *)(a1 + 16), *(uint64_t **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = 3 * v9;
      v11 = *(_QWORD *)(a2 + 32) + 8 * v10;
      result = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v10);
      v12 = 24 * v4 - 8 * v10;
      do
      {
        v13 = re::FixedArray<unsigned long>::FixedArray(result, v11);
        v11 += 24;
        result = v13 + 3;
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    result = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 24 * v4, *(uint64_t **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = 24 * v6 - 24 * v4;
      v8 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 24 * v4 + 8);
      do
      {
        result = (uint64_t *)*(v8 - 1);
        if (result)
        {
          if (*v8)
          {
            result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*result + 40))(result, v8[1]);
            *v8 = 0;
            v8[1] = 0;
          }
          *(v8 - 1) = 0;
        }
        v8 += 3;
        v7 -= 24;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::FixedArray<unsigned long>::operator=(a3, v4);
      v4 += 24;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::TechniqueFunctionConstant>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::TechniqueFunctionConstant>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addInternal<re::FunctionVariantDescriptor&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  __int128 v30;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_24;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_24:
    result = re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::FunctionVariantDescriptor&>(a1, v7, v6, a2, a3);
    goto LABEL_25;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 208 * v8 + 8) != v6)
  {
    v10 = *(_DWORD *)(v9 + 208 * v8);
    v8 = v10 & 0x7FFFFFFF;
    if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
      goto LABEL_24;
  }
  v11 = v9 + 208 * v8;
  v14 = *(_QWORD *)(v11 + 152);
  v13 = (_OWORD *)(v11 + 152);
  v12 = v14;
  if (v14)
  {
    if ((*(_BYTE *)(v9 + 208 * v8 + 160) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v9 + 208 * v8 + 168));
    *v13 = 0u;
    v13[1] = 0u;
  }
  v15 = v9 + 208 * v8;
  v18 = *(_QWORD *)(v15 + 120);
  v17 = (_OWORD *)(v15 + 120);
  v16 = v18;
  if (v18)
  {
    if ((*(_BYTE *)(v9 + 208 * v8 + 128) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 40))(v16, *(_QWORD *)(v9 + 208 * v8 + 136));
    *v17 = 0u;
    v17[1] = 0u;
  }
  v19 = (uint64_t)v13 - 136;
  v20 = v9 + 208 * v8;
  v23 = *(_QWORD *)(v20 + 88);
  v22 = (_OWORD *)(v20 + 88);
  v21 = v23;
  if (v23)
  {
    if ((*(_BYTE *)(v9 + 208 * v8 + 96) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 40))(v21, *(_QWORD *)(v9 + 208 * v8 + 104));
    *v22 = 0u;
    v22[1] = 0u;
  }
  v24 = v9 + 208 * v8;
  v27 = *(_QWORD *)(v24 + 56);
  v26 = (_OWORD *)(v24 + 56);
  v25 = v27;
  if (v27)
  {
    if ((*(_BYTE *)(v9 + 208 * v8 + 64) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 40))(v25, *(_QWORD *)(v9 + 208 * v8 + 72));
    *v26 = 0u;
    v26[1] = 0u;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit(v19);
  v28 = *(_QWORD *)(a1 + 16) + 208 * v8;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(v28 + 16, (uint64_t *)a3);
  re::DynamicString::DynamicString((re::DynamicString *)(v28 + 56), (const re::DynamicString *)(a3 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)(v28 + 88), (const re::DynamicString *)(a3 + 72));
  re::DynamicString::DynamicString((re::DynamicString *)(v28 + 120), (const re::DynamicString *)(a3 + 104));
  result = (uint64_t)re::DynamicString::DynamicString((re::DynamicString *)(v28 + 152), (const re::DynamicString *)(a3 + 136));
  v30 = *(_OWORD *)(a3 + 168);
  *(_BYTE *)(v28 + 200) = *(_BYTE *)(a3 + 184);
  *(_OWORD *)(v28 + 184) = v30;
LABEL_25:
  ++*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::FunctionVariantDescriptor&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 208 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 208 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 208 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + v14;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(v15 + 16, (uint64_t *)a5);
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 56), (const re::DynamicString *)(a5 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 88), (const re::DynamicString *)(a5 + 72));
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 120), (const re::DynamicString *)(a5 + 104));
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 152), (const re::DynamicString *)(a5 + 136));
  v16 = *(_OWORD *)(a5 + 168);
  *(_BYTE *)(v15 + 200) = *(_BYTE *)(a5 + 184);
  *(_OWORD *)(v15 + 184) = v16;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  signed int v38;
  _BYTE v39[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v39, 0, 36);
      *(_QWORD *)&v39[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v39, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v39;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v39[8];
      *(_OWORD *)v39 = v5;
      *(_QWORD *)&v39[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v39[24];
      *(_OWORD *)&v39[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v39[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7;
        v13 = DWORD1(v9);
        v14 = 184;
        do
        {
          v15 = *(_QWORD *)&v39[16];
          v16 = *(_QWORD *)&v39[16] + v14;
          if ((*(_DWORD *)(*(_QWORD *)&v39[16] + v14 - 184) & 0x80000000) != 0)
          {
            v17 = *(_QWORD *)(v16 - 176);
            v18 = *(unsigned int *)(a1 + 24);
            v19 = v17 % v18;
            v20 = *(_DWORD *)(a1 + 36);
            if (v20 == 0x7FFFFFFF)
            {
              v20 = *(_DWORD *)(a1 + 32);
              v21 = v20;
              if (v20 == (_DWORD)v18)
              {
                re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v13));
                v19 = v17 % *(unsigned int *)(a1 + 24);
                v21 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
                v17 = *(_QWORD *)(v16 - 176);
              }
              *(_DWORD *)(a1 + 32) = v21 + 1;
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 208 * v20);
            }
            else
            {
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 208 * v20);
              *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
            }
            v24 = 208 * v20;
            *(_DWORD *)(v22 + v24) = v23 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v24) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v24) & 0x80000000 | *(_DWORD *)(v12 + 4 * v19);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + v24 + 8) = v17;
            v25 = *(_QWORD *)(a1 + 16) + v24;
            *(_QWORD *)(v25 + 48) = 0;
            *(_DWORD *)(v25 + 40) = 0;
            *(_QWORD *)(v25 + 24) = 0;
            *(_QWORD *)(v25 + 32) = 0;
            *(_QWORD *)(v25 + 16) = 0;
            *(_QWORD *)(v25 + 16) = *(_QWORD *)(v16 - 168);
            *(_QWORD *)(v16 - 168) = 0;
            v26 = v15 + v14;
            *(_QWORD *)(v25 + 24) = *(_QWORD *)(v15 + v14 - 160);
            *(_QWORD *)(v26 - 160) = 0;
            v27 = *(_QWORD *)(v25 + 32);
            *(_QWORD *)(v25 + 32) = *(_QWORD *)(v15 + v14 - 152);
            *(_QWORD *)(v26 - 152) = v27;
            v28 = *(_QWORD *)(v25 + 48);
            *(_QWORD *)(v25 + 48) = *(_QWORD *)(v15 + v14 - 136);
            *(_QWORD *)(v26 - 136) = v28;
            *(_DWORD *)(v26 - 144) = *(_DWORD *)(v15 + v14 - 144) + 1;
            ++*(_DWORD *)(v25 + 40);
            *(_OWORD *)(v25 + 56) = 0u;
            *(_OWORD *)(v25 + 72) = 0u;
            *(_QWORD *)(v25 + 56) = *(_QWORD *)(v15 + v14 - 128);
            *(_QWORD *)(v26 - 128) = 0;
            v29 = *(_QWORD *)(v25 + 72);
            *(_QWORD *)(v25 + 72) = *(_QWORD *)(v15 + v14 - 112);
            *(_QWORD *)(v26 - 112) = v29;
            *(_QWORD *)(v25 + 80) = *(_QWORD *)(v15 + v14 - 104);
            *(_QWORD *)(v26 - 104) = 0;
            v30 = *(_QWORD *)(v25 + 64);
            *(_QWORD *)(v25 + 64) = *(_QWORD *)(v15 + v14 - 120);
            *(_QWORD *)(v26 - 120) = v30;
            *(_OWORD *)(v25 + 104) = 0u;
            *(_OWORD *)(v25 + 88) = 0u;
            *(_QWORD *)(v25 + 88) = *(_QWORD *)(v15 + v14 - 96);
            *(_QWORD *)(v26 - 96) = 0;
            v31 = *(_QWORD *)(v25 + 104);
            *(_QWORD *)(v25 + 104) = *(_QWORD *)(v15 + v14 - 80);
            *(_QWORD *)(v26 - 80) = v31;
            *(_QWORD *)(v25 + 112) = *(_QWORD *)(v15 + v14 - 72);
            *(_QWORD *)(v26 - 72) = 0;
            v32 = *(_QWORD *)(v25 + 96);
            *(_QWORD *)(v25 + 96) = *(_QWORD *)(v15 + v14 - 88);
            *(_QWORD *)(v26 - 88) = v32;
            *(_OWORD *)(v25 + 136) = 0u;
            *(_OWORD *)(v25 + 120) = 0u;
            *(_QWORD *)(v25 + 120) = *(_QWORD *)(v15 + v14 - 64);
            *(_QWORD *)(v26 - 64) = 0;
            v33 = *(_QWORD *)(v25 + 136);
            *(_QWORD *)(v25 + 136) = *(_QWORD *)(v15 + v14 - 48);
            *(_QWORD *)(v26 - 48) = v33;
            *(_QWORD *)(v25 + 144) = *(_QWORD *)(v15 + v14 - 40);
            *(_QWORD *)(v26 - 40) = 0;
            v34 = *(_QWORD *)(v25 + 128);
            *(_QWORD *)(v25 + 128) = *(_QWORD *)(v15 + v14 - 56);
            *(_QWORD *)(v26 - 56) = v34;
            *(_OWORD *)(v25 + 168) = 0u;
            *(_OWORD *)(v25 + 152) = 0u;
            *(_QWORD *)(v25 + 152) = *(_QWORD *)(v15 + v14 - 32);
            *(_QWORD *)(v26 - 32) = 0;
            v35 = *(_QWORD *)(v25 + 168);
            *(_QWORD *)(v25 + 168) = *(_QWORD *)(v15 + v14 - 16);
            *(_QWORD *)(v26 - 16) = v35;
            *(_QWORD *)(v25 + 176) = *(_QWORD *)(v15 + v14 - 8);
            *(_QWORD *)(v26 - 8) = 0;
            v36 = *(_QWORD *)(v25 + 160);
            *(_QWORD *)(v25 + 160) = *(_QWORD *)(v15 + v14 - 24);
            *(_QWORD *)(v26 - 24) = v36;
            v37 = *(_OWORD *)(v15 + v14);
            *(_BYTE *)(v25 + 200) = *(_BYTE *)(v15 + v14 + 16);
            *(_OWORD *)(v25 + 184) = v37;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v19) = v20;
            v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            v10 = *(_DWORD *)&v39[32];
          }
          ++v11;
          v14 += 208;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v39);
    }
  }
  else
  {
    if (a2)
      v38 = a2;
    else
      v38 = 3;
  }
}

void re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 208 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(uint64_t a1)
{
  uint64_t result;

  free(*(void **)(a1 + 16));
  result = *(_QWORD *)(a1 + 8);
  if (result)
    JUMPOUT(0x2276933B8);
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  const re::DynamicString *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  signed int v49;
  _BYTE v50[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v50, 0, 36);
      *(_QWORD *)&v50[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v50, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v50;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v50[8];
      *(_OWORD *)v50 = v5;
      *(_QWORD *)&v50[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v50[24];
      *(_OWORD *)&v50[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v50[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7;
        v13 = DWORD1(v9);
        v14 = 736;
        do
        {
          v15 = *(_QWORD *)&v50[16];
          v16 = *(_QWORD *)&v50[16] + v14;
          if ((*(_DWORD *)(*(_QWORD *)&v50[16] + v14 - 728) & 0x80000000) != 0)
          {
            v17 = *(_QWORD *)(v16 - 736);
            v18 = *(unsigned int *)(a1 + 24);
            v19 = v17 % v18;
            v20 = *(_DWORD *)(a1 + 36);
            if (v20 == 0x7FFFFFFF)
            {
              v20 = *(_DWORD *)(a1 + 32);
              v21 = v20;
              if (v20 == (_DWORD)v18)
              {
                re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v13));
                v19 = v17 % *(unsigned int *)(a1 + 24);
                v21 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v21 + 1;
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 784 * v20 + 8);
            }
            else
            {
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 784 * v20 + 8);
              *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
            }
            v24 = (const re::DynamicString *)(v16 - 720);
            v25 = (_QWORD *)(v16 - 688);
            *(_DWORD *)(v22 + 784 * v20 + 8) = v23 | 0x80000000;
            v26 = *(_QWORD *)(a1 + 16) + 784 * v20;
            *(_DWORD *)(v26 + 8) = *(_DWORD *)(v26 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v19);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 784 * v20) = v17;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 784 * v20 + 16), v24);
            v27 = *(_QWORD *)(a1 + 16) + 784 * v20;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_QWORD *)(v27 + 48) = *v25;
            *v25 = 0;
            v28 = (uint64_t *)(v15 + v14);
            v29 = *(_QWORD *)(v27 + 64);
            *(_QWORD *)(v27 + 64) = *(v28 - 84);
            *(v28 - 84) = v29;
            *(_QWORD *)(v27 + 72) = *(v28 - 83);
            *(v28 - 83) = 0;
            v30 = *(_QWORD *)(v27 + 56);
            *(_QWORD *)(v27 + 56) = *(v28 - 85);
            *(v28 - 85) = v30;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_QWORD *)(v27 + 80) = *(v28 - 82);
            *(v28 - 82) = 0;
            v31 = *(_QWORD *)(v27 + 96);
            *(_QWORD *)(v27 + 96) = *(v28 - 80);
            *(v28 - 80) = v31;
            *(_QWORD *)(v27 + 104) = *(v28 - 79);
            *(v28 - 79) = 0;
            v32 = *(_QWORD *)(v27 + 88);
            *(_QWORD *)(v27 + 88) = *(v28 - 81);
            *(v28 - 81) = v32;
            *(_OWORD *)(v27 + 112) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(_QWORD *)(v27 + 112) = *(v28 - 78);
            *(v28 - 78) = 0;
            v33 = *(_QWORD *)(v27 + 128);
            *(_QWORD *)(v27 + 128) = *(v28 - 76);
            *(v28 - 76) = v33;
            *(_QWORD *)(v27 + 136) = *(v28 - 75);
            *(v28 - 75) = 0;
            v34 = *(_QWORD *)(v27 + 120);
            *(_QWORD *)(v27 + 120) = *(v28 - 77);
            *(v28 - 77) = v34;
            *(_QWORD *)(v27 + 144) = 0;
            *(_QWORD *)(v27 + 152) = 0;
            *(_QWORD *)(v27 + 160) = 0;
            *(_QWORD *)(v27 + 152) = *(v28 - 73);
            *(v28 - 73) = 0;
            v35 = *(_QWORD *)(v27 + 144);
            *(_QWORD *)(v27 + 144) = 0;
            *(_QWORD *)(v27 + 144) = *(v28 - 74);
            *(v28 - 74) = v35;
            v36 = *(_QWORD *)(v27 + 160);
            *(_QWORD *)(v27 + 160) = *(v28 - 72);
            *(v28 - 72) = v36;
            *(_QWORD *)(v27 + 168) = 0;
            *(_QWORD *)(v27 + 176) = 0;
            *(_QWORD *)(v27 + 184) = 0;
            *(_QWORD *)(v27 + 176) = *(v28 - 70);
            *(v28 - 70) = 0;
            v37 = *(_QWORD *)(v27 + 168);
            *(_QWORD *)(v27 + 168) = 0;
            *(_QWORD *)(v27 + 168) = *(v28 - 71);
            *(v28 - 71) = v37;
            v38 = *(_QWORD *)(v27 + 184);
            *(_QWORD *)(v27 + 184) = *(v28 - 69);
            *(v28 - 69) = v38;
            re::MaterialParameterData::MaterialParameterData(v27 + 192, (uint64_t)(v28 - 68));
            *(_QWORD *)(v27 + 464) = 0;
            *(_DWORD *)(v27 + 456) = 0;
            *(_QWORD *)(v27 + 440) = 0;
            *(_QWORD *)(v27 + 448) = 0;
            *(_QWORD *)(v27 + 432) = 0;
            *(_QWORD *)(v27 + 432) = *(v28 - 38);
            *(v28 - 38) = 0;
            *(_QWORD *)(v27 + 440) = *(v28 - 37);
            *(v28 - 37) = 0;
            v39 = *(_QWORD *)(v27 + 448);
            *(_QWORD *)(v27 + 448) = *(v28 - 36);
            *(v28 - 36) = v39;
            v40 = *(_QWORD *)(v27 + 464);
            *(_QWORD *)(v27 + 464) = *(v28 - 34);
            *(v28 - 34) = v40;
            ++*((_DWORD *)v28 - 70);
            ++*(_DWORD *)(v27 + 456);
            *(_QWORD *)(v27 + 504) = 0;
            *(_QWORD *)(v27 + 480) = 0;
            *(_QWORD *)(v27 + 488) = 0;
            *(_QWORD *)(v27 + 472) = 0;
            *(_DWORD *)(v27 + 496) = 0;
            *(_QWORD *)(v27 + 472) = *(v28 - 33);
            *(v28 - 33) = 0;
            *(_QWORD *)(v27 + 480) = *(v28 - 32);
            *(v28 - 32) = 0;
            v41 = *(_QWORD *)(v27 + 488);
            *(_QWORD *)(v27 + 488) = *(v28 - 31);
            *(v28 - 31) = v41;
            v42 = *(_QWORD *)(v27 + 504);
            *(_QWORD *)(v27 + 504) = *(v28 - 29);
            *(v28 - 29) = v42;
            ++*((_DWORD *)v28 - 60);
            ++*(_DWORD *)(v27 + 496);
            *(_OWORD *)(v27 + 512) = 0u;
            *(_OWORD *)(v27 + 528) = 0u;
            *(_DWORD *)(v27 + 544) = 0;
            *(_QWORD *)(v27 + 548) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v27 + 512), v28 - 28);
            *(_DWORD *)(v27 + 592) = 0;
            *(_OWORD *)(v27 + 560) = 0u;
            *(_OWORD *)(v27 + 576) = 0u;
            *(_QWORD *)(v27 + 596) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v27 + 560), v28 - 22);
            *(_QWORD *)(v27 + 640) = 0;
            *(_DWORD *)(v27 + 632) = 0;
            *(_QWORD *)(v27 + 624) = 0;
            *(_QWORD *)(v27 + 616) = 0;
            *(_QWORD *)(v27 + 608) = 0;
            *(_QWORD *)(v27 + 608) = *(v28 - 16);
            *(v28 - 16) = 0;
            *(_QWORD *)(v27 + 616) = *(v28 - 15);
            *(v28 - 15) = 0;
            v43 = *(_QWORD *)(v27 + 624);
            *(_QWORD *)(v27 + 624) = *(v28 - 14);
            *(v28 - 14) = v43;
            v44 = *(_QWORD *)(v27 + 640);
            *(_QWORD *)(v27 + 640) = *(v28 - 12);
            *(v28 - 12) = v44;
            ++*((_DWORD *)v28 - 26);
            ++*(_DWORD *)(v27 + 632);
            *(_DWORD *)(v27 + 680) = 0;
            *(_OWORD *)(v27 + 648) = 0u;
            *(_OWORD *)(v27 + 664) = 0u;
            *(_QWORD *)(v27 + 684) = 0x7FFFFFFFLL;
            *(_QWORD *)(v27 + 648) = *(v28 - 11);
            *(v28 - 11) = 0;
            v45 = *(_QWORD *)(v27 + 656);
            *(_QWORD *)(v27 + 656) = *(v28 - 10);
            *(v28 - 10) = v45;
            v46 = *(_QWORD *)(v27 + 664);
            *(_QWORD *)(v27 + 664) = *(v28 - 9);
            *(v28 - 9) = v46;
            LODWORD(v46) = *(_DWORD *)(v27 + 672);
            *(_DWORD *)(v27 + 672) = *((_DWORD *)v28 - 16);
            *((_DWORD *)v28 - 16) = v46;
            LODWORD(v46) = *(_DWORD *)(v27 + 676);
            *(_DWORD *)(v27 + 676) = *((_DWORD *)v28 - 15);
            *((_DWORD *)v28 - 15) = v46;
            LODWORD(v46) = *(_DWORD *)(v27 + 680);
            *(_DWORD *)(v27 + 680) = *((_DWORD *)v28 - 14);
            *((_DWORD *)v28 - 14) = v46;
            LODWORD(v46) = *(_DWORD *)(v27 + 684);
            *(_DWORD *)(v27 + 684) = *((_DWORD *)v28 - 13);
            *((_DWORD *)v28 - 13) = v46;
            *(_QWORD *)(v27 + 728) = 0;
            *(_QWORD *)(v27 + 696) = 0;
            *(_QWORD *)(v27 + 712) = 0;
            *(_QWORD *)(v27 + 704) = 0;
            *(_DWORD *)(v27 + 720) = 0;
            *(_QWORD *)(v27 + 696) = *(v28 - 5);
            *(v28 - 5) = 0;
            *(_QWORD *)(v27 + 704) = *(v28 - 4);
            *(v28 - 4) = 0;
            v47 = *(_QWORD *)(v27 + 712);
            *(_QWORD *)(v27 + 712) = *(v28 - 3);
            *(v28 - 3) = v47;
            v48 = *(_QWORD *)(v27 + 728);
            *(_QWORD *)(v27 + 728) = *(v28 - 1);
            *(v28 - 1) = v48;
            ++*((_DWORD *)v28 - 4);
            ++*(_DWORD *)(v27 + 720);
            *(_OWORD *)(v27 + 736) = 0u;
            *(_OWORD *)(v27 + 752) = 0u;
            *(_DWORD *)(v27 + 768) = 0;
            *(_QWORD *)(v27 + 772) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v27 + 736), v28);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v19) = v20;
            v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            v10 = *(_DWORD *)&v50[32];
          }
          ++v11;
          v14 += 784;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v50);
    }
  }
  else
  {
    if (a2)
      v49 = a2;
    else
      v49 = 3;
  }
}

void re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 784 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 784;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _OWORD *v4;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v4 = (_OWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 16);
    *((_DWORD *)v4 - 2) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 32));
      *v4 = 0u;
      v4[1] = 0u;
    }
    re::MaterialDefinitionFile::~MaterialDefinitionFile((re::MaterialDefinitionFile *)(a1 + 48));
  }
}

void re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  signed int v40;
  _BYTE v41[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v41, 0, 36);
      *(_QWORD *)&v41[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v41, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v41;
      v6 = *(uint64_t **)(a1 + 16);
      v7 = *(_OWORD *)&v41[8];
      *(_OWORD *)v41 = v5;
      *(_QWORD *)&v41[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v41[24];
      *(_OWORD *)&v41[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v41[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            v14 = *v6;
            v15 = *(unsigned int *)(a1 + 24);
            v16 = *v6 % v15;
            v17 = *(_DWORD *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              v17 = *(_DWORD *)(a1 + 32);
              v18 = v17;
              if (v17 == (_DWORD)v15)
              {
                re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 456 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 456 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 456 * v17 + 8) = v20 | 0x80000000;
            v21 = *(_QWORD *)(a1 + 16) + 456 * v17;
            *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 456 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 456 * v17 + 16), (const re::DynamicString *)(v6 + 2));
            v22 = *(_QWORD *)(a1 + 16);
            v23 = v22 + 456 * v17;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_QWORD *)(v23 + 48) = v6[6];
            v6[6] = 0;
            v24 = *(_QWORD *)(v23 + 64);
            *(_QWORD *)(v23 + 64) = v6[8];
            v6[8] = v24;
            *(_QWORD *)(v23 + 72) = v6[9];
            v6[9] = 0;
            v25 = *(_QWORD *)(v23 + 56);
            *(_QWORD *)(v23 + 56) = v6[7];
            v6[7] = v25;
            *(_QWORD *)(v23 + 80) = 0;
            *(_QWORD *)(v23 + 88) = 0;
            *(_QWORD *)(v23 + 96) = 0;
            *(_QWORD *)(v23 + 88) = v6[11];
            v6[11] = 0;
            v26 = *(_QWORD *)(v23 + 80);
            *(_QWORD *)(v23 + 80) = 0;
            *(_QWORD *)(v23 + 80) = v6[10];
            v6[10] = v26;
            v27 = *(_QWORD *)(v23 + 96);
            *(_QWORD *)(v23 + 96) = v6[12];
            v6[12] = v27;
            re::MaterialParameterData::MaterialParameterData(v23 + 104, (uint64_t)(v6 + 13));
            *(_DWORD *)(v23 + 376) = 0;
            *(_OWORD *)(v23 + 344) = 0u;
            *(_OWORD *)(v23 + 360) = 0u;
            *(_QWORD *)(v23 + 380) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v23 + 344), v6 + 43);
            v28 = *((unsigned __int8 *)v6 + 392);
            *(_BYTE *)(v23 + 392) = v28;
            if (v28)
              *(_BYTE *)(v22 + 456 * v17 + 393) = *((_BYTE *)v6 + 393);
            v29 = *((unsigned __int8 *)v6 + 394);
            *(_BYTE *)(v22 + 456 * v17 + 394) = v29;
            if (v29)
              *(_BYTE *)(v22 + 456 * v17 + 395) = *((_BYTE *)v6 + 395);
            v30 = *((unsigned __int8 *)v6 + 396);
            *(_BYTE *)(v22 + 456 * v17 + 396) = v30;
            if (v30)
              *(_BYTE *)(v22 + 456 * v17 + 397) = *((_BYTE *)v6 + 397);
            v31 = *((unsigned __int8 *)v6 + 398);
            *(_BYTE *)(v22 + 456 * v17 + 398) = v31;
            if (v31)
              *(_BYTE *)(v22 + 456 * v17 + 399) = *((_BYTE *)v6 + 399);
            v32 = *((unsigned __int8 *)v6 + 400);
            *(_BYTE *)(v22 + 456 * v17 + 400) = v32;
            if (v32)
              *(_BYTE *)(v22 + 456 * v17 + 401) = *((_BYTE *)v6 + 401);
            v33 = *((unsigned __int8 *)v6 + 402);
            *(_BYTE *)(v22 + 456 * v17 + 402) = v33;
            if (v33)
              *(_BYTE *)(v22 + 456 * v17 + 403) = *((_BYTE *)v6 + 403);
            v34 = *((unsigned __int8 *)v6 + 404);
            *(_BYTE *)(v22 + 456 * v17 + 404) = v34;
            if (v34)
              *(_BYTE *)(v22 + 456 * v17 + 405) = *((_BYTE *)v6 + 405);
            v35 = *((unsigned __int8 *)v6 + 406);
            *(_BYTE *)(v22 + 456 * v17 + 406) = v35;
            if (v35)
              *(_BYTE *)(v22 + 456 * v17 + 407) = *((_BYTE *)v6 + 407);
            v36 = *((unsigned __int8 *)v6 + 408);
            *(_BYTE *)(v22 + 456 * v17 + 408) = v36;
            if (v36)
              *(_BYTE *)(v22 + 456 * v17 + 409) = *((_BYTE *)v6 + 409);
            v37 = v22 + 456 * v17;
            *(_QWORD *)(v37 + 448) = 0;
            *(_QWORD *)(v37 + 424) = 0;
            *(_QWORD *)(v37 + 432) = 0;
            *(_QWORD *)(v37 + 416) = 0;
            *(_DWORD *)(v37 + 440) = 0;
            *(_QWORD *)(v37 + 416) = v6[52];
            v6[52] = 0;
            *(_QWORD *)(v37 + 424) = v6[53];
            v6[53] = 0;
            v38 = *(_QWORD *)(v37 + 432);
            *(_QWORD *)(v37 + 432) = v6[54];
            v6[54] = v38;
            v39 = *(_QWORD *)(v37 + 448);
            *(_QWORD *)(v37 + 448) = v6[56];
            v6[56] = v39;
            ++*((_DWORD *)v6 + 110);
            ++*(_DWORD *)(v37 + 440);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 57;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v41, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v40 = a2;
    else
      v40 = 3;
  }
}

void re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 456 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a1;
  if (v3)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        result = re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v4, result);
        ++v5;
        v4 += 456;
      }
      while (v5 < *((unsigned int *)a1 + 8));
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1, double result)
{
  int v2;
  uint64_t v4;
  _OWORD *v5;
  double v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
  {
    v5 = (_OWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 16);
    *((_DWORD *)v5 - 2) = v2 & 0x7FFFFFFF;
    if (v4)
    {
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 32));
      result = 0.0;
      *v5 = 0u;
      v5[1] = 0u;
    }
    re::DynamicArray<re::FunctionLink>::deinit(a1 + 416, result);
    v6 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 344));
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 296), v6);
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 248));
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 200));
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 152));
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 104));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
    v7 = *(_QWORD *)(a1 + 48);
    if (v7)
    {
      if ((*(_BYTE *)(a1 + 56) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 64));
      result = 0.0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
    }
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialDefinitionFile *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(unint64_t **)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            v14 = *v6;
            v15 = *(unsigned int *)(a1 + 24);
            v16 = *v6 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::DynamicString,re::MaterialDefinitionFile *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 16), (const re::DynamicString *)(v6 + 2));
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 48) = v6[6];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

void re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 48);
        do
        {
          if ((*(_DWORD *)(v14 - 5) & 0x80000000) != 0)
          {
            v15 = *(v14 - 6);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 56 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18) = v15;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 16), (const re::DynamicString *)(v14 - 4));
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 48) = *v14;
            *v14 = 0;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

double re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 56;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _OWORD *v4;
  void *v5;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v4 = (_OWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 16);
    *((_DWORD *)v4 - 2) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 32));
      *v4 = 0u;
      v4[1] = 0u;
    }
    v5 = *(void **)(a1 + 48);
    if (v5)
    {

      *(_QWORD *)(a1 + 48) = 0;
    }
  }
}

_QWORD *re::DynamicArray<re::PSOToolRenderDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PSOToolRenderDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE8uLL))
        {
          v2 = 232 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 232 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_32;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 232, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_32:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 232 * v9;
        do
        {
          v12 = (_QWORD *)(v8 + v10);
          v13.n128_f64[0] = re::PSOToolRenderDescriptor::PSOToolRenderDescriptor((uint64_t)&v7[v10 / 8], v8 + v10);
          v14 = *(_QWORD *)(v8 + v10 + 192);
          if (v14)
          {
            if (v12[28])
              (*(void (**)(uint64_t, double))(*(_QWORD *)v14 + 40))(v14, v13.n128_f64[0]);
            v12[28] = 0;
            v12[25] = 0;
            v12[26] = 0;
            v12[24] = 0;
            ++*(_DWORD *)(v8 + v10 + 216);
          }
          v17 = v12[19];
          v16 = v12 + 19;
          v15 = v17;
          if (v17)
          {
            v18 = v8 + v10;
            if (*(_QWORD *)(v8 + v10 + 184))
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 40))(v15, v13);
            *(_QWORD *)(v18 + 184) = 0;
            v16[1] = 0;
            v16[2] = 0;
            *v16 = 0;
            ++*(_DWORD *)(v18 + 176);
          }
          v19 = v8 + v10;
          v20 = *(_QWORD *)(v8 + v10 + 112);
          if (v20)
          {
            if ((*(_BYTE *)(v19 + 120) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v20 + 40))(v20, *(_QWORD *)(v8 + v10 + 128), v13);
            v13 = 0uLL;
            *(_OWORD *)(v8 + v10 + 112) = 0u;
            *(_OWORD *)(v8 + v10 + 128) = 0u;
          }
          v23 = *(_QWORD *)(v19 + 72);
          v22 = (_QWORD *)(v19 + 72);
          v21 = v23;
          if (v23)
          {
            v24 = v8 + v10;
            if (*(_QWORD *)(v8 + v10 + 104))
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v21 + 40))(v21, v13);
            *(_QWORD *)(v24 + 104) = 0;
            v22[1] = 0;
            v22[2] = 0;
            *v22 = 0;
            ++*(_DWORD *)(v24 + 96);
          }
          v10 += 232;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_32;
    }
  }
  return result;
}

double re::PSOToolRenderDescriptor::PSOToolRenderDescriptor(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  v5 = *(unsigned __int8 *)(a2 + 68);
  *(_BYTE *)(a1 + 68) = v5;
  if (v5)
    *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v7;
  v8 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v8;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(a1 + 96);
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 136) = 0;
  v13 = *(_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a2 + 120) = v13;
  *(_QWORD *)(a2 + 128) = v12;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v15 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = v15;
  v16 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = v16;
  ++*(_DWORD *)(a2 + 176);
  ++*(_DWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  v17 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v17;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  v18 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = v18;
  v19 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = v19;
  ++*(_DWORD *)(a2 + 216);
  ++*(_DWORD *)(a1 + 216);
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[2]>(uint64_t a1, re::DynamicString *a2, int a3, const char *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  _anonymous_namespace_ *v17;
  _OWORD *v18;
  _anonymous_namespace_ *v19;
  char v20;

  v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v20, (uint64_t)a2);
  v9 = v8;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  v10 = v8 % *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const(&)[5]>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 80 * v13;
    return v14 + 48;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 80 * v11 + 16, (uint64_t)a2))
  {
    v11 = *(_DWORD *)(v12 + 80 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v14 = v12 + 80 * v11;
      break;
    case 2:
    case 3:
      v16 = v12 + 80 * v11;
      v19 = *(_anonymous_namespace_ **)(v16 + 48);
      v18 = (_OWORD *)(v16 + 48);
      v17 = v19;
      if (v19)
      {
        if ((*(_BYTE *)(v12 + 80 * v11 + 56) & 1) != 0)
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v12 + 80 * v11 + 64));
        *v18 = 0u;
        v18[1] = 0u;
        v12 = *(_QWORD *)(a1 + 16);
      }
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 80 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

_QWORD *re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (uint64_t *)(v8 + 16);
        v11 = 40 * v9;
        v12 = 0uLL;
        v13 = v7;
        do
        {
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          *v13 = *(v10 - 2);
          *(v10 - 2) = 0;
          v14 = *v10;
          v13[3] = v10[1];
          v10[1] = 0;
          v16 = v13[1];
          v15 = v13[2];
          v17 = *(v10 - 1);
          v13[2] = v14;
          *v10 = v15;
          v13[1] = v17;
          *(v10 - 1) = v16;
          *((_WORD *)v13 + 16) = *((_WORD *)v10 + 8);
          v18 = *(v10 - 2);
          if (v18)
          {
            if ((*(_BYTE *)(v10 - 1) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, *v10);
              v12 = 0uLL;
            }
            *((_OWORD *)v10 - 1) = v12;
            *(_OWORD *)v10 = v12;
          }
          v10 += 5;
          v13 += 5;
          v11 -= 40;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;

  if (!a2)
    return 0;
  v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = **(_QWORD ***)(a1 + 16);
  v5 = v4[1];
  v6 = v5 + v3;
  if (v5 + v3 <= *v4)
  {
LABEL_3:
    result = (uint64_t)v4 + v5 + 24;
    v4[1] = v6;
    return result;
  }
  if (*(_QWORD *)a1 <= v3)
    v8 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  else
    v8 = *(_QWORD *)a1;
  if (rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::AddChunk(a1, v8))
  {
    v4 = **(_QWORD ***)(a1 + 16);
    v5 = v4[1];
    v6 = v5 + v3;
    goto LABEL_3;
  }
  return 0;
}

size_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::AddChunk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t result;
  size_t *v6;

  if (!*(_QWORD *)(a1 + 8))
  {
    v4 = operator new();
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) = v4;
  }
  result = a2 + 24;
  if (a2 != -24)
  {
    result = (size_t)malloc_type_malloc(result, 0xB9BD7EEuLL);
    if (result)
    {
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 0;
      v6 = *(size_t **)(a1 + 16);
      *(_QWORD *)(result + 16) = *v6;
      *v6 = result;
      return 1;
    }
  }
  return result;
}

__n128 rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(int *a1, __int128 *a2, __n128 *a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  __n128 result;

  v7 = *a1;
  v8 = a1[1];
  if (*a1 >= v8)
  {
    if ((_DWORD)v8)
      v9 = v8 + ((v8 + 1) >> 1);
    else
      v9 = 16;
    if (v8 < v9)
    {
      *((_QWORD *)a1 + 1) = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Realloc(a4, *((char **)a1 + 1), 48 * v8, 48 * v9);
      a1[1] = v9;
      v7 = *a1;
    }
  }
  v10 = *((_QWORD *)a1 + 1) + 48 * v7;
  v11 = *a2;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v10 = v11;
  *((_WORD *)a2 + 11) = 0;
  result = *a3;
  *(_QWORD *)(v10 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(v10 + 24) = result;
  a3[1].n128_u16[3] = 0;
  ++*a1;
  return result;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Realloc(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  size_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;

  if (!a2)
    return rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a1, a4);
  if (!a4)
    return 0;
  v4 = a2;
  v5 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (a4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v6 > v5)
  {
    v7 = **(unint64_t ***)(a1 + 16);
    v8 = v7[1];
    if ((char *)v7 + v8 - v5 + 24 == v4)
    {
      v9 = v8 + v6 - v5;
      if (v9 <= *v7)
      {
        v7[1] = v9;
        return (uint64_t)v4;
      }
    }
    v10 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a1, v6);
    if (v10)
    {
      v11 = v10;
      if (v5)
        memcpy(v10, v4, v5);
      return (uint64_t)v11;
    }
    return 0;
  }
  return (uint64_t)v4;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,false>(uint64_t result, unint64_t a2, unsigned __int8 *a3, uint64_t a4, char a5)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  const char *v28;
  unint64_t v29;
  unint64_t v30;
  const char *v31;
  const char *v32;
  BOOL v33;
  unint64_t v34;
  int v35;
  const char *v36;
  unsigned int v37;
  const char *v38;
  const char *v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  unint64_t v52;
  const char *v53;
  const char *v54;
  int v55;
  const char *v56;
  unsigned int v57;
  const char *v58;
  const char *v59;
  const char *v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  const char *v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  const char *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  const char *v94;
  const char *v95;
  const char *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  const char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  const char *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  const char *v130;
  const char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *i;
  const char *v137;
  const char *v138;
  unint64_t v139;
  uint64_t v141;
  int64_t v142;
  uint64_t v143;
  __int128 v145;
  __int128 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v7 = result;
LABEL_2:
  v8 = a2;
  v143 = a2 - 64;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = v8 - v9;
    v11 = (uint64_t)(v8 - v9) >> 6;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*a3)
        {
          if ((*(_QWORD *)(a2 - 56) & 1) != 0)
            v60 = *(const char **)(a2 - 48);
          else
            v60 = (const char *)(a2 - 55);
          if ((*(_QWORD *)(v9 + 8) & 1) != 0)
            v61 = *(const char **)(v9 + 16);
          else
            v61 = (const char *)(v9 + 9);
          result = strcmp(v60, v61);
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (*(unsigned __int16 *)(a2 - 30) >= *(unsigned __int16 *)(v9 + 34))
        {
          return result;
        }
        return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9, v143);
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + 64, v143, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + 64, v9 + 128, v143, a3);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,0>(v9, v9 + 64, v9 + 128, v9 + 192, v143, a3);
      default:
        if (v10 > 1535)
        {
          if (!a4)
          {
            if (v9 == v8)
              return result;
            v139 = v8 - v9;
            v78 = (v11 - 2) >> 1;
            v79 = v78;
            while (1)
            {
              v80 = v79;
              if (v78 < v79)
                goto LABEL_279;
              v81 = (char *)(v9 + (v79 << 6));
              v82 = (2 * v79) | 1;
              v83 = v9 + (v82 << 6);
              if (2 * v79 + 2 >= (uint64_t)v11)
              {
                if (!*a3)
                  goto LABEL_244;
              }
              else
              {
                if (!*a3)
                {
                  if (*(unsigned __int16 *)(v9 + (v82 << 6) + 34) < *(unsigned __int16 *)(v83 + 98))
                  {
                    v82 = 2 * v79 + 2;
                    v83 += 64;
                  }
LABEL_244:
                  if (*(unsigned __int16 *)(v83 + 34) >= *(unsigned __int16 *)(v9 + (v79 << 6) + 34))
                    goto LABEL_245;
                  goto LABEL_279;
                }
                if ((*(_QWORD *)(v83 + 8) & 1) != 0)
                  v84 = *(const char **)(v83 + 16);
                else
                  v84 = (const char *)(v83 + 9);
                if ((*(_QWORD *)(v83 + 72) & 1) != 0)
                  v85 = *(const char **)(v83 + 80);
                else
                  v85 = (const char *)(v83 + 73);
                if (strcmp(v84, v85) < 0)
                {
                  v82 = 2 * v80 + 2;
                  v83 += 64;
                }
              }
              if ((*(_QWORD *)(v83 + 8) & 1) != 0)
                v86 = *(const char **)(v83 + 16);
              else
                v86 = (const char *)(v83 + 9);
              if ((*((_QWORD *)v81 + 1) & 1) != 0)
                v87 = (const char *)*((_QWORD *)v81 + 2);
              else
                v87 = v81 + 9;
              if ((strcmp(v86, v87) & 0x80000000) == 0)
              {
LABEL_245:
                v151 = 0u;
                v152 = 0u;
                *(_QWORD *)&v151 = *(_QWORD *)v81;
                *(_QWORD *)v81 = 0;
                v88 = v152;
                *(_QWORD *)&v152 = *((_QWORD *)v81 + 2);
                *((_QWORD *)v81 + 2) = v88;
                *((_QWORD *)&v152 + 1) = *((_QWORD *)v81 + 3);
                *((_QWORD *)v81 + 3) = 0;
                v89 = *((_QWORD *)&v151 + 1);
                *((_QWORD *)&v151 + 1) = *((_QWORD *)v81 + 1);
                *((_QWORD *)v81 + 1) = v89;
                v142 = v80;
                v90 = v9 + (v80 << 6);
                v153 = *(_DWORD *)(v90 + 32);
                v154 = *(_QWORD *)(v90 + 40);
                *(_QWORD *)(v90 + 40) = 0;
                v155 = *(_QWORD *)(v90 + 48);
                *(_QWORD *)(v90 + 48) = 0;
                v156 = *(_QWORD *)(v90 + 56);
                *(_QWORD *)(v90 + 56) = 0;
                re::DynamicString::operator=((re::DynamicString *)v81, (re::DynamicString *)v83);
                *(_DWORD *)(v90 + 32) = *(_DWORD *)(v83 + 32);
                v91 = (uint64_t *)(v83 + 40);
                re::FixedArray<float>::operator=((uint64_t *)(v90 + 40), (uint64_t *)(v83 + 40));
                if (v78 < v82)
                {
LABEL_246:
                  v92 = v83;
LABEL_272:
                  re::DynamicString::operator=((re::DynamicString *)v92, (re::DynamicString *)&v151);
                  *(_DWORD *)(v92 + 32) = v153;
                  re::FixedArray<float>::operator=(v91, &v154);
                  v80 = v142;
                  if (v154)
                  {
                    if (v155)
                    {
                      (*(void (**)(void))(*(_QWORD *)v154 + 40))();
                      v155 = 0;
                      v156 = 0;
                    }
                    v154 = 0;
                  }
                  if ((_QWORD)v151 && (BYTE8(v151) & 1) != 0)
                    (*(void (**)(void))(*(_QWORD *)v151 + 40))();
                  goto LABEL_279;
                }
                while (2)
                {
                  v93 = (2 * v82) | 1;
                  v92 = v9 + (v93 << 6);
                  v82 = 2 * v82 + 2;
                  if (v82 >= (uint64_t)v11)
                  {
                    v82 = v93;
                    if (!*a3)
                      goto LABEL_270;
LABEL_259:
                    if ((*(_QWORD *)(v92 + 8) & 1) != 0)
                      v96 = *(const char **)(v92 + 16);
                    else
                      v96 = (const char *)(v92 + 9);
                    if ((BYTE8(v151) & 1) != 0)
                      v97 = (const char *)v152;
                    else
                      v97 = (char *)&v151 + 9;
                    if (strcmp(v96, v97) < 0)
                      goto LABEL_246;
                  }
                  else
                  {
                    if (*a3)
                    {
                      if ((*(_QWORD *)(v92 + 8) & 1) != 0)
                        v94 = *(const char **)(v92 + 16);
                      else
                        v94 = (const char *)(v92 + 9);
                      if ((*(_QWORD *)(v92 + 72) & 1) != 0)
                        v95 = *(const char **)(v92 + 80);
                      else
                        v95 = (const char *)(v92 + 73);
                      if (strcmp(v94, v95) < 0)
                        v92 += 64;
                      else
                        v82 = v93;
                      goto LABEL_259;
                    }
                    if (*(unsigned __int16 *)(v9 + (v93 << 6) + 34) < *(unsigned __int16 *)(v92 + 98))
                      v92 += 64;
                    else
                      v82 = v93;
LABEL_270:
                    if (*(unsigned __int16 *)(v92 + 34) < HIWORD(v153))
                      goto LABEL_246;
                  }
                  re::DynamicString::operator=((re::DynamicString *)v83, (re::DynamicString *)v92);
                  *(_DWORD *)(v83 + 32) = *(_DWORD *)(v92 + 32);
                  v91 = (uint64_t *)(v92 + 40);
                  re::FixedArray<float>::operator=((uint64_t *)(v83 + 40), (uint64_t *)(v92 + 40));
                  v83 = v92;
                  if (v78 < v82)
                    goto LABEL_272;
                  continue;
                }
              }
LABEL_279:
              v79 = v80 - 1;
              if (!v80)
              {
                v98 = v139 >> 6;
                while (1)
                {
                  v99 = 0;
                  v145 = 0u;
                  v146 = 0u;
                  *(_QWORD *)&v145 = *(_QWORD *)v7;
                  *(_QWORD *)v7 = 0;
                  v100 = v146;
                  v101 = *(_QWORD *)(v7 + 24);
                  *(_QWORD *)&v146 = *(_QWORD *)(v7 + 16);
                  v102 = a2;
                  *(_QWORD *)(v7 + 16) = v100;
                  *((_QWORD *)&v146 + 1) = v101;
                  *(_QWORD *)(v7 + 24) = 0;
                  *((_QWORD *)&v145 + 1) = *(_QWORD *)(v7 + 8);
                  *(_QWORD *)(v7 + 8) = 0;
                  v147 = *(_DWORD *)(v7 + 32);
                  v103 = *(_QWORD *)(v7 + 48);
                  v148 = *(_QWORD *)(v7 + 40);
                  *(_QWORD *)(v7 + 40) = 0;
                  v149 = v103;
                  *(_QWORD *)(v7 + 48) = 0;
                  v150 = *(_QWORD *)(v7 + 56);
                  *(_QWORD *)(v7 + 56) = 0;
                  v104 = v7;
                  do
                  {
                    v105 = v104;
                    v106 = v99 + 1;
                    v104 += (v99 + 1) << 6;
                    v107 = 2 * v99;
                    v99 = (2 * v99) | 1;
                    v108 = v107 + 2;
                    if (v107 + 2 >= v98)
                      goto LABEL_292;
                    if (*a3)
                    {
                      if ((*(_QWORD *)(v104 + 8) & 1) != 0)
                        v109 = *(const char **)(v104 + 16);
                      else
                        v109 = (const char *)(v104 + 9);
                      if ((*(_QWORD *)(v104 + 72) & 1) != 0)
                        v110 = *(const char **)(v104 + 80);
                      else
                        v110 = (const char *)(v104 + 73);
                      if (strcmp(v109, v110) < 0)
                      {
LABEL_291:
                        v104 += 64;
                        v99 = v108;
                      }
                    }
                    else if (*(unsigned __int16 *)(v105 + (v106 << 6) + 34) < *(unsigned __int16 *)(v104 + 98))
                    {
                      goto LABEL_291;
                    }
LABEL_292:
                    re::DynamicString::operator=((re::DynamicString *)v105, (re::DynamicString *)v104);
                    *(_DWORD *)(v105 + 32) = *(_DWORD *)(v104 + 32);
                    re::FixedArray<float>::operator=((uint64_t *)(v105 + 40), (uint64_t *)(v104 + 40));
                  }
                  while (v99 <= (uint64_t)((unint64_t)(v98 - 2) >> 1));
                  a2 -= 64;
                  if (v104 == v102 - 64)
                  {
                    re::DynamicString::operator=((re::DynamicString *)v104, (re::DynamicString *)&v145);
                    *(_DWORD *)(v104 + 32) = v147;
                    re::FixedArray<float>::operator=((uint64_t *)(v104 + 40), &v148);
                  }
                  else
                  {
                    re::DynamicString::operator=((re::DynamicString *)v104, (re::DynamicString *)(v102 - 64));
                    *(_DWORD *)(v104 + 32) = *(_DWORD *)(v102 - 32);
                    re::FixedArray<float>::operator=((uint64_t *)(v104 + 40), (uint64_t *)(v102 - 24));
                    re::DynamicString::operator=((re::DynamicString *)(v102 - 64), (re::DynamicString *)&v145);
                    *(_DWORD *)(v102 - 32) = v147;
                    re::FixedArray<float>::operator=((uint64_t *)(v102 - 24), &v148);
                    v111 = v104 - v7 + 64;
                    if (v111 >= 65)
                    {
                      v112 = ((unint64_t)v111 >> 6) - 2;
                      v113 = v112 >> 1;
                      v114 = v7 + (v112 >> 1 << 6);
                      if (*a3)
                      {
                        if ((*(_QWORD *)(v114 + 8) & 1) != 0)
                          v115 = *(const char **)(v114 + 16);
                        else
                          v115 = (const char *)(v114 + 9);
                        if ((*(_QWORD *)(v104 + 8) & 1) != 0)
                          v116 = *(const char **)(v104 + 16);
                        else
                          v116 = (const char *)(v104 + 9);
                        if (strcmp(v115, v116) < 0)
                        {
LABEL_319:
                          v151 = 0u;
                          v152 = 0u;
                          *(_QWORD *)&v151 = *(_QWORD *)v104;
                          *(_QWORD *)v104 = 0;
                          v118 = v152;
                          v119 = *(_QWORD *)(v104 + 24);
                          *(_QWORD *)&v152 = *(_QWORD *)(v104 + 16);
                          *(_QWORD *)(v104 + 16) = v118;
                          *((_QWORD *)&v152 + 1) = v119;
                          *(_QWORD *)(v104 + 24) = 0;
                          *((_QWORD *)&v151 + 1) = *(_QWORD *)(v104 + 8);
                          *(_QWORD *)(v104 + 8) = 0;
                          v153 = *(_DWORD *)(v104 + 32);
                          v154 = *(_QWORD *)(v104 + 40);
                          *(_QWORD *)(v104 + 40) = 0;
                          v155 = *(_QWORD *)(v104 + 48);
                          *(_QWORD *)(v104 + 48) = 0;
                          v156 = *(_QWORD *)(v104 + 56);
                          *(_QWORD *)(v104 + 56) = 0;
                          re::DynamicString::operator=((re::DynamicString *)v104, (re::DynamicString *)(v7 + (v112 >> 1 << 6)));
                          v120 = v7 + (v113 << 6);
                          *(_DWORD *)(v104 + 32) = *(_DWORD *)(v120 + 32);
                          v121 = (uint64_t *)(v120 + 40);
                          re::FixedArray<float>::operator=((uint64_t *)(v104 + 40), (uint64_t *)(v120 + 40));
                          if (v112 >= 2)
                          {
                            while (1)
                            {
                              v123 = v113 - 1;
                              v113 = (v113 - 1) >> 1;
                              v122 = v7 + (v113 << 6);
                              if (*a3)
                              {
                                if ((*(_QWORD *)(v122 + 8) & 1) != 0)
                                  v124 = *(const char **)(v122 + 16);
                                else
                                  v124 = (const char *)(v122 + 9);
                                if ((BYTE8(v151) & 1) != 0)
                                  v125 = (const char *)v152;
                                else
                                  v125 = (char *)&v151 + 9;
                                if ((strcmp(v124, v125) & 0x80000000) == 0)
                                  break;
                              }
                              else if (*(unsigned __int16 *)(v122 + 34) >= HIWORD(v153))
                              {
                                break;
                              }
                              re::DynamicString::operator=((re::DynamicString *)v114, (re::DynamicString *)(v7 + (v113 << 6)));
                              v126 = v7 + (v113 << 6);
                              *(_DWORD *)(v114 + 32) = *(_DWORD *)(v126 + 32);
                              v121 = (uint64_t *)(v126 + 40);
                              re::FixedArray<float>::operator=((uint64_t *)(v114 + 40), (uint64_t *)(v126 + 40));
                              v114 = v7 + (v113 << 6);
                              if (v123 <= 1)
                                goto LABEL_332;
                            }
                          }
                          v122 = v114;
LABEL_332:
                          re::DynamicString::operator=((re::DynamicString *)v122, (re::DynamicString *)&v151);
                          *(_DWORD *)(v122 + 32) = v153;
                          re::FixedArray<float>::operator=(v121, &v154);
                          if (v154)
                          {
                            if (v155)
                            {
                              (*(void (**)(void))(*(_QWORD *)v154 + 40))();
                              v155 = 0;
                              v156 = 0;
                            }
                            v154 = 0;
                          }
                          if ((_QWORD)v151 && (BYTE8(v151) & 1) != 0)
                            (*(void (**)(void))(*(_QWORD *)v151 + 40))();
                        }
                      }
                      else if (*(unsigned __int16 *)(v114 + 34) < *(unsigned __int16 *)(v104 + 34))
                      {
                        goto LABEL_319;
                      }
                    }
                  }
                  if (v148)
                  {
                    if (v149)
                    {
                      (*(void (**)(void))(*(_QWORD *)v148 + 40))();
                      v149 = 0;
                      v150 = 0;
                    }
                    v148 = 0;
                  }
                  result = v145;
                  if ((_QWORD)v145 && (BYTE8(v145) & 1) != 0)
                    result = (*(uint64_t (**)(void))(*(_QWORD *)v145 + 40))();
                  if (v98-- <= 2)
                    return result;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = v9 + (v11 >> 1 << 6);
          if ((unint64_t)v10 <= 0x2000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9 + (v11 >> 1 << 6), v9, v143, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + (v11 >> 1 << 6), v143, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9 + 64, v13 - 64, a2 - 128, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9 + 128, v9 + 64 + (v12 << 6), a2 - 192, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v13 - 64, v13, v9 + 64 + (v12 << 6), a3);
            std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9, v13);
          }
          v14 = *a3;
          v141 = a4 - 1;
          if ((a5 & 1) == 0)
          {
            if (*a3)
            {
              if ((*(_QWORD *)(v9 - 56) & 1) != 0)
                v15 = *(const char **)(v9 - 48);
              else
                v15 = (const char *)(v9 - 55);
              if ((*(_QWORD *)(v9 + 8) & 1) != 0)
                v16 = *(const char **)(v9 + 16);
              else
                v16 = (const char *)(v9 + 9);
              if ((strcmp(v15, v16) & 0x80000000) == 0)
              {
LABEL_91:
                v151 = 0u;
                v152 = 0u;
                *(_QWORD *)&v151 = *(_QWORD *)v9;
                *(_QWORD *)v9 = 0;
                v41 = v152;
                v42 = *(_QWORD *)(v9 + 24);
                *(_QWORD *)&v152 = *(_QWORD *)(v9 + 16);
                *(_QWORD *)(v9 + 16) = v41;
                *((_QWORD *)&v152 + 1) = v42;
                *(_QWORD *)(v9 + 24) = 0;
                *((_QWORD *)&v151 + 1) = *(_QWORD *)(v9 + 8);
                *(_QWORD *)(v9 + 8) = 0;
                LODWORD(v41) = *(_DWORD *)(v9 + 32);
                v154 = *(_QWORD *)(v9 + 40);
                *(_QWORD *)(v9 + 40) = 0;
                v43 = *(_QWORD *)(v9 + 56);
                v155 = *(_QWORD *)(v9 + 48);
                v153 = v41;
                *(_QWORD *)(v9 + 48) = 0;
                v156 = v43;
                *(_QWORD *)(v9 + 56) = 0;
                v44 = WORD1(v41);
                if (v14)
                {
                  v45 = (const char *)v152;
                  v46 = BYTE8(v151) & 1;
                  if ((BYTE8(v151) & 1) != 0)
                    v47 = (const char *)v152;
                  else
                    v47 = (char *)&v151 + 9;
                  if ((*(_QWORD *)(v8 - 56) & 1) != 0)
                    v48 = *(const char **)(v8 - 48);
                  else
                    v48 = (const char *)(a2 - 55);
                  if ((strcmp(v47, v48) & 0x80000000) == 0)
                  {
LABEL_113:
                    v9 += 64;
                    if (v7 + 64 >= v8)
                      goto LABEL_125;
                    if ((BYTE8(v151) & 1) != 0)
                      v50 = (const char *)v152;
                    else
                      v50 = (char *)&v151 + 9;
                    while (2)
                    {
                      if (v14)
                      {
                        if ((*(_QWORD *)(v9 + 8) & 1) != 0)
                          v51 = *(const char **)(v9 + 16);
                        else
                          v51 = (const char *)(v9 + 9);
                        if (strcmp(v50, v51) < 0)
                          break;
                      }
                      else if (*(unsigned __int16 *)(v9 + 34) > v44)
                      {
                        break;
                      }
                      v9 += 64;
                      if (v9 < v8)
                        continue;
                      break;
                    }
LABEL_125:
                    v52 = v8;
                    if (v9 < v8)
                    {
                      if ((BYTE8(v151) & 1) != 0)
                        v53 = (const char *)v152;
                      else
                        v53 = (char *)&v151 + 9;
                      v52 = a2 - 64;
                      if (v14)
                      {
                        while (2)
                        {
                          if ((*(_QWORD *)(v52 + 8) & 1) != 0)
                            v54 = *(const char **)(v52 + 16);
                          else
                            v54 = (const char *)(v52 + 9);
                          if ((strcmp(v53, v54) & 0x80000000) == 0)
                            goto LABEL_156;
LABEL_136:
                          v52 -= 64;
                          if (v14)
                            continue;
                          break;
                        }
                      }
                      if (*(unsigned __int16 *)(v52 + 34) <= v44)
                        goto LABEL_156;
                      goto LABEL_136;
                    }
LABEL_156:
                    while (2)
                    {
                      if (v9 >= v52)
                      {
                        if (v9 - 64 != v7)
                        {
                          re::DynamicString::operator=((re::DynamicString *)v7, (re::DynamicString *)(v9 - 64));
                          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v9 - 32);
                          re::FixedArray<float>::operator=((uint64_t *)(v7 + 40), (uint64_t *)(v9 - 24));
                        }
                        re::DynamicString::operator=((re::DynamicString *)(v9 - 64), (re::DynamicString *)&v151);
                        *(_DWORD *)(v9 - 32) = v153;
                        re::FixedArray<float>::operator=((uint64_t *)(v9 - 24), &v154);
                        a4 = v141;
                        if (v154)
                        {
                          if (v155)
                          {
                            (*(void (**)(void))(*(_QWORD *)v154 + 40))();
                            v155 = 0;
                            v156 = 0;
                          }
                          v154 = 0;
                        }
                        result = v151;
                        if ((_QWORD)v151 && (BYTE8(v151) & 1) != 0)
                          result = (*(uint64_t (**)(void))(*(_QWORD *)v151 + 40))();
                        goto LABEL_89;
                      }
                      std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9, v52);
                      v55 = *a3;
                      if ((BYTE8(v151) & 1) != 0)
                        v56 = (const char *)v152;
                      else
                        v56 = (char *)&v151 + 9;
                      v57 = HIWORD(v153);
                      while (2)
                      {
                        v9 += 64;
                        if (v55)
                        {
                          if ((*(_QWORD *)(v9 + 8) & 1) != 0)
                            v58 = *(const char **)(v9 + 16);
                          else
                            v58 = (const char *)(v9 + 9);
                          if ((strcmp(v56, v58) & 0x80000000) == 0)
                            continue;
                        }
                        else if (v57 >= *(unsigned __int16 *)(v9 + 34))
                        {
                          continue;
                        }
                        break;
                      }
                      do
                      {
                        while (1)
                        {
                          v52 -= 64;
                          if (v55)
                            break;
                          if (v57 >= *(unsigned __int16 *)(v52 + 34))
                            goto LABEL_156;
                        }
                        if ((*(_QWORD *)(v52 + 8) & 1) != 0)
                          v59 = *(const char **)(v52 + 16);
                        else
                          v59 = (const char *)(v52 + 9);
                      }
                      while (strcmp(v56, v59) < 0);
                      continue;
                    }
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)(v8 - 30) <= v44)
                    goto LABEL_113;
                  v45 = (const char *)v152;
                  v46 = BYTE8(v151) & 1;
                }
                if (!v46)
                  v45 = (char *)&v151 + 9;
                v9 += 64;
                if (v14)
                {
LABEL_105:
                  if ((*(_QWORD *)(v9 + 8) & 1) != 0)
                    v49 = *(const char **)(v9 + 16);
                  else
                    v49 = (const char *)(v9 + 9);
                  if (strcmp(v45, v49) < 0)
                    goto LABEL_125;
                  goto LABEL_111;
                }
                while (1)
                {
                  if (*(unsigned __int16 *)(v9 + 34) > v44)
                    goto LABEL_125;
LABEL_111:
                  v9 += 64;
                  if (v14)
                    goto LABEL_105;
                }
              }
            }
            else if (*(unsigned __int16 *)(v9 - 30) >= *(unsigned __int16 *)(v9 + 34))
            {
              goto LABEL_91;
            }
          }
          v17 = 0;
          v151 = 0u;
          v152 = 0u;
          *(_QWORD *)&v151 = *(_QWORD *)v7;
          *(_QWORD *)v7 = 0;
          v18 = v152;
          v19 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)&v152 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = v18;
          *((_QWORD *)&v152 + 1) = v19;
          *(_QWORD *)(v7 + 24) = 0;
          *((_QWORD *)&v151 + 1) = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          v20 = *(_DWORD *)(v7 + 32);
          v154 = *(_QWORD *)(v7 + 40);
          *(_QWORD *)(v7 + 40) = 0;
          v21 = *(_QWORD *)(v7 + 56);
          v155 = *(_QWORD *)(v7 + 48);
          v153 = v20;
          *(_QWORD *)(v7 + 48) = 0;
          v156 = v21;
          *(_QWORD *)(v7 + 56) = 0;
          if ((BYTE8(v151) & 1) != 0)
            v22 = (const char *)v152;
          else
            v22 = (char *)&v151 + 9;
          v23 = HIWORD(v20);
          while (1)
          {
            v24 = v7 + v17;
            if (v14)
              break;
            if (*(unsigned __int16 *)(v24 + 98) >= v23)
              goto LABEL_30;
LABEL_29:
            v17 += 64;
          }
          v25 = *(_QWORD *)(v24 + 72);
          v26 = *(const char **)(v24 + 80);
          v27 = (const char *)(v24 + 73);
          if ((v25 & 1) != 0)
            v28 = v26;
          else
            v28 = v27;
          if (strcmp(v28, v22) < 0)
            goto LABEL_29;
LABEL_30:
          v29 = v7 + v17 + 64;
          v30 = a2 - 64;
          if (!v17)
          {
            v30 = a2;
            if (v29 >= a2)
              goto LABEL_54;
            v30 = a2 - 64;
            if (!v14)
              goto LABEL_48;
            while (1)
            {
              if ((*(_QWORD *)(v30 + 8) & 1) != 0)
                v32 = *(const char **)(v30 + 16);
              else
                v32 = (const char *)(v30 + 9);
              if (strcmp(v32, v22) < 0 || v29 >= v30)
                goto LABEL_54;
              while (1)
              {
                v30 -= 64;
                if (v14)
                  break;
LABEL_48:
                v33 = *(unsigned __int16 *)(v30 + 34) < v23 || v29 >= v30;
                if (v33)
                  goto LABEL_54;
              }
            }
          }
          if (v14)
            goto LABEL_32;
          while (*(unsigned __int16 *)(v30 + 34) >= v23)
          {
            while (1)
            {
              v30 -= 64;
              if (!v14)
                break;
LABEL_32:
              if ((*(_QWORD *)(v30 + 8) & 1) != 0)
                v31 = *(const char **)(v30 + 16);
              else
                v31 = (const char *)(v30 + 9);
              if (strcmp(v31, v22) < 0)
                goto LABEL_54;
            }
          }
LABEL_54:
          v9 = v7 + v17 + 64;
          if (v29 < v30)
          {
            v34 = v30;
            do
            {
              std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9, v34);
              v35 = *a3;
              if ((BYTE8(v151) & 1) != 0)
                v36 = (const char *)v152;
              else
                v36 = (char *)&v151 + 9;
              v37 = HIWORD(v153);
              do
              {
                while (1)
                {
                  v9 += 64;
                  if (v35)
                    break;
                  if (*(unsigned __int16 *)(v9 + 34) >= v37)
                    goto LABEL_67;
                }
                if ((*(_QWORD *)(v9 + 8) & 1) != 0)
                  v38 = *(const char **)(v9 + 16);
                else
                  v38 = (const char *)(v9 + 9);
              }
              while (strcmp(v38, v36) < 0);
              do
              {
LABEL_67:
                while (1)
                {
                  v34 -= 64;
                  if (v35)
                    break;
                  if (*(unsigned __int16 *)(v34 + 34) < v37)
                    goto LABEL_74;
                }
                if ((*(_QWORD *)(v34 + 8) & 1) != 0)
                  v39 = *(const char **)(v34 + 16);
                else
                  v39 = (const char *)(v34 + 9);
              }
              while ((strcmp(v39, v36) & 0x80000000) == 0);
LABEL_74:
              ;
            }
            while (v9 < v34);
          }
          if (v9 - 64 != v7)
          {
            re::DynamicString::operator=((re::DynamicString *)v7, (re::DynamicString *)(v9 - 64));
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v9 - 32);
            re::FixedArray<float>::operator=((uint64_t *)(v7 + 40), (uint64_t *)(v9 - 24));
          }
          re::DynamicString::operator=((re::DynamicString *)(v9 - 64), (re::DynamicString *)&v151);
          *(_DWORD *)(v9 - 32) = v153;
          re::FixedArray<float>::operator=((uint64_t *)(v9 - 24), &v154);
          a4 = v141;
          if (v154)
          {
            if (v155)
            {
              (*(void (**)(void))(*(_QWORD *)v154 + 40))();
              v155 = 0;
              v156 = 0;
            }
            v154 = 0;
          }
          if ((_QWORD)v151 && (BYTE8(v151) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v151 + 40))();
          v33 = v29 >= v30;
          v8 = a2;
          if (!v33)
            goto LABEL_88;
          v40 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v7, v9 - 64, a3);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9, a2, a3);
          if (!(_DWORD)result)
          {
            if (v40)
              continue;
LABEL_88:
            result = std::__introsort<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,false>(v7, v9 - 64, a3, v141, a5 & 1);
LABEL_89:
            a5 = 0;
            continue;
          }
          a2 = v9 - 64;
          if (v40)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v9 == v8)
            return result;
          v62 = v9 + 64;
          if (v9 + 64 == a2)
            return result;
          v63 = 0;
          v64 = v7;
          while (1)
          {
            v65 = v64;
            v64 = v62;
            if (*a3)
            {
              if ((*(_QWORD *)(v65 + 72) & 1) != 0)
                v66 = *(const char **)(v65 + 80);
              else
                v66 = (const char *)(v65 + 73);
              if ((*(_QWORD *)(v65 + 8) & 1) != 0)
                v67 = *(const char **)(v65 + 16);
              else
                v67 = (const char *)(v65 + 9);
              result = strcmp(v66, v67);
              if ((result & 0x80000000) != 0)
              {
LABEL_195:
                v151 = 0u;
                v152 = 0u;
                v68 = *(_QWORD *)(v65 + 64);
                *(_QWORD *)(v65 + 64) = 0;
                v69 = v152;
                v70 = *(_QWORD *)(v64 + 24);
                *(_QWORD *)&v152 = *(_QWORD *)(v64 + 16);
                *(_QWORD *)(v64 + 16) = v69;
                *((_QWORD *)&v152 + 1) = v70;
                *(_QWORD *)(v64 + 24) = 0;
                v71 = *(_QWORD *)(v64 + 8);
                *(_QWORD *)&v151 = v68;
                *((_QWORD *)&v151 + 1) = v71;
                *(_QWORD *)(v64 + 8) = 0;
                v153 = *(_DWORD *)(v65 + 96);
                v72 = *(_QWORD *)(v65 + 112);
                v154 = *(_QWORD *)(v65 + 104);
                v155 = v72;
                *(_QWORD *)(v65 + 104) = 0;
                *(_QWORD *)(v65 + 112) = 0;
                v156 = *(_QWORD *)(v65 + 120);
                *(_QWORD *)(v65 + 120) = 0;
                re::DynamicString::operator=((re::DynamicString *)v64, (re::DynamicString *)v65);
                *(_DWORD *)(v64 + 32) = *(_DWORD *)(v65 + 32);
                v73 = (uint64_t *)(v65 + 40);
                re::FixedArray<float>::operator=((uint64_t *)(v64 + 40), (uint64_t *)(v65 + 40));
                if (v65 != v7)
                {
                  v74 = v63;
                  do
                  {
                    v75 = v7 + v74;
                    if (*a3)
                    {
                      if ((BYTE8(v151) & 1) != 0)
                        v76 = (const char *)v152;
                      else
                        v76 = (char *)&v151 + 9;
                      if ((*(_QWORD *)(v75 - 56) & 1) != 0)
                        v77 = *(const char **)(v75 - 48);
                      else
                        v77 = (const char *)(v75 - 55);
                      if ((strcmp(v76, v77) & 0x80000000) == 0)
                      {
                        v65 = v7 + v74;
                        v73 = (uint64_t *)(v7 + v74 + 40);
                        goto LABEL_210;
                      }
                    }
                    else if (HIWORD(v153) >= *(unsigned __int16 *)(v75 - 30))
                    {
                      goto LABEL_210;
                    }
                    re::DynamicString::operator=((re::DynamicString *)(v7 + v74), (re::DynamicString *)(v75 - 64));
                    *(_DWORD *)(v7 + v74 + 32) = *(_DWORD *)(v7 + v74 - 32);
                    v73 = (uint64_t *)(v65 - 24);
                    re::FixedArray<float>::operator=((uint64_t *)(v7 + v74 + 40), (uint64_t *)(v7 + v74 - 24));
                    v65 -= 64;
                    v74 -= 64;
                  }
                  while (v74);
                  v73 = (uint64_t *)(v7 + 40);
                }
                v65 = v7;
LABEL_210:
                re::DynamicString::operator=((re::DynamicString *)v65, (re::DynamicString *)&v151);
                *(_DWORD *)(v65 + 32) = v153;
                re::FixedArray<float>::operator=(v73, &v154);
                if (v154)
                {
                  if (v155)
                  {
                    (*(void (**)(void))(*(_QWORD *)v154 + 40))();
                    v155 = 0;
                    v156 = 0;
                  }
                  v154 = 0;
                }
                result = v151;
                if ((_QWORD)v151 && (BYTE8(v151) & 1) != 0)
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v151 + 40))();
              }
            }
            else if (*(unsigned __int16 *)(v65 + 98) < *(unsigned __int16 *)(v65 + 34))
            {
              goto LABEL_195;
            }
            v62 = v64 + 64;
            v63 += 64;
            if (v64 + 64 == a2)
              return result;
          }
        }
        if (v9 == v8)
          return result;
        v127 = v9 + 64;
        if (v9 + 64 == a2)
          return result;
        v128 = (uint64_t *)(v9 + 104);
        do
        {
          v129 = v7;
          v7 = v127;
          if (*a3)
          {
            if ((*(_QWORD *)(v129 + 72) & 1) != 0)
              v130 = *(const char **)(v129 + 80);
            else
              v130 = (const char *)(v129 + 73);
            if ((*(_QWORD *)(v129 + 8) & 1) != 0)
              v131 = *(const char **)(v129 + 16);
            else
              v131 = (const char *)(v129 + 9);
            result = strcmp(v130, v131);
            v132 = a2;
            if ((result & 0x80000000) == 0)
              goto LABEL_371;
          }
          else
          {
            v132 = a2;
            if (*(unsigned __int16 *)(v129 + 98) >= *(unsigned __int16 *)(v129 + 34))
              goto LABEL_371;
          }
          v151 = 0u;
          v152 = 0u;
          *(_QWORD *)&v151 = *(_QWORD *)v7;
          *(_QWORD *)v7 = 0;
          v133 = v152;
          v134 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)&v152 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = v133;
          *((_QWORD *)&v152 + 1) = v134;
          *(_QWORD *)(v7 + 24) = 0;
          *((_QWORD *)&v151 + 1) = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          v153 = *(_DWORD *)(v129 + 96);
          v135 = *(_QWORD *)(v129 + 112);
          v154 = *(_QWORD *)(v129 + 104);
          v155 = v135;
          *(_QWORD *)(v129 + 104) = 0;
          *(_QWORD *)(v129 + 112) = 0;
          v156 = *(_QWORD *)(v129 + 120);
          *(_QWORD *)(v129 + 120) = 0;
          for (i = v128; ; i -= 8)
          {
            re::DynamicString::operator=((re::DynamicString *)(i - 5), (re::DynamicString *)(i - 13));
            *((_DWORD *)i - 2) = *((_DWORD *)i - 18);
            re::FixedArray<float>::operator=(i, i - 8);
            if (*a3)
              break;
            if (HIWORD(v153) >= *((unsigned __int16 *)i - 67))
              goto LABEL_364;
LABEL_363:
            ;
          }
          if ((BYTE8(v151) & 1) != 0)
            v137 = (const char *)v152;
          else
            v137 = (char *)&v151 + 9;
          if ((*(i - 20) & 1) != 0)
            v138 = (const char *)*(i - 19);
          else
            v138 = (char *)i - 159;
          if (strcmp(v137, v138) < 0)
            goto LABEL_363;
LABEL_364:
          re::DynamicString::operator=((re::DynamicString *)(i - 13), (re::DynamicString *)&v151);
          *((_DWORD *)i - 18) = v153;
          re::FixedArray<float>::operator=(i - 8, &v154);
          if (v154)
          {
            if (v155)
            {
              (*(void (**)(void))(*(_QWORD *)v154 + 40))();
              v155 = 0;
              v156 = 0;
            }
            v154 = 0;
          }
          result = v151;
          if ((_QWORD)v151 && (BYTE8(v151) & 1) != 0)
            result = (*(uint64_t (**)(void))(*(_QWORD *)v151 + 40))();
LABEL_371:
          v127 = v7 + 64;
          v128 += 8;
        }
        while (v7 + 64 != v132);
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a2, a3, a4, a6);
  if (!*a6)
  {
    if (*(unsigned __int16 *)(a5 + 34) >= *(unsigned __int16 *)(a4 + 34))
      return result;
LABEL_11:
    result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a4, a5);
    if (*a6)
    {
      if ((*(_QWORD *)(a4 + 8) & 1) != 0)
        v15 = *(const char **)(a4 + 16);
      else
        v15 = (const char *)(a4 + 9);
      if ((*(_QWORD *)(a3 + 8) & 1) != 0)
        v16 = *(const char **)(a3 + 16);
      else
        v16 = (const char *)(a3 + 9);
      result = strcmp(v15, v16);
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (*(unsigned __int16 *)(a4 + 34) >= *(unsigned __int16 *)(a3 + 34))
    {
      return result;
    }
    result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a3, a4);
    if (*a6)
    {
      if ((*(_QWORD *)(a3 + 8) & 1) != 0)
        v17 = *(const char **)(a3 + 16);
      else
        v17 = (const char *)(a3 + 9);
      if ((*(_QWORD *)(a2 + 8) & 1) != 0)
        v18 = *(const char **)(a2 + 16);
      else
        v18 = (const char *)(a2 + 9);
      result = strcmp(v17, v18);
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (*(unsigned __int16 *)(a3 + 34) >= *(unsigned __int16 *)(a2 + 34))
    {
      return result;
    }
    result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
    if (*a6)
    {
      if ((*(_QWORD *)(a2 + 8) & 1) != 0)
        v19 = *(const char **)(a2 + 16);
      else
        v19 = (const char *)(a2 + 9);
      if ((*(_QWORD *)(a1 + 8) & 1) != 0)
        v20 = *(const char **)(a1 + 16);
      else
        v20 = (const char *)(a1 + 9);
      result = strcmp(v19, v20);
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (*(unsigned __int16 *)(a2 + 34) >= *(unsigned __int16 *)(a1 + 34))
    {
      return result;
    }
    return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a1, a2);
  }
  if ((*(_QWORD *)(a5 + 8) & 1) != 0)
    v13 = *(const char **)(a5 + 16);
  else
    v13 = (const char *)(a5 + 9);
  if ((*(_QWORD *)(a4 + 8) & 1) != 0)
    v14 = *(const char **)(a4 + 16);
  else
    v14 = (const char *)(a4 + 9);
  result = strcmp(v13, v14);
  if ((result & 0x80000000) != 0)
    goto LABEL_11;
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;

  v7 = result;
  if (*a4)
  {
    if ((*(_QWORD *)(a2 + 8) & 1) != 0)
      v8 = *(const char **)(a2 + 16);
    else
      v8 = (const char *)(a2 + 9);
    if ((*(_QWORD *)(result + 8) & 1) != 0)
      v9 = *(const char **)(result + 16);
    else
      v9 = (const char *)(result + 9);
    v10 = strcmp(v8, v9);
    if ((*(_QWORD *)(a3 + 8) & 1) != 0)
      v11 = *(const char **)(a3 + 16);
    else
      v11 = (const char *)(a3 + 9);
    result = strcmp(v11, v8);
    if (v10 < 0)
    {
      if ((result & 0x80000000) != 0)
      {
LABEL_13:
        v12 = v7;
LABEL_39:
        v19 = a3;
        return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v12, v19);
      }
LABEL_16:
      result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v7, a2);
      if (*a4)
      {
        if ((*(_QWORD *)(a3 + 8) & 1) != 0)
          v15 = *(const char **)(a3 + 16);
        else
          v15 = (const char *)(a3 + 9);
        if ((*(_QWORD *)(a2 + 8) & 1) != 0)
          v16 = *(const char **)(a2 + 16);
        else
          v16 = (const char *)(a2 + 9);
        result = strcmp(v15, v16);
        if ((result & 0x80000000) == 0)
          return result;
      }
      else if (*(unsigned __int16 *)(a3 + 34) >= *(unsigned __int16 *)(a2 + 34))
      {
        return result;
      }
      v12 = a2;
      goto LABEL_39;
    }
    if ((result & 0x80000000) == 0)
      return result;
  }
  else
  {
    v13 = *(unsigned __int16 *)(a2 + 34);
    v14 = *(unsigned __int16 *)(a3 + 34);
    if (v13 < *(unsigned __int16 *)(result + 34))
    {
      if (v14 < v13)
        goto LABEL_13;
      goto LABEL_16;
    }
    if (v14 >= v13)
      return result;
  }
  result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
  if (!*a4)
  {
    if (*(unsigned __int16 *)(a2 + 34) >= *(unsigned __int16 *)(v7 + 34))
      return result;
    goto LABEL_41;
  }
  if ((*(_QWORD *)(a2 + 8) & 1) != 0)
    v17 = *(const char **)(a2 + 16);
  else
    v17 = (const char *)(a2 + 9);
  if ((*(_QWORD *)(v7 + 8) & 1) != 0)
    v18 = *(const char **)(v7 + 16);
  else
    v18 = (const char *)(v7 + 9);
  result = strcmp(v17, v18);
  if ((result & 0x80000000) != 0)
  {
LABEL_41:
    v12 = v7;
    v19 = a2;
    return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v12, v19);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v6;
  _BOOL8 result;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a2;
  v6 = (a2 - a1) >> 6;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (!*a3)
      {
        if (*(unsigned __int16 *)(a2 - 30) >= *(unsigned __int16 *)(a1 + 34))
          return result;
LABEL_54:
        std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a1, v4 - 64);
        return 1;
      }
      if ((*(_QWORD *)(a2 - 56) & 1) != 0)
        v8 = *(const char **)(a2 - 48);
      else
        v8 = (const char *)(a2 - 55);
      if ((*(_QWORD *)(a1 + 8) & 1) != 0)
        v9 = *(const char **)(a1 + 16);
      else
        v9 = (const char *)(a1 + 9);
      if (strcmp(v8, v9) < 0)
        goto LABEL_54;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a1 + 64, a2 - 64, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a1 + 64, a1 + 128, a2 - 64, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,0>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64, a3);
      return 1;
    default:
      v10 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a1 + 64, a1 + 128, a3);
      v11 = a1 + 192;
      if (a1 + 192 == v4)
        return 1;
      v12 = 0;
      v13 = 0;
      v28 = v4;
      while (2)
      {
        if (*a3)
        {
          v14 = *(_QWORD *)(v11 + 8);
          v15 = *(const char **)(v11 + 16);
          if ((v14 & 1) != 0)
            v16 = *(const char **)(v11 + 16);
          else
            v16 = (const char *)(v11 + 9);
          if ((*(_QWORD *)(v10 + 8) & 1) != 0)
            v17 = *(const char **)(v10 + 16);
          else
            v17 = (const char *)(v10 + 9);
          if ((strcmp(v16, v17) & 0x80000000) == 0)
            goto LABEL_48;
        }
        else
        {
          if (*(unsigned __int16 *)(v11 + 34) >= *(unsigned __int16 *)(v10 + 34))
            goto LABEL_48;
          v14 = *(_QWORD *)(v11 + 8);
          v15 = *(const char **)(v11 + 16);
        }
        v18 = *(_QWORD *)v11;
        v19 = *(_QWORD *)(v11 + 24);
        v31 = v15;
        v32 = v19;
        v29 = v18;
        v30 = v14;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v33 = *(_DWORD *)(v11 + 32);
        v20 = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(v11 + 40) = 0;
        v21 = *(_QWORD *)(v11 + 48);
        v22 = *(_QWORD *)(v11 + 56);
        v34 = v20;
        v35 = v21;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = 0;
        v36 = v22;
        re::DynamicString::operator=((re::DynamicString *)v11, (re::DynamicString *)v10);
        *(_DWORD *)(v11 + 32) = *(_DWORD *)(v10 + 32);
        v23 = (uint64_t *)(v10 + 40);
        re::FixedArray<float>::operator=((uint64_t *)(v11 + 40), (uint64_t *)(v10 + 40));
        if (v10 == a1)
        {
          v10 = a1;
        }
        else
        {
          v24 = v12;
          do
          {
            v25 = a1 + v24;
            if (*a3)
            {
              if ((v30 & 1) != 0)
                v26 = v31;
              else
                v26 = (char *)&v30 + 1;
              if ((*(_QWORD *)(v25 + 72) & 1) != 0)
                v27 = *(const char **)(v25 + 80);
              else
                v27 = (const char *)(v25 + 73);
              if ((strcmp(v26, v27) & 0x80000000) == 0)
              {
                v23 = (uint64_t *)(a1 + v24 + 168);
                v10 = a1 + v24 + 128;
                goto LABEL_39;
              }
            }
            else if (HIWORD(v33) >= *(unsigned __int16 *)(v25 + 98))
            {
              goto LABEL_39;
            }
            re::DynamicString::operator=((re::DynamicString *)(v25 + 128), (re::DynamicString *)(v25 + 64));
            *(_DWORD *)(a1 + v24 + 160) = *(_DWORD *)(a1 + v24 + 96);
            v23 = (uint64_t *)(v10 - 24);
            re::FixedArray<float>::operator=((uint64_t *)(a1 + v24 + 168), (uint64_t *)(a1 + v24 + 104));
            v24 -= 64;
            v10 -= 64;
          }
          while (v24 != -128);
          v23 = (uint64_t *)(a1 + 40);
          v10 = a1;
LABEL_39:
          v4 = v28;
        }
        re::DynamicString::operator=((re::DynamicString *)v10, (re::DynamicString *)&v29);
        *(_DWORD *)(v10 + 32) = v33;
        re::FixedArray<float>::operator=(v23, &v34);
        if (v34)
        {
          if (v35)
          {
            (*(void (**)(void))(*(_QWORD *)v34 + 40))();
            v35 = 0;
            v36 = 0;
          }
          v34 = 0;
        }
        if (v29 && (v30 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v29 + 40))();
        if (++v13 == 8)
          return v11 + 64 == v4;
LABEL_48:
        v10 = v11;
        v12 += 64;
        v11 += 64;
        if (v11 == v4)
          return 1;
        continue;
      }
  }
}

uint64_t std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 32);
  v3 = (uint64_t *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = v4;
  *(_QWORD *)(a1 + 40) = 0;
  v13 = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *((_DWORD *)re::DynamicString::operator=((re::DynamicString *)a1, (re::DynamicString *)a2) + 8) = *(_DWORD *)(a2 + 32);
  re::FixedArray<float>::operator=(v3, (uint64_t *)(a2 + 40));
  re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v7);
  *(_DWORD *)(a2 + 32) = v10;
  re::FixedArray<float>::operator=((uint64_t *)(a2 + 40), &v11);
  if (v11)
  {
    if (v12)
    {
      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
      v12 = 0;
      v13 = 0;
    }
    v11 = 0;
  }
  result = v7;
  if (v7)
  {
    if ((v8 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v7 + 40))();
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t result;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a2, a3, a5);
  if (!*a5)
  {
    if (*(unsigned __int16 *)(a4 + 34) >= *(unsigned __int16 *)(a3 + 34))
      return result;
LABEL_11:
    result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a3, a4);
    if (*a5)
    {
      if ((*(_QWORD *)(a3 + 8) & 1) != 0)
        v13 = *(const char **)(a3 + 16);
      else
        v13 = (const char *)(a3 + 9);
      if ((*(_QWORD *)(a2 + 8) & 1) != 0)
        v14 = *(const char **)(a2 + 16);
      else
        v14 = (const char *)(a2 + 9);
      result = strcmp(v13, v14);
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (*(unsigned __int16 *)(a3 + 34) >= *(unsigned __int16 *)(a2 + 34))
    {
      return result;
    }
    result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
    if (*a5)
    {
      if ((*(_QWORD *)(a2 + 8) & 1) != 0)
        v15 = *(const char **)(a2 + 16);
      else
        v15 = (const char *)(a2 + 9);
      if ((*(_QWORD *)(a1 + 8) & 1) != 0)
        v16 = *(const char **)(a1 + 16);
      else
        v16 = (const char *)(a1 + 9);
      result = strcmp(v15, v16);
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (*(unsigned __int16 *)(a2 + 34) >= *(unsigned __int16 *)(a1 + 34))
    {
      return result;
    }
    return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a1, a2);
  }
  if ((*(_QWORD *)(a4 + 8) & 1) != 0)
    v11 = *(const char **)(a4 + 16);
  else
    v11 = (const char *)(a4 + 9);
  if ((*(_QWORD *)(a3 + 8) & 1) != 0)
    v12 = *(const char **)(a3 + 16);
  else
    v12 = (const char *)(a3 + 9);
  result = strcmp(v11, v12);
  if ((result & 0x80000000) != 0)
    goto LABEL_11;
  return result;
}

uint64_t re::DynamicArray<re::DynamicString>::DynamicArray(uint64_t a1, re::DynamicString *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  re::DynamicString *v8;
  uint64_t v9;
  re::DynamicString *v10;
  re::DynamicString *v11;
  uint64_t v12;
  re::DynamicString *v13;
  uint64_t v14;
  re::DynamicString *v15;
  const re::DynamicString *v16;
  re::DynamicString *v17;
  uint64_t v18;
  re::DynamicString *v19;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (a3)
  {
    re::DynamicArray<re::DynamicString>::setCapacity((_QWORD *)a1, a3);
    ++*(_DWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6 == -1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v6 >= a3)
    {
      v13 = *(re::DynamicString **)(a1 + 32);
      v14 = 32 * a3;
      do
      {
        v15 = re::DynamicString::operator=(v13, a2);
        a2 = (re::DynamicString *)((char *)a2 + 32);
        v13 = (re::DynamicString *)((char *)v15 + 32);
        v14 -= 32;
      }
      while (v14);
    }
    else
    {
      re::DynamicArray<re::DynamicString>::growCapacity((_QWORD *)a1, a3);
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *(re::DynamicString **)(a1 + 32);
      if (v7)
      {
        v9 = 32 * v7;
        v10 = a2;
        do
        {
          v11 = re::DynamicString::operator=(v8, v10);
          v10 = (re::DynamicString *)((char *)v10 + 32);
          v8 = (re::DynamicString *)((char *)v11 + 32);
          v9 -= 32;
        }
        while (v9);
        v8 = *(re::DynamicString **)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v12 = 0;
      }
      if (v7 != a3)
      {
        v16 = (re::DynamicString *)((char *)a2 + 32 * v7);
        v17 = (re::DynamicString *)((char *)v8 + 32 * v12);
        v18 = 32 * a3 - 32 * v7;
        do
        {
          v19 = re::DynamicString::DynamicString(v17, v16);
          v16 = (const re::DynamicString *)((char *)v16 + 32);
          v17 = (re::DynamicString *)((char *)v19 + 32);
          v18 -= 32;
        }
        while (v18);
      }
      *(_QWORD *)(a1 + 16) = a3;
    }
    ++*(_DWORD *)(a1 + 24);
  }
  return a1;
}

_QWORD *rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::MemoryPoolAllocator(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;

  *a1 = a2;
  if (a3)
  {
    a1[1] = a3;
    v4 = malloc_type_malloc(0x38uLL, 0xB9BD7EEuLL);
    v5 = 0;
  }
  else
  {
    a1[1] = operator new();
    v4 = malloc_type_malloc(0x38uLL, 0xB9BD7EEuLL);
    v5 = a1[1];
  }
  v4[1] = v5;
  a1[2] = v4;
  v4[4] = 0;
  *v4 = v4 + 4;
  v4[5] = 0;
  v4[6] = 0;
  *((_BYTE *)v4 + 24) = 1;
  v4[2] = 1;
  return a1;
}

_QWORD *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(_QWORD *a1)
{
  if (a1[4])
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Destroy((uint64_t)a1);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)(a1 + 5));
  return a1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Destroy(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::~MemoryPoolAllocator(result);
    JUMPOUT(0x2276933B8);
  }
  return result;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::~MemoryPoolAllocator(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 < 2)
    {
      rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Clear(a1);
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(_QWORD *)(v4 + 8);
      if (*(_BYTE *)(v4 + 24))
        free((void *)v4);
      if (v5)
        MEMORY[0x2276933B8](v5, 0xC400A2AC0F1);
    }
    else
    {
      *(_QWORD *)(v2 + 16) = v3 - 1;
    }
  }
  return a1;
}

_QWORD *rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Clear(uint64_t a1)
{
  uint64_t i;
  _QWORD *result;
  uint64_t v4;

  for (i = *(_QWORD *)(a1 + 16); ; i = *(_QWORD *)(a1 + 16))
  {
    result = *(_QWORD **)i;
    v4 = *(_QWORD *)(*(_QWORD *)i + 16);
    if (!v4)
      break;
    *(_QWORD *)i = v4;
    free(result);
  }
  result[1] = 0;
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Bool(uint64_t a1, int a2)
{
  uint64_t result;

  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  if (!a2)
    std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  result = std::ostream::put();
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    return std::ostream::flush();
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t i;
  int v7;
  uint64_t result;

  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  std::ostream::put();
  if (a3)
  {
    for (i = 0; i < a3; ++i)
    {
      v7 = rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::escape[*(unsigned __int8 *)(a2 + i)];
      if (rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::escape[*(unsigned __int8 *)(a2 + i)])
      {
        std::ostream::put();
        std::ostream::put();
        if (v7 != 117)
          continue;
        std::ostream::put();
        std::ostream::put();
        std::ostream::put();
      }
      std::ostream::put();
    }
  }
  result = std::ostream::put();
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    return std::ostream::flush();
  return result;
}

_BYTE *rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(uint64_t a1, rapidjson::internal *a2)
{
  char *v4;
  _BYTE *result;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE v8[10];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  result = rapidjson::internal::u32toa(a2, v8, v4);
  if (v8 != result)
  {
    v6 = result;
    v7 = v8;
    do
    {
      ++v7;
      result = (_BYTE *)std::ostream::put();
    }
    while (v7 != v6);
  }
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    return (_BYTE *)std::ostream::flush();
  return result;
}

char *rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(uint64_t a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *result;
  char *v7;
  char *v8;
  char v9;
  _BYTE v10[28];

  *(_QWORD *)&v10[20] = *MEMORY[0x24BDAC8D0];
  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  if ((a2 & 0x8000000000000000) != 0)
  {
    v5 = v10;
    v9 = 45;
    a2 = -(uint64_t)a2;
  }
  else
  {
    v5 = &v9;
  }
  result = rapidjson::internal::u64toa(a2, v5, v4);
  if (&v9 != result)
  {
    v7 = result;
    v8 = &v9;
    do
    {
      ++v8;
      result = (char *)std::ostream::put();
    }
    while (v8 != v7);
  }
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    return (char *)std::ostream::flush();
  return result;
}

_BYTE *rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(uint64_t a1, unint64_t a2)
{
  char *v4;
  _BYTE *result;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE v8[20];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  result = rapidjson::internal::u64toa(a2, v8, v4);
  if (v8 != result)
  {
    v6 = result;
    v7 = v8;
    do
    {
      ++v7;
      result = (_BYTE *)std::ostream::put();
    }
    while (v7 != v6);
  }
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    return (_BYTE *)std::ostream::flush();
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (v2 == *(_QWORD *)(result + 24))
  {
    *(_BYTE *)(result + 60) = 1;
    return result;
  }
  v3 = *(_QWORD *)(v2 - 16);
  if (*(_BYTE *)(v2 - 8))
  {
    if (v3)
    {
      result = std::ostream::put();
      if ((*(_BYTE *)(v1 + 68) & 1) != 0)
        result = std::ostream::put();
    }
    if ((*(_BYTE *)(v1 + 68) & 1) != 0)
      goto LABEL_13;
    std::ostream::put();
  }
  else
  {
    if (v3)
      std::ostream::put();
    result = std::ostream::put();
    if ((*(_BYTE *)(v2 - 16) & 1) != 0)
      goto LABEL_13;
  }
  result = rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent(v1);
LABEL_13:
  ++*(_QWORD *)(v2 - 16);
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent(uint64_t result)
{
  uint64_t i;

  for (i = ((*(_QWORD *)(result + 32) - *(_QWORD *)(result + 24)) >> 4) * *(unsigned int *)(result + 64); i; --i)
    result = std::ostream::put();
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v2 = 0;
    }
    else
    {
      v4 = operator new();
      *a1 = v4;
      a1[1] = v4;
      v2 = a1[2];
    }
    v3 = a1[5];
  }
  v5 = a1[3] - v2 + 16;
  if (v3 <= v5)
    v6 = v5;
  else
    v6 = v3;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v6);
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(_QWORD *a1, size_t size)
{
  void *v4;
  uint64_t v5;
  char *result;

  v4 = (void *)a1[2];
  v5 = a1[3];
  if (size)
  {
    result = (char *)malloc_type_realloc(v4, size, 0x5B5BF86EuLL);
  }
  else
  {
    free(v4);
    result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (_QWORD)v4];
  a1[4] = &result[size];
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *,false>(uint64_t result, unsigned __int16 *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unint64_t v20;
  unsigned int v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unint64_t v38;
  unsigned __int16 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  re::DynamicString *v54;
  re::DynamicString *v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  re::DynamicString *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 *v67;
  re::DynamicString *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  uint64_t v77;
  re::DynamicString *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  re::DynamicString *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  re::DynamicString *v89;
  re::DynamicString *v90;
  _QWORD *v92;
  unsigned __int16 *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 *v98;
  unsigned int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v7 = result;
LABEL_2:
  v8 = (unsigned __int16 *)v7;
  while (2)
  {
    v7 = (uint64_t)v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = v9 >> 6;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 15) < *(unsigned __int16 *)(v7 + 34))
        {
          v43 = v7;
          v44 = (uint64_t)(a2 - 32);
          return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v43, v44);
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v7, v7 + 64, (uint64_t)(a2 - 32));
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v7, v7 + 64, v7 + 128, (uint64_t)(a2 - 32));
      case 5uLL:
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v7, v7 + 64, v7 + 128, v7 + 192);
        if (*(a2 - 15) < *(unsigned __int16 *)(v7 + 226))
        {
          result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v7 + 192, (uint64_t)(a2 - 32));
          if (*(unsigned __int16 *)(v7 + 226) < *(unsigned __int16 *)(v7 + 162))
          {
            result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v7 + 128, v7 + 192);
            if (*(unsigned __int16 *)(v7 + 162) < *(unsigned __int16 *)(v7 + 98))
            {
              result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v7 + 64, v7 + 128);
              if (*(unsigned __int16 *)(v7 + 98) < *(unsigned __int16 *)(v7 + 34))
              {
                v43 = v7;
                v44 = v7 + 64;
                return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v43, v44);
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 1535)
        {
          if (!a3)
          {
            if ((unsigned __int16 *)v7 != a2)
            {
              v56 = (v10 - 2) >> 1;
              v57 = v56;
              do
              {
                v58 = v57;
                if (v56 >= v57)
                {
                  v59 = (2 * v57) | 1;
                  v60 = (unsigned __int16 *)(v7 + (v59 << 6));
                  if (2 * v58 + 2 < (uint64_t)v10)
                  {
                    v61 = v60[17];
                    v62 = v60[49];
                    v60 += 32 * (unint64_t)(v61 < v62);
                    if (v61 < v62)
                      v59 = 2 * v58 + 2;
                  }
                  v63 = v7 + (v58 << 6);
                  if (v60[17] >= *(unsigned __int16 *)(v63 + 34))
                  {
                    v64 = (re::DynamicString *)(v7 + (v58 << 6));
                    v106 = 0u;
                    v107 = 0u;
                    *(_QWORD *)&v106 = *(_QWORD *)v64;
                    *(_QWORD *)v64 = 0;
                    v65 = v107;
                    *(_QWORD *)&v107 = *((_QWORD *)v64 + 2);
                    *((_QWORD *)v64 + 2) = v65;
                    *((_QWORD *)&v107 + 1) = *((_QWORD *)v64 + 3);
                    *((_QWORD *)v64 + 3) = 0;
                    v66 = *((_QWORD *)&v106 + 1);
                    *((_QWORD *)&v106 + 1) = *((_QWORD *)v64 + 1);
                    *((_QWORD *)v64 + 1) = v66;
                    v108 = *(_DWORD *)(v63 + 32);
                    v109 = *(_QWORD *)(v63 + 40);
                    *(_QWORD *)(v63 + 40) = 0;
                    v110 = *(_QWORD *)(v63 + 48);
                    *(_QWORD *)(v63 + 48) = 0;
                    v111 = *(_QWORD *)(v63 + 56);
                    *(_QWORD *)(v63 + 56) = 0;
                    do
                    {
                      v67 = v60;
                      v68 = re::DynamicString::operator=(v64, (re::DynamicString *)v60);
                      *((_DWORD *)v68 + 8) = *((_DWORD *)v67 + 8);
                      re::FixedArray<float>::operator=((uint64_t *)v68 + 5, (uint64_t *)v67 + 5);
                      if (v56 < v59)
                        break;
                      v69 = (2 * v59) | 1;
                      v60 = (unsigned __int16 *)(v7 + (v69 << 6));
                      if (2 * v59 + 2 < (uint64_t)v10)
                      {
                        v70 = v60[17];
                        v71 = v60[49];
                        v60 += 32 * (unint64_t)(v70 < v71);
                        if (v70 < v71)
                          v69 = 2 * v59 + 2;
                      }
                      v64 = (re::DynamicString *)v67;
                      v59 = v69;
                    }
                    while (v60[17] >= HIWORD(v108));
                    re::DynamicString::operator=((re::DynamicString *)v67, (re::DynamicString *)&v106);
                    *((_DWORD *)v67 + 8) = v108;
                    re::FixedArray<float>::operator=((uint64_t *)v67 + 5, &v109);
                    if (v109)
                    {
                      if (v110)
                      {
                        (*(void (**)(void))(*(_QWORD *)v109 + 40))();
                        v110 = 0;
                        v111 = 0;
                      }
                      v109 = 0;
                    }
                    if ((_QWORD)v106 && (BYTE8(v106) & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v106 + 40))();
                  }
                }
                v57 = v58 - 1;
              }
              while (v58);
              v72 = (unint64_t)v9 >> 6;
              do
              {
                v73 = 0;
                v100 = 0u;
                v101 = 0u;
                *(_QWORD *)&v100 = *(_QWORD *)v7;
                *(_QWORD *)v7 = 0;
                v74 = v101;
                v75 = *(_QWORD *)(v7 + 24);
                *(_QWORD *)&v101 = *(_QWORD *)(v7 + 16);
                v76 = a2;
                *(_QWORD *)(v7 + 16) = v74;
                *((_QWORD *)&v101 + 1) = v75;
                *(_QWORD *)(v7 + 24) = 0;
                *((_QWORD *)&v100 + 1) = *(_QWORD *)(v7 + 8);
                *(_QWORD *)(v7 + 8) = 0;
                v102 = *(_DWORD *)(v7 + 32);
                v77 = *(_QWORD *)(v7 + 48);
                v103 = *(_QWORD *)(v7 + 40);
                *(_QWORD *)(v7 + 40) = 0;
                v104 = v77;
                *(_QWORD *)(v7 + 48) = 0;
                v105 = *(_QWORD *)(v7 + 56);
                *(_QWORD *)(v7 + 56) = 0;
                v78 = (re::DynamicString *)v7;
                do
                {
                  v79 = (uint64_t *)((char *)v78 + 64 * v73 + 64);
                  v80 = (2 * v73) | 1;
                  v81 = 2 * v73 + 2;
                  if (v81 < v72)
                  {
                    v82 = *((unsigned __int16 *)v79 + 17);
                    v83 = *((unsigned __int16 *)v79 + 49);
                    v79 += 8 * (unint64_t)(v82 < v83);
                    if (v82 < v83)
                      v80 = v81;
                  }
                  v84 = re::DynamicString::operator=(v78, (re::DynamicString *)v79);
                  *((_DWORD *)v84 + 8) = *((_DWORD *)v79 + 8);
                  re::FixedArray<float>::operator=((uint64_t *)v84 + 5, v79 + 5);
                  v78 = (re::DynamicString *)v79;
                  v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
                a2 -= 32;
                if (v79 == (uint64_t *)(v76 - 32))
                {
                  re::DynamicString::operator=((re::DynamicString *)v79, (re::DynamicString *)&v100);
                  *((_DWORD *)v79 + 8) = v102;
                  re::FixedArray<float>::operator=(v79 + 5, &v103);
                }
                else
                {
                  re::DynamicString::operator=((re::DynamicString *)v79, (re::DynamicString *)(v76 - 32));
                  *((_DWORD *)v79 + 8) = *((_DWORD *)v76 - 8);
                  re::FixedArray<float>::operator=(v79 + 5, (uint64_t *)v76 - 3);
                  re::DynamicString::operator=((re::DynamicString *)(v76 - 32), (re::DynamicString *)&v100);
                  *((_DWORD *)v76 - 8) = v102;
                  re::FixedArray<float>::operator=((uint64_t *)v76 - 3, &v103);
                  v85 = (uint64_t)v79 - v7 + 64;
                  if (v85 >= 65)
                  {
                    v86 = (((unint64_t)v85 >> 6) - 2) >> 1;
                    if (*(unsigned __int16 *)(v7 + (v86 << 6) + 34) < *((unsigned __int16 *)v79 + 17))
                    {
                      v106 = 0u;
                      v107 = 0u;
                      *(_QWORD *)&v106 = *v79;
                      *v79 = 0;
                      v87 = v107;
                      v88 = v79[3];
                      *(_QWORD *)&v107 = v79[2];
                      v79[2] = v87;
                      *((_QWORD *)&v107 + 1) = v88;
                      v79[3] = 0;
                      *((_QWORD *)&v106 + 1) = v79[1];
                      v79[1] = 0;
                      v108 = *((_DWORD *)v79 + 8);
                      v109 = v79[5];
                      v79[5] = 0;
                      v110 = v79[6];
                      v79[6] = 0;
                      v111 = v79[7];
                      v79[7] = 0;
                      do
                      {
                        v89 = (re::DynamicString *)v79;
                        v79 = (uint64_t *)(v7 + (v86 << 6));
                        v90 = re::DynamicString::operator=(v89, (re::DynamicString *)v79);
                        *((_DWORD *)v90 + 8) = *((_DWORD *)v79 + 8);
                        re::FixedArray<float>::operator=((uint64_t *)v90 + 5, v79 + 5);
                        if (!v86)
                          break;
                        v86 = (v86 - 1) >> 1;
                      }
                      while (*(unsigned __int16 *)(v7 + (v86 << 6) + 34) < HIWORD(v108));
                      re::DynamicString::operator=((re::DynamicString *)v79, (re::DynamicString *)&v106);
                      *((_DWORD *)v79 + 8) = v108;
                      re::FixedArray<float>::operator=(v79 + 5, &v109);
                      if (v109)
                      {
                        if (v110)
                        {
                          (*(void (**)(void))(*(_QWORD *)v109 + 40))();
                          v110 = 0;
                          v111 = 0;
                        }
                        v109 = 0;
                      }
                      if ((_QWORD)v106 && (BYTE8(v106) & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v106 + 40))();
                    }
                  }
                }
                if (v103)
                {
                  if (v104)
                  {
                    (*(void (**)(void))(*(_QWORD *)v103 + 40))();
                    v104 = 0;
                    v105 = 0;
                  }
                  v103 = 0;
                }
                result = v100;
                if ((_QWORD)v100 && (BYTE8(v100) & 1) != 0)
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v100 + 40))();
              }
              while (v72-- > 2);
            }
            return result;
          }
          v11 = v7 + (v10 >> 1 << 6);
          if ((unint64_t)v9 <= 0x2000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v7 + (v10 >> 1 << 6), v7, (uint64_t)(a2 - 32));
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v7, v7 + (v10 >> 1 << 6), (uint64_t)(a2 - 32));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v7 + 64, v11 - 64, (uint64_t)(a2 - 64));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v7 + 128, v7 + 64 + (v10 >> 1 << 6), (uint64_t)(a2 - 96));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v11 - 64, v7 + (v10 >> 1 << 6), v7 + 64 + (v10 >> 1 << 6));
            std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v7, v7 + (v10 >> 1 << 6));
          }
          --a3;
          if ((a4 & 1) == 0 && *(unsigned __int16 *)(v7 - 30) >= *(unsigned __int16 *)(v7 + 34))
          {
            v106 = 0u;
            v107 = 0u;
            *(_QWORD *)&v106 = *(_QWORD *)v7;
            *(_QWORD *)v7 = 0;
            v28 = v107;
            v29 = *(_QWORD *)(v7 + 24);
            *(_QWORD *)&v107 = *(_QWORD *)(v7 + 16);
            *(_QWORD *)(v7 + 16) = v28;
            *((_QWORD *)&v107 + 1) = v29;
            *(_QWORD *)(v7 + 24) = 0;
            *((_QWORD *)&v106 + 1) = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = 0;
            v31 = *(_QWORD *)(v7 + 40);
            v108 = *(_DWORD *)(v7 + 32);
            v30 = v108;
            v109 = v31;
            *(_QWORD *)(v7 + 40) = 0;
            v32 = *(_QWORD *)(v7 + 56);
            v110 = *(_QWORD *)(v7 + 48);
            *(_QWORD *)(v7 + 48) = 0;
            v111 = v32;
            *(_QWORD *)(v7 + 56) = 0;
            v33 = HIWORD(v30);
            if (*(a2 - 15) <= HIWORD(v30))
            {
              v36 = (unsigned __int16 *)(v7 + 64);
              do
              {
                v8 = v36;
                if (v36 >= a2)
                  break;
                v37 = v36[17];
                v36 += 32;
              }
              while (v37 <= v33);
            }
            else
            {
              v34 = v7;
              do
              {
                v8 = (unsigned __int16 *)(v34 + 64);
                v35 = *(unsigned __int16 *)(v34 + 98);
                v34 += 64;
              }
              while (v35 <= v33);
            }
            v38 = (unint64_t)a2;
            if (v8 < a2)
            {
              v39 = a2;
              do
              {
                v38 = (unint64_t)(v39 - 32);
                v40 = *(v39 - 15);
                v39 -= 32;
              }
              while (v40 > v33);
            }
            while ((unint64_t)v8 < v38)
            {
              std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)v8, v38);
              do
              {
                v41 = v8[49];
                v8 += 32;
              }
              while (HIWORD(v108) >= v41);
              do
              {
                v42 = *(unsigned __int16 *)(v38 - 30);
                v38 -= 64;
              }
              while (HIWORD(v108) < v42);
            }
            if (v8 - 32 != (unsigned __int16 *)v7)
            {
              re::DynamicString::operator=((re::DynamicString *)v7, (re::DynamicString *)(v8 - 32));
              *(_DWORD *)(v7 + 32) = *((_DWORD *)v8 - 8);
              re::FixedArray<float>::operator=((uint64_t *)(v7 + 40), (uint64_t *)v8 - 3);
            }
            re::DynamicString::operator=((re::DynamicString *)(v8 - 32), (re::DynamicString *)&v106);
            *((_DWORD *)v8 - 8) = v108;
            re::FixedArray<float>::operator=((uint64_t *)v8 - 3, &v109);
            if (v109)
            {
              if (v110)
              {
                (*(void (**)(void))(*(_QWORD *)v109 + 40))();
                v110 = 0;
                v111 = 0;
              }
              v109 = 0;
            }
            result = v106;
            if ((_QWORD)v106 && (BYTE8(v106) & 1) != 0)
              result = (*(uint64_t (**)(void))(*(_QWORD *)v106 + 40))();
            goto LABEL_40;
          }
          v12 = 0;
          v106 = 0u;
          v107 = 0u;
          *(_QWORD *)&v106 = *(_QWORD *)v7;
          *(_QWORD *)v7 = 0;
          v13 = v107;
          v14 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)&v107 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = v13;
          *((_QWORD *)&v107 + 1) = v14;
          *(_QWORD *)(v7 + 24) = 0;
          *((_QWORD *)&v106 + 1) = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          LODWORD(v13) = *(_DWORD *)(v7 + 32);
          v109 = *(_QWORD *)(v7 + 40);
          *(_QWORD *)(v7 + 40) = 0;
          v15 = *(_QWORD *)(v7 + 56);
          v110 = *(_QWORD *)(v7 + 48);
          *(_QWORD *)(v7 + 48) = 0;
          v111 = v15;
          v108 = v13;
          *(_QWORD *)(v7 + 56) = 0;
          v16 = WORD1(v13);
          do
          {
            v17 = *(unsigned __int16 *)(v7 + v12 + 98);
            v12 += 64;
          }
          while (v17 < v16);
          v18 = (unsigned __int16 *)(v7 + v12);
          v19 = a2;
          if (v12 == 64)
          {
            v22 = a2;
            while (v18 < v22)
            {
              v20 = (unint64_t)(v22 - 32);
              v23 = *(v22 - 15);
              v22 -= 32;
              if (v23 < v16)
                goto LABEL_21;
            }
            v20 = (unint64_t)v22;
          }
          else
          {
            do
            {
              v20 = (unint64_t)(v19 - 32);
              v21 = *(v19 - 15);
              v19 -= 32;
            }
            while (v21 >= v16);
          }
LABEL_21:
          v8 = v18;
          if ((unint64_t)v18 < v20)
          {
            v24 = v20;
            do
            {
              std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)v8, v24);
              do
              {
                v25 = v8[49];
                v8 += 32;
              }
              while (v25 < HIWORD(v108));
              do
              {
                v26 = *(unsigned __int16 *)(v24 - 30);
                v24 -= 64;
              }
              while (v26 >= HIWORD(v108));
            }
            while ((unint64_t)v8 < v24);
          }
          if (v8 - 32 != (unsigned __int16 *)v7)
          {
            re::DynamicString::operator=((re::DynamicString *)v7, (re::DynamicString *)(v8 - 32));
            *(_DWORD *)(v7 + 32) = *((_DWORD *)v8 - 8);
            re::FixedArray<float>::operator=((uint64_t *)(v7 + 40), (uint64_t *)v8 - 3);
          }
          re::DynamicString::operator=((re::DynamicString *)(v8 - 32), (re::DynamicString *)&v106);
          *((_DWORD *)v8 - 8) = v108;
          re::FixedArray<float>::operator=((uint64_t *)v8 - 3, &v109);
          if (v109)
          {
            if (v110)
            {
              (*(void (**)(void))(*(_QWORD *)v109 + 40))();
              v110 = 0;
              v111 = 0;
            }
            v109 = 0;
          }
          if ((_QWORD)v106 && (BYTE8(v106) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v106 + 40))();
          if ((unint64_t)v18 < v20)
            goto LABEL_39;
          v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((unsigned __int16 *)v7, v8 - 32);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v8, a2);
          if (!(_DWORD)result)
          {
            if (v27)
              continue;
LABEL_39:
            result = std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *,false>(v7, v8 - 32, a3, a4 & 1);
LABEL_40:
            a4 = 0;
            continue;
          }
          a2 = v8 - 32;
          if (v27)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((unsigned __int16 *)v7 != a2)
          {
            v45 = (_QWORD *)(v7 + 64);
            if ((unsigned __int16 *)(v7 + 64) != a2)
            {
              v46 = 0;
              v47 = (_QWORD *)v7;
              do
              {
                v48 = v45;
                if (*((unsigned __int16 *)v47 + 49) < *((unsigned __int16 *)v47 + 17))
                {
                  v106 = 0u;
                  v107 = 0u;
                  *(_QWORD *)&v106 = *v45;
                  *v45 = 0;
                  v49 = v107;
                  v50 = v48[3];
                  *(_QWORD *)&v107 = v48[2];
                  v48[2] = v49;
                  *((_QWORD *)&v107 + 1) = v50;
                  v48[3] = 0;
                  *((_QWORD *)&v106 + 1) = v48[1];
                  v48[1] = 0;
                  v108 = *((_DWORD *)v47 + 24);
                  v51 = v47[14];
                  v109 = v47[13];
                  v110 = v51;
                  v47[13] = 0;
                  v47[14] = 0;
                  v111 = v47[15];
                  v47[15] = 0;
                  v52 = v46;
                  while (1)
                  {
                    v53 = v7 + v52;
                    re::DynamicString::operator=((re::DynamicString *)(v7 + v52 + 64), (re::DynamicString *)(v7 + v52));
                    *(_DWORD *)(v53 + 96) = *(_DWORD *)(v53 + 32);
                    re::FixedArray<float>::operator=((uint64_t *)(v53 + 104), (uint64_t *)(v53 + 40));
                    if (!v52)
                      break;
                    v52 -= 64;
                    if (HIWORD(v108) >= *(unsigned __int16 *)(v53 - 30))
                    {
                      v54 = (re::DynamicString *)(v7 + v52 + 64);
                      goto LABEL_88;
                    }
                  }
                  v54 = (re::DynamicString *)v7;
LABEL_88:
                  v55 = re::DynamicString::operator=(v54, (re::DynamicString *)&v106);
                  *((_DWORD *)v55 + 8) = v108;
                  re::FixedArray<float>::operator=((uint64_t *)(v53 + 40), &v109);
                  if (v109)
                  {
                    if (v110)
                    {
                      (*(void (**)(void))(*(_QWORD *)v109 + 40))();
                      v110 = 0;
                      v111 = 0;
                    }
                    v109 = 0;
                  }
                  result = v106;
                  if ((_QWORD)v106 && (BYTE8(v106) & 1) != 0)
                    result = (*(uint64_t (**)(void))(*(_QWORD *)v106 + 40))();
                }
                v45 = v48 + 8;
                v46 += 64;
                v47 = v48;
              }
              while (v48 + 8 != (_QWORD *)a2);
            }
          }
        }
        else if ((unsigned __int16 *)v7 != a2)
        {
          v92 = (_QWORD *)(v7 + 64);
          if ((unsigned __int16 *)(v7 + 64) != a2)
          {
            v93 = (unsigned __int16 *)(v7 - 30);
            do
            {
              v94 = v92;
              if (*(unsigned __int16 *)(v7 + 98) < *(unsigned __int16 *)(v7 + 34))
              {
                v106 = 0u;
                v107 = 0u;
                *(_QWORD *)&v106 = *v92;
                *v92 = 0;
                v95 = v107;
                v96 = v94[3];
                *(_QWORD *)&v107 = v94[2];
                v94[2] = v95;
                *((_QWORD *)&v107 + 1) = v96;
                v94[3] = 0;
                *((_QWORD *)&v106 + 1) = v94[1];
                v94[1] = 0;
                v108 = *(_DWORD *)(v7 + 96);
                v97 = *(_QWORD *)(v7 + 112);
                v109 = *(_QWORD *)(v7 + 104);
                v110 = v97;
                *(_QWORD *)(v7 + 104) = 0;
                *(_QWORD *)(v7 + 112) = 0;
                v111 = *(_QWORD *)(v7 + 120);
                *(_QWORD *)(v7 + 120) = 0;
                v98 = v93;
                do
                {
                  re::DynamicString::operator=((re::DynamicString *)(v98 + 47), (re::DynamicString *)(v98 + 15));
                  *(_DWORD *)(v98 + 63) = *(_DWORD *)(v98 + 31);
                  re::FixedArray<float>::operator=((uint64_t *)(v98 + 67), (uint64_t *)(v98 + 35));
                  v99 = *v98;
                  v98 -= 32;
                }
                while (HIWORD(v108) < v99);
                re::DynamicString::operator=((re::DynamicString *)(v98 + 47), (re::DynamicString *)&v106);
                *(_DWORD *)(v98 + 63) = v108;
                re::FixedArray<float>::operator=((uint64_t *)(v98 + 67), &v109);
                if (v109)
                {
                  if (v110)
                  {
                    (*(void (**)(void))(*(_QWORD *)v109 + 40))();
                    v110 = 0;
                    v111 = 0;
                  }
                  v109 = 0;
                }
                result = v106;
                if ((_QWORD)v106 && (BYTE8(v106) & 1) != 0)
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v106 + 40))();
              }
              v92 = v94 + 8;
              v93 += 32;
              v7 = (uint64_t)v94;
            }
            while (v94 + 8 != (_QWORD *)a2);
          }
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v5 = result;
  v6 = *(unsigned __int16 *)(a2 + 34);
  v7 = *(unsigned __int16 *)(a3 + 34);
  if (v6 < *(unsigned __int16 *)(result + 34))
  {
    if (v7 >= v6)
    {
      result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(result, a2);
      if (*(unsigned __int16 *)(a3 + 34) >= *(unsigned __int16 *)(a2 + 34))
        return result;
      result = a2;
    }
    v8 = a3;
    return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(result, v8);
  }
  if (v7 < v6)
  {
    result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
    if (*(unsigned __int16 *)(a2 + 34) < *(unsigned __int16 *)(v5 + 34))
    {
      result = v5;
      v8 = a2;
      return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(result, v8);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  re::DynamicString *v16;
  re::DynamicString *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = ((char *)a2 - (char *)a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 15) < a1[17])
      {
        v6 = (uint64_t)(a2 - 32);
        v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((uint64_t)a1, (uint64_t)(a1 + 32), (uint64_t)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((uint64_t)a1, (uint64_t)(a1 + 32), (uint64_t)(a1 + 64), (uint64_t)(a2 - 32));
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((uint64_t)a1, (uint64_t)(a1 + 32), (uint64_t)(a1 + 64), (uint64_t)(a1 + 96));
      if (*(a2 - 15) < a1[113])
      {
        std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)(a1 + 96), (uint64_t)(a2 - 32));
        if (a1[113] < a1[81])
        {
          std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)(a1 + 64), (uint64_t)(a1 + 96));
          if (a1[81] < a1[49])
          {
            std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)(a1 + 32), (uint64_t)(a1 + 64));
            if (a1[49] < a1[17])
            {
              v7 = (uint64_t)a1;
              v6 = (uint64_t)(a1 + 32);
LABEL_4:
              std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((uint64_t)a1, (uint64_t)(a1 + 32), (uint64_t)(a1 + 64));
      v9 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (v9[17] < v8[17])
    {
      v18 = *(_QWORD *)v9;
      v20 = *((_QWORD *)v9 + 3);
      v19 = *(_OWORD *)(v9 + 4);
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = 0;
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      v21 = *((_DWORD *)v9 + 8);
      v12 = *((_QWORD *)v9 + 5);
      v13 = *((_QWORD *)v9 + 6);
      *((_QWORD *)v9 + 5) = 0;
      *((_QWORD *)v9 + 6) = 0;
      v22 = v12;
      v23 = v13;
      v24 = *((_QWORD *)v9 + 7);
      v14 = v10;
      *((_QWORD *)v9 + 7) = 0;
      while (1)
      {
        v15 = (char *)a1 + v14;
        re::DynamicString::operator=((re::DynamicString *)((char *)a1 + v14 + 192), (re::DynamicString *)((char *)a1 + v14 + 128));
        *((_DWORD *)v15 + 56) = *((_DWORD *)v15 + 40);
        re::FixedArray<float>::operator=((uint64_t *)v15 + 29, (uint64_t *)v15 + 21);
        if (v14 == -128)
          break;
        v14 -= 64;
        if (HIWORD(v21) >= *((unsigned __int16 *)v15 + 49))
        {
          v16 = (re::DynamicString *)((char *)a1 + v14 + 192);
          goto LABEL_14;
        }
      }
      v16 = (re::DynamicString *)a1;
LABEL_14:
      v17 = re::DynamicString::operator=(v16, (re::DynamicString *)&v18);
      *((_DWORD *)v17 + 8) = v21;
      re::FixedArray<float>::operator=((uint64_t *)v15 + 21, &v22);
      if (v22)
      {
        if (v23)
        {
          (*(void (**)(void))(*(_QWORD *)v22 + 40))();
          v23 = 0;
          v24 = 0;
        }
        v22 = 0;
      }
      if (v18 && (v19 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v18 + 40))();
      if (++v11 == 8)
        return v9 + 32 == a2;
    }
    v8 = v9;
    v10 += 64;
    v9 += 32;
    if (v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(a1, a2, a3);
  if (*(unsigned __int16 *)(a4 + 34) < *(unsigned __int16 *)(a3 + 34))
  {
    result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a3, a4);
    if (*(unsigned __int16 *)(a3 + 34) < *(unsigned __int16 *)(a2 + 34))
    {
      result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
      if (*(unsigned __int16 *)(a2 + 34) < *(unsigned __int16 *)(a1 + 34))
        return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a1, a2);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_DWORD *)result & 0x80000000) != 0)
  {
    v1 = result;
    *(_DWORD *)result &= ~0x80000000;
    v2 = result + 16;
    v4 = (_OWORD *)(result + 152);
    v3 = *(_QWORD *)(result + 152);
    if (v3)
    {
      if ((*(_BYTE *)(v1 + 160) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(v1 + 168));
      *v4 = 0u;
      v4[1] = 0u;
    }
    v5 = *(_QWORD *)(v1 + 120);
    if (v5)
    {
      if ((*(_BYTE *)(v1 + 128) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v1 + 136));
      *(_OWORD *)(v1 + 120) = 0u;
      *(_OWORD *)(v1 + 136) = 0u;
    }
    v6 = *(_QWORD *)(v1 + 88);
    if (v6)
    {
      if ((*(_BYTE *)(v1 + 96) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v1 + 104));
      *(_OWORD *)(v1 + 88) = 0u;
      *(_OWORD *)(v1 + 104) = 0u;
    }
    v7 = *(_QWORD *)(v1 + 56);
    if (v7)
    {
      if ((*(_BYTE *)(v1 + 64) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v1 + 72));
      *(_OWORD *)(v1 + 56) = 0u;
      *(_OWORD *)(v1 + 72) = 0u;
    }
    return re::DynamicArray<re::TechniqueFunctionConstant>::deinit(v2);
  }
  return result;
}

double re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 208;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,false>(uint64_t result, unint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  re::DynamicString *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  re::DynamicString *v26;
  uint64_t v27;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  re::DynamicString *v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  re::DynamicString *v40;
  re::DynamicString *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  re::DynamicString *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  re::DynamicString *v52;
  re::DynamicString *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  re::DynamicString *v59;
  uint64_t v60;
  uint64_t v61;
  re::DynamicString *v62;
  BOOL v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  v9 = (_QWORD *)result;
LABEL_2:
  v10 = (unint64_t)v9;
  while (2)
  {
    v9 = (_QWORD *)v10;
    v11 = a2 - v10;
    v12 = v11 >> 5;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, a2 - 32, (uint64_t)v9);
        if ((_DWORD)result)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)v9, (re::DynamicString *)(a2 - 32));
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)v9, (re::DynamicString *)(v9 + 4), (re::DynamicString *)(a2 - 32), a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)v9, (re::DynamicString *)(v9 + 4), (re::DynamicString *)(v9 + 8), (re::DynamicString *)(a2 - 32), a3);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,0>((uint64_t)v9, (re::DynamicString *)(v9 + 4), (re::DynamicString *)(v9 + 8), (re::DynamicString *)(v9 + 12), (re::DynamicString *)(a2 - 32), a3);
      default:
        if (v11 > 767)
        {
          if (!a4)
          {
            if (v9 != (_QWORD *)a2)
            {
              v37 = (v12 - 2) >> 1;
              v68 = v37;
              v67 = a2;
              do
              {
                v38 = v37;
                if (v68 >= v37)
                {
                  v39 = (2 * v37) | 1;
                  v40 = (re::DynamicString *)&v9[4 * v39];
                  if (2 * v37 + 2 < (uint64_t)v12
                    && re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v9[4 * v39], (uint64_t)v40 + 32))
                  {
                    v40 = (re::DynamicString *)((char *)v40 + 32);
                    v39 = 2 * v38 + 2;
                  }
                  v41 = (re::DynamicString *)&v9[4 * v38];
                  if (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v40, (uint64_t)v41))
                  {
                    v71 = 0u;
                    v72 = 0u;
                    *(_QWORD *)&v71 = *(_QWORD *)v41;
                    *(_QWORD *)v41 = 0;
                    v42 = &v9[4 * v38];
                    v43 = v72;
                    *(_QWORD *)&v72 = v42[2];
                    v42[2] = v43;
                    *((_QWORD *)&v72 + 1) = v42[3];
                    v42[3] = 0;
                    v44 = *((_QWORD *)&v71 + 1);
                    *((_QWORD *)&v71 + 1) = v42[1];
                    v42[1] = v44;
                    do
                    {
                      v45 = v40;
                      re::DynamicString::operator=(v41, v40);
                      if (v68 < v39)
                        break;
                      v46 = (2 * v39) | 1;
                      v40 = (re::DynamicString *)&v9[4 * v46];
                      v47 = 2 * v39 + 2;
                      if (v47 < (uint64_t)v12
                        && re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v9[4 * v46], (uint64_t)v40 + 32))
                      {
                        v40 = (re::DynamicString *)((char *)v40 + 32);
                        v46 = v47;
                      }
                      v41 = v45;
                      v39 = v46;
                    }
                    while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v40, (uint64_t)&v71));
                    re::DynamicString::operator=(v45, (re::DynamicString *)&v71);
                    if ((_QWORD)v71 && (BYTE8(v71) & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v71 + 40))();
                    a2 = v67;
                  }
                }
                v37 = v38 - 1;
              }
              while (v38);
              v48 = (unint64_t)v11 >> 5;
              do
              {
                v49 = 0;
                v69 = 0u;
                v70 = 0u;
                *(_QWORD *)&v69 = *v9;
                *v9 = 0;
                v50 = v70;
                v51 = v9[3];
                *(_QWORD *)&v70 = v9[2];
                v9[2] = v50;
                *((_QWORD *)&v70 + 1) = v51;
                v9[3] = 0;
                *((_QWORD *)&v69 + 1) = v9[1];
                v9[1] = 0;
                v52 = (re::DynamicString *)v9;
                do
                {
                  v53 = (re::DynamicString *)((char *)v52 + 32 * v49 + 32);
                  v54 = (2 * v49) | 1;
                  v55 = 2 * v49 + 2;
                  if (v55 < v48
                    && re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v52 + 32 * v49 + 32, (uint64_t)v52 + 32 * v49 + 64))
                  {
                    v53 = (re::DynamicString *)((char *)v53 + 32);
                    v54 = v55;
                  }
                  re::DynamicString::operator=(v52, v53);
                  v52 = v53;
                  v49 = v54;
                }
                while (v54 <= (uint64_t)((unint64_t)(v48 - 2) >> 1));
                if (v53 == (re::DynamicString *)(a2 - 32))
                {
                  v56 = a2 - 32;
                  re::DynamicString::operator=(v53, (re::DynamicString *)&v69);
                }
                else
                {
                  re::DynamicString::operator=(v53, (re::DynamicString *)(a2 - 32));
                  v56 = a2 - 32;
                  re::DynamicString::operator=((re::DynamicString *)(a2 - 32), (re::DynamicString *)&v69);
                  v57 = v53 - (re::DynamicString *)v9 + 32;
                  if (v57 >= 33)
                  {
                    v58 = (((unint64_t)v57 >> 5) - 2) >> 1;
                    v59 = (re::DynamicString *)&v9[4 * v58];
                    if (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v59, (uint64_t)v53))
                    {
                      v71 = 0u;
                      v72 = 0u;
                      *(_QWORD *)&v71 = *(_QWORD *)v53;
                      *(_QWORD *)v53 = 0;
                      v60 = v72;
                      v61 = *((_QWORD *)v53 + 3);
                      *(_QWORD *)&v72 = *((_QWORD *)v53 + 2);
                      *((_QWORD *)v53 + 2) = v60;
                      *((_QWORD *)&v72 + 1) = v61;
                      *((_QWORD *)v53 + 3) = 0;
                      *((_QWORD *)&v71 + 1) = *((_QWORD *)v53 + 1);
                      *((_QWORD *)v53 + 1) = 0;
                      do
                      {
                        v62 = v59;
                        re::DynamicString::operator=(v53, v59);
                        if (!v58)
                          break;
                        v58 = (v58 - 1) >> 1;
                        v59 = (re::DynamicString *)&v9[4 * v58];
                        v53 = v62;
                      }
                      while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v59, (uint64_t)&v71));
                      re::DynamicString::operator=(v62, (re::DynamicString *)&v71);
                      if ((_QWORD)v71)
                      {
                        if ((BYTE8(v71) & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v71 + 40))();
                      }
                    }
                  }
                }
                result = v69;
                if ((_QWORD)v69 && (BYTE8(v69) & 1) != 0)
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v69 + 40))();
                v63 = v48-- <= 2;
                a2 = v56;
              }
              while (!v63);
            }
            return result;
          }
          v13 = &v9[4 * (v12 >> 1)];
          if ((unint64_t)v11 <= 0x1000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)&v9[4 * (v12 >> 1)], (re::DynamicString *)v9, (re::DynamicString *)(a2 - 32), a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)v9, (re::DynamicString *)&v9[4 * (v12 >> 1)], (re::DynamicString *)(a2 - 32), a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)(v9 + 4), (re::DynamicString *)(v13 - 4), (re::DynamicString *)(a2 - 64), a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)(v9 + 8), (re::DynamicString *)&v9[4 * (v12 >> 1) + 4], (re::DynamicString *)(a2 - 96), a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)(v13 - 4), (re::DynamicString *)&v9[4 * (v12 >> 1)], (re::DynamicString *)&v9[4 * (v12 >> 1) + 4], a3);
            *(_QWORD *)&v71 = *v9;
            *v9 = 0;
            v14 = v9[3];
            *(_QWORD *)&v72 = v9[2];
            v9[2] = 0;
            *((_QWORD *)&v72 + 1) = v14;
            v9[3] = 0;
            *((_QWORD *)&v71 + 1) = v9[1];
            v9[1] = 0;
            re::DynamicString::operator=((re::DynamicString *)v9, (re::DynamicString *)&v9[4 * (v12 >> 1)]);
            re::DynamicString::operator=((re::DynamicString *)&v9[4 * (v12 >> 1)], (re::DynamicString *)&v71);
            if ((_QWORD)v71 && (BYTE8(v71) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v71 + 40))();
          }
          --a4;
          if ((a5 & 1) == 0
            && !re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)(v9 - 4), (uint64_t)v9))
          {
            v71 = 0u;
            v72 = 0u;
            *(_QWORD *)&v71 = *v9;
            *v9 = 0;
            v22 = v72;
            v23 = v9[3];
            *(_QWORD *)&v72 = v9[2];
            v9[2] = v22;
            *((_QWORD *)&v72 + 1) = v23;
            v9[3] = 0;
            *((_QWORD *)&v71 + 1) = v9[1];
            v9[1] = 0;
            if (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v71, a2 - 32))
            {
              v10 = (unint64_t)v9;
              do
                v10 += 32;
              while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v71, v10));
            }
            else
            {
              v24 = (unint64_t)(v9 + 4);
              do
              {
                v10 = v24;
                if (v24 >= a2)
                  break;
                v25 = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v71, v24);
                v24 = v10 + 32;
              }
              while (!v25);
            }
            v26 = (re::DynamicString *)a2;
            if (v10 < a2)
            {
              v26 = (re::DynamicString *)a2;
              do
                v26 = (re::DynamicString *)((char *)v26 - 32);
              while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v71, (uint64_t)v26));
            }
            while (v10 < (unint64_t)v26)
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(v10, v26);
              do
                v10 += 32;
              while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v71, v10));
              do
                v26 = (re::DynamicString *)((char *)v26 - 32);
              while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v71, (uint64_t)v26));
            }
            if ((_QWORD *)(v10 - 32) != v9)
              re::DynamicString::operator=((re::DynamicString *)v9, (re::DynamicString *)(v10 - 32));
            re::DynamicString::operator=((re::DynamicString *)(v10 - 32), (re::DynamicString *)&v71);
            result = v71;
            if ((_QWORD)v71 && (BYTE8(v71) & 1) != 0)
              result = (*(uint64_t (**)(void))(*(_QWORD *)v71 + 40))();
            goto LABEL_38;
          }
          v15 = 0;
          v71 = 0u;
          v72 = 0u;
          *(_QWORD *)&v71 = *v9;
          *v9 = 0;
          v16 = v72;
          v17 = v9[3];
          *(_QWORD *)&v72 = v9[2];
          v9[2] = v16;
          *((_QWORD *)&v72 + 1) = v17;
          v9[3] = 0;
          *((_QWORD *)&v71 + 1) = v9[1];
          v9[1] = 0;
          do
            v15 += 4;
          while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v9[v15], (uint64_t)&v71));
          v18 = &v9[v15];
          v19 = a2;
          if (v15 == 4)
          {
            v19 = a2;
            do
            {
              if ((unint64_t)v18 >= v19)
                break;
              v19 -= 32;
            }
            while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v19, (uint64_t)&v71));
          }
          else
          {
            do
              v19 -= 32;
            while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v19, (uint64_t)&v71));
          }
          if ((unint64_t)v18 >= v19)
          {
            v10 = (unint64_t)&v9[v15];
          }
          else
          {
            v20 = (re::DynamicString *)v19;
            v10 = (unint64_t)v18;
            do
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(v10, v20);
              do
                v10 += 32;
              while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v10, (uint64_t)&v71));
              do
                v20 = (re::DynamicString *)((char *)v20 - 32);
              while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v20, (uint64_t)&v71));
            }
            while (v10 < (unint64_t)v20);
          }
          if ((_QWORD *)(v10 - 32) != v9)
            re::DynamicString::operator=((re::DynamicString *)v9, (re::DynamicString *)(v10 - 32));
          re::DynamicString::operator=((re::DynamicString *)(v10 - 32), (re::DynamicString *)&v71);
          if ((_QWORD)v71 && (BYTE8(v71) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v71 + 40))();
          if ((unint64_t)v18 < v19)
            goto LABEL_37;
          v21 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)v9, v10 - 32, a3);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(v10, a2, a3);
          if (!(_DWORD)result)
          {
            if ((v21 & 1) != 0)
              continue;
LABEL_37:
            result = std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,false>(v9, v10 - 32, a3, a4, a5 & 1);
LABEL_38:
            a5 = 0;
            continue;
          }
          a2 = v10 - 32;
          if ((v21 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        v27 = (uint64_t)(v9 + 4);
        v29 = v9 == (_QWORD *)a2 || v27 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v29)
          {
            v30 = 0;
            v31 = v9;
            do
            {
              v32 = (uint64_t)v31;
              v31 = (_QWORD *)v27;
              result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v27, v32);
              if ((_DWORD)result)
              {
                v71 = 0u;
                v72 = 0u;
                *(_QWORD *)&v71 = *v31;
                *v31 = 0;
                v33 = v72;
                v34 = v31[3];
                *(_QWORD *)&v72 = v31[2];
                v31[2] = v33;
                *((_QWORD *)&v72 + 1) = v34;
                v31[3] = 0;
                *((_QWORD *)&v71 + 1) = v31[1];
                v31[1] = 0;
                v35 = v30;
                while (1)
                {
                  re::DynamicString::operator=((re::DynamicString *)((char *)v9 + v35 + 32), (re::DynamicString *)((char *)v9 + v35));
                  if (!v35)
                    break;
                  v35 -= 32;
                  if (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v71, (uint64_t)v9 + v35))
                  {
                    v36 = (re::DynamicString *)((char *)v9 + v35 + 32);
                    goto LABEL_82;
                  }
                }
                v36 = (re::DynamicString *)v9;
LABEL_82:
                re::DynamicString::operator=(v36, (re::DynamicString *)&v71);
                result = v71;
                if ((_QWORD)v71 && (BYTE8(v71) & 1) != 0)
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v71 + 40))();
              }
              v27 = (uint64_t)(v31 + 4);
              v30 += 32;
            }
            while (v31 + 4 != (_QWORD *)a2);
          }
        }
        else if (!v29)
        {
          do
          {
            v64 = (_QWORD *)v27;
            result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v27, (uint64_t)v9);
            if ((_DWORD)result)
            {
              v71 = 0u;
              v72 = 0u;
              *(_QWORD *)&v71 = *v64;
              *v64 = 0;
              v65 = v72;
              v66 = v64[3];
              *(_QWORD *)&v72 = v64[2];
              v64[2] = v65;
              *((_QWORD *)&v72 + 1) = v66;
              v64[3] = 0;
              *((_QWORD *)&v71 + 1) = v64[1];
              v64[1] = 0;
              do
              {
                re::DynamicString::operator=((re::DynamicString *)(v9 + 4), (re::DynamicString *)v9);
                v9 -= 4;
              }
              while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v71, (uint64_t)v9));
              re::DynamicString::operator=((re::DynamicString *)(v9 + 4), (re::DynamicString *)&v71);
              result = v71;
              if ((_QWORD)v71)
              {
                if ((BYTE8(v71) & 1) != 0)
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v71 + 40))();
              }
            }
            v27 = (uint64_t)(v64 + 4);
            v9 = v64;
          }
          while (v64 + 4 != (_QWORD *)a2);
        }
        return result;
    }
  }
}

BOOL re::PSOToolManager::generateStatistics(void)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  char v25;
  char v26;
  char v27;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v24, a2);
  v7 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 552))
  {
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 560) + 4 * (v6 % *(unsigned int *)(a1 + 576)));
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(a1 + 568);
      v7 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v9 + 56 * v8 + 16, a2))
      {
        v8 = *(_DWORD *)(v9 + 56 * v8 + 8) & 0x7FFFFFFF;
        if (v8 == 0x7FFFFFFF)
          goto LABEL_8;
      }
      v7 = v8;
    }
  }
LABEL_8:
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 568) + 56 * v7 + 48);
  v11 = re::Hash<re::DynamicString>::operator()((uint64_t)&v25, a2);
  v12 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 504))
  {
    v13 = *(unsigned int *)(*(_QWORD *)(a1 + 512) + 4 * (v11 % *(unsigned int *)(a1 + 528)));
    if ((_DWORD)v13 != 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(a1 + 520);
      v12 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v14 + 56 * v13 + 16, a2))
      {
        v13 = *(_DWORD *)(v14 + 56 * v13 + 8) & 0x7FFFFFFF;
        if (v13 == 0x7FFFFFFF)
          goto LABEL_15;
      }
      v12 = v13;
    }
  }
LABEL_15:
  v15 = *(_DWORD *)(*(_QWORD *)(a1 + 520) + 56 * v12 + 48);
  v16 = re::Hash<re::DynamicString>::operator()((uint64_t)&v26, a3);
  if (!*(_QWORD *)(a1 + 552))
  {
    v18 = *(_QWORD *)(a1 + 568);
    goto LABEL_21;
  }
  v17 = *(unsigned int *)(*(_QWORD *)(a1 + 560) + 4 * (v16 % *(unsigned int *)(a1 + 576)));
  v18 = *(_QWORD *)(a1 + 568);
  if ((_DWORD)v17 == 0x7FFFFFFF)
  {
LABEL_21:
    v17 = 0x7FFFFFFFLL;
    goto LABEL_22;
  }
  while (!re::DynamicString::operator==(v18 + 56 * v17 + 16, a3))
  {
    v17 = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
    if (v17 == 0x7FFFFFFF)
      goto LABEL_21;
  }
LABEL_22:
  v19 = *(_DWORD *)(v18 + 56 * v17 + 48);
  v20 = re::Hash<re::DynamicString>::operator()((uint64_t)&v27, a3);
  if (!*(_QWORD *)(a1 + 504))
  {
    v22 = *(_QWORD *)(a1 + 520);
    goto LABEL_28;
  }
  v21 = *(unsigned int *)(*(_QWORD *)(a1 + 512) + 4 * (v20 % *(unsigned int *)(a1 + 528)));
  v22 = *(_QWORD *)(a1 + 520);
  if ((_DWORD)v21 == 0x7FFFFFFF)
  {
LABEL_28:
    v21 = 0x7FFFFFFFLL;
    return (float)(5 * v15 + 10 * v10) > (float)(5 * *(_DWORD *)(v22 + 56 * v21 + 48) + 10 * v19);
  }
  while (!re::DynamicString::operator==(v22 + 56 * v21 + 16, a3))
  {
    v21 = *(_DWORD *)(v22 + 56 * v21 + 8) & 0x7FFFFFFF;
    if (v21 == 0x7FFFFFFF)
      goto LABEL_28;
  }
  return (float)(5 * v15 + 10 * v10) > (float)(5 * *(_DWORD *)(v22 + 56 * v21 + 48) + 10 * v19);
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(uint64_t a1, re::DynamicString *a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  re::DynamicString::operator=((re::DynamicString *)a1, a2);
  re::DynamicString::operator=(a2, (re::DynamicString *)&v4);
  result = v4;
  if (v4)
  {
    if ((v5 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,0>(uint64_t a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *a4, re::DynamicString *a5, uint64_t *a6)
{
  uint64_t result;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, a2, a3, a4, a6);
  result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a6, (uint64_t)a5, (uint64_t)a4);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a4, a5);
    result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a6, (uint64_t)a4, (uint64_t)a3);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a3, a4);
      result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a6, (uint64_t)a3, (uint64_t)a2);
      if ((_DWORD)result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a2, a3);
        result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a6, (uint64_t)a2, a1);
        if ((_DWORD)result)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(a1, a2);
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(uint64_t a1, re::DynamicString *a2, re::DynamicString *a3, uint64_t *a4)
{
  BOOL v8;
  uint64_t result;
  uint64_t v10;

  v8 = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a4, (uint64_t)a2, a1);
  result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a4, (uint64_t)a3, (uint64_t)a2);
  if (v8)
  {
    if ((_DWORD)result)
    {
      v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(a1, a2);
      result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a4, (uint64_t)a3, (uint64_t)a2);
      if (!(_DWORD)result)
        return result;
      v10 = (uint64_t)a2;
    }
    return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(v10, a3);
  }
  else if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a2, a3);
    result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a4, (uint64_t)a2, a1);
    if ((_DWORD)result)
      return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(a1, a2);
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  re::DynamicString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  re::DynamicString *v14;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v6 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      v7 = (re::DynamicString *)(a2 - 32);
      if (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, a2 - 32, a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(a1, v7);
      return v6;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, (re::DynamicString *)(a1 + 32), (re::DynamicString *)(a2 - 32), a3);
      return v6;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, (re::DynamicString *)(a1 + 32), (re::DynamicString *)(a1 + 64), (re::DynamicString *)(a2 - 32), a3);
      return v6;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,0>(a1, (re::DynamicString *)(a1 + 32), (re::DynamicString *)(a1 + 64), (re::DynamicString *)(a1 + 96), (re::DynamicString *)(a2 - 32), a3);
      return v6;
    default:
      v8 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, (re::DynamicString *)(a1 + 32), (re::DynamicString *)(a1 + 64), a3);
      v9 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v9, v8))
  {
LABEL_16:
    v8 = v9;
    v10 += 32;
    v9 += 32;
    if (v9 == a2)
      return 1;
  }
  v16 = *(_QWORD *)v9;
  v18 = *(_QWORD *)(v9 + 24);
  v17 = *(_OWORD *)(v9 + 8);
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  v12 = v10;
  while (1)
  {
    re::DynamicString::operator=((re::DynamicString *)(a1 + v12 + 96), (re::DynamicString *)(a1 + v12 + 64));
    if (v12 == -64)
      break;
    v13 = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v16, a1 + v12 + 32);
    v12 -= 32;
    if (!v13)
    {
      v14 = (re::DynamicString *)(a1 + v12 + 96);
      goto LABEL_12;
    }
  }
  v14 = (re::DynamicString *)a1;
LABEL_12:
  re::DynamicString::operator=(v14, (re::DynamicString *)&v16);
  if (++v11 != 8)
  {
    if (v16 && (v17 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    goto LABEL_16;
  }
  v6 = v9 + 32 == a2;
  if (v16 && (v17 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v16 + 40))();
  return v6;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(uint64_t a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *a4, uint64_t *a5)
{
  uint64_t result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, a2, a3, a5);
  result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a5, (uint64_t)a4, (uint64_t)a3);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a3, a4);
    result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a5, (uint64_t)a3, (uint64_t)a2);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a2, a3);
      result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a5, (uint64_t)a2, a1);
      if ((_DWORD)result)
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(a1, a2);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PSOToolComputeDescriptor>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PSOToolComputeDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PSOToolComputeDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PSOToolComputeDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PSOToolComputeDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          v2 = 136 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 136 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v12 = 0u;
          *((_OWORD *)v12 + 1) = 0u;
          v12[3] = *(_QWORD *)(v8 + v10 + 24);
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          *v13 = 0;
          v15 = *(_QWORD *)(v8 + v10 + 16);
          v13[3] = 0;
          v17 = v7[v10 / 8 + 1];
          v16 = v7[v10 / 8 + 2];
          v12[1] = v14;
          v12[2] = v15;
          v13[1] = v17;
          v13[2] = v16;
          *((_DWORD *)v12 + 16) = 0;
          *((_OWORD *)v12 + 3) = 0u;
          *(_OWORD *)&v7[v10 / 8 + 4] = 0u;
          *(_QWORD *)((char *)v12 + 68) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(&v7[v10 / 8 + 4], (uint64_t *)(v8 + v10 + 32));
          *((_OWORD *)v12 + 5) = 0u;
          v18 = (uint64_t)&v7[v10 / 8 + 10];
          *(_DWORD *)(v18 + 32) = 0;
          *(_OWORD *)(v18 + 16) = 0u;
          *(_QWORD *)(v18 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v18, (uint64_t *)(v8 + v10 + 80));
          *(_BYTE *)(v18 + 48) = *(_BYTE *)(v8 + v10 + 128);
          re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v8 + v10 + 80));
          v19 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v8 + v10 + 32));
          if (*(_QWORD *)(v8 + v10))
          {
            if ((v13[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(v8 + v10) + 40))(*(_QWORD *)(v8 + v10), v13[2], v19);
            *(_OWORD *)v13 = 0u;
            *((_OWORD *)v13 + 1) = 0u;
          }
          v10 += 136;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PSOToolTileDescriptor>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PSOToolTileDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PSOToolTileDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PSOToolTileDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  _QWORD *v24;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PSOToolTileDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xB0uLL))
        {
          v2 = 176 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 176 * a2, 8);
          v24 = result;
          if (result)
          {
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 176, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v24 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v24;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v7 = v5[4];
      v8 = v5[2];
      if (v8)
      {
        v9 = 0;
        v10 = 176 * v8;
        do
        {
          v11 = &v24[v9 / 8];
          v12 = (_QWORD *)(v7 + v9);
          *(_OWORD *)v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(_QWORD *)(v7 + v9 + 24);
          v13 = *(_QWORD *)(v7 + v9 + 8);
          *v11 = *(_QWORD *)(v7 + v9);
          *v12 = 0;
          v14 = *(_QWORD *)(v7 + v9 + 16);
          v12[3] = 0;
          v16 = v24[v9 / 8 + 1];
          v15 = v24[v9 / 8 + 2];
          v11[1] = v13;
          v11[2] = v14;
          v12[1] = v16;
          v12[2] = v15;
          *((_DWORD *)v11 + 16) = 0;
          *((_OWORD *)v11 + 3) = 0u;
          *((_OWORD *)v11 + 2) = 0u;
          *(_QWORD *)((char *)v11 + 68) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(&v24[v9 / 8 + 4], (uint64_t *)(v7 + v9 + 32));
          *((_OWORD *)v11 + 5) = 0u;
          v17 = (uint64_t)&v24[v9 / 8 + 10];
          *(_DWORD *)(v17 + 32) = 0;
          *(_OWORD *)(v17 + 16) = 0u;
          *(_QWORD *)(v17 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v17, (uint64_t *)(v7 + v9 + 80));
          v18 = *(_QWORD *)(v7 + v9 + 128);
          *(_QWORD *)(v17 + 88) = 0;
          *(_DWORD *)(v17 + 80) = 0;
          *(_QWORD *)(v17 + 64) = 0;
          *(_QWORD *)(v17 + 72) = 0;
          *(_QWORD *)(v17 + 48) = v18;
          *(_QWORD *)(v17 + 56) = 0;
          v19 = *(_QWORD *)(v7 + v9 + 144);
          *(_QWORD *)(v17 + 56) = *(_QWORD *)(v7 + v9 + 136);
          v12[17] = 0;
          *(_QWORD *)(v17 + 64) = v19;
          v12[18] = 0;
          v20 = v24[v9 / 8 + 19];
          *(_QWORD *)(v17 + 72) = *(_QWORD *)(v7 + v9 + 152);
          v12[19] = v20;
          v21 = v24[v9 / 8 + 21];
          *(_QWORD *)(v17 + 88) = *(_QWORD *)(v7 + v9 + 168);
          v12[21] = v21;
          ++*((_DWORD *)v12 + 40);
          ++*(_DWORD *)(v17 + 80);
          v22 = *(_QWORD *)(v7 + v9 + 136);
          if (v22)
          {
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
            v12[21] = 0;
            v12[18] = 0;
            v12[19] = 0;
            v12[17] = 0;
            ++*((_DWORD *)v12 + 40);
          }
          re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v12 + 10);
          v23 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v7 + v9 + 32));
          if (*v12)
          {
            if ((v12[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD, double))(*(_QWORD *)*v12 + 40))(*v12, v12[2], v23);
            *(_OWORD *)v12 = 0u;
            *((_OWORD *)v12 + 1) = 0u;
          }
          v9 += 176;
        }
        while (v10 != v9);
        v7 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v7);
      goto LABEL_24;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PSOToolCustomClearDescriptor>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PSOToolCustomClearDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PSOToolCustomClearDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PSOToolCustomClearDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PSOToolCustomClearDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 96 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = (_QWORD *)(v8 + v10);
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *v13 = 0;
          v13[1] = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          v13[2] = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          v13[4] = v16;
          *((_DWORD *)v13 + 6) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v12[9] = 0;
          v12[6] = 0;
          v12[7] = 0;
          v12[5] = 0;
          *((_DWORD *)v12 + 16) = 0;
          v17 = (_QWORD *)(v8 + v10 + 40);
          v18 = *(_QWORD *)(v8 + v10 + 48);
          v12[5] = *v17;
          *v17 = 0;
          v12[6] = v18;
          v13[6] = 0;
          v19 = v7[v10 / 8 + 7];
          v12[7] = *(_QWORD *)(v8 + v10 + 56);
          v13[7] = v19;
          v20 = v7[v10 / 8 + 9];
          v12[9] = *(_QWORD *)(v8 + v10 + 72);
          v13[9] = v20;
          *((_DWORD *)v13 + 16) = *(_DWORD *)(v8 + v10 + 64) + 1;
          *((_DWORD *)v12 + 16) = LODWORD(v7[v10 / 8 + 8]) + 1;
          *((_OWORD *)v12 + 5) = *(_OWORD *)(v8 + v10 + 80);
          if (*v17)
          {
            if (v13[9])
              (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 40))(*v17);
            v13[9] = 0;
            *(_QWORD *)(v8 + v10 + 48) = 0;
            *(_QWORD *)(v8 + v10 + 56) = 0;
            *v17 = 0;
            ++*((_DWORD *)v13 + 16);
          }
          if (*v13)
          {
            if (v13[4])
              (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 40))(*v13);
            v13[4] = 0;
            v13[1] = 0;
            v13[2] = 0;
            *v13 = 0;
            ++*((_DWORD *)v13 + 6);
          }
          v10 += 96;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t re::RenderGraphCompiled::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(result + 392);
  if (v2)
  {
    v4 = result;
    v5 = *(unsigned int **)(result + 408);
    v6 = &v5[v2];
    while (1)
    {
      v7 = *v5;
      if (*(_QWORD *)(v4 + 352) <= v7)
        goto LABEL_11;
      v8 = *(_QWORD *)(v4 + 368);
      v9 = v8 + 192 * v7;
      v10 = *(_QWORD *)(v9 + 136);
      if (v10)
        break;
LABEL_8:
      if (++v5 == v6)
        return result;
    }
    v11 = *(_QWORD **)(v9 + 152);
    v12 = v8 + 192 * v7;
    v13 = 8 * v10;
    while (*(_QWORD *)(v12 + 16) > *v11)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * *v11);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v4, a2);
      ++v11;
      v13 -= 8;
      if (!v13)
        goto LABEL_8;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::RenderFrameData::RenderFrameData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = 0;
  re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(a1, a3, 3);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a3);
  return a1;
}

void re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_25, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::RenderFrameData::~RenderFrameData(re::RenderFrameData *this)
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = (void (***)(_QWORD))*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = re::globalAllocators(this)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 7) = 0;
  }
  re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this);
}

void re::RenderFrameDataStream::~RenderFrameDataStream(re::RenderFrameDataStream *this)
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = (void (***)(_QWORD))*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = re::globalAllocators(this)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 6) = 0;
  }
  re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::deinit((uint64_t *)this);
}

uint64_t re::RenderFrameData::stream(re::RenderFrameData *this, const re::WeakStringID *a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)this, (uint64_t *)a2);
  if (!v4)
  {
    v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), *(_QWORD *)(*((_QWORD *)this + 7) + 8));
    v4 = re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew<re::RenderGraphDataPipe *>((uint64_t)this, (uint64_t *)a2, &v6);
    re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::init(v4, *(_QWORD *)(*((_QWORD *)this + 7) + 8), 3);
  }
  return v4;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 72 * v4 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 72 * v4) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 72 * v4 + 8) == v2)
        return v6 + 72 * v4 + 16;
    }
    return 0;
  }
  return v6 + 72 * v4 + 16;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew<re::RenderGraphDataPipe *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addEmplace<re::RenderGraphDataPipe *>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 72 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 72 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 72 * v10) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 72 * v10;
  return v12 + 16;
}

double re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)v8 = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v8 + 8) = 0;
          re::RenderFrameDataStream::~RenderFrameDataStream((re::RenderFrameDataStream *)(v8 + 16));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addEmplace<re::RenderGraphDataPipe *>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 72 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 72 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 72 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v8 + 8) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v8;
  v15 = *a5;
  *(_DWORD *)(v14 + 48) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_QWORD *)(v14 + 52) = 0x7FFFFFFFLL;
  *(_QWORD *)(v14 + 64) = v15;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  signed int v31;
  _BYTE v32[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v32, 0, 36);
      *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v32, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v32;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v32[8];
      *(_OWORD *)v32 = v5;
      *(_QWORD *)&v32[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v32[24];
      *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v32[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = 64;
        do
        {
          v15 = *(_QWORD *)&v32[16];
          v16 = *(_QWORD *)&v32[16] + v14;
          if ((*(_DWORD *)(*(_QWORD *)&v32[16] + v14 - 64) & 0x80000000) != 0)
          {
            v17 = *(_QWORD *)(v16 - 56);
            v18 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
            v19 = v18 ^ (v18 >> 31);
            v20 = *(unsigned int *)(a1 + 24);
            v21 = v19 % v20;
            v22 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v22 == 0x7FFFFFFF)
            {
              v22 = *(unsigned int *)(a1 + 32);
              v23 = v22;
              if ((_DWORD)v22 == (_DWORD)v20)
              {
                re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, (2 * v12));
                v21 = v19 % *(unsigned int *)(a1 + 24);
                v23 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
                v17 = *(_QWORD *)(v16 - 56);
              }
              *(_DWORD *)(a1 + 32) = v23 + 1;
              v24 = *(_QWORD *)(a1 + 16);
              v25 = *(_DWORD *)(v24 + 72 * v22);
            }
            else
            {
              v24 = *(_QWORD *)(a1 + 16);
              v25 = *(_DWORD *)(v24 + 72 * v22);
              *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
            }
            v26 = 72 * v22;
            *(_DWORD *)(v24 + v26) = v25 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v22) & 0x80000000 | *(_DWORD *)(v13 + 4 * v21);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v22 + 8) = v17;
            v27 = *(_QWORD *)(a1 + 16) + 72 * v22;
            *(_DWORD *)(v27 + 48) = 0;
            *(_OWORD *)(v27 + 16) = 0u;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_QWORD *)(v27 + 52) = 0x7FFFFFFFLL;
            *(_QWORD *)(v27 + 16) = *(_QWORD *)(v16 - 48);
            *(_QWORD *)(v16 - 48) = 0;
            v28 = (_QWORD *)(v15 + v14);
            v29 = *(_QWORD *)(v27 + 24);
            *(_QWORD *)(v27 + 24) = *(_QWORD *)(v15 + v14 - 40);
            *(v28 - 5) = v29;
            v30 = *(_QWORD *)(v27 + 32);
            *(_QWORD *)(v27 + 32) = *(_QWORD *)(v15 + v14 - 32);
            *(v28 - 4) = v30;
            LODWORD(v30) = *(_DWORD *)(v27 + 40);
            *(_DWORD *)(v27 + 40) = *(_DWORD *)(v15 + v14 - 24);
            *((_DWORD *)v28 - 6) = v30;
            LODWORD(v30) = *(_DWORD *)(v27 + 44);
            *(_DWORD *)(v27 + 44) = *(_DWORD *)(v15 + v14 - 20);
            *((_DWORD *)v28 - 5) = v30;
            LODWORD(v30) = *(_DWORD *)(v27 + 48);
            *(_DWORD *)(v27 + 48) = *(_DWORD *)(v15 + v14 - 16);
            *((_DWORD *)v28 - 4) = v30;
            LODWORD(v30) = *(_DWORD *)(v27 + 52);
            *(_DWORD *)(v27 + 52) = *(_DWORD *)(v15 + v14 - 12);
            *((_DWORD *)v28 - 3) = v30;
            *(_QWORD *)(v27 + 64) = 0;
            *(_QWORD *)(v27 + 64) = *(_QWORD *)(v15 + v14);
            *v28 = 0;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v21) = v22;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
            v10 = *(_DWORD *)&v32[32];
          }
          ++v11;
          v14 += 72;
        }
        while (v11 < v10);
      }
      re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v32);
    }
  }
  else
  {
    if (a2)
      v31 = a2;
    else
      v31 = 3;
  }
}

uint64_t re::makeDepthPixelFormatPredictions@<X0>(uint64_t a1@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"Shadow", 6, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 252;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"FullScreen", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arKitPassthrough", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadow", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDepth", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueRadial", 19, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDistance", 21, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputed", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputedYUp", 27, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueBox", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueCheckered", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSky", 20, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSkyCrossfade", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"OnlyPlattersWithDepthVS", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 260;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMask", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMaskProgrammableBlending", 42, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMask", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMaskProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMask", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMaskProgrammableBlending", 44, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 250;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
        return result;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::makeStencilPixelFormatPredictions@<X0>(uint64_t a1@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"Shadow", 6, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"FullScreen", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arKitPassthrough", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadow", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDepth", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueRadial", 19, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDistance", 21, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputed", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputedYUp", 27, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueBox", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueCheckered", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSky", 20, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSkyCrossfade", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"OnlyPlattersWithDepthVS", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 260;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMask", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMaskProgrammableBlending", 42, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMask", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMaskProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMask", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMaskProgrammableBlending", 44, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::makeSampleCountPredictions@<X0>(uint64_t a1@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"Shadow", 6, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"FullScreen", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arKitPassthrough", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadow", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDepth", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueRadial", 19, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDistance", 21, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputed", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputedYUp", 27, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueBox", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueCheckered", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSky", 20, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSkyCrossfade", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"OnlyPlattersWithDepthVS", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 4;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMask", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMaskProgrammableBlending", 42, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMask", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMaskProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMask", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMaskProgrammableBlending", 44, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnly", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClearDepth", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthSU", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthContent", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthEnvironment", 32, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderLinearizedDepth", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 1;
  return re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
        return result;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<int>(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::makePixel0FormatsPredictions@<X0>(uint64_t a1@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"Shadow", 6, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"FullScreen", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 553;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arKitPassthrough", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 553;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadow", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDepth", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueRadial", 19, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDistance", 21, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputed", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputedYUp", 27, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueBox", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueCheckered", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSky", 20, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSkyCrossfade", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMask", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMaskProgrammableBlending", 42, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMask", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMaskProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMask", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMaskProgrammableBlending", 44, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClearDepth", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 25;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthSU", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 25;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthContent", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 25;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthEnvironment", 32, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 25;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderLinearizedDepth", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 25;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::makePixel1FormatsPredictions@<X0>(uint64_t a1@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClearDepth", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 65;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthSU", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 65;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthContent", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 65;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthEnvironment", 32, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 65;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderLinearizedDepth", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 65;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::makePixel2FormatsPredictions@<X0>(uint64_t a1@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"ClearDepth", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 115;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthSU", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 115;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthContent", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 115;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthEnvironment", 32, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 115;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderLinearizedDepth", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  v4 = 115;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

_DWORD *re::makeRenderTargetInfoPrediction@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  _DWORD *v17;
  int v18;
  int v19;
  size_t v20;
  unint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *result;
  uint64_t v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a9 + 8) = 0u;
  v17 = (_DWORD *)(a9 + 8);
  *(_OWORD *)(a9 + 24) = 0u;
  if (a8)
    v18 = 252;
  else
    v18 = 260;
  if (a8)
    v19 = 253;
  else
    v19 = 260;
  *(_DWORD *)(a9 + 48) = 0;
  *(_QWORD *)(a9 + 37) = 0;
  *(_QWORD *)a9 = 0x7300000004;
  *(_DWORD *)(a9 + 36) = v18;
  *(_DWORD *)(a9 + 40) = v19;
  v20 = strlen(a1);
  if (v20)
  {
    MurmurHash3_x64_128((uint64_t)a1, v20, 0, (unint64_t *)v28);
    v21 = (v28[1] + (v28[0] << 6) + ((unint64_t)v28[0] >> 2) - 0x61C8864680B583E9) ^ v28[0];
  }
  else
  {
    v21 = 0;
  }
  v28[0] = v21;
  v22 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a2, v28);
  if (v22)
    *(_DWORD *)(a9 + 36) = *v22;
  v23 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a3, v28);
  if (v23)
    *(_DWORD *)(a9 + 40) = *v23;
  v24 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a4, v28);
  if (v24)
    *(_DWORD *)a9 = *v24;
  v25 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a5, v28);
  if (v25)
    *(_DWORD *)(a9 + 4) = *v25;
  v26 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a6, v28);
  if (v26)
    *v17 = *v26;
  result = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a7, v28);
  if (result)
    *(_DWORD *)(a9 + 12) = *result;
  return result;
}

uint64_t re::getVertexFormatFromDataType(re *a1)
{
  int v1;
  __int16 v2;
  NSObject *v3;
  uint64_t result;
  _DWORD v5[2];
  uint64_t v6;

  v1 = (int)a1;
  v6 = *MEMORY[0x24BDAC8D0];
  v2 = (_WORD)a1 - 3;
  if (((_DWORD)a1 - 3) < 0x32 && ((0x3FFFFFC01E00FuLL >> v2) & 1) != 0)
    return byte_22616D1C8[v2];
  v3 = *re::graphicsLogObjects(a1);
  result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v5[0] = 67109120;
    v5[1] = v1;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Missing mapping of MTLDataType %d to MTLVertexFormat for fallback rendering prediction.", (uint8_t *)v5, 8u);
    return 0;
  }
  return result;
}

void re::makeAttributeTablePrediction(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  re *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int VertexFormatFromDataType;
  char v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[64];
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  int v67;
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  unint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v47 = 0;
  memset(&v46[32], 0, 32);
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  memset(v46, 0, 28);
  v51 = 1;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v59 = 0;
  v58 = 0;
  v63 = 0;
  v64 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0;
  v65 = 0;
  v7 = *((_QWORD *)a1 + 1);
  v65 = 1;
  if (*((_QWORD *)a1 + 1))
  {
    v8 = 0;
    do
    {
      v9 = *((_QWORD *)a1 + 2) + 24 * v8;
      re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)&v36, a2);
      re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)&v32, a3);
      v10 = (re *)*(unsigned __int16 *)(v9 + 18);
      if (v36)
      {
        v11 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v9 >> 31) ^ (*(_QWORD *)v9 >> 1));
        v12 = (0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31);
        v13 = *(unsigned int *)(v37 + 4 * (v12 % v39));
        if ((_DWORD)v13 != 0x7FFFFFFF)
        {
          v14 = v38;
          v15 = *(unsigned int *)(v37 + 4 * (v12 % v39));
          while (!re::StringID::operator==((_QWORD *)(v14 + 32 * v15 + 8), (_QWORD *)v9))
          {
            v15 = *(_DWORD *)(v14 + 32 * v15) & 0x7FFFFFFF;
            if (v15 == 0x7FFFFFFF)
              goto LABEL_14;
          }
          while (!re::StringID::operator==((_QWORD *)(v14 + 32 * v13 + 8), (_QWORD *)v9))
          {
            v13 = *(_DWORD *)(v14 + 32 * v13) & 0x7FFFFFFF;
            v16 = 0x7FFFFFFFLL;
            if (v13 == 0x7FFFFFFF)
              goto LABEL_13;
          }
          v16 = v13;
LABEL_13:
          v10 = (re *)*(unsigned __int16 *)(v14 + 32 * v16 + 24);
        }
      }
LABEL_14:
      if (v32
        && (v17 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v9 >> 31) ^ (*(_QWORD *)v9 >> 1)),
            v18 = ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31))
                % v35,
            v19 = *(unsigned int *)(v33 + 4 * v18),
            (_DWORD)v19 != 0x7FFFFFFF))
      {
        v21 = v34;
        v22 = *(unsigned int *)(v33 + 4 * v18);
        while (!re::StringID::operator==((_QWORD *)(v21 + 32 * v22 + 8), (_QWORD *)v9))
        {
          v22 = *(_DWORD *)(v21 + 32 * v22) & 0x7FFFFFFF;
          if (v22 == 0x7FFFFFFF)
          {
            v20 = 1;
            goto LABEL_26;
          }
        }
        while (!re::StringID::operator==((_QWORD *)(v21 + 32 * v19 + 8), (_QWORD *)v9))
        {
          v19 = *(_DWORD *)(v21 + 32 * v19) & 0x7FFFFFFF;
          v23 = 0x7FFFFFFFLL;
          if (v19 == 0x7FFFFFFF)
            goto LABEL_25;
        }
        v23 = v19;
LABEL_25:
        v20 = *(_BYTE *)(v21 + 32 * v23 + 24);
      }
      else
      {
        v20 = 1;
      }
LABEL_26:
      VertexFormatFromDataType = re::getVertexFormatFromDataType(v10);
      v25 = VertexFormatFromDataType;
      v27 = re::sizeFromVertexFormat(VertexFormatFromDataType, v26);
      v28 = v41;
      if ((unint64_t)v41 <= v8)
      {
        v66 = 0;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v67 = 136315906;
        v68 = "operator[]";
        v69 = 1024;
        v70 = 468;
        v71 = 2048;
        v72 = v8;
        v73 = 2048;
        v74 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v29 = (v27 + 3) & 0x1FC;
      if (!v20)
        v29 = v27;
      v30 = *((_QWORD *)&v41 + 1) + 16 * v8;
      *(_WORD *)v30 = v29;
      *(_WORD *)(v30 + 2) = v20 != 0;
      *(_BYTE *)(v30 + 4) = 1;
      *(_BYTE *)(v30 + 5) = v20;
      *(_DWORD *)(v30 + 8) = 0;
      *(_BYTE *)(v30 + 12) = v25;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&v32);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&v36);
      ++v8;
    }
    while (*((_QWORD *)a1 + 1) > v8);
  }
  *(_DWORD *)(a4 + 176) = 0;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_QWORD *)(a4 + 192) = 0;
  *(_QWORD *)(a4 + 200) = 0;
  *(_QWORD *)(a4 + 184) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 124) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_DWORD *)(a4 + 208) = 1;
  *(_QWORD *)(a4 + 224) = 0;
  *(_QWORD *)(a4 + 232) = 0;
  *(_DWORD *)(a4 + 240) = 0;
  *(_QWORD *)(a4 + 216) = 0;
  *(_QWORD *)(a4 + 248) = 0;
  *(_QWORD *)(a4 + 256) = 0;
  *(_DWORD *)(a4 + 272) = 0;
  *(_QWORD *)(a4 + 264) = 0;
  *(_QWORD *)(a4 + 320) = 0;
  *(_DWORD *)(a4 + 328) = 0;
  *(_OWORD *)(a4 + 280) = 0u;
  *(_OWORD *)(a4 + 296) = 0u;
  *(_DWORD *)(a4 + 312) = 0;
  re::AttributeTableBuilder::makeAttributeTable((re::AttributeTableBuilder *)&v40, (re::AttributeTable *)a4);
  re::AttributeTableBuilder::~AttributeTableBuilder((re::AttributeTableBuilder *)&v40);
}

unint64_t re::makeAttributeResolutionsPrediction@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  unint64_t v23;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  a4[2] = 0;
  v8 = *((_QWORD *)a1 + 1);
  a4[1] = v8;
  if (v8)
  {
    if (v8 >= 0x199999999999999ALL)
    {
LABEL_22:
      re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 10, v8, v25, v26);
      _os_crash();
      __break(1u);
LABEL_23:
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    a4[2] = result;
    if (!result)
      goto LABEL_23;
    v12 = result;
    v13 = result;
    v14 = v8 - 1;
    if (v8 != 1)
    {
      v13 = result;
      do
      {
        *(_BYTE *)(v13 + 8) = 0;
        *(_QWORD *)v13 = 0;
        v13 += 10;
        --v14;
      }
      while (v14);
    }
    *(_BYTE *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  else
  {
    v12 = 0;
  }
  v15 = 0;
  v16 = *((_QWORD *)a1 + 1);
  v25 = 0u;
  v26 = 0u;
  do
  {
    *(__int128 *)((char *)&v25 + v15) = (__int128)vmvnq_s8(*(int8x16_t *)(a2 + v15));
    v15 += 16;
  }
  while (v15 != 32);
  if (v16)
  {
    v17 = 0;
    result = -1;
    v18 = 1;
    while (1)
    {
      result = re::Bitset<256>::findFirstBitSet((uint64_t)&v25, result + 1);
      v19 = *((_QWORD *)a1 + 1);
      if (v19 <= v17)
        break;
      v20 = *((_QWORD *)a1 + 2);
      if (a3)
        v21 = *(_WORD *)(v20 + 24 * v17 + 18);
      else
        v21 = 0;
      if (v8 <= v17)
        goto LABEL_21;
      v22 = *(_WORD *)(v20 + 24 * v17 + 16);
      v23 = v12 + 10 * v17;
      *(_WORD *)v23 = result;
      *(_WORD *)(v23 + 2) = v22;
      *(_WORD *)(v23 + 4) = v18 - 1;
      *(_WORD *)(v23 + 6) = v21;
      *(_BYTE *)(v23 + 8) = 0;
      v17 = v18;
      if (v16 <= v18++)
        return result;
    }
    v27 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v28 = 136315906;
    v29 = "operator[]";
    v30 = 1024;
    v31 = 468;
    v32 = 2048;
    v33 = v17;
    v34 = 2048;
    v35 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    v27 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v28 = 136315906;
    v29 = "operator[]";
    v30 = 1024;
    v31 = 468;
    v32 = 2048;
    v33 = v17;
    v34 = 2048;
    v35 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_22;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 32;
            }
            while (v21 < v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 32 * v9 + 8) = v24 | 0x80000000;
  v26 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v26 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v26 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<int>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<int>(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (_DWORD *)(*(_QWORD *)&v13[16] + v10 + 24));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void **re::PrepareSimplifiedMeshBuffer::init(void **this, re::RenderManager *a2)
{
  void **v3;
  void **ComputePipelineState;
  char v5[8];
  void **v6;
  char v7;
  _QWORD v8[4];
  _QWORD v9[3];
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;

  if (!*((_BYTE *)this + 336))
  {
    v3 = this;
    *((_BYTE *)this + 336) = 1;
    v5[0] = 0;
    v11 = 0;
    memset(v9, 0, sizeof(v9));
    v10 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v5);
    NS::SharedPtr<MTL::Texture>::operator=(v3 + 41, ComputePipelineState);
    *((_BYTE *)v3 + 337) = 1;
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v9);
    this = (void **)v8[0];
    if (v8[0])
    {
      if ((v8[1] & 1) != 0)
        this = (void **)(*(uint64_t (**)(void))(*(_QWORD *)v8[0] + 40))();
      memset(v8, 0, sizeof(v8));
    }
    if (v5[0])
    {
      this = v6;
      if (v6)
      {
        if ((v7 & 1) != 0)
          return (void **)(*((uint64_t (**)(void))*v6 + 5))();
      }
    }
  }
  return this;
}

double re::PrepareSimplifiedMeshBuffer::addDeformationInstance@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 1572864;
  *(_OWORD *)(a1 + 8) = xmmword_22616D200;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

unint64_t *re::PrepareSimplifiedMeshBuffer::allocateBuffers(_anonymous_namespace_ *a1, re::FrameContext *a2, uint64_t a3, uint64_t *a4, uint64_t a5, _anonymous_namespace_ *a6)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  signed int v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  unsigned int v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __n128 v52;
  unint64_t v53;
  __n128 v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  char *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  double v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  unsigned int v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  _DWORD *v162;
  _QWORD *v163;
  unsigned int *v164;
  _QWORD *v165;
  unint64_t v167;
  unint64_t v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unint64_t v173;
  unsigned int *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t *v180;
  int v181;
  int v182;
  unsigned int v183;
  __int128 v184;
  __int128 v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE v189[28];
  __int16 v190;
  _BYTE v191[10];
  _BYTE v192[18];
  __int16 v193;
  unint64_t v194;
  __int16 v195;
  unint64_t v196;
  __n128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = *(_DWORD *)(*a4 + 48);
  v186 = 0;
  v184 = 0u;
  v185 = 0u;
  v187 = 0x7FFFFFFFLL;
  v10 = 2 * v9;
  v179 = *(_QWORD *)(v8 + 48);
  if (v179)
  {
    v12 = 0;
    v173 = 0;
    v176 = v8 + 8;
    v6 = 72;
    while (1)
    {
      v13 = *(_QWORD *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v176, v12) + 8);
      v11 = (_QWORD *)re::BucketArray<re::ActiveDeformation,8ul>::operator[](a4[1], v13);
      v14 = *(_QWORD *)(v11[44] + 88);
      if (!v14)
        goto LABEL_34;
      v15 = v11;
      v198 = 0u;
      v199 = 0u;
      v197 = 0u;
      v16 = *(_QWORD *)(v14 + 8);
      DWORD1(v199) = 0x7FFFFFFF;
      v17 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
      v18 = v17 ^ (v17 >> 31);
      if (!(_QWORD)v184)
        break;
      v19 = v18 % DWORD2(v185);
      v20 = *(unsigned int *)(*((_QWORD *)&v184 + 1) + 4 * v19);
      if ((_DWORD)v20 == 0x7FFFFFFF)
        goto LABEL_10;
      while (*(_QWORD *)(v185 + 72 * v20 + 16) != v16)
      {
        LODWORD(v20) = *(_DWORD *)(v185 + 72 * v20 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v20 == 0x7FFFFFFF)
          goto LABEL_10;
      }
      v22 = v185 + 72 * v20;
LABEL_12:
      v6 = v22 + 24;
      v11 = re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::~HashTable((uint64_t *)&v197);
      v197 = 0uLL;
      *(_QWORD *)&v198 = 0;
      v23 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v14 ^ (*(_QWORD *)v14 >> 30));
      v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
      if (*(_QWORD *)v6)
      {
        v25 = v24 % *(unsigned int *)(v6 + 24);
        v26 = *(unsigned int *)(*(_QWORD *)(v6 + 8) + 4 * v25);
        if ((_DWORD)v26 != 0x7FFFFFFF)
        {
          v27 = *(_QWORD *)(v6 + 16);
          while (*(_QWORD *)(v27 + 48 * v26 + 16) != *(_QWORD *)v14)
          {
            LODWORD(v26) = *(_DWORD *)(v27 + 48 * v26 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v26 == 0x7FFFFFFF)
              goto LABEL_19;
          }
          v29 = (_QWORD *)(v27 + 48 * v26 + 24);
          goto LABEL_23;
        }
      }
      else
      {
        LODWORD(v25) = 0;
      }
LABEL_19:
      v28 = re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::addAsMove(v6, v25, v24, (_QWORD *)v14, &v197);
      ++*(_DWORD *)(v6 + 40);
      v29 = (_QWORD *)(*(_QWORD *)(v6 + 16) + 48 * v28 + 24);
      v11 = (_QWORD *)v197.n128_u64[0];
      if (v197.n128_u64[0] && v197.n128_u64[1])
        v11 = (_QWORD *)(*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v197.n128_u64[0] + 40))(v197.n128_u64[0], v198);
LABEL_23:
      v30 = *(_QWORD *)(v14 + 16);
      if (v29[1] == v30
        || (++v173,
            (v29[1] = v30) == 0))
      {
        v30 = 0x94D049BB133111EBLL;
      }
      else
      {
        if (v30 >> 61)
          goto LABEL_167;
        v6 = 8 * v30;
        v29[2] = v11;
        if (!v11)
          goto LABEL_168;
        v14 = (unint64_t)v11;
        if (v30 != 1)
        {
          v6 -= 8;
          bzero(v11, v6);
          v14 += v6;
        }
        v30 = 0x94D049BB133111EBLL;
        *(_QWORD *)v14 = 0;
      }
      v31 = a4[6];
      if (v31 <= v13)
        goto LABEL_165;
      v14 = *((unsigned __int16 *)v15 + 196);
      v6 = v29[1];
      if (v6 <= v14)
        goto LABEL_166;
      *(_QWORD *)(v29[2] + 8 * v14) = a4[5] + 312 * v13;
      v6 = 72;
LABEL_34:
      if (++v12 == v179)
        goto LABEL_37;
    }
    LODWORD(v19) = 0;
LABEL_10:
    v21 = re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v184, v19, v18, (_QWORD *)(v14 + 8), (uint64_t)&v197);
    ++HIDWORD(v187);
    v22 = v185 + 72 * v21;
    goto LABEL_12;
  }
  v173 = 0;
LABEL_37:
  *(_QWORD *)&v191[2] = 0;
  memset(&v189[8], 0, 20);
  v32 = (uint64_t)re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity(v189, v173);
  ++*(_DWORD *)&v189[24];
  if (v186)
  {
    v33 = 0;
    v34 = (int *)(v185 + 8);
    while (1)
    {
      v35 = *v34;
      v34 += 18;
      if (v35 < 0)
        break;
      if (v186 == ++v33)
      {
        v33 = v186;
        break;
      }
    }
  }
  else
  {
    v33 = 0;
  }
  if (v186 != (_DWORD)v33)
  {
    v36 = v33;
    v170 = v186;
    v6 = v185;
    do
    {
      v37 = v6 + 72 * v36;
      v39 = *(_DWORD *)(v37 + 56);
      v38 = (int *)(v37 + 56);
      v13 = v39;
      if (v39)
      {
        v40 = 0;
        v41 = (int *)(*(_QWORD *)(v6 + 72 * v36 + 40) + 8);
        while (1)
        {
          v42 = *v41;
          v41 += 12;
          if (v42 < 0)
            break;
          if (v13 == ++v40)
          {
            LODWORD(v40) = v13;
            break;
          }
        }
      }
      else
      {
        LODWORD(v40) = 0;
      }
      if ((_DWORD)v13 != (_DWORD)v40)
      {
        v180 = (unint64_t *)(v38 - 10);
        v43 = v40;
        v44 = v6 + 72 * v36;
        v45 = (_QWORD *)(v44 + 40);
        v174 = (unsigned int *)(v44 + 52);
        v30 = -1;
        do
        {
          v46 = (_QWORD *)(*v45 + 48 * v43);
          v47 = v46 + 3;
          v14 = v46[2];
          v48 = v46[4];
          if (v48)
          {
            v49 = v46[5];
            v50 = 8 * v48;
            while ((*(_BYTE *)(*(_QWORD *)v49 + 2) & 0x20) == 0)
            {
              v49 += 8;
              v50 -= 8;
              if (!v50)
                goto LABEL_57;
            }
            v197.n128_u8[0] = 1;
            v197.n128_u64[1] = *v180;
            *(_QWORD *)&v198 = v47;
            *(_QWORD *)v192 = v14;
            *(_QWORD *)&v192[8] = 1;
            re::DynamicArray<re::Matrix4x4<float>>::DynamicArray((uint64_t)&v198 + 8, (uint64_t)v192);
            v52 = re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::add((uint64_t)v189, &v197);
            v32 = *((_QWORD *)&v198 + 1);
            if (*((_QWORD *)&v198 + 1) && *((_QWORD *)&v200 + 1))
              v32 = (*(uint64_t (**)(_QWORD, __n128))(**((_QWORD **)&v198 + 1) + 40))(*((_QWORD *)&v198 + 1), v52);
          }
          else
          {
LABEL_57:
            if (v30 == -1)
            {
              v197.n128_u8[0] = 0;
              v197.n128_u64[1] = *v180;
              *(_QWORD *)&v198 = v47;
              v53 = *v174;
              v199 = 0uLL;
              LODWORD(v200) = 0;
              *((_QWORD *)&v200 + 1) = 0;
              re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)&v198 + 1, v53);
              LODWORD(v200) = v200 + 1;
              v54 = re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::add((uint64_t)v189, &v197);
              if (*((_QWORD *)&v198 + 1) && *((_QWORD *)&v200 + 1))
                (*(void (**)(_QWORD, __n128))(**((_QWORD **)&v198 + 1) + 40))(*((_QWORD *)&v198 + 1), v54);
              v51 = *(_QWORD *)&v189[16];
              v30 = *(_QWORD *)&v189[16] - 1;
            }
            else
            {
              v51 = *(_QWORD *)&v189[16];
            }
            if (v51 <= v30)
              goto LABEL_161;
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(*(_QWORD *)&v191[2] + (v30 << 6) + 24), v14);
          }
          v55 = *v38;
          if (*v38 <= (v40 + 1))
            v55 = v40 + 1;
          while (1)
          {
            v43 = (v40 + 1);
            if (v55 - 1 == (_DWORD)v40)
              break;
            LODWORD(v40) = v40 + 1;
            v56 = v43;
            if ((*(_DWORD *)(*v45 + 48 * v43 + 8) & 0x80000000) != 0)
              goto LABEL_74;
          }
          v56 = v55;
LABEL_74:
          LODWORD(v40) = v56;
        }
        while ((_DWORD)v13 != v56);
      }
      if (v170 <= (int)v33 + 1)
        v57 = (v33 + 1);
      else
        v57 = v170;
      while (1)
      {
        v36 = (v33 + 1);
        if ((_DWORD)v57 - 1 == (_DWORD)v33)
          break;
        LODWORD(v33) = v33 + 1;
        v58 = v36;
        if ((*(_DWORD *)(v6 + 72 * v36 + 8) & 0x80000000) != 0)
          goto LABEL_82;
      }
      v58 = v57;
LABEL_82:
      v33 = v58;
    }
    while (v170 != (_DWORD)v58);
  }
  v155 = *(_QWORD *)&v191[2];
  v156 = *(_QWORD *)&v189[16];
  if (*(_QWORD *)&v189[16])
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v6 = 19;
    v63 = *(_QWORD *)&v191[2];
    v175 = *(_QWORD *)&v191[2] + (*(_QWORD *)&v189[16] << 6);
    do
    {
      v64 = *(_QWORD *)(v63 + 16);
      v65 = *(_QWORD *)(v64 + 8);
      if (v65)
      {
        v177 = v62;
        v181 = v61;
        v66 = *(uint64_t **)(v64 + 16);
        v67 = 8 * v65;
        do
        {
          v68 = *v66++;
          v197.n128_u8[0] = 19;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v68, 0x13u);
          v59 += *(_DWORD *)(*(_QWORD *)(v68 + 64)
                           + 32
                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v68 + 56), (unsigned __int8 *)&v197)+ 20);
          v197.n128_u8[0] = 20;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v68, 0x14u);
          v32 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v68 + 56), (unsigned __int8 *)&v197);
          v60 += *(_DWORD *)(*(_QWORD *)(v68 + 64) + 32 * v32 + 20);
          v67 -= 8;
        }
        while (v67);
        v65 = *(_QWORD *)(v64 + 8);
        v61 = v181;
        v62 = v177;
      }
      v61 += v65;
      v62 += *(_DWORD *)(v63 + 40);
      v63 += 64;
    }
    while (v63 != v175);
  }
  else
  {
    v62 = 0;
    v61 = 0;
    v60 = 0;
    v59 = 0;
  }
  v182 = v61;
  v70 = *((_QWORD *)a2 + 3);
  v69 = *((_QWORD *)a2 + 4);
  v71 = v69 & 7;
  v72 = (char *)a1 + 40 * (v69 & 7);
  v75 = *((_QWORD *)v72 + 3);
  v74 = (unint64_t *)(v72 + 24);
  v73 = v75;
  if (v75)
  {
    v76 = v69 & 0xFFFFFFFFFFFFFFFLL;
    v77 = **((_QWORD **)a1 + 5 * v71 + 5) & 0xFFFFFFFFFFFFFFFLL;
    if (v77 == 0xFFFFFFFFFFFFFFFLL)
    {
      if (v76 == 0xFFFFFFFFFFFFFFFLL)
        goto LABEL_99;
LABEL_98:
      v73 = 0;
      *v74 = 0;
      ++*((_DWORD *)a1 + 10 * v71 + 8);
      goto LABEL_99;
    }
    if (v76 == 0xFFFFFFFFFFFFFFFLL || v77 != v76)
      goto LABEL_98;
  }
LABEL_99:
  v78 = *((_QWORD *)a1 + 5 * v71 + 2);
  if (v73 >= v78)
  {
    v80 = v73 + 1;
    if (v78 < v73 + 1)
    {
      v6 = (unint64_t)(v74 - 2);
      if (*(v74 - 2))
      {
        v81 = 2 * v78;
        if (!v78)
          v81 = 8;
        if (v81 <= v80)
          v82 = v80;
        else
          v82 = v81;
        re::DynamicArray<re::MPSInputData>::setCapacity(v74 - 2, v82);
      }
      else
      {
        re::DynamicArray<re::MPSInputData>::setCapacity(v74 - 2, v80);
        ++*((_DWORD *)a1 + 10 * v71 + 8);
      }
    }
    v79 = v62;
    v73 = *v74;
  }
  else
  {
    v79 = v62;
  }
  v83 = (char *)a1 + 40 * v71;
  v84 = *((_QWORD *)v83 + 5) + 120 * v73;
  *(_QWORD *)v84 = 0xFFFFFFFFFFFFFFFLL;
  *(_OWORD *)(v84 + 8) = 0u;
  *(_OWORD *)(v84 + 24) = 0u;
  *(_OWORD *)(v84 + 40) = 0u;
  *(_OWORD *)(v84 + 56) = 0u;
  *(_OWORD *)(v84 + 72) = 0u;
  *(_OWORD *)(v84 + 88) = 0u;
  *(_OWORD *)(v84 + 104) = 0u;
  v85 = (*v74)++;
  ++*((_DWORD *)v83 + 8);
  v86 = *((_QWORD *)v83 + 5);
  v87 = (_QWORD *)(v86 + 120 * v85);
  *v87 = *((_QWORD *)a2 + 4);
  re::FrameContext::perFrameAllocTail(a2, v59, 0x10uLL, (uint64_t)&v197);
  v88 = v197.n128_u64[1];
  v87[1] = v198;
  v87[2] = v88;
  v164 = (unsigned int *)(v87 + 2);
  v165 = v87 + 1;
  *(int32x2_t *)&v89 = re::FrameContext::perFrameAllocTail(a2, v60, 0x10uLL, (uint64_t)&v197);
  v90 = v197.n128_u64[1];
  v87[3] = v198;
  v163 = v87 + 3;
  v87[4] = v90;
  v162 = v87 + 4;
  v91 = (v156 + 1);
  if ((_DWORD)v156 == -1)
  {
    v153 = 0;
    v96 = 0;
    v97 = v86 + 120 * v85;
    *(_QWORD *)(v97 + 40) = 0;
    *(_QWORD *)(v97 + 48) = 0;
  }
  else
  {
    v6 = 4 * v91 + 19;
    v92 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, double))(*(_QWORD *)v70 + 32))(v70, v6, 0, v89);
    v93 = (_QWORD *)((v92 + 19) & 0xFFFFFFFFFFFFFFFCLL);
    *(v93 - 2) = v91;
    *(v93 - 1) = v92;
    bzero(v93, 4 * v91);
    v94 = v86 + 120 * v85;
    v153 = v93;
    *(_QWORD *)(v94 + 40) = v93;
    *(_QWORD *)(v94 + 48) = v91;
    v95 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, v6, 0);
    v96 = (_QWORD *)((v95 + 19) & 0xFFFFFFFFFFFFFFFCLL);
    *(v96 - 2) = v91;
    *(v96 - 1) = v95;
    bzero(v96, 4 * v91);
  }
  v98 = v86 + 120 * v85;
  v154 = v96;
  *(_QWORD *)(v98 + 56) = v96;
  *(_QWORD *)(v98 + 64) = v91;
  if (v79)
  {
    v99 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, ((unint64_t)v79 << 6) | 0x1F, 0);
    v100 = (_QWORD *)((v99 + 31) & 0xFFFFFFFFFFFFFFF0);
    *(v100 - 2) = v79;
    *(v100 - 1) = v99;
    v152 = v100;
    bzero(v100, (unint64_t)v79 << 6);
  }
  else
  {
    v152 = 0;
  }
  v101 = v156;
  if ((_DWORD)v156)
  {
    v102 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 16 * v156 + 23, 0);
    v103 = (_QWORD *)((v102 + 23) & 0xFFFFFFFFFFFFFFF8);
    *(v103 - 2) = v156;
    *(v103 - 1) = v102;
    bzero(v103, 16 * v156);
    v104 = (_QWORD *)(v86 + 120 * v85);
    v151 = v103;
    v104[9] = v103;
    v104[10] = v156;
    v105 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, v156 + 16, 0);
    v106 = v105 + 2;
    *v105 = v156;
    v105[1] = v105;
    bzero(v105 + 2, v156);
    v150 = v106;
    v104[11] = v106;
    v104[12] = v156;
    v101 = v156;
    v6 = 8 * v156;
    v107 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, v6 + 23, 0);
    v14 = (v107 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v14 - 16) = v156;
    *(_QWORD *)(v14 - 8) = v107;
    bzero((void *)v14, v6);
  }
  else
  {
    v150 = 0;
    v151 = 0;
    v14 = 0;
    v108 = v86 + 120 * v85;
    *(_OWORD *)(v108 + 88) = 0u;
    *(_OWORD *)(v108 + 72) = 0u;
  }
  v109 = v86 + 120 * v85;
  *(_QWORD *)(v109 + 104) = v14;
  *(_QWORD *)(v109 + 112) = v101;
  v110 = (unint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 3) + 32))(*((_QWORD *)a2 + 3), 16, 8);
  v111 = 0;
  *v110 = 0;
  v110[1] = 0;
  v30 = v155;
  v33 = v156;
  v112 = v182;
  v113 = (v182 - v156);
  v160 = v110;
  if (v182 != (_DWORD)v156)
  {
    v114 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 56 * v113 + 23, 0);
    v111 = (v114 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v111 - 16) = v113;
    *(_QWORD *)(v111 - 8) = v114;
    v115 = v111;
    v116 = (v182 - v156);
    do
    {
      *(_DWORD *)(v115 + 48) = 0;
      *(_OWORD *)(v115 + 16) = 0uLL;
      *(_OWORD *)(v115 + 32) = 0uLL;
      *(_OWORD *)v115 = 0uLL;
      v115 += 56;
      --v116;
    }
    while (v116);
    v110 = v160;
    v112 = v182;
  }
  *v110 = v111;
  v110[1] = v113;
  v117 = (2 * v112);
  if (*((_QWORD *)a6 + 1) < v117)
    re::DynamicArray<re::PostDeformationBlit>::setCapacity(a6, v117);
  v118 = v154;
  v119 = v156;
  if ((_DWORD)v156)
  {
    v120 = 0;
    v159 = 0;
    v13 = 0;
    v51 = 0;
    v121 = 0;
    v149 = v14;
    while (1)
    {
      if (v120 == v33)
        goto LABEL_163;
      v122 = v30 + (v120 << 6);
      *((_DWORD *)v153 + v120) = v121;
      *((_DWORD *)v118 + v120) = v51;
      memcpy(&v152[8 * v159], *(const void **)(v122 + 56), *(_QWORD *)(v122 + 40) << 6);
      v123 = *(_QWORD *)(v122 + 40);
      v124 = &v151[2 * v120];
      *v124 = &v152[8 * v159];
      v124[1] = v123;
      v125 = *(_QWORD *)(v122 + 40);
      *((_BYTE *)v150 + v120) = *(_BYTE *)v122;
      *(_QWORD *)(v14 + 8 * v120) = *(_QWORD *)(v122 + 8);
      v126 = *(_QWORD *)(v122 + 16);
      v169 = v122 + 16;
      if (!*(_QWORD *)(v126 + 8))
        goto LABEL_164;
      v157 = v125;
      v127 = **(_QWORD ***)(v126 + 16);
      v197.n128_u8[0] = 19;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x13u);
      v6 = (unint64_t)(v127 + 7);
      v158 = v120;
      if (*(_DWORD *)(v127[8]
                     + 32
                     * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, (unsigned __int8 *)&v197)+ 20))
      {
        v197.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x13u);
        v197.n128_u64[0] = (unint64_t)objc_retain(*(id *)(v127[8]
                                                               + 32
                                                               * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, (unsigned __int8 *)&v197)+ 24));
        v192[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x13u);
        v197.n128_u64[1] = *(unsigned int *)(v127[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, v192)+ 16);
        *(_QWORD *)&v198 = *v165;
        *((_QWORD *)&v198 + 1) = *v164 + (unint64_t)v121;
        v192[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x13u);
        *(_QWORD *)&v199 = *(unsigned int *)(v127[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, v192)+ 20);
        BYTE8(v199) = 1;
        re::DynamicArray<re::PostDeformationBlit>::add(a6, (uint64_t)&v197);
        v30 = 20;
        if (v197.n128_u64[0])

        v197.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x13u);
        v128 = *(_DWORD *)(v127[8]
                         + 32
                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, (unsigned __int8 *)&v197)+ 20);
        v197.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x14u);
        v197.n128_u64[0] = (unint64_t)objc_retain(*(id *)(v127[8]
                                                               + 32
                                                               * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, (unsigned __int8 *)&v197)+ 24));
        v192[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x14u);
        v197.n128_u64[1] = *(unsigned int *)(v127[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, v192)+ 16);
        *(_QWORD *)&v198 = *v163;
        *((_QWORD *)&v198 + 1) = *v162 + (unint64_t)v51;
        v192[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x14u);
        *(_QWORD *)&v199 = *(unsigned int *)(v127[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, v192)+ 20);
        BYTE8(v199) = 1;
        re::DynamicArray<re::PostDeformationBlit>::add(a6, (uint64_t)&v197);
        if (v197.n128_u64[0])

        v121 += v128;
        v197.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x14u);
        v51 = (*(_DWORD *)(v127[8]
                                       + 32
                                       * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, (unsigned __int8 *)&v197)+ 20)+ v51);
        v178 = v51;
        v197.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x13u);
        v129 = *(_DWORD *)(v127[8]
                         + 32
                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 7, (unsigned __int8 *)&v197)+ 20);
        v197.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v127, 0x13u);
        LODWORD(v33) = v129
                     / *(unsigned __int16 *)(v127[16]
                                           + 20
                                           * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v127 + 15, (unsigned __int8 *)&v197)+ 4);
      }
      else
      {
        v178 = v51;
        LODWORD(v33) = 0;
        v30 = 20;
      }
      v183 = v13;
      v167 = *(_QWORD *)(*(_QWORD *)v169 + 8);
      if (v167 >= 2)
        break;
LABEL_146:
      v119 = v156;
      v159 += v157;
      v120 = v158 + 1;
      v30 = v155;
      v33 = v156;
      v118 = v154;
      v14 = v149;
      v51 = v178;
      v13 = v183;
      if (v158 + 1 == v156)
        goto LABEL_149;
    }
    v130 = 1;
    while (1)
    {
      v14 = *(_QWORD *)(*(_QWORD *)v169 + 8);
      if (v14 <= v130)
        break;
      v131 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v169 + 16) + 8 * v130);
      v197.n128_u8[0] = 19;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v131, 0x13u);
      v6 = (unint64_t)(v131 + 7);
      v13 = v183;
      if (*(_DWORD *)(v131[8]
                     + 32
                     * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v131 + 7, (unsigned __int8 *)&v197)+ 20))
      {
        v197.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v131, 0x13u);
        v197.n128_u64[0] = (unint64_t)objc_retain(*(id *)(v131[8]
                                                               + 32
                                                               * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v131 + 7, (unsigned __int8 *)&v197)+ 24));
        v192[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v131, 0x13u);
        v197.n128_u64[1] = *(unsigned int *)(v131[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v131 + 7, v192)+ 16);
        *(_QWORD *)&v198 = *v165;
        v172 = v121;
        *((_QWORD *)&v198 + 1) = *v164 + (unint64_t)v121;
        v192[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v131, 0x13u);
        *(_QWORD *)&v199 = *(unsigned int *)(v131[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v131 + 7, v192)+ 20);
        BYTE8(v199) = 1;
        re::DynamicArray<re::PostDeformationBlit>::add(a6, (uint64_t)&v197);
        if (v197.n128_u64[0])

        v197.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v131, 0x13u);
        v14 = *(unsigned int *)(v131[8]
                              + 32
                              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v131 + 7, (unsigned __int8 *)&v197)+ 20);
        v197.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v131, 0x13u);
        v171 = *(unsigned __int16 *)(v131[16]
                                   + 20
                                   * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v131 + 15, (unsigned __int8 *)&v197)+ 4);
        v197.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v131, 0x14u);
        v132 = (unint64_t)*(unsigned int *)(v131[8]
                                                 + 32
                                                 * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v131 + 7, (unsigned __int8 *)&v197)+ 20) >> 2;
        re::FrameContext::perFrameAlloc(a2, 8uLL, 4uLL, (uint64_t)&v197);
        v133 = v197.n128_u32[2];
        v30 = v197.n128_u32[3];
        v51 = v198;
        v33 = v33;
        *(_QWORD *)(v197.n128_u64[0] + v197.n128_u32[2]) = v33 | ((v132 & 0x3FFFFFFF) << 32);
        v197.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v131, 0x14u);
        v134 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v131 + 7, (unsigned __int8 *)&v197);
        v136 = v183;
        v137 = v160[1];
        if (v137 <= v183)
          goto LABEL_162;
        ++v183;
        v138 = (v132 << 32) | (*v162 + v178);
        v139 = *v163;
        v140 = *(_QWORD *)(v131[8] + 32 * v134 + 16);
        v141 = *(_QWORD *)(v131[8] + 32 * v134 + 24);
        v142 = v133 | (v30 << 32);
        v121 = v14 + v172;
        v143 = *v160 + 56 * v13;
        *(_QWORD *)v143 = v51;
        *(_QWORD *)(v143 + 8) = v142;
        *(_QWORD *)(v143 + 16) = v141;
        *(_QWORD *)(v143 + 24) = v140;
        *(_QWORD *)(v143 + 32) = v139;
        *(_QWORD *)(v143 + 40) = v138;
        *(_DWORD *)(v143 + 48) = v132;
        v197.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v131, 0x14u);
        v13 = *(_DWORD *)(v131[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v131 + 7, (unsigned __int8 *)&v197)+ 20)+ v178;
        v178 = v13;
        LODWORD(v33) = v14 / v171 + v33;
        v30 = 20;
      }
      if (v167 == ++v130)
        goto LABEL_146;
    }
    v188 = 0;
    v200 = 0u;
    v201 = 0u;
    v198 = 0u;
    v199 = 0u;
    v197 = 0u;
    v33 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v192 = 136315906;
    *(_QWORD *)&v192[4] = "operator[]";
    *(_WORD *)&v192[12] = 1024;
    *(_DWORD *)&v192[14] = 476;
    v193 = 2048;
    v194 = v130;
    v195 = 2048;
    v196 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_161:
    v188 = 0;
    v200 = 0u;
    v201 = 0u;
    v198 = 0u;
    v199 = 0u;
    v197 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v192 = 136315906;
    *(_QWORD *)&v192[4] = "operator[]";
    *(_WORD *)&v192[12] = 1024;
    *(_DWORD *)&v192[14] = 789;
    v193 = 2048;
    v194 = v30;
    v195 = 2048;
    v196 = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_162:
    re::internal::assertLog((re::internal *)6, v135, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v136, v137);
    _os_crash();
    __break(1u);
LABEL_163:
    v188 = 0;
    v200 = 0u;
    v201 = 0u;
    v198 = 0u;
    v199 = 0u;
    v197 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v192 = 136315906;
    *(_QWORD *)&v192[4] = "operator[]";
    *(_WORD *)&v192[12] = 1024;
    *(_DWORD *)&v192[14] = 789;
    v193 = 2048;
    v194 = v33;
    v195 = 2048;
    v196 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_164:
    v188 = 0;
    v200 = 0u;
    v201 = 0u;
    v198 = 0u;
    v199 = 0u;
    v197 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v192 = 136315906;
    *(_QWORD *)&v192[4] = "operator[]";
    *(_WORD *)&v192[12] = 1024;
    *(_DWORD *)&v192[14] = 476;
    v193 = 2048;
    v194 = 0;
    v195 = 2048;
    v196 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_165:
    re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v13, v31);
    _os_crash();
    __break(1u);
LABEL_166:
    *(_QWORD *)v192 = 0;
    v200 = 0u;
    v201 = 0u;
    v198 = 0u;
    v199 = 0u;
    v197 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v189 = 136315906;
    *(_QWORD *)&v189[4] = "operator[]";
    *(_WORD *)&v189[12] = 1024;
    *(_DWORD *)&v189[14] = 468;
    *(_WORD *)&v189[18] = 2048;
    *(_QWORD *)&v189[20] = v14;
    v190 = 2048;
    *(_QWORD *)v191 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_167:
    re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v30);
    _os_crash();
    __break(1u);
LABEL_168:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  v121 = 0;
  LODWORD(v51) = 0;
LABEL_149:
  *((_DWORD *)v153 + v119) = v121;
  *((_DWORD *)v118 + v119) = v51;
  v144 = *(_QWORD *)v189;
  if (*(_QWORD *)v189 && v30)
  {
    if (v33)
    {
      v145 = v33 << 6;
      v146 = (_QWORD *)(v30 + 56);
      do
      {
        v147 = *(v146 - 4);
        if (v147)
        {
          if (*v146)
            (*(void (**)(uint64_t))(*(_QWORD *)v147 + 40))(v147);
          *v146 = 0;
          *(v146 - 3) = 0;
          *(v146 - 2) = 0;
          *(v146 - 4) = 0;
          ++*((_DWORD *)v146 - 2);
        }
        v146 += 8;
        v145 -= 64;
      }
      while (v145);
    }
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v144 + 40))(v144, v30);
  }
  re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v184);
  return v160;
}

uint64_t *re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = v6 + v4;
        v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v9 = *(_QWORD *)(v7 + 24);
          if (v9)
          {
            v10 = v6 + v4;
            v11 = (_QWORD *)(v10 + 32);
            if (*(_QWORD *)(v10 + 32))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v10 + 40));
              *v11 = 0;
              v11[1] = 0;
              v3 = *((unsigned int *)a1 + 8);
            }
            *(_QWORD *)(v7 + 24) = 0;
          }
        }
        v4 += 48;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

__n128 re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 *v8;
  __n128 result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)a1)
    {
      v14 = 2 * v4;
      v15 = v4 == 0;
      v16 = 8;
      if (!v15)
        v16 = v14;
      if (v16 <= v6)
        v17 = v6;
      else
        v17 = v16;
      re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity((_QWORD *)a1, v17);
    }
    else
    {
      re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity((_QWORD *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  v8 = (__n128 *)(*(_QWORD *)(a1 + 32) + (*(_QWORD *)(a1 + 16) << 6));
  result = *a2;
  v10 = a2[1].n128_u64[0];
  *v8 = *a2;
  v8[3].n128_u64[1] = 0;
  v8[3].n128_u32[0] = 0;
  v8[2].n128_u64[0] = 0;
  v8[2].n128_u64[1] = 0;
  v8[1].n128_u64[0] = v10;
  v8[1].n128_u64[1] = 0;
  v11 = a2[2].n128_u64[0];
  v8[1].n128_u64[1] = a2[1].n128_u64[1];
  v8[2].n128_u64[0] = v11;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  v12 = v8[2].n128_u64[1];
  v8[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v12;
  v13 = v8[3].n128_u64[1];
  v8[3].n128_u64[1] = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = v13;
  ++a2[3].n128_u32[0];
  ++v8[3].n128_u32[0];
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

__n128 re::DynamicArray<re::PostDeformationBlit>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PostDeformationBlit>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 48 * v4;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(__n128 *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(v5 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(v5 + 24) = v7;
  *(__n128 *)(v5 + 8) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::~HashTable((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t re::PrepareSimplifiedMeshBuffer::deformGPU(uint64_t a1, uint64_t *a2, void **this)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;

  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Offset Index Calculation");
  v6 = a2[1];
  if (v6)
  {
    v7 = *a2;
    v8 = v7 + 56 * v6;
    v12 = vdupq_n_s64(1uLL);
    do
    {
      objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(a1 + 328), *(_OWORD *)&v12);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)v7, *(unsigned int *)(v7 + 8), 0);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v7 + 16), *(unsigned int *)(v7 + 24), 1);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v7 + 32), *(unsigned int *)(v7 + 40), 2);
      v9 = objc_msgSend(*(id *)(a1 + 328), sel_threadExecutionWidth);
      v10 = *this;
      v15 = (v9 + *(_DWORD *)(v7 + 48) - 1) / v9;
      v16 = v12;
      v13 = v9;
      v14 = v12;
      objc_msgSend(v10, "dispatchThreadgroups:threadsPerThreadgroup:", &v15, &v13);
      v7 += 56;
    }
    while (v7 != v8);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

uint64_t re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 72;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 72 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 72 * v9;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_DWORD *)(v25 + 56) = 0;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_QWORD *)(v25 + 60) = 0x7FFFFFFFLL;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v26 = *(_QWORD *)(v25 + 32);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v26;
  v27 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 48);
  *(_DWORD *)(v25 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 52);
  *(_DWORD *)(v25 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 56);
  *(_DWORD *)(v25 + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 60);
  *(_DWORD *)(v25 + 60) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v27;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 48;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::~HashTable((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 48 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 16) = *a4;
  v25 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9);
  v25[3] = 0;
  v25[4] = 0;
  v25[5] = 0;
  v25[3] = *a5;
  *a5 = 0;
  v25[4] = a5[1];
  a5[1] = 0;
  v26 = v25[5];
  v25[5] = a5[2];
  a5[2] = v26;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

_QWORD *re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 6;
        v11 = (_QWORD *)(v8 + 56);
        v12 = v7;
        do
        {
          v13 = *(v11 - 5);
          *(_OWORD *)v12 = *(_OWORD *)(v11 - 7);
          v12[7] = 0;
          v12[2] = v13;
          v12[3] = 0;
          v12[4] = 0;
          v12[5] = 0;
          *((_DWORD *)v12 + 12) = 0;
          v14 = *(v11 - 3);
          v12[3] = *(v11 - 4);
          *(v11 - 4) = 0;
          v12[4] = v14;
          *(v11 - 3) = 0;
          v15 = v12[5];
          v12[5] = *(v11 - 2);
          *(v11 - 2) = v15;
          v16 = v12[7];
          v12[7] = *v11;
          *v11 = v16;
          ++*((_DWORD *)v11 - 2);
          ++*((_DWORD *)v12 + 12);
          v17 = *(v11 - 4);
          if (v17)
          {
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            *v11 = 0;
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 4) = 0;
            ++*((_DWORD *)v11 - 2);
          }
          v11 += 8;
          v12 += 8;
          v10 -= 64;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MPSInputData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x78uLL))
        {
          v2 = 120 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 120 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 120 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 120, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::MPSInputData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PostDeformationBlit>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PostDeformationBlit>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 48 * v9;
        v11 = v7;
        do
        {
          *v11 = *(_QWORD *)v8;
          *(_QWORD *)v8 = 0;
          v12 = *(_OWORD *)(v8 + 8);
          v13 = *(_OWORD *)(v8 + 24);
          *((_BYTE *)v11 + 40) = *(_BYTE *)(v8 + 40);
          *(_OWORD *)(v11 + 3) = v13;
          *(_OWORD *)(v11 + 1) = v12;
          if (*(_QWORD *)v8)
          {

            *(_QWORD *)v8 = 0;
          }
          v8 += 48;
          v11 += 6;
          v10 -= 48;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PostDeformationBlit>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PostDeformationBlit>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PostDeformationBlit>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

double re::DebugRenderer::DebugRenderer(re::DebugRenderer *this)
{
  double result;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0xFFFFFFFFFFFFFFFLL;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(_QWORD *)((char *)this + 68) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_QWORD *)((char *)this + 116) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 0;
  *(_QWORD *)((char *)this + 164) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 1;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 62) = 1;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 80) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = 1;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_DWORD *)this + 98) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 1;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_DWORD *)this + 114) = 0;
  return result;
}

void re::DebugRenderer::~DebugRenderer(re::DebugRenderer *this)
{
  void *v2;
  void *v3;

  re::DebugRenderer::deinit(this);
  re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)this + 400);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 400);
  re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)this + 344);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 344);
  re::DynamicArray<re::RenderText>::deinit((uint64_t)this + 296);
  re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)this + 232);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 232);
  re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)this + 176);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 176);
  re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)this + 16);
  re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)this + 10);
  re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)this + 4);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {

    *((_QWORD *)this + 2) = 0;
  }
}

_BYTE *re::DebugRenderer::deinit(_BYTE *this)
{
  _BYTE *v1;

  if (*this)
  {
    v1 = this;
    re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)(this + 176));
    re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)(v1 + 232));
    re::DynamicArray<re::RenderText>::deinit((uint64_t)(v1 + 296));
    re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)(v1 + 344));
    return (_BYTE *)re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)(v1 + 400));
  }
  return this;
}

uint64_t re::DebugRenderer::pipelineState(re::DebugRenderer *this, re::RenderManager *a2, RenderTargetInfo *a3)
{
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t i;
  unsigned int *v9;
  id v10;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v5 = (char *)this + 32;
  v6 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet((uint64_t)this + 32, a3);
  if (!v6)
  {
    v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD770], sel_alloc), sel_init);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setFormat_, 30);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setBufferIndex_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setOffset_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setFormat_, 30);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setBufferIndex_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setOffset_, 16);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStride_, 32);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStepFunction_, 1);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStepRate_, 1);
    re::ShaderManager::makeFunction(*((uint64_t **)a2 + 7), *(_QWORD *)(*((_QWORD *)a2 + 7) + 256), (re::ns *)"vsPrimitivePosClr", 0, &v16);
    re::ShaderManager::makeFunction(*((uint64_t **)a2 + 7), *(_QWORD *)(*((_QWORD *)a2 + 7) + 256), (re::ns *)"fsPrimitivePosClr", 0, &v15);
    re::ShaderManager::makeRenderPipelineDescriptor(*((re::ShaderManager **)a2 + 7), &v14);
    objc_msgSend(v14, sel_setLabel_, CFSTR("DebugRendererPipeline"));
    objc_msgSend(v14, sel_setVertexFunction_, v16);
    objc_msgSend(v14, sel_setFragmentFunction_, v15);
    objc_msgSend(v14, sel_setVertexDescriptor_, v7);
    objc_msgSend(v14, sel_setRasterSampleCount_, a3->var0.var0);
    for (i = 0; i != 8; ++i)
    {
      v9 = &a3->var0.var0 + i;
      if (v9[1])
        objc_msgSend(objc_msgSend(objc_msgSend(v14, sel_colorAttachments), sel_objectAtIndexedSubscript_, i), sel_setPixelFormat_, (int)v9[1]);
    }
    objc_msgSend(v14, sel_setDepthAttachmentPixelFormat_, a3->var0.var2);
    objc_msgSend(v14, sel_setStencilAttachmentPixelFormat_);
    if (*((_BYTE *)a2 + 302))
      objc_msgSend(v14, sel_setMaxVertexAmplificationCount_, 2);
    v10 = *((id *)a2 + 23);
    v13 = v10;
    re::mtl::Device::makeRenderPipelineState(&v13, (uint64_t)v14, &v12);
    re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::add<NS::SharedPtr<MTL::RenderPipelineState>&>((uint64_t)v5, (uint64_t)a3, &v12);
    v6 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet((uint64_t)v5, a3);
    if (v12)

    if (v14)
    if (v15)

    if (v16)
    if (v7)

  }
  return v6;
}

uint64_t re::DebugRenderer::pipelineStateWithAlphaBlending(re::DebugRenderer *this, re::RenderManager *a2, RenderTargetInfo *a3)
{
  char *v5;
  uint64_t v6;
  unsigned int *v7;
  id v8;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;

  v5 = (char *)this + 80;
  v6 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet((uint64_t)this + 80, a3);
  if (!v6)
  {
    re::VertexPositionColorWithAlpha::makeVertexDescriptor((re::VertexPositionColorWithAlpha *)&v16);
    re::ShaderManager::makeFunction(*((uint64_t **)a2 + 7), *(_QWORD *)(*((_QWORD *)a2 + 7) + 256), (re::ns *)"vsPrimitivePosClr", 0, &v15);
    re::ShaderManager::makeFunction(*((uint64_t **)a2 + 7), *(_QWORD *)(*((_QWORD *)a2 + 7) + 256), (re::ns *)"fsPrimitivePosClr", 0, &v14);
    re::ShaderManager::makeRenderPipelineDescriptor(*((re::ShaderManager **)a2 + 7), &v13);
    objc_msgSend(v13, sel_setLabel_, CFSTR("DebugRendererPipeline"));
    objc_msgSend(v13, sel_setVertexFunction_, v15);
    objc_msgSend(v13, sel_setFragmentFunction_, v14);
    v10 = v16;
    objc_msgSend(v13, sel_setVertexDescriptor_);
    objc_msgSend(v13, sel_setRasterSampleCount_, a3->var0.var0);
    do
    {
      v7 = &a3->var0.var0 + v6;
      if (v7[1])
      {
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setPixelFormat_, (int)v7[1]);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setBlendingEnabled_, 1);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setRgbBlendOperation_, 0);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setAlphaBlendOperation_, 0);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setSourceRGBBlendFactor_, 4);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setSourceAlphaBlendFactor_, 4);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setDestinationRGBBlendFactor_, 5);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setDestinationAlphaBlendFactor_, 5);
      }
      ++v6;
    }
    while (v6 != 8);
    objc_msgSend(v13, sel_setDepthAttachmentPixelFormat_, a3->var0.var2);
    objc_msgSend(v13, sel_setStencilAttachmentPixelFormat_);
    if (*((_BYTE *)a2 + 302))
      objc_msgSend(v13, sel_setMaxVertexAmplificationCount_, 2);
    v8 = *((id *)a2 + 23);
    v12 = v8;
    re::mtl::Device::makeRenderPipelineState(&v12, (uint64_t)v13, &v11);
    re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::add<NS::SharedPtr<MTL::RenderPipelineState>&>((uint64_t)v5, (uint64_t)a3, &v11);
    v6 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet((uint64_t)v5, a3);
    if (v11)

    if (v13)
    if (v14)

    if (v15)
    if (v10)

  }
  return v6;
}

id re::VertexPositionColorWithAlpha::makeVertexDescriptor(re::VertexPositionColorWithAlpha *this)
{
  id v2;

  v2 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD770], sel_alloc), sel_init);
  *(_QWORD *)this = v2;
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setFormat_, 31);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setBufferIndex_, 0);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setOffset_, 0);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setFormat_, 31);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setBufferIndex_, 0);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setOffset_, 16);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStride_, 32);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStepFunction_, 1);
  return objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStepRate_, 1);
}

void re::DebugRenderer::init(void **this, id *a2)
{
  id v4;
  id v5;
  _anonymous_namespace_ *v6;
  id v7;

  v4 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD590], sel_alloc), sel_init);
  objc_msgSend(v4, sel_setDepthCompareFunction_, 6);
  objc_msgSend(v4, sel_setDepthWriteEnabled_, 1);
  v7 = objc_msgSend(a2[23], sel_newDepthStencilStateWithDescriptor_, v4);
  NS::SharedPtr<MTL::Texture>::operator=(this + 2, &v7);
  if (v7)

  v5 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD590], sel_alloc), sel_init);
  objc_msgSend(v5, sel_setDepthCompareFunction_, 7);
  objc_msgSend(v5, sel_setDepthWriteEnabled_, 1);
  v7 = objc_msgSend(a2[23], sel_newDepthStencilStateWithDescriptor_, v5);
  NS::SharedPtr<MTL::Texture>::operator=(this + 3, &v7);
  v6 = (_anonymous_namespace_ *)v7;
  if (v7)

  this[1] = (void *)(*((_QWORD *)a2[17] + 3) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*((_QWORD *)a2[17] + 2) << 60));
  re::DynamicArray<re::RenderText>::setCapacity(this + 37, 0x80uLL);
  ++*((_DWORD *)this + 80);
  *(_BYTE *)this = 1;
  if (v5)

  if (v4)
}

uint64_t re::BucketArray<re::RenderLine,2048ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::RenderLine,2048ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void re::DebugRenderer::drawLines(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v6 = a1 + 72;
  os_unfair_lock_lock(a1 + 72);
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    v8 = 68;
    if (a3)
    {
      v8 = 54;
      v9 = (uint64_t *)&a1[44];
    }
    else
    {
      v9 = (uint64_t *)&a1[58];
    }
    re::BucketArray<re::RenderLine,2048ul>::copy(v9, *(_QWORD *)&a1[v8]._os_unfair_lock_opaque, *(char **)a2, v7);
    atomic_store(1u, re::needDebugRendererThisFrame);
  }
  os_unfair_lock_unlock(v6);
}

uint64_t *re::BucketArray<re::RenderLine,2048ul>::copy(uint64_t *result, unint64_t a2, char *__src, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  if (!a4)
    return result;
  v6 = (uint64_t)result;
  v7 = result[5];
  if (v7 < a2)
  {
    re::internal::assertLog((re::internal *)4, a2, __src, "assertion failure: '%s' (%s:line %i) Invalid position into BucketArray.", "pos <= m_size", "copy", 681);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
  {
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in BucketArray::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 686, v7, a2, v4);
    result = (uint64_t *)_os_crash();
    __break(1u);
    return result;
  }
  if (a4 + a2 > result[1] << 11)
  {
    re::BucketArray<re::RenderLine,2048ul>::setBucketsCapacity(result, (a4 + a2 + 2047) >> 11);
    v7 = *(_QWORD *)(v6 + 40);
  }
  if (v7 >= v8)
  {
    result = (uint64_t *)re::BucketArray<re::RenderLine,2048ul>::overwriteExistingElements((char *)v6, a2, __src, v4);
  }
  else
  {
    v10 = v7 - a2;
    re::BucketArray<re::RenderLine,2048ul>::overwriteExistingElements((char *)v6, a2, __src, v7 - a2);
    result = (uint64_t *)re::BucketArray<re::RenderLine,2048ul>::copyNewElements((char *)v6, *(_QWORD *)(v6 + 40), &__src[48 * v10], v4 - v10);
    *(_QWORD *)(v6 + 40) = v8;
  }
  ++*(_DWORD *)(v6 + 48);
  return result;
}

void re::DebugRenderer::drawLine(os_unfair_lock_s *a1, __int128 *a2, __int128 *a3, __int128 *a4, int a5)
{
  os_unfair_lock_s *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v10 = a1 + 72;
  os_unfair_lock_lock(a1 + 72);
  if (a5)
    v11 = (uint64_t)&a1[44];
  else
    v11 = (uint64_t)&a1[58];
  v13 = *a2;
  v14 = *a3;
  v15 = *a4;
  v12 = (_OWORD *)re::BucketArray<re::RenderLine,2048ul>::addUninitialized(v11);
  *v12 = v13;
  v12[1] = v14;
  v12[2] = v15;
  atomic_store(1u, re::needDebugRendererThisFrame);
  os_unfair_lock_unlock(v10);
}

void re::DebugRenderer::drawArrow(os_unfair_lock_s *a1, float32x4_t *a2, float32x4_t *a3, __int128 *a4, int a5, float a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  _QWORD v26[2];
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  float32x4_t v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = vsubq_f32(*a3, *a2);
  v7 = vmulq_f32(v6, v6);
  LODWORD(v8) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  if (fabsf(v8) >= 1.0e-10)
  {
    v13 = v8;
    v14 = vrsqrte_f32((float32x2_t)LODWORD(v8));
    v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v13), vmul_f32(v14, v14)));
    v24 = vmulq_n_f32(v6, vmul_f32(v15, vrsqrts_f32((float32x2_t)LODWORD(v13), vmul_f32(v15, v15))).f32[0]);
    re::DebugRenderer::drawLine(a1, (__int128 *)a2, (__int128 *)a3, a4, a5);
    if (fabsf(v24.f32[2]) >= 0.00001)
    {
      v17.i32[0] = 0;
      v17.f32[1] = -v24.f32[2];
      v16 = v24;
      v17.i64[1] = v24.u32[1];
    }
    else
    {
      v16 = v24;
      v17.i64[1] = 0;
      v17.f32[0] = -v24.f32[1];
      v17.i32[1] = v24.i32[0];
    }
    v18 = (int32x4_t)vmulq_f32(v17, v17);
    v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
    v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
    v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
    v21 = vmulq_n_f32(v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
    v22 = vsubq_f32(*a3, vmulq_n_f32(v16, a6));
    v23 = vmulq_n_f32(v21, a6 * 0.25);
    v27[0] = *a3;
    v27[1] = vaddq_f32(v22, v23);
    v28 = *a4;
    v29 = v27[0];
    v30 = vsubq_f32(v22, v23);
    v31 = v28;
    v26[0] = v27;
    v26[1] = 2;
    re::DebugRenderer::drawLines(a1, (uint64_t)v26, a5);
  }
}

void re::DebugRenderer::drawAxis(os_unfair_lock_s *a1, float32x4_t *a2, int a3, float a4, float a5)
{
  float v8;
  int32x4_t v10;
  unint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int128 v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v8 = a5 / a4;
  v10.i64[0] = 0;
  LODWORD(v11) = 0;
  *((float *)&v11 + 1) = a4;
  v10.i64[1] = LODWORD(a4);
  v13 = *a2;
  v12 = a2[1];
  v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  v15 = vnegq_f32(v12);
  v16 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)LODWORD(a4), (int32x4_t)LODWORD(a4)), (int8x16_t)LODWORD(a4), 0xCuLL), v15), (float32x4_t)LODWORD(a4), v14);
  v17 = (int8x16_t)vaddq_f32(v16, v16);
  v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
  v19 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v15), v18, v14);
  v40 = vaddq_f32(*a2, vaddq_f32(vaddq_f32((float32x4_t)LODWORD(a4), vmulq_laneq_f32(v18, v12, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL)));
  v20 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v15), (float32x4_t)v11, v14);
  v21 = (int8x16_t)vaddq_f32(v20, v20);
  v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL);
  v23 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v15), v22, v14);
  v35 = vaddq_f32(v13, vaddq_f32(vaddq_f32((float32x4_t)v11, vmulq_laneq_f32(v22, v12, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), v23, 0xCuLL)));
  v39 = v35;
  v24 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL), v15), (float32x4_t)v10, v14);
  v25 = (int8x16_t)vaddq_f32(v24, v24);
  v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), v25, 0xCuLL);
  v27 = vaddq_f32((float32x4_t)v10, vmulq_laneq_f32(v26, v12, 3));
  v28 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), v15), v26, v14);
  v36 = vaddq_f32(v13, vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), v28, 0xCuLL)));
  v29 = vsubq_f32(v40, v13);
  v30 = vmulq_f32(v29, v29);
  v37 = xmmword_2260E5F10;
  v38 = v36;
  re::DebugRenderer::drawArrow(a1, a2, &v40, &v37, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]));
  v31 = vsubq_f32(v35, *a2);
  v32 = vmulq_f32(v31, v31);
  v37 = xmmword_2260E5F20;
  re::DebugRenderer::drawArrow(a1, a2, &v39, &v37, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]));
  v33 = vsubq_f32(v36, *a2);
  v34 = vmulq_f32(v33, v33);
  v37 = xmmword_2260E5F40;
  re::DebugRenderer::drawArrow(a1, a2, &v38, &v37, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]));
}

{
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;

  v8 = a5 / a4;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  v12 = vaddq_f32(v11, vmlaq_f32(vmlaq_f32(vmulq_n_f32(*a2, a4), (float32x4_t)0, v9), (float32x4_t)0, v10));
  v13 = vmulq_f32(*a2, (float32x4_t)0);
  v14 = vaddq_f32(v11, vmlaq_f32(vmlaq_n_f32(v13, v9, a4), (float32x4_t)0, v10));
  v28 = vdivq_f32(v12, (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3));
  v15 = vaddq_f32(v11, vmlaq_n_f32(vmlaq_f32(v13, (float32x4_t)0, v9), v10, a4));
  v22 = vdivq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3));
  v23 = vdivq_f32(v15, (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3));
  v26 = v23;
  v27 = v22;
  v16 = vsubq_f32(v28, v11);
  v17 = vmulq_f32(v16, v16);
  v24 = xmmword_2260E5F10;
  v25 = v11;
  re::DebugRenderer::drawArrow(a1, &v25, &v28, &v24, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]));
  v25 = a2[3];
  v18 = vsubq_f32(v22, v25);
  v19 = vmulq_f32(v18, v18);
  v24 = xmmword_2260E5F20;
  re::DebugRenderer::drawArrow(a1, &v25, &v27, &v24, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]));
  v25 = a2[3];
  v20 = vsubq_f32(v23, v25);
  v21 = vmulq_f32(v20, v20);
  v24 = xmmword_2260E5F40;
  re::DebugRenderer::drawArrow(a1, &v25, &v26, &v24, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]));
}

void re::DebugRenderer::drawPoint(os_unfair_lock_s *a1, __int128 *a2, __int128 *a3, int a4, float a5)
{
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v10 = a1 + 114;
  os_unfair_lock_lock(a1 + 114);
  if (a4)
    v11 = (uint64_t)&a1[86];
  else
    v11 = (uint64_t)&a1[100];
  v13 = *a2;
  v14 = *a3;
  v12 = re::BucketArray<re::RenderPoint,2048ul>::addUninitialized(v11);
  *(_OWORD *)v12 = v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(float *)(v12 + 32) = a5;
  atomic_store(1u, re::needDebugRendererThisFrame);
  os_unfair_lock_unlock(v10);
}

__n128 re::DebugRenderer::drawText(uint64_t a1, float32x4_t *a2, char *a3, const StringID *a4, __int128 *a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __int128 v26;
  __n128 result;
  __int128 v28[4];

  v5 = a2[1].f32[0];
  v6 = a2[1].f32[1];
  v7 = v5 + v5;
  v8 = v6 + v6;
  v9 = a2[1].f32[2];
  v10 = a2[1].f32[3];
  v11 = v9 + v9;
  v12 = v5 * (float)(v5 + v5);
  v13 = v6 * (float)(v6 + v6);
  v14 = v9 * (float)(v9 + v9);
  v15 = v7 * v6;
  v16 = v7 * v9;
  v17 = v8 * v9;
  v18 = v7 * v10;
  v19 = v8 * v10;
  v20 = v11 * v10;
  v21.i32[3] = 0;
  v21.f32[0] = 1.0 - (float)(v13 + v14);
  v21.f32[1] = v15 + v20;
  v22.i32[3] = 0;
  v21.f32[2] = v16 - v19;
  v23.i32[3] = 0;
  v23.f32[0] = v15 - v20;
  v23.f32[1] = 1.0 - (float)(v12 + v14);
  v23.f32[2] = v17 + v18;
  v22.f32[0] = v16 + v19;
  v22.f32[1] = v17 - v18;
  v22.f32[2] = 1.0 - (float)(v12 + v13);
  v24 = *a2;
  v25 = vmulq_n_f32(v23, *(float *)vshrq_n_u64(*(uint64x2_t *)a2, 0x20uLL).i32);
  v28[0] = (__int128)vmulq_n_f32(v21, COERCE_FLOAT(*a2));
  v28[1] = (__int128)v25;
  v26 = (__int128)a2[2];
  HIDWORD(v26) = 1.0;
  v28[2] = (__int128)vmulq_laneq_f32(v22, v24, 2);
  v28[3] = v26;
  re::DebugRenderer::drawText(a1, v28, a3, a4, a5);
  return result;
}

void re::DebugRenderer::drawText(uint64_t a1, __int128 *a2, char *__s, const StringID *a4, __int128 *a5)
{
  re *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  re *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v10 = (re *)strlen(__s);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = re::globalAllocators(v10);
  v13 = re::PerFrameAllocatorManager::perFrameAllocator(v12[6], v11);
  v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, (uint64_t)v10 + 1, 0);
  memcpy(v14, __s, (size_t)v10 + 1);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
  re::StringID::StringID((re::StringID *)v19, a4);
  v15 = *a2;
  v16 = a2[1];
  v20 = *a5;
  v21 = v15;
  v17 = a2[2];
  v18 = a2[3];
  v22 = v16;
  v23 = v17;
  v24 = v18;
  v25 = v14;
  v26 = v10;
  v27 = -1;
  re::DynamicArray<re::RenderText>::add((_anonymous_namespace_ *)(a1 + 296), v19);
  re::StringID::destroyString((re::StringID *)v19);
  atomic_store(1u, re::needDebugRendererThisFrame);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 336));
}

__n128 re::DynamicArray<re::RenderText>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderText>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + (v4 << 7);
  v6 = *a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v7 = a2[14];
  v8 = *((_OWORD *)a2 + 4);
  v9 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(v5 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v5 + 96) = v9;
  *(_OWORD *)(v5 + 64) = v8;
  v11 = *((_OWORD *)a2 + 2);
  result = *((__n128 *)a2 + 3);
  *(_OWORD *)(v5 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v5 + 32) = v11;
  *(__n128 *)(v5 + 48) = result;
  *(_QWORD *)(v5 + 112) = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DebugRenderer::drawCircle(os_unfair_lock_s *a1, float32x4_t *a2, int a3, __int128 *a4, int a5, __n128 result)
{
  uint64_t v6;
  uint64_t v7;
  int v10;
  float v13;
  __float2 v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unsigned __int32 v32;
  __n128 v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a3 >= 1)
  {
    v36 = v6;
    v37 = v7;
    v10 = a3;
    v32 = result.n128_u32[0];
    v13 = 6.28318531 / (float)a3;
    v14 = __sincosf_stret(v13 * 0.5);
    v15 = vrsqrte_f32((float32x2_t)1065353216);
    v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v15, v15)));
    v17.i64[1] = 1065353216;
    v18 = vmulq_n_f32((float32x4_t)xmmword_2260E5F40, vmul_f32(v16, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v16, v16))).f32[0]);
    *(float32x2_t *)v17.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, v14.__sinval);
    v19.f32[0] = vmuls_lane_f32(v14.__sinval, v18, 2);
    v20 = v17;
    v20.i32[2] = v19.i32[0];
    result.n128_u8[4] = 0;
    result.n128_u8[5] = 0;
    result.n128_u8[6] = 0;
    result.n128_u8[7] = 0;
    result.n128_u8[8] = 0;
    result.n128_u8[9] = 0;
    result.n128_u8[10] = 0;
    result.n128_u8[11] = 0;
    result.n128_u8[12] = 0;
    result.n128_u8[13] = 0;
    result.n128_u8[14] = 0;
    result.n128_u8[15] = 0;
    result.n128_u32[0] = v32;
    *(uint64_t *)((char *)v19.i64 + 4) = v17.i64[0];
    v30 = vnegq_f32(v20);
    v31 = v19;
    do
    {
      v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)result, (int32x4_t)result), (int8x16_t)result, 0xCuLL), v30), (float32x4_t)result, v31);
      v22 = (int8x16_t)vaddq_f32(v21, v21);
      v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL);
      v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), v30), v23, v31);
      v25 = vaddq_f32(vaddq_f32((float32x4_t)result, vmulq_n_f32(v23, v14.__cosval)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL));
      v26 = *a2;
      v27 = a2[1];
      v28 = a2[2];
      v29 = a2[3];
      v35 = vaddq_f32(v29, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, result.n128_f32[0]), v27, (float32x2_t)result.n128_u64[0], 1), v28, (float32x4_t)result, 2));
      v33 = (__n128)v25;
      v34 = vaddq_f32(v29, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v25.f32[0]), v27, *(float32x2_t *)v25.f32, 1), v28, v25, 2));
      re::DebugRenderer::drawLine(a1, (__int128 *)&v35, (__int128 *)&v34, a4, a5);
      result = v33;
      --v10;
    }
    while (v10);
  }
  return result;
}

__n128 re::DebugRenderer::drawBox(os_unfair_lock_s *a1, float32x4_t *a2, float *a3, __int128 *a4, int a5)
{
  float v5;
  float v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  _QWORD v22[2];
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  float32x4_t v26;
  float32x4_t v27;
  __int128 v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  float32x4_t v32;
  float32x4_t v33;
  __int128 v34;
  float32x4_t v35;
  float32x4_t v36;
  __int128 v37;
  float32x4_t v38;
  float32x4_t v39;
  __int128 v40;
  float32x4_t v41;
  float32x4_t v42;
  __int128 v43;
  float32x4_t v44;
  float32x4_t v45;
  __int128 v46;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  float32x4_t v50;
  float32x4_t v51;
  __int128 v52;
  float32x4_t v53;
  float32x4_t v54;
  __int128 v55;
  float32x4_t v56;
  float32x4_t v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v6 = a3[5] - v5;
  v7 = a3[2];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = vmulq_n_f32(*a2, *a3);
  v12 = vmlaq_n_f32(v11, v8, v5);
  v13 = vmulq_n_f32(*a2, *a3 + (float)(a3[4] - *a3));
  v14 = vmlaq_n_f32(v13, v8, v5);
  v15 = v7 + (float)(a3[6] - v7);
  v23 = vaddq_f32(v10, vmlaq_n_f32(v12, v9, v7));
  v24 = vaddq_f32(v10, vmlaq_n_f32(v14, v9, v7));
  v16 = v5 + v6;
  v17 = vmlaq_n_f32(v11, v8, v16);
  v18 = vmlaq_n_f32(v13, v8, v16);
  v25 = *a4;
  v26 = v24;
  v27 = vaddq_f32(v10, vmlaq_n_f32(v14, v9, v15));
  v28 = v25;
  v29 = v27;
  v30 = vaddq_f32(v10, vmlaq_n_f32(v12, v9, v15));
  v31 = v25;
  v32 = v23;
  v33 = v30;
  v34 = v25;
  v35 = v23;
  v36 = vaddq_f32(v10, vmlaq_n_f32(v17, v9, v7));
  v37 = v25;
  v38 = v24;
  v19 = *a4;
  v39 = vaddq_f32(v10, vmlaq_n_f32(v18, v9, v7));
  v40 = v19;
  v41 = v27;
  v42 = vaddq_f32(v10, vmlaq_n_f32(v18, v9, v15));
  v43 = v19;
  v44 = v30;
  v45 = vaddq_f32(v10, vmlaq_n_f32(v17, v9, v15));
  v46 = v19;
  v47 = v36;
  v48 = v39;
  v49 = v19;
  v50 = v39;
  v51 = v42;
  v52 = v19;
  v53 = v42;
  v54 = v45;
  v55 = v19;
  v56 = v36;
  v20 = *a4;
  v57 = v45;
  v58 = v20;
  v22[0] = &v23;
  v22[1] = 12;
  re::DebugRenderer::drawLines(a1, (uint64_t)v22, a5);
  return result;
}

void re::DebugRenderer::drawSphere(os_unfair_lock_s *a1, uint64_t a2, int a3, __int128 *a4, int a5, float a6)
{
  float32x4_t v11;
  __n128 v12;
  float32x4_t v13;
  uint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x16_t v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  __n128 v32;
  uint64_t v33;
  int8x16_t v34;
  float v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __n128 v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  __n128 v55;
  float32x4_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float32x4_t v61;
  __n128 v62;
  float32x4_t v63;
  float32x4_t v64;

  v11 = *(float32x4_t *)(a2 + 16);
  v53 = *(float32x4_t *)a2;
  v54 = v11;
  v13 = *(float32x4_t *)(a2 + 48);
  v55 = *(__n128 *)(a2 + 32);
  v12 = v55;
  v56 = v13;
  v12.n128_f32[0] = a6;
  re::DebugRenderer::drawCircle(a1, &v53, a3, a4, a5, v12);
  v14 = 0;
  v15 = vrsqrte_f32((float32x2_t)1065353216);
  v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v15, v15)));
  LODWORD(v52) = vmul_f32(v16, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v16, v16))).u32[0];
  v17 = (int8x16_t)vmulq_n_f32((float32x4_t)xmmword_2260E5F10, v52);
  v16.f32[0] = 0.70711 * *(float *)v17.i32;
  v18 = v16.f32[0] + v16.f32[0];
  v16.f32[0] = v16.f32[0] * (float)(v16.f32[0] + v16.f32[0]);
  *(float32x2_t *)v17.i8 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 4uLL), (float32x2_t)vdup_n_s32(0x3F3504F3u));
  v19 = vadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8);
  v20 = vmul_f32(*(float32x2_t *)v17.i8, v19);
  v21 = v18 * *(float *)v17.i32;
  v22 = vmuls_lane_f32(v18, *(float32x2_t *)v17.i8, 1);
  *(float *)v17.i32 = vmuls_lane_f32(v19.f32[0], *(float32x2_t *)v17.i8, 1);
  v23 = v18 * 0.70711;
  v24 = 0.70711 * v19.f32[0];
  v19.f32[0] = vmuls_lane_f32(0.70711, v19, 1);
  HIDWORD(v25) = 0;
  *(float *)&v25 = 1.0 - vaddv_f32(v20);
  *((float *)&v25 + 1) = v21 + v19.f32[0];
  HIDWORD(v26) = 0;
  *((float *)&v25 + 2) = v22 - v24;
  HIDWORD(v27) = 0;
  *(float *)&v27 = v21 - v19.f32[0];
  *((float *)&v27 + 1) = 1.0 - (float)(v16.f32[0] + v20.f32[1]);
  *((float *)&v27 + 2) = *(float *)v17.i32 + v23;
  *(float *)&v26 = v22 + v24;
  *((float *)&v26 + 1) = *(float *)v17.i32 - v23;
  *((float *)&v26 + 2) = 1.0 - (float)(v16.f32[0] + v20.f32[0]);
  v28 = v53;
  v29 = v54;
  v30 = (float32x4_t)v55;
  v31 = v56;
  v57 = v25;
  v58 = v27;
  v59 = v26;
  v60 = xmmword_2260E5D70;
  do
  {
    *(float32x4_t *)((char *)&v61 + v14) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, COERCE_FLOAT(*(__int128 *)((char *)&v57 + v14))), v29, *(float32x2_t *)((char *)&v57 + v14), 1), v30, *(float32x4_t *)((char *)&v57 + v14), 2), v31, *(float32x4_t *)((char *)&v57 + v14), 3);
    v14 += 16;
  }
  while (v14 != 64);
  v32 = v62;
  v50 = v61;
  v51 = (float32x4_t)v62;
  v48 = v64;
  v49 = v63;
  v53 = v61;
  v54 = (float32x4_t)v62;
  v55 = (__n128)v63;
  v56 = v64;
  v32.n128_f32[0] = a6;
  re::DebugRenderer::drawCircle(a1, &v53, a3, a4, a5, v32);
  v33 = 0;
  v34 = (int8x16_t)vmulq_n_f32((float32x4_t)xmmword_2260E5F20, v52);
  v35 = 0.70711 * *(float *)v34.i32;
  v36 = v35 + v35;
  v37 = v35 * (float)(v35 + v35);
  *(float32x2_t *)v34.i8 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 4uLL), (float32x2_t)vdup_n_s32(0x3F3504F3u));
  v38 = vadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8);
  v39 = vmul_f32(*(float32x2_t *)v34.i8, v38);
  v40 = v36 * *(float *)v34.i32;
  v41 = vmuls_lane_f32(v36, *(float32x2_t *)v34.i8, 1);
  *(float *)v34.i32 = vmuls_lane_f32(v38.f32[0], *(float32x2_t *)v34.i8, 1);
  v42 = v36 * 0.70711;
  v43 = 0.70711 * v38.f32[0];
  v38.f32[0] = vmuls_lane_f32(0.70711, v38, 1);
  HIDWORD(v44) = 0;
  *(float *)&v44 = 1.0 - vaddv_f32(v39);
  *((float *)&v44 + 1) = v40 + v38.f32[0];
  HIDWORD(v45) = 0;
  *((float *)&v44 + 2) = v41 - v43;
  HIDWORD(v46) = 0;
  *(float *)&v46 = v40 - v38.f32[0];
  *((float *)&v46 + 1) = 1.0 - (float)(v37 + v39.f32[1]);
  *((float *)&v46 + 2) = *(float *)v34.i32 + v42;
  *(float *)&v45 = v41 + v43;
  *((float *)&v45 + 1) = *(float *)v34.i32 - v42;
  *((float *)&v45 + 2) = 1.0 - (float)(v37 + v39.f32[0]);
  v57 = v44;
  v58 = v46;
  v59 = v45;
  v60 = xmmword_2260E5D70;
  do
  {
    *(float32x4_t *)((char *)&v61 + v33) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, COERCE_FLOAT(*(__int128 *)((char *)&v57 + v33))), v51, *(float32x2_t *)((char *)&v57 + v33), 1), v49, *(float32x4_t *)((char *)&v57 + v33), 2), v48, *(float32x4_t *)((char *)&v57 + v33), 3);
    v33 += 16;
  }
  while (v33 != 64);
  v47 = (__n128)v61;
  v53 = v61;
  v54 = (float32x4_t)v62;
  v55 = (__n128)v63;
  v56 = v64;
  v47.n128_f32[0] = a6;
  re::DebugRenderer::drawCircle(a1, &v53, a3, a4, a5, v47);
}

void re::DebugRenderer::appendDebugTextToRenderFrame(os_unfair_lock_s *this, re::RenderFrame *a2, const re::WeakStringID *a3)
{
  unsigned __int8 v3;
  os_unfair_lock_s *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = atomic_load(re::needDebugRendererThisFrame);
  if ((v3 & 1) != 0)
  {
    v7 = this + 84;
    os_unfair_lock_lock(this + 84);
    if (*(_QWORD *)&this[78]._os_unfair_lock_opaque)
    {
      v8 = *(_QWORD *)&this[76]._os_unfair_lock_opaque;
      v9 = re::RenderFrameData::stream((re::RenderFrame *)((char *)a2 + 264), a3);
      (*(void (**)(_QWORD, os_unfair_lock_s *))(**(_QWORD **)(v9 + 48) + 712))(*(_QWORD *)(v9 + 48), this + 74);
      re::DynamicArray<re::RenderText>::clear((uint64_t)&this[74]);
      if (*(_QWORD *)&this[76]._os_unfair_lock_opaque < v8)
        re::DynamicArray<re::RenderText>::setCapacity(&this[74]._os_unfair_lock_opaque, v8);
    }
    os_unfair_lock_unlock(v7);
  }
}

void re::DynamicArray<re::RenderText>::clear(uint64_t a1)
{
  uint64_t v2;
  re::StringID *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::StringID **)(a1 + 32);
    v4 = v2 << 7;
    do
    {
      re::StringID::destroyString(v3);
      v3 = (re::StringID *)((char *)v3 + 128);
      v4 -= 128;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::DebugRenderer::render(uint64_t a1, unsigned __int8 *a2, RenderTargetInfo *a3, int a4, uint64_t a5, re::FrameContext *a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, BOOL a12, uint64_t a13, uint64_t a14, re::RenderManager *a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, uint64_t a20,uint64_t a21,__int128 a22,int a23,int a24,RenderTargetInfo *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,__int128 a38,__int128 a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,__int128 a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,uint64_t a53,uint64_t a54)
{
  unsigned __int8 v54;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  unsigned __int8 *v65;
  float32x4_t *v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  simd_float4x4 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  const RenderCommandEncoder *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  void (*v106)(uint64_t, char *, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  const RenderCommandEncoder *v111;
  uint64_t v112;
  _QWORD *v113;
  const RenderCommandEncoder *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  void (*v118)(uint64_t, char *, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  const RenderCommandEncoder *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 vars0a;
  uint64_t vars0;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  unsigned __int8 *v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned __int8 *v150;
  int var1;
  simd_float4x4 v153;

  a54 = *MEMORY[0x24BDAC8D0];
  v54 = atomic_load(re::needDebugRendererThisFrame);
  if ((v54 & 1) == 0)
    return;
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 168))(**(_QWORD **)(a5 + 8), sel_setTriangleFillMode_, 0);
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 64))(**(_QWORD **)(a5 + 8), sel_setCullMode_, 0);
  v61 = *(_QWORD *)(a8 + 16);
  if (!v61)
  {
    a41 = 0;
    a47 = 0u;
    a48 = 0u;
    a45 = 0u;
    a46 = 0u;
    a44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a49) = 136315906;
    *(_QWORD *)((char *)&a49 + 4) = "operator[]";
    WORD6(a49) = 1024;
    *(_DWORD *)((char *)&a49 + 14) = 797;
    WORD1(a50) = 2048;
    *(_QWORD *)((char *)&a50 + 4) = 0;
    WORD6(a50) = 2048;
    *(_QWORD *)((char *)&a50 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_64;
  }
  v62 = *(_QWORD *)(a7 + 16);
  if (!v62)
  {
LABEL_64:
    a41 = 0;
    a47 = 0u;
    a48 = 0u;
    a45 = 0u;
    a46 = 0u;
    a44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a49) = 136315906;
    *(_QWORD *)((char *)&a49 + 4) = "operator[]";
    WORD6(a49) = 1024;
    *(_DWORD *)((char *)&a49 + 14) = 797;
    WORD1(a50) = 2048;
    *(_QWORD *)((char *)&a50 + 4) = 0;
    WORD6(a50) = 2048;
    *(_QWORD *)((char *)&a50 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    a41 = 0;
    a47 = 0u;
    a48 = 0u;
    a45 = 0u;
    a46 = 0u;
    a44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a49) = 136315906;
    *(_QWORD *)((char *)&a49 + 4) = "operator[]";
    WORD6(a49) = 1024;
    *(_DWORD *)((char *)&a49 + 14) = 797;
    WORD1(a50) = 2048;
    *(_QWORD *)((char *)&a50 + 4) = 1;
    WORD6(a50) = 2048;
    *(_QWORD *)((char *)&a50 + 14) = 1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    a41 = 0;
    a47 = 0u;
    a48 = 0u;
    a45 = 0u;
    a46 = 0u;
    a44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a49) = 136315906;
    *(_QWORD *)((char *)&a49 + 4) = "operator[]";
    WORD6(a49) = 1024;
    *(_DWORD *)((char *)&a49 + 14) = 797;
    WORD1(a50) = 2048;
    *(_QWORD *)((char *)&a50 + 4) = 1;
    WORD6(a50) = 2048;
    *(_QWORD *)((char *)&a50 + 14) = 1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v63 = 0;
  v64 = BYTE8(a9);
  v65 = (unsigned __int8 *)a9;
  var1 = a3->var1;
  v66 = *(float32x4_t **)(a8 + 32);
  v67 = *(_QWORD *)(a7 + 32);
  v68 = *v66;
  v69 = v66[1];
  v70 = v66[2];
  v71 = v66[3];
  v72 = *(simd_float4x4 *)v67;
  a49 = *(_OWORD *)v67;
  a50 = (__int128)v72.columns[1];
  a51 = (__int128)v72.columns[2];
  a52 = (__int128)v72.columns[3];
  do
  {
    *(__int128 *)((char *)&a44 + v63) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v68, COERCE_FLOAT(*(__int128 *)((char *)&a49 + v63))), v69, *(float32x2_t *)((char *)&a49 + v63), 1), v70, *(float32x4_t *)((char *)&a49 + v63), 2), v71, *(float32x4_t *)((char *)&a49 + v63), 3);
    v63 += 16;
  }
  while (v63 != 64);
  v73 = a44;
  v74 = a45;
  v75 = a46;
  v76 = a47;
  v77 = xmmword_2260E5D70;
  v78 = xmmword_2260E5F40;
  v79 = xmmword_2260E5F20;
  v80 = xmmword_2260E5F10;
  if (*(_BYTE *)a9 != 2)
    goto LABEL_12;
  if (v61 <= 1)
    goto LABEL_65;
  if (v62 <= 1)
    goto LABEL_66;
  v81 = 0;
  v82 = v66[4];
  v83 = v66[5];
  v84 = v66[6];
  v85 = v66[7];
  v86 = *(_OWORD *)(v67 + 80);
  v87 = *(_OWORD *)(v67 + 96);
  v88 = *(_OWORD *)(v67 + 112);
  a49 = *(_OWORD *)(v67 + 64);
  a50 = v86;
  a51 = v87;
  a52 = v88;
  do
  {
    *(__int128 *)((char *)&a44 + v81) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, COERCE_FLOAT(*(__int128 *)((char *)&a49 + v81))), v83, *(float32x2_t *)((char *)&a49 + v81), 1), v84, *(float32x4_t *)((char *)&a49 + v81), 2), v85, *(float32x4_t *)((char *)&a49 + v81), 3);
    v81 += 16;
  }
  while (v81 != 64);
  v80 = a44;
  v79 = a45;
  v78 = a46;
  v77 = a47;
LABEL_12:
  v131 = v80;
  v141 = v79;
  v143 = v78;
  v145 = v77;
  v138 = a2;
  v125 = v73;
  v127 = v74;
  vars0a = v75;
  v139 = v76;
  v153 = __invert_f4(v72);
  a39 = (__int128)vmlaq_f32(vmlaq_f32((float32x4_t)v153.columns[0], (float32x4_t)0, (float32x4_t)v153.columns[1]), (float32x4_t)0, (float32x4_t)v153.columns[2]);
  a38 = (__int128)vmlaq_f32(vaddq_f32((float32x4_t)v153.columns[1], vmulq_f32((float32x4_t)v153.columns[0], (float32x4_t)0)), (float32x4_t)0, (float32x4_t)v153.columns[2]);
  re::FrameContext::perFrameAlloc(a6, 0x100uLL, 0x100uLL, (uint64_t)&a44);
  v147 = a45;
  v148 = DWORD2(a44);
  v89 = a44 + DWORD2(a44);
  *(_OWORD *)v89 = v125;
  *(_OWORD *)(v89 + 16) = v127;
  *(_OWORD *)(v89 + 32) = vars0a;
  *(_OWORD *)(v89 + 48) = v139;
  *(_OWORD *)(v89 + 64) = v131;
  *(_OWORD *)(v89 + 80) = v141;
  *(_OWORD *)(v89 + 96) = v143;
  *(_OWORD *)(v89 + 112) = v145;
  *(_DWORD *)(v89 + 128) = 1065353216;
  *(_OWORD *)(v89 + 132) = 0u;
  *(_OWORD *)(v89 + 148) = 0u;
  *(_OWORD *)(v89 + 164) = 0u;
  *(_OWORD *)(v89 + 180) = 0u;
  *(_OWORD *)(v89 + 196) = 0u;
  *(_OWORD *)(v89 + 212) = 0u;
  *(_OWORD *)(v89 + 228) = 0u;
  *(_OWORD *)(v89 + 240) = 0u;
  a46 = 0u;
  a47 = 0u;
  a45 = 0u;
  re::FrameContext::perFrameAlloc(a6, 0x80uLL, 0x80uLL, (uint64_t)&a49);
  v144 = a50;
  v146 = DWORD2(a49);
  v90 = a49 + DWORD2(a49);
  *(_DWORD *)(v90 + 16) = 0;
  *(_DWORD *)(v90 + 28) = 1;
  *(_OWORD *)(v90 + 32) = a44;
  *(_OWORD *)(v90 + 48) = a45;
  *(_OWORD *)(v90 + 64) = a46;
  *(_OWORD *)(v90 + 80) = a47;
  a50 = 0u;
  a51 = 0u;
  v91 = *v65;
  re::FrameContext::perFrameAlloc(a6, 0x400uLL, 0x100uLL, (uint64_t)&a41);
  v140 = a43;
  v142 = a42;
  v92 = a41 + a42;
  *(_OWORD *)v92 = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 16) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 32) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 48) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 64) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 80) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 96) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 112) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 128) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 144) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 160) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 176) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 192) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 208) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 224) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 240) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 256) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 272) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 288) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 304) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 320) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 336) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 352) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 368) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 384) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 400) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 416) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 432) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 448) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 464) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 480) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 496) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 512) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 528) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 544) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 560) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 576) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 592) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 608) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 624) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 640) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 656) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 672) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 688) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 704) = xmmword_2260E5F10;
  *(_OWORD *)(v92 + 720) = xmmword_2260E5F20;
  *(_OWORD *)(v92 + 736) = xmmword_2260E5F40;
  *(_OWORD *)(v92 + 752) = xmmword_2260E5D70;
  *(_OWORD *)(v92 + 880) = 0u;
  *(_OWORD *)(v92 + 896) = 0u;
  *(_OWORD *)(v92 + 848) = 0u;
  *(_OWORD *)(v92 + 864) = 0u;
  *(_OWORD *)(v92 + 816) = 0u;
  *(_OWORD *)(v92 + 832) = 0u;
  *(_OWORD *)(v92 + 784) = 0u;
  *(_OWORD *)(v92 + 800) = 0u;
  *(_OWORD *)(v92 + 768) = 0u;
  *(_DWORD *)(v92 + 940) = v91;
  v137 = v64;
  *(_DWORD *)(v92 + 944) = v64;
  *(_OWORD *)(v92 + 960) = 0u;
  *(_OWORD *)(v92 + 976) = a49;
  *(_OWORD *)(v92 + 992) = a50;
  *(_OWORD *)(v92 + 1008) = a51;
  a30 = 0;
  a31 = 0;
  a26 = 0;
  a27 = 0;
  a28 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  v93 = *(_QWORD *)(a1 + 216);
  if (v93)
  {
    v94 = 2 * v93;
    if (var1)
      v94 = 24 * v93;
    re::FrameContext::perFrameAlloc(a6, 32 * v94, 0x10uLL, (uint64_t)&a41);
    v95 = a43;
    v149 = a42;
    a35 = a41;
    a36 = a42;
    a37 = a43;
    re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_0::operator()(a1 + 176, v93, &a35, var1 == 0);
    v126 = v149;
  }
  else
  {
    v126 = 0;
    v95 = 0;
  }
  v150 = v65;
  v96 = *(_QWORD *)(a1 + 272);
  if (v96)
  {
    v97 = 2 * v96;
    if (var1)
      v97 = 24 * v96;
    re::FrameContext::perFrameAlloc(a6, 32 * v97, 0x10uLL, (uint64_t)&a41);
    v134 = a42;
    a32 = a41;
    a33 = a42;
    v132 = a43;
    a34 = a43;
    re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_0::operator()(a1 + 232, v96, &a32, var1 == 0);
    vars0 = v134;
  }
  else
  {
    vars0 = 0;
    v132 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 288));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 456));
  v98 = *(_QWORD *)(a1 + 384);
  if (v98)
  {
    re::FrameContext::perFrameAlloc(a6, 192 * v98, 0x10uLL, (uint64_t)&a41);
    v135 = a42;
    a29 = a41;
    a30 = a42;
    v124 = a43;
    a31 = a43;
    re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_1::operator()(a1 + 344, v98, (uint64_t)&a29, (float32x4_t *)&a39, (float32x4_t *)&a38);
    v128 = v135;
  }
  else
  {
    v128 = 0;
    v124 = 0;
  }
  v99 = *(_QWORD *)(a1 + 440);
  if (v99)
  {
    re::FrameContext::perFrameAlloc(a6, 192 * v99, 0x10uLL, (uint64_t)&a41);
    LODWORD(v133) = a42;
    a26 = a41;
    a27 = a42;
    v136 = a43;
    a28 = a43;
    re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_1::operator()(a1 + 400, v99, (uint64_t)&a26, (float32x4_t *)&a39, (float32x4_t *)&a38);
    v133 = v133;
  }
  else
  {
    v133 = 0;
    v136 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 456));
  if (v93)
  {
    (*(void (**)(_QWORD, char *, id))(*(_QWORD *)(a5 + 8) + 152))(**(_QWORD **)(a5 + 8), sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "DebugRenderer (lines)", 4));
    if ((a3->var0.var2 - 250) <= 0xA && ((1 << (LOBYTE(a3->var0.var2) + 6)) & 0x425) != 0)
      v100 = (_QWORD *)(a1 + 16);
    else
      v100 = (_QWORD *)(a1 + 24);
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 112))(**(_QWORD **)(a5 + 8), sel_setDepthStencilState_, *v100);
    v101 = (_QWORD *)re::DebugRenderer::pipelineState((re::DebugRenderer *)a1, (re::RenderManager *)v138, a3);
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 56))(**(_QWORD **)(a5 + 8), sel_setRenderPipelineState_, *v101);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v95, v126, 0);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v147, v148, 1);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v144, v146, 2);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v140, v142, 3);
    re::setVertexAmplificationCount((_anonymous_namespace_ *)v138[302], v137, *v150, 0xFFFF, a5, v102);
    if (v137)
      v103 = 1;
    else
      v103 = *v150;
    v104 = *(uint64_t **)(a5 + 8);
    v105 = *v104;
    v106 = (void (*)(uint64_t, char *, uint64_t, _QWORD, uint64_t, uint64_t))v104[24];
    if (var1)
    {
      v107 = 24 * v93;
      v108 = 3;
    }
    else
    {
      v107 = 2 * v93;
      v108 = 1;
    }
    v106(v105, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, v108, 0, v107, v103);
    (*(void (**)(_QWORD, char *))(*(_QWORD *)(a5 + 8) + 160))(**(_QWORD **)(a5 + 8), sel_popDebugGroup);
  }
  if (v98)
  {
    (*(void (**)(_QWORD, char *, id))(*(_QWORD *)(a5 + 8) + 152))(**(_QWORD **)(a5 + 8), sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "DebugRenderer (points)", 4));
    if ((a3->var0.var2 - 250) <= 0xA && ((1 << (LOBYTE(a3->var0.var2) + 6)) & 0x425) != 0)
      v109 = (_QWORD *)(a1 + 16);
    else
      v109 = (_QWORD *)(a1 + 24);
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 112))(**(_QWORD **)(a5 + 8), sel_setDepthStencilState_, *v109);
    v110 = (_QWORD *)re::DebugRenderer::pipelineState((re::DebugRenderer *)a1, (re::RenderManager *)v138, a3);
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 56))(**(_QWORD **)(a5 + 8), sel_setRenderPipelineState_, *v110);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v124, v128, 0);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v147, v148, 1);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v144, v146, 2);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v140, v142, 3);
    re::setVertexAmplificationCount((_anonymous_namespace_ *)v138[302], v137, *v150, 0xFFFF, a5, v111);
    if (v137)
      v112 = 1;
    else
      v112 = *v150;
    (*(void (**)(_QWORD, char *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 192))(**(_QWORD **)(a5 + 8), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, 6 * v98, v112);
    (*(void (**)(_QWORD, char *))(*(_QWORD *)(a5 + 8) + 160))(**(_QWORD **)(a5 + 8), sel_popDebugGroup);
  }
  if (v96)
  {
    (*(void (**)(_QWORD, char *, id))(*(_QWORD *)(a5 + 8) + 152))(**(_QWORD **)(a5 + 8), sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "DebugRenderer (lines - no depth)", 4));
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 112))(**(_QWORD **)(a5 + 8), sel_setDepthStencilState_, *(_QWORD *)(a1 + 24));
    v113 = (_QWORD *)re::DebugRenderer::pipelineState((re::DebugRenderer *)a1, (re::RenderManager *)v138, a3);
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 56))(**(_QWORD **)(a5 + 8), sel_setRenderPipelineState_, *v113);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v132, vars0, 0);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v147, v148, 1);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v144, v146, 2);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v140, v142, 3);
    re::setVertexAmplificationCount((_anonymous_namespace_ *)v138[302], v137, *v150, 0xFFFF, a5, v114);
    if (v137)
      v115 = 1;
    else
      v115 = *v150;
    v116 = *(uint64_t **)(a5 + 8);
    v117 = *v116;
    v118 = (void (*)(uint64_t, char *, uint64_t, _QWORD, uint64_t, uint64_t))v116[24];
    if (var1)
    {
      v119 = 24 * v96;
      v120 = 3;
    }
    else
    {
      v119 = 2 * v96;
      v120 = 1;
    }
    v118(v117, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, v120, 0, v119, v115);
    (*(void (**)(_QWORD, char *))(*(_QWORD *)(a5 + 8) + 160))(**(_QWORD **)(a5 + 8), sel_popDebugGroup);
  }
  if (v99)
  {
    (*(void (**)(_QWORD, char *, id))(*(_QWORD *)(a5 + 8) + 152))(**(_QWORD **)(a5 + 8), sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "DebugRenderer (points - no depth)", 4));
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 112))(**(_QWORD **)(a5 + 8), sel_setDepthStencilState_, *(_QWORD *)(a1 + 24));
    v121 = (_QWORD *)re::DebugRenderer::pipelineState((re::DebugRenderer *)a1, (re::RenderManager *)v138, a3);
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a5 + 8) + 56))(**(_QWORD **)(a5 + 8), sel_setRenderPipelineState_, *v121);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v136, v133, 0);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v147, v148, 1);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v144, v146, 2);
    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(**(_QWORD **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v140, v142, 3);
    re::setVertexAmplificationCount((_anonymous_namespace_ *)v138[302], v137, *v150, 0xFFFF, a5, v122);
    if (v137)
      v123 = 1;
    else
      v123 = *v150;
    (*(void (**)(_QWORD, char *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 192))(**(_QWORD **)(a5 + 8), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, 6 * v99, v123);
    (*(void (**)(_QWORD, char *))(*(_QWORD *)(a5 + 8) + 160))(**(_QWORD **)(a5 + 8), sel_popDebugGroup);
  }
}

float32x4_t *re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float32x4_t *result;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  __int128 *v19;
  float32x4_t *v20;
  unint64_t v21;
  float32x4_t v22;
  unint64_t v23;
  float32x4_t v24;
  _OWORD *v25;
  unint64_t v26;
  float32x4_t v27;
  unint64_t v28;
  float32x4_t v29;
  _OWORD *v30;
  unint64_t v31;
  float32x4_t v32;
  unint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _OWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _OWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  unint64_t v50;
  unint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _OWORD *v55;
  unint64_t v56;
  unint64_t v57;
  _OWORD *v58;
  unint64_t v59;
  float32x4_t v61;
  float32x4_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  float32x4_t v85;
  float32x4_t v86;

  v6 = 0;
  v7 = 0;
  v8 = *a3;
  v9 = *((unsigned int *)a3 + 2);
  v10 = (unint64_t)*((unsigned int *)a3 + 3) >> 5;
  v11 = 1;
  v12 = *a3;
  while (1)
  {
    result = (float32x4_t *)re::BucketArray<re::RenderLine,2048ul>::operator[](a1, v7);
    if (!a4)
    {
      v16 = *result;
      v17 = result[1];
      v61 = result[2];
      if (v6 >= v10)
        goto LABEL_35;
      v18 = vaddq_f32(v16, (float32x4_t)xmmword_22616D240);
      v19 = (__int128 *)&result[2];
      v20 = (float32x4_t *)(v12 + v9);
      *v20 = v18;
      v20[1] = v61;
      v62 = result[2];
      v21 = v6 + 1;
      if (v6 + 1 >= v10)
        goto LABEL_36;
      v22 = vaddq_f32(v16, (float32x4_t)xmmword_22616D250);
      v20[2] = v22;
      v20[3] = v62;
      v63 = *v19;
      v23 = v6 + 2;
      if (v6 + 2 >= v10)
        goto LABEL_37;
      v24 = vaddq_f32(v16, (float32x4_t)xmmword_22616D260);
      v25 = (_OWORD *)(v12 + v9);
      v25[4] = v24;
      v25[5] = v63;
      v64 = *v19;
      v26 = v6 + 3;
      if (v6 + 3 >= v10)
        goto LABEL_38;
      v27 = vaddq_f32(v17, (float32x4_t)xmmword_22616D240);
      v25[6] = v27;
      v25[7] = v64;
      v65 = *v19;
      v28 = v6 + 4;
      if (v6 + 4 >= v10)
        goto LABEL_39;
      v29 = vaddq_f32(v17, (float32x4_t)xmmword_22616D250);
      v30 = (_OWORD *)(v12 + v9);
      v30[8] = v29;
      v30[9] = v65;
      v66 = *v19;
      v31 = v6 + 5;
      if (v6 + 5 >= v10)
        goto LABEL_40;
      v32 = vaddq_f32(v17, (float32x4_t)xmmword_22616D260);
      v30[10] = v32;
      v30[11] = v66;
      v67 = *v19;
      v33 = v6 + 6;
      if (v6 + 6 >= v10)
        goto LABEL_41;
      v34 = (_OWORD *)(v12 + v9);
      v34[12] = v22;
      v34[13] = v67;
      v68 = *v19;
      v35 = v6 + 7;
      if (v6 + 7 >= v10)
        goto LABEL_42;
      v34[14] = v29;
      v34[15] = v68;
      v69 = *v19;
      v36 = v6 + 8;
      if (v6 + 8 >= v10)
        goto LABEL_43;
      v37 = (_OWORD *)(v12 + v9);
      v37[16] = v24;
      v37[17] = v69;
      v70 = *v19;
      v38 = v6 + 9;
      if (v6 + 9 >= v10)
        goto LABEL_44;
      v37[18] = v24;
      v37[19] = v70;
      v71 = *v19;
      v39 = v6 + 10;
      if (v6 + 10 >= v10)
        goto LABEL_45;
      v40 = (_OWORD *)(v12 + v9);
      v40[20] = v29;
      v40[21] = v71;
      v72 = *v19;
      v41 = v6 + 11;
      if (v6 + 11 >= v10)
        goto LABEL_46;
      v40[22] = v32;
      v40[23] = v72;
      v73 = *v19;
      v42 = v6 + 12;
      if (v6 + 12 >= v10)
        goto LABEL_47;
      v43 = (_OWORD *)(v12 + v9);
      v43[24] = v24;
      v43[25] = v73;
      v74 = *v19;
      v44 = v6 + 13;
      if (v6 + 13 >= v10)
        goto LABEL_48;
      v43[26] = v32;
      v43[27] = v74;
      v75 = *v19;
      v45 = v6 + 14;
      if (v6 + 14 >= v10)
        goto LABEL_49;
      v46 = (_OWORD *)(v12 + v9);
      v46[28] = v18;
      v46[29] = v75;
      v76 = *v19;
      v47 = v6 + 15;
      if (v6 + 15 >= v10)
        goto LABEL_50;
      v46[30] = v18;
      v46[31] = v76;
      v77 = *v19;
      v48 = v6 + 16;
      if (v6 + 16 >= v10)
        goto LABEL_51;
      v49 = (_OWORD *)(v12 + v9);
      v49[32] = v32;
      v49[33] = v77;
      v78 = *v19;
      v50 = v6 + 17;
      if (v6 + 17 >= v10)
        goto LABEL_52;
      v49[34] = v27;
      v49[35] = v78;
      v79 = *v19;
      v51 = v6 + 18;
      if (v6 + 18 >= v10)
        goto LABEL_53;
      v52 = (_OWORD *)(v12 + v9);
      v52[36] = v18;
      v52[37] = v79;
      v80 = *v19;
      v53 = v6 + 19;
      if (v6 + 19 >= v10)
        goto LABEL_54;
      v52[38] = v27;
      v52[39] = v80;
      v81 = *v19;
      v54 = v6 + 20;
      if (v6 + 20 >= v10)
        goto LABEL_55;
      v55 = (_OWORD *)(v12 + v9);
      v55[40] = v22;
      v55[41] = v81;
      v82 = *v19;
      v56 = v6 + 21;
      if (v6 + 21 >= v10)
        goto LABEL_56;
      v55[42] = v22;
      v55[43] = v82;
      v83 = *v19;
      v57 = v6 + 22;
      if (v6 + 22 >= v10)
        goto LABEL_57;
      v58 = (_OWORD *)(v12 + v9);
      v58[44] = v27;
      v58[45] = v83;
      v84 = *v19;
      v59 = v6 + 23;
      if (v6 + 23 >= v10)
        goto LABEL_58;
      v58[46] = v29;
      v58[47] = v84;
      goto LABEL_31;
    }
    v85 = result[2];
    if (v11 - 1 >= v10)
      break;
    v15 = (float32x4_t *)(v8 + v9);
    *v15 = *result;
    v15[1] = v85;
    v86 = result[2];
    if (v11 >= v10)
      goto LABEL_34;
    v15[2] = result[1];
    v15[3] = v86;
LABEL_31:
    ++v7;
    v6 += 24;
    v12 += 768;
    v11 += 2;
    v8 += 64;
    if (a2 == v7)
      return result;
  }
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11 - 1, v10);
  _os_crash();
  __break(1u);
LABEL_34:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v10);
  _os_crash();
  __break(1u);
LABEL_35:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v6, v10);
  _os_crash();
  __break(1u);
LABEL_36:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v21, v10);
  _os_crash();
  __break(1u);
LABEL_37:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v23, v10);
  _os_crash();
  __break(1u);
LABEL_38:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v26, v10);
  _os_crash();
  __break(1u);
LABEL_39:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v28, v10);
  _os_crash();
  __break(1u);
LABEL_40:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v31, v10);
  _os_crash();
  __break(1u);
LABEL_41:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v33, v10);
  _os_crash();
  __break(1u);
LABEL_42:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v35, v10);
  _os_crash();
  __break(1u);
LABEL_43:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v36, v10);
  _os_crash();
  __break(1u);
LABEL_44:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v38, v10);
  _os_crash();
  __break(1u);
LABEL_45:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v39, v10);
  _os_crash();
  __break(1u);
LABEL_46:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v41, v10);
  _os_crash();
  __break(1u);
LABEL_47:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v42, v10);
  _os_crash();
  __break(1u);
LABEL_48:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v44, v10);
  _os_crash();
  __break(1u);
LABEL_49:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v45, v10);
  _os_crash();
  __break(1u);
LABEL_50:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v47, v10);
  _os_crash();
  __break(1u);
LABEL_51:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v48, v10);
  _os_crash();
  __break(1u);
LABEL_52:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v50, v10);
  _os_crash();
  __break(1u);
LABEL_53:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v51, v10);
  _os_crash();
  __break(1u);
LABEL_54:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v53, v10);
  _os_crash();
  __break(1u);
LABEL_55:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v54, v10);
  _os_crash();
  __break(1u);
LABEL_56:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v56, v10);
  _os_crash();
  __break(1u);
LABEL_57:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v57, v10);
  _os_crash();
  __break(1u);
LABEL_58:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v59, v10);
  result = (float32x4_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t result;
  uint64_t v16;
  double v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __int128 *v26;
  unint64_t v27;
  float32x4_t v28;
  unint64_t v29;
  float32x4_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v9 = 0;
  v10 = 0;
  v11 = (unint64_t)*(unsigned int *)(a3 + 12) >> 5;
  LODWORD(v12) = 5;
  if (v11 > 5)
    v12 = (unint64_t)*(unsigned int *)(a3 + 12) >> 5;
  v13 = 6 * ((715827883 * (unint64_t)v12) >> 32);
  for (i = *(unsigned int *)(a3 + 8) + *(_QWORD *)a3 + 96; ; i += 192)
  {
    result = re::BucketArray<re::RenderLine,2048ul>::operator[](a1, v10);
    LODWORD(v17) = *(_DWORD *)(result + 32);
    v18 = *a4;
    v19 = *a5;
    v20 = *(float32x4_t *)result;
    v33 = *(_OWORD *)(result + 16);
    if (v9 >= v11)
      break;
    v21 = *(float *)&v17 * 0.01;
    v22 = vmulq_n_f32(v18, *(float *)&v17 * 0.01);
    v23 = vmulq_n_f32(v19, v21);
    v24.i64[0] = 0xBF000000BF000000;
    v24.i64[1] = 0xBF000000BF000000;
    v25 = vaddq_f32(v20, vmulq_f32(vaddq_f32(v22, v23), v24));
    v26 = (__int128 *)(result + 16);
    *(float32x4_t *)(i - 96) = v25;
    *(_OWORD *)(i - 80) = v33;
    v34 = *(_OWORD *)(result + 16);
    v27 = v9 + 1;
    if (v9 + 1 >= v11)
      goto LABEL_13;
    v28 = vaddq_f32(v22, v25);
    *(float32x4_t *)(i - 64) = v28;
    *(_OWORD *)(i - 48) = v34;
    v35 = *v26;
    v29 = v9 + 2;
    if (v9 + 2 >= v11)
      goto LABEL_14;
    v30 = vaddq_f32(v23, v28);
    *(float32x4_t *)(i - 32) = v30;
    *(_OWORD *)(i - 16) = v35;
    v36 = *v26;
    v31 = v9 + 3;
    if (v9 + 3 >= v11)
      goto LABEL_15;
    *(float32x4_t *)i = v25;
    *(_OWORD *)(i + 16) = v36;
    v37 = *v26;
    v32 = v9 + 4;
    if (v9 + 4 >= v11)
      goto LABEL_16;
    *(float32x4_t *)(i + 32) = v30;
    *(_OWORD *)(i + 48) = v37;
    v38 = *v26;
    if (v13 == v9)
      goto LABEL_17;
    *(float32x4_t *)(i + 64) = vaddq_f32(v23, v25);
    *(_OWORD *)(i + 80) = v38;
    ++v10;
    v9 += 6;
    if (a2 == v10)
      return result;
  }
  re::internal::assertLog((re::internal *)6, v16, *(double *)v18.i64, *(double *)v20.i64, v17, *(double *)v19.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9, v11);
  _os_crash();
  __break(1u);
LABEL_13:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v27, v11);
  _os_crash();
  __break(1u);
LABEL_14:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v29, v11);
  _os_crash();
  __break(1u);
LABEL_15:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v31, v11);
  _os_crash();
  __break(1u);
LABEL_16:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v32, v11);
  _os_crash();
  __break(1u);
LABEL_17:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9 + 5, v11);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::DebugRenderer::endFrame(os_unfair_lock_s *this)
{
  unsigned __int8 v1;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;

  v1 = atomic_load(re::needDebugRendererThisFrame);
  if ((v1 & 1) != 0)
  {
    v3 = this + 72;
    v4 = this + 114;
    std::lock[abi:ne180100]<re::UnfairLock,re::UnfairLock>(this + 72, this + 114);
    re::BucketArray<re::RenderLine,2048ul>::clear((uint64_t)&this[44]);
    re::BucketArray<re::RenderLine,2048ul>::clear((uint64_t)&this[58]);
    re::BucketArray<re::RenderLine,2048ul>::clear((uint64_t)&this[86]);
    re::BucketArray<re::RenderLine,2048ul>::clear((uint64_t)&this[100]);
    atomic_store(0, re::needDebugRendererThisFrame);
    os_unfair_lock_unlock(v3);
    os_unfair_lock_unlock(v4);
  }
}

uint64_t re::BucketArray<re::RenderLine,2048ul>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t i;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      result = re::BucketArray<re::RenderLine,2048ul>::operator[](v1, i);
  }
  *(_QWORD *)(v1 + 40) = 0;
  ++*(_DWORD *)(v1 + 48);
  return result;
}

uint64_t re::BucketArray<re::RenderLine,2048ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 11)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 11)) + 48 * (a2 & 0x7FF);
}

char *re::BucketArray<re::RenderLine,2048ul>::overwriteExistingElements(char *result, unint64_t a2, char *__src, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  if (a4)
  {
    v4 = result;
    v5 = a2 >> 11;
    if (a4 >= 2048 - (a2 & 0x7FF))
      v6 = 2048 - (a2 & 0x7FF);
    else
      v6 = a4;
    if (*((_QWORD *)result + 1) <= a2 >> 11)
    {
LABEL_23:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_24:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v8 = a4 + a2;
    v9 = (a4 + a2 - 1) >> 11;
    v10 = (result[16] & 1) != 0 ? (uint64_t)(result + 24) : *((_QWORD *)result + 4);
    result = (char *)memmove((void *)(*(_QWORD *)(v10 + 8 * v5) + 48 * (a2 & 0x7FF)), __src, 48 * v6);
    if (v9 != v5)
    {
      v11 = &__src[48 * v6];
      v12 = v9 + ~v5;
      if (v12)
      {
        v13 = v5 + 1;
        v14 = v11;
        while (v4[1] > v13)
        {
          v15 = (char *)(v4 + 3);
          if ((v4[2] & 1) == 0)
            v15 = (char *)v4[4];
          result = (char *)memmove(*(void **)&v15[8 * v13++], v14, 0x18000uLL);
          v14 += 98304;
          if (v9 == v13)
            goto LABEL_16;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_23;
      }
LABEL_16:
      if (v4[1] <= v9)
        goto LABEL_24;
      if ((v4[2] & 1) != 0)
      {
        v16 = (char *)(v4 + 3);
        if ((v8 & 0x7FF) != 0)
          return (char *)memmove(*(void **)&v16[8 * v9], &v11[98304 * v12], 48 * (v8 & 0x7FF));
      }
      else
      {
        v16 = (char *)v4[4];
        if ((v8 & 0x7FF) != 0)
          return (char *)memmove(*(void **)&v16[8 * v9], &v11[98304 * v12], 48 * (v8 & 0x7FF));
      }
    }
  }
  return result;
}

char *re::BucketArray<re::RenderLine,2048ul>::copyNewElements(char *result, unint64_t a2, char *__src, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int16 v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  if (!a4)
    return result;
  v4 = result;
  v5 = a2 >> 11;
  v6 = 2048 - (a2 & 0x7FF);
  if (a4 < v6)
    v6 = a4;
  if (*((_QWORD *)result + 1) <= a2 >> 11)
    goto LABEL_22;
  v8 = a4 + a2;
  v9 = (a4 + a2 - 1) >> 11;
  if ((result[16] & 1) != 0)
    v10 = result + 24;
  else
    v10 = (char *)*((_QWORD *)result + 4);
  v11 = 3 * v6;
  result = (char *)memcpy((void *)(*(_QWORD *)&v10[8 * v5] + 48 * (a2 & 0x7FF)), __src, 48 * v6);
  if (v9 != v5)
  {
    v12 = &__src[16 * v11];
    v13 = v9 + ~v5;
    if (!v13)
    {
LABEL_16:
      if (v4[1] > v9)
      {
        if ((v4[2] & 1) != 0)
          v17 = (char *)(v4 + 3);
        else
          v17 = (char *)v4[4];
        return (char *)memcpy(*(void **)&v17[8 * v9], &v12[98304 * v13], 48 * (v8 & 0x7FF));
      }
LABEL_23:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v14 = v5 + 1;
    v15 = v12;
    while (v4[1] > v14)
    {
      v16 = (char *)(v4 + 3);
      if ((v4[2] & 1) == 0)
        v16 = (char *)v4[4];
      memcpy(*(void **)&v16[8 * v14++], v15, 0x18000uLL);
      v15 += 98304;
      if (v9 == v14)
        goto LABEL_16;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_23;
  }
  return result;
}

uint64_t *re::BucketArray<re::RenderLine,2048ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 11)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 98304, 0);
        result = (uint64_t *)re::DynamicOverflowArray<re::RenderLine *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::RenderLine,2048ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::RenderLine,2048ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderLine *,2ul>::add(uint64_t a1, _QWORD *a2)
{
  _anonymous_namespace_ *result;
  uint64_t v5;
  uint64_t v6;

  result = re::DynamicOverflowArray<re::RenderLine *,2ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v5 = a1 + 24;
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v5 + 8 * v6) = *a2;
  *(_QWORD *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderLine *,2ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result;
  if (!*(_QWORD *)result)
  {
    v7 = *((_QWORD *)v1 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v1, v7);
    *((_DWORD *)v1 + 4) += 2;
    return result;
  }
  v2 = *((_QWORD *)result + 1);
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    v4 = v2 + 1;
    if (v4 < 3)
      return result;
    v6 = 4;
    goto LABEL_12;
  }
  v3 = *((_QWORD *)result + 3);
  v5 = v2 >= v3;
  v4 = v2 + 1;
  v5 = !v5 || v3 >= v4;
  if (!v5)
  {
    v6 = 2 * v3;
LABEL_12:
    if (v6 <= v4)
      v8 = v4;
    else
      v8 = v6;
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(result, v8);
  }
  return result;
}

uint64_t re::BucketArray<re::RenderLine,2048ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > v3 << 11)
  {
    re::BucketArray<re::RenderLine,2048ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 2048) >> 11);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 11)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 11));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 48 * (v2 & 0x7FF);
}

uint64_t re::BucketArray<re::RenderPoint,2048ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > v3 << 11)
  {
    re::BucketArray<re::RenderPoint,2048ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 2048) >> 11);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 11)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 11));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 48 * (v2 & 0x7FF);
}

_QWORD *re::BucketArray<re::RenderPoint,2048ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 11)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 98304, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::RenderPoint,2048ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::DelayedDestructorsForFrame::callDestructorsAndClear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = this;
  if (*this)
  {
    v2 = this[2];
    if (v2)
    {
      v3 = v2 - 1;
      v4 = 40 * v2 - 8;
      do
      {
        if (v1[2] <= v3)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(v1[4] + v4) + 16))(*(_QWORD *)(v1[4] + v4));
        --v3;
        v4 -= 40;
      }
      while (v3 != -1);
    }
    this = (_QWORD *)re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)v1);
  }
  v1[5] = 0xFFFFFFFFFFFFFFFLL;
  return this;
}

re::FrameManager *re::FrameManager::FrameManager(re::FrameManager *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)v2 = &off_24ED7AAE8;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 16;
  *(_OWORD *)(v2 + 40) = xmmword_22616D270;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_DWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 117) = 0;
  v3 = re::globalAllocators((re *)v2);
  *((_QWORD *)this + 19) = v3[2];
  *((_QWORD *)this + 20) = 0;
  v4 = re::globalAllocators((re *)v3);
  *((_QWORD *)this + 24) = v4[2];
  *((_QWORD *)this + 25) = 0;
  v5 = re::globalAllocators((re *)v4);
  *((_QWORD *)this + 29) = v5[2];
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 34) = re::globalAllocators((re *)v5)[2];
  *((_QWORD *)this + 39) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  return this;
}

uint64_t re::FrameManager::init(re::FrameManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t result;
  uint64_t v10;

  *((_QWORD *)this + 37) = 8;
  *((_QWORD *)this + 38) = v2;
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  for (i = 0; i != 1792; i += 256)
  {
    v5 = v2 + i;
    *(_QWORD *)(v5 + 16) = 850045863;
    *(_OWORD *)(v5 + 24) = 0uLL;
    *(_OWORD *)(v5 + 40) = 0uLL;
    *(_OWORD *)(v5 + 56) = 0uLL;
    *(_QWORD *)(v5 + 72) = 0;
    *(_OWORD *)v5 = xmmword_22616D280;
    *(_WORD *)(v5 + 80) = 0;
    *(_BYTE *)(v5 + 82) = 0;
    *(_DWORD *)(v5 + 128) = 0;
    *(_DWORD *)(v5 + 192) = 0;
  }
  *(_QWORD *)(v2 + 1808) = 850045863;
  *(_OWORD *)(v2 + 1816) = 0u;
  *(_OWORD *)(v2 + 1832) = 0u;
  *(_OWORD *)(v2 + 1848) = 0u;
  *(_QWORD *)(v2 + 1864) = 0;
  *(_OWORD *)(v2 + 1792) = xmmword_22616D280;
  *(_WORD *)(v2 + 1872) = 0;
  *(_BYTE *)(v2 + 1874) = 0;
  *(_DWORD *)(v2 + 1920) = 0;
  *(_DWORD *)(v2 + 1984) = 0;
  v6 = re::globalAllocators((re *)v2);
  v7 = (_anonymous_namespace_ *)re::PerFrameAllocatorManager::addOwner((os_unfair_lock_s *)v6[6], this);
  *((_QWORD *)this + 2) = v7;
  if (*((_QWORD *)this + 37) <= (*((_QWORD *)this + 3) & 7uLL))
  {
LABEL_7:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *((_QWORD *)this + 38) + ((*((_QWORD *)this + 3) & 7) << 8);
  *(_QWORD *)v10 = *((_QWORD *)this + 3);
  *(_QWORD *)(v10 + 8) = 0;
  *(_WORD *)(v10 + 80) = 0;
  *(_BYTE *)(v10 + 82) = 1;
  *(_DWORD *)(v10 + 128) = 0;
  *(_DWORD *)(v10 + 192) = 0;
  return result;
}

void re::FrameManager::runAllDelayedDestructors(int a1, uint64_t a2, os_unfair_lock_t lock)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  os_unfair_lock_lock(lock);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a2 + 16);
    v7 = 48 * v5;
    do
    {
      re::DelayedDestructorsForFrame::callDestructorsAndClear(v6);
      v6 += 6;
      v7 -= 48;
    }
    while (v7);
  }
  os_unfair_lock_unlock(lock);
}

uint64_t re::FrameManager::prepareForDeinit(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  int v4;
  int v5;
  re *v6;
  uint64_t *v7;
  uint64_t result;

  v2 = this + 22;
  v3 = this + 30;
  std::lock[abi:ne180100]<re::UnfairLock,re::UnfairLock>(this + 22, this + 30);
  os_unfair_lock_unlock(v2);
  os_unfair_lock_unlock(v3);
  *(_QWORD *)&this[78]._os_unfair_lock_opaque = 0x100000001;
  re::FrameManager::runAllDelayedDestructors(v4, (uint64_t)&this[16], v2);
  re::FrameManager::runAllDelayedDestructors(v5, (uint64_t)&this[24], v3);
  v7 = re::globalAllocators(v6);
  result = re::PerFrameAllocatorManager::freeAllocatorsOlderOrEqual((re *)v7[6], *(_QWORD *)&this[6]._os_unfair_lock_opaque & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)&this[4]._os_unfair_lock_opaque << 60));
  LOBYTE(this[31]._os_unfair_lock_opaque) = 1;
  return result;
}

void re::FrameManager::deinit(re::FrameManager *this)
{
  re *v2;
  uint64_t *v3;

  if (!*((_BYTE *)this + 124))
    re::FrameManager::prepareForDeinit((os_unfair_lock_s *)this);
  re::FixedArray<re::DelayedDestructorsForFrame>::deinit((_QWORD *)this + 8);
  v2 = (re *)re::FixedArray<re::DelayedDestructorsForFrame>::deinit((_QWORD *)this + 12);
  v3 = re::globalAllocators(v2);
  re::PerFrameAllocatorManager::removeOwner((os_unfair_lock_s *)v3[6], *((_QWORD *)this + 2));
  *((_QWORD *)this + 2) = 16;
}

_QWORD *re::FixedArray<re::DelayedDestructorsForFrame>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2];
      v5 = 48 * v2;
      do
      {
        re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit(v4);
        v4 += 48;
        v5 -= 48;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::FrameManager::addDelayedDestructor(uint64_t a1, uint64_t a2, uint64_t a3, os_unfair_lock_t lock, int *a5, uint64_t a6)
{
  _anonymous_namespace_ *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  if (*a5 < 1)
  {
    os_unfair_lock_lock(lock);
    v12 = *(_QWORD *)(a1 + 24);
    v13 = v12 & 7;
    if (*(_QWORD *)(a2 + 8) <= (unint64_t)(v12 & 7))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v14 = *(_QWORD *)(a2 + 16);
    v15 = v14 + 48 * (v12 & 7);
    if (!*(_QWORD *)v15)
    {
      *(_QWORD *)v15 = a6;
      v11 = (_anonymous_namespace_ *)re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity((_QWORD *)(v14 + 48 * (v12 & 7)), 0);
      ++*(_DWORD *)(v15 + 24);
      v12 = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(v14 + 48 * v13 + 40) = v12 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(a1 + 16) << 60);
    v17 = *(_QWORD *)(v15 + 8);
    v16 = *(_QWORD *)(v15 + 16);
    if (v16 >= v17)
    {
      v18 = v16 + 1;
      if (v17 < v16 + 1)
      {
        if (*(_QWORD *)v15)
        {
          v19 = 2 * v17;
          if (!v17)
            v19 = 8;
          if (v19 <= v18)
            v20 = v18;
          else
            v20 = v19;
          re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity((_QWORD *)(v14 + 48 * v13), v20);
        }
        else
        {
          re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity((_QWORD *)(v14 + 48 * v13), v18);
          ++*(_DWORD *)(v15 + 24);
        }
      }
      v16 = *(_QWORD *)(v15 + 16);
    }
    v21 = *(_QWORD *)(v15 + 32) + 40 * v16;
    *(_QWORD *)(v21 + 24) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(v21 + 32) = 0;
    re::MoveOnlyFunctionBase<24ul,void ()(void)>::operator=<24ul>(v21, a3);
    ++*(_QWORD *)(v15 + 16);
    ++*(_DWORD *)(v15 + 24);
    os_unfair_lock_unlock(lock);
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 32) + 16))(*(_QWORD *)(a3 + 32));
  }
}

void re::FrameManager::addDelayedDestructor(uint64_t a1, uint64_t a2)
{
  uint64_t *ValidAllocator;

  ValidAllocator = re::getValidAllocator((re *)(*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(a1 + 16) << 60)));
  re::FrameManager::addDelayedDestructor(a1, a1 + 64, a2, (os_unfair_lock_t)(a1 + 88), (int *)(a1 + 312), (uint64_t)ValidAllocator);
}

_QWORD *re::FrameManager::destructForFrame(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = *((_DWORD *)result + 78);
  *((_DWORD *)result + 78) = v3 + 1;
  v4 = result[9];
  if (v4)
  {
    v5 = (_QWORD *)result[10];
    v6 = a2 & 0xFFFFFFFFFFFFFFFLL;
    v7 = 48 * v4;
    while (1)
    {
      if (*v5)
      {
        v8 = v5[5] & 0xFFFFFFFFFFFFFFFLL;
        if (v8 == 0xFFFFFFFFFFFFFFFLL)
        {
          if (v6 != 0xFFFFFFFFFFFFFFFLL)
            goto LABEL_10;
        }
        else if (v6 == 0xFFFFFFFFFFFFFFFLL || v8 != v6)
        {
          goto LABEL_10;
        }
        result = re::DelayedDestructorsForFrame::callDestructorsAndClear(v5);
      }
LABEL_10:
      v5 += 6;
      v7 -= 48;
      if (!v7)
      {
        v3 = *((_DWORD *)v2 + 78) - 1;
        break;
      }
    }
  }
  *((_DWORD *)v2 + 78) = v3;
  return result;
}

uint64_t re::FrameManager::hasToDestructForFrameOnRenderThread(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = (os_unfair_lock_s *)(a1 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 104);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 112);
    v7 = a2 & 0xFFFFFFFFFFFFFFFLL;
    v8 = 48 * v5;
    while (1)
    {
      if (*v6)
      {
        if (v7 == 0xFFFFFFFFFFFFFFFLL)
          break;
        v9 = v6[5] & 0xFFFFFFFFFFFFFFFLL;
        if (v9 != 0xFFFFFFFFFFFFFFFLL && v7 == v9)
          break;
      }
      v6 += 6;
      v8 -= 48;
      if (!v8)
        goto LABEL_10;
    }
    v11 = 1;
  }
  else
  {
LABEL_10:
    v11 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v11;
}

void re::FrameManager::destructForFrameOnRenderThread(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (os_unfair_lock_s *)(a1 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 316);
  *(_DWORD *)(a1 + 316) = v5 + 1;
  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 112);
    v8 = a2 & 0xFFFFFFFFFFFFFFFLL;
    v9 = 48 * v6;
    while (1)
    {
      if (*v7)
      {
        v10 = v7[5] & 0xFFFFFFFFFFFFFFFLL;
        if (v10 == 0xFFFFFFFFFFFFFFFLL)
        {
          if (v8 != 0xFFFFFFFFFFFFFFFLL)
            goto LABEL_10;
        }
        else if (v8 == 0xFFFFFFFFFFFFFFFLL || v10 != v8)
        {
          goto LABEL_10;
        }
        re::DelayedDestructorsForFrame::callDestructorsAndClear(v7);
      }
LABEL_10:
      v7 += 6;
      v9 -= 48;
      if (!v9)
      {
        v5 = *(_DWORD *)(a1 + 316) - 1;
        break;
      }
    }
  }
  *(_DWORD *)(a1 + 316) = v5;
  os_unfair_lock_unlock(v4);
}

void re::FrameManager::destructOlderOrEqualOnRenderThread(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = (os_unfair_lock_s *)(a1 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 104);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 112);
    v7 = a2 & 0xFFFFFFFFFFFFFFFLL;
    v8 = 48 * v5;
    do
    {
      if (*v6 && (v6[5] & 0xFFFFFFFFFFFFFFFuLL) <= v7)
        re::DelayedDestructorsForFrame::callDestructorsAndClear(v6);
      v6 += 6;
      v8 -= 48;
    }
    while (v8);
  }
  os_unfair_lock_unlock(v4);
}

uint64_t re::FrameManager::nextFrame(re::FrameManager *this)
{
  uint64_t result;

  re::FrameManager::onFrameStartInternal(this, (unint64_t *)((*((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFLL) + 1));
  result = *((_QWORD *)this + 35);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void re::FrameManager::onFrameStartInternal(re::FrameManager *this, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t j;
  unint64_t v36;
  unint64_t v37;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    if (*((_QWORD *)this + 37) <= v4)
      goto LABEL_53;
    v6 = *((_QWORD *)this + 38) + v3;
    if (*(_BYTE *)(v6 + 82))
    {
      if (atomic_load((unsigned int *)(v6 + 128)))
        break;
    }
    v5 = v4 > 6;
    v3 += 256;
    ++v4;
  }
  while (v4 != 8);
  if (v5 && re::FrameManager::hasToDestructForFrameOnRenderThread((uint64_t)this, 0xFFFFFFFFFFFFFFFLL))
  {
    v8 = *((_QWORD *)this + 30);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)this + 6);
  ++*((_DWORD *)this + 78);
  v11 = (v10 + 1) & 7;
  v12 = v11;
  do
  {
    if (*((_QWORD *)this + 37) <= v12)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_51:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_52:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_53:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_54:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_55;
    }
    v13 = *((_QWORD *)this + 38);
    v14 = v13 + (v12 << 8);
    if (*(_BYTE *)(v14 + 82))
    {
      v15 = (unsigned int *)(v14 + 192);
      v16 = atomic_load((unsigned int *)(v14 + 192));
      if (v16 >= 1)
      {
        do
          v17 = __ldaxr(v15);
        while (__stlxr(v17 - 1, v15));
      }
      v18 = *((_QWORD *)this + 2);
      v19 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v18 << 60);
      v20 = v13 + (v12 << 8);
      if (*(_BYTE *)(v20 + 81))
        re::FrameManager::destructForFrame(this, *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v18 << 60));
      if (!atomic_load((unsigned int *)(v20 + 128)) && !atomic_load(v15))
      {
        re::FrameManager::destructForFrame(this, v19);
        if (((v9 | re::FrameManager::hasToDestructForFrameOnRenderThread((uint64_t)this, v19) ^ 1) & 1) == 0)
        {
          v23 = *((_QWORD *)this + 30);
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
        }
        re::FrameManager::destructForFrameOnRenderThread((uint64_t)this, v19);
        re::FrameManager::freeForFrame(this, v14);
        if ((re::FrameManager::hasToDestructForFrameOnRenderThread((uint64_t)this, v19) & 1) == 0)
          *(_BYTE *)(v14 + 82) = 0;
      }
    }
    v12 = ((int)v12 + 1) & 7;
  }
  while (v12 != v11);
  --*((_DWORD *)this + 78);
  re::updateFrameCountCommon((re::FrameManager *)((char *)this + 24), a2, (uint64_t)"FrameCount", 0);
  if (*((_QWORD *)this + 37) <= (unint64_t)(a2 & 7))
  {
LABEL_55:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_56;
  }
  v24 = *((_QWORD *)this + 38) + ((unint64_t)(a2 & 7) << 8);
  if (*(_BYTE *)(v24 + 82))
  {
    v25 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*((_QWORD *)this + 2) << 60);
    if (re::FrameManager::hasToDestructForFrameOnRenderThread((uint64_t)this, v25))
    {
      v26 = *((_QWORD *)this + 30);
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
    }
    re::FrameManager::destructForFrame(this, v25);
    re::FrameManager::destructForFrameOnRenderThread((uint64_t)this, v25);
    re::FrameManager::freeForFrame(this, v24);
  }
  *(_WORD *)(v24 + 80) = 0;
  *(_BYTE *)(v24 + 82) = 1;
  *(_DWORD *)(v24 + 128) = 0;
  v27 = (unsigned int *)(v24 + 192);
  *(_DWORD *)(v24 + 192) = 0;
  *(_QWORD *)v24 = a2;
  *(_QWORD *)(v24 + 8) = 1;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = 0;
  v30 = *((_QWORD *)this + 37);
  if (v30 <= 1)
    v31 = 1;
  else
    v31 = *((_QWORD *)this + 37);
  v32 = 1;
  for (i = 256; i != 2048; i += 256)
  {
    if (v31 == v32)
      goto LABEL_51;
    if (v30 <= v29)
      goto LABEL_52;
    v34 = *((_QWORD *)this + 38);
    if (*(_QWORD *)(v34 + i) < *(_QWORD *)(v34 + (v29 << 8)))
      v29 = v32;
    ++v32;
  }
  for (j = 1; j != 8; ++j)
  {
    v36 = ((int)v29 + (int)j) & 7;
    if (v30 <= v36)
      goto LABEL_54;
    if (*(_BYTE *)(v34 + (v36 << 8) + 82))
      break;
  }
  v37 = ((int)v29 + (int)j - 1) & 7;
  if (v30 <= v37)
  {
LABEL_56:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *((_QWORD *)this + 4) = *(_QWORD *)(v34 + (v37 << 8));
}

void re::FrameManager::freeForFrame(_QWORD *a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  re *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v4 = (std::mutex *)(a2 + 16);
  std::mutex::lock((std::mutex *)(a2 + 16));
  if (*(_BYTE *)(a2 + 80))
  {
    std::mutex::unlock(v4);
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 1;
    std::mutex::unlock(v4);
    v5 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)a1[2] << 60);
    v6 = (re *)a1[20];
    if (v6)
    {
      v9 = v5;
      v6 = (re *)(*(uint64_t (**)(re *, unint64_t *))(*(_QWORD *)v6 + 16))(v6, &v9);
    }
    v7 = re::globalAllocators(v6);
    re::PerFrameAllocatorManager::freeAllocatorsForFrame((re *)v7[6], v5);
    v8 = a1[25];
    if (v8)
    {
      v9 = v5;
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v8 + 16))(v8, &v9);
    }
  }
}

void re::updateFrameCountCommon(re *this, unint64_t *a2, uint64_t a3, const char *a4)
{
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  NSObject *v13;
  uint64_t v14;
  unint64_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unint64_t *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)this <= (unint64_t)a2)
  {
    if (*(unint64_t **)this != a2 || *(_QWORD *)this == 1)
      goto LABEL_12;
    if ((a4 & 1) != 0)
      goto LABEL_12;
    v13 = *re::graphicsLogObjects(this);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    v14 = *(_QWORD *)this;
    v16 = 136315394;
    v17 = a3;
    v18 = 2048;
    v19 = v14;
    v9 = "%s same frame more than once %llu";
    v10 = v13;
    v11 = 22;
  }
  else
  {
    v7 = *re::graphicsLogObjects(this);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    v8 = *(_QWORD *)this;
    v16 = 136315650;
    v17 = a3;
    v18 = 2048;
    v19 = v8;
    v20 = 2048;
    v21 = a2;
    v9 = "%s update out of order %llu to %llu";
    v10 = v7;
    v11 = 32;
  }
  _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v16, v11);
LABEL_12:
  v15 = *(unint64_t **)this;
  if (*(_QWORD *)this <= (unint64_t)a2)
    v15 = a2;
  *(_QWORD *)this = v15;
}

double re::FrameManager::deinitRenderFrameCounting(re::FrameManager *this)
{
  uint64_t *v2;
  re *v3;
  uint64_t *v4;
  double result;

  v2 = re::globalAllocators(this);
  v3 = (re *)re::PerFrameAllocatorManager::freeAllocatorsForFrame((re *)v2[6], *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*((_QWORD *)this + 5) << 60));
  v4 = re::globalAllocators(v3);
  re::PerFrameAllocatorManager::removeOwner((os_unfair_lock_s *)v4[6], *((_QWORD *)this + 5));
  *(_QWORD *)&result = 16;
  *(_OWORD *)((char *)this + 40) = xmmword_22616D270;
  return result;
}

unint64_t re::FrameManager::getFrameRefCount(re::FrameManager *this, uint64_t a2)
{
  unint64_t v2;

  v2 = a2 & 7;
  if (*((_QWORD *)this + 37) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(*((_QWORD *)this + 38) + (v2 << 8)) == a2)
    return *((_QWORD *)this + 38) + (v2 << 8);
  else
    return 0;
}

uint64_t re::FrameManager::tryExecuteCallbackWithAllocatedFrame(re::FrameManager *a1, uint64_t a2, uint64_t a3)
{
  unint64_t FrameRefCount;
  unint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v10;

  FrameRefCount = re::FrameManager::getFrameRefCount(a1, a2);
  if (!FrameRefCount)
    return 0;
  v6 = FrameRefCount;
  v7 = (std::mutex *)(FrameRefCount + 16);
  std::mutex::lock((std::mutex *)(FrameRefCount + 16));
  if (*(_QWORD *)v6 == a2 && !*(_BYTE *)(v6 + 80))
  {
    v10 = a2;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a3 + 32) + 16))(*(_QWORD *)(a3 + 32), &v10);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  std::mutex::unlock(v7);
  return v8;
}

uint64_t *re::allocInfo_FrameManager(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_402);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_402))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411B1A8, 0);
    *(uint64_t *)((char *)&qword_25411B1B8 + 6) = 0;
    qword_25411B1B8 = 0;
    qword_25411B1C8 = 0;
    qword_25411B1D0 = 0xFFFFFFFFLL;
    qword_25411B1A8 = (uint64_t)&off_24ED7DAA8;
    qword_25411B1D8 = (uint64_t)"FrameManager";
    dword_25411B1E0 = 0;
    unk_25411B1E8 = 0u;
    unk_25411B1F8 = 0u;
    unk_25411B208 = 0u;
    qword_25411B218 = 0;
    __cxa_guard_release(&_MergedGlobals_402);
  }
  return &qword_25411B1A8;
}

void re::initInfo_FrameManager(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x34087BE954749B40;
  v5[1] = "FrameManager";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_FrameManager(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::FrameManager>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::FrameManager>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::FrameManager>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::FrameManager>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::FrameManager *re::internal::defaultConstruct<re::FrameManager>(int a1, int a2, re::FrameManager *this)
{
  return re::FrameManager::FrameManager(this);
}

uint64_t re::internal::defaultDestruct<re::FrameManager>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::FrameManager>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_FrameManager(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrameManager", (uint64_t (*)(re::internal *))re::allocInfo_FrameManager, (re::IntrospectionBase *(*)(void))re::initInfo_FrameManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FrameManager>, this);
}

void re::FrameManager::~FrameManager(re::FrameManager *this)
{
  re::FrameManager::~FrameManager(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::mutex *v5;
  std::mutex *v6;

  *(_QWORD *)this = &off_24ED7AAE8;
  if (*((_QWORD *)this + 36))
  {
    v2 = *((_QWORD *)this + 37);
    if (v2)
    {
      v3 = (_QWORD *)((char *)this + 296);
      v4 = v2 << 8;
      v5 = (std::mutex *)(*((_QWORD *)this + 38) + 16);
      do
      {
        std::mutex::~mutex(v5);
        v5 = v6 + 4;
        v4 -= 256;
      }
      while (v4);
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 36) + 40))(*((_QWORD *)this + 36), *((_QWORD *)this + 38));
      *v3 = 0;
      *((_QWORD *)this + 38) = 0;
    }
    *((_QWORD *)this + 36) = 0;
  }
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 248);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 208);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 168);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 128);
  re::FixedArray<re::DelayedDestructorsForFrame>::deinit((_QWORD *)this + 12);
  re::FixedArray<re::DelayedDestructorsForFrame>::deinit((_QWORD *)this + 8);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::SharedPersistentObject<re::FrameManager>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

uint64_t re::FixedArray<re::DelayedDestructorsForFrame>::init<>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;

  *a1 = a2;
  a1[1] = 8;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 384, 8);
  a1[2] = result;
  if (result)
  {
    for (i = 0; i != 336; i += 48)
    {
      v6 = result + i;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0xFFFFFFFFFFFFFFFLL;
    }
    *(_QWORD *)(result + 344) = 0;
    *(_QWORD *)(result + 352) = 0;
    *(_QWORD *)(result + 336) = 0;
    *(_DWORD *)(result + 360) = 0;
    *(_QWORD *)(result + 368) = 0;
    *(_QWORD *)(result + 376) = 0xFFFFFFFFFFFFFFFLL;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

_QWORD *re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 40 * v9;
        v11 = (uint64_t)v7;
        do
        {
          *(_QWORD *)(v11 + 24) = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v11 + 32) = 0;
          re::MoveOnlyFunctionBase<24ul,void ()(void)>::operator=<24ul>(v11, v8);
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v8);
          v8 += 40;
          v11 += 40;
          v10 -= 40;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::MoveOnlyFunctionBase<24ul,void ()(void)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1);
    v4 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    {
      v5 = a2;
      if (v4 != a2)
      {
        *(_QWORD *)(a1 + 32) = v4;
        *(_QWORD *)(a2 + 32) = 0;
        return a1;
      }
    }
    else
    {
      v5 = *(_QWORD *)(a2 + 32);
      if (!v4)
        return a1;
    }
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    v7 = a1;
    if (v6 >= 0x19)
    {
      v8 = v6;
      v9 = *(_QWORD *)(a1 + 24);
      if (v9)
        v7 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, v8, 0);
      else
        v7 = 0;
    }
    *(_QWORD *)(a1 + 32) = v7;
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 24))(*(_QWORD *)(a2 + 32));
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a2);
  }
  return a1;
}

_QWORD *re::InlineRenderGraphProvider::InlineRenderGraphProvider(_QWORD *a1, const re::DynamicString *a2, uint64_t a3, uint64_t a4)
{
  _OWORD v8[2];

  re::DynamicString::DynamicString((re::DynamicString *)v8, a2);
  *a1 = off_24ED381E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 1), (const re::DynamicString *)v8);
  if (*(_QWORD *)&v8[0])
  {
    if ((BYTE8(v8[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v8[0] + 40))();
    memset(v8, 0, sizeof(v8));
  }
  *a1 = off_24ED7AB48;
  a1[8] = *(_QWORD *)(a3 + 24);
  a1[9] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a1 + 5), a3);
  a1[13] = *(_QWORD *)(a4 + 24);
  a1[14] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a1 + 10), a4);
  return a1;
}

uint64_t re::InlineRenderGraphProvider::provide(re::InlineRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  const char *v5;
  const char *v6;

  v5 = a3;
  v6 = a2;
  return (*(uint64_t (**)(_QWORD, const char **, const char **, re::RenderFrame *))(**((_QWORD **)this + 14)
                                                                                            + 16))(*((_QWORD *)this + 14), &v6, &v5, a4);
}

unint64_t re::InlineRenderGraphProvider::prepareFrame(re::InlineRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t ScopeHash;
  unint64_t v10[2];
  const char *v11;
  char *v12;

  v10[0] = 0x2FD78E65604013F0;
  v10[1] = (unint64_t)"InlineRenderGraphProvider";
  ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v10, a2, a3);
  v11 = a3;
  v12 = a2;
  return ((ScopeHash << 6)
        + (ScopeHash >> 2)
        - 0x61C8864680B583E9
        + (*(uint64_t (**)(_QWORD, char **, const char **, re::RenderFrame *))(**((_QWORD **)this + 9) + 16))(*((_QWORD *)this + 9), &v12, &v11, a4)) ^ ScopeHash;
}

void re::InlineRenderGraphProvider::~InlineRenderGraphProvider(re::InlineRenderGraphProvider *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED7AB48;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 80);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 40);
  *(_QWORD *)this = off_24ED381E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED7AB48;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 80);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 40);
  *(_QWORD *)this = off_24ED381E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  JUMPOUT(0x2276933B8);
}

void re::IBLContext::createConstantBuffer(uint64_t a1, re::FrameContext *this, re::BufferTable *a3, __int128 *a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  id *i;
  __int128 *v15;
  id v16;
  id v17;
  float v18;
  int v19;
  float v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  float v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  re::FrameContext::perFrameAlloc(this, 0xD0uLL, 0x10uLL, (uint64_t)&v36);
  v7 = v36 + v37;
  v35 = 0x262DF9A294ABAC1CLL;
  v36 = v38;
  re::BufferTable::setBuffer(a3, (const re::WeakStringID *)&v35, (const BufferView *)&v36);
  *(_DWORD *)(v7 + 8) = 0;
  *(_QWORD *)v7 = 1065353216;
  *(_DWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0x3F80000000000000;
  *(_DWORD *)(v7 + 40) = 1065353216;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  v8 = *a4;
  v9 = a4[1];
  v10 = a4[2];
  *(_DWORD *)(v7 + 88) = *((_QWORD *)a4 + 1);
  *(_QWORD *)(v7 + 80) = v8;
  *(_DWORD *)(v7 + 104) = DWORD2(v9);
  *(_QWORD *)(v7 + 96) = v9;
  *(_DWORD *)(v7 + 120) = DWORD2(v10);
  *(_QWORD *)(v7 + 112) = v10;
  *(_DWORD *)(v7 + 128) = 0;
  *(_DWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 144) = 1065353216;
  *(_DWORD *)(v7 + 168) = 0;
  *(_QWORD *)(v7 + 160) = 0x3F80000000000000;
  *(_DWORD *)(v7 + 184) = 1065353216;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (__int128 *)(v12 + 224 * v11);
    for (i = (id *)(v12 + 192); ; i += 28)
    {
      v15 = (__int128 *)(i - 24);
      v16 = *(i - 24);
      v17 = *(i - 23);
      v18 = *((float *)i - 44);
      v31 = *((_OWORD *)i - 10);
      v32 = *((_OWORD *)i - 9);
      v19 = *((_DWORD *)i - 28);
      v33 = *((_OWORD *)i - 6);
      v34 = *((_OWORD *)i - 8);
      v20 = *((float *)i - 20);
      v21 = *(i - 9);
      v22 = *(i - 8);
      v23 = (uint64_t)*(i - 7);
      v24 = *(i - 6);
      v25 = *(i - 5);
      v26 = v25;
      if (*((_BYTE *)i + 17))
        break;
      if (v25)

      if (v24)
      if (v22)

      if (v21)
      if (v17)

      if (v16)
      if (v15 + 14 == v13)
        return;
    }
    v29 = *((_OWORD *)i - 1);
    v30 = *(_OWORD *)i;
    v28 = *((_OWORD *)i - 2);
    v27 = exp2f(v18);
    *(_DWORD *)(v7 + 8) = DWORD2(v31);
    *(_QWORD *)v7 = v31;
    *(_DWORD *)(v7 + 24) = DWORD2(v32);
    *(_QWORD *)(v7 + 16) = v32;
    *(_DWORD *)(v7 + 40) = DWORD2(v34);
    *(_QWORD *)(v7 + 32) = v34;
    *(float *)(v7 + 48) = v27;
    *(_DWORD *)(v7 + 52) = v19;
    *(_OWORD *)(v7 + 64) = v33;
    *(float *)(v7 + 128) = v20 * 0.5;
    *(_DWORD *)(v7 + 152) = DWORD2(v28);
    *(_QWORD *)(v7 + 144) = v28;
    *(_DWORD *)(v7 + 168) = DWORD2(v29);
    *(_QWORD *)(v7 + 160) = v29;
    *(_DWORD *)(v7 + 184) = DWORD2(v30);
    *(_QWORD *)(v7 + 176) = v30;
    *(_QWORD *)(v7 + 192) = v23;
    if (v26)

    if (v24)
    if (v22)

    if (v21)
    if (v17)

    if (v16)
  }
}

void re::IBLContext::updateSceneTextures(id *this, re::TextureTable *a2)
{
  id v4;
  char *v5;
  char *v6;
  id v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id v14;
  id v15;
  id v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[22];
  id v30;
  id v31[2];
  id v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int16 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v22 = (id)0xE459D7324435E49;
  re::TextureTable::setTexture(a2, (uint64_t *)&v22, this + 5);
  v4 = this[2];
  if (v4)
  {
    v5 = (char *)this[4];
    v6 = &v5[224 * (_QWORD)v4];
    while (1)
    {
      v7 = *(id *)v5;
      v22 = v7;
      v8 = *((id *)v5 + 1);
      v23 = v8;
      v10 = *((_OWORD *)v5 + 2);
      v9 = *((_OWORD *)v5 + 3);
      v24 = *((_OWORD *)v5 + 1);
      v25 = v10;
      v26 = v9;
      v12 = *((_OWORD *)v5 + 5);
      v11 = *((_OWORD *)v5 + 6);
      v13 = *((_OWORD *)v5 + 4);
      *(_QWORD *)&v29[14] = *(_QWORD *)(v5 + 110);
      v28 = v12;
      *(_OWORD *)v29 = v11;
      v27 = v13;
      v14 = *((id *)v5 + 15);
      v30 = v14;
      v15 = *((id *)v5 + 16);
      v31[0] = v15;
      v31[1] = *((id *)v5 + 17);
      v16 = *((id *)v5 + 18);
      v32 = v16;
      v17 = *((id *)v5 + 19);
      v33 = v17;
      v19 = *((_OWORD *)v5 + 11);
      v18 = *((_OWORD *)v5 + 12);
      v20 = *((_OWORD *)v5 + 10);
      v37 = *((_WORD *)v5 + 104);
      v35 = v19;
      v36 = v18;
      v34 = v20;
      if (HIBYTE(v37))
        break;
      if (v17)

      if (v16)
      if (v15)

      if (v14)
      if (v8)

      if (v7)
      v5 += 224;
      if (v5 == v6)
        return;
    }
    v21 = 0xC0489AC946E8FF4;
    re::TextureTable::setTexture(a2, &v21, &v23);
    v21 = 0x74B9011688CA44FFLL;
    re::TextureTable::setTexture(a2, &v21, &v22);
    if (v29[21])
    {
      v21 = 0x23C1563FB78C78B1;
      re::TextureTable::setTexture(a2, &v21, v31);
      v21 = 0x5495C6E7C96973E2;
      re::TextureTable::setTexture(a2, &v21, &v30);
    }
    if (v33)
    {

      v33 = 0;
    }
    if (v32)
    {

      v32 = 0;
    }
    if (v31[0])
    {

      v31[0] = 0;
    }
    if (v30)
    {

      v30 = 0;
    }
    if (v23)
    {

      v23 = 0;
    }
    if (v22)

  }
}

void re::IBLContext::updateRenderSceneContextFlags(re::IBLContext *this, BOOL *a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t v6;
  id v7;
  id v8;
  int v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v6 = *((_QWORD *)this + 4);
    v15 = v6 + 224 * v3;
    do
    {
      v7 = *(id *)v6;
      v8 = *(id *)(v6 + 8);
      v9 = *(unsigned __int8 *)(v6 + 116);
      v10 = *(unsigned __int8 *)(v6 + 117);
      v11 = *(id *)(v6 + 120);
      v12 = *(id *)(v6 + 128);
      v13 = *(id *)(v6 + 144);
      v14 = *(id *)(v6 + 152);
      if (*(_BYTE *)(v6 + 209))
      {
        *a2 = (v9 | *a2) != 0;
        *a3 = (v10 | *a3) != 0;
      }
      if (v14)

      if (v13)
      if (v12)

      if (v11)
      if (v8)

      if (v7)
      v6 += 224;
    }
    while (v6 != v15);
  }
}

void re::VirtualEnvironmentProbeContext::updateSceneTextures(re::VirtualEnvironmentProbeContext *this, re::TextureTable *a2)
{
  unint64_t v4;
  char i;
  char v6;
  id *v7;
  id *v8;
  id *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = 0;
  v15 = *MEMORY[0x24BDAC8D0];
  for (i = 1; ; i = 0)
  {
    v6 = i;
    if (v4 >= *((_QWORD *)this + 2))
      goto LABEL_6;
    v7 = (id *)*((_QWORD *)this + 4);
    if ((i & 1) == 0)
      break;
    *(_QWORD *)&v10 = 0x456D423E25537F70;
    re::TextureTable::setTexture(a2, (uint64_t *)&v10, v7);
    if (!*((_QWORD *)this + 2))
    {
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v10 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_12:
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v10 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v8 = (id *)(*((_QWORD *)this + 4) + 8);
    *(_QWORD *)&v10 = 0x456D423E247CF466;
    re::TextureTable::setTexture(a2, (uint64_t *)&v10, v8);
LABEL_6:
    v4 = 1;
    if ((v6 & 1) == 0)
      return;
  }
  *(_QWORD *)&v10 = 0x456D423E25537F71;
  re::TextureTable::setTexture(a2, (uint64_t *)&v10, v7 + 3);
  if (*((_QWORD *)this + 2) <= 1uLL)
    goto LABEL_12;
  v9 = (id *)(*((_QWORD *)this + 4) + 32);
  *(_QWORD *)&v10 = 0x456D423E247CF467;
  re::TextureTable::setTexture(a2, (uint64_t *)&v10, v9);
}

uint64_t re::VirtualEnvironmentProbeContext::createTextureBuffer(re::VirtualEnvironmentProbeContext *this, re::FrameContext *a2, re::BufferTable *a3)
{
  id v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char i;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[40];
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[28];
  __int16 v36;
  _BYTE v37[10];
  _BYTE v38[28];
  __int16 v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(*(id *)a2, "supportsFamily:", 5001) & 1) != 0 || !*((_QWORD *)this + 2))
  {
    re::FrameContext::perFrameAlloc(a2, 0x20uLL, 0x10uLL, (uint64_t)v38);
    v29 = 0x458FBDFDF334653DLL;
    v15 = *(_QWORD *)&v38[8];
    *(_QWORD *)&v41 = *(_QWORD *)&v38[16];
    *((_QWORD *)&v41 + 1) = *(_QWORD *)&v38[8];
    re::BufferTable::setBuffer(a3, (const re::WeakStringID *)&v29, (const BufferView *)&v41);
    if (!(v15 >> 37))
      goto LABEL_40;
    v17 = *((_QWORD *)a2 + 3);
    v18 = *(_QWORD *)v38 + v15;
    v33 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v29 = v17;
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v29, 4uLL);
    v10 = 0;
    ++v32;
    for (i = 1; ; i = 0)
    {
      v20 = i;
      if (v10 >= *((_QWORD *)this + 2))
      {
        v21 = (_QWORD *)(v18 + 8 * v10);
        *v21 = 0;
        v21[2] = 0;
      }
      else
      {
        *(_QWORD *)(v18 + 8 * v10) = objc_msgSend(*(id *)(*((_QWORD *)this + 4) + 24 * v10), sel_gpuResourceID);
        v13 = *((_QWORD *)this + 2);
        if (v13 <= v10)
        {
          v22 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v35 = 136315906;
          *(_QWORD *)&v35[4] = "operator[]";
          *(_WORD *)&v35[12] = 1024;
          *(_DWORD *)&v35[14] = 797;
          *(_WORD *)&v35[18] = 2048;
          *(_QWORD *)&v35[20] = v10;
          v36 = 2048;
          *(_QWORD *)v37 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_35:
          v22 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v35 = 136315906;
          *(_QWORD *)&v35[4] = "operator[]";
          *(_WORD *)&v35[12] = 1024;
          *(_DWORD *)&v35[14] = 797;
          *(_WORD *)&v35[18] = 2048;
          *(_QWORD *)&v35[20] = v10;
          v36 = 2048;
          *(_QWORD *)v37 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_36:
          v22 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v35 = 136315906;
          *(_QWORD *)&v35[4] = "operator[]";
          *(_WORD *)&v35[12] = 1024;
          *(_DWORD *)&v35[14] = 797;
          *(_WORD *)&v35[18] = 2048;
          *(_QWORD *)&v35[20] = v10;
          v36 = 2048;
          *(_QWORD *)v37 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_37:
          v34 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v38 = 136315906;
          *(_QWORD *)&v38[4] = "operator[]";
          *(_WORD *)&v38[12] = 1024;
          *(_DWORD *)&v38[14] = 797;
          *(_WORD *)&v38[18] = 2048;
          *(_QWORD *)&v38[20] = v10;
          v39 = 2048;
          v40 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_38:
          v34 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v38 = 136315906;
          *(_QWORD *)&v38[4] = "operator[]";
          *(_WORD *)&v38[12] = 1024;
          *(_DWORD *)&v38[14] = 797;
          *(_WORD *)&v38[18] = 2048;
          *(_QWORD *)&v38[20] = v10;
          v39 = 2048;
          v40 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_39:
          v34 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v38 = 136315906;
          *(_QWORD *)&v38[4] = "operator[]";
          *(_WORD *)&v38[12] = 1024;
          *(_DWORD *)&v38[14] = 797;
          *(_WORD *)&v38[18] = 2048;
          *(_QWORD *)&v38[20] = v10;
          v39 = 2048;
          v40 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_40:
          re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
          _os_crash();
          __break(1u);
        }
        *(_QWORD *)(v18 + 8 * v10 + 16) = objc_msgSend(*(id *)(*((_QWORD *)this + 4) + 24 * v10 + 8), sel_gpuResourceID);
        v13 = *((_QWORD *)this + 2);
        if (v13 <= v10)
          goto LABEL_35;
        *(_QWORD *)&v41 = *(id *)(*((_QWORD *)this + 4) + 24 * v10);
        re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(&v29, &v41);
        if ((_QWORD)v41)

        v13 = *((_QWORD *)this + 2);
        if (v13 <= v10)
          goto LABEL_36;
        *(_QWORD *)&v41 = *(id *)(*((_QWORD *)this + 4) + 24 * v10 + 8);
        re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(&v29, &v41);
        if ((_QWORD)v41)

      }
      v10 = 1;
      if ((v20 & 1) == 0)
      {
        *(_QWORD *)&v41 = 0x458FBDFDF334653DLL;
        re::BufferTable::setBufferUsedResources((uint64_t)a3, &v41, v33, v31);
        return re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v29);
      }
    }
  }
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v29 = *((_QWORD *)a2 + 3);
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v29, 2uLL);
  ++v32;
  v28 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD4C0], sel_alloc), sel_init);
  objc_msgSend(v28, sel_setIndex_, 0);
  objc_msgSend(v28, sel_setDataType_, 58);
  objc_msgSend(v28, sel_setAccess_, 0);
  objc_msgSend(v28, sel_setTextureType_, 5);
  objc_msgSend(v28, sel_setArrayLength_, 2);
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)&v29, &v28);
  v27 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD4C0], sel_alloc), sel_init);
  objc_msgSend(v27, sel_setIndex_, 2);
  objc_msgSend(v27, sel_setDataType_, 58);
  objc_msgSend(v27, sel_setAccess_, 0);
  objc_msgSend(v27, sel_setTextureType_, 5);
  objc_msgSend(v27, sel_setArrayLength_, 2);
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)&v29, &v27);
  re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::DynamicArray((uint64_t)v25, &v29);
  re::mtl::Device::makeArgumentEncoder((id *)a2, (uint64_t)v25, &v26);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v25);
  v6 = v26;
  re::FrameContext::perFrameAlloc(a2, (unint64_t)objc_msgSend(v26, sel_encodedLength), 0x10uLL, (uint64_t)&v22);
  *(_QWORD *)v35 = 0x458FBDFDF334653DLL;
  v8 = v23;
  v7 = v24;
  *(_QWORD *)&v41 = v24;
  *((_QWORD *)&v41 + 1) = v23;
  re::BufferTable::setBuffer(a3, (const re::WeakStringID *)v35, (const BufferView *)&v41);
  objc_msgSend(v6, sel_setArgumentBuffer_offset_, v7, v8);
  v9 = *((_QWORD *)a2 + 3);
  *(_QWORD *)&v37[2] = 0;
  memset(&v35[8], 0, 20);
  *(_QWORD *)v35 = v9;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v35, 4uLL);
  v10 = 0;
  ++*(_DWORD *)&v35[24];
  v11 = 1;
  do
  {
    v12 = v11;
    if (v10 < *((_QWORD *)this + 2))
    {
      objc_msgSend(v6, sel_setTexture_atIndex_, *(_QWORD *)(*((_QWORD *)this + 4) + 24 * v10), v10);
      v13 = *((_QWORD *)this + 2);
      if (v13 <= v10)
        goto LABEL_37;
      objc_msgSend(v6, sel_setTexture_atIndex_, *(_QWORD *)(*((_QWORD *)this + 4) + 24 * v10 + 8), v10 | 2);
      v13 = *((_QWORD *)this + 2);
      if (v13 <= v10)
        goto LABEL_38;
      *(_QWORD *)&v41 = *(id *)(*((_QWORD *)this + 4) + 24 * v10);
      re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(v35, &v41);
      if ((_QWORD)v41)

      v13 = *((_QWORD *)this + 2);
      if (v13 <= v10)
        goto LABEL_39;
      *(_QWORD *)&v41 = *(id *)(*((_QWORD *)this + 4) + 24 * v10 + 8);
      re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(v35, &v41);
      if ((_QWORD)v41)

    }
    v11 = 0;
    v10 = 1;
  }
  while ((v12 & 1) != 0);
  *(_QWORD *)&v41 = 0x458FBDFDF334653DLL;
  re::BufferTable::setBufferUsedResources((uint64_t)a3, &v41, *(uint64_t *)&v37[2], *(unint64_t *)&v35[16]);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v35);
  if (v6)

  if (v27)
  if (v28)

  return re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v29);
}

uint64_t re::BufferTable::setBufferUsedResources(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  unint64_t v8;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a1, a2);
  if (result != -1)
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16 * result + 8);
    if (*(_DWORD *)(a1 + 280) > v8)
      return re::BufferTable::setBufferIndirectResources((re::BufferTable *)a1, v8, a3, a4);
  }
  return result;
}

void re::VirtualEnvironmentProbeContext::createConstantBuffer(re::VirtualEnvironmentProbeContext *this, re::FrameContext *a2, re::BufferTable *a3, float a4)
{
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  char v15;
  char v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  re::FrameContext::perFrameAlloc(a2, 0x40uLL, 0x10uLL, (uint64_t)&v21);
  v7 = v21;
  v8 = v22;
  v20 = 0x6C67F4CE96CFCB6ALL;
  v21 = v23;
  re::BufferTable::setBuffer(a3, (const re::WeakStringID *)&v20, (const BufferView *)&v21);
  v9 = 0;
  v10 = v7 + v8;
  v11 = *((_OWORD *)this + 3);
  v12 = *((_OWORD *)this + 4);
  v13 = *((_OWORD *)this + 5);
  *(_DWORD *)(v10 + 8) = DWORD2(v11);
  *(_QWORD *)v10 = v11;
  *(_DWORD *)(v10 + 24) = DWORD2(v12);
  *(_DWORD *)(v10 + 40) = DWORD2(v13);
  *(_QWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 32) = v13;
  v14 = *((_QWORD *)this + 2);
  *(_DWORD *)(v10 + 56) = v14;
  v15 = 1;
  do
  {
    v16 = v15;
    v17 = 0.0;
    if (v9 < v14)
    {
      v18 = *((_QWORD *)this + 4) + 24 * v9;
      v19 = *(float *)(v18 + 20);
      v17 = (float)(v19 * exp2f(*(float *)(v18 + 16))) * a4;
    }
    v15 = 0;
    *(float *)(v10 + 4 * v9 + 48) = v17;
    v9 = 1;
  }
  while ((v16 & 1) != 0);
}

void re::generatePrefilteredDiffuseIblTexture(uint64_t a1@<X0>, id *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, _BOOL4 a5@<W4>, char a6@<W5>, uint8_t *a7@<X6>, id *a8@<X8>)
{
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  id v17;
  re *v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _anonymous_namespace_ *SharedTexture;
  const char *v25;
  id v26;
  unsigned __int8 v27;
  id v28;
  unsigned __int8 v29;
  id v30;
  unsigned int v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  re *v35;
  uint64_t v36;
  NSObject *v37;
  id v38;
  uint64_t v39;
  re *v40;
  id v41;
  void *v42;
  NSObject *v43;
  re::ns::String *v44;
  int v46;
  int v49;
  id v50;
  id v51;
  id v52;
  unsigned __int8 v53;
  id v54;
  uint8_t v55[8];
  uint64_t v56;
  uint64_t v57;
  uint8_t v58[8];
  uint64_t v59;
  _BYTE v60[10];
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  uint8_t buf[4];
  _BYTE v66[18];
  __int16 v67;
  int v68;
  _QWORD v69[4];
  _BYTE v70[24];
  int v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v54 = *(id *)(a1 + 184);
  v13 = 256;
  if (a3 < 0x100)
    v13 = a3;
  if (v13 <= 1)
    v14 = 1;
  else
    v14 = v13;
  v15 = objc_msgSend(*a2, sel_width);
  v16 = objc_msgSend(*a2, sel_height);
  if (v14 >= (unint64_t)v15)
    v17 = v15;
  else
    v17 = (id)v14;
  if (v14 >= (unint64_t)v16)
    v14 = (unint64_t)v16;
  v53 = 0;
  v18 = (re *)re::internal::chooseWritableTextureFormat((uint64_t)&v54, a2, a5, a6, &v53);
  v19 = *re::graphicsLogObjects(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)v66 = v17;
    *(_WORD *)&v66[8] = 2048;
    *(_QWORD *)&v66[10] = v14;
    v67 = 1024;
    v68 = (int)v18;
    _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Generating diffuse prefiltered %zux%zux6 cubemap of format %d\n", buf, 0x1Cu);
  }
  v20 = v53;
  if (v53)
  {
    v46 = re::translateSRGBPixelFormatToLinear((uint64_t)v18);
    v21 = 19;
  }
  else
  {
    v21 = 3;
    v46 = (int)v18;
  }
  if (objc_msgSend(*a2, sel_isShareable))
    v22 = 2;
  else
    v22 = 0;
  v23 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v23, sel_setTextureType_, 5);
  objc_msgSend(v23, sel_setWidth_, v17);
  objc_msgSend(v23, sel_setHeight_, v14);
  objc_msgSend(v23, sel_setPixelFormat_, v18);
  objc_msgSend(v23, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v23, sel_setSampleCount_, objc_msgSend(*a2, sel_sampleCount));
  objc_msgSend(v23, sel_setUsage_, v21);
  objc_msgSend(v23, sel_setStorageMode_, v22);
  if (objc_msgSend(*a2, sel_isShareable))
    SharedTexture = (_anonymous_namespace_ *)re::mtl::Device::makeSharedTexture(v23, &v54, a8);
  else
    SharedTexture = (_anonymous_namespace_ *)re::mtl::Device::makeTexture(v23, &v54, a8);
  buf[0] = 0;
  if (v20)
    v25 = "generatePrefilteredDiffuseMapWithLinearToSRGB";
  else
    v25 = "generatePrefilteredDiffuseMap";
  v72 = 0;
  memset(v70, 0, sizeof(v70));
  v71 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v26 = *(id *)re::getOrCreateComputePipelineState(a1, (uint64_t)buf);
  v52 = (id)objc_msgSend(v54, "newCommandQueue");

  v27 = atomic_load((unsigned __int8 *)&qword_25411B228);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_25411B228))
  {
    re::ns::String::String((re::ns::String *)&_MergedGlobals_403, (re::ns *)"generatePrefilteredDiffuseMapQueue");
    __cxa_guard_release(&qword_25411B228);
  }
  v28 = (id)_MergedGlobals_403;
  objc_msgSend(v52, "setLabel:", v28);

  re::mtl::CommandQueue::makeCommandBuffer(&v52, &v51);
  re::mtl::CommandBuffer::makeComputeCommandEncoder(&v51, &v50);
  v29 = atomic_load((unsigned __int8 *)&qword_25411B238);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_25411B238))
  {
    v44 = re::ns::String::String((re::ns::String *)&qword_25411B230, (re::ns *)"Generate Diffuse IBL Texture");
    __cxa_guard_release((__guard *)v44 + 1);
  }
  v30 = (id)qword_25411B230;
  objc_msgSend(v50, "setLabel:", v30);

  v31 = objc_msgSend(v26, sel_threadExecutionWidth);
  v32 = objc_msgSend(v26, sel_maxTotalThreadsPerThreadgroup) / v31;
  v33 = objc_msgSend(*a8, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v46, 3, 0, 1, 0, 6);
  v34 = (objc_msgSend(v33, sel_width) + v31 - 1) / v31;
  v35 = (re *)objc_msgSend(v33, sel_height);
  v36 = ((int)v32 + (int)v35 - 1) / v32;
  v37 = *re::graphicsLogObjects(v35);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v58 = 67110400;
    *(_DWORD *)&v58[4] = v34;
    LOWORD(v59) = 1024;
    *(_DWORD *)((char *)&v59 + 2) = v36;
    HIWORD(v59) = 1024;
    *(_DWORD *)v60 = 6;
    *(_WORD *)&v60[4] = 1024;
    *(_DWORD *)&v60[6] = v31;
    v61 = 1024;
    v62 = v32;
    v63 = 1024;
    v64 = 1;
    _os_log_impl(&dword_224FE9000, v37, OS_LOG_TYPE_DEFAULT, "Dispatching %dx%dx%d thread groups of size %dx%dx%d\n", v58, 0x26u);
  }
  objc_msgSend(v50, "setComputePipelineState:", v26);
  objc_msgSend(v50, "setTexture:atIndex:", *a2, 0);
  objc_msgSend(v50, "setTexture:atIndex:", v33, 1);
  v49 = a4;
  v38 = objc_msgSend(v54, sel_newBufferWithBytes_length_options_, &v49, 4, 0);
  objc_msgSend(v50, "setBuffer:offset:atIndex:", v38, 0, 0);
  *(_QWORD *)v58 = v34;
  v59 = v36;
  *(_QWORD *)v60 = 6;
  *(_QWORD *)v55 = v31;
  v56 = v32;
  v57 = 1;
  objc_msgSend(v50, "dispatchThreadgroups:threadsPerThreadgroup:", v58, v55);
  objc_msgSend(v50, "endEncoding");
  re::mtl::CommandBuffer::makeBlitCommandEncoder(&v51, v58);
  objc_msgSend(*(id *)v58, "endEncoding");
  objc_msgSend(v51, "commit");
  objc_msgSend(v51, "waitUntilCompleted");
  re::mtl::CommandBuffer::error(&v51, v55);
  v39 = objc_msgSend(*(id *)v55, "code");

  if (v39)
  {
    if (a7)
    {
      re::mtl::CommandBuffer::error(&v51, v55);
      if (v55 != a7)
      {
        v41 = *(id *)v55;
        *(_QWORD *)v55 = 0;
        v42 = *(void **)a7;
        *(_QWORD *)a7 = v41;

      }
    }
    v43 = *re::graphicsLogObjects(v40);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v55 = 0;
      _os_log_error_impl(&dword_224FE9000, v43, OS_LOG_TYPE_ERROR, "Internal Metal error while generating specular IBL cubemap. Execution likely took too long - Try again, and if the issue persists, lower samplesPerTexel.", v55, 2u);
    }
  }

  if (v38)
  if (v33)

  if (v26)
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v70);
  if (v69[0])
  {
    if ((v69[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v69[0] + 40))();
    memset(v69, 0, sizeof(v69));
  }
  if (buf[0] && *(_QWORD *)&v66[4] && (v66[12] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)&v66[4] + 40))();
  if (v23)

}

uint64_t re::internal::chooseWritableTextureFormat(uint64_t a1, id *a2, _BOOL4 a3, char a4, _BYTE *a5)
{
  int v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;

  *a5 = 0;
  v8 = objc_msgSend(*a2, sel_pixelFormat);
  if ((a4 & 1) != 0 || (re::isHDR(v8) & 1) != 0)
  {
    v9 = 1;
    if (a3)
    {
LABEL_4:
      v10 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    v16 = 0;
    MTLPixelFormatGetInfoForDevice();
    v9 = 0;
    if (a3)
      goto LABEL_4;
  }
  v10 = re::getComponentCount() == 1;
LABEL_7:
  if (objc_msgSend(*a2, sel_swizzle, v16) == 84148994)
    v11 = v10;
  else
    v11 = a3;
  v12 = !v11;
  if (v9)
  {
    v13 = 115;
    v14 = 25;
  }
  else
  {
    v13 = 70;
    v14 = 10;
  }
  if (v12)
    return v13;
  else
    return v14;
}

void re::generatePrefilteredSpecularIblTexture(uint64_t a1@<X0>, id *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, _BOOL4 a5@<W4>, char a6@<W5>, uint8_t *a7@<X6>, id *a8@<X8>)
{
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  id v18;
  re *v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  id v25;
  uint64_t v26;
  _anonymous_namespace_ *SharedTexture;
  const char *v28;
  id v29;
  unsigned __int8 v30;
  id v31;
  unsigned __int8 v32;
  id v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  re *v41;
  uint64_t v42;
  NSObject *v43;
  id v44;
  uint64_t v45;
  re *v46;
  id v47;
  void *v48;
  NSObject *v49;
  re::ns::String *v50;
  id v52;
  id *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  id v62;
  id v63;
  id v64;
  unsigned __int8 v65;
  id v66;
  uint8_t v67[8];
  uint64_t v68;
  uint64_t v69;
  uint8_t v70[8];
  uint64_t v71;
  _BYTE v72[10];
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  uint8_t buf[4];
  _BYTE v78[18];
  __int16 v79;
  _DWORD v80[4];
  _QWORD v81[4];
  _QWORD v82[3];
  int v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v66 = *(id *)(a1 + 184);
  v13 = 1024;
  if (a3 < 0x400)
    v13 = a3;
  if (v13 <= 1)
    v14 = 1;
  else
    v14 = v13;
  v15 = objc_msgSend(*a2, sel_width);
  v16 = objc_msgSend(*a2, sel_height);
  if (v14 >= (unint64_t)v15)
    v17 = (unint64_t)v15;
  else
    v17 = v14;
  if (v14 >= (unint64_t)v16)
    v18 = v16;
  else
    v18 = (id)v14;
  v55 = a2;
  v56 = (unint64_t)(floor(log2((double)v17)) + 1.0);
  v65 = 0;
  v19 = (re *)re::internal::chooseWritableTextureFormat((uint64_t)&v66, a2, a5, a6, &v65);
  v20 = v19;
  v21 = v65;
  if (v65)
  {
    v19 = (re *)re::translateSRGBPixelFormatToLinear((uint64_t)v19);
    v22 = (int)v19;
    v23 = 19;
  }
  else
  {
    v23 = 3;
    v22 = (int)v19;
  }
  v24 = *re::graphicsLogObjects(v19);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)v78 = v17;
    *(_WORD *)&v78[8] = 2048;
    *(_QWORD *)&v78[10] = v18;
    v79 = 1024;
    v80[0] = v20;
    LOWORD(v80[1]) = 2048;
    *(_QWORD *)((char *)&v80[1] + 2) = v56;
    _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "Generating prefiltered %zux%zux6 cubemap of format %d with %zu mip-levels\n", buf, 0x26u);
  }
  v25 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v25, sel_setTextureType_, 5);
  objc_msgSend(v25, sel_setWidth_, v17);
  objc_msgSend(v25, sel_setHeight_, v18);
  objc_msgSend(v25, sel_setPixelFormat_, v20);
  objc_msgSend(v25, sel_setMipmapLevelCount_, v56);
  objc_msgSend(v25, sel_setSampleCount_, objc_msgSend(*a2, sel_sampleCount));
  objc_msgSend(v25, sel_setUsage_, v23);
  if (objc_msgSend(*a2, sel_isShareable))
    v26 = 2;
  else
    v26 = 0;
  objc_msgSend(v25, sel_setStorageMode_, v26);
  if (objc_msgSend(*a2, sel_isShareable))
    SharedTexture = (_anonymous_namespace_ *)re::mtl::Device::makeSharedTexture(v25, &v66, a8);
  else
    SharedTexture = (_anonymous_namespace_ *)re::mtl::Device::makeTexture(v25, &v66, a8);
  buf[0] = 0;
  if (v21)
    v28 = "generatePrefilteredSpecularMapWithLinearToSRGB";
  else
    v28 = "generatePrefilteredSpecularMap";
  v84 = 0;
  memset(v82, 0, sizeof(v82));
  v83 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v29 = *(id *)re::getOrCreateComputePipelineState(a1, (uint64_t)buf);
  v64 = (id)objc_msgSend(v66, "newCommandQueue");

  v30 = atomic_load((unsigned __int8 *)&qword_25411B248);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_25411B248))
  {
    re::ns::String::String((re::ns::String *)&qword_25411B240, (re::ns *)"generatePrefilteredSpecularMapQueue");
    __cxa_guard_release(&qword_25411B248);
  }
  v52 = v25;
  v31 = (id)qword_25411B240;
  objc_msgSend(v64, "setLabel:", v31);

  re::mtl::CommandQueue::makeCommandBuffer(&v64, &v63);
  re::mtl::CommandBuffer::makeComputeCommandEncoder(&v63, &v62);
  v32 = atomic_load((unsigned __int8 *)&qword_25411B258);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_25411B258))
  {
    v50 = re::ns::String::String((re::ns::String *)&qword_25411B250, (re::ns *)"Generate Specular IBL Texture");
    __cxa_guard_release((__guard *)v50 + 1);
  }
  v33 = (id)qword_25411B250;
  objc_msgSend(v62, "setLabel:", v33);

  v34 = objc_msgSend(v29, sel_threadExecutionWidth);
  v35 = objc_msgSend(v29, sel_maxTotalThreadsPerThreadgroup);
  if (v56)
  {
    v36 = 0;
    v37 = v35 / v34;
    v38 = v22;
    do
    {
      v39 = objc_msgSend(*a8, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v38, 3, v36, 1, 0, 6);
      v40 = (objc_msgSend(v39, sel_width) + v34 - 1) / v34;
      v41 = (re *)objc_msgSend(v39, sel_height);
      v42 = ((int)v37 - 1 + (int)v41) / v37;
      v43 = *re::graphicsLogObjects(v41);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v70 = 67110400;
        *(_DWORD *)&v70[4] = v40;
        LOWORD(v71) = 1024;
        *(_DWORD *)((char *)&v71 + 2) = v42;
        HIWORD(v71) = 1024;
        *(_DWORD *)v72 = 6;
        *(_WORD *)&v72[4] = 1024;
        *(_DWORD *)&v72[6] = v34;
        v73 = 1024;
        v74 = v37;
        v75 = 1024;
        v76 = 1;
        _os_log_impl(&dword_224FE9000, v43, OS_LOG_TYPE_DEFAULT, "Dispatching %dx%dx%d thread groups of size %dx%dx%d\n", v70, 0x26u);
      }
      objc_msgSend(v62, "setComputePipelineState:", v29);
      objc_msgSend(v62, "setTexture:atIndex:", *v55, 0);
      objc_msgSend(v62, "setTexture:atIndex:", v39, 1);
      v57 = 0;
      v58 = 0;
      v59 = v36;
      v60 = v56;
      v61 = a4;
      v44 = objc_msgSend(v66, sel_newBufferWithBytes_length_options_, &v57, 24, 0);
      objc_msgSend(v62, "setBuffer:offset:atIndex:", v44, 0, 0);
      *(_QWORD *)v70 = v40;
      v71 = v42;
      *(_QWORD *)v72 = 6;
      *(_QWORD *)v67 = v34;
      v68 = v37;
      v69 = 1;
      objc_msgSend(v62, "dispatchThreadgroups:threadsPerThreadgroup:", v70, v67);
      if (v44)

      if (v39)
      ++v36;
    }
    while (v56 != v36);
  }
  objc_msgSend(v62, "endEncoding");
  re::mtl::CommandBuffer::makeBlitCommandEncoder(&v63, v70);
  objc_msgSend(*(id *)v70, "endEncoding");
  objc_msgSend(v63, "commit");
  objc_msgSend(v63, "waitUntilCompleted");
  re::mtl::CommandBuffer::error(&v63, v67);
  v45 = objc_msgSend(*(id *)v67, "code");

  if (v45)
  {
    if (a7)
    {
      re::mtl::CommandBuffer::error(&v63, v67);
      if (v67 != a7)
      {
        v47 = *(id *)v67;
        *(_QWORD *)v67 = 0;
        v48 = *(void **)a7;
        *(_QWORD *)a7 = v47;

      }
    }
    v49 = *re::graphicsLogObjects(v46);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v67 = 0;
      _os_log_error_impl(&dword_224FE9000, v49, OS_LOG_TYPE_ERROR, "Internal Metal error while generating specular IBL cubemap. Execution likely took too long - Try again, and if the issue persists, lower samplesPerTexel.", v67, 2u);
    }
  }

  if (v29)
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v82);
  if (v81[0])
  {
    if ((v81[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v81[0] + 40))();
    memset(v81, 0, sizeof(v81));
  }
  if (buf[0] && *(_QWORD *)&v78[4] && (v78[12] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)&v78[4] + 40))();
  if (v52)

}

re::MeshShadowGenerationBacklog *re::MeshShadowGenerationBacklog::MeshShadowGenerationBacklog(re::MeshShadowGenerationBacklog *this)
{
  _anonymous_namespace_ *v2;

  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = (_anonymous_namespace_ *)re::Queue<re::ShadowPair>::setCapacity(this, 0);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_QWORD *)((char *)this + 84) = 0x7FFFFFFFLL;
  return this;
}

void re::MeshShadowGenerationBacklog::~MeshShadowGenerationBacklog(re::MeshShadowGenerationBacklog *this)
{
  double v2;

  v2 = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 6);
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(_QWORD, double))(**(_QWORD **)this + 40))(*(_QWORD *)this, v2);
    *((_QWORD *)this + 5) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_DWORD *)this + 8) = 0;
  }
}

uint64_t re::MeshShadowGenerationBacklog::pushBack(_anonymous_namespace_ *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = (uint64_t)a1 + 48;
  result = re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains((uint64_t)a1 + 48, (uint64_t)a2);
  if ((result & 1) == 0)
  {
    re::Queue<re::ShadowPair>::enqueue(a1, a2);
    return re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(v4, (uint64_t)a2);
  }
  return result;
}

__n128 re::Queue<re::ShadowPair>::enqueue(_anonymous_namespace_ *this, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 result;

  v5 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (v4 + 1 >= v5)
  {
    re::Queue<re::ShadowPair>::growCapacity(this, v4 + 1);
    v5 = *((_QWORD *)this + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v6 = (__n128 *)(*((_QWORD *)this + 5) + 24 * ((*((_QWORD *)this + 3) + v4) % v5));
  result = *a2;
  v6[1].n128_u64[0] = a2[1].n128_u64[0];
  *v6 = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 8);
  return result;
}

uint64_t re::MeshShadowGenerationBacklog::popFront@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  *a3 = 0;
  v4 = a3 + 8;
  if (*(_QWORD *)(this + 16))
  {
    v5 = this;
    v6 = this + 48;
    while (1)
    {
      re::Queue<re::ShadowPair>::dequeue(v5, a2, (uint64_t)&v7);
      this = re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains(v6, (uint64_t)&v7);
      if ((_DWORD)this)
        break;
      if (!*(_QWORD *)(v5 + 16))
        return this;
    }
    *a3 = 1;
    *(_OWORD *)v4 = v7;
    *((_QWORD *)v4 + 2) = v8;
    return re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::remove(v6, (uint64_t)&v7);
  }
  return this;
}

uint64_t re::Queue<re::ShadowPair>::dequeue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(result + 24);
    v5 = *(_QWORD *)(result + 40) + 24 * v4;
    *(_OWORD *)a3 = *(_OWORD *)v5;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v5 + 16);
    if ((unint64_t)(v4 + 1) < *(_QWORD *)(result + 8))
      v6 = v4 + 1;
    else
      v6 = 0;
    *(_QWORD *)(result + 16) = v3 - 1;
    *(_QWORD *)(result + 24) = v6;
    ++*(_DWORD *)(result + 32);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Queue<T> is empty", "m_size > 0", "dequeue", 569);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

_QWORD *re::Queue<re::ShadowPair>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    v6 = result + 2;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::Queue<re::ShadowPair>::setCapacity(v5, a2);
        *v6 = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 4) = 0;
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v8 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in Queue<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 440, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 444, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v8 = 0;
      if (!v3)
      {
LABEL_18:
        v5[5] = v8;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      if (v5[2])
      {
        v9 = 0;
        v10 = v5[3];
        do
        {
          v11 = v5[5] + 24 * ((unint64_t)(v9 + v5[3]) % v5[1]);
          v12 = &v8[3 * v10];
          v13 = *(_OWORD *)v11;
          v12[2] = *(_QWORD *)(v11 + 16);
          *(_OWORD *)v12 = v13;
          if (v10 + 1 < a2)
            ++v10;
          else
            v10 = 0;
          ++v9;
        }
        while (v9 != v5[2]);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[5]);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::Queue<re::ShadowPair>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::Queue<re::ShadowPair>::setCapacity(this, a2);
    }
    else
    {
      this = re::Queue<re::ShadowPair>::setCapacity(v4, v3);
      v4[2] = 0;
      v4[3] = 0;
      *((_DWORD *)v4 + 8) = 0;
    }
  }
  return this;
}

uint64_t re::getOrCreateArgumentBuffer(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id *v39;
  uint64_t v40;
  char v41;
  uint64_t result;
  id v43;
  id v44;
  __int128 v45;
  _BYTE v46[24];

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v45 = *(_QWORD *)(v3 + 128);
  *((_QWORD *)&v45 + 1) = v3;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v46 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1376);
  *(_OWORD *)&v46[8] = *(_OWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v4 + 104);
  v6 = re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::find((uint64_t *)(v5 + 104), &v45);
  if (v6 == -1 || (v8 = *(_QWORD *)(*(_QWORD *)(v5 + 112) + 48 * v6 + 40)) == 0)
  {
    v17 = re::globalAllocators((re *)v6);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17[2] + 32))(v17[2], 72, 8);
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_QWORD *)(v8 + 64) = 0;
    re::createArgumentBuffer(v2, (id *)(*(_QWORD *)(v2 + 24) + 120), v8);
    re::encodeArgumentBuffer(v2, (uint64_t)&v45, v8);
    re::CachedArgumentBuffer::updateWritableBufferVersions(v8, *(unsigned __int8 *)(v2 + 65), *(_BYTE *)(v2 + 64));
    *(_BYTE *)(v8 + 64) = 1;
    v2 = *(_QWORD *)v2;
    v18 = (_anonymous_namespace_ *)re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::find((uint64_t *)v2, &v45);
    if (v18 != (_anonymous_namespace_ *)-1)
    {
LABEL_44:
      *(_BYTE *)(v8 + 61) = 1;
      return v8;
    }
    if (*(_QWORD *)(v2 + 56))
    {
LABEL_21:
      v20 = *(_QWORD *)(v2 + 32);
      if (!v20 || (v21 = *(_QWORD *)(v2 + 16), v21 > 8 * v20))
      {
        re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::resize((uint64_t *)v2, 1);
        v21 = *(_QWORD *)(v2 + 16);
      }
      v22 = (*(_QWORD *)v46 + ((_QWORD)v45 << 6) + ((unint64_t)v45 >> 2) - 0x61C8864680B583E9) ^ v45;
      v23 = (_BYTE)v22 << 6;
      v24 = ((*(_QWORD *)&v46[16] + (*(_QWORD *)&v46[8] << 6) + (*(_QWORD *)&v46[8] >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)&v46[8])
          + (v22 >> 2);
      v25 = v21 >> 4;
      v26 = ((v24 + (v22 << 6) - 0x61C8864680B583E9) ^ v22) % (v21 >> 4);
      v27 = *(_QWORD *)v2;
      v28 = v26;
      while (1)
      {
        v29 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v27 + 16 * v28)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
        if (v29 < 0x40)
          break;
        if (v28 + 1 == v25)
          v28 = 0;
        else
          ++v28;
        if (v28 == v26)
        {
          re::internal::assertLog((re::internal *)4, v19, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
          _os_crash();
          __break(1u);
          break;
        }
      }
      v30 = v27 + 16 * v28;
      v31 = ((v24 + v23 + 23) ^ v22) & 0x7F;
      v32 = *(unsigned __int8 *)(v30 + v29) == 255;
      *(_BYTE *)(v30 + v29) = v31;
      v33 = 3 * (v29 + 16 * v28);
      v34 = *(_QWORD *)(v2 + 8) + 48 * (v29 + 16 * v28);
      v35 = *(_OWORD *)v46;
      v36 = *(_QWORD *)&v46[16];
      *(_OWORD *)v34 = v45;
      *(_OWORD *)(v34 + 16) = v35;
      *(_QWORD *)(v34 + 32) = v36;
      *(_QWORD *)(v34 + 40) = v8;
      v37 = *(_QWORD *)(v2 + 32);
      ++*(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 32) = v37 - v32;
      re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::updateHashes(v2, (_QWORD *)(*(_QWORD *)(v2 + 8) + 16 * v33));
      goto LABEL_44;
    }
LABEL_48:
    goto LABEL_21;
  }
  v9 = *(unsigned __int8 *)(v8 + 63);
  if (v9 >= 2)
  {
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *(unsigned __int8 *)(v8 + 63), 2);
    _os_crash();
    __break(1u);
LABEL_47:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v1, 2);
    v18 = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    goto LABEL_48;
  }
  v10 = v8 + 58;
  if (*(unsigned __int8 *)(v8 + 56 + v9) == *(unsigned __int8 *)(v2 + 64)
    && *(unsigned __int8 *)(v10 + v9) == *(unsigned __int8 *)(v2 + 65)
    && *(_BYTE *)(v8 + 61) != 0)
  {
    goto LABEL_44;
  }
  v1 = *(unsigned __int8 *)(v8 + 64);
  if (v1 >= 2)
    goto LABEL_47;
  v12 = (id *)(*(_QWORD *)(v2 + 24) + 120);
  if (!*(_QWORD *)(v8 + 8 * v1))
  {
    re::createArgumentBuffer(v2, v12, v8);
    re::encodeArgumentBuffer(v2, (uint64_t)&v45, v8);
LABEL_43:
    re::CachedArgumentBuffer::updateWritableBufferVersions(v8, *(unsigned __int8 *)(v2 + 65), *(_BYTE *)(v2 + 64));
    v41 = *(_BYTE *)(v8 + 64);
    *(_BYTE *)(v8 + 63) = v41;
    *(_BYTE *)(v8 + 64) = (v41 & 1) == 0;
    goto LABEL_44;
  }
  v43 = *v12;
  v13 = *(id *)(v8 + 8 * v1);
  v44 = 0;
  NS::SharedPtr<MTL::Texture>::operator=(&v44, &v43);
  objc_msgSend(v44, sel_setArgumentBuffer_offset_, v13, 0);
  if (v13)

  if (v43)
  {

    v43 = 0;
  }
  v15 = *(unsigned __int8 *)(v8 + 64);
  if (v15 < 2)
  {
    v16 = *(unsigned __int8 *)(v8 + 56 + v15) != *(unsigned __int8 *)(v2 + 64) || *(_BYTE *)(v8 + 61) == 0;
    if (*(unsigned __int8 *)(v10 + v15) != *(unsigned __int8 *)(v2 + 65))
      re::encodeConstants(*(uint64_t **)(v2 + 32), *(_QWORD *)(*((_QWORD *)&v45 + 1) + 96), *(_QWORD *)(*((_QWORD *)&v45 + 1) + 112), &v44, 0);
    if (v16)
    {
      v38 = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(v8 + 32) = 0;
      if (v38)
      {
        v39 = *(id **)(v8 + 48);
        v40 = 8 * v38;
        do
        {
          if (*v39)
          {

            *v39 = 0;
          }
          ++v39;
          v40 -= 8;
        }
        while (v40);
      }
      ++*(_DWORD *)(v8 + 40);
      re::encodeTextures(v2, (uint64_t)&v45, &v44, v8);
    }
    re::ArgumentEncoderBufferPair::~ArgumentEncoderBufferPair(&v44);
    goto LABEL_43;
  }
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *(unsigned __int8 *)(v8 + 64), 2);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::createArgumentBuffer(uint64_t a1, id *a2, uint64_t a3)
{
  id *v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  id v18;
  id v19;

  v6 = (id *)(*(_QWORD *)(a1 + 8) + 184);
  v7 = *(unsigned __int8 *)(a3 + 64);
  re::ensureHeapInitialized(*(_QWORD *)a1, v6);
  v8 = *(id *)(*(_QWORD *)(*(_QWORD *)a1 + 96) + 8 * *(_QWORD *)(*(_QWORD *)a1 + 80) - 8);
  v19 = v8;
  v9 = objc_msgSend(*v6, "heapBufferSizeAndAlignWithLength:options:", objc_msgSend(*a2, sel_encodedLength), 256);
  if ((unint64_t)objc_msgSend(v8, sel_maxAvailableSizeWithAlignment_, v10) < v9)
  {
    re::createNewHeap(v6, &v18);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 80);
    if (v12 >= *(_QWORD *)(*(_QWORD *)a1 + 72))
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity((_QWORD *)(v11 + 64), v12 + 1);
      v12 = *(_QWORD *)(v11 + 80);
    }
    v13 = *(_QWORD *)(v11 + 96);
    v14 = v18;
    *(_QWORD *)(v13 + 8 * v12) = v18;
    ++*(_QWORD *)(v11 + 80);
    ++*(_DWORD *)(v11 + 88);
    objc_msgSend(**(id **)(a1 + 56), sel_useHeap_stages_, v14, 3);
    NS::SharedPtr<MTL::Texture>::operator=(&v19, (void **)(*(_QWORD *)(*(_QWORD *)a1 + 96) + 8 * *(_QWORD *)(*(_QWORD *)a1 + 80) - 8));
    if (v14)

    v8 = v19;
  }
  v18 = objc_msgSend(v8, sel_newBufferWithLength_options_, objc_msgSend(*a2, sel_encodedLength), 256);
  if (v7 >= 2)
  {
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v7, 2);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) makeBuffer returned null for argument buffer! Have we run out of memory?", "cachedArgumentBuffer->argumentBufferChain[indexToWrite]", "createArgumentBuffer", 193);
    _os_crash();
    __break(1u);
    return;
  }
  v16 = (void **)(a3 + 8 * v7);
  NS::SharedPtr<MTL::Texture>::operator=(v16, &v18);
  if (v18)

  if (!*v16)
    goto LABEL_15;
  if (v19)

}

void re::encodeArgumentBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;

  v6 = *(unsigned __int8 *)(a3 + 64);
  v17 = *(id *)(*(_QWORD *)(a1 + 24) + 120);
  if (v6 < 2)
  {
    v8 = *(id *)(a3 + 8 * v6);
    v18 = 0;
    NS::SharedPtr<MTL::Texture>::operator=(&v18, &v17);
    objc_msgSend(v18, sel_setArgumentBuffer_offset_, v8, 0);
    if (v8)

    if (v17)
    {

      v17 = 0;
    }
    re::encodeTextures(a1, a2, &v18, a3);
    v10 = *(_QWORD **)(a2 + 8);
    v11 = v10[7];
    if (!v11)
    {
LABEL_11:
      re::encodeConstants(*(uint64_t **)(a1 + 32), v10[12], v10[14], &v18, 1);
      re::ArgumentEncoderBufferPair::~ArgumentEncoderBufferPair(&v18);
      return;
    }
    v12 = *(_QWORD *)(a1 + 32);
    v6 = 8 * v11;
    v13 = (unsigned __int16 *)(v10[9] + 4);
    while (1)
    {
      v14 = (_QWORD *)(*(_QWORD *)(v12 + 16) + 48 * *(v13 - 1));
      v15 = *v13;
      v16 = v14[1];
      if (v16 <= v15)
        break;
      objc_msgSend(v18, sel_setBuffer_offset_atIndex_, *(_QWORD *)(*v14 + 16 * v15), *(unsigned int *)(*v14 + 16 * v15 + 8), *(v13 - 2));
      v13 += 4;
      v6 -= 8;
      if (!v6)
      {
        v10 = *(_QWORD **)(a2 + 8);
        goto LABEL_11;
      }
    }
    re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *v13, v16);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v6, 2, v17);
  _os_crash();
  __break(1u);
}

uint64_t re::CachedArgumentBuffer::updateWritableBufferVersions(uint64_t this, uint64_t a2, char a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(unsigned __int8 *)(this + 64);
  if (v3 >= 2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *(unsigned __int8 *)(this + 64), 2);
    _os_crash();
    __break(1u);
  }
  else
  {
    *(_BYTE *)(this + v3 + 58) = a2;
    v4 = *(unsigned __int8 *)(this + 64);
    if (v4 < 2)
    {
      *(_BYTE *)(this + v4 + 56) = a3;
      *(_BYTE *)(this + 60) = 1;
      return this;
    }
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v4, 2);
  this = _os_crash();
  __break(1u);
  return this;
}

void re::encodeConstants(uint64_t *a1, uint64_t a2, uint64_t a3, id *a4, char a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  NSObject *v15;
  int v16;
  int v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  NSObject *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v29[2];
  uint8_t buf[8];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = a3;
    v8 = a3 + 112 * a2;
    do
    {
      if ((a5 & 1) != 0 || (*(_WORD *)(v6 + 104) & 0x200) != 0)
      {
        v9 = (uint64_t)objc_msgSend(*a4, sel_constantDataAtIndex_, *(unsigned __int16 *)(v6 + 96));
        v10 = v9;
        v11 = *(_QWORD *)(v6 + 24);
        if (v11)
        {
          v12 = *(int **)(v6 + 40);
          v13 = 16 * v11;
          do
          {
            if ((*v12 - 4) >= 4 && *v12 != 9)
            {
              v15 = *re::graphicsLogObjects((re *)v9);
              v9 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v9)
              {
                v16 = *(unsigned __int16 *)(v6 + 96);
                v17 = *v12;
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = v16;
                LOWORD(v31) = 1024;
                *(_DWORD *)((char *)&v31 + 2) = v17;
                _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Cannot encode a constant at argument index %d. Table at index %d does not support argument buffers.", buf, 0xEu);
              }
            }
            v12 += 4;
            v13 -= 16;
          }
          while (v13);
        }
        v18 = *(__int128 **)(v6 + 88);
        v19 = *(__int128 **)(v6 + 72);
        if (v19)
        {
          v20 = 16 * (_QWORD)v19;
          do
          {
            if ((*(_DWORD *)v18 - 4) >= 4 && *(_DWORD *)v18 != 9)
            {
              v22 = *re::graphicsLogObjects((re *)v9);
              v9 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v9)
              {
                v23 = *(unsigned __int16 *)(v6 + 96);
                v24 = *(_DWORD *)v18;
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = v23;
                LOWORD(v31) = 1024;
                *(_DWORD *)((char *)&v31 + 2) = v24;
                _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "Cannot encode a constant at argument index %d. Table at index %d does not support argument buffers.", buf, 0xEu);
              }
            }
            ++v18;
            v20 -= 16;
          }
          while (v20);
          v18 = *(__int128 **)(v6 + 88);
          v19 = *(__int128 **)(v6 + 72);
        }
        v25 = *a1;
        v26 = *(unsigned int *)(v6 + 100);
        v27 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)buf = *(_QWORD *)(v6 + 40);
        v31 = v27;
        v29[0] = v18;
        v29[1] = v19;
        re::ConstantTableCollection::fill(v25, v10, v26, (uint64_t)buf, v29);
      }
      v6 += 112;
    }
    while (v6 != v8);
  }
}

void re::encodeTextures(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  unint64_t v16;
  void **v17;
  void **v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  void **v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35[2];
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (!re::mtl::Device::needsArgumentBufferTextureEmulation((re::mtl::Device *)(*(_QWORD *)(a1 + 8) + 184)))
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = *(unsigned __int16 **)(v8 + 32);
      v11 = &v10[4 * v9];
      v33 = *(_QWORD *)(a1 + 32);
      do
      {
        if (*((_BYTE *)v10 + 6))
        {
          objc_msgSend(*a3, sel_setTexture_atIndex_, 0, *v10);
        }
        else
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v10[1]);
          (*(void (**)(id *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v12 + 24))(v35, v12, v10[2]);
          objc_msgSend(*a3, sel_setTexture_atIndex_, v35[0], *v10);
          if (v10[1])
          {
            v13 = *(_QWORD *)(a4 + 48);
            v14 = *(_QWORD *)(a4 + 32);
            if (v14)
            {
              v15 = *(void ***)(a4 + 48);
              do
              {
                v16 = v14 >> 1;
                v17 = &v15[v14 >> 1];
                v19 = *v17;
                v18 = v17 + 1;
                v14 += ~(v14 >> 1);
                if (v19 < v35[0])
                  v15 = v18;
                else
                  v14 = v16;
              }
              while (v14);
            }
            else
            {
              v15 = *(void ***)(a4 + 48);
            }
            v20 = (uint64_t)v15 - v13;
            v21 = ((uint64_t)v15 - v13) >> 3;
            v22 = v35[0];
            v34 = v22;
            v23 = *(_QWORD *)(a4 + 32);
            v24 = v23 + 1;
            if (v23 + 1 <= v20 >> 3)
            {
              v35[1] = 0;
              v47 = 0u;
              v48 = 0u;
              v45 = 0u;
              v46 = 0u;
              v44 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v36 = 136315906;
              v37 = "insert";
              v38 = 1024;
              v39 = 887;
              v40 = 2048;
              v41 = v21;
              v42 = 2048;
              v43 = v24;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v25 = v22;
            if (v23 >= *(_QWORD *)(a4 + 24))
            {
              re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity((_QWORD *)(a4 + 16), v23 + 1);
              v23 = *(_QWORD *)(a4 + 32);
            }
            v26 = *(_QWORD *)(a4 + 48);
            v27 = (_QWORD *)(v26 + 8 * v23);
            if (v23 <= v21)
            {
              *v27 = v25;
              *(_QWORD *)(a4 + 32) = v23 + 1;
              ++*(_DWORD *)(a4 + 40);
            }
            else
            {
              v28 = *(v27 - 1);
              *(v27 - 1) = 0;
              *v27 = v28;
              v29 = (void **)(v27 - 1);
              if (v27 - 1 != (_QWORD *)(v26 + 8 * v21))
              {
                v30 = 8 * v21 - 8 * v23 + 8;
                do
                {
                  v31 = v29 - 1;
                  NS::SharedPtr<MTL::Texture>::operator=(v29, v29 - 1);
                  v29 = v31;
                  v30 += 8;
                }
                while (v30);
                v26 = *(_QWORD *)(a4 + 48);
              }
              NS::SharedPtr<MTL::Texture>::operator=((void **)(v26 + 8 * v21), &v34);
              v32 = v34;
              ++*(_QWORD *)(a4 + 32);
              ++*(_DWORD *)(a4 + 40);
              if (v32)

            }
          }
          else
          {
            *(_BYTE *)(a4 + 62) = 1;
          }
          if (v35[0])

        }
        v10 += 4;
      }
      while (v10 != v11);
    }
  }
}

void re::ensureHeapInitialized(uint64_t a1, id *this)
{
  _QWORD *v2;
  id v3;

  if (!*(_QWORD *)(a1 + 80))
  {
    v2 = (_QWORD *)(a1 + 64);
    re::createNewHeap(this, &v3);
    re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(v2, &v3);
    if (v3)

  }
}

void re::createNewHeap(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v5;

  v5 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5F0], sel_alloc), sel_init);
  objc_msgSend(v5, sel_setCpuCacheMode_, 0);
  objc_msgSend(v5, sel_setStorageMode_, 0);
  objc_msgSend(v5, sel_setSize_, 0x40000);
  objc_msgSend(v5, sel_setHazardTrackingMode_, 1);
  *a2 = objc_msgSend(*this, sel_newHeapWithDescriptor_, v5);
  if (v5)

}

re::ArgumentBufferCacheReferences *re::ArgumentBufferCacheReferences::ArgumentBufferCacheReferences(re::ArgumentBufferCacheReferences *this, re::Allocator *a2)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *(_QWORD *)this = a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(this, 0);
  ++*((_DWORD *)this + 6);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 5) = a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)this + 5, 0);
  ++*((_DWORD *)this + 16);
  *((_WORD *)this + 40) = 0;
  return this;
}

_QWORD *re::ArgumentBufferCacheReferences::addAndUseResourcePtrs(_QWORD *this, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = (uint64_t)this;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = *(unint64_t **)(a3 + 32);
    v8 = &v7[v5];
    do
    {
      v9 = *v7;
      v13 = *v7;
      v10 = *(_QWORD *)(v4 + 16);
      if (v6 >= v10)
      {
        v11 = 0;
      }
      else
      {
        while (1)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6);
          if (v11 >= v9)
            break;
          if (v10 == ++v6)
          {
            v6 = *(_QWORD *)(v4 + 16);
            break;
          }
        }
      }
      if (v11 != v9)
      {
        re::DynamicArray<unsigned long>::insert((_QWORD *)v4, v6, &v13);
        this = re::DynamicArray<unsigned long>::add((_QWORD *)(v4 + 40), &v13);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v12 = *(_QWORD *)(v4 + 56);
  if (v12)
  {
    this = (_QWORD *)objc_msgSend(*a2, "useResources:count:usage:stages:", *(_QWORD *)(v4 + 72), v12, 1, 3);
    *(_QWORD *)(v4 + 56) = 0;
    ++*(_DWORD *)(v4 + 64);
  }
  return this;
}

uint64_t re::processArgumentBufferContextAndUseResources(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t ArgumentBuffer;

  ArgumentBuffer = re::getOrCreateArgumentBuffer(a1);
  if (*(_BYTE *)(ArgumentBuffer + 62) && !*(_BYTE *)(a2 + 81))
  {
    objc_msgSend(*a3, sel_useHeap_stages_, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8), 3);
    *(_BYTE *)(a2 + 81) = 1;
  }
  re::ArgumentBufferCacheReferences::addAndUseResourcePtrs((_QWORD *)a2, a3, ArgumentBuffer + 16);
  return ArgumentBuffer;
}

void re::ArgumentEncoderBufferPair::~ArgumentEncoderBufferPair(id *this)
{
  id v2;

  v2 = *this;
  if (v2)
  {
    objc_msgSend(v2, sel_setArgumentBuffer_offset_, 0, 0);
    if (*this)
    {

      *this = 0;
    }
  }
}

uint64_t re::FunctionConstantsEnumerator::hasMatchingValueInLayer(re::FunctionConstantsEnumerator *this, const char *__s2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  v7 = &v6[11 * v3];
  while (1)
  {
    v8 = (v6[1] & 1) != 0 ? (const char *)v6[2] : (char *)v6 + 9;
    if (!strcmp(v8, __s2))
    {
      v9 = v6[7];
      if (v9)
        break;
    }
LABEL_7:
    v6 += 11;
    if (v6 == v7)
      return 0;
  }
  v10 = 16 * v9;
  v11 = (_QWORD *)(v6[8] + 8);
  while (!*((_BYTE *)v11 - 8) || *v11 != a3)
  {
    v11 += 2;
    v10 -= 16;
    if (!v10)
      goto LABEL_7;
  }
  return 1;
}

uint64_t *re::FunctionConstantsEnumerator::createLayerToIndexMap(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;

  *((_QWORD *)a1 + 2) = 0;
  v8 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)a1 + 1) = v8;
  v21 = v8;
  if (v8)
  {
    v11 = v8;
    if (v8 >> 62)
      goto LABEL_23;
    *((_QWORD *)a1 + 2) = result;
    if (result)
    {
      v13 = result;
      v14 = result;
      v15 = v21 - 1;
      if (v21 != 1)
      {
        do
        {
          *v14 = 0;
          v14 += 4;
          --v15;
        }
        while (v15);
      }
      v16 = 0;
      *v14 = 0;
      if (v21 <= 1)
        v17 = 1;
      else
        v17 = v21;
      while (1)
      {
        if (a4)
        {
          if (*(_QWORD *)(a2 + 8) <= v16)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, v11);
            _os_crash();
            __break(1u);
            break;
          }
          v18 = 0;
          v19 = *(_QWORD *)(a2 + 16) + 88 * v16;
          v11 = a3;
          while (1)
          {
            result = (uint64_t *)re::DynamicString::operator==(v11, v19);
            if ((result & 1) != 0)
              break;
            ++v18;
            v11 += 64;
            if (a4 == v18)
              goto LABEL_19;
          }
          if (v21 <= v16)
            goto LABEL_22;
          v20 = (char *)v13 + 4 * v16;
          if (!*v20)
            *v20 = 1;
          *((_WORD *)v20 + 1) = v18;
        }
LABEL_19:
        if (++v16 == v17)
          return result;
      }
    }
    re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::FixedArray<re::Optional<unsigned long long>>::indexOf@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = 16 * v4;
    v6 = *(unsigned __int8 **)(result + 16);
    do
    {
      if (*a2 && *v6)
      {
        if (*((_QWORD *)v6 + 1) == *((_QWORD *)a2 + 1))
          goto LABEL_11;
      }
      else if (!(*v6 | *a2))
      {
        goto LABEL_11;
      }
      v6 += 16;
      v5 -= 16;
    }
    while (v5);
    v6 = (unsigned __int8 *)(v3 + 16 * v4);
  }
  else
  {
    v6 = *(unsigned __int8 **)(result + 16);
  }
LABEL_11:
  v7 = (uint64_t)&v6[-v3] >> 4;
  if (v7 == v4)
  {
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v7;
    v8 = 1;
  }
  *(_BYTE *)a3 = v8;
  return result;
}

uint64_t re::FunctionConstantsEnumerator::enumerateFunctionConstantSet(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v11[8];
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v4 = 0;
  v5 = 88 * v2;
  v6 = *(_QWORD *)(a1 + 16) + 48;
  do
  {
    v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, (_QWORD *)(v6 - 16));
    if (v7 == -1)
    {
      v9 = 0;
    }
    else
    {
      v8 = *(unsigned int *)(a2[1] + 16 * v7 + 8);
      v11[0] = 1;
      v12 = v8;
      re::FixedArray<re::Optional<unsigned long long>>::indexOf(v6, v11, (uint64_t)v13);
      if (v13[0])
        v9 = v14;
      else
        v9 = 0;
    }
    v4 += *(_QWORD *)(v6 + 24) * v9;
    v6 += 88;
    v5 -= 88;
  }
  while (v5);
  return v4;
}

uint64_t re::FunctionConstantsEnumerator::createPermutation@<X0>(_anonymous_namespace_ *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  unint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *LayerToIndexMap;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _anonymous_namespace_ *TypeSize;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re::DynamicString *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[38];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 24) = 0;
  if (a4)
  {
    v9 = a4;
    v5 = a3;
    re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity((_QWORD *)a5, v9);
    ++*(_DWORD *)(a5 + 24);
    re::DynamicArray<re::TechniqueFunctionConstant>::copy((uint64_t *)a5, 0, (uint64_t *)v5, v9);
    v10 = *(_QWORD *)(a5 + 32);
    a4 = *(_QWORD *)(a5 + 16);
  }
  else
  {
    v10 = 0;
  }
  LayerToIndexMap = (_anonymous_namespace_ *)re::FunctionConstantsEnumerator::createLayerToIndexMap((_anonymous_namespace_ *)&v32, (uint64_t)a1, v10, a4);
  if (*((_QWORD *)a1 + 1))
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = a2 % *((_QWORD *)a1 + 4);
    while (1)
    {
      v16 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);
      v17 = v16[9];
      v18 = v15 / v17;
      v19 = v16[7];
      if (v19 <= v15 / v17)
      {
        *(_QWORD *)v40 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v36 = 136315906;
        *(_QWORD *)&v36[4] = "operator[]";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 476;
        *(_WORD *)&v36[18] = 2048;
        *(_QWORD *)&v36[20] = v15 / v17;
        *(_WORD *)&v36[28] = 2048;
        *(_QWORD *)&v36[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_48:
        *(_QWORD *)v40 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v36 = 136315906;
        *(_QWORD *)&v36[4] = "operator[]";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 468;
        *(_WORD *)&v36[18] = 2048;
        *(_QWORD *)&v36[20] = v14;
        *(_WORD *)&v36[28] = 2048;
        *(_QWORD *)&v36[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_49:
        *(_QWORD *)v40 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v36 = 136315906;
        *(_QWORD *)&v36[4] = "operator[]";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 789;
        *(_WORD *)&v36[18] = 2048;
        *(_QWORD *)&v36[20] = v19;
        *(_WORD *)&v36[28] = 2048;
        *(_QWORD *)&v36[30] = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_50:
        v35 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v40 = 136315906;
        *(_QWORD *)&v40[4] = "operator[]";
        v41 = 1024;
        v42 = 476;
        v43 = 2048;
        v44 = v14;
        v45 = 2048;
        v46 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_51:
        *(_QWORD *)v40 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v36 = 136315906;
        *(_QWORD *)&v36[4] = "removeAt";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 931;
        *(_WORD *)&v36[18] = 2048;
        *(_QWORD *)&v36[20] = v19;
        *(_WORD *)&v36[28] = 2048;
        *(_QWORD *)&v36[30] = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_52:
        v35 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v40 = 136315906;
        *(_QWORD *)&v40[4] = "operator[]";
        v41 = 1024;
        v42 = 476;
        v43 = 2048;
        v44 = v14;
        v45 = 2048;
        v46 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v20 = v16[8];
      if (*(_BYTE *)(v20 + 16 * v18))
        v31 = *(_QWORD *)(v20 + 16 * v18 + 8);
      v19 = v33;
      if (v33 <= v14)
        goto LABEL_48;
      if (*(_BYTE *)(v34 + v12))
        break;
      if (*(_BYTE *)(v20 + 16 * v18))
      {
        memset(v36, 0, 32);
        re::DynamicString::setCapacity(v36, 0);
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v19 = *((_QWORD *)a1 + 1);
        if (v19 <= v14)
          goto LABEL_50;
        re::DynamicString::operator=((re::DynamicString *)v36, (re::DynamicString *)(*((_QWORD *)a1 + 2) + v13));
        v19 = *((_QWORD *)a1 + 1);
        if (v19 <= v14)
          goto LABEL_52;
        *(_DWORD *)&v36[32] = *(_DWORD *)(*((_QWORD *)a1 + 2) + v13 + 40);
        TypeSize = (_anonymous_namespace_ *)re::mtl::getTypeSize(*(unsigned __int16 *)&v36[32]);
        v5 = (int)TypeSize;
        re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v36, v31);
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)a5, (re::DynamicString *)v36);
        re::FunctionConstantsEnumerator::createLayerToIndexMap((_anonymous_namespace_ *)&v47, (uint64_t)a1, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 16));
        re::FixedArray<float>::operator=(&v32, (uint64_t *)&v47);
        if ((_QWORD)v47 && *((_QWORD *)&v47 + 1))
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v47 + 40))(v47, v48);
        if (v37)
        {
          if (v38)
          {
            (*(void (**)(void))(*(_QWORD *)v37 + 40))();
            v38 = 0;
            v39 = 0;
          }
          v37 = 0;
        }
        LayerToIndexMap = *(_anonymous_namespace_ **)v36;
        if (*(_QWORD *)v36)
        {
          if ((v36[8] & 1) != 0)
          {
            v22 = *(_QWORD *)&v36[16];
LABEL_41:
            LayerToIndexMap = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t))(*(_QWORD *)LayerToIndexMap + 40))(LayerToIndexMap, v22);
          }
        }
      }
LABEL_42:
      v15 %= v17;
      ++v14;
      v13 += 88;
      v12 += 4;
      if (*((_QWORD *)a1 + 1) <= v14)
        goto LABEL_43;
    }
    v19 = *(__int16 *)(v34 + v12 + 2);
    v5 = *(_QWORD *)(a5 + 16);
    if (*(_BYTE *)(v20 + 16 * v18))
    {
      if (v5 <= v19)
        goto LABEL_49;
      LayerToIndexMap = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)(*(_QWORD *)(a5 + 32) + (v19 << 6)), v31);
      goto LABEL_42;
    }
    if (v5 <= v19)
      goto LABEL_51;
    if (v5 - 1 > v19)
    {
      v23 = *(_QWORD *)(a5 + 32);
      v24 = v23 + (v5 << 6);
      v25 = re::DynamicString::operator=((re::DynamicString *)(v23 + (v19 << 6)), (re::DynamicString *)(v24 - 64));
      *((_DWORD *)v25 + 8) = *(_DWORD *)(v24 - 32);
      re::FixedArray<float>::operator=((uint64_t *)v25 + 5, (uint64_t *)(v24 - 24));
      v5 = *(_QWORD *)(a5 + 16);
    }
    v26 = *(_QWORD *)(a5 + 32) + (v5 << 6);
    v27 = *(_QWORD *)(v26 - 24);
    if (v27)
    {
      if (*(_QWORD *)(v26 - 16))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 40))(v27, *(_QWORD *)(v26 - 8));
        *(_QWORD *)(v26 - 16) = 0;
        *(_QWORD *)(v26 - 8) = 0;
      }
      *(_QWORD *)(v26 - 24) = 0;
    }
    v5 = v26 - 64;
    v28 = *(_QWORD *)(v26 - 64);
    if (v28)
    {
      if ((*(_BYTE *)(v26 - 56) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 40))(v28, *(_QWORD *)(v26 - 48));
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v26 - 48) = 0u;
    }
    v29 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v29;
    ++*(_DWORD *)(a5 + 24);
    re::FunctionConstantsEnumerator::createLayerToIndexMap((_anonymous_namespace_ *)&v47, (uint64_t)a1, *(_QWORD *)(a5 + 32), v29);
    re::FixedArray<float>::operator=(&v32, (uint64_t *)&v47);
    LayerToIndexMap = (_anonymous_namespace_ *)v47;
    if (!(_QWORD)v47 || !*((_QWORD *)&v47 + 1))
      goto LABEL_42;
    v22 = v48;
    goto LABEL_41;
  }
LABEL_43:
  result = v32;
  if (v32)
  {
    if (v33)
      return (*(uint64_t (**)(void))(*(_QWORD *)v32 + 40))();
  }
  return result;
}

_QWORD *re::FunctionConstantsEnumerator::overrideEnumerator@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  re::TechniqueFunctionConstant *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t As64Bits;
  _anonymous_namespace_ *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _anonymous_namespace_ *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  uint64_t v60;
  re::DynamicString *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  char v76;
  char *v77;
  uint64_t v78;
  _BYTE *v79;
  unsigned int v80;
  uint64_t v81;
  re::TechniqueFunctionConstant *v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  char v86[8];
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  char v97;
  _BYTE v98[12];
  __int16 v99;
  int v100;
  __int16 v101;
  unint64_t v102;
  __int16 v103;
  unint64_t v104;
  _DWORD v105[12];
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v4 = (uint64_t)result;
  v108 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v9 = *v8;
      v8 += 28;
      if (v9 < 0)
        break;
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if ((_DWORD)v6 == (_DWORD)v7)
    goto LABEL_8;
  v10 = v7;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 32);
LABEL_10:
  v13 = *(_QWORD *)(v4 + 8);
  if (!v13)
    goto LABEL_15;
  v14 = v11 + 112 * v10 + 16;
  v15 = 88 * v13;
  v16 = (_QWORD *)(*(_QWORD *)(v4 + 16) + 32);
  while (1)
  {
    result = (_QWORD *)re::Hash<re::DynamicString>::operator()((uint64_t)&v92, v14);
    v17 = (_QWORD *)*v16;
    v16 += 11;
    if (result == v17)
      break;
    v15 -= 88;
    if (!v15)
    {
      v12 = *(_DWORD *)(a2 + 32);
      v11 = *(_QWORD *)(a2 + 16);
LABEL_15:
      if (v12 <= (int)v7 + 1)
        v18 = v7 + 1;
      else
        v18 = v12;
      while (1)
      {
        v10 = (v7 + 1);
        if (v18 - 1 == (_DWORD)v7)
          break;
        LODWORD(v7) = v7 + 1;
        v19 = v10;
        if ((*(_DWORD *)(v11 + 112 * v10 + 8) & 0x80000000) != 0)
          goto LABEL_22;
      }
      v19 = v18;
LABEL_22:
      LODWORD(v7) = v19;
      if ((_DWORD)v6 == v19)
      {
LABEL_8:
        *a3 = 0;
        return result;
      }
      goto LABEL_10;
    }
  }
  v79 = a3;
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::FixedArray(&v88, v4);
  v90 = *(_OWORD *)(v4 + 24);
  v20 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v23 = *v22;
      v22 += 28;
      if (v23 < 0)
        break;
      if (v20 == ++v21)
      {
        LODWORD(v21) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v21) = 0;
  }
  if ((_DWORD)v20 == (_DWORD)v21)
    goto LABEL_108;
  v24 = v21;
  v81 = a2;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = *(_QWORD *)(v4 + 8);
  v27 = *(_DWORD *)(a2 + 32);
  v80 = v27;
  do
  {
    if (!v26)
      goto LABEL_100;
    v28 = 0;
    v29 = v25 + 112 * v24;
    v30 = v29 + 16;
    v31 = (re::TechniqueFunctionConstant *)(v29 + 48);
    v82 = (re::TechniqueFunctionConstant *)(v29 + 48);
    do
    {
      v32 = *(_QWORD *)(v4 + 16);
      v33 = re::Hash<re::DynamicString>::operator()((uint64_t)&v92, v30);
      v34 = v32 + 88 * v28;
      v36 = *(_QWORD *)(v34 + 32);
      v35 = (_QWORD *)(v34 + 32);
      if (v33 != v36)
        goto LABEL_98;
      As64Bits = re::TechniqueFunctionConstant::getAs64Bits(v31);
      LOBYTE(v92) = 1;
      *((_QWORD *)&v92 + 1) = As64Bits;
      v38 = (_anonymous_namespace_ *)re::FixedArray<re::Optional<unsigned long long>>::indexOf(v32 + 88 * v28 + 48, (unsigned __int8 *)&v92, (uint64_t)v86);
      if (v86[0])
      {
        v39 = *((_QWORD *)&v88 + 1);
        if (*((_QWORD *)&v88 + 1) <= v28)
        {
          *(_QWORD *)v98 = 0;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v92 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v105[0] = 136315906;
          *(_QWORD *)&v105[1] = "operator[]";
          LOWORD(v105[3]) = 1024;
          *(_DWORD *)((char *)&v105[3] + 2) = 468;
          HIWORD(v105[4]) = 2048;
          *(_QWORD *)&v105[5] = v28;
          LOWORD(v105[7]) = 2048;
          *(_QWORD *)((char *)&v105[7] + 2) = v39;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_113:
          *(_QWORD *)v98 = 0;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v92 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v105[0] = 136315906;
          *(_QWORD *)&v105[1] = "operator[]";
          LOWORD(v105[3]) = 1024;
          *(_DWORD *)((char *)&v105[3] + 2) = 468;
          HIWORD(v105[4]) = 2048;
          *(_QWORD *)&v105[5] = v39;
          LOWORD(v105[7]) = 2048;
          *(_QWORD *)((char *)&v105[7] + 2) = v32;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_114:
          re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 440);
          _os_crash();
          __break(1u);
LABEL_115:
          re::internal::assertLog((re::internal *)7, v49, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 362, v52, 1, v51);
          _os_crash();
          __break(1u);
LABEL_116:
          re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Too much data to copy.", "requiredSize <= m_size", "copy", 363);
          _os_crash();
          __break(1u);
LABEL_117:
          v91 = 0;
          v106 = 0u;
          v107 = 0u;
          memset(v105, 0, sizeof(v105));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v98 = 136315906;
          *(_QWORD *)&v98[4] = "operator[]";
          v99 = 1024;
          v100 = 468;
          v101 = 2048;
          v102 = v28;
          v103 = 2048;
          v104 = v39;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_118:
          re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
          _os_crash();
          __break(1u);
        }
        v39 = v87;
        v32 = *(_QWORD *)(v89 + 88 * v28 + 56);
        if (v32 <= v87)
          goto LABEL_113;
        v40 = *(unsigned __int8 **)(v89 + 88 * v28 + 64);
        v41 = &v40[16 * v87];
        v42 = *v41;
        if (*v41)
        {
          v43 = (unsigned __int8 *)*((_QWORD *)v41 + 1);
          if (*v40)
          {
            *((_QWORD *)v41 + 1) = *((_QWORD *)v40 + 1);
            v44 = 1;
LABEL_88:
            v31 = v82;
            if (!(v44 | v42))
              goto LABEL_98;
            v72 = v44 != 0;
            if (v42)
              v73 = 1;
            else
              v73 = v44 == 0;
            if (!v73)
            {
              *v40 = 0;
              goto LABEL_98;
            }
          }
          else
          {
            *v41 = 0;
            v72 = *v40 != 0;
            v31 = v82;
          }
          if (v42 && !v72)
            *v40 = 1;
          *((_QWORD *)v40 + 1) = v43;
          goto LABEL_98;
        }
        v43 = (unsigned __int8 *)*v40;
        if (*v40)
        {
          *v41 = 1;
          v43 = &v40[16 * v39];
          *((_QWORD *)v43 + 1) = *((_QWORD *)v40 + 1);
          v44 = *v40;
        }
        else
        {
          v44 = 0;
        }
        goto LABEL_88;
      }
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v45 = v32 + 88 * v28;
      v47 = *(_QWORD *)(v45 + 56);
      v46 = (uint64_t *)(v45 + 56);
      v39 = v47 + 1;
      v48 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::getAs64Bits(v31);
      if (!v84)
        goto LABEL_114;
      v50 = v85;
      if (!*v85)
        *v85 = 1;
      *((_QWORD *)v50 + 1) = v48;
      v51 = *v46;
      v52 = v84;
      if (*v46 == -1)
        goto LABEL_115;
      if (*v46 + 1 > v84)
        goto LABEL_116;
      if (v51)
      {
        v53 = v85 + 16;
        v54 = (_QWORD *)(*(_QWORD *)(v32 + 88 * v28 + 64) + 8);
        v55 = 16 * v51;
        do
        {
          v56 = *((unsigned __int8 *)v54 - 8);
          if (*v53)
            v57 = 0;
          else
            v57 = v56 == 0;
          if (!v57)
          {
            if (*v53)
              v58 = v56 == 0;
            else
              v58 = 0;
            if (v58)
            {
              *v53 = 0;
            }
            else
            {
              if (*v53)
                v59 = 1;
              else
                v59 = v56 == 0;
              if (!v59)
                *v53 = 1;
              *((_QWORD *)v53 + 1) = *v54;
            }
          }
          v53 += 16;
          v54 += 2;
          v55 -= 16;
        }
        while (v55);
      }
      v92 = 0u;
      v93 = 0u;
      re::DynamicString::setCapacity(&v92, 0);
      *(_QWORD *)&v94 = *v35;
      DWORD2(v94) = 0;
      *(_QWORD *)&v96 = 0;
      v95 = 0uLL;
      if (v83)
      {
        re::FixedArray<re::Optional<unsigned long long>>::init<>(&v95, v83, v84);
        re::FixedArray<re::Optional<unsigned long long>>::copy((uint64_t)&v95, (uint64_t)&v83);
      }
      *((_QWORD *)&v96 + 1) = *(_QWORD *)(v32 + 88 * v28 + 72);
      v97 = 0;
      v39 = *((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1) <= v28)
        goto LABEL_117;
      v60 = v89;
      v61 = re::DynamicString::operator=((re::DynamicString *)(v89 + 88 * v28), (re::DynamicString *)&v92);
      v31 = v82;
      v63 = v94;
      *((_DWORD *)v61 + 10) = DWORD2(v94);
      *((_QWORD *)v61 + 4) = v63;
      v64 = (uint64_t *)((char *)v61 + 48);
      if ((__int128 *)((char *)v61 + 48) != &v95)
      {
        v65 = *v64;
        if (*v64)
          v66 = v65 == (_QWORD)v95;
        else
          v66 = 1;
        if (!v66)
          goto LABEL_118;
        *v64 = v95;
        *(_QWORD *)&v95 = v65;
        v67 = v60 + 88 * v28;
        v68 = *(_QWORD *)(v67 + 56);
        *(_QWORD *)(v67 + 56) = *((_QWORD *)&v95 + 1);
        *((_QWORD *)&v95 + 1) = v68;
        v69 = *(_QWORD *)(v67 + 64);
        *(_QWORD *)(v67 + 64) = v96;
        *(_QWORD *)&v96 = v69;
      }
      v70 = v60 + 88 * v28;
      v71 = *((_QWORD *)&v96 + 1);
      *(_BYTE *)(v70 + 80) = v97;
      *(_QWORD *)(v70 + 72) = v71;
      if ((_QWORD)v95)
      {
        if (*((_QWORD *)&v95 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v95 + 40))();
          *((_QWORD *)&v95 + 1) = 0;
          *(_QWORD *)&v96 = 0;
        }
        *(_QWORD *)&v95 = 0;
      }
      if ((_QWORD)v92 && (BYTE8(v92) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v92 + 40))();
      if (v83 && v84)
        (*(void (**)(void))(*(_QWORD *)v83 + 40))();
LABEL_98:
      ++v28;
      v26 = *(_QWORD *)(v4 + 8);
    }
    while (v26 > v28);
    LODWORD(v20) = v80;
    v27 = *(_DWORD *)(v81 + 32);
    v25 = *(_QWORD *)(v81 + 16);
LABEL_100:
    if (v27 <= (int)v21 + 1)
      v74 = v21 + 1;
    else
      v74 = v27;
    while (1)
    {
      v24 = (v21 + 1);
      if (v74 - 1 == (_DWORD)v21)
        break;
      LODWORD(v21) = v21 + 1;
      v75 = v24;
      if ((*(_DWORD *)(v25 + 112 * v24 + 8) & 0x80000000) != 0)
        goto LABEL_107;
    }
    v75 = v74;
LABEL_107:
    LODWORD(v21) = v75;
  }
  while ((_DWORD)v20 != v75);
LABEL_108:
  re::FunctionConstantsEnumerator::calculateDerivedFields(&v88);
  if (*(_QWORD *)(v4 + 24) == (_QWORD)v90)
  {
    v76 = 0;
    v77 = v79;
  }
  else
  {
    v77 = v79;
    *(_OWORD *)(v79 + 8) = v88;
    v78 = v89;
    v89 = 0;
    v88 = 0uLL;
    *((_QWORD *)v79 + 3) = v78;
    *((_OWORD *)v79 + 2) = v90;
    v76 = 1;
  }
  *v77 = v76;
  return re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(&v88);
}

_QWORD *re::FunctionConstantsEnumerator::calculateDerivedFields(_QWORD *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  v1 = this[1];
  if (v1)
  {
    v2 = this[2];
    v3 = v2 + 88 * v1;
    v4 = 88 * v1;
    v5 = (uint64_t *)(v2 + 56);
    v6 = 1;
    do
    {
      v7 = *v5;
      v5 += 11;
      v6 *= v7;
      v4 -= 88;
    }
    while (v4);
    this[4] = v6;
    v8 = (unint64_t *)(v2 + 72);
    v9 = v1;
    do
    {
      v6 /= *(v8 - 2);
      *v8 = v6;
      v8 += 11;
      --v9;
    }
    while (v9);
    do
    {
      v10 = *(_QWORD *)(v2 + 56);
      v11 = (v10 - 0x61C8864680B583E9 + (*(_QWORD *)(v2 + 32) << 6) + (*(_QWORD *)(v2 + 32) >> 2)) ^ *(_QWORD *)(v2 + 32);
      if (v10)
      {
        v12 = 16 * v10;
        v13 = (_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
        do
        {
          if (*((_BYTE *)v13 - 8))
          {
            v14 = *v13;
            v11 ^= (v11 << 6) - 0x61C8864680B583E9 + (v11 >> 2) + 1;
          }
          else
          {
            v14 = 0;
          }
          v11 ^= (v11 << 6) - 0x61C8864680B583E9 + (v11 >> 2) + v14;
          v13 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      v15 = (*(unsigned __int16 *)(v2 + 42)
           - 0x61C8864680B583E9
           + ((((v11 << 6) - 0x61C8864680B583E9 + (v11 >> 2) + *(_QWORD *)(v2 + 72)) ^ v11) << 6)
           + ((((v11 << 6) - 0x61C8864680B583E9 + (v11 >> 2) + *(_QWORD *)(v2 + 72)) ^ v11) >> 2)) ^ ((v11 << 6) - 0x61C8864680B583E9 + (v11 >> 2) + *(_QWORD *)(v2 + 72)) ^ v11;
      v1 ^= (v1 << 6)
          - 0x61C8864680B583E9
          + (v1 >> 2)
          + ((*(unsigned __int16 *)(v2 + 40) - 0x61C8864680B583E9 + (v15 << 6) + (v15 >> 2)) ^ v15);
      v2 += 88;
    }
    while (v2 != v3);
  }
  else
  {
    this[4] = 1;
  }
  this[3] = v1;
  return this;
}

void re::FunctionConstantsEnumerator::createEnumerator(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t As64Bits;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  re::TechniqueFunctionConstant *v23;
  re::TechniqueFunctionConstant *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _anonymous_namespace_ *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  re::TechniqueFunctionConstant **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  re::TechniqueFunctionConstant *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74[2];
  uint64_t v75;
  uint64_t v76[2];
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int16 v87;
  _BYTE v88[28];
  __int16 v89;
  unint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_QWORD *)(a6 + 32) = 1;
  As64Bits = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)v76, a1);
  if (a3)
  {
    v11 = &a2[a3];
    do
    {
      v74[0] = *a2;
      As64Bits = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(a5, v74);
      if (As64Bits != -1)
      {
        v12 = a5[1] + 72 * As64Bits;
        v13 = (uint64_t *)(v12 + 8);
        *(_QWORD *)v88 = v12 + 8;
        *(_QWORD *)&v88[8] = 0;
        v14 = *(_QWORD *)(v12 + 24);
        if (v14 >= 0x10)
        {
          v15 = 0;
          v16 = *v13;
          v17 = v14 >> 4;
          while (1)
          {
            v18 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v16 + v15)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            *(_QWORD *)&v88[8] = (unsigned __int16)~v18;
            if (v18 != 0xFFFF)
              break;
            v15 += 16;
            if (!--v17)
              goto LABEL_20;
          }
          v19 = __clz(__rbit64((unsigned __int16)~v18)) + v15;
          for (*(_QWORD *)&v88[16] = v19; *(_QWORD *)&v88[16] != -1; v19 = *(_QWORD *)&v88[16])
          {
            v20 = *(_QWORD *)(*(_QWORD *)v88 + 8) + 96 * v19;
            re::DynamicString::DynamicString((re::DynamicString *)&v81, (const re::DynamicString *)v20);
            LODWORD(v83) = *(_DWORD *)(v20 + 32);
            re::DynamicArray<char const*>::DynamicArray((uint64_t)&v83 + 8, (uint64_t *)(v20 + 40));
            v21 = *(_QWORD *)(v20 + 80);
            v87 = *(_WORD *)(v20 + 88);
            v86 = v21;
            if (re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(v76, (uint64_t)&v81) == -1)re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew(v76, (const re::DynamicString *)&v81, (uint64_t *)&v83);
            if (*((_QWORD *)&v83 + 1))
            {
              if (*((_QWORD *)&v85 + 1))
                (*(void (**)(void))(**((_QWORD **)&v83 + 1) + 40))();
              *((_QWORD *)&v85 + 1) = 0;
              v84 = 0uLL;
              *((_QWORD *)&v83 + 1) = 0;
              LODWORD(v85) = v85 + 1;
            }
            if ((_QWORD)v81 && (BYTE8(v81) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v81 + 40))();
            As64Bits = (uint64_t)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v88);
          }
        }
      }
LABEL_20:
      ++a2;
    }
    while (a2 != v11);
  }
  v22 = *(_QWORD *)(a4 + 16);
  if (v22)
  {
    v23 = *(re::TechniqueFunctionConstant **)(a4 + 32);
    v24 = (re::TechniqueFunctionConstant *)((char *)v23 + 64 * v22);
    do
    {
      As64Bits = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(v76, (uint64_t)v23);
      if (As64Bits != -1)
      {
        v25 = As64Bits;
        v26 = v76[1];
        As64Bits = re::TechniqueFunctionConstant::getAs64Bits(v23);
        v27 = As64Bits;
        v28 = v26 + 96 * v25;
        v31 = *(_QWORD *)(v28 + 56);
        v30 = (_QWORD *)(v28 + 56);
        v29 = v31;
        v33 = (uint64_t **)(v30 + 2);
        v32 = (uint64_t *)v30[2];
        v34 = v32;
        if (v31)
        {
          v35 = 8 * v29;
          v34 = (uint64_t *)v30[2];
          while (*v34 != As64Bits)
          {
            ++v34;
            v35 -= 8;
            if (!v35)
            {
              v34 = &v32[v29];
              break;
            }
          }
        }
        v36 = v34 - v32;
        if (v36 == v29)
        {
          if (v29 == -1)
            goto LABEL_73;
          if (v29 >= *(_QWORD *)(v26 + 96 * v25 + 48))
          {
            As64Bits = (uint64_t)re::DynamicArray<float *>::growCapacity(v30 - 2, v29 + 1);
            v29 = *v30;
            v32 = *v33;
          }
          v37 = &v32[v29];
          if (v29)
          {
            *v37 = *(v37 - 1);
            if (v37 - 1 != v32)
            {
              As64Bits = (uint64_t)memmove(v32 + 1, v32, 8 * v29 - 8);
              v32 = *v33;
              v29 = *v30;
            }
          }
          *v32 = v27;
          *v30 = v29 + 1;
          ++*(_DWORD *)(v26 + 96 * v25 + 64);
        }
        else
        {
          if (v29 <= v36)
            goto LABEL_74;
          v38 = v32[v36];
          v32[v36] = *v32;
          *v32 = v38;
        }
        *(_BYTE *)(v26 + 96 * v25 + 88) = 1;
      }
      v23 = (re::TechniqueFunctionConstant *)((char *)v23 + 64);
    }
    while (v23 != v24);
  }
  if (v79)
  {
    v39 = v78;
    if (v78)
    {
      v40 = (_QWORD *)a6;
      v74[0] = (uint64_t)v76;
      if (v77 >= 0x10)
      {
        v41 = 0;
        v42 = v77 >> 4;
        while (1)
        {
          v43 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v76[0] + v41)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v74[1] = (unsigned __int16)~v43;
          if (v43 != 0xFFFF)
            break;
          v41 += 16;
          if (!--v42)
            goto LABEL_69;
        }
        v44 = __clz(__rbit64((unsigned __int16)~v43)) + v41;
        v75 = v44;
        if (v44 != -1)
        {
          v36 = 0;
          v29 = 88;
          do
          {
            v23 = (re::TechniqueFunctionConstant *)v40[1];
            if ((unint64_t)v23 <= v36)
              goto LABEL_75;
            v45 = *(_QWORD *)(v74[0] + 8);
            v46 = v45 + 96 * v44;
            v47 = v40[2];
            v48 = v47 + 88 * v36;
            *(_QWORD *)(v48 + 32) = re::Hash<re::DynamicString>::operator()((uint64_t)&v81, v46);
            *(_DWORD *)(v48 + 40) = *(_DWORD *)(v46 + 32);
            v49 = re::DynamicString::operator=((re::DynamicString *)v48, (re::DynamicString *)v46);
            v52 = *(_QWORD *)(v46 + 56);
            v50 = v46 + 56;
            v51 = v52;
            v53 = *(unsigned __int8 *)(v50 + 32);
            *(_BYTE *)(v48 + 80) = v53;
            v54 = (_QWORD *)(v48 + 48);
            if (v53)
            {
              v40 = (_QWORD *)a6;
              if (*(_QWORD *)v50)
              {
                v55 = 0;
                v56 = 0;
                v57 = v47 + 88 * v36;
                v58 = (re::TechniqueFunctionConstant **)(v57 + 56);
                v59 = (uint64_t *)(v57 + 64);
                while (1)
                {
                  v23 = *v58;
                  if ((unint64_t)*v58 <= v56)
                    break;
                  v60 = *(_QWORD *)(*(_QWORD *)(v45 + 96 * v44 + 72) + 8 * v56);
                  v61 = *v59;
                  if (!*(_BYTE *)(*v59 + v55))
                    *(_BYTE *)(v61 + v55) = 1;
                  *(_QWORD *)(v61 + v55 + 8) = v60;
                  ++v56;
                  v55 += 16;
                  if (*(_QWORD *)v50 <= v56)
                    goto LABEL_68;
                }
                v80 = 0;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v81 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v88 = 136315906;
                *(_QWORD *)&v88[4] = "operator[]";
                *(_WORD *)&v88[12] = 1024;
                *(_DWORD *)&v88[14] = 468;
                *(_WORD *)&v88[18] = 2048;
                *(_QWORD *)&v88[20] = v56;
                v89 = 2048;
                v90 = (unint64_t)v23;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_72;
              }
            }
            else
            {
              v62 = v47 + 88 * v36;
              v64 = *(_QWORD *)(v62 + 56);
              v63 = (unint64_t *)(v62 + 56);
              if (!v64)
                goto LABEL_76;
              v65 = v47 + 88 * v36;
              v68 = *(_BYTE **)(v65 + 64);
              v66 = (_QWORD *)(v65 + 64);
              v67 = v68;
              if (*v68)
                *v67 = 0;
              v40 = (_QWORD *)a6;
              if (*(_QWORD *)v50)
              {
                v69 = 0;
                v70 = 0;
                while (1)
                {
                  v23 = (re::TechniqueFunctionConstant *)((char *)v70 + 1);
                  v56 = *v63;
                  if (*v63 <= (unint64_t)v70 + 1)
                    break;
                  v71 = *(_QWORD *)(*(_QWORD *)(v45 + 96 * v44 + 72) + 8 * (_QWORD)v70);
                  v72 = *v66 + v69;
                  if (!*(_BYTE *)(v72 + 16))
                    *(_BYTE *)(v72 + 16) = 1;
                  *(_QWORD *)(v72 + 24) = v71;
                  v69 += 16;
                  v70 = v23;
                  if (*(_QWORD *)v50 <= (unint64_t)v23)
                    goto LABEL_68;
                }
LABEL_72:
                v80 = 0;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v81 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v88 = 136315906;
                *(_QWORD *)&v88[4] = "operator[]";
                *(_WORD *)&v88[12] = 1024;
                *(_DWORD *)&v88[14] = 468;
                *(_WORD *)&v88[18] = 2048;
                *(_QWORD *)&v88[20] = v23;
                v89 = 2048;
                v90 = v56;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_73:
                v74[0] = 0;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v81 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v88 = 136315906;
                *(_QWORD *)&v88[4] = "insert";
                *(_WORD *)&v88[12] = 1024;
                *(_DWORD *)&v88[14] = 855;
                *(_WORD *)&v88[18] = 2048;
                *(_QWORD *)&v88[20] = 0;
                v89 = 2048;
                v90 = 0;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_74:
                v74[0] = 0;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v81 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v88 = 136315906;
                *(_QWORD *)&v88[4] = "operator[]";
                *(_WORD *)&v88[12] = 1024;
                *(_DWORD *)&v88[14] = 789;
                *(_WORD *)&v88[18] = 2048;
                *(_QWORD *)&v88[20] = v36;
                v89 = 2048;
                v90 = v29;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_75:
                v80 = 0;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v81 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v88 = 136315906;
                *(_QWORD *)&v88[4] = "operator[]";
                *(_WORD *)&v88[12] = 1024;
                *(_DWORD *)&v88[14] = 468;
                *(_WORD *)&v88[18] = 2048;
                *(_QWORD *)&v88[20] = v36;
                v89 = 2048;
                v90 = (unint64_t)v23;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_76:
                v80 = 0;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v81 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v88 = 136315906;
                *(_QWORD *)&v88[4] = "operator[]";
                *(_WORD *)&v88[12] = 1024;
                *(_DWORD *)&v88[14] = 468;
                *(_WORD *)&v88[18] = 2048;
                *(_QWORD *)&v88[20] = 0;
                v89 = 2048;
                v90 = 0;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
            }
LABEL_68:
            ++v36;
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v74);
            v44 = v75;
          }
          while (v75 != -1);
        }
      }
LABEL_69:
      re::FunctionConstantsEnumerator::calculateDerivedFields(v40);
    }
  }
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v76);
}

uint64_t re::FunctionConstantsEnumerator::printDebugData(re::FunctionConstantsEnumerator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  puts("    variations:");
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = 88 * v2;
    v4 = *((_QWORD *)this + 2) + 56;
    do
    {
      if ((*(_BYTE *)(v4 - 48) & 1) != 0)
        v5 = *(const char **)(v4 - 40);
      else
        v5 = (const char *)(v4 - 47);
      printf("      %s %zu", v5, *(_QWORD *)v4);
      if (*(_BYTE *)(v4 + 24))
        putchar(10);
      else
        puts(" no default");
      v4 += 88;
      v3 -= 88;
    }
    while (v3);
  }
  return printf("    permutations: %zu\n", *((_QWORD *)this + 4));
}

char *re::createVertexFetchArgumentBuffer<re::mtl::RenderCommandEncoder>@<X0>(id *a1@<X0>, id *a2@<X1>, re *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD v12[2];
  __int128 v13;
  _OWORD v14[2];
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  _OWORD v18[2];
  int v19;

  v7 = objc_msgSend(*a1, sel_newBufferWithLength_options_, 120, 0);
  *a4 = v7;
  v8 = (char *)objc_msgSend(v7, sel_contents);
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0u;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  memset(v14, 0, sizeof(v14));
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  re::createVertexFetchFunctionKey(a3, (uint64_t)v12);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x2B3FAC222C23CAEDLL, *(uint64_t *)&v12[0], SWORD4(v12[0]), 0);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x16172F2CA64F41FLL, *(uint64_t *)((char *)v12 + 12), SWORD2(v12[1]), 1);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x2ACCEB6695018FABLL, *((uint64_t *)&v12[1] + 1), v13, 2);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x2ED0816D3076E801, *(uint64_t *)((char *)&v13 + 4), SWORD6(v13), 3);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x3CB5CD20F43A4EDALL, *(uint64_t *)&v14[0], SWORD4(v14[0]), 4);
  v9 = re::internal::compileTimeHornerHash<26ul>(0, 0, 25);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, v9 & 0x7FFFFFFFFFFFFFFFLL, *(uint64_t *)((char *)v14 + 12), SWORD2(v14[1]), 5);
  v10 = re::internal::compileTimeHornerHash<17ul>(31, (uint64_t)"lightmapTexcoord", 0, 0, 16);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, v10 & 0x7FFFFFFFFFFFFFFFLL, *((uint64_t *)&v14[1] + 1), v15, 6);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x30989BAE345, *(uint64_t *)((char *)&v15 + 4), SWORD6(v15), 7);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x5E27ADA1858CLL, *(uint64_t *)&v16[0], SWORD4(v16[0]), 8);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x5E27ADA1858DLL, *(uint64_t *)((char *)v16 + 12), SWORD2(v16[1]), 9);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x5E27ADA1858ELL, *((uint64_t *)&v16[1] + 1), v17, 10);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x5E27ADA1858FLL, *(uint64_t *)((char *)&v17 + 4), SWORD6(v17), 11);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x5E27ADA18590, *(uint64_t *)&v18[0], SWORD4(v18[0]), 12);
  re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x5E27ADA18591, *(uint64_t *)((char *)v18 + 12), SWORD2(v18[1]), 13);
  return re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(v8, a3, a2, 0x5E27ADA18592, *((uint64_t *)&v18[1] + 1), v19, 14);
}

unint64_t re::createVertexFetchFunctionKey@<X0>(re *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t result;
  int v22;

  *(_QWORD *)a2 = re::createKeyDesc(this, 0x2B3FAC222C23CAEDLL);
  *(_DWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 12) = re::createKeyDesc(this, 0x16172F2CA64F41FLL);
  *(_DWORD *)(a2 + 20) = v6;
  *(_QWORD *)(a2 + 24) = re::createKeyDesc(this, 0x2ACCEB6695018FABLL);
  *(_DWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 36) = re::createKeyDesc(this, 0x2ED0816D3076E801);
  *(_DWORD *)(a2 + 44) = v8;
  *(_QWORD *)(a2 + 48) = re::createKeyDesc(this, 0x3CB5CD20F43A4EDALL);
  *(_DWORD *)(a2 + 56) = v9;
  v10 = re::internal::compileTimeHornerHash<26ul>(0, 0, 25);
  *(_QWORD *)(a2 + 60) = re::createKeyDesc(this, v10 & 0x7FFFFFFFFFFFFFFFLL);
  *(_DWORD *)(a2 + 68) = v11;
  v12 = re::internal::compileTimeHornerHash<17ul>(31, (uint64_t)"lightmapTexcoord", 0, 0, 16);
  *(_QWORD *)(a2 + 72) = re::createKeyDesc(this, v12 & 0x7FFFFFFFFFFFFFFFLL);
  *(_DWORD *)(a2 + 80) = v13;
  *(_QWORD *)(a2 + 84) = re::createKeyDesc(this, 0x30989BAE345);
  *(_DWORD *)(a2 + 92) = v14;
  *(_QWORD *)(a2 + 96) = re::createKeyDesc(this, 0x5E27ADA1858CLL);
  *(_DWORD *)(a2 + 104) = v15;
  *(_QWORD *)(a2 + 108) = re::createKeyDesc(this, 0x5E27ADA1858DLL);
  *(_DWORD *)(a2 + 116) = v16;
  *(_QWORD *)(a2 + 120) = re::createKeyDesc(this, 0x5E27ADA1858ELL);
  *(_DWORD *)(a2 + 128) = v17;
  *(_QWORD *)(a2 + 132) = re::createKeyDesc(this, 0x5E27ADA1858FLL);
  *(_DWORD *)(a2 + 140) = v18;
  *(_QWORD *)(a2 + 144) = re::createKeyDesc(this, 0x5E27ADA18590);
  *(_DWORD *)(a2 + 152) = v19;
  *(_QWORD *)(a2 + 156) = re::createKeyDesc(this, 0x5E27ADA18591);
  *(_DWORD *)(a2 + 164) = v20;
  result = re::createKeyDesc(this, 0x5E27ADA18592);
  *(_QWORD *)(a2 + 168) = result;
  *(_DWORD *)(a2 + 176) = v22;
  return result;
}

char *re::fillArgBufferForSemantic<re::mtl::RenderCommandEncoder>(char *result, re::AttributeTable *a2, id *a3, uint64_t a4, uint64_t a5, __int16 a6, int a7)
{
  char *v8;
  re::AttributeTable *v11;
  re::AttributeTable *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v8 = result;
  if ((a6 & 0xFF00) == 0)
  {
    v15 = 0;
LABEL_11:
    *(_QWORD *)&v8[8 * a7] = v15;
    return result;
  }
  v11 = a2;
  do
  {
    v12 = v11;
    v11 = (re::AttributeTable *)*((_QWORD *)v11 + 1);
  }
  while (v11 && !*((_QWORD *)v12 + 9));
  v19 = a4 & 0x7FFFFFFFFFFFFFFFLL;
  v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v12 + 6, &v19);
  if (v13 == -1)
    v14 = 0;
  else
    v14 = *(unsigned __int8 *)(*((_QWORD *)v12 + 7) + 16 * v13 + 8);
  v16 = re::AttributeTable::buffers(a2);
  if (v17 > v14)
  {
    v18 = (_QWORD *)(v16 + 16 * v14);
    objc_msgSend(*a3, sel_useResource_usage_stages_, *v18, 1, 1);
    result = (char *)objc_msgSend((id)*v18, sel_gpuAddress);
    v15 = &result[*((unsigned int *)v18 + 2)];
    goto LABEL_11;
  }
  re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v17);
  result = (char *)_os_crash();
  __break(1u);
  return result;
}

char *re::createVertexFetchArgumentBuffer<re::mtl::ComputeCommandEncoder>@<X0>(id *a1@<X0>, id *a2@<X1>, re *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD v12[2];
  __int128 v13;
  _OWORD v14[2];
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  _OWORD v18[2];
  int v19;

  v7 = objc_msgSend(*a1, sel_newBufferWithLength_options_, 120, 0);
  *a4 = v7;
  v8 = (char *)objc_msgSend(v7, sel_contents);
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0u;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  memset(v14, 0, sizeof(v14));
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  re::createVertexFetchFunctionKey(a3, (uint64_t)v12);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x2B3FAC222C23CAEDLL, *(uint64_t *)&v12[0], SWORD4(v12[0]), 0);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x16172F2CA64F41FLL, *(uint64_t *)((char *)v12 + 12), SWORD2(v12[1]), 1);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x2ACCEB6695018FABLL, *((uint64_t *)&v12[1] + 1), v13, 2);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x2ED0816D3076E801, *(uint64_t *)((char *)&v13 + 4), SWORD6(v13), 3);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x3CB5CD20F43A4EDALL, *(uint64_t *)&v14[0], SWORD4(v14[0]), 4);
  v9 = re::internal::compileTimeHornerHash<26ul>(0, 0, 25);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, v9 & 0x7FFFFFFFFFFFFFFFLL, *(uint64_t *)((char *)v14 + 12), SWORD2(v14[1]), 5);
  v10 = re::internal::compileTimeHornerHash<17ul>(31, (uint64_t)"lightmapTexcoord", 0, 0, 16);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, v10 & 0x7FFFFFFFFFFFFFFFLL, *((uint64_t *)&v14[1] + 1), v15, 6);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x30989BAE345, *(uint64_t *)((char *)&v15 + 4), SWORD6(v15), 7);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x5E27ADA1858CLL, *(uint64_t *)&v16[0], SWORD4(v16[0]), 8);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x5E27ADA1858DLL, *(uint64_t *)((char *)v16 + 12), SWORD2(v16[1]), 9);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x5E27ADA1858ELL, *((uint64_t *)&v16[1] + 1), v17, 10);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x5E27ADA1858FLL, *(uint64_t *)((char *)&v17 + 4), SWORD6(v17), 11);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x5E27ADA18590, *(uint64_t *)&v18[0], SWORD4(v18[0]), 12);
  re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x5E27ADA18591, *(uint64_t *)((char *)v18 + 12), SWORD2(v18[1]), 13);
  return re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(v8, a3, a2, 0x5E27ADA18592, *((uint64_t *)&v18[1] + 1), v19, 14);
}

char *re::fillArgBufferForSemantic<re::mtl::ComputeCommandEncoder>(char *result, re::AttributeTable *a2, id *a3, uint64_t a4, uint64_t a5, __int16 a6, int a7)
{
  char *v8;
  re::AttributeTable *v11;
  re::AttributeTable *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v8 = result;
  if ((a6 & 0xFF00) == 0)
  {
    v15 = 0;
LABEL_11:
    *(_QWORD *)&v8[8 * a7] = v15;
    return result;
  }
  v11 = a2;
  do
  {
    v12 = v11;
    v11 = (re::AttributeTable *)*((_QWORD *)v11 + 1);
  }
  while (v11 && !*((_QWORD *)v12 + 9));
  v19 = a4 & 0x7FFFFFFFFFFFFFFFLL;
  v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v12 + 6, &v19);
  if (v13 == -1)
    v14 = 0;
  else
    v14 = *(unsigned __int8 *)(*((_QWORD *)v12 + 7) + 16 * v13 + 8);
  v16 = re::AttributeTable::buffers(a2);
  if (v17 > v14)
  {
    v18 = (_QWORD *)(v16 + 16 * v14);
    objc_msgSend(*a3, "useResource:usage:", *v18, 1);
    result = (char *)objc_msgSend((id)*v18, sel_gpuAddress);
    v15 = &result[*((unsigned int *)v18 + 2)];
    goto LABEL_11;
  }
  re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v17);
  result = (char *)_os_crash();
  __break(1u);
  return result;
}

unint64_t re::createKeyDesc(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  _OWORD v12[5];
  uint64_t v13;

  v2 = a1;
  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  do
  {
    v4 = v3;
    v3 = (_QWORD *)v3[1];
  }
  while (v3 && !v4[9]);
  *(_QWORD *)&v12[0] = a2 & 0x7FFFFFFFFFFFFFFFLL;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v4 + 6, v12);
  if (v5 == -1)
    return 0;
  v6 = (unsigned __int8 *)(v4[7] + 16 * v5 + 8);
  do
  {
    v7 = v2;
    v2 = (_QWORD *)v2[1];
    v8 = v7[4];
    if (v2)
      v9 = v8 == 0;
    else
      v9 = 0;
  }
  while (v9);
  v10 = *v6;
  if (v8 <= v10)
  {
    memset(v12, 0, sizeof(v12));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(v7[5] + 16 * v10 + 8) | ((unint64_t)*(unsigned __int16 *)(v7[5] + 16 * v10) << 32);
}

id re::fillConstantsForAttribute(id *a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  __int128 v7;

  HIDWORD(v7) = a3;
  LODWORD(v7) = HIBYTE(a3);
  *(_QWORD *)((char *)&v7 + 4) = a2;
  objc_msgSend(*a1, sel_setConstantValue_type_atIndex_, (char *)&v7 + 12, 33, a4, v7);
  objc_msgSend(*a1, sel_setConstantValue_type_atIndex_, (char *)&v7 + 8, 33, a4 + 1);
  objc_msgSend(*a1, sel_setConstantValue_type_atIndex_, (char *)&v7 + 4, 33, a4 + 2);
  return objc_msgSend(*a1, sel_setConstantValue_type_atIndex_, &v7, 33, a4 + 3);
}

void re::getOrCreateVertexFetchFunction(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  ArcSharedObject *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  id v28;
  _anonymous_namespace_ *v29;
  uint64_t v30;
  id v31;
  id v32;
  re *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  id v59;
  _BYTE v60[24];
  id *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  id v66;
  _BYTE v67[24];
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v12 = re::Hash<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)v60, a3);
  if (!*(_QWORD *)(a1 + 136)
    || (v13 = *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * (v12 % *(unsigned int *)(a1 + 160))),
        (_DWORD)v13 == 0x7FFFFFFF))
  {
LABEL_6:
    v15 = re::globalAllocators((re *)v12);
    v16 = (ArcSharedObject *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 208, 8);
    *(_OWORD *)v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    *((_OWORD *)v16 + 2) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 8) = 0u;
    *((_OWORD *)v16 + 9) = 0u;
    *((_OWORD *)v16 + 10) = 0u;
    *((_OWORD *)v16 + 11) = 0u;
    *((_OWORD *)v16 + 12) = 0u;
    ArcSharedObject::ArcSharedObject(v16, 0);
    *(_QWORD *)v17 = &off_24ED7ABE8;
    *(_QWORD *)(v17 + 16) = 0;
    *a6 = v17;
    atomic_store(1u, (unsigned __int8 *)(v17 + 204));
    v18 = *(_OWORD *)a3;
    v19 = *(_OWORD *)(a3 + 16);
    v20 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v17 + 72) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v17 + 56) = v20;
    *(_OWORD *)(v17 + 40) = v19;
    *(_OWORD *)(v17 + 24) = v18;
    v21 = *(_OWORD *)(a3 + 64);
    v22 = *(_OWORD *)(a3 + 80);
    v23 = *(_OWORD *)(a3 + 96);
    *(_OWORD *)(v17 + 136) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(v17 + 120) = v23;
    *(_OWORD *)(v17 + 104) = v22;
    *(_OWORD *)(v17 + 88) = v21;
    v24 = *(_OWORD *)(a3 + 128);
    v25 = *(_OWORD *)(a3 + 144);
    v26 = *(_OWORD *)(a3 + 160);
    *(_DWORD *)(v17 + 200) = *(_DWORD *)(a3 + 176);
    *(_OWORD *)(v17 + 184) = v26;
    *(_OWORD *)(v17 + 168) = v25;
    *(_OWORD *)(v17 + 152) = v24;
    v27 = a2[31];
    re::ShaderManager::makeFunctionDescriptor((re::ShaderManager *)a2, &v66);
    objc_msgSend(v66, sel_setName_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "re::vertexfetch::fetchStandardVertexInAttributes", 4));
    v28 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
    *(_QWORD *)v60 = v28;
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)a3, *(_DWORD *)(a3 + 8), 0);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 12), *(_DWORD *)(a3 + 20), 4u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 24), *(_DWORD *)(a3 + 32), 8u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 36), *(_DWORD *)(a3 + 44), 0xCu);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 48), *(_DWORD *)(a3 + 56), 0x10u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 60), *(_DWORD *)(a3 + 68), 0x14u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 72), *(_DWORD *)(a3 + 80), 0x18u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 84), *(_DWORD *)(a3 + 92), 0x1Cu);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 96), *(_DWORD *)(a3 + 104), 0x20u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 108), *(_DWORD *)(a3 + 116), 0x24u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 120), *(_DWORD *)(a3 + 128), 0x28u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 132), *(_DWORD *)(a3 + 140), 0x2Cu);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 144), *(_DWORD *)(a3 + 152), 0x30u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 156), *(_DWORD *)(a3 + 164), 0x34u);
    re::fillConstantsForAttribute((id *)v60, *(_QWORD *)(a3 + 168), *(_DWORD *)(a3 + 176), 0x38u);
    objc_msgSend(v66, sel_setConstantValues_, v28);
    v29 = (_anonymous_namespace_ *)objc_msgSend(v66, sel_setOptions_, 1);
    if (v28)

    v30 = *a6;
    *(_QWORD *)v60 = v30;
    if (v30)
      v31 = (id)(v30 + 8);
    v32 = v27;
    *(_QWORD *)&v60[8] = v32;
    *(_QWORD *)&v60[16] = v66;
    v61 = a2;
    v33 = re::DynamicString::DynamicString((re::DynamicString *)&v62, (const re::DynamicString *)&v64);
    v68 = re::globalAllocators(v33)[2];
    v34 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 72, 0);
    *(_QWORD *)v34 = off_24ED7AB90;
    *(_QWORD *)(v34 + 8) = *(_QWORD *)v60;
    v35 = *(_OWORD *)&v60[8];
    *(_OWORD *)v60 = 0u;
    *(_OWORD *)(v34 + 16) = v35;
    *(_QWORD *)(v34 + 32) = v61;
    *(_OWORD *)(v34 + 56) = 0u;
    *(_QWORD *)(v34 + 40) = v62;
    *(_QWORD *)(v34 + 48) = 0;
    *(_QWORD *)&v60[16] = 0;
    v36 = *((_QWORD *)&v62 + 1);
    *(_OWORD *)(v34 + 56) = v63;
    v63 = 0uLL;
    v37 = *(_QWORD *)(v34 + 48);
    *(_QWORD *)(v34 + 48) = v36;
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = v37;
    v69 = (_BYTE *)v34;
    re::ShaderManager::scheduleAsyncFuncOnCompilationQueue((uint64_t)a2, 1, a5, (uint64_t)v67);
    if (v69)
    {
      (**(void (***)(_BYTE *))v69)(v69);
      if (v69 != v67)
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
      v69 = 0;
    }
    if ((_QWORD)v62)
    {
      if ((BYTE8(v62) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v62 + 40))();
      v62 = 0u;
      v63 = 0u;
    }
    if (*(_QWORD *)&v60[16])
    {

      *(_QWORD *)&v60[16] = 0;
    }

    if (*(_QWORD *)v60)
    v38 = re::Hash<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)v60, a3);
    v39 = v38;
    if (*(_QWORD *)(a1 + 136))
    {
      v40 = v38 % *(unsigned int *)(a1 + 160);
      v41 = *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * v40);
      if ((_DWORD)v41 != 0x7FFFFFFF)
      {
        v42 = *(_QWORD *)(a1 + 152);
        while (!re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)v60, v42 + 200 * v41 + 12, a3))
        {
          v42 = *(_QWORD *)(a1 + 152);
          v41 = *(_DWORD *)(v42 + 200 * v41 + 8) & 0x7FFFFFFF;
          if (v41 == 0x7FFFFFFF)
            goto LABEL_29;
        }
        goto LABEL_37;
      }
    }
    else
    {
      LODWORD(v40) = 0;
    }
LABEL_29:
    v43 = *(_DWORD *)(a1 + 172);
    if (v43 == 0x7FFFFFFF)
    {
      v43 = *(_DWORD *)(a1 + 168);
      v44 = v43;
      if (v43 == *(_DWORD *)(a1 + 160))
      {
        re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchFunction>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::setCapacity(a1 + 136, 2 * *(_DWORD *)(a1 + 164));
        LODWORD(v40) = v39 % *(unsigned int *)(a1 + 160);
        v44 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a1 + 168) = v44 + 1;
      v45 = *(_QWORD *)(a1 + 152);
      v46 = *(_DWORD *)(v45 + 200 * v43 + 8);
    }
    else
    {
      v45 = *(_QWORD *)(a1 + 152);
      v46 = *(_DWORD *)(v45 + 200 * v43 + 8);
      *(_DWORD *)(a1 + 172) = v46 & 0x7FFFFFFF;
    }
    v47 = 200 * v43;
    *(_DWORD *)(v45 + v47 + 8) = v46 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 152) + v47 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 152) + v47 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v40);
    *(_QWORD *)(*(_QWORD *)(a1 + 152) + v47) = v39;
    v48 = *(_QWORD *)(a1 + 152) + v47;
    v50 = *(_OWORD *)a3;
    v49 = *(_OWORD *)(a3 + 16);
    v51 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v48 + 44) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v48 + 60) = v51;
    v53 = *(_OWORD *)(a3 + 96);
    v52 = *(_OWORD *)(a3 + 112);
    v54 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v48 + 76) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v48 + 92) = v54;
    *(_OWORD *)(v48 + 108) = v53;
    *(_OWORD *)(v48 + 124) = v52;
    v55 = *(_DWORD *)(a3 + 176);
    v57 = *(_OWORD *)(a3 + 144);
    v56 = *(_OWORD *)(a3 + 160);
    *(_OWORD *)(v48 + 140) = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(v48 + 156) = v57;
    *(_OWORD *)(v48 + 172) = v56;
    *(_DWORD *)(v48 + 188) = v55;
    *(_OWORD *)(v48 + 12) = v50;
    *(_OWORD *)(v48 + 28) = v49;
    v58 = *a6;
    *(_QWORD *)(*(_QWORD *)(a1 + 152) + v47 + 192) = *a6;
    if (v58)
      v59 = (id)(v58 + 8);
    *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v40) = v43;
    ++*(_DWORD *)(a1 + 164);
    ++*(_DWORD *)(a1 + 176);
LABEL_37:
    if (v64 && (v65 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v64 + 40))();
    if (v66)

    return;
  }
  v14 = *(_QWORD *)(a1 + 152);
  while (1)
  {
    v12 = re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)v60, v14 + 200 * v13 + 12, a3);
    v14 = *(_QWORD *)(a1 + 152);
    if ((v12 & 1) != 0)
      break;
    v13 = *(_DWORD *)(v14 + 200 * v13 + 8) & 0x7FFFFFFF;
    if (v13 == 0x7FFFFFFF)
      goto LABEL_6;
  }
  *a6 = 0;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a6, *(_QWORD *)(v14 + 200 * v13 + 192));
}

void re::createVertexFetchComputePipeline(id *this@<X0>, re::CachedVertexFetchFunction *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  _anonymous_namespace_ *v25;
  id *ComputePipelineState;
  re *v27;
  NSObject *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35[2];
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  _QWORD v43[4];
  _QWORD v44[3];
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v8 = re::globalAllocators((re *)this);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 40, 8);
  *(_OWORD *)v9 = 0u;
  *(_QWORD *)(v9 + 32) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v9, 0);
  *v10 = &off_24ED7AC48;
  v10[3] = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *a3 = v10;
  v34 = this[2];
  v11 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, &v34, 1);
  LOBYTE(v41) = 0;
  v46 = 0;
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  v47 = 16843009;
  v48 = 0;
  v49 = 1;
  if (*((_BYTE *)this + 33))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v13 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 53;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 45))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v14 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 65589;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 57))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 131125;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 69))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v16 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 196661;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 81))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v17 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 262197;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 117))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v18 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 327733;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 129))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v19 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 393269;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 141))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v20 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 458805;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 153))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v21 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 524341;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 165))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v22 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 589877;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 177))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v23 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 655413;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 189))
  {
    v35[1] = 0;
    v36 = 0uLL;
    v24 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 720949;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    v12 = (_anonymous_namespace_ *)v35[0];
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  if (*((_BYTE *)this + 201))
  {
    v35[1] = 0;
    v36 = 0uLL;
    v25 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v35, 1);
    v37 = 786485;
    re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v44, (re::DynamicString *)v35);
    if (v38)
    {
      if (v39)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v39 = 0;
        v40 = 0;
      }
      v38 = 0;
    }
    if (v35[0] && ((uint64_t)v35[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v35[0] + 40))();
  }
  ComputePipelineState = (id *)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)&v41);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v44);
  if (v43[0])
  {
    if ((v43[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v43[0] + 40))();
    memset(v43, 0, sizeof(v43));
  }
  if ((_BYTE)v41 && *((_QWORD *)&v41 + 1) && (v42 & 1) != 0)
    (*(void (**)(void))(**((_QWORD **)&v41 + 1) + 40))();
  v35[0] = 0;
  v33 = objc_msgSend(*ComputePipelineState, sel_newComputePipelineStateWithAdditionalBinaryFunctions_error_, v11, v35);
  v27 = (re *)objc_msgSend(v33, sel_threadExecutionWidth);
  *(_DWORD *)(v9 + 32) = (_DWORD)v27;
  if (v35[0])
  {
    v28 = *re::graphicsLogObjects(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v32 = objc_msgSend(objc_msgSend(v35[0], sel_localizedDescription), sel_cStringUsingEncoding_, 4);
      LODWORD(v41) = 136315138;
      *(_QWORD *)((char *)&v41 + 4) = v32;
      _os_log_error_impl(&dword_224FE9000, v28, OS_LOG_TYPE_ERROR, "Failed to create manual vertex fetch compute pipeline. %s", (uint8_t *)&v41, 0xCu);
    }
  }
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v9 + 16), &v33);
  v29 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD778], sel_alloc), sel_init);
  objc_msgSend(v29, sel_setFunctionCount_, 1);
  v30 = objc_msgSend(v33, sel_newVisibleFunctionTableWithDescriptor_, v29);
  *(_QWORD *)&v41 = v30;
  v31 = objc_msgSend(v33, sel_functionHandleWithFunction_, this[2]);
  objc_msgSend(v30, sel_setFunction_atIndex_, v31, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v9 + 24), (void **)&v41);
  if (v31)

  if ((_QWORD)v41)
  if (v29)

  if (v33)
  if (v11)

  if (v34)
}

uint64_t re::internal::compileTimeHornerHash<26ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      v5 = 961 * a1 - aVertdistanceto[a2] + 32 * aVertdistanceto[a2];
      v3 = a2 + 1;
      return v5 + aVertdistanceto[v3];
    case 3:
      v5 = 29791 * a1 + 961 * aVertdistanceto[a2] - aVertdistanceto[a2 + 1] + 32 * aVertdistanceto[a2 + 1];
      v3 = a2 + 2;
      return v5 + aVertdistanceto[v3];
    case 4:
      v5 = 923521 * a1
         + 29791 * aVertdistanceto[a2]
         + 961 * aVertdistanceto[a2 + 1]
         - aVertdistanceto[a2 + 2]
         + 32 * aVertdistanceto[a2 + 2];
      v3 = a2 + 3;
      return v5 + aVertdistanceto[v3];
    case 5:
      v5 = 28629151 * a1
         + 923521 * aVertdistanceto[a2]
         + 29791 * aVertdistanceto[a2 + 1]
         + 961 * aVertdistanceto[a2 + 2]
         - aVertdistanceto[a2 + 3]
         + 32 * aVertdistanceto[a2 + 3];
      v3 = a2 + 4;
      return v5 + aVertdistanceto[v3];
    case 6:
      v5 = 887503681 * a1
         + 28629151 * aVertdistanceto[a2]
         + 923521 * aVertdistanceto[a2 + 1]
         + 29791 * aVertdistanceto[a2 + 2]
         + 961 * aVertdistanceto[a2 + 3]
         - aVertdistanceto[a2 + 4]
         + 32 * aVertdistanceto[a2 + 4];
      v3 = a2 + 5;
      return v5 + aVertdistanceto[v3];
    case 7:
      v5 = 0x667E12CDFLL * a1
         + 887503681 * aVertdistanceto[a2]
         + 28629151 * aVertdistanceto[a2 + 1]
         + 923521 * aVertdistanceto[a2 + 2]
         + 29791 * aVertdistanceto[a2 + 3]
         + 961 * aVertdistanceto[a2 + 4]
         - aVertdistanceto[a2 + 5]
         + 32 * aVertdistanceto[a2 + 5];
      v3 = a2 + 6;
      return v5 + aVertdistanceto[v3];
    case 8:
      v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aVertdistanceto[a2]
         + 887503681 * aVertdistanceto[a2 + 1]
         + 28629151 * aVertdistanceto[a2 + 2]
         + 923521 * aVertdistanceto[a2 + 3]
         + 29791 * aVertdistanceto[a2 + 4]
         + 961 * aVertdistanceto[a2 + 5]
         - aVertdistanceto[a2 + 6]
         + 32 * aVertdistanceto[a2 + 6];
      v3 = a2 + 7;
      return v5 + aVertdistanceto[v3];
    case 9:
      v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aVertdistanceto[a2]
         + 0x667E12CDFLL * aVertdistanceto[a2 + 1]
         + 887503681 * aVertdistanceto[a2 + 2]
         + 28629151 * aVertdistanceto[a2 + 3]
         + 923521 * aVertdistanceto[a2 + 4]
         + 29791 * aVertdistanceto[a2 + 5]
         + 961 * aVertdistanceto[a2 + 6]
         - aVertdistanceto[a2 + 7]
         + 32 * aVertdistanceto[a2 + 7];
      v3 = a2 + 8;
      return v5 + aVertdistanceto[v3];
    case 10:
      v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aVertdistanceto[a2]
         + 0xC694446F01 * aVertdistanceto[a2 + 1]
         + 0x667E12CDFLL * aVertdistanceto[a2 + 2]
         + 887503681 * aVertdistanceto[a2 + 3]
         + 28629151 * aVertdistanceto[a2 + 4]
         + 923521 * aVertdistanceto[a2 + 5]
         + 29791 * aVertdistanceto[a2 + 6]
         + 961 * aVertdistanceto[a2 + 7]
         - aVertdistanceto[a2 + 8]
         + 32 * aVertdistanceto[a2 + 8];
      v3 = a2 + 9;
      return v5 + aVertdistanceto[v3];
    default:
      v7 = a2 + (v4 >> 1);
      v8 = re::internal::compileTimeHornerHash<26ul>(a1, a2, v7 - 1);
      v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<26ul>(aVertdistanceto[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      v5 = 31 * a1;
      return v5 + aVertdistanceto[v3];
  }
}

double re::internal::Callable<re::getOrCreateVertexFetchFunction(re::MeshManager *,re::ShaderManager *,re::CachedStandardVertexFetchFunctionKey const&,char const*,unsigned long long)::$_0,void ()(void)>::Callable(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  *(_QWORD *)a1 = off_24ED7AB90;
  *(_QWORD *)(a1 + 8) = v2;
  v3 = *(_OWORD *)(a2 + 1);
  *a2 = 0;
  a2[1] = 0;
  *(_OWORD *)(a1 + 16) = v3;
  a2[2] = 0;
  *(_QWORD *)(a1 + 32) = a2[3];
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 64) = a2[7];
  v5 = a2[5];
  *(_QWORD *)(a1 + 40) = a2[4];
  a2[4] = 0;
  v6 = a2[6];
  a2[7] = 0;
  v8 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  a2[5] = v8;
  a2[6] = v7;
  return result;
}

uint64_t re::internal::Callable<re::getOrCreateVertexFetchFunction(re::MeshManager *,re::ShaderManager *,re::CachedStandardVertexFetchFunctionKey const&,char const*,unsigned long long)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED7AB90;
  v3 = (_OWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {

    *(_QWORD *)(a1 + 24) = 0;
  }

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void re::internal::Callable<re::getOrCreateVertexFetchFunction(re::MeshManager *,re::ShaderManager *,re::CachedStandardVertexFetchFunctionKey const&,char const*,unsigned long long)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24ED7AB90;
  v3 = (_OWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {

    *(_QWORD *)(a1 + 24) = 0;
  }

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::getOrCreateVertexFetchFunction(re::MeshManager *,re::ShaderManager *,re::CachedStandardVertexFetchFunctionKey const&,char const*,unsigned long long)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  id v13;
  _BYTE info[12];
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = mach_absolute_time();
  re::mtl::Library::makeFunctionWithDescriptor((id *)(a1 + 16), *(void **)(a1 + 24), &v13);
  v3 = mach_absolute_time();
  v4 = v3;
  v5 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    v3 = mach_timebase_info((mach_timebase_info_t)info);
    if ((_DWORD)v3)
    {
      v8 = NAN;
      goto LABEL_6;
    }
    LODWORD(v6) = *(_DWORD *)info;
    LODWORD(v7) = *(_DWORD *)&info[4];
    v5 = (double)v6 / (double)v7;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v5;
  }
  v8 = v5 * (double)(v4 - v2);
LABEL_6:
  v9 = *re::graphicsLogObjects((re *)v3);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if ((*(_QWORD *)(a1 + 48) & 1) != 0)
      v10 = *(_QWORD *)(a1 + 56);
    else
      v10 = a1 + 49;
    *(_DWORD *)info = 136315394;
    *(_QWORD *)&info[4] = v10;
    v15 = 1024;
    v16 = (int)(v8 / 1000000.0);
    _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Manual vertex fetch function compilation completed for %s in %d", info, 0x12u);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v11 + 16), &v13);
    v12 = 0;
    v11 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v12 = 2;
  }
  atomic_store(v12, (unsigned __int8 *)(v11 + 204));
  MEMORY[0x227693220](*(_QWORD *)(a1 + 8) + 204);
  if (v13)

}

_QWORD *re::internal::Callable<re::getOrCreateVertexFetchFunction(re::MeshManager *,re::ShaderManager *,re::CachedStandardVertexFetchFunctionKey const&,char const*,unsigned long long)::$_0,void ()(void)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  *a2 = off_24ED7AB90;
  a2[1] = v4;
  if (v4)
    v5 = (id)(v4 + 8);
  a2[2] = *(id *)(a1 + 16);
  v6 = *(id *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  a2[3] = v6;
  a2[4] = v7;
  re::DynamicString::DynamicString((re::DynamicString *)(a2 + 5), (const re::DynamicString *)(a1 + 40));
  return a2;
}

double re::internal::Callable<re::getOrCreateVertexFetchFunction(re::MeshManager *,re::ShaderManager *,re::CachedStandardVertexFetchFunctionKey const&,char const*,unsigned long long)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  return re::internal::Callable<re::getOrCreateVertexFetchFunction(re::MeshManager *,re::ShaderManager *,re::CachedStandardVertexFetchFunctionKey const&,char const*,unsigned long long)::$_0,void ()(void)>::Callable(a2, (uint64_t *)(a1 + 8));
}

uint64_t re::internal::Callable<re::getOrCreateVertexFetchFunction(re::MeshManager *,re::ShaderManager *,re::CachedStandardVertexFetchFunctionKey const&,char const*,unsigned long long)::$_0,void ()(void)>::size()
{
  return 72;
}

void re::CachedVertexFetchFunction::~CachedVertexFetchFunction(re::CachedVertexFetchFunction *this)
{
  void *v2;

  *(_QWORD *)this = &off_24ED7ABE8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {

    *((_QWORD *)this + 2) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;

  *(_QWORD *)this = &off_24ED7ABE8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {

    *((_QWORD *)this + 2) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SharedPersistentObject<re::CachedVertexFetchFunction>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

void re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchFunction>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  signed int v33;
  _BYTE v34[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v34, 0, 36);
      *(_QWORD *)&v34[36] = 0x7FFFFFFFLL;
      re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchFunction>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init((uint64_t)v34, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v34;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v34[8];
      *(_OWORD *)v34 = v5;
      *(_QWORD *)&v34[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v34[24];
      *(_OWORD *)&v34[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v34[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 192);
        do
        {
          if ((*(_DWORD *)(v14 - 23) & 0x80000000) != 0)
          {
            v15 = *(v14 - 24);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(_DWORD *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              v18 = *(_DWORD *)(a1 + 32);
              v19 = v18;
              if (v18 == (_DWORD)v16)
              {
                re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchFunction>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 200 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 200 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 200 * v18 + 8) = v21 | 0x80000000;
            v22 = *(_QWORD *)(a1 + 16) + 200 * v18;
            *(_DWORD *)(v22 + 8) = *(_DWORD *)(v22 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 200 * v18) = v15;
            v23 = *(_QWORD *)(a1 + 16) + 200 * v18;
            v24 = *(_OWORD *)((char *)v14 - 180);
            v25 = *(_OWORD *)((char *)v14 - 164);
            v26 = *(_OWORD *)((char *)v14 - 148);
            *(_OWORD *)(v23 + 60) = *(_OWORD *)((char *)v14 - 132);
            *(_OWORD *)(v23 + 44) = v26;
            *(_OWORD *)(v23 + 28) = v25;
            *(_OWORD *)(v23 + 12) = v24;
            v27 = *(_OWORD *)((char *)v14 - 116);
            v28 = *(_OWORD *)((char *)v14 - 100);
            v29 = *(_OWORD *)((char *)v14 - 84);
            *(_OWORD *)(v23 + 124) = *(_OWORD *)((char *)v14 - 68);
            *(_OWORD *)(v23 + 108) = v29;
            *(_OWORD *)(v23 + 92) = v28;
            *(_OWORD *)(v23 + 76) = v27;
            v30 = *(_OWORD *)((char *)v14 - 52);
            v31 = *(_OWORD *)((char *)v14 - 36);
            v32 = *(_OWORD *)((char *)v14 - 20);
            *(_DWORD *)(v23 + 188) = *((_DWORD *)v14 - 1);
            *(_OWORD *)(v23 + 172) = v32;
            *(_OWORD *)(v23 + 156) = v31;
            *(_OWORD *)(v23 + 140) = v30;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 200 * v18 + 192) = *v14;
            *v14 = 0;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 25;
        }
        while (v11 < v10);
      }
      re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit((uint64_t *)v34);
    }
  }
  else
  {
    if (a2)
      v33 = a2;
    else
      v33 = 3;
  }
}

void re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchFunction>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 200 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::VertexFetchComputePipeline::~VertexFetchComputePipeline(re::VertexFetchComputePipeline *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED7AC48;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {

    *((_QWORD *)this + 2) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED7AC48;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {

    *((_QWORD *)this + 2) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SharedPersistentObject<re::VertexFetchComputePipeline>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

re::JiggleDeformerModelBuilder *re::JiggleDeformerModelBuilder::JiggleDeformerModelBuilder(re::JiggleDeformerModelBuilder *this, re::Allocator *a2, unsigned int a3, unsigned int a4, DeformationModelData *a5)
{
  _QWORD *v9;

  *(_QWORD *)this = a5;
  v9 = (_QWORD *)re::DeformationModelData::create<re::JiggleDeformer,re::JiggleDeformerModel>((uint64_t)a5, (uint64_t)a2);
  re::FixedArray<re::StringID>::init<>(v9, (uint64_t)a2, a4);
  re::FixedArray<re::StringID>::init<>(v9 + 3, (uint64_t)a2, a4);
  re::FixedArray<int>::init<>(v9 + 6, (uint64_t)a2, a4);
  re::FixedArray<int>::init<>(v9 + 9, (uint64_t)a2, a4);
  re::FixedArray<unsigned short>::init<unsigned short const&>(v9 + 12, (uint64_t)a2, a3, &re::JiggleDeformerModel::kInvalidIndex);
  return this;
}

uint64_t re::DeformationModelData::create<re::JiggleDeformer,re::JiggleDeformerModel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 120, 8);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_QWORD *)(v4 + 112) = 0;
  v8[0] = &off_24ED7AD18;
  v8[1] = a2;
  v9 = v8;
  v10 = 0;
  v11[3] = v11;
  v11[0] = &off_24ED7AD18;
  v11[1] = a2;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(a1 + 680), v4);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(a1 + 688), (uint64_t)v11);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v10);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return *(_QWORD *)(a1 + 680);
}

unint64_t *re::JiggleDeformerModelBuilder::setData(re::JiggleDeformerModelBuilder *this, unsigned int a2, unsigned int a3, const re::StringID *a4, const re::StringID *a5, float a6, float a7)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t *result;

  v7 = *(_QWORD **)(*(_QWORD *)this + 680);
  if (v7[13] <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  *(_WORD *)(v7[14] + 2 * a2) = a3;
  v8 = a3;
  if (v7[1] <= (unint64_t)a3)
  {
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  re::StringID::operator=((unint64_t *)(v7[2] + 16 * a3), (uint64_t *)a4);
  if (v7[4] <= v8)
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  result = re::StringID::operator=((unint64_t *)(v7[5] + 16 * v8), (uint64_t *)a5);
  if (v7[7] <= v8)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(v7[8] + 4 * v8) = a6;
  if (v7[10] <= v8)
    goto LABEL_11;
  *(float *)(v7[11] + 4 * v8) = a7;
  return result;
}

uint64_t re::JiggleDeformer::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  void **ComputePipelineState;
  _BYTE v9[8];
  uint64_t v10;
  char v11;
  _QWORD v12[4];
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;

  if (!*(_BYTE *)(this + 8))
  {
    v3 = this;
    *(_BYTE *)(this + 8) = 1;
    *(_QWORD *)(this + 16) = a2;
    v4 = this + 24;
    v3 += 80;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)v3, 0);
    ++*(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 44) = 64;
    v6 = re::DataArray<unsigned long>::allocBlock((_QWORD *)v3);
    v9[0] = 0;
    v15 = 0;
    memset(v13, 0, sizeof(v13));
    v14 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v9);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 120), ComputePipelineState);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v13);
    this = v12[0];
    if (v12[0])
    {
      if ((v12[1] & 1) != 0)
        this = (*(uint64_t (**)(void))(*(_QWORD *)v12[0] + 40))();
      memset(v12, 0, sizeof(v12));
    }
    if (v9[0])
    {
      this = v10;
      if (v10)
      {
        if ((v11 & 1) != 0)
          return (*(uint64_t (**)(void))(*(_QWORD *)v10 + 40))();
      }
    }
  }
  return this;
}

int64x2_t re::JiggleDeformer::addDeformationInstance@<Q0>(re::JiggleDeformer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  int64x2_t result;
  uint64_t v20;
  __int128 v21;

  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    v6 = *(_QWORD *)re::BucketArray<unsigned long,64ul>::operator[]((uint64_t)this + 24, v5 - 1);
    re::BucketArray<unsigned long,64ul>::operator[]((uint64_t)this + 24, *((_QWORD *)this + 8) - 1);
    --*((_QWORD *)this + 8);
    ++*((_DWORD *)this + 18);
  }
  else
  {
    v6 = *((_QWORD *)this + 23);
    v7 = *((_QWORD *)this + 19);
    if (v6 + 1 > v7 << 6)
    {
      re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::setBucketsCapacity((_QWORD *)this + 18, (v6 + 64) >> 6);
      v7 = *((_QWORD *)this + 19);
    }
    if (v7 <= v6 >> 6)
    {
LABEL_26:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if ((*((_BYTE *)this + 160) & 1) != 0)
      v8 = (char *)this + 168;
    else
      v8 = (char *)*((_QWORD *)this + 22);
    v9 = *(_QWORD *)&v8[8 * (v6 >> 6)];
    ++*((_QWORD *)this + 23);
    ++*((_DWORD *)this + 48);
    v10 = (_QWORD *)(v9 + 16 * (v6 & 0x3F));
    *v10 = 0;
    v10[1] = 0;
  }
  v11 = *((_DWORD *)this + 34);
  if ((v11 + 1) >> 24)
    v12 = 1;
  else
    v12 = v11 + 1;
  *((_DWORD *)this + 34) = v12;
  v13 = *((unsigned __int16 *)this + 66);
  v14 = *((unsigned __int16 *)this + 67);
  if (v13 != 0xFFFF || (_DWORD)v14 != 0xFFFF)
  {
    if (*((_QWORD *)this + 12) > v14)
    {
      v18 = (_QWORD *)(*((_QWORD *)this + 14) + 16 * v14);
      *(_DWORD *)(v18[1] + 4 * v13) = v12;
      v17 = (_DWORD *)(*v18 + 8 * v13);
      *((_DWORD *)this + 33) = *v17;
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  if (*((_DWORD *)this + 32) >= *((_DWORD *)this + 31))
    re::DataArray<unsigned long>::allocBlock((_QWORD *)this + 10);
  v15 = *((_QWORD *)this + 12);
  v14 = (unsigned __int16)(v15 - 1);
  if (!v15)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    v20 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v21) = 136315906;
    *(_QWORD *)((char *)&v21 + 4) = "operator[]";
    WORD6(v21) = 1024;
    HIWORD(v21) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
  v13 = *((unsigned int *)this + 32);
  if (v13 >= 0x10000)
  {
LABEL_25:
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v13, v20, v21);
    _os_crash();
    __break(1u);
    goto LABEL_26;
  }
  v16 = (_QWORD *)(*((_QWORD *)this + 14) + 16 * v14);
  *((_DWORD *)this + 32) = v13 + 1;
  *(_DWORD *)(v16[1] + 4 * v13) = *((_DWORD *)this + 34);
  v17 = (_DWORD *)(*v16 + 8 * v13);
LABEL_22:
  ++*((_DWORD *)this + 30);
  *(_QWORD *)v17 = v6;
  result = vdupq_n_s64(2uLL);
  *(_QWORD *)a3 = (v14 << 16) | ((unint64_t)(*((_DWORD *)this + 34) & 0xFFFFFF) << 32) | v13;
  *(int64x2_t *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

_DWORD *re::JiggleDeformer::removeDeformationInstance(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;

  v4 = a1 + 80;
  v5 = *(_QWORD *)re::DataArray<unsigned long>::get(a1 + 80, a2);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 + 1 > v7 << 6)
  {
    re::BucketArray<unsigned long,64ul>::setBucketsCapacity((uint64_t *)(a1 + 24), (v6 + 64) >> 6);
    v7 = *(_QWORD *)(a1 + 32);
  }
  if (v7 <= v6 >> 6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    v8 = a1 + 48;
  else
    v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(v8 + 8 * (v6 >> 6));
  ++*(_QWORD *)(a1 + 64);
  ++*(_DWORD *)(a1 + 72);
  *(_QWORD *)(v9 + 8 * (v6 & 0x3F)) = v5;
  v10 = (id *)re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::operator[](a1 + 144, v5);

  *v10 = 0;
  v10[1] = 0;
  return re::DataArray<unsigned long>::destroy(v4, a2);
}

uint64_t re::DataArray<unsigned long>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 8 * (unsigned __int16)a2;
}

uint64_t re::JiggleDeformer::allocateBuffers(re *a1, re::FrameContext *a2, unsigned int a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  re::FrameContext *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unint64_t *v29;
  void **v30;
  re::AttributeTable *v31;
  re::AttributeTable *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  size_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v75;
  unint64_t v77;
  uint64_t v78;
  re::AttributeTable *v79;
  int v80;
  __int16 v81;
  int v82;
  char v83;
  _QWORD v84[2];
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  unint64_t v95;
  __int16 v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a5 |= 2uLL;
  *(_BYTE *)(a5 + 9) = 1;
  re::globalAllocators(a1);
  v8 = *((_QWORD *)a2 + 3);
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 24, 8);
  v11 = (void *)*((_QWORD *)a2 + 3);
  v12 = *(_QWORD *)(*a4 + 48);
  v10[1] = v12;
  v10[2] = 0;
  *v10 = v11;
  if (v12)
  {
    if (v12 >= 0x276276276276277)
    {
LABEL_56:
      re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 104, v12);
      _os_crash();
      __break(1u);
LABEL_57:
      re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v11 = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 104 * v12, 8);
    v10[2] = v11;
    if (!v11)
      goto LABEL_57;
    v5 = (unint64_t)v11;
    if (v12 != 1)
    {
      bzero(v11, 104 * v12 - 104);
      v5 += 104 * v12 - 104;
    }
    *(_QWORD *)(v5 + 96) = 0;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
  }
  *((_QWORD *)&v99 + 1) = re::globalAllocators((re *)v11)[2];
  *(_QWORD *)&v100 = &v98;
  *(_QWORD *)&v98 = &off_24ED7ACC0;
  v75 = (*(uint64_t (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v8 + 16))(v8, v10, &v98);
  if ((_QWORD)v100)
  {
    (**(void (***)(_QWORD))v100)(v100);
    if ((__int128 *)v100 != &v98)
      (*(void (**)(_QWORD))(**((_QWORD **)&v99 + 1) + 40))(*((_QWORD *)&v99 + 1));
  }
  v73 = *(_QWORD *)(*a4 + 48);
  if (v73)
  {
    v14 = 0;
    v72 = a4;
    while (1)
    {
      v15 = a2;
      re::DeformationInstanceIterator::Instance::Instance(&v85, a4, v14);
      v16 = v88;
      v17 = re::DeformationInstanceIterator::Instance::meshPart((uint64_t)&v85, *(_QWORD *)(*((_QWORD *)a1 + 2) + 32));
      v18 = re::DeformationVertexBufferState::inputVertexCount(v16, 1u);
      v19 = *(_QWORD **)(*(_QWORD *)(v87 + 344) + 680);
      v20 = *(unsigned __int16 *)(v87 + 392);
      v21 = v19[13];
      if (v21 <= v20)
        break;
      v5 = *(unsigned __int16 *)(v19[14] + 2 * v20);
      v20 = v19[4];
      if (v20 <= v5)
        goto LABEL_50;
      v22 = v18;
      v77 = v14;
      v78 = (uint64_t)v16;
      v23 = 12 * v18;
      re::StringID::StringID((re::StringID *)v84, (const StringID *)(v19[5] + 16 * v5));
      v24 = (_QWORD *)v17;
      do
      {
        v25 = v24;
        v24 = (_QWORD *)v24[1];
      }
      while (v24 && !v25[9]);
      v79 = (re::AttributeTable *)v17;
      *(_QWORD *)&v98 = v84[0] >> 1;
      v26 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v25 + 6, &v98);
      if (v26 == -1)
        v27 = 0;
      else
        v27 = (unsigned __int8 *)(v25[7] + 16 * v26 + 8);
      v28 = re::DeformationInstanceIterator::Instance::handle((re::DeformationInstanceIterator::Instance *)&v85);
      v29 = (unint64_t *)re::DataArray<unsigned long>::get((uint64_t)a1 + 80, v28);
      v30 = (void **)re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::operator[]((uint64_t)a1 + 144, *v29);
      if (!*v30)
      {
        v31 = v79;
        do
        {
          v32 = v31;
          v31 = (re::AttributeTable *)*((_QWORD *)v31 + 1);
        }
        while (v31 && !*((_QWORD *)v32 + 9));
        *(_QWORD *)&v98 = 0x2B3FAC222C23CAEDLL;
        v33 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v32 + 6, &v98);
        if (v33 == -1)
          v34 = 0;
        else
          v34 = (unsigned __int8 *)(*((_QWORD *)v32 + 7) + 16 * v33 + 8);
        v12 = *((_QWORD *)a1 + 2);
        v35 = re::AttributeTable::buffers(v79);
        v37 = *v34;
        if (v36 <= v37)
          goto LABEL_55;
        *(_QWORD *)&v98 = objc_msgSend(*(id *)(v12 + 184), sel_newBufferWithBytes_length_options_, (char *)objc_msgSend(*(id *)(v35 + 16 * v37), sel_contents)+ *(unsigned int *)(v35 + 16 * v37 + 8), v23, 0);
        NS::SharedPtr<MTL::Texture>::operator=(v30, (void **)&v98);
        if ((_QWORD)v98)

      }
      v38 = v30 + 1;
      if (!v30[1])
      {
        *(_QWORD *)&v98 = objc_msgSend(*(id *)(*((_QWORD *)a1 + 2) + 184), sel_newBufferWithLength_options_, v23, 0);
        NS::SharedPtr<MTL::Texture>::operator=(v30 + 1, (void **)&v98);
        if ((_QWORD)v98)

      }
      v20 = v19[7];
      if (v20 <= v5)
        goto LABEL_51;
      v20 = v19[10];
      if (v20 <= v5)
        goto LABEL_52;
      v20 = v86;
      v12 = *(_QWORD *)(v75 + 8);
      if (v12 <= v86)
        goto LABEL_53;
      v39 = *(_DWORD *)(v19[8] + 4 * v5);
      v40 = **(_DWORD **)(*(_QWORD *)(v87 + 352) + 160);
      v41 = *(_DWORD *)(v19[11] + 4 * v5);
      v42 = *(_QWORD *)(v75 + 16);
      v43 = v42 + 104 * v86;
      a2 = v15;
      re::FrameContext::perFrameAlloc(v15, 0x10uLL, 4uLL, (uint64_t)&v98);
      v44 = v98;
      v45 = v99;
      v46 = *((_QWORD *)&v98 + 1);
      v47 = (_DWORD *)(v98 + DWORD2(v98));
      *v47 = v22;
      v47[1] = v39;
      v47[2] = v41;
      v47[3] = v40;
      *(_QWORD *)v43 = v44;
      *(_QWORD *)(v43 + 8) = v46;
      *(_QWORD *)(v43 + 16) = v45;
      *(_QWORD *)&v98 = *v30;
      DWORD2(v98) = 0;
      HIDWORD(v98) = objc_msgSend(*v30, sel_length);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v43 + 24), (void **)&v98);
      *(_QWORD *)(v43 + 32) = *((_QWORD *)&v98 + 1);
      if ((_QWORD)v98)

      *(_QWORD *)&v98 = *v38;
      DWORD2(v98) = 0;
      HIDWORD(v98) = objc_msgSend(*v38, sel_length);
      v12 = v42 + 104 * v20;
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v12 + 40), (void **)&v98);
      *(_QWORD *)(v12 + 48) = *((_QWORD *)&v98 + 1);
      if ((_QWORD)v98)

      v48 = 4 * v22;
      re::FrameContext::perFrameAlloc(v15, 4 * v22, 4uLL, (uint64_t)&v98);
      v49 = v98;
      v51 = DWORD2(v98);
      v50 = HIDWORD(v98);
      v52 = v99;
      v53 = v42 + 104 * v20;
      *(_QWORD *)(v53 + 80) = v98;
      *(_DWORD *)(v53 + 88) = v51;
      *(_DWORD *)(v53 + 92) = v50;
      *(_QWORD *)(v53 + 96) = v52;
      v54 = (void *)(v49 + v51);
      a4 = v72;
      if (v27)
      {
        v55 = re::AttributeTable::buffers(v79);
        v57 = *v27;
        if (v56 <= v57)
          goto LABEL_54;
        memcpy(v54, (char *)objc_msgSend(*(id *)(v55 + 16 * v57), sel_contents) + *(unsigned int *)(v55 + 16 * v57 + 8), v48);
      }
      else if (v50 >= 4)
      {
        memset_pattern16((void *)(v49 + v51), &unk_226167A70, v50 & 0xFFFFFFFC);
      }
      re::FrameContext::perFrameAlloc(v15, v48, 4uLL, (uint64_t)&v98);
      v58 = v98;
      v59 = DWORD2(v98);
      v60 = HIDWORD(v98);
      v61 = v99;
      v62 = v42 + 104 * v20;
      *(_QWORD *)(v62 + 56) = v98;
      *(_DWORD *)(v62 + 64) = v59;
      *(_DWORD *)(v62 + 68) = v60;
      *(_QWORD *)(v62 + 72) = v61;
      if (v60 >= 4)
        memset_pattern16((void *)(v58 + v59), &unk_226167A70, v60 & 0xFFFFFFFC);
      v63 = v87;
      v64 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](*v85 + 8, v86);
      v65 = *(_QWORD **)(v63 + 360);
      v66 = v72[2];
      v81 = 257;
      v80 = 65548;
      v5 = 30;
      v83 = 30;
      v82 = 0;
      v67 = re::DeformationBufferAllocator::alloc(v65, v66, 1, (uint64_t)&v80, *(unsigned __int8 *)(v64 + 16), v23);
      v68 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v63 + 360), *(unsigned __int8 *)(v64 + 16), v67);
      LOWORD(v91) = 257;
      v90 = 65548;
      LOBYTE(v92) = 30;
      HIDWORD(v91) = 0;
      v69 = objc_msgSend(*(id *)(v68 + 24), sel_contents);
      v70 = *(_QWORD *)(v68 + 24);
      *(_QWORD *)&v98 = v69;
      *((_QWORD *)&v98 + 1) = *(_QWORD *)(v68 + 32);
      *(_QWORD *)&v99 = v70;
      re::DeformationVertexBufferState::setOutputBuffer(v78, 1u, a3, (uint64_t)&v98, (uint64_t)&v90);
      re::StringID::destroyString((re::StringID *)v84);
      v14 = v77 + 1;
      if (v77 + 1 == v73)
        return v75;
    }
    v84[0] = 0;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v90 = 136315906;
    v91 = "operator[]";
    v92 = 1024;
    v93 = 476;
    v94 = 2048;
    v95 = v20;
    v96 = 2048;
    v97 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_50:
    v84[0] = 0;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v90 = 136315906;
    v91 = "operator[]";
    v92 = 1024;
    v93 = 476;
    v94 = 2048;
    v95 = v5;
    v96 = 2048;
    v97 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_51:
    v89 = 0;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v90 = 136315906;
    v91 = "operator[]";
    v92 = 1024;
    v93 = 476;
    v94 = 2048;
    v95 = v5;
    v96 = 2048;
    v97 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_52:
    v89 = 0;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    v12 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v90 = 136315906;
    v91 = "operator[]";
    v92 = 1024;
    v93 = 476;
    v94 = 2048;
    v95 = v5;
    v96 = 2048;
    v97 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_53:
    v89 = 0;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v98 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v90 = 136315906;
    v91 = "operator[]";
    v92 = 1024;
    v93 = 468;
    v94 = 2048;
    v95 = v20;
    v96 = 2048;
    v97 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_54:
    re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v57, v56);
    _os_crash();
    __break(1u);
LABEL_55:
    re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v37, v36);
    _os_crash();
    __break(1u);
    goto LABEL_56;
  }
  return v75;
}

uint64_t re::JiggleDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, _QWORD *a4)
{
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE v28[28];
  __int16 v29;
  unint64_t v30;
  _OWORD v31[5];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Jiggle Deformer");
  v8 = objc_msgSend(*(id *)(a1 + 200), sel_maxTotalThreadsPerThreadgroup);
  v23 = a4;
  v22 = *(_QWORD *)(*a4 + 48);
  if (v22)
  {
    v9 = 0;
    v10 = v8;
    v21 = v8 - 1;
    do
    {
      re::DeformationInstanceIterator::Instance::Instance(&v24, v23, v9);
      v11 = v26;
      v12 = re::DeformationVertexBufferState::inputVertexCount(v26, 1u);
      v13 = v25;
      v14 = *(_QWORD *)(a2 + 8);
      if (v14 <= v25)
      {
        v27 = 0;
        memset(v31, 0, sizeof(v31));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v28 = 136315906;
        *(_QWORD *)&v28[4] = "operator[]";
        *(_WORD *)&v28[12] = 1024;
        *(_DWORD *)&v28[14] = 468;
        *(_WORD *)&v28[18] = 2048;
        *(_QWORD *)&v28[20] = v13;
        v29 = 2048;
        v30 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v15 = *(_QWORD *)(a2 + 16) + 104 * v25;
      v16 = (v21 + v12) / v10;
      objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(a1 + 200));
      LOBYTE(v31[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v11, 1u);
      v17 = *(_QWORD *)(v11[24]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v11 + 23, (unsigned __int8 *)v31)+ 24);
      LOBYTE(v31[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v11, 1u);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", v17, *(unsigned int *)(v11[24]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v11 + 23, (unsigned __int8 *)v31)+ 16), 0);
      LOBYTE(v31[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v11, 1u);
      v18 = *(_QWORD *)(v11[8]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v11 + 7, (unsigned __int8 *)v31)+ 24);
      LOBYTE(v31[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v11, 1u);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", v18, *(unsigned int *)(v11[8]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v11 + 7, (unsigned __int8 *)v31)+ 16), 1);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v15 + 24), *(unsigned int *)(v15 + 32), 2);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v15 + 40), *(unsigned int *)(v15 + 48), 3);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v15 + 72), *(unsigned int *)(v15 + 64), 4);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v15 + 96), *(unsigned int *)(v15 + 88), 5);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v15 + 16), *(unsigned int *)(v15 + 8), 6);
      v19 = *this;
      *(_QWORD *)&v31[0] = v16;
      *(int64x2_t *)((char *)v31 + 8) = vdupq_n_s64(1uLL);
      *(_QWORD *)v28 = v10;
      *(_OWORD *)&v28[8] = *(_OWORD *)((char *)v31 + 8);
      objc_msgSend(v19, "dispatchThreadgroups:threadsPerThreadgroup:", v31, v28);
      ++v9;
    }
    while (v22 != v9);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

void re::JiggleDeformer::deformCPU(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The Jiggle deformer does not support a CPU path.", "!\"Unreachable code\"", "deformCPU", 242);
  _os_crash();
  __break(1u);
}

re::StringID *re::JiggleDeformerModelUtil::envelopeBufferNameForJiggleDataIndex@<X0>(re::JiggleDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 85);
  if (v3 && *(_QWORD *)(v3 + 32) > (unint64_t)a2)
    return re::StringID::StringID(a3, (const StringID *)(*(_QWORD *)(v3 + 40) + 16 * a2));
  else
    return re::StringID::invalid(a3);
}

re::StringID *re::JiggleDeformerModelUtil::massBufferNameForJiggleDataIndex@<X0>(re::JiggleDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 85);
  if (v3 && *(_QWORD *)(v3 + 8) > (unint64_t)a2)
    return re::StringID::StringID(a3, (const StringID *)(*(_QWORD *)(v3 + 16) + 16 * a2));
  else
    return re::StringID::invalid(a3);
}

uint64_t re::JiggleDeformerModelUtil::computeJiggleDeformerModelSizeExcludingMetalBuffers(re::JiggleDeformerModelUtil *this, const DeformationModelData *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const char **v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9;
  size_t v10;

  v2 = (_QWORD *)*((_QWORD *)this + 85);
  if (!v2)
    return 0;
  v3 = v2[1];
  v4 = 4 * (v2[7] + v2[10]) + 16 * v3 + 120;
  if (v3)
  {
    v5 = (const char **)(v2[2] + 8);
    do
    {
      if ((*(_BYTE *)(v5 - 1) & 1) != 0)
        v6 = strlen(*v5) + 1;
      else
        v6 = 0;
      v4 += v6;
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  v7 = v2[4];
  v8 = v4 + 16 * v7;
  if (v7)
  {
    v9 = (const char **)(v2[5] + 8);
    do
    {
      if ((*(_BYTE *)(v9 - 1) & 1) != 0)
        v10 = strlen(*v9) + 1;
      else
        v10 = 0;
      v8 += v10;
      v9 += 2;
      --v7;
    }
    while (v7);
  }
  return v8;
}

void re::internal::Callable<re::JiggleDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::JiggleDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  void *v6;

  v2 = *a2;
  if (**a2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = 104 * v3;
      v5 = (id *)(v2[2] + 40);
      do
      {
        if (*v5)
        {

          *v5 = 0;
        }
        v6 = *(v5 - 2);
        if (v6)
        {

          *(v5 - 2) = 0;
        }
        v5 += 13;
        v4 -= 104;
      }
      while (v4);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *v2 = 0;
  }
}

_QWORD *re::internal::Callable<re::JiggleDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7ACC0;
  return result;
}

_QWORD *re::internal::Callable<re::JiggleDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7ACC0;
  return result;
}

uint64_t re::internal::Callable<re::JiggleDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14JiggleDeformerENS2_19JiggleDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14JiggleDeformerENS2_19JiggleDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED7AD18;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14JiggleDeformerENS2_19JiggleDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED7AD18;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14JiggleDeformerENS2_19JiggleDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = v2[12];
    if (v4)
    {
      if (v2[13])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[14]);
        v2[13] = 0;
        v2[14] = 0;
      }
      v2[12] = 0;
    }
    v5 = v2[9];
    if (v5)
    {
      if (v2[10])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, v2[11]);
        v2[10] = 0;
        v2[11] = 0;
      }
      v2[9] = 0;
    }
    v6 = v2[6];
    if (v6)
    {
      if (v2[7])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, v2[8]);
        v2[7] = 0;
        v2[8] = 0;
      }
      v2[6] = 0;
    }
    re::FixedArray<re::StringID>::deinit(v2 + 3);
    re::FixedArray<re::StringID>::deinit(v2);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14JiggleDeformerENS2_19JiggleDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14JiggleDeformerENS2_19JiggleDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
}

uint64_t *re::BucketArray<unsigned long,64ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<unsigned long,64ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<unsigned long,64ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 6)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 512, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

_anonymous_namespace_ *re::DataArray<unsigned long>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = 8 * *((unsigned int *)a1 + 11);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

_QWORD *re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 6)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1024, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

BOOL re::LateLatch::shouldApplyHeadPoseLateLatching(re::LateLatch *this)
{
  unsigned __int8 v1;
  int v2;
  _BOOL8 v3;
  const char *v5;
  char v6;
  _QWORD v7[2];
  char v8[2];

  if ((v1 & 1) == 0
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableHeadPoseLateLatching", v5, v8);
    if (v8[0])
      v6 = v8[1];
    else
      v6 = 1;
    re::LateLatch::shouldApplyHeadPoseLateLatching(void)::kEnable = v6;
  }
  v7[0] = 0x95A75B43D56D48D6;
  v7[1] = "overrides:enableHeadPoseLateLatching";
  if (re::s_debugSettingsManager
    && (v8[0] = 0, !re::DebugSettingsManager::getWithErrorCode<BOOL>(re::s_debugSettingsManager, v7, v8)))
  {
    v2 = v8[0];
  }
  else
  {
    v2 = re::LateLatch::shouldApplyHeadPoseLateLatching(void)::kEnable;
  }
  v3 = v2 != 0;
  re::StringID::destroyString((re::StringID *)v7);
  return v3;
}

BOOL re::LateLatch::shouldApplyAnchorLateLatching(re::LateLatch *this)
{
  unsigned __int8 v1;
  int v2;
  _BOOL8 v3;
  const char *v5;
  char v6;
  _QWORD v7[2];
  char v8[2];

  if ((v1 & 1) == 0
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableAnchorLateLatching", v5, v8);
    if (v8[0])
      v6 = v8[1];
    else
      v6 = 1;
    re::LateLatch::shouldApplyAnchorLateLatching(void)::kEnable = v6;
  }
  v7[0] = 0x2BE47D8679B6881ELL;
  v7[1] = "overrides:enableAnchorLateLatching";
  if (re::s_debugSettingsManager
    && (v8[0] = 0, !re::DebugSettingsManager::getWithErrorCode<BOOL>(re::s_debugSettingsManager, v7, v8)))
  {
    v2 = v8[0];
  }
  else
  {
    v2 = re::LateLatch::shouldApplyAnchorLateLatching(void)::kEnable;
  }
  v3 = v2 != 0;
  re::StringID::destroyString((re::StringID *)v7);
  return v3;
}

BOOL re::LateLatch::shouldUseLegacyCodepathForHeadPoseLateLatching(re::LateLatch *this)
{
  unsigned __int8 v1;
  int v2;
  _BOOL8 v3;
  const char *v5;
  char v6;
  _QWORD v7[2];
  char v8[2];

  if ((v1 & 1) == 0
  {
    re::Defaults::BOOLValue((re::Defaults *)"useLegacyHeadPoseLateLatching", v5, v8);
    if (v8[0])
      v6 = v8[1];
    else
      v6 = 0;
    re::LateLatch::shouldUseLegacyCodepathForHeadPoseLateLatching(void)::kEnable = v6;
  }
  v7[0] = 0x4B73D1551D23FEA4;
  v7[1] = "overrides:useLegacyHeadPoseLateLatching";
  if (re::s_debugSettingsManager
    && (v8[0] = 0, !re::DebugSettingsManager::getWithErrorCode<BOOL>(re::s_debugSettingsManager, v7, v8)))
  {
    v2 = v8[0];
  }
  else
  {
    v2 = re::LateLatch::shouldUseLegacyCodepathForHeadPoseLateLatching(void)::kEnable;
  }
  v3 = v2 != 0;
  re::StringID::destroyString((re::StringID *)v7);
  return v3;
}

re::LateLatch *re::ViewConstantsLateLatch::copyOriginalViewConstants(uint64_t a1, _OWORD *a2)
{
  re::LateLatch *result;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD __src[15];
  _BYTE v14[1024];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = (re::LateLatch *)re::LateLatch::shouldApplyHeadPoseLateLatching((re::LateLatch *)a1);
  if ((_DWORD)result)
  {
    if (re::LateLatch::shouldUseLegacyCodepathForHeadPoseLateLatching(result))
    {
      memcpy(v14, a2, sizeof(v14));
      v5 = (void *)(a1 + 256);
      if (*(_BYTE *)a1)
      {
        return (re::LateLatch *)memmove(v5, a2, 0x400uLL);
      }
      else
      {
        *(_BYTE *)a1 = 1;
        return (re::LateLatch *)memcpy(v5, v14, 0x400uLL);
      }
    }
    else
    {
      v6 = a2[32];
      v7 = a2[33];
      v8 = a2[34];
      v9 = a2[35];
      v10 = a2[36];
      v11 = a2[37];
      v12 = a2[39];
      __src[6] = a2[38];
      __src[7] = v12;
      __src[4] = v10;
      __src[5] = v11;
      __src[0] = v6;
      __src[1] = v7;
      __src[2] = v8;
      __src[3] = v9;
      return (re::LateLatch *)re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::add((_anonymous_namespace_ *)(a1 + 1360), __src);
    }
  }
  return result;
}

void *re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::add(_anonymous_namespace_ *this, void *__src)
{
  unint64_t v4;
  _OWORD *v5;
  void *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (_OWORD *)(*((_QWORD *)this + 4) + (v4 << 7));
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  result = memmove(v5, __src, 0x80uLL);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

re::LateLatch *re::ViewConstantsLateLatch::trackViewConstantsBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  re::LateLatch *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;

  result = (re::LateLatch *)re::LateLatch::shouldApplyHeadPoseLateLatching((re::LateLatch *)a1);
  if (!(_DWORD)result)
    return result;
  result = (re::LateLatch *)re::LateLatch::shouldUseLegacyCodepathForHeadPoseLateLatching(result);
  v8 = *a4;
  v9 = a4[1];
  if (!(_DWORD)result)
  {
    if (!v9)
      return result;
    v21 = 16 * v9;
    for (i = (int *)(v8 + 12); ; i += 4)
    {
      if (*(i - 3) != 1)
        goto LABEL_54;
      v23 = *(i - 2);
      if ((_DWORD)v23)
      {
        if (v23 > 0x100)
        {
          if (v23 <= 0x300)
          {
            v25 = 0;
            v26 = 0;
            v28 = *i + v23;
LABEL_36:
            if (v28 >= 0x320)
            {
              v24 = a2 - v23 + *(i - 1) + 768;
              if (v26)
                goto LABEL_42;
            }
            else
            {
              v24 = 0;
              if (v26)
                goto LABEL_42;
            }
            goto LABEL_40;
          }
          v24 = 0;
          v25 = 0;
          v26 = 0;
          goto LABEL_40;
        }
        v26 = 0;
        v27 = *i;
      }
      else
      {
        v27 = *i;
        if (*i >= 0x80)
          v26 = a2 + *(i - 1);
        else
          v26 = 0;
      }
      v28 = v27 + v23;
      if (v28 >= 0x180)
      {
        v25 = a2 - v23 + *(i - 1) + 256;
        goto LABEL_36;
      }
      v24 = 0;
      v25 = 0;
      if (v26)
        goto LABEL_42;
LABEL_40:
      if (v25 || v24)
      {
LABEL_42:
        v29 = *(_DWORD *)(a1 + 1376);
        v30 = *(_QWORD *)(a1 + 1336);
        v31 = *(_QWORD *)(a1 + 1328);
        if (v30 >= v31)
        {
          v32 = v30 + 1;
          if (v31 < v30 + 1)
          {
            if (*(_QWORD *)(a1 + 1320))
            {
              v33 = 2 * v31;
              if (!v31)
                v33 = 8;
              if (v33 <= v32)
                v34 = v32;
              else
                v34 = v33;
              result = (re::LateLatch *)re::DynamicArray<re::ViewConstantsLateLatch::LateLatchEntry>::setCapacity((_QWORD *)(a1 + 1320), v34);
            }
            else
            {
              result = (re::LateLatch *)re::DynamicArray<re::ViewConstantsLateLatch::LateLatchEntry>::setCapacity((_QWORD *)(a1 + 1320), v32);
              ++*(_DWORD *)(a1 + 1344);
            }
          }
          v30 = *(_QWORD *)(a1 + 1336);
        }
        v35 = *(_QWORD *)(a1 + 1352) + 32 * v30;
        *(_QWORD *)v35 = v26;
        *(_QWORD *)(v35 + 8) = v25;
        *(_QWORD *)(v35 + 16) = v24;
        *(_DWORD *)(v35 + 24) = v29 - 1;
        *(_QWORD *)(a1 + 1336) = v30 + 1;
        ++*(_DWORD *)(a1 + 1344);
      }
LABEL_54:
      v21 -= 16;
      if (!v21)
        return result;
    }
  }
  if (v9)
  {
    v10 = 16 * v9;
    v11 = (unsigned int *)(v8 + 8);
    do
    {
      if (*(v11 - 2) == 1)
      {
        v13 = *(v11 - 1);
        v12 = *v11;
        v14 = v11[1];
        v15 = *(_QWORD *)(a1 + 1296);
        v16 = *(_QWORD *)(a1 + 1288);
        if (v15 >= v16)
        {
          v17 = v15 + 1;
          if (v16 < v15 + 1)
          {
            if (*(_QWORD *)(a1 + 1280))
            {
              v18 = 2 * v16;
              if (!v16)
                v18 = 8;
              if (v18 <= v17)
                v19 = v17;
              else
                v19 = v18;
              result = (re::LateLatch *)re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity((_QWORD *)(a1 + 1280), v19);
            }
            else
            {
              result = (re::LateLatch *)re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity((_QWORD *)(a1 + 1280), v17);
              ++*(_DWORD *)(a1 + 1304);
            }
          }
          v15 = *(_QWORD *)(a1 + 1296);
        }
        v20 = *(_QWORD *)(a1 + 1312) + 16 * v15;
        *(_QWORD *)v20 = a2 + v12;
        *(_DWORD *)(v20 + 8) = v13;
        *(_DWORD *)(v20 + 12) = v14;
        *(_QWORD *)(a1 + 1296) = v15 + 1;
        ++*(_DWORD *)(a1 + 1304);
      }
      v11 += 4;
      v10 -= 16;
    }
    while (v10);
  }
  return result;
}

void re::ViewConstantsLateLatch::patchTrackedViewConstantsBuffers(_QWORD *a1, float32x4_t *a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 __dst,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36)
{
  unint64_t v36;
  _BOOL8 shouldApplyHeadPoseLateLatching;
  _BOOL4 v41;
  __int128 *p_dst;
  _BOOL8 shouldUseLegacyCodepathForHeadPoseLateLatching;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  unint64_t *v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  simd_float4x4 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  float32x4_t v75;
  simd_float4x4 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t i;
  __int128 *v85;
  __int128 *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  __int128 *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD *v103;
  uint64_t v104;
  simd_float4x4 v105;
  simd_float4x4 v106;

  LODWORD(v36) = a4;
  STACK[0xE98] = *MEMORY[0x24BDAC8D0];
  shouldApplyHeadPoseLateLatching = re::LateLatch::shouldApplyHeadPoseLateLatching((re::LateLatch *)a1);
  if (shouldApplyHeadPoseLateLatching)
  {
    v41 = a1[172] && a1[167] != 0;
    p_dst = (__int128 *)(*(_BYTE *)a1 && (unint64_t)(a1[162] != 0));
    shouldUseLegacyCodepathForHeadPoseLateLatching = re::LateLatch::shouldUseLegacyCodepathForHeadPoseLateLatching((re::LateLatch *)shouldApplyHeadPoseLateLatching);
    v44 = shouldUseLegacyCodepathForHeadPoseLateLatching ? (int)p_dst : v41;
    if (v44 == 1)
    {
      if (re::LateLatch::shouldUseLegacyCodepathForHeadPoseLateLatching((re::LateLatch *)shouldUseLegacyCodepathForHeadPoseLateLatching))
      {
        *(_OWORD *)&STACK[0xE30] = 0uLL;
        *(_OWORD *)&STACK[0xE40] = 0uLL;
        *(_OWORD *)&STACK[0xE10] = 0uLL;
        *(_OWORD *)&STACK[0xE20] = 0uLL;
        *(_OWORD *)&STACK[0xDF0] = 0uLL;
        *(_OWORD *)&STACK[0xE00] = 0uLL;
        *(_OWORD *)&STACK[0xDD0] = 0uLL;
        *(_OWORD *)&STACK[0xDE0] = 0uLL;
        p_dst = &__dst;
        memcpy(&__dst, a1 + 32, 0x400uLL);
        if (*(_QWORD *)(a3 + 8) >= (unint64_t)(int)v36)
          v47 = (_OWORD *)(int)v36;
        else
          v47 = *(_OWORD **)(a3 + 8);
        if (v47)
        {
          v36 = 0;
          while (v36 != 2)
          {
            v48 = &__dst + 4 * v36;
            v49 = &STACK[0xDD0] + 8 * v36;
            v50 = v48[33];
            *(_OWORD *)v49 = v48[32];
            *((_OWORD *)v49 + 1) = v50;
            v51 = v48[35];
            *((_OWORD *)v49 + 2) = v48[34];
            *((_OWORD *)v49 + 3) = v51;
            v52 = *(_QWORD *)(a3 + 8);
            if (v52 <= v36)
              goto LABEL_64;
            v53 = 0;
            v54 = *a2;
            v54.i32[3] = 1.0;
            v55 = *(simd_float4x4 *)(*(_QWORD *)a3 + (v36 << 6));
            *(_OWORD *)&STACK[0xD90] = xmmword_2260E5F10;
            *(_OWORD *)&STACK[0xDA0] = xmmword_2260E5F20;
            *(_OWORD *)&STACK[0xDB0] = xmmword_2260E5F40;
            *(float32x4_t *)&STACK[0xDC0] = v54;
            do
            {
              *(float32x4_t *)((char *)&STACK[0xE50] + v53) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v55.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&STACK[0xD90]+ v53))), (float32x4_t)v55.columns[1], *(float32x2_t *)((char *)&STACK[0xD90] + v53), 1), (float32x4_t)v55.columns[2], *(float32x4_t *)((char *)&STACK[0xD90] + v53), 2), (float32x4_t)v55.columns[3], *(float32x4_t *)((char *)&STACK[0xD90] + v53), 3);
              v53 += 16;
            }
            while (v53 != 64);
            v56 = 0;
            v57 = *(_OWORD *)&STACK[0xE50];
            v58 = *(_OWORD *)&STACK[0xE60];
            v59 = *(_OWORD *)&STACK[0xE70];
            v60 = *(_OWORD *)&STACK[0xE80];
            v61 = &__dst + 4 * v36;
            *v61 = *(_OWORD *)&STACK[0xE50];
            v61[1] = v58;
            v61[2] = v59;
            v61[3] = v60;
            v62 = *(float32x4_t *)v49;
            v63 = *((float32x4_t *)v49 + 1);
            v64 = *((float32x4_t *)v49 + 2);
            v65 = *((float32x4_t *)v49 + 3);
            *(_OWORD *)&STACK[0xD90] = v57;
            *(_OWORD *)&STACK[0xDA0] = v58;
            *(_OWORD *)&STACK[0xDB0] = v59;
            *(_OWORD *)&STACK[0xDC0] = v60;
            do
            {
              *(float32x4_t *)((char *)&STACK[0xE50] + v56) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(_OWORD *)((char *)&STACK[0xD90]+ v56))), v63, *(float32x2_t *)((char *)&STACK[0xD90] + v56), 1), v64, *(float32x4_t *)((char *)&STACK[0xD90] + v56), 2), v65, *(float32x4_t *)((char *)&STACK[0xD90] + v56), 3);
              v56 += 16;
            }
            while (v56 != 64);
            v66 = *(_OWORD *)&STACK[0xE60];
            v67 = *(_OWORD *)&STACK[0xE70];
            v68 = *(_OWORD *)&STACK[0xE80];
            v69 = &__dst + 4 * v36;
            v69[16] = *(_OWORD *)&STACK[0xE50];
            v69[17] = v66;
            v69[18] = v67;
            v69[19] = v68;
            v105 = __invert_f4(v55);
            *((float32x4_t *)&STACK[0xBA0] + v36++) = vsubq_f32((float32x4_t)v105.columns[3], *a2);
            if ((_OWORD *)v36 == v47)
              goto LABEL_25;
          }
          goto LABEL_62;
        }
LABEL_25:
        v70 = a1[162];
        if (v70)
        {
          v71 = a1[164];
          v72 = v71 + 16 * v70;
          do
          {
            memcpy(*(void **)v71, (char *)&__dst + *(unsigned int *)(v71 + 8), *(unsigned int *)(v71 + 12));
            v71 += 16;
          }
          while (v71 != v72);
        }
      }
      else
      {
        a35 = 0uLL;
        a36 = 0uLL;
        a33 = 0uLL;
        a34 = 0uLL;
        a31 = 0uLL;
        a32 = 0uLL;
        __dst = 0uLL;
        a30 = 0uLL;
        *(_OWORD *)&STACK[0xD90] = 0uLL;
        *(_OWORD *)&STACK[0xDA0] = 0uLL;
        if (*(_QWORD *)(a3 + 8) >= (unint64_t)(int)v36)
          v36 = (int)v36;
        else
          v36 = *(_QWORD *)(a3 + 8);
        if (v36)
        {
          for (p_dst = 0; p_dst != (__int128 *)v36; p_dst = (__int128 *)((char *)p_dst + 1))
          {
            v73 = *(_QWORD *)(a3 + 8);
            if (v73 <= (unint64_t)p_dst)
              goto LABEL_63;
            v74 = 0;
            v75 = *a2;
            v75.i32[3] = 1.0;
            v76 = *(simd_float4x4 *)(*(_QWORD *)a3 + ((_QWORD)p_dst << 6));
            *(_OWORD *)&STACK[0xE50] = xmmword_2260E5F10;
            *(_OWORD *)&STACK[0xE60] = xmmword_2260E5F20;
            *(_OWORD *)&STACK[0xE70] = xmmword_2260E5F40;
            *(float32x4_t *)&STACK[0xE80] = v75;
            do
            {
              *(float32x4_t *)((char *)&STACK[0xDD0] + v74) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v76.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&STACK[0xE50]+ v74))), (float32x4_t)v76.columns[1], *(float32x2_t *)((char *)&STACK[0xE50] + v74), 1), (float32x4_t)v76.columns[2], *(float32x4_t *)((char *)&STACK[0xE50] + v74), 2), (float32x4_t)v76.columns[3], *(float32x4_t *)((char *)&STACK[0xE50] + v74), 3);
              v74 += 16;
            }
            while (v74 != 64);
            if (p_dst == (__int128 *)2)
            {
LABEL_65:
              re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, 2, 2);
              _os_crash();
              __break(1u);
            }
            v77 = *(_OWORD *)&STACK[0xDE0];
            v78 = *(_OWORD *)&STACK[0xDF0];
            v79 = *(_OWORD *)&STACK[0xE00];
            v80 = &__dst + 4 * (_QWORD)p_dst;
            *v80 = *(_OWORD *)&STACK[0xDD0];
            v80[1] = v77;
            v80[2] = v78;
            v80[3] = v79;
            v106 = __invert_f4(v76);
            *((float32x4_t *)&STACK[0xD90] + (unint64_t)p_dst) = vsubq_f32((float32x4_t)v106.columns[3], *a2);
          }
        }
        v81 = a1[167];
        if (v81)
        {
          v82 = a1[169];
          v83 = v82 + 32 * v81;
          do
          {
            if (v36)
            {
              for (i = 0; i != v36; ++i)
              {
                if (*(_QWORD *)v82)
                {
                  if (i >= 2)
                  {
                    re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, i, 2);
                    _os_crash();
                    __break(1u);
LABEL_59:
                    *(_OWORD *)&STACK[0xE00] = 0u;
                    *(_OWORD *)&STACK[0xE10] = 0u;
                    *(_OWORD *)&STACK[0xDE0] = 0u;
                    *(_OWORD *)&STACK[0xDF0] = 0u;
                    *(_OWORD *)&STACK[0xDD0] = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(STACK[0xE50]) = 136315906;
                    STACK[0xE54] = (unint64_t)"operator[]";
                    LOWORD(STACK[0xE5C]) = 1024;
                    LODWORD(STACK[0xE5E]) = 797;
                    LOWORD(STACK[0xE62]) = 2048;
                    STACK[0xE64] = a3;
                    LOWORD(STACK[0xE6C]) = 2048;
                    STACK[0xE6E] = (unint64_t)a2;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_60:
                    re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, i, 2);
                    _os_crash();
                    __break(1u);
LABEL_61:
                    re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, i, 2);
                    _os_crash();
                    __break(1u);
LABEL_62:
                    re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, 2, 2);
                    _os_crash();
                    __break(1u);
LABEL_63:
                    re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, p_dst, v73);
                    _os_crash();
                    __break(1u);
LABEL_64:
                    re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v36, v52);
                    _os_crash();
                    __break(1u);
                    goto LABEL_65;
                  }
                  v85 = &__dst + 4 * i;
                  v86 = (__int128 *)(*(_QWORD *)v82 + (i << 6));
                  v87 = v85[1];
                  *v86 = *v85;
                  v86[1] = v87;
                  v88 = v85[3];
                  v86[2] = v85[2];
                  v86[3] = v88;
                }
                v89 = *(_QWORD *)(v82 + 8);
                if (v89)
                {
                  a3 = *(unsigned int *)(v82 + 24);
                  a2 = (float32x4_t *)a1[172];
                  if ((unint64_t)a2 <= a3)
                    goto LABEL_59;
                  if (i >= 2)
                    goto LABEL_60;
                  v90 = 0;
                  v91 = (float32x4_t *)(a1[174] + (a3 << 7) + (i << 6));
                  v92 = *v91;
                  v93 = v91[1];
                  v94 = v91[2];
                  v95 = v91[3];
                  v96 = &__dst + 4 * i;
                  v97 = v96[1];
                  v98 = v96[2];
                  v99 = v96[3];
                  *(_OWORD *)&STACK[0xE50] = *v96;
                  *(_OWORD *)&STACK[0xE60] = v97;
                  *(_OWORD *)&STACK[0xE70] = v98;
                  *(_OWORD *)&STACK[0xE80] = v99;
                  do
                  {
                    *(float32x4_t *)((char *)&STACK[0xDD0] + v90) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, COERCE_FLOAT(*(_OWORD *)((char *)&STACK[0xE50] + v90))), v93, *(float32x2_t *)((char *)&STACK[0xE50] + v90), 1), v94, *(float32x4_t *)((char *)&STACK[0xE50] + v90), 2), v95, *(float32x4_t *)((char *)&STACK[0xE50] + v90), 3);
                    v90 += 16;
                  }
                  while (v90 != 64);
                  v100 = *(_OWORD *)&STACK[0xDE0];
                  v101 = *(_OWORD *)&STACK[0xDF0];
                  v102 = *(_OWORD *)&STACK[0xE00];
                  v103 = (_OWORD *)(v89 + (i << 6));
                  *v103 = *(_OWORD *)&STACK[0xDD0];
                  v103[1] = v100;
                  v103[2] = v101;
                  v103[3] = v102;
                }
                v104 = *(_QWORD *)(v82 + 16);
                if (v104)
                {
                  if (i >= 2)
                    goto LABEL_61;
                  *(_OWORD *)(v104 + 16 * i) = *((_OWORD *)&STACK[0xD90] + i);
                }
              }
            }
            v82 += 32;
          }
          while (v82 != v83);
        }
      }
    }
  }
}

void re::InstanceConstantsLateLatch::trackInstanceConstantsBuffer(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int8 a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  __n128 v13;

  if (re::LateLatch::shouldApplyAnchorLateLatching(a1))
  {
    v9 = a4[1];
    if (v9)
    {
      v10 = *a4;
      v11 = 16 * v9;
      v12 = (unsigned int *)(v10 + 8);
      do
      {
        if (*(v12 - 2) == 3 && !*(v12 - 1) && v12[1] >= 0x70)
        {
          v13.n128_u64[0] = a2 + *v12;
          v13.n128_u8[8] = a5;
          re::DynamicArray<re::InstanceConstantsLateLatch::Entry>::add(a1, &v13);
        }
        v12 += 4;
        v11 -= 16;
      }
      while (v11);
    }
  }
}

__n128 re::DynamicArray<re::InstanceConstantsLateLatch::Entry>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::InstanceConstantsLateLatch::Entry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

double re::InstanceConstantsLateLatch::patchTrackedInstanceConstantsBuffers(re::LateLatch *a1, os_unfair_lock_s *a2, uint64_t a3, float32x4_t *a4)
{
  double result;
  _BOOL8 v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  NSObject *v18;
  __int32 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  __int128 v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36[2];
  uint64_t v37;
  unsigned int v38;
  int v39;
  _OWORD v40[4];
  simd_float3x3 buf;
  float32x4_t v42;
  uint64_t v43;
  simd_float3x3 v44;
  simd_float3x3 v45;

  v43 = *MEMORY[0x24BDAC8D0];
  if (re::LateLatch::shouldApplyAnchorLateLatching(a1))
  {
    re::LateLatchingManager::getLateLatchPoseCorrections(a2, a3, (uint64_t)&v31);
    v10 = *((_QWORD *)a1 + 2);
    if (v10)
    {
      v11 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
      v12 = &v11[16 * v10];
      do
      {
        v13 = v11[8];
        if (v39)
        {
          if (v36[0])
          {
            v14 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v13) ^ ((0xBF58476D1CE4E5B9 * v13) >> 27));
            v15 = *(unsigned int *)(v36[1] + 4 * ((v14 ^ (v14 >> 31)) % v38));
            if ((_DWORD)v15 != 0x7FFFFFFF)
            {
              while (*(unsigned __int8 *)(v37 + 80 * v15 + 4) != (_DWORD)v13)
              {
                LODWORD(v15) = *(_DWORD *)(v37 + 80 * v15) & 0x7FFFFFFF;
                if ((_DWORD)v15 == 0x7FFFFFFF)
                  goto LABEL_14;
              }
              v17 = (float32x4_t *)(v37 + 80 * v15 + 16);
LABEL_17:
              v20 = 0;
              v21 = *(_QWORD *)v11;
              v22 = *(_OWORD *)(*(_QWORD *)v11 + 32);
              v23 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)v11 + 48), *a4);
              v23.i32[3] = HIDWORD(*(_OWORD *)(*(_QWORD *)v11 + 48));
              *(float32x4_t *)(v21 + 48) = v23;
              v24 = *v17;
              v25 = v17[1];
              v26 = v17[2];
              v27 = v17[3];
              v28 = *(_OWORD *)(v21 + 16);
              v40[0] = *(_OWORD *)v21;
              v40[1] = v28;
              v40[2] = v22;
              v40[3] = v23;
              do
              {
                buf.columns[v20] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(v40[v20])), v25, *(float32x2_t *)&v40[v20], 1), v26, (float32x4_t)v40[v20], 2), v27, (float32x4_t)v40[v20], 3);
                ++v20;
              }
              while (v20 != 4);
              v44 = buf;
              v29 = v42;
              *(simd_float3 *)v21 = buf.columns[0];
              *(simd_float3 *)(v21 + 16) = v44.columns[1];
              *(simd_float3 *)(v21 + 32) = v44.columns[2];
              *(float32x4_t *)(v21 + 48) = v29;
              v30 = vsubq_f32(v29, *a4);
              v30.i32[3] = v29.i32[3];
              *(float32x4_t *)(v21 + 48) = v30;
              v45 = __invert_f3(v44);
              *(_DWORD *)(v21 + 72) = v45.columns[2].i32[0];
              *(_DWORD *)(v21 + 88) = v45.columns[2].i32[1];
              *(_DWORD *)(v21 + 104) = v45.columns[2].i32[2];
              *(_QWORD *)(v21 + 64) = vzip1q_s32((int32x4_t)v45.columns[0], (int32x4_t)v45.columns[1]).u64[0];
              *(_QWORD *)(v21 + 80) = vtrn2q_s32((int32x4_t)v45.columns[0], (int32x4_t)v45.columns[1]).u64[0];
              *(_QWORD *)(v21 + 96) = vzip1q_s32(vdupq_laneq_s32((int32x4_t)v45.columns[0], 2), vdupq_laneq_s32((int32x4_t)v45.columns[1], 2)).u64[0];
              goto LABEL_20;
            }
          }
        }
        else if (v33)
        {
          v16 = 80 * v33;
          v17 = (float32x4_t *)&v35;
          while (v17[-1].u8[0] != (_DWORD)v13)
          {
            v17 += 5;
            v16 -= 80;
            if (!v16)
              goto LABEL_14;
          }
          goto LABEL_17;
        }
LABEL_14:
        v18 = *re::graphicsLogObjects((re *)v9);
        v9 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
        if (v9)
        {
          v19 = v11[8];
          buf.columns[0].i32[0] = 67109120;
          buf.columns[0].i32[1] = v19;
          _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Failed to obtain late-latch state for anchor ID '%u'", (uint8_t *)&buf, 8u);
        }
LABEL_20:
        v11 += 16;
      }
      while (v11 != v12);
    }
    v33 = 0;
    ++v34;
    re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::deinit(v36);
    v31 = 0;
    v32 = 0;
    return re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::deinit(v36);
  }
  return result;
}

re::VFXLateLatch *re::VFXLateLatch::VFXLateLatch(re::VFXLateLatch *this, re::Allocator *a2)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *(_QWORD *)this = a2;
  re::DynamicArray<re::PatchHandler>::setCapacity(this, 0);
  ++*((_DWORD *)this + 6);
  if (*((_QWORD *)this + 1) <= 0x1FuLL)
    re::DynamicArray<re::PatchHandler>::setCapacity(this, 0x20uLL);
  return this;
}

__n128 re::DynamicArray<re::PatchHandler>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PatchHandler>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  *((_QWORD *)this + 2) = v4 + 1;
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::VFXLateLatch::patchTrackedVFXDrawCalls(re::LateLatch *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;

  result = re::LateLatch::shouldApplyHeadPoseLateLatching(a1);
  if ((_DWORD)result)
  {
    v9 = *((_QWORD *)a1 + 2);
    if (v9)
    {
      v10 = (uint64_t **)(*((_QWORD *)a1 + 4) + 8);
      v11 = 16 * v9;
      do
      {
        v12 = *v10;
        if (*v10)
        {
          result = *v12;
          if (*v12)
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(result + 16))(result, a3, a4, *a2);
        }
        v10 += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::InstanceConstantsLateLatch::Entry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PatchHandler>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PatchHandler>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PatchHandler>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::MeshBoundingBoxes::init(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _anonymous_namespace_ *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  void *result;
  int v17;
  unint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v5 = (_QWORD *)(a1 + 16);
  v6 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned int,8ul>::setCapacity((_QWORD *)(a1 + 16), 0);
  v7 = *(_DWORD *)(a1 + 32) + 2;
  *(_DWORD *)(a1 + 32) = v7;
  v8 = a3[1];
  v9 = *(_QWORD *)(a1 + 24);
  if (v9 < v8)
  {
    if (*v5)
    {
      if ((v7 & 1) == 0)
      {
LABEL_4:
        v10 = *(_QWORD *)(a1 + 40);
LABEL_9:
        if (v10 < v8)
          re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(v5, v8);
        v12 = *(_QWORD *)(a1 + 24);
        if (v12 < v8)
        {
          do
          {
            v13 = a1 + 40;
            if ((*(_BYTE *)(a1 + 32) & 1) == 0)
              v13 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)(v13 + 4 * v12++) = 0;
          }
          while (v8 != v12);
        }
        goto LABEL_15;
      }
    }
    else
    {
      re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(v5, v8);
      v11 = *(_DWORD *)(a1 + 32) + 2;
      *(_DWORD *)(a1 + 32) = v11;
      if ((v11 & 1) == 0)
        goto LABEL_4;
    }
    v10 = 8;
    goto LABEL_9;
  }
  if (v9 > v8)
  {
LABEL_15:
    *(_QWORD *)(a1 + 24) = v8;
    v7 = *(_DWORD *)(a1 + 32) + 2;
    *(_DWORD *)(a1 + 32) = v7;
    v8 = a3[1];
  }
  if (v8 <= 0x40)
    v14 = 4 * v8;
  else
    v14 = 256;
  if ((v7 & 1) != 0)
    v15 = (void *)(a1 + 40);
  else
    v15 = *(void **)(a1 + 48);
  if (a3[1] >= 0x41uLL)
  {
    v17 = 128;
    v18 = 64;
    do
    {
      if (*(_QWORD *)(a1 + 24) <= v18)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v19 = a1 + 40;
      if ((*(_BYTE *)(a1 + 32) & 1) == 0)
        v19 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v19 + 4 * v18++) = v17;
      v17 += 2;
    }
    while (v18 < a3[1]);
  }
  return result;
}

uint64_t *re::allocInfo_ProtectionOptionsService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_404);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_404))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411B268, 0);
    *(uint64_t *)((char *)&qword_25411B278 + 6) = 0;
    qword_25411B278 = 0;
    qword_25411B288 = 0;
    qword_25411B290 = 0xFFFFFFFFLL;
    qword_25411B268 = (uint64_t)&off_24ED7DAA8;
    qword_25411B298 = (uint64_t)"ProtectionOptionsService";
    dword_25411B2A0 = 0;
    unk_25411B2A8 = 0u;
    unk_25411B2B8 = 0u;
    unk_25411B2C8 = 0u;
    qword_25411B2D8 = 0;
    __cxa_guard_release(&_MergedGlobals_404);
  }
  return &qword_25411B268;
}

void re::initInfo_ProtectionOptionsService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x5EBCAF223B8CB20;
  v5[1] = "ProtectionOptionsService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_ProtectionOptionsService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_ProtectionOptionsService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProtectionOptionsService", (uint64_t (*)(re::internal *))re::allocInfo_ProtectionOptionsService, (re::IntrospectionBase *(*)(void))re::initInfo_ProtectionOptionsService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ProtectionOptionsService>, this);
}

uint64_t re::DrawCallMeshPartsDetails::DrawCallMeshPartsDetails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v10[4];
  int v11;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = a2;
  re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::setCapacity((__n128 *)(a1 + 8), 0);
  ++*(_DWORD *)(a1 + 32);
  v10[0] = *(_BYTE *)a5;
  if (v10[0])
    v11 = *(_DWORD *)(a5 + 4);
  re::DrawCallMeshPartsDetails::appendPerMeshPartDetails(a1, a3, a4, (uint64_t)v10);
  return a1;
}

__n128 *re::DrawCallMeshPartsDetails::appendPerMeshPartDetails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17[8];
  __n128 *v18;
  char v19;
  uint64_t v20;

  v17[0] = 0;
  if (a3)
  {
    re::DynamicString::format(*(re::DynamicString **)a1, (re::Allocator *)"%s", (re::DynamicString *)&v14, a3);
    LOBYTE(v8) = 1;
    v9 = v14;
    v11 = v16;
    v10 = v15;
    re::Optional<re::DynamicString>::operator=(v17, &v8);
    if ((_BYTE)v8 && v9 && (v10 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    v8 = a2;
    LOBYTE(v9) = v17[0];
    if (v17[0])
      re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)&v18);
  }
  else
  {
    v8 = a2;
    LOBYTE(v9) = 0;
  }
  if (*(_BYTE *)a4)
    v13 = *(_DWORD *)(a4 + 4);
  result = re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::add((__n128 *)(a1 + 8), (uint64_t)&v8);
  if ((_BYTE)v9)
  {
    result = (__n128 *)v10;
    if ((_QWORD)v10)
    {
      if ((BYTE8(v10) & 1) != 0)
        result = (__n128 *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 40))();
    }
  }
  if (v17[0])
  {
    result = v18;
    if (v18)
    {
      if ((v19 & 1) != 0)
        return (__n128 *)(*(uint64_t (**)(__n128 *, uint64_t))(v18->n128_u64[0] + 40))(v18, v20);
    }
  }
  return result;
}

__n128 *re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::add(__n128 *this, uint64_t a2)
{
  __n128 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = this;
  v4 = this[1].n128_u64[0];
  if (v4 >= this->n128_u64[1])
  {
    this = re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::growCapacity(this, v4 + 1);
    v4 = v3[1].n128_u64[0];
  }
  v5 = v3[2].n128_u64[0];
  v6 = v5 + 56 * v4;
  *(_QWORD *)v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v6 + 8) = v7;
  if (v7)
  {
    v8 = v5 + 56 * v4;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_QWORD *)(v8 + 40) = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 40) = 0;
    v12 = *(_QWORD *)(v8 + 24);
    v11 = *(_QWORD *)(v8 + 32);
    *(_QWORD *)(v8 + 24) = v9;
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v11;
  }
  v13 = *(unsigned __int8 *)(a2 + 48);
  *(_BYTE *)(v5 + 56 * v4 + 48) = v13;
  if (v13)
    *(_DWORD *)(v5 + 56 * v4 + 52) = *(_DWORD *)(a2 + 52);
  ++v3[1].n128_u64[0];
  ++v3[1].n128_u32[2];
  return this;
}

uint64_t re::DrawCallRecorderGroup::DrawCallRecorderGroup(uint64_t a1, const char *a2, const char *a3, uint64_t a4)
{
  _anonymous_namespace_ *v8;
  size_t v9;
  const char *v11;
  size_t v12;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(a1 + 32), 0);
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = a4;
  re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::setCapacity((_QWORD *)(a1 + 72), 0);
  ++*(_DWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 148) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 160) = a4;
  re::DynamicArray<re::EncodedDrawCallDetails>::setCapacity((_QWORD *)(a1 + 160), 0);
  ++*(_DWORD *)(a1 + 184);
  *(_BYTE *)(a1 + 208) = 0;
  if (!a2)
    a2 = "nullptr";
  v11 = a2;
  v12 = strlen(a2);
  re::DynamicString::operator=((re::DynamicString *)a1, (uint64_t)&v11);
  if (!a3)
    a3 = "nullptr";
  v9 = strlen(a3);
  v11 = a3;
  v12 = v9;
  re::DynamicString::operator=((re::DynamicString *)(a1 + 32), (uint64_t)&v11);
  return a1;
}

uint64_t re::DrawCallRecorderGroup::allocateSortingDebugContextAndReturnIndex(re::DrawCallRecorderGroup *this)
{
  uint64_t v1;
  _QWORD *v2;
  __int128 v3;
  _OWORD v5[2];
  int32x4_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v1 = *((_QWORD *)this + 11);
  v2 = (_QWORD *)((char *)this + 72);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  memset(v5, 0, sizeof(v5));
  re::DynamicString::setCapacity(v5, 0);
  *(_QWORD *)&v3 = 0x7F0000007FLL;
  *((_QWORD *)&v3 + 1) = 0x7F0000007FLL;
  v6 = vdupq_n_s32(0x7F800000u);
  v7 = v3;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  LOBYTE(v12) = 0;
  re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::add(v2, (uint64_t)v5);
  if (*(_QWORD *)&v5[0] && (BYTE8(v5[0]) & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)&v5[0] + 40))();
  return v1;
}

_QWORD *re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4];
  v6 = v5 + 160 * v4;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_QWORD *)(v6 + 8);
  v9 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v9;
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 112) = v13;
  *(_OWORD *)(v6 + 64) = v11;
  *(_OWORD *)(v6 + 80) = v12;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 48) = v14;
  LODWORD(v8) = *(unsigned __int8 *)(a2 + 128);
  *(_BYTE *)(v6 + 128) = v8;
  if ((_DWORD)v8)
    *(_OWORD *)(v5 + 160 * v4 + 144) = *(_OWORD *)(a2 + 144);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

re::DynamicString *re::DrawCallRecorderGroup::getSortingContext@<X0>(re::DynamicString *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;

  if (*(_BYTE *)a2 && (v4 = *(unsigned int *)(a2 + 4), *((_QWORD *)result + 11) > v4))
  {
    v5 = *((_QWORD *)result + 13);
    v6 = v5 + 160 * v4;
    *(_BYTE *)a3 = 1;
    result = re::DynamicString::DynamicString((re::DynamicString *)(a3 + 16), (const re::DynamicString *)v6);
    v7 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a3 + 64) = v7;
    v8 = *(_OWORD *)(v6 + 64);
    v9 = *(_OWORD *)(v6 + 80);
    v10 = *(_OWORD *)(v6 + 112);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(a3 + 128) = v10;
    *(_OWORD *)(a3 + 80) = v8;
    *(_OWORD *)(a3 + 96) = v9;
    v11 = *(unsigned __int8 *)(v6 + 128);
    *(_BYTE *)(a3 + 144) = v11;
    if (v11)
      *(_OWORD *)(a3 + 160) = *(_OWORD *)(v5 + 160 * v4 + 144);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

uint64_t re::DrawCallRecorderGroup::getMutableSortingContext(uint64_t a1, unsigned int a2)
{
  if (*(_QWORD *)(a1 + 88) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 104) + 160 * a2;
}

unint64_t re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + ((unint64_t)v13 << 6);
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_DWORD *)(v11 + (v10 << 6) + 12) != (_DWORD)v6)
  {
    v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + (v10 << 6);
  return v12 + 16;
}

uint64_t re::DrawCallRecorderGroup::recordEncodedDrawCall(uint64_t a1, uint64_t a2, const char *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  re::Allocator *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  const char *v16;
  re::DynamicString *v17;
  int v18;
  re::DynamicString *v19;
  re::DynamicString *v20;
  int v21;
  re::DynamicString *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  const char *v37;
  size_t v38;
  char *v39;
  _anonymous_namespace_ *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  __n128 *v51;
  uint64_t result;
  const char *v57;
  uint64_t v58;
  const char *v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unsigned __int8 v70[8];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _BYTE v82[18];
  _QWORD v83[4];
  unsigned __int8 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  uint64_t v88;
  char v89;

  v13 = *(re::Allocator **)(a1 + 64);
  v14 = re::DynamicString::DynamicString((re::DynamicString *)&v64, "", v13);
  v67 = 0u;
  v66 = 0u;
  v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v66, 0);
  v68 = 0u;
  v69 = 0u;
  re::DynamicString::setCapacity(&v68, 0);
  v70[0] = 0;
  *(_QWORD *)&v82[1] = 134217472;
  *(_QWORD *)&v82[9] = 134217472;
  re::DynamicString::DynamicString((re::DynamicString *)v83, "", v13);
  v84 = 0;
  if (a3)
    v16 = a3;
  else
    v16 = "nullptr";
  v59 = v16;
  *(_QWORD *)&v60 = strlen(v16);
  re::DynamicString::operator=((re::DynamicString *)&v64, (uint64_t)&v59);
  re::DynamicString::format(*(re::DynamicString **)(a1 + 64), (re::Allocator *)"Unknown", (re::DynamicString *)&v59);
  v18 = *a4;
  v17 = (re::DynamicString *)(a4 + 8);
  if (v18)
    v19 = v17;
  else
    v19 = (re::DynamicString *)&v59;
  re::DynamicString::operator=((re::DynamicString *)&v66, v19);
  if (v59 && (v60 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v59 + 40))();
  re::DynamicString::format(*(re::DynamicString **)(a1 + 64), (re::Allocator *)"Unknown", (re::DynamicString *)&v59);
  v21 = *a5;
  v20 = (re::DynamicString *)(a5 + 8);
  if (v21)
    v22 = v20;
  else
    v22 = (re::DynamicString *)&v59;
  re::DynamicString::operator=((re::DynamicString *)&v68, v22);
  if (v59 && (v60 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v59 + 40))();
  if (v70[0] || *(_BYTE *)a6)
  {
    if (!v70[0] || *(_BYTE *)a6)
    {
      if (v70[0] || !*(_BYTE *)a6)
      {
        v24 = *(_OWORD *)(a6 + 24);
        v71 = *(_OWORD *)(a6 + 8);
        v72 = v24;
        v73 = *(_OWORD *)(a6 + 40);
        v74 = *(_DWORD *)(a6 + 56);
        if (v75 || *(_BYTE *)(a6 + 60))
        {
          if (!v75 || *(_BYTE *)(a6 + 60))
          {
            if (!v75)
              v75 = *(_BYTE *)(a6 + 60) != 0;
            v76 = *(_BYTE *)(a6 + 61);
          }
          else
          {
            v75 = 0;
          }
        }
        re::DynamicArray<re::RenderAttachmentState>::operator=((uint64_t)&v77, (uint64_t *)(a6 + 64));
      }
      else
      {
        v70[0] = 1;
        v23 = *(_OWORD *)(a6 + 24);
        v71 = *(_OWORD *)(a6 + 8);
        v72 = v23;
        v73 = *(_OWORD *)(a6 + 40);
        v74 = *(_DWORD *)(a6 + 56);
        v75 = *(_BYTE *)(a6 + 60);
        if (v75)
          v76 = *(_BYTE *)(a6 + 61);
        re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)&v77, (uint64_t *)(a6 + 64));
      }
    }
    else
    {
      if (v77)
      {
        if (v81)
          (*(void (**)(void))(*(_QWORD *)v77 + 40))();
        v81 = 0;
        v78 = 0;
        v79 = 0;
        v77 = 0;
        ++v80;
      }
      v70[0] = 0;
    }
  }
  v82[0] = *(_BYTE *)(a2 + 72);
  *(_OWORD *)&v82[1] = *(_OWORD *)a7;
  v82[17] = *(_BYTE *)(a7 + 16);
  v89 = a9;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(_QWORD *)(a1 + 112))
    {
      v25 = *(unsigned int *)(a2 + 52);
      v26 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) >> 27));
      v27 = *(unsigned int *)(*(_QWORD *)(a1 + 120) + 4 * ((v26 ^ (v26 >> 31)) % *(unsigned int *)(a1 + 136)));
      if ((_DWORD)v27 != 0x7FFFFFFF)
      {
        v28 = *(_QWORD *)(a1 + 128);
        v29 = *(_DWORD *)(v28 + (v27 << 6) + 12);
        if (v29 != (_DWORD)v25)
        {
          v32 = v27;
          while (1)
          {
            v32 = *(_DWORD *)(v28 + (v32 << 6) + 8) & 0x7FFFFFFF;
            if ((_DWORD)v32 == 0x7FFFFFFF)
              goto LABEL_62;
            if (*(_DWORD *)(v28 + (v32 << 6) + 12) == (_DWORD)v25)
            {
              while (v29 != (_DWORD)v25)
              {
                v27 = *(_DWORD *)(v28 + (v27 << 6) + 8) & 0x7FFFFFFF;
                if ((_DWORD)v27 == 0x7FFFFFFF)
                {
                  LODWORD(v27) = 0x7FFFFFFF;
                  goto LABEL_43;
                }
                v29 = *(_DWORD *)(v28 + (v27 << 6) + 12);
              }
              break;
            }
          }
        }
LABEL_43:
        v30 = v28 + ((unint64_t)v27 << 6);
        LOBYTE(v59) = 1;
        *(_QWORD *)&v60 = *(_QWORD *)(v30 + 16);
        re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::DynamicArray((__n128 *)((char *)&v60 + 8), v30 + 24);
        if (v84 | v59)
        {
          if (v84 && !(_BYTE)v59)
          {
            re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit((uint64_t)&v85 + 8);
            v84 = 0;
            if (!(_BYTE)v59)
              goto LABEL_62;
            goto LABEL_61;
          }
          if (!v84 && (_BYTE)v59)
          {
            v84 = 1;
            v85 = v60;
            v86 = v61;
            *((_QWORD *)&v60 + 1) = 0;
            v61 = 0uLL;
            v88 = v63;
            v63 = 0;
            ++v62;
            v87 = 1;
LABEL_61:
            re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit((uint64_t)&v60 + 8);
            goto LABEL_62;
          }
          *(_QWORD *)&v85 = v60;
          v33 = *((_QWORD *)&v85 + 1);
          if (*((_QWORD *)&v85 + 1) && *((_QWORD *)&v60 + 1) && *((_QWORD *)&v85 + 1) != *((_QWORD *)&v60 + 1))
          {
            re::internal::assertLog((re::internal *)4, v31, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
            result = _os_crash();
            __break(1u);
            return result;
          }
          *((_QWORD *)&v85 + 1) = *((_QWORD *)&v60 + 1);
          *((_QWORD *)&v60 + 1) = v33;
          v34 = v86;
          v86 = v61;
          v61 = v34;
          v35 = v88;
          v88 = v63;
          v63 = v35;
          ++v62;
          ++v87;
          if ((_BYTE)v59)
            goto LABEL_61;
        }
      }
    }
  }
LABEL_62:
  re::DynamicString::format(*(re::DynamicString **)(a1 + 64), (re::Allocator *)"Unknown", (re::DynamicString *)&v59);
  v36 = *(char *)(a2 + 3);
  if (v36 <= 2)
  {
    v37 = off_24ED7ADD8[v36];
    v38 = strlen(v37);
    v57 = v37;
    v58 = v38;
    re::DynamicString::operator=((re::DynamicString *)&v59, (uint64_t)&v57);
  }
  if ((v60 & 1) != 0)
    v39 = (char *)*((_QWORD *)&v60 + 1);
  else
    v39 = (char *)&v60 + 1;
  re::DynamicString::format(*(re::DynamicString **)(a1 + 64), (re::Allocator *)"InstanceCount: %zu InstanceOffset: %d VertexCount: %d IndexCount: %d TechniqueIndex: %d DrawCallType: %s", (re::DynamicString *)&v57, a8, *(unsigned int *)(a2 + 40), *(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 44), v39);
  re::DynamicString::operator=((re::DynamicString *)v83, (re::DynamicString *)&v57);
  v40 = (_anonymous_namespace_ *)v57;
  if (v57 && (v58 & 1) != 0)
    v40 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v57 + 40))();
  if (a9)
  {
    v57 = "(VFX, details unavailable)";
    v58 = 26;
    v40 = re::DynamicString::operator=((re::DynamicString *)v83, (uint64_t)&v57);
  }
  v41 = *(_QWORD *)(a1 + 168);
  v42 = *(_QWORD *)(a1 + 176);
  if (v42 >= v41)
  {
    if (v41 < v42 + 1)
    {
      if (*(_QWORD *)(a1 + 160))
      {
        v43 = 2 * v41;
        v44 = v41 == 0;
        v45 = 8;
        if (!v44)
          v45 = v43;
        if (v45 <= v42 + 1)
          v46 = v42 + 1;
        else
          v46 = v45;
        re::DynamicArray<re::EncodedDrawCallDetails>::setCapacity((_QWORD *)(a1 + 160), v46);
      }
      else
      {
        re::DynamicArray<re::EncodedDrawCallDetails>::setCapacity((_QWORD *)(a1 + 160), v42 + 1);
        ++*(_DWORD *)(a1 + 184);
      }
    }
    v42 = *(_QWORD *)(a1 + 176);
  }
  v47 = *(_QWORD *)(a1 + 192);
  v48 = v47 + 320 * v42;
  re::DynamicString::DynamicString((re::DynamicString *)v48, (const re::DynamicString *)&v64);
  re::DynamicString::DynamicString((re::DynamicString *)(v48 + 32), (const re::DynamicString *)&v66);
  re::DynamicString::DynamicString((re::DynamicString *)(v48 + 64), (const re::DynamicString *)&v68);
  re::Optional<re::TechniqueState>::Optional(v48 + 96, v70);
  v49 = *(_OWORD *)v82;
  *(_WORD *)(v48 + 216) = *(_WORD *)&v82[16];
  *(_OWORD *)(v48 + 200) = v49;
  re::DynamicString::DynamicString((re::DynamicString *)(v48 + 224), (const re::DynamicString *)v83);
  v50 = v84;
  *(_BYTE *)(v48 + 256) = v84;
  if (v50)
  {
    v51 = (__n128 *)(v47 + 320 * v42);
    v51[16].n128_u64[1] = v85;
    re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::DynamicArray(v51 + 17, (uint64_t)&v85 + 8);
  }
  *(_BYTE *)(v47 + 320 * v42 + 312) = v89;
  ++*(_QWORD *)(a1 + 176);
  ++*(_DWORD *)(a1 + 184);
  if (v59 && (v60 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v59 + 40))();
  if (v84)
    re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit((uint64_t)&v85 + 8);
  if (v83[0])
  {
    if ((v83[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v83[0] + 40))();
    memset(v83, 0, sizeof(v83));
  }
  if (v70[0] && v77)
  {
    if (v81)
      (*(void (**)(void))(*(_QWORD *)v77 + 40))();
    v81 = 0;
    v78 = 0;
    v79 = 0;
    v77 = 0;
    ++v80;
  }
  if ((_QWORD)v68)
  {
    if ((BYTE8(v68) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v68 + 40))();
    v68 = 0u;
    v69 = 0u;
  }
  if ((_QWORD)v66)
  {
    if ((BYTE8(v66) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v66 + 40))();
    v66 = 0u;
    v67 = 0u;
  }
  result = v64;
  if (v64)
  {
    if ((v65 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v64 + 40))();
  }
  return result;
}

__n128 *re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::DynamicArray(__n128 *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 *v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;

  a1[2].n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  a1[1].n128_u32[2] = 0;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    a1->n128_u64[0] = v3;
    re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::setCapacity(a1, v5);
    ++a1[1].n128_u32[2];
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 >= a1[1].n128_u64[0])
    {
      re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::setCapacity(a1, *(_QWORD *)(a2 + 16));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DrawCallMeshPartsDetails::PerMeshPartDetails *,re::DrawCallMeshPartsDetails::PerMeshPartDetails *,re::DrawCallMeshPartsDetails::PerMeshPartDetails *>(*(unsigned __int8 **)(a2 + 32), (unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 56 * a1[1].n128_u64[0]), a1[2].n128_i64[0]);
      v11 = a1[1].n128_u64[0];
      if (v11 != v6)
      {
        v12 = *(_QWORD *)(a2 + 32);
        v13 = v12 + 56 * v6;
        v14 = a1[2].n128_u64[0];
        v15 = 56 * v11;
        do
        {
          v16 = v12 + v15;
          v17 = v14 + v15;
          *(_QWORD *)v17 = *(_QWORD *)(v12 + v15);
          v18 = *(unsigned __int8 *)(v12 + v15 + 8);
          *(_BYTE *)(v17 + 8) = v18;
          if (v18)
            re::DynamicString::DynamicString((re::DynamicString *)(v17 + 16), (const re::DynamicString *)(v16 + 16));
          v19 = *(unsigned __int8 *)(v16 + 48);
          *(_BYTE *)(v17 + 48) = v19;
          if (v19)
            *(_DWORD *)(v14 + v15 + 52) = *(_DWORD *)(v12 + v15 + 52);
          v12 += 56;
          v14 += 56;
        }
        while (v16 + 56 != v13);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DrawCallMeshPartsDetails::PerMeshPartDetails *,re::DrawCallMeshPartsDetails::PerMeshPartDetails *,re::DrawCallMeshPartsDetails::PerMeshPartDetails *>(*(unsigned __int8 **)(a2 + 32), (unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 56 * v6), a1[2].n128_i64[0]);
      v7 = a1[1].n128_u64[0];
      if (v6 != v7)
      {
        v8 = -56 * v6 + 56 * v7;
        v9 = (__n128 *)(56 * v6 + a1[2].n128_u64[0] + 16);
        v10 = 0uLL;
        do
        {
          if (v9[-1].n128_u8[8] && v9->n128_u64[0])
          {
            if ((v9->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v9->n128_u64[0] + 40))(v9->n128_u64[0], v9[1].n128_u64[0], v10);
              v10 = 0uLL;
            }
            *v9 = v10;
            v9[1] = v10;
          }
          v9 = (__n128 *)((char *)v9 + 56);
          v8 -= 56;
        }
        while (v8);
      }
    }
    a1[1].n128_u64[0] = v6;
  }
  return a1;
}

__n128 *re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::setCapacity(__n128 *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 *v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  __n128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;

  v3 = result->n128_i64[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[1].n128_u64[0] <= a2)
    {
      result = (__n128 *)result->n128_u64[0];
      if (!v5->n128_u64[0])
      {
        result = (__n128 *)re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::setCapacity(v5, a2);
        ++v5[1].n128_u32[2];
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (__n128 *)(*(uint64_t (**)(__n128 *, unint64_t, uint64_t))(result->n128_u64[0] + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5->n128_u64[1])
              goto LABEL_25;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(v5->n128_u64[0] + 8));
        result = (__n128 *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_25:
        v5[2].n128_u64[0] = (unint64_t)v7;
        v5->n128_u64[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[2].n128_i64[0];
      v9 = v5[1].n128_i64[0];
      if (v9)
      {
        v10 = v8 + 56 * v9;
        v11 = v8 + 32;
        v12 = v7 + 2;
        v13 = 0uLL;
        do
        {
          v14 = v11 - 32;
          v12[-2].n128_u64[0] = *(_QWORD *)(v11 - 32);
          v15 = *(unsigned __int8 *)(v11 - 24);
          v12[-2].n128_u8[8] = v15;
          if (v15)
          {
            v12[-1] = v13;
            *v12 = v13;
            v12->n128_u64[1] = *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 8) = 0;
            v16 = v12[-1].n128_u64[1];
            v17 = *(_QWORD *)(v11 - 8);
            v12[-1].n128_u64[0] = *(_QWORD *)(v11 - 16);
            v12[-1].n128_u64[1] = v17;
            *(_QWORD *)(v11 - 16) = 0;
            v18 = v12->n128_u64[0];
            v12->n128_u64[0] = *(_QWORD *)v11;
            *(_QWORD *)(v11 - 8) = v16;
            *(_QWORD *)v11 = v18;
          }
          v19 = *(unsigned __int8 *)(v11 + 16);
          v12[1].n128_u8[0] = v19;
          if (v19)
            v12[1].n128_u32[1] = *(_DWORD *)(v11 + 20);
          if (*(_BYTE *)(v11 - 24))
          {
            v20 = *(_QWORD *)(v11 - 16);
            if (v20)
            {
              if ((*(_BYTE *)(v11 - 8) & 1) != 0)
              {
                (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v20 + 40))(v20, *(_QWORD *)v11, v13);
                v13 = 0uLL;
              }
              *(__n128 *)(v11 - 16) = v13;
              *(__n128 *)v11 = v13;
            }
          }
          v11 += 56;
          v12 = (__n128 *)((char *)v12 + 56);
        }
        while (v14 + 56 != v10);
        v8 = v5[2].n128_i64[0];
      }
      result = (__n128 *)(*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v5->n128_u64[0] + 40))(v5->n128_u64[0], v8);
      goto LABEL_25;
    }
  }
  return result;
}

unsigned __int8 *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DrawCallMeshPartsDetails::PerMeshPartDetails *,re::DrawCallMeshPartsDetails::PerMeshPartDetails *,re::DrawCallMeshPartsDetails::PerMeshPartDetails *>(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  BOOL v8;
  BOOL v9;

  if (result != a2)
  {
    v4 = a3 + 48;
    v5 = result + 52;
    do
    {
      *(_QWORD *)(v4 - 48) = *(_QWORD *)(v5 - 52);
      v6 = v5 - 44;
      result = re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v4 - 40), v5 - 44);
      v7 = *(v5 - 4);
      if (*(_BYTE *)v4)
        v8 = 0;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        if (*(_BYTE *)v4)
          v9 = v7 == 0;
        else
          v9 = 0;
        if (v9)
        {
          *(_BYTE *)v4 = 0;
        }
        else
        {
          if (!*(_BYTE *)v4)
          {
            if (*(v5 - 4))
              *(_BYTE *)v4 = 1;
          }
          *(_DWORD *)(v4 + 4) = *(_DWORD *)v5;
        }
      }
      v4 += 56;
      v5 += 56;
    }
    while (v6 + 48 != a2);
  }
  return result;
}

__n128 *re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::growCapacity(__n128 *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  __n128 *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this->n128_u64[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (this->n128_u64[0])
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::setCapacity(v4, v3);
      ++v4[1].n128_u32[2];
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::EncodedDrawCallDetails>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::EncodedDrawCallDetails>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x140uLL))
        {
          v2 = 320 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 320 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_40;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 320, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_40:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v45 = 320 * v9;
        do
        {
          v11 = &v7[v10 / 8];
          v12 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(_QWORD *)(v8 + v10 + 24);
          v13 = *(_QWORD *)(v8 + v10 + 8);
          *v11 = *(_QWORD *)(v8 + v10);
          *v12 = 0;
          v14 = *(_QWORD *)(v8 + v10 + 16);
          v12[3] = 0;
          v16 = v7[v10 / 8 + 1];
          v15 = v7[v10 / 8 + 2];
          v11[1] = v13;
          v11[2] = v14;
          v12[1] = v16;
          v12[2] = v15;
          *((_OWORD *)v11 + 2) = 0u;
          *((_OWORD *)v11 + 3) = 0u;
          v17 = (_QWORD *)(v8 + v10 + 32);
          v11[4] = *v17;
          *v17 = 0;
          v11[7] = *(_QWORD *)(v8 + v10 + 56);
          v12[7] = 0;
          v19 = v7[v10 / 8 + 5];
          v18 = v7[v10 / 8 + 6];
          v20 = *(_QWORD *)(v8 + v10 + 48);
          v11[5] = *(_QWORD *)(v8 + v10 + 40);
          v11[6] = v20;
          v12[5] = v19;
          v12[6] = v18;
          *((_OWORD *)v11 + 4) = 0u;
          *((_OWORD *)v11 + 5) = 0u;
          v21 = (_QWORD *)(v8 + v10 + 64);
          v11[8] = *v21;
          *v21 = 0;
          v11[11] = *(_QWORD *)(v8 + v10 + 88);
          v12[11] = 0;
          v23 = v7[v10 / 8 + 9];
          v22 = v7[v10 / 8 + 10];
          v24 = *(_QWORD *)(v8 + v10 + 80);
          v11[9] = *(_QWORD *)(v8 + v10 + 72);
          v11[10] = v24;
          v12[9] = v23;
          v12[10] = v22;
          LODWORD(v22) = *(unsigned __int8 *)(v8 + v10 + 96);
          *((_BYTE *)v11 + 96) = v22;
          if ((_DWORD)v22)
          {
            v25 = *(_OWORD *)(v12 + 13);
            v26 = *(_OWORD *)(v12 + 15);
            v27 = *(_OWORD *)(v12 + 17);
            *((_DWORD *)v11 + 38) = *((_DWORD *)v12 + 38);
            *(_OWORD *)(v11 + 17) = v27;
            *(_OWORD *)(v11 + 15) = v26;
            *(_OWORD *)(v11 + 13) = v25;
            v28 = *((unsigned __int8 *)v12 + 156);
            *((_BYTE *)v11 + 156) = v28;
            if (v28)
              BYTE5(v7[v10 / 8 + 19]) = *(_BYTE *)(v8 + v10 + 157);
            v29 = &v7[v10 / 8];
            v30 = v8 + v10;
            v29[24] = 0;
            v29[21] = 0;
            v29[22] = 0;
            v29[20] = 0;
            *((_DWORD *)v29 + 46) = 0;
            v31 = *(_QWORD *)(v8 + v10 + 168);
            v29[20] = *(_QWORD *)(v8 + v10 + 160);
            v29[21] = v31;
            *(_QWORD *)(v30 + 160) = 0;
            *(_QWORD *)(v30 + 168) = 0;
            v32 = v7[v10 / 8 + 22];
            v29[22] = *(_QWORD *)(v8 + v10 + 176);
            *(_QWORD *)(v30 + 176) = v32;
            v33 = v7[v10 / 8 + 24];
            v29[24] = *(_QWORD *)(v8 + v10 + 192);
            *(_QWORD *)(v30 + 192) = v33;
            *(_DWORD *)(v30 + 184) = *(_DWORD *)(v8 + v10 + 184) + 1;
            *((_DWORD *)v29 + 46) = LODWORD(v7[v10 / 8 + 23]) + 1;
          }
          v34 = *(_OWORD *)(v12 + 25);
          *((_WORD *)v11 + 108) = *((_WORD *)v12 + 108);
          *(_OWORD *)(v11 + 25) = v34;
          *((_OWORD *)v11 + 14) = 0u;
          *((_OWORD *)v11 + 15) = 0u;
          v35 = v12 + 28;
          v11[28] = v12[28];
          v12[28] = 0;
          v11[31] = v12[31];
          v12[31] = 0;
          v37 = v11[29];
          v36 = v11[30];
          v38 = v12[30];
          v11[29] = v12[29];
          v11[30] = v38;
          v12[29] = v37;
          v12[30] = v36;
          LODWORD(v36) = *((unsigned __int8 *)v12 + 256);
          *((_BYTE *)v11 + 256) = v36;
          if ((_DWORD)v36)
          {
            v39 = &v7[v10 / 8];
            v40 = v8 + v10;
            v41 = *(_QWORD *)(v8 + v10 + 264);
            v39[38] = 0;
            v39[33] = v41;
            v39[34] = 0;
            v39[35] = 0;
            v39[36] = 0;
            *((_DWORD *)v39 + 74) = 0;
            v42 = *(_QWORD *)(v8 + v10 + 280);
            v39[34] = *(_QWORD *)(v8 + v10 + 272);
            v39[35] = v42;
            *(_QWORD *)(v40 + 272) = 0;
            *(_QWORD *)(v40 + 280) = 0;
            v43 = v7[v10 / 8 + 36];
            v39[36] = *(_QWORD *)(v8 + v10 + 288);
            *(_QWORD *)(v40 + 288) = v43;
            v44 = v7[v10 / 8 + 38];
            v39[38] = *(_QWORD *)(v8 + v10 + 304);
            *(_QWORD *)(v40 + 304) = v44;
            *(_DWORD *)(v40 + 296) = *(_DWORD *)(v8 + v10 + 296) + 1;
            *((_DWORD *)v39 + 74) = LODWORD(v7[v10 / 8 + 37]) + 1;
          }
          *((_BYTE *)v11 + 312) = *(_BYTE *)(v8 + v10 + 312);
          if (*((_BYTE *)v12 + 256))
            re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit(v8 + v10 + 272);
          if (*v35)
          {
            if ((v12[29] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v35 + 40))(*v35, v12[30]);
            *(_OWORD *)v35 = 0u;
            *((_OWORD *)v12 + 15) = 0u;
          }
          re::Optional<re::TechniqueState>::~Optional(v8 + v10 + 96);
          if (*v21)
          {
            if ((v12[9] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v21 + 40))(*v21, v12[10]);
            *(_OWORD *)v21 = 0u;
            *(_OWORD *)(v8 + v10 + 80) = 0u;
          }
          if (*v17)
          {
            if ((v12[5] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v17 + 40))(*v17, v12[6]);
            *(_OWORD *)v17 = 0u;
            *(_OWORD *)(v8 + v10 + 48) = 0u;
          }
          if (*v12)
          {
            if ((v12[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v12 + 40))(*v12, v12[2]);
            *(_OWORD *)v12 = 0u;
            *((_OWORD *)v12 + 1) = 0u;
          }
          v10 += 320;
        }
        while (v45 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_40;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          v2 = 160 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 160 * v9;
        v11 = 0uLL;
        v12 = v7;
        do
        {
          *(_OWORD *)v12 = v11;
          *((_OWORD *)v12 + 1) = v11;
          v12[3] = v8[3];
          v13 = v8[1];
          *v12 = *v8;
          *v8 = 0;
          v14 = v8[2];
          v8[3] = 0;
          v16 = v12[1];
          v15 = v12[2];
          v12[1] = v13;
          v12[2] = v14;
          v8[1] = v16;
          v8[2] = v15;
          v17 = *((_OWORD *)v8 + 4);
          v18 = *((_OWORD *)v8 + 5);
          v19 = *((_OWORD *)v8 + 7);
          *((_OWORD *)v12 + 6) = *((_OWORD *)v8 + 6);
          *((_OWORD *)v12 + 7) = v19;
          *((_OWORD *)v12 + 4) = v17;
          *((_OWORD *)v12 + 5) = v18;
          v20 = *((_OWORD *)v8 + 3);
          *((_OWORD *)v12 + 2) = *((_OWORD *)v8 + 2);
          *((_OWORD *)v12 + 3) = v20;
          LODWORD(v14) = *((unsigned __int8 *)v8 + 128);
          *((_BYTE *)v12 + 128) = v14;
          if ((_DWORD)v14)
            *((_OWORD *)v12 + 9) = *((_OWORD *)v8 + 9);
          if (*v8)
          {
            if ((v8[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v8 + 40))(*v8, v8[2]);
              v11 = 0uLL;
            }
            *(_OWORD *)v8 = v11;
            *((_OWORD *)v8 + 1) = v11;
          }
          v8 += 20;
          v12 += 20;
          v10 -= 160;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 6) + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6)) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 12) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + (v10 << 6);
  *(_QWORD *)(v14 + 16) = *a5;
  re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::DynamicArray((__n128 *)(v14 + 24), (uint64_t)(a5 + 1));
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  signed int v26;
  _BYTE v27[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v27, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v27;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)v27 = v5;
      *(_QWORD *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = v6 + 32;
        do
        {
          if ((*(_DWORD *)(v14 - 24) & 0x80000000) != 0)
          {
            v15 = *(_QWORD *)(v14 - 32);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + (v18 << 6) + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + (v18 << 6) + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + (v18 << 6) + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v18 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v18 << 6) + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v18 << 6)) = v15;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v18 << 6) + 12) = *(_DWORD *)(v14 - 20);
            v22 = *(_QWORD *)(a1 + 16) + (v18 << 6);
            v23 = *(_QWORD *)(v14 - 16);
            *(_QWORD *)(v22 + 56) = 0;
            *(_QWORD *)(v22 + 16) = v23;
            *(_QWORD *)(v22 + 24) = 0;
            *(_QWORD *)(v22 + 32) = 0;
            *(_QWORD *)(v22 + 40) = 0;
            *(_DWORD *)(v22 + 48) = 0;
            *(_QWORD *)(v22 + 24) = *(_QWORD *)(v14 - 8);
            *(_QWORD *)(v14 - 8) = 0;
            *(_QWORD *)(v22 + 32) = *(_QWORD *)v14;
            *(_QWORD *)v14 = 0;
            v24 = *(_QWORD *)(v22 + 40);
            *(_QWORD *)(v22 + 40) = *(_QWORD *)(v14 + 8);
            *(_QWORD *)(v14 + 8) = v24;
            v25 = *(_QWORD *)(v22 + 56);
            *(_QWORD *)(v22 + 56) = *(_QWORD *)(v14 + 24);
            *(_QWORD *)(v14 + 24) = v25;
            ++*(_DWORD *)(v14 + 16);
            ++*(_DWORD *)(v22 + 48);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 64;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2)
      v26 = a2;
    else
      v26 = 3;
  }
}

double re::ConstantSetupHelper::populateInstanceConstants(uint64_t a1, uint64_t a2, float32x4_t *a3, int a4, float a5)
{
  float32x4_t v8;
  int32x4_t v9;
  unint64_t v10;
  double result;
  simd_float3x3 v12;
  simd_float3x3 v13;

  v12 = *(simd_float3x3 *)a2;
  v8 = vsubq_f32(*(float32x4_t *)(a2 + 48), *a3);
  v8.i32[3] = HIDWORD(*(_OWORD *)(a2 + 48));
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(simd_float3 *)(a1 + 16) = v12.columns[1];
  *(simd_float3 *)(a1 + 32) = v12.columns[2];
  *(float32x4_t *)(a1 + 48) = v8;
  v13 = __invert_f3(v12);
  v9 = vdupq_laneq_s32((int32x4_t)v13.columns[0], 2);
  *(_DWORD *)(a1 + 72) = v13.columns[2].i32[0];
  v10 = vzip1q_s32((int32x4_t)v13.columns[0], (int32x4_t)v13.columns[1]).u64[0];
  *(_QWORD *)&result = vtrn2q_s32((int32x4_t)v13.columns[0], (int32x4_t)v13.columns[1]).u64[0];
  *(_QWORD *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 88) = v13.columns[2].i32[1];
  *(double *)(a1 + 80) = result;
  *(_DWORD *)(a1 + 104) = v13.columns[2].i32[2];
  *(_QWORD *)(a1 + 96) = vzip1q_s32(v9, vdupq_laneq_s32((int32x4_t)v13.columns[1], 2)).u64[0];
  *(float *)(a1 + 116) = a5;
  *(_DWORD *)(a1 + 120) = a4;
  return result;
}

float32_t re::ConstantSetupHelper::populateViewConstants(uint64_t a1, float32x4_t *a2, float32x4_t *a3, _OWORD *a4, float32x4_t *a5, unint64_t a6, int a7, uint64_t a8, int32x2_t a9, int32x2_t a10, int32x2_t a11, unsigned __int8 a12, int a13, _OWORD *a14, float32x4_t *a15, float32x4_t *a16)
{
  unsigned int v18;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  __int128 v42;
  __int128 v43;
  float32x4_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  __int128 v70;
  __int128 v71;
  float32x4_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  float32x4_t v80;
  float32x4_t v81;
  float32_t result;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  float32x4_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  simd_float4x4 v91;
  simd_float4x4 v92;
  simd_float4x4 v93;
  simd_float4x4 v94;

  v18 = a6;
  v24 = 0;
  v25 = *a5;
  v25.i32[3] = 1.0;
  v26 = *a2;
  v27 = a2[1];
  v28 = a2[2];
  v29 = a2[3];
  v83 = xmmword_2260E5F10;
  v84 = xmmword_2260E5F20;
  v85 = xmmword_2260E5F40;
  v86 = v25;
  do
  {
    *(__int128 *)((char *)&v87 + v24) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(__int128 *)((char *)&v83 + v24))), v27, *(float32x2_t *)((char *)&v83 + v24), 1), v28, *(float32x4_t *)((char *)&v83 + v24), 2), v29, *(float32x4_t *)((char *)&v83 + v24), 3);
    v24 += 16;
  }
  while (v24 != 64);
  v30 = HIDWORD(a6);
  v31 = v88;
  v32 = v89;
  v33 = v90;
  *(_OWORD *)a1 = v87;
  *(_OWORD *)(a1 + 16) = v31;
  *(_OWORD *)(a1 + 32) = v32;
  *(_OWORD *)(a1 + 48) = v33;
  v34 = *a3;
  v35 = a3[1];
  v36 = a3[3];
  *(float32x4_t *)(a1 + 544) = a3[2];
  *(float32x4_t *)(a1 + 560) = v36;
  *(float32x4_t *)(a1 + 512) = v34;
  *(float32x4_t *)(a1 + 528) = v35;
  v91 = __invert_f4(*(simd_float4x4 *)a3->f32);
  v37 = 0;
  *(simd_float4x4 *)(a1 + 640) = v91;
  v38 = *a3;
  v39 = a3[1];
  v40 = a3[2];
  v41 = a3[3];
  v42 = *(_OWORD *)(a1 + 16);
  v43 = *(_OWORD *)(a1 + 32);
  v44 = *(float32x4_t *)(a1 + 48);
  v83 = *(_OWORD *)a1;
  v84 = v42;
  v85 = v43;
  v86 = v44;
  do
  {
    *(__int128 *)((char *)&v87 + v37) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, COERCE_FLOAT(*(__int128 *)((char *)&v83 + v37))), v39, *(float32x2_t *)((char *)&v83 + v37), 1), v40, *(float32x4_t *)((char *)&v83 + v37), 2), v41, *(float32x4_t *)((char *)&v83 + v37), 3);
    v37 += 16;
  }
  while (v37 != 64);
  v45 = v88;
  v46 = v89;
  v47 = v90;
  *(_OWORD *)(a1 + 256) = v87;
  *(_OWORD *)(a1 + 272) = v45;
  *(_OWORD *)(a1 + 288) = v46;
  *(_OWORD *)(a1 + 304) = v47;
  v92 = __invert_f4(*(simd_float4x4 *)a2->f32);
  *(float32x4_t *)(a1 + 768) = vsubq_f32((float32x4_t)v92.columns[3], *a5);
  *(_OWORD *)(a1 + 832) = *a4;
  *(float32x2_t *)v92.columns[1].f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v30, v18));
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)&v92.columns[1].u32[2] = vdiv_f32(_D8, *(float32x2_t *)v92.columns[1].f32);
  *(_OWORD *)(a1 + 864) = *a4;
  *(simd_float4 *)(a1 + 880) = v92.columns[1];
  if (a7 >= 2)
  {
    v53 = 0;
    v54 = *a5;
    v54.i32[3] = 1.0;
    v55 = a2[4];
    v56 = a2[5];
    v57 = a2[6];
    v58 = a2[7];
    v83 = xmmword_2260E5F10;
    v84 = xmmword_2260E5F20;
    v85 = xmmword_2260E5F40;
    v86 = v54;
    do
    {
      *(__int128 *)((char *)&v87 + v53) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(__int128 *)((char *)&v83 + v53))), v56, *(float32x2_t *)((char *)&v83 + v53), 1), v57, *(float32x4_t *)((char *)&v83 + v53), 2), v58, *(float32x4_t *)((char *)&v83 + v53), 3);
      v53 += 16;
    }
    while (v53 != 64);
    v59 = v88;
    v60 = v89;
    v61 = v90;
    *(_OWORD *)(a1 + 64) = v87;
    *(_OWORD *)(a1 + 80) = v59;
    *(_OWORD *)(a1 + 96) = v60;
    *(_OWORD *)(a1 + 112) = v61;
    v62 = a3[4];
    v63 = a3[5];
    v64 = a3[7];
    *(float32x4_t *)(a1 + 608) = a3[6];
    *(float32x4_t *)(a1 + 624) = v64;
    *(float32x4_t *)(a1 + 576) = v62;
    *(float32x4_t *)(a1 + 592) = v63;
    v93 = __invert_f4(*(simd_float4x4 *)a3[4].f32);
    v65 = 0;
    *(simd_float4x4 *)(a1 + 704) = v93;
    v66 = a3[4];
    v67 = a3[5];
    v68 = a3[6];
    v69 = a3[7];
    v70 = *(_OWORD *)(a1 + 80);
    v71 = *(_OWORD *)(a1 + 96);
    v72 = *(float32x4_t *)(a1 + 112);
    v83 = *(_OWORD *)(a1 + 64);
    v84 = v70;
    v85 = v71;
    v86 = v72;
    do
    {
      *(__int128 *)((char *)&v87 + v65) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, COERCE_FLOAT(*(__int128 *)((char *)&v83 + v65))), v67, *(float32x2_t *)((char *)&v83 + v65), 1), v68, *(float32x4_t *)((char *)&v83 + v65), 2), v69, *(float32x4_t *)((char *)&v83 + v65), 3);
      v65 += 16;
    }
    while (v65 != 64);
    v73 = v88;
    v74 = v89;
    v75 = v90;
    *(_OWORD *)(a1 + 320) = v87;
    *(_OWORD *)(a1 + 336) = v73;
    *(_OWORD *)(a1 + 352) = v74;
    *(_OWORD *)(a1 + 368) = v75;
    v94 = __invert_f4(*(simd_float4x4 *)a2[4].f32);
    *(float32x4_t *)(a1 + 784) = vsubq_f32((float32x4_t)v94.columns[3], *a5);
    *(_OWORD *)(a1 + 848) = a4[1];
  }
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a8 + 4);
  *(_DWORD *)(a1 + 936) = *(_DWORD *)(a8 + 48);
  v76 = *(_QWORD *)(a8 + 36);
  HIDWORD(v76) = *(_DWORD *)a8;
  *(_QWORD *)(a1 + 928) = v76;
  *(_DWORD *)(a1 + 940) = a7;
  *(_DWORD *)(a1 + 944) = a12;
  *(_DWORD *)(a1 + 952) = a13;
  *(float32x2_t *)&v77 = vcvt_f32_s32(a9);
  *((float32x2_t *)&v77 + 1) = vdiv_f32(_D8, *(float32x2_t *)&v77);
  *(_OWORD *)(a1 + 896) = v77;
  *(float32x2_t *)&v78 = vcvt_f32_s32(a10);
  *((float32x2_t *)&v78 + 1) = vdiv_f32(_D8, *(float32x2_t *)&v78);
  *(float32x2_t *)&v79 = vcvt_f32_s32(a11);
  *((float32x2_t *)&v79 + 1) = vdiv_f32(_D8, *(float32x2_t *)&v79);
  *(_OWORD *)(a1 + 800) = v78;
  *(_OWORD *)(a1 + 816) = v79;
  *(_OWORD *)(a1 + 960) = *a14;
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  v80 = *a16;
  v81 = vmulq_f32(*a16, vsubq_f32(*a15, *a5));
  result = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0];
  v80.f32[3] = result;
  *(float32x4_t *)(a1 + 1008) = v80;
  return result;
}

void re::DebugSettingsManager::init(re::DebugSettingsManager *this)
{
  re::DebugSettingsManager::registerSetting(this, "SampleValue1");
  re::DebugSettingsManager::registerSetting(this, "SampleValue2");
  re::DebugSettingsManager::registerSetting(this, "SampleValue3");
  re::DebugSettingsManager::registerSetting(this, "overrides:enableHeadPoseLateLatching");
  re::DebugSettingsManager::registerSetting(this, "overrides:useLegacyHeadPoseLateLatching");
  re::DebugSettingsManager::registerSetting(this, "overrides:enableAnchorLateLatching");
  re::DebugSettingsManager::registerSetting(this, "overrides:enablelightspill");
  re::DebugSettingsManager::registerSetting(this, "overrides:enablemeshshadows");
  re::DebugSettingsManager::registerSetting(this, "overrides:enablemsaa");
  re::DebugSettingsManager::registerSetting(this, "overrides:enableshadows");
  re::DebugSettingsManager::registerSetting(this, "overrides:usepbrlite");
  re::DebugSettingsManager::registerSetting(this, "overrides:disablefrustumculling");
  re::DebugSettingsManager::registerSetting(this, "overrides:disablelightfrustumculling");
  re::DebugSettingsManager::registerSetting(this, "clipping:featherOverride");
  re::DebugSettingsManager::registerSetting(this, "clipping:disableDepthPrePass");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:forcePreBlend");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:forceColorGamutConvert");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:workingColorGamut");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:targetDisplayColorGamut");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:forcePosBlendLUTBake");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:disableContentAwareTonemapping");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:imageStatisticsFrequency");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:colorRangeScaler");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:disablePreBlendLUTBake");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:wpcStrength");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapOverrideMode");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapGamma");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapToeStrength");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapToeLength");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapShoulderStrength");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapShoulderLength");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapShoulderAngle");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapContrast");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapExposure");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapEnableExposureCompensation");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapExposureCompensationInputScalar");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:tonemapExposureCompensationTargetScalar");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:rabEnabled");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:rabSystemScalarMode");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:rabLuxGain");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:rabMinEnvironmentScalar");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:rabMaxEnvironmentScalar");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:imageStatisticsMin");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:imageStatisticsMax");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:imageStatisticsMean");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:imageStatisticsStdDev");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:clippingPointLux");
  re::DebugSettingsManager::registerSetting(this, "colorpipe:enableISPTonemapping");
  re::DebugSettingsManager::registerSetting(this, "blur:passthroughTextureWidth");
  re::DebugSettingsManager::registerSetting(this, "blur:VCATextureWidth");
  re::DebugSettingsManager::registerSetting(this, "blur:VCABlurSigma");
  re::DebugSettingsManager::registerSetting(this, "blur:VCABlurExpansion");
  re::DebugSettingsManager::registerSetting(this, "blur:passthroughMaterialSkipCount");
  re::DebugSettingsManager::registerSetting(this, "blur:passthroughMaterialSkipThresholdDeltaTime");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v00");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v01");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v02");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v04");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v10");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v11");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v12");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v14");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v20");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v21");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v22");
  re::DebugSettingsManager::registerSetting(this, "blur:filter.v24");
  re::DebugSettingsManager::registerSetting(this, "blur:taaMixValue.passthrough");
  re::DebugSettingsManager::registerSetting(this, "blur:taaMixValue.vca");
  re::DebugSettingsManager::registerSetting(this, "blur:enableReprojectionLerping");
  re::DebugSettingsManager::registerSetting(this, "overdraw:enable");
  re::DebugSettingsManager::registerSetting(this, "fallbackRenderingMode");
  re::DebugSettingsManager::registerSetting(this, "overrides:enableRenderOnTop");
  re::DebugSettingsManager::registerSetting(this, "renderOnTop:debug");
  re::DebugSettingsManager::registerSetting(this, "meshnode:debugDrawOrder");
  re::DebugSettingsManager::registerSetting(this, "meshsorting:enableDepthBias");
  re::DebugSettingsManager::registerSetting(this, "meshsorting:visualizeRPGSortPoints");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:visualizeClusters");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:visualizeClusterInfo");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:visualizeMatrices");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:visualizeShadows");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:visualizePlanes");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:visualizeCullBoundingBoxes");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:enableShadowFlattening");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:enableMeshDepthFallbackWhenFlattening");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:enableShadowOcclusion");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:shadowOcclusionTextureResolution");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:visualizeOverlap");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:enableMaxBlend");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:visualizeDepthPrepass");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:textureGenerationNominalDequeueSize");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:textureGenerationWorkDivisionFactor");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:textureGenerationEnableViewFrustumCulling");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:enableSUMeshCullingPerCaster");
  re::DebugSettingsManager::registerSetting(this, "meshshadow:enableShadow");
  re::DebugSettingsManager::registerSetting(this, "perceptualBlendingMode");
  re::DebugSettingsManager::registerSetting(this, "opensky:drawPlane");
  re::DebugSettingsManager::registerSetting(this, "globaldirectionallight");
  re::DebugSettingsManager::registerSetting(this, "iblshadow:distanceforglobaldirectionallight");
  re::DebugSettingsManager::registerSetting(this, "imageBasedReflectionSystem:debugLog");
  re::DebugSettingsManager::registerSetting(this, "drawcallrecording:takeSnapshotNow");
  re::DebugSettingsManager::registerSetting(this, "drawcallrecording:record");
  *((_BYTE *)this + 112) = 1;
}

void re::DebugSettingsManager::registerSetting(re::DebugSettingsManager *this, const char *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *var1;
  const char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  StringID v17;

  *(_QWORD *)&v17.var0 = 0;
  v17.var1 = (char *)&str_110;
  v4 = *(_QWORD *)&v17.var0;
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((*(_QWORD *)&v17.var0 >> 31) ^ (*(_QWORD *)&v17.var0 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                                                * ((*(_QWORD *)&v17.var0 >> 31) ^ (*(_QWORD *)&v17.var0 >> 1))) >> 27));
  v6 = v5 ^ (v5 >> 31);
  if (!*(_QWORD *)this)
  {
    LODWORD(v7) = 0;
    goto LABEL_10;
  }
  v7 = v6 % *((unsigned int *)this + 6);
  v8 = *(unsigned int *)(*((_QWORD *)this + 1) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_10:
    v12 = *((unsigned int *)this + 9);
    if ((_DWORD)v12 == 0x7FFFFFFF)
    {
      v12 = *((unsigned int *)this + 8);
      v13 = v12;
      if ((_DWORD)v12 == *((_DWORD *)this + 6))
      {
        re::HashTable<re::StringID,re::Optional<std::variant<int,float,BOOL>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)this, 2 * *((_DWORD *)this + 7));
        LODWORD(v7) = v6 % *((unsigned int *)this + 6);
        v13 = *((_DWORD *)this + 8);
      }
      *((_DWORD *)this + 8) = v13 + 1;
      v14 = *((_QWORD *)this + 2);
      v15 = *(_DWORD *)(v14 + 40 * v12);
    }
    else
    {
      v14 = *((_QWORD *)this + 2);
      v15 = *(_DWORD *)(v14 + 40 * v12);
      *((_DWORD *)this + 9) = v15 & 0x7FFFFFFF;
    }
    v16 = 40 * v12;
    *(_DWORD *)(v14 + v16) = v15 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)this + 2) + v16) = *(_DWORD *)(*((_QWORD *)this + 2) + 40 * v12) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v7);
    re::StringID::StringID((re::StringID *)(*((_QWORD *)this + 2) + 40 * v12 + 8), &v17);
    *(_BYTE *)(*((_QWORD *)this + 2) + 40 * v12 + 24) = 0;
    *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v7) = v12;
    ++*((_DWORD *)this + 7);
    ++*((_DWORD *)this + 10);
    goto LABEL_16;
  }
  v9 = *((_QWORD *)this + 2);
  var1 = v17.var1;
  while (1)
  {
    if ((*(_QWORD *)(v9 + 40 * v8 + 8) ^ v4) <= 1)
    {
      v11 = *(const char **)(v9 + 40 * v8 + 16);
      if (v11 == var1 || !strcmp(v11, var1))
        break;
    }
    v8 = *(_DWORD *)(v9 + 40 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF)
      goto LABEL_10;
  }
LABEL_16:
  re::StringID::destroyString((re::StringID *)&v17);
}

void re::HashTable<re::StringID,re::Optional<std::variant<int,float,BOOL>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  _BYTE v27[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v27;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)v27 = v5;
      *(_QWORD *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 28);
        do
        {
          if ((*((_DWORD *)v14 - 7) & 0x80000000) != 0)
          {
            v15 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)((char *)v14 - 20) >> 31) ^ (*(_QWORD *)((char *)v14 - 20) >> 1));
            v16 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
            v17 = *(unsigned int *)(a1 + 24);
            v18 = v16 % v17;
            v19 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v19 == 0x7FFFFFFF)
            {
              v19 = *(unsigned int *)(a1 + 32);
              v20 = v19;
              if ((_DWORD)v19 == (_DWORD)v17)
              {
                re::HashTable<re::StringID,re::Optional<std::variant<int,float,BOOL>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v12));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 40 * v19);
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 40 * v19);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            v23 = 40 * v19;
            *(_DWORD *)(v21 + v23) = v22 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v23) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v19) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v19 + 8), (const StringID *)((char *)v14 - 20));
            v24 = *(_QWORD *)(a1 + 16);
            v25 = *((unsigned __int8 *)v14 - 4);
            *(_BYTE *)(v24 + 40 * v19 + 24) = v25;
            if (v25)
              *(_QWORD *)(v24 + 40 * v19 + 28) = *v14;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 5;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2)
      v26 = a2;
    else
      v26 = 3;
  }
}

uint64_t *re::mtl::introspect_CompareFunction(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  StringID v53;
  _QWORD v54[2];
  _QWORD v55[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_25411B2F0);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_25411B2F0);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "Never";
      qword_25411B468 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "Less";
      qword_25411B470 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 2;
      *((_QWORD *)v39 + 2) = "Equal";
      qword_25411B478 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 3;
      *((_QWORD *)v41 + 2) = "LessEqual";
      qword_25411B480 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 4;
      *((_QWORD *)v43 + 2) = "Greater";
      qword_25411B488 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 5;
      *((_QWORD *)v45 + 2) = "NotEqual";
      qword_25411B490 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 6;
      *((_QWORD *)v47 + 2) = "GreaterEqual";
      qword_25411B498 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = 7;
      *(_QWORD *)(v49 + 16) = "Always";
      qword_25411B4A0 = v49;
      __cxa_guard_release(&qword_25411B2F0);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25411B2F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411B2F8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B568, "CompareFunction", 1, 1, 1, 1);
    qword_25411B568 = (uint64_t)&off_24ED7D9E8;
    qword_25411B5A8 = (uint64_t)&re::mtl::introspect_CompareFunction(BOOL)::enumTable;
    dword_25411B578 = 9;
    __cxa_guard_release(&qword_25411B2F8);
  }
  if (v2)
  {
    if ((_MergedGlobals_405 & 1) != 0)
      return &qword_25411B568;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v55);
    v5 = _MergedGlobals_405;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v55);
    if ((v5 & 1) != 0)
      return &qword_25411B568;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((_MergedGlobals_405 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_25411B568;
    }
  }
  _MergedGlobals_405 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B568, a2);
  v51 = 0xA476CA4CF3E2F7ALL;
  v52 = "CompareFunction";
  v55[0] = 0x31CD534126;
  v55[1] = "uint8_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v55);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v55);
    v11 = (unsigned int *)qword_25411B5A8;
    v54[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v55, &v51, 1, 1, (uint64_t)v54);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v53.var0 = 2 * v17;
          v53.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v55, v21, &v53);
          re::StringID::destroyString((re::StringID *)&v53);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v53.var0 = 2 * v25;
            v53.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v55, v29, &v53);
            re::StringID::destroyString((re::StringID *)&v53);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v55, v30);
    xmmword_25411B588 = (__int128)v53;
    re::StringID::destroyString((re::StringID *)&v51);
    if ((v2 & 1) != 0)
      return &qword_25411B568;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v55);
  re::internal::assertLog((re::internal *)5, v50, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "CompareFunction", v51, v52);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t *re::mtl::introspect_BlendFactor(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  re *v49;
  uint64_t *v50;
  re *v51;
  uint64_t *v52;
  re *v53;
  uint64_t *v54;
  re *v55;
  uint64_t *v56;
  re *v57;
  uint64_t *v58;
  re *v59;
  uint64_t *v60;
  re *v61;
  uint64_t *v62;
  re *v63;
  uint64_t *v64;
  re *v65;
  uint64_t *v66;
  re *v67;
  uint64_t *v68;
  re *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  StringID v75;
  _QWORD v76[2];
  _QWORD v77[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_25411B300);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_25411B300);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "Zero";
      qword_25411B9A8 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "One";
      qword_25411B9B0 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 2;
      *((_QWORD *)v39 + 2) = "SourceColor";
      qword_25411B9B8 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 3;
      *((_QWORD *)v41 + 2) = "OneMinusSourceColor";
      qword_25411B9C0 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 4;
      *((_QWORD *)v43 + 2) = "SourceAlpha";
      qword_25411B9C8 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 5;
      *((_QWORD *)v45 + 2) = "OneMinusSourceAlpha";
      qword_25411B9D0 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 6;
      *((_QWORD *)v47 + 2) = "DestinationColor";
      qword_25411B9D8 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *((_QWORD *)v49 + 1) = 7;
      *((_QWORD *)v49 + 2) = "OneMinusDestinationColor";
      qword_25411B9E0 = (uint64_t)v49;
      v50 = re::introspectionAllocator(v49);
      v51 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 24, 8);
      *(_DWORD *)v51 = 1;
      *((_QWORD *)v51 + 1) = 8;
      *((_QWORD *)v51 + 2) = "DestinationAlpha";
      qword_25411B9E8 = (uint64_t)v51;
      v52 = re::introspectionAllocator(v51);
      v53 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 24, 8);
      *(_DWORD *)v53 = 1;
      *((_QWORD *)v53 + 1) = 9;
      *((_QWORD *)v53 + 2) = "OneMinusDestinationAlpha";
      qword_25411B9F0 = (uint64_t)v53;
      v54 = re::introspectionAllocator(v53);
      v55 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 24, 8);
      *(_DWORD *)v55 = 1;
      *((_QWORD *)v55 + 1) = 10;
      *((_QWORD *)v55 + 2) = "SourceAlphaSaturated";
      qword_25411B9F8 = (uint64_t)v55;
      v56 = re::introspectionAllocator(v55);
      v57 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 24, 8);
      *(_DWORD *)v57 = 1;
      *((_QWORD *)v57 + 1) = 11;
      *((_QWORD *)v57 + 2) = "BlendColor";
      qword_25411BA00 = (uint64_t)v57;
      v58 = re::introspectionAllocator(v57);
      v59 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 24, 8);
      *(_DWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = 12;
      *((_QWORD *)v59 + 2) = "OneMinusBlendColor";
      qword_25411BA08 = (uint64_t)v59;
      v60 = re::introspectionAllocator(v59);
      v61 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 24, 8);
      *(_DWORD *)v61 = 1;
      *((_QWORD *)v61 + 1) = 13;
      *((_QWORD *)v61 + 2) = "BlendAlpha";
      qword_25411BA10 = (uint64_t)v61;
      v62 = re::introspectionAllocator(v61);
      v63 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 24, 8);
      *(_DWORD *)v63 = 1;
      *((_QWORD *)v63 + 1) = 14;
      *((_QWORD *)v63 + 2) = "OneMinusBlendAlpha";
      qword_25411BA18 = (uint64_t)v63;
      v64 = re::introspectionAllocator(v63);
      v65 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 24, 8);
      *(_DWORD *)v65 = 1;
      *((_QWORD *)v65 + 1) = 15;
      *((_QWORD *)v65 + 2) = "Source1Color";
      qword_25411BA20 = (uint64_t)v65;
      v66 = re::introspectionAllocator(v65);
      v67 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 24, 8);
      *(_DWORD *)v67 = 1;
      *((_QWORD *)v67 + 1) = 16;
      *((_QWORD *)v67 + 2) = "OneMinusSource1Color";
      qword_25411BA28 = (uint64_t)v67;
      v68 = re::introspectionAllocator(v67);
      v69 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v68 + 32))(v68, 24, 8);
      *(_DWORD *)v69 = 1;
      *((_QWORD *)v69 + 1) = 17;
      *((_QWORD *)v69 + 2) = "Source1Alpha";
      qword_25411BA30 = (uint64_t)v69;
      v70 = re::introspectionAllocator(v69);
      v71 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v70 + 32))(v70, 24, 8);
      *(_DWORD *)v71 = 1;
      *(_QWORD *)(v71 + 8) = 18;
      *(_QWORD *)(v71 + 16) = "OneMinusSource1Alpha";
      qword_25411BA38 = v71;
      __cxa_guard_release(&qword_25411B300);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25411B308);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411B308))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B5B0, "BlendFactor", 4, 4, 1, 1);
    qword_25411B5B0 = (uint64_t)&off_24ED7D9E8;
    qword_25411B5F0 = (uint64_t)&re::mtl::introspect_BlendFactor(BOOL)::enumTable;
    dword_25411B5C0 = 9;
    __cxa_guard_release(&qword_25411B308);
  }
  if (v2)
  {
    if ((byte_25411B2E1 & 1) != 0)
      return &qword_25411B5B0;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v77);
    v5 = byte_25411B2E1;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v77);
    if ((v5 & 1) != 0)
      return &qword_25411B5B0;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25411B2E1 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_25411B5B0;
    }
  }
  byte_25411B2E1 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B5B0, a2);
  v73 = 0x1954B877535D9C0;
  v74 = "BlendFactor";
  v77[0] = 208862;
  v77[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v77);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v77);
    v11 = (unsigned int *)qword_25411B5F0;
    v76[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v77, &v73, 1, 1, (uint64_t)v76);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v75.var0 = 2 * v17;
          v75.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v77, v21, &v75);
          re::StringID::destroyString((re::StringID *)&v75);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v75.var0 = 2 * v25;
            v75.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v77, v29, &v75);
            re::StringID::destroyString((re::StringID *)&v75);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v77, v30);
    xmmword_25411B5D0 = (__int128)v75;
    re::StringID::destroyString((re::StringID *)&v73);
    if ((v2 & 1) != 0)
      return &qword_25411B5B0;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v77);
  re::internal::assertLog((re::internal *)5, v72, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BlendFactor", v73, v74);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void *re::mtl::introspect_BlendOperation(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::IntrospectionBasic *v22;
  uint64_t v23[2];
  __int128 v24;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Add";
      re::mtl::introspect_BlendOperation(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Subtract";
      qword_255829B28 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "ReverseSubtract";
      qword_255829B30 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 3;
      *((_QWORD *)v19 + 2) = "Min";
      qword_255829B38 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 4;
      *(_QWORD *)(v21 + 16) = "Max";
      qword_255829B40 = v21;
    }
  }
  {
    v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_BlendOperation(BOOL)::info, "BlendOperation", 4, 4, 1, 1);
    *(_QWORD *)v22 = &off_24ED7D9E8;
    *((_QWORD *)v22 + 8) = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_BlendOperation(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_BlendOperation(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    v5 = re::mtl::introspect_BlendOperation(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_BlendOperation(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_BlendOperation(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_BlendOperation(BOOL)::info;
    }
  }
  re::mtl::introspect_BlendOperation(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_BlendOperation(BOOL)::info, a2);
  v23[0] = 0x3CA077184A19D86CLL;
  v23[1] = (uint64_t)"BlendOperation";
  xmmword_255829B70 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_BlendOperation(BOOL)::info;
}

uint64_t *re::mtl::introspect_ColorWriteMask(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  re *v49;
  uint64_t *v50;
  re *v51;
  uint64_t *v52;
  re *v53;
  uint64_t *v54;
  re *v55;
  uint64_t *v56;
  re *v57;
  uint64_t *v58;
  re *v59;
  uint64_t *v60;
  re *v61;
  uint64_t *v62;
  re *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  StringID v69;
  _QWORD v70[2];
  _QWORD v71[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_25411B310);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_25411B310);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "None";
      qword_25411B928 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "Alpha";
      qword_25411B930 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 2;
      *((_QWORD *)v39 + 2) = "Blue";
      qword_25411B938 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 4;
      *((_QWORD *)v41 + 2) = "Green";
      qword_25411B940 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 8;
      *((_QWORD *)v43 + 2) = "Red";
      qword_25411B948 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 12;
      *((_QWORD *)v45 + 2) = "RedGreen";
      qword_25411B950 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 10;
      *((_QWORD *)v47 + 2) = "RedBlue";
      qword_25411B958 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *((_QWORD *)v49 + 1) = 6;
      *((_QWORD *)v49 + 2) = "GreenBlue";
      qword_25411B960 = (uint64_t)v49;
      v50 = re::introspectionAllocator(v49);
      v51 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 24, 8);
      *(_DWORD *)v51 = 1;
      *((_QWORD *)v51 + 1) = 9;
      *((_QWORD *)v51 + 2) = "RedAlpha";
      qword_25411B968 = (uint64_t)v51;
      v52 = re::introspectionAllocator(v51);
      v53 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 24, 8);
      *(_DWORD *)v53 = 1;
      *((_QWORD *)v53 + 1) = 5;
      *((_QWORD *)v53 + 2) = "GreenAlpha";
      qword_25411B970 = (uint64_t)v53;
      v54 = re::introspectionAllocator(v53);
      v55 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 24, 8);
      *(_DWORD *)v55 = 1;
      *((_QWORD *)v55 + 1) = 3;
      *((_QWORD *)v55 + 2) = "BlueAlpha";
      qword_25411B978 = (uint64_t)v55;
      v56 = re::introspectionAllocator(v55);
      v57 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 24, 8);
      *(_DWORD *)v57 = 1;
      *((_QWORD *)v57 + 1) = 14;
      *((_QWORD *)v57 + 2) = "RedGreenBlue";
      qword_25411B980 = (uint64_t)v57;
      v58 = re::introspectionAllocator(v57);
      v59 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 24, 8);
      *(_DWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = 13;
      *((_QWORD *)v59 + 2) = "RedGreenAlpha";
      qword_25411B988 = (uint64_t)v59;
      v60 = re::introspectionAllocator(v59);
      v61 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 24, 8);
      *(_DWORD *)v61 = 1;
      *((_QWORD *)v61 + 1) = 11;
      *((_QWORD *)v61 + 2) = "RedBlueAlpha";
      qword_25411B990 = (uint64_t)v61;
      v62 = re::introspectionAllocator(v61);
      v63 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 24, 8);
      *(_DWORD *)v63 = 1;
      *((_QWORD *)v63 + 1) = 7;
      *((_QWORD *)v63 + 2) = "GreenBlueAlpha";
      qword_25411B998 = (uint64_t)v63;
      v64 = re::introspectionAllocator(v63);
      v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 24, 8);
      *(_DWORD *)v65 = 1;
      *(_QWORD *)(v65 + 8) = 15;
      *(_QWORD *)(v65 + 16) = "All";
      qword_25411B9A0 = v65;
      __cxa_guard_release(&qword_25411B310);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25411B318);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411B318))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B5F8, "ColorWriteMask", 4, 4, 1, 1);
    qword_25411B5F8 = (uint64_t)&off_24ED7D9E8;
    qword_25411B638 = (uint64_t)&re::mtl::introspect_ColorWriteMask(BOOL)::enumTable;
    dword_25411B608 = 9;
    __cxa_guard_release(&qword_25411B318);
  }
  if (v2)
  {
    if ((byte_25411B2E2 & 1) != 0)
      return &qword_25411B5F8;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v71);
    v5 = byte_25411B2E2;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v71);
    if ((v5 & 1) != 0)
      return &qword_25411B5F8;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25411B2E2 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_25411B5F8;
    }
  }
  byte_25411B2E2 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B5F8, a2);
  v67 = 0x28E7E0D0848E4ED0;
  v68 = "ColorWriteMask";
  v71[0] = 208862;
  v71[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v71);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v71);
    v11 = (unsigned int *)qword_25411B638;
    v70[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v71, &v67, 1, 1, (uint64_t)v70);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v69.var0 = 2 * v17;
          v69.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v71, v21, &v69);
          re::StringID::destroyString((re::StringID *)&v69);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v69.var0 = 2 * v25;
            v69.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v71, v29, &v69);
            re::StringID::destroyString((re::StringID *)&v69);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v71, v30);
    xmmword_25411B618 = (__int128)v69;
    re::StringID::destroyString((re::StringID *)&v67);
    if ((v2 & 1) != 0)
      return &qword_25411B5F8;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v71);
  re::internal::assertLog((re::internal *)5, v66, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ColorWriteMask", v67, v68);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void *re::mtl::introspect_CullMode(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "CullModeNone";
      re::mtl::introspect_CullMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "CullModeFront";
      qword_255829BB0 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "CullModeBack";
      qword_255829BB8 = v17;
    }
  }
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_CullMode(BOOL)::info, "CullMode", 1, 1, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &re::mtl::introspect_CullMode(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_CullMode(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_CullMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = re::mtl::introspect_CullMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_CullMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_CullMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_CullMode(BOOL)::info;
    }
  }
  re::mtl::introspect_CullMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_CullMode(BOOL)::info, a2);
  v19[0] = 0x38C37139CAALL;
  v19[1] = (uint64_t)"CullMode";
  xmmword_255829BE8 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_CullMode(BOOL)::info;
}

void *re::mtl::introspect_TextureUsage(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::IntrospectionBasic *v22;
  uint64_t v23[2];
  __int128 v24;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Unknown";
      re::mtl::introspect_TextureUsage(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "ShaderRead";
      qword_255829C28 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "ShaderWrite";
      qword_255829C30 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 4;
      *((_QWORD *)v19 + 2) = "RenderTarget";
      qword_255829C38 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 16;
      *(_QWORD *)(v21 + 16) = "PixelFormatView";
      qword_255829C40 = v21;
    }
  }
  {
    v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_TextureUsage(BOOL)::info, "TextureUsage", 4, 4, 1, 1);
    *(_QWORD *)v22 = &off_24ED7D9E8;
    *((_QWORD *)v22 + 8) = &re::mtl::introspect_TextureUsage(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_TextureUsage(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_TextureUsage(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    v5 = re::mtl::introspect_TextureUsage(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_TextureUsage(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_TextureUsage(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_TextureUsage(BOOL)::info;
    }
  }
  re::mtl::introspect_TextureUsage(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_TextureUsage(BOOL)::info, a2);
  v23[0] = 0x3DA0ACA55F420ACCLL;
  v23[1] = (uint64_t)"TextureUsage";
  xmmword_255829C70 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_TextureUsage(BOOL)::info;
}

void *re::mtl::introspect_VertexStepFunction(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::IntrospectionBasic *v22;
  uint64_t v23[2];
  __int128 v24;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Constant";
      re::mtl::introspect_VertexStepFunction(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "PerVertex";
      qword_255829CB0 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "PerInstance";
      qword_255829CB8 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 3;
      *((_QWORD *)v19 + 2) = "PerPatch";
      qword_255829CC0 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 4;
      *(_QWORD *)(v21 + 16) = "PerPatchControlPoint";
      qword_255829CC8 = v21;
    }
  }
  {
    v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_VertexStepFunction(BOOL)::info, "VertexStepFunction", 1, 1, 1, 1);
    *(_QWORD *)v22 = &off_24ED7D9E8;
    *((_QWORD *)v22 + 8) = &re::mtl::introspect_VertexStepFunction(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_VertexStepFunction(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_VertexStepFunction(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    v5 = re::mtl::introspect_VertexStepFunction(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_VertexStepFunction(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_VertexStepFunction(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_VertexStepFunction(BOOL)::info;
    }
  }
  re::mtl::introspect_VertexStepFunction(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_VertexStepFunction(BOOL)::info, a2);
  v23[0] = 0xF4871ED6F7417D50;
  v23[1] = (uint64_t)"VertexStepFunction";
  xmmword_255829CF8 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_VertexStepFunction(BOOL)::info;
}

uint64_t *re::mtl::introspect_VertexFormat(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  re *v49;
  uint64_t *v50;
  re *v51;
  uint64_t *v52;
  re *v53;
  uint64_t *v54;
  re *v55;
  uint64_t *v56;
  re *v57;
  uint64_t *v58;
  re *v59;
  uint64_t *v60;
  re *v61;
  uint64_t *v62;
  re *v63;
  uint64_t *v64;
  re *v65;
  uint64_t *v66;
  re *v67;
  uint64_t *v68;
  re *v69;
  uint64_t *v70;
  re *v71;
  uint64_t *v72;
  re *v73;
  uint64_t *v74;
  re *v75;
  uint64_t *v76;
  re *v77;
  uint64_t *v78;
  re *v79;
  uint64_t *v80;
  re *v81;
  uint64_t *v82;
  re *v83;
  uint64_t *v84;
  re *v85;
  uint64_t *v86;
  re *v87;
  uint64_t *v88;
  re *v89;
  uint64_t *v90;
  re *v91;
  uint64_t *v92;
  re *v93;
  uint64_t *v94;
  re *v95;
  uint64_t *v96;
  re *v97;
  uint64_t *v98;
  re *v99;
  uint64_t *v100;
  re *v101;
  uint64_t *v102;
  re *v103;
  uint64_t *v104;
  re *v105;
  uint64_t *v106;
  re *v107;
  uint64_t *v108;
  re *v109;
  uint64_t *v110;
  re *v111;
  uint64_t *v112;
  re *v113;
  uint64_t *v114;
  re *v115;
  uint64_t *v116;
  re *v117;
  uint64_t *v118;
  re *v119;
  uint64_t *v120;
  re *v121;
  uint64_t *v122;
  re *v123;
  uint64_t *v124;
  re *v125;
  uint64_t *v126;
  re *v127;
  uint64_t *v128;
  re *v129;
  uint64_t *v130;
  re *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  StringID v137;
  _QWORD v138[2];
  _QWORD v139[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_25411B320);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_25411B320);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "Invalid";
      qword_25411BA40 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 45;
      *((_QWORD *)v37 + 2) = "UChar";
      qword_25411BA48 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 1;
      *((_QWORD *)v39 + 2) = "UChar2";
      qword_25411BA50 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 2;
      *((_QWORD *)v41 + 2) = "UChar3";
      qword_25411BA58 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 3;
      *((_QWORD *)v43 + 2) = "UChar4";
      qword_25411BA60 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 46;
      *((_QWORD *)v45 + 2) = "Char";
      qword_25411BA68 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 4;
      *((_QWORD *)v47 + 2) = "Char2";
      qword_25411BA70 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *((_QWORD *)v49 + 1) = 5;
      *((_QWORD *)v49 + 2) = "Char3";
      qword_25411BA78 = (uint64_t)v49;
      v50 = re::introspectionAllocator(v49);
      v51 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 24, 8);
      *(_DWORD *)v51 = 1;
      *((_QWORD *)v51 + 1) = 6;
      *((_QWORD *)v51 + 2) = "Char4";
      qword_25411BA80 = (uint64_t)v51;
      v52 = re::introspectionAllocator(v51);
      v53 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 24, 8);
      *(_DWORD *)v53 = 1;
      *((_QWORD *)v53 + 1) = 47;
      *((_QWORD *)v53 + 2) = "UCharNormalized";
      qword_25411BA88 = (uint64_t)v53;
      v54 = re::introspectionAllocator(v53);
      v55 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 24, 8);
      *(_DWORD *)v55 = 1;
      *((_QWORD *)v55 + 1) = 7;
      *((_QWORD *)v55 + 2) = "UChar2Normalized";
      qword_25411BA90 = (uint64_t)v55;
      v56 = re::introspectionAllocator(v55);
      v57 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 24, 8);
      *(_DWORD *)v57 = 1;
      *((_QWORD *)v57 + 1) = 8;
      *((_QWORD *)v57 + 2) = "UChar3Normalized";
      qword_25411BA98 = (uint64_t)v57;
      v58 = re::introspectionAllocator(v57);
      v59 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 24, 8);
      *(_DWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = 9;
      *((_QWORD *)v59 + 2) = "UChar4Normalized";
      qword_25411BAA0 = (uint64_t)v59;
      v60 = re::introspectionAllocator(v59);
      v61 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 24, 8);
      *(_DWORD *)v61 = 1;
      *((_QWORD *)v61 + 1) = 42;
      *((_QWORD *)v61 + 2) = "UChar4Normalized_BGRA";
      qword_25411BAA8 = (uint64_t)v61;
      v62 = re::introspectionAllocator(v61);
      v63 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 24, 8);
      *(_DWORD *)v63 = 1;
      *((_QWORD *)v63 + 1) = 48;
      *((_QWORD *)v63 + 2) = "CharNormalized";
      qword_25411BAB0 = (uint64_t)v63;
      v64 = re::introspectionAllocator(v63);
      v65 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 24, 8);
      *(_DWORD *)v65 = 1;
      *((_QWORD *)v65 + 1) = 10;
      *((_QWORD *)v65 + 2) = "Char2Normalized";
      qword_25411BAB8 = (uint64_t)v65;
      v66 = re::introspectionAllocator(v65);
      v67 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 24, 8);
      *(_DWORD *)v67 = 1;
      *((_QWORD *)v67 + 1) = 11;
      *((_QWORD *)v67 + 2) = "Char3Normalized";
      qword_25411BAC0 = (uint64_t)v67;
      v68 = re::introspectionAllocator(v67);
      v69 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v68 + 32))(v68, 24, 8);
      *(_DWORD *)v69 = 1;
      *((_QWORD *)v69 + 1) = 12;
      *((_QWORD *)v69 + 2) = "Char4Normalized";
      qword_25411BAC8 = (uint64_t)v69;
      v70 = re::introspectionAllocator(v69);
      v71 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v70 + 32))(v70, 24, 8);
      *(_DWORD *)v71 = 1;
      *((_QWORD *)v71 + 1) = 49;
      *((_QWORD *)v71 + 2) = "UShort";
      qword_25411BAD0 = (uint64_t)v71;
      v72 = re::introspectionAllocator(v71);
      v73 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v72 + 32))(v72, 24, 8);
      *(_DWORD *)v73 = 1;
      *((_QWORD *)v73 + 1) = 13;
      *((_QWORD *)v73 + 2) = "UShort2";
      qword_25411BAD8 = (uint64_t)v73;
      v74 = re::introspectionAllocator(v73);
      v75 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v74 + 32))(v74, 24, 8);
      *(_DWORD *)v75 = 1;
      *((_QWORD *)v75 + 1) = 14;
      *((_QWORD *)v75 + 2) = "UShort3";
      qword_25411BAE0 = (uint64_t)v75;
      v76 = re::introspectionAllocator(v75);
      v77 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v76 + 32))(v76, 24, 8);
      *(_DWORD *)v77 = 1;
      *((_QWORD *)v77 + 1) = 15;
      *((_QWORD *)v77 + 2) = "UShort4";
      qword_25411BAE8 = (uint64_t)v77;
      v78 = re::introspectionAllocator(v77);
      v79 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v78 + 32))(v78, 24, 8);
      *(_DWORD *)v79 = 1;
      *((_QWORD *)v79 + 1) = 50;
      *((_QWORD *)v79 + 2) = "Short";
      qword_25411BAF0 = (uint64_t)v79;
      v80 = re::introspectionAllocator(v79);
      v81 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v80 + 32))(v80, 24, 8);
      *(_DWORD *)v81 = 1;
      *((_QWORD *)v81 + 1) = 16;
      *((_QWORD *)v81 + 2) = "Short2";
      qword_25411BAF8 = (uint64_t)v81;
      v82 = re::introspectionAllocator(v81);
      v83 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v82 + 32))(v82, 24, 8);
      *(_DWORD *)v83 = 1;
      *((_QWORD *)v83 + 1) = 17;
      *((_QWORD *)v83 + 2) = "Short3";
      qword_25411BB00 = (uint64_t)v83;
      v84 = re::introspectionAllocator(v83);
      v85 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v84 + 32))(v84, 24, 8);
      *(_DWORD *)v85 = 1;
      *((_QWORD *)v85 + 1) = 18;
      *((_QWORD *)v85 + 2) = "Short4";
      qword_25411BB08 = (uint64_t)v85;
      v86 = re::introspectionAllocator(v85);
      v87 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v86 + 32))(v86, 24, 8);
      *(_DWORD *)v87 = 1;
      *((_QWORD *)v87 + 1) = 51;
      *((_QWORD *)v87 + 2) = "UShortNormalized";
      qword_25411BB10 = (uint64_t)v87;
      v88 = re::introspectionAllocator(v87);
      v89 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v88 + 32))(v88, 24, 8);
      *(_DWORD *)v89 = 1;
      *((_QWORD *)v89 + 1) = 19;
      *((_QWORD *)v89 + 2) = "UShort2Normalized";
      qword_25411BB18 = (uint64_t)v89;
      v90 = re::introspectionAllocator(v89);
      v91 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v90 + 32))(v90, 24, 8);
      *(_DWORD *)v91 = 1;
      *((_QWORD *)v91 + 1) = 20;
      *((_QWORD *)v91 + 2) = "UShort3Normalized";
      qword_25411BB20 = (uint64_t)v91;
      v92 = re::introspectionAllocator(v91);
      v93 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v92 + 32))(v92, 24, 8);
      *(_DWORD *)v93 = 1;
      *((_QWORD *)v93 + 1) = 21;
      *((_QWORD *)v93 + 2) = "UShort4Normalized";
      qword_25411BB28 = (uint64_t)v93;
      v94 = re::introspectionAllocator(v93);
      v95 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v94 + 32))(v94, 24, 8);
      *(_DWORD *)v95 = 1;
      *((_QWORD *)v95 + 1) = 52;
      *((_QWORD *)v95 + 2) = "ShortNormalized";
      qword_25411BB30 = (uint64_t)v95;
      v96 = re::introspectionAllocator(v95);
      v97 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v96 + 32))(v96, 24, 8);
      *(_DWORD *)v97 = 1;
      *((_QWORD *)v97 + 1) = 22;
      *((_QWORD *)v97 + 2) = "Short2Normalized";
      qword_25411BB38 = (uint64_t)v97;
      v98 = re::introspectionAllocator(v97);
      v99 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v98 + 32))(v98, 24, 8);
      *(_DWORD *)v99 = 1;
      *((_QWORD *)v99 + 1) = 23;
      *((_QWORD *)v99 + 2) = "Short3Normalized";
      qword_25411BB40 = (uint64_t)v99;
      v100 = re::introspectionAllocator(v99);
      v101 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v100 + 32))(v100, 24, 8);
      *(_DWORD *)v101 = 1;
      *((_QWORD *)v101 + 1) = 24;
      *((_QWORD *)v101 + 2) = "Short4Normalized";
      qword_25411BB48 = (uint64_t)v101;
      v102 = re::introspectionAllocator(v101);
      v103 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v102 + 32))(v102, 24, 8);
      *(_DWORD *)v103 = 1;
      *((_QWORD *)v103 + 1) = 53;
      *((_QWORD *)v103 + 2) = "Half";
      qword_25411BB50 = (uint64_t)v103;
      v104 = re::introspectionAllocator(v103);
      v105 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v104 + 32))(v104, 24, 8);
      *(_DWORD *)v105 = 1;
      *((_QWORD *)v105 + 1) = 25;
      *((_QWORD *)v105 + 2) = "Half2";
      qword_25411BB58 = (uint64_t)v105;
      v106 = re::introspectionAllocator(v105);
      v107 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v106 + 32))(v106, 24, 8);
      *(_DWORD *)v107 = 1;
      *((_QWORD *)v107 + 1) = 26;
      *((_QWORD *)v107 + 2) = "Half3";
      qword_25411BB60 = (uint64_t)v107;
      v108 = re::introspectionAllocator(v107);
      v109 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v108 + 32))(v108, 24, 8);
      *(_DWORD *)v109 = 1;
      *((_QWORD *)v109 + 1) = 27;
      *((_QWORD *)v109 + 2) = "Half4";
      qword_25411BB68 = (uint64_t)v109;
      v110 = re::introspectionAllocator(v109);
      v111 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v110 + 32))(v110, 24, 8);
      *(_DWORD *)v111 = 1;
      *((_QWORD *)v111 + 1) = 28;
      *((_QWORD *)v111 + 2) = "Float";
      qword_25411BB70 = (uint64_t)v111;
      v112 = re::introspectionAllocator(v111);
      v113 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v112 + 32))(v112, 24, 8);
      *(_DWORD *)v113 = 1;
      *((_QWORD *)v113 + 1) = 29;
      *((_QWORD *)v113 + 2) = "Float2";
      qword_25411BB78 = (uint64_t)v113;
      v114 = re::introspectionAllocator(v113);
      v115 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v114 + 32))(v114, 24, 8);
      *(_DWORD *)v115 = 1;
      *((_QWORD *)v115 + 1) = 30;
      *((_QWORD *)v115 + 2) = "Float3";
      qword_25411BB80 = (uint64_t)v115;
      v116 = re::introspectionAllocator(v115);
      v117 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v116 + 32))(v116, 24, 8);
      *(_DWORD *)v117 = 1;
      *((_QWORD *)v117 + 1) = 31;
      *((_QWORD *)v117 + 2) = "Float4";
      qword_25411BB88 = (uint64_t)v117;
      v118 = re::introspectionAllocator(v117);
      v119 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v118 + 32))(v118, 24, 8);
      *(_DWORD *)v119 = 1;
      *((_QWORD *)v119 + 1) = 32;
      *((_QWORD *)v119 + 2) = "Int";
      qword_25411BB90 = (uint64_t)v119;
      v120 = re::introspectionAllocator(v119);
      v121 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v120 + 32))(v120, 24, 8);
      *(_DWORD *)v121 = 1;
      *((_QWORD *)v121 + 1) = 33;
      *((_QWORD *)v121 + 2) = "Int2";
      qword_25411BB98 = (uint64_t)v121;
      v122 = re::introspectionAllocator(v121);
      v123 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v122 + 32))(v122, 24, 8);
      *(_DWORD *)v123 = 1;
      *((_QWORD *)v123 + 1) = 34;
      *((_QWORD *)v123 + 2) = "Int3";
      qword_25411BBA0 = (uint64_t)v123;
      v124 = re::introspectionAllocator(v123);
      v125 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v124 + 32))(v124, 24, 8);
      *(_DWORD *)v125 = 1;
      *((_QWORD *)v125 + 1) = 35;
      *((_QWORD *)v125 + 2) = "Int4";
      qword_25411BBA8 = (uint64_t)v125;
      v126 = re::introspectionAllocator(v125);
      v127 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v126 + 32))(v126, 24, 8);
      *(_DWORD *)v127 = 1;
      *((_QWORD *)v127 + 1) = 36;
      *((_QWORD *)v127 + 2) = "UInt";
      qword_25411BBB0 = (uint64_t)v127;
      v128 = re::introspectionAllocator(v127);
      v129 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v128 + 32))(v128, 24, 8);
      *(_DWORD *)v129 = 1;
      *((_QWORD *)v129 + 1) = 37;
      *((_QWORD *)v129 + 2) = "UInt2";
      qword_25411BBB8 = (uint64_t)v129;
      v130 = re::introspectionAllocator(v129);
      v131 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v130 + 32))(v130, 24, 8);
      *(_DWORD *)v131 = 1;
      *((_QWORD *)v131 + 1) = 38;
      *((_QWORD *)v131 + 2) = "UInt3";
      qword_25411BBC0 = (uint64_t)v131;
      v132 = re::introspectionAllocator(v131);
      v133 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v132 + 32))(v132, 24, 8);
      *(_DWORD *)v133 = 1;
      *(_QWORD *)(v133 + 8) = 39;
      *(_QWORD *)(v133 + 16) = "UInt4";
      qword_25411BBC8 = v133;
      __cxa_guard_release(&qword_25411B320);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25411B328);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411B328))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B640, "VertexFormat", 1, 1, 1, 1);
    qword_25411B640 = (uint64_t)&off_24ED7D9E8;
    qword_25411B680 = (uint64_t)&re::mtl::introspect_VertexFormat(BOOL)::enumTable;
    dword_25411B650 = 9;
    __cxa_guard_release(&qword_25411B328);
  }
  if (v2)
  {
    if ((byte_25411B2E3 & 1) != 0)
      return &qword_25411B640;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v139);
    v5 = byte_25411B2E3;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v139);
    if ((v5 & 1) != 0)
      return &qword_25411B640;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25411B2E3 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_25411B640;
    }
  }
  byte_25411B2E3 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B640, a2);
  v135 = 0x3F089ECB224C3DB6;
  v136 = "VertexFormat";
  v139[0] = 0x31CD534126;
  v139[1] = "uint8_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v139);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v139);
    v11 = (unsigned int *)qword_25411B680;
    v138[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v139, &v135, 1, 1, (uint64_t)v138);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v137.var0 = 2 * v17;
          v137.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v139, v21, &v137);
          re::StringID::destroyString((re::StringID *)&v137);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v137.var0 = 2 * v25;
            v137.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v139, v29, &v137);
            re::StringID::destroyString((re::StringID *)&v137);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v139, v30);
    xmmword_25411B660 = (__int128)v137;
    re::StringID::destroyString((re::StringID *)&v135);
    if ((v2 & 1) != 0)
      return &qword_25411B640;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v139);
  re::internal::assertLog((re::internal *)5, v134, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "VertexFormat", v135, v136);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t *re::mtl::introspect_PixelFormat(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  re *v49;
  uint64_t *v50;
  re *v51;
  uint64_t *v52;
  re *v53;
  uint64_t *v54;
  re *v55;
  uint64_t *v56;
  re *v57;
  uint64_t *v58;
  re *v59;
  uint64_t *v60;
  re *v61;
  uint64_t *v62;
  re *v63;
  uint64_t *v64;
  re *v65;
  uint64_t *v66;
  re *v67;
  uint64_t *v68;
  re *v69;
  uint64_t *v70;
  re *v71;
  uint64_t *v72;
  re *v73;
  uint64_t *v74;
  re *v75;
  uint64_t *v76;
  re *v77;
  uint64_t *v78;
  re *v79;
  uint64_t *v80;
  re *v81;
  uint64_t *v82;
  re *v83;
  uint64_t *v84;
  re *v85;
  uint64_t *v86;
  re *v87;
  uint64_t *v88;
  re *v89;
  uint64_t *v90;
  re *v91;
  uint64_t *v92;
  re *v93;
  uint64_t *v94;
  re *v95;
  uint64_t *v96;
  re *v97;
  uint64_t *v98;
  re *v99;
  uint64_t *v100;
  re *v101;
  uint64_t *v102;
  re *v103;
  uint64_t *v104;
  re *v105;
  uint64_t *v106;
  re *v107;
  uint64_t *v108;
  re *v109;
  uint64_t *v110;
  re *v111;
  uint64_t *v112;
  re *v113;
  uint64_t *v114;
  re *v115;
  uint64_t *v116;
  re *v117;
  uint64_t *v118;
  re *v119;
  uint64_t *v120;
  re *v121;
  uint64_t *v122;
  re *v123;
  uint64_t *v124;
  re *v125;
  uint64_t *v126;
  re *v127;
  uint64_t *v128;
  re *v129;
  uint64_t *v130;
  re *v131;
  uint64_t *v132;
  re *v133;
  uint64_t *v134;
  re *v135;
  uint64_t *v136;
  re *v137;
  uint64_t *v138;
  re *v139;
  uint64_t *v140;
  re *v141;
  uint64_t *v142;
  re *v143;
  uint64_t *v144;
  re *v145;
  uint64_t *v146;
  re *v147;
  uint64_t *v148;
  re *v149;
  uint64_t *v150;
  re *v151;
  uint64_t *v152;
  re *v153;
  uint64_t *v154;
  re *v155;
  uint64_t *v156;
  re *v157;
  uint64_t *v158;
  re *v159;
  uint64_t *v160;
  re *v161;
  uint64_t *v162;
  re *v163;
  uint64_t *v164;
  re *v165;
  uint64_t *v166;
  re *v167;
  uint64_t *v168;
  re *v169;
  uint64_t *v170;
  re *v171;
  uint64_t *v172;
  re *v173;
  uint64_t *v174;
  re *v175;
  uint64_t *v176;
  re *v177;
  uint64_t *v178;
  re *v179;
  uint64_t *v180;
  re *v181;
  uint64_t *v182;
  re *v183;
  uint64_t *v184;
  re *v185;
  uint64_t *v186;
  re *v187;
  uint64_t *v188;
  re *v189;
  uint64_t *v190;
  re *v191;
  uint64_t *v192;
  re *v193;
  uint64_t *v194;
  re *v195;
  uint64_t *v196;
  re *v197;
  uint64_t *v198;
  re *v199;
  uint64_t *v200;
  re *v201;
  uint64_t *v202;
  re *v203;
  uint64_t *v204;
  re *v205;
  uint64_t *v206;
  re *v207;
  uint64_t *v208;
  re *v209;
  uint64_t *v210;
  re *v211;
  uint64_t *v212;
  re *v213;
  uint64_t *v214;
  re *v215;
  uint64_t *v216;
  re *v217;
  uint64_t *v218;
  re *v219;
  uint64_t *v220;
  re *v221;
  uint64_t *v222;
  re *v223;
  uint64_t *v224;
  re *v225;
  uint64_t *v226;
  re *v227;
  uint64_t *v228;
  re *v229;
  uint64_t *v230;
  re *v231;
  uint64_t *v232;
  re *v233;
  uint64_t *v234;
  re *v235;
  uint64_t *v236;
  re *v237;
  uint64_t *v238;
  re *v239;
  uint64_t *v240;
  re *v241;
  uint64_t *v242;
  re *v243;
  uint64_t *v244;
  re *v245;
  uint64_t *v246;
  re *v247;
  uint64_t *v248;
  re *v249;
  uint64_t *v250;
  re *v251;
  uint64_t *v252;
  re *v253;
  uint64_t *v254;
  re *v255;
  uint64_t *v256;
  re *v257;
  uint64_t *v258;
  re *v259;
  uint64_t *v260;
  re *v261;
  uint64_t *v262;
  re *v263;
  uint64_t *v264;
  re *v265;
  uint64_t *v266;
  re *v267;
  uint64_t *v268;
  re *v269;
  uint64_t *v270;
  re *v271;
  uint64_t *v272;
  re *v273;
  uint64_t *v274;
  re *v275;
  uint64_t *v276;
  re *v277;
  uint64_t *v278;
  re *v279;
  uint64_t *v280;
  re *v281;
  uint64_t *v282;
  re *v283;
  uint64_t *v284;
  re *v285;
  uint64_t *v286;
  re *v287;
  uint64_t *v288;
  re *v289;
  uint64_t *v290;
  re *v291;
  uint64_t *v292;
  re *v293;
  uint64_t *v294;
  re *v295;
  uint64_t *v296;
  re *v297;
  uint64_t *v298;
  re *v299;
  uint64_t *v300;
  re *v301;
  uint64_t *v302;
  re *v303;
  uint64_t *v304;
  re *v305;
  uint64_t *v306;
  re *v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  const char *v312;
  StringID v313;
  _QWORD v314[2];
  _QWORD v315[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_25411B330);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_25411B330);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "Invalid";
      qword_25411BBD0 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "A8Unorm";
      qword_25411BBD8 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 10;
      *((_QWORD *)v39 + 2) = "R8Unorm";
      qword_25411BBE0 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 11;
      *((_QWORD *)v41 + 2) = "R8Unorm_sRGB";
      qword_25411BBE8 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 12;
      *((_QWORD *)v43 + 2) = "R8Snorm";
      qword_25411BBF0 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 13;
      *((_QWORD *)v45 + 2) = "R8Uint";
      qword_25411BBF8 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 14;
      *((_QWORD *)v47 + 2) = "R8Sint";
      qword_25411BC00 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *((_QWORD *)v49 + 1) = 20;
      *((_QWORD *)v49 + 2) = "R16Unorm";
      qword_25411BC08 = (uint64_t)v49;
      v50 = re::introspectionAllocator(v49);
      v51 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 24, 8);
      *(_DWORD *)v51 = 1;
      *((_QWORD *)v51 + 1) = 22;
      *((_QWORD *)v51 + 2) = "R16Snorm";
      qword_25411BC10 = (uint64_t)v51;
      v52 = re::introspectionAllocator(v51);
      v53 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 24, 8);
      *(_DWORD *)v53 = 1;
      *((_QWORD *)v53 + 1) = 23;
      *((_QWORD *)v53 + 2) = "R16Uint";
      qword_25411BC18 = (uint64_t)v53;
      v54 = re::introspectionAllocator(v53);
      v55 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 24, 8);
      *(_DWORD *)v55 = 1;
      *((_QWORD *)v55 + 1) = 24;
      *((_QWORD *)v55 + 2) = "R16Sint";
      qword_25411BC20 = (uint64_t)v55;
      v56 = re::introspectionAllocator(v55);
      v57 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 24, 8);
      *(_DWORD *)v57 = 1;
      *((_QWORD *)v57 + 1) = 25;
      *((_QWORD *)v57 + 2) = "R16Float";
      qword_25411BC28 = (uint64_t)v57;
      v58 = re::introspectionAllocator(v57);
      v59 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 24, 8);
      *(_DWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = 30;
      *((_QWORD *)v59 + 2) = "RG8Unorm";
      qword_25411BC30 = (uint64_t)v59;
      v60 = re::introspectionAllocator(v59);
      v61 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 24, 8);
      *(_DWORD *)v61 = 1;
      *((_QWORD *)v61 + 1) = 31;
      *((_QWORD *)v61 + 2) = "RG8Unorm_sRGB";
      qword_25411BC38 = (uint64_t)v61;
      v62 = re::introspectionAllocator(v61);
      v63 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 24, 8);
      *(_DWORD *)v63 = 1;
      *((_QWORD *)v63 + 1) = 32;
      *((_QWORD *)v63 + 2) = "RG8Snorm";
      qword_25411BC40 = (uint64_t)v63;
      v64 = re::introspectionAllocator(v63);
      v65 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 24, 8);
      *(_DWORD *)v65 = 1;
      *((_QWORD *)v65 + 1) = 33;
      *((_QWORD *)v65 + 2) = "RG8Uint";
      qword_25411BC48 = (uint64_t)v65;
      v66 = re::introspectionAllocator(v65);
      v67 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 24, 8);
      *(_DWORD *)v67 = 1;
      *((_QWORD *)v67 + 1) = 34;
      *((_QWORD *)v67 + 2) = "RG8Sint";
      qword_25411BC50 = (uint64_t)v67;
      v68 = re::introspectionAllocator(v67);
      v69 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v68 + 32))(v68, 24, 8);
      *(_DWORD *)v69 = 1;
      *((_QWORD *)v69 + 1) = 40;
      *((_QWORD *)v69 + 2) = "B5G6R5Unorm";
      qword_25411BC58 = (uint64_t)v69;
      v70 = re::introspectionAllocator(v69);
      v71 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v70 + 32))(v70, 24, 8);
      *(_DWORD *)v71 = 1;
      *((_QWORD *)v71 + 1) = 41;
      *((_QWORD *)v71 + 2) = "A1BGR5Unorm";
      qword_25411BC60 = (uint64_t)v71;
      v72 = re::introspectionAllocator(v71);
      v73 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v72 + 32))(v72, 24, 8);
      *(_DWORD *)v73 = 1;
      *((_QWORD *)v73 + 1) = 42;
      *((_QWORD *)v73 + 2) = "ABGR4Unorm";
      qword_25411BC68 = (uint64_t)v73;
      v74 = re::introspectionAllocator(v73);
      v75 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v74 + 32))(v74, 24, 8);
      *(_DWORD *)v75 = 1;
      *((_QWORD *)v75 + 1) = 43;
      *((_QWORD *)v75 + 2) = "BGR5A1Unorm";
      qword_25411BC70 = (uint64_t)v75;
      v76 = re::introspectionAllocator(v75);
      v77 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v76 + 32))(v76, 24, 8);
      *(_DWORD *)v77 = 1;
      *((_QWORD *)v77 + 1) = 53;
      *((_QWORD *)v77 + 2) = "R32Uint";
      qword_25411BC78 = (uint64_t)v77;
      v78 = re::introspectionAllocator(v77);
      v79 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v78 + 32))(v78, 24, 8);
      *(_DWORD *)v79 = 1;
      *((_QWORD *)v79 + 1) = 54;
      *((_QWORD *)v79 + 2) = "R32Sint";
      qword_25411BC80 = (uint64_t)v79;
      v80 = re::introspectionAllocator(v79);
      v81 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v80 + 32))(v80, 24, 8);
      *(_DWORD *)v81 = 1;
      *((_QWORD *)v81 + 1) = 55;
      *((_QWORD *)v81 + 2) = "R32Float";
      qword_25411BC88 = (uint64_t)v81;
      v82 = re::introspectionAllocator(v81);
      v83 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v82 + 32))(v82, 24, 8);
      *(_DWORD *)v83 = 1;
      *((_QWORD *)v83 + 1) = 60;
      *((_QWORD *)v83 + 2) = "RG16Unorm";
      qword_25411BC90 = (uint64_t)v83;
      v84 = re::introspectionAllocator(v83);
      v85 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v84 + 32))(v84, 24, 8);
      *(_DWORD *)v85 = 1;
      *((_QWORD *)v85 + 1) = 62;
      *((_QWORD *)v85 + 2) = "RG16Snorm";
      qword_25411BC98 = (uint64_t)v85;
      v86 = re::introspectionAllocator(v85);
      v87 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v86 + 32))(v86, 24, 8);
      *(_DWORD *)v87 = 1;
      *((_QWORD *)v87 + 1) = 63;
      *((_QWORD *)v87 + 2) = "RG16Uint";
      qword_25411BCA0 = (uint64_t)v87;
      v88 = re::introspectionAllocator(v87);
      v89 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v88 + 32))(v88, 24, 8);
      *(_DWORD *)v89 = 1;
      *((_QWORD *)v89 + 1) = 64;
      *((_QWORD *)v89 + 2) = "RG16Sint";
      qword_25411BCA8 = (uint64_t)v89;
      v90 = re::introspectionAllocator(v89);
      v91 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v90 + 32))(v90, 24, 8);
      *(_DWORD *)v91 = 1;
      *((_QWORD *)v91 + 1) = 65;
      *((_QWORD *)v91 + 2) = "RG16Float";
      qword_25411BCB0 = (uint64_t)v91;
      v92 = re::introspectionAllocator(v91);
      v93 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v92 + 32))(v92, 24, 8);
      *(_DWORD *)v93 = 1;
      *((_QWORD *)v93 + 1) = 70;
      *((_QWORD *)v93 + 2) = "RGBA8Unorm";
      qword_25411BCB8 = (uint64_t)v93;
      v94 = re::introspectionAllocator(v93);
      v95 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v94 + 32))(v94, 24, 8);
      *(_DWORD *)v95 = 1;
      *((_QWORD *)v95 + 1) = 71;
      *((_QWORD *)v95 + 2) = "RGBA8Unorm_sRGB";
      qword_25411BCC0 = (uint64_t)v95;
      v96 = re::introspectionAllocator(v95);
      v97 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v96 + 32))(v96, 24, 8);
      *(_DWORD *)v97 = 1;
      *((_QWORD *)v97 + 1) = 72;
      *((_QWORD *)v97 + 2) = "RGBA8Snorm";
      qword_25411BCC8 = (uint64_t)v97;
      v98 = re::introspectionAllocator(v97);
      v99 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v98 + 32))(v98, 24, 8);
      *(_DWORD *)v99 = 1;
      *((_QWORD *)v99 + 1) = 73;
      *((_QWORD *)v99 + 2) = "RGBA8Uint";
      qword_25411BCD0 = (uint64_t)v99;
      v100 = re::introspectionAllocator(v99);
      v101 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v100 + 32))(v100, 24, 8);
      *(_DWORD *)v101 = 1;
      *((_QWORD *)v101 + 1) = 74;
      *((_QWORD *)v101 + 2) = "RGBA8Sint";
      qword_25411BCD8 = (uint64_t)v101;
      v102 = re::introspectionAllocator(v101);
      v103 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v102 + 32))(v102, 24, 8);
      *(_DWORD *)v103 = 1;
      *((_QWORD *)v103 + 1) = 80;
      *((_QWORD *)v103 + 2) = "BGRA8Unorm";
      qword_25411BCE0 = (uint64_t)v103;
      v104 = re::introspectionAllocator(v103);
      v105 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v104 + 32))(v104, 24, 8);
      *(_DWORD *)v105 = 1;
      *((_QWORD *)v105 + 1) = 81;
      *((_QWORD *)v105 + 2) = "BGRA8Unorm_sRGB";
      qword_25411BCE8 = (uint64_t)v105;
      v106 = re::introspectionAllocator(v105);
      v107 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v106 + 32))(v106, 24, 8);
      *(_DWORD *)v107 = 1;
      *((_QWORD *)v107 + 1) = 90;
      *((_QWORD *)v107 + 2) = "RGB10A2Unorm";
      qword_25411BCF0 = (uint64_t)v107;
      v108 = re::introspectionAllocator(v107);
      v109 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v108 + 32))(v108, 24, 8);
      *(_DWORD *)v109 = 1;
      *((_QWORD *)v109 + 1) = 91;
      *((_QWORD *)v109 + 2) = "RGB10A2Uint";
      qword_25411BCF8 = (uint64_t)v109;
      v110 = re::introspectionAllocator(v109);
      v111 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v110 + 32))(v110, 24, 8);
      *(_DWORD *)v111 = 1;
      *((_QWORD *)v111 + 1) = 92;
      *((_QWORD *)v111 + 2) = "RG11B10Float";
      qword_25411BD00 = (uint64_t)v111;
      v112 = re::introspectionAllocator(v111);
      v113 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v112 + 32))(v112, 24, 8);
      *(_DWORD *)v113 = 1;
      *((_QWORD *)v113 + 1) = 93;
      *((_QWORD *)v113 + 2) = "RGB9E5Float";
      qword_25411BD08 = (uint64_t)v113;
      v114 = re::introspectionAllocator(v113);
      v115 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v114 + 32))(v114, 24, 8);
      *(_DWORD *)v115 = 1;
      *((_QWORD *)v115 + 1) = 554;
      *((_QWORD *)v115 + 2) = "BGR10_XR";
      qword_25411BD10 = (uint64_t)v115;
      v116 = re::introspectionAllocator(v115);
      v117 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v116 + 32))(v116, 24, 8);
      *(_DWORD *)v117 = 1;
      *((_QWORD *)v117 + 1) = 555;
      *((_QWORD *)v117 + 2) = "BGR10_XR_sRGB";
      qword_25411BD18 = (uint64_t)v117;
      v118 = re::introspectionAllocator(v117);
      v119 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v118 + 32))(v118, 24, 8);
      *(_DWORD *)v119 = 1;
      *((_QWORD *)v119 + 1) = 103;
      *((_QWORD *)v119 + 2) = "RG32Uint";
      qword_25411BD20 = (uint64_t)v119;
      v120 = re::introspectionAllocator(v119);
      v121 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v120 + 32))(v120, 24, 8);
      *(_DWORD *)v121 = 1;
      *((_QWORD *)v121 + 1) = 104;
      *((_QWORD *)v121 + 2) = "RG32Sint";
      qword_25411BD28 = (uint64_t)v121;
      v122 = re::introspectionAllocator(v121);
      v123 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v122 + 32))(v122, 24, 8);
      *(_DWORD *)v123 = 1;
      *((_QWORD *)v123 + 1) = 105;
      *((_QWORD *)v123 + 2) = "RG32Float";
      qword_25411BD30 = (uint64_t)v123;
      v124 = re::introspectionAllocator(v123);
      v125 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v124 + 32))(v124, 24, 8);
      *(_DWORD *)v125 = 1;
      *((_QWORD *)v125 + 1) = 110;
      *((_QWORD *)v125 + 2) = "RGBA16Unorm";
      qword_25411BD38 = (uint64_t)v125;
      v126 = re::introspectionAllocator(v125);
      v127 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v126 + 32))(v126, 24, 8);
      *(_DWORD *)v127 = 1;
      *((_QWORD *)v127 + 1) = 112;
      *((_QWORD *)v127 + 2) = "RGBA16Snorm";
      qword_25411BD40 = (uint64_t)v127;
      v128 = re::introspectionAllocator(v127);
      v129 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v128 + 32))(v128, 24, 8);
      *(_DWORD *)v129 = 1;
      *((_QWORD *)v129 + 1) = 113;
      *((_QWORD *)v129 + 2) = "RGBA16Uint";
      qword_25411BD48 = (uint64_t)v129;
      v130 = re::introspectionAllocator(v129);
      v131 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v130 + 32))(v130, 24, 8);
      *(_DWORD *)v131 = 1;
      *((_QWORD *)v131 + 1) = 114;
      *((_QWORD *)v131 + 2) = "RGBA16Sint";
      qword_25411BD50 = (uint64_t)v131;
      v132 = re::introspectionAllocator(v131);
      v133 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v132 + 32))(v132, 24, 8);
      *(_DWORD *)v133 = 1;
      *((_QWORD *)v133 + 1) = 115;
      *((_QWORD *)v133 + 2) = "RGBA16Float";
      qword_25411BD58 = (uint64_t)v133;
      v134 = re::introspectionAllocator(v133);
      v135 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v134 + 32))(v134, 24, 8);
      *(_DWORD *)v135 = 1;
      *((_QWORD *)v135 + 1) = 552;
      *((_QWORD *)v135 + 2) = "BGRA10_XR";
      qword_25411BD60 = (uint64_t)v135;
      v136 = re::introspectionAllocator(v135);
      v137 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v136 + 32))(v136, 24, 8);
      *(_DWORD *)v137 = 1;
      *((_QWORD *)v137 + 1) = 553;
      *((_QWORD *)v137 + 2) = "BGRA10_XR_sRGB";
      qword_25411BD68 = (uint64_t)v137;
      v138 = re::introspectionAllocator(v137);
      v139 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v138 + 32))(v138, 24, 8);
      *(_DWORD *)v139 = 1;
      *((_QWORD *)v139 + 1) = 123;
      *((_QWORD *)v139 + 2) = "RGBA32Uint";
      qword_25411BD70 = (uint64_t)v139;
      v140 = re::introspectionAllocator(v139);
      v141 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v140 + 32))(v140, 24, 8);
      *(_DWORD *)v141 = 1;
      *((_QWORD *)v141 + 1) = 124;
      *((_QWORD *)v141 + 2) = "RGBA32Sint";
      qword_25411BD78 = (uint64_t)v141;
      v142 = re::introspectionAllocator(v141);
      v143 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v142 + 32))(v142, 24, 8);
      *(_DWORD *)v143 = 1;
      *((_QWORD *)v143 + 1) = 125;
      *((_QWORD *)v143 + 2) = "RGBA32Float";
      qword_25411BD80 = (uint64_t)v143;
      v144 = re::introspectionAllocator(v143);
      v145 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v144 + 32))(v144, 24, 8);
      *(_DWORD *)v145 = 1;
      *((_QWORD *)v145 + 1) = 130;
      *((_QWORD *)v145 + 2) = "BC1_RGBA";
      qword_25411BD88 = (uint64_t)v145;
      v146 = re::introspectionAllocator(v145);
      v147 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v146 + 32))(v146, 24, 8);
      *(_DWORD *)v147 = 1;
      *((_QWORD *)v147 + 1) = 131;
      *((_QWORD *)v147 + 2) = "BC1_RGBA_sRGB";
      qword_25411BD90 = (uint64_t)v147;
      v148 = re::introspectionAllocator(v147);
      v149 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v148 + 32))(v148, 24, 8);
      *(_DWORD *)v149 = 1;
      *((_QWORD *)v149 + 1) = 132;
      *((_QWORD *)v149 + 2) = "BC2_RGBA";
      qword_25411BD98 = (uint64_t)v149;
      v150 = re::introspectionAllocator(v149);
      v151 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v150 + 32))(v150, 24, 8);
      *(_DWORD *)v151 = 1;
      *((_QWORD *)v151 + 1) = 133;
      *((_QWORD *)v151 + 2) = "BC2_RGBA_sRGB";
      qword_25411BDA0 = (uint64_t)v151;
      v152 = re::introspectionAllocator(v151);
      v153 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v152 + 32))(v152, 24, 8);
      *(_DWORD *)v153 = 1;
      *((_QWORD *)v153 + 1) = 134;
      *((_QWORD *)v153 + 2) = "BC3_RGBA";
      qword_25411BDA8 = (uint64_t)v153;
      v154 = re::introspectionAllocator(v153);
      v155 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v154 + 32))(v154, 24, 8);
      *(_DWORD *)v155 = 1;
      *((_QWORD *)v155 + 1) = 135;
      *((_QWORD *)v155 + 2) = "BC3_RGBA_sRGB";
      qword_25411BDB0 = (uint64_t)v155;
      v156 = re::introspectionAllocator(v155);
      v157 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v156 + 32))(v156, 24, 8);
      *(_DWORD *)v157 = 1;
      *((_QWORD *)v157 + 1) = 140;
      *((_QWORD *)v157 + 2) = "BC4_RUnorm";
      qword_25411BDB8 = (uint64_t)v157;
      v158 = re::introspectionAllocator(v157);
      v159 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v158 + 32))(v158, 24, 8);
      *(_DWORD *)v159 = 1;
      *((_QWORD *)v159 + 1) = 141;
      *((_QWORD *)v159 + 2) = "BC4_RSnorm";
      qword_25411BDC0 = (uint64_t)v159;
      v160 = re::introspectionAllocator(v159);
      v161 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v160 + 32))(v160, 24, 8);
      *(_DWORD *)v161 = 1;
      *((_QWORD *)v161 + 1) = 142;
      *((_QWORD *)v161 + 2) = "BC5_RGUnorm";
      qword_25411BDC8 = (uint64_t)v161;
      v162 = re::introspectionAllocator(v161);
      v163 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v162 + 32))(v162, 24, 8);
      *(_DWORD *)v163 = 1;
      *((_QWORD *)v163 + 1) = 143;
      *((_QWORD *)v163 + 2) = "BC5_RGSnorm";
      qword_25411BDD0 = (uint64_t)v163;
      v164 = re::introspectionAllocator(v163);
      v165 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v164 + 32))(v164, 24, 8);
      *(_DWORD *)v165 = 1;
      *((_QWORD *)v165 + 1) = 150;
      *((_QWORD *)v165 + 2) = "BC6H_RGBFloat";
      qword_25411BDD8 = (uint64_t)v165;
      v166 = re::introspectionAllocator(v165);
      v167 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v166 + 32))(v166, 24, 8);
      *(_DWORD *)v167 = 1;
      *((_QWORD *)v167 + 1) = 151;
      *((_QWORD *)v167 + 2) = "BC6H_RGBUfloat";
      qword_25411BDE0 = (uint64_t)v167;
      v168 = re::introspectionAllocator(v167);
      v169 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v168 + 32))(v168, 24, 8);
      *(_DWORD *)v169 = 1;
      *((_QWORD *)v169 + 1) = 152;
      *((_QWORD *)v169 + 2) = "BC7_RGBAUnorm";
      qword_25411BDE8 = (uint64_t)v169;
      v170 = re::introspectionAllocator(v169);
      v171 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v170 + 32))(v170, 24, 8);
      *(_DWORD *)v171 = 1;
      *((_QWORD *)v171 + 1) = 153;
      *((_QWORD *)v171 + 2) = "BC7_RGBAUnorm_sRGB";
      qword_25411BDF0 = (uint64_t)v171;
      v172 = re::introspectionAllocator(v171);
      v173 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v172 + 32))(v172, 24, 8);
      *(_DWORD *)v173 = 1;
      *((_QWORD *)v173 + 1) = 160;
      *((_QWORD *)v173 + 2) = "PVRTC_RGB_2BPP";
      qword_25411BDF8 = (uint64_t)v173;
      v174 = re::introspectionAllocator(v173);
      v175 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v174 + 32))(v174, 24, 8);
      *(_DWORD *)v175 = 1;
      *((_QWORD *)v175 + 1) = 161;
      *((_QWORD *)v175 + 2) = "PVRTC_RGB_2BPP_sRGB";
      qword_25411BE00 = (uint64_t)v175;
      v176 = re::introspectionAllocator(v175);
      v177 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v176 + 32))(v176, 24, 8);
      *(_DWORD *)v177 = 1;
      *((_QWORD *)v177 + 1) = 162;
      *((_QWORD *)v177 + 2) = "PVRTC_RGB_4BPP";
      qword_25411BE08 = (uint64_t)v177;
      v178 = re::introspectionAllocator(v177);
      v179 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v178 + 32))(v178, 24, 8);
      *(_DWORD *)v179 = 1;
      *((_QWORD *)v179 + 1) = 163;
      *((_QWORD *)v179 + 2) = "PVRTC_RGB_4BPP_sRGB";
      qword_25411BE10 = (uint64_t)v179;
      v180 = re::introspectionAllocator(v179);
      v181 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v180 + 32))(v180, 24, 8);
      *(_DWORD *)v181 = 1;
      *((_QWORD *)v181 + 1) = 164;
      *((_QWORD *)v181 + 2) = "PVRTC_RGBA_2BPP";
      qword_25411BE18 = (uint64_t)v181;
      v182 = re::introspectionAllocator(v181);
      v183 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v182 + 32))(v182, 24, 8);
      *(_DWORD *)v183 = 1;
      *((_QWORD *)v183 + 1) = 165;
      *((_QWORD *)v183 + 2) = "PVRTC_RGBA_2BPP_sRGB";
      qword_25411BE20 = (uint64_t)v183;
      v184 = re::introspectionAllocator(v183);
      v185 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v184 + 32))(v184, 24, 8);
      *(_DWORD *)v185 = 1;
      *((_QWORD *)v185 + 1) = 166;
      *((_QWORD *)v185 + 2) = "PVRTC_RGBA_4BPP";
      qword_25411BE28 = (uint64_t)v185;
      v186 = re::introspectionAllocator(v185);
      v187 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v186 + 32))(v186, 24, 8);
      *(_DWORD *)v187 = 1;
      *((_QWORD *)v187 + 1) = 167;
      *((_QWORD *)v187 + 2) = "PVRTC_RGBA_4BPP_sRGB";
      qword_25411BE30 = (uint64_t)v187;
      v188 = re::introspectionAllocator(v187);
      v189 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v188 + 32))(v188, 24, 8);
      *(_DWORD *)v189 = 1;
      *((_QWORD *)v189 + 1) = 170;
      *((_QWORD *)v189 + 2) = "EAC_R11Unorm";
      qword_25411BE38 = (uint64_t)v189;
      v190 = re::introspectionAllocator(v189);
      v191 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v190 + 32))(v190, 24, 8);
      *(_DWORD *)v191 = 1;
      *((_QWORD *)v191 + 1) = 172;
      *((_QWORD *)v191 + 2) = "EAC_R11Snorm";
      qword_25411BE40 = (uint64_t)v191;
      v192 = re::introspectionAllocator(v191);
      v193 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v192 + 32))(v192, 24, 8);
      *(_DWORD *)v193 = 1;
      *((_QWORD *)v193 + 1) = 174;
      *((_QWORD *)v193 + 2) = "EAC_RG11Unorm";
      qword_25411BE48 = (uint64_t)v193;
      v194 = re::introspectionAllocator(v193);
      v195 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v194 + 32))(v194, 24, 8);
      *(_DWORD *)v195 = 1;
      *((_QWORD *)v195 + 1) = 176;
      *((_QWORD *)v195 + 2) = "EAC_RG11Snorm";
      qword_25411BE50 = (uint64_t)v195;
      v196 = re::introspectionAllocator(v195);
      v197 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v196 + 32))(v196, 24, 8);
      *(_DWORD *)v197 = 1;
      *((_QWORD *)v197 + 1) = 178;
      *((_QWORD *)v197 + 2) = "EAC_RGBA8";
      qword_25411BE58 = (uint64_t)v197;
      v198 = re::introspectionAllocator(v197);
      v199 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v198 + 32))(v198, 24, 8);
      *(_DWORD *)v199 = 1;
      *((_QWORD *)v199 + 1) = 179;
      *((_QWORD *)v199 + 2) = "EAC_RGBA8_sRGB";
      qword_25411BE60 = (uint64_t)v199;
      v200 = re::introspectionAllocator(v199);
      v201 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v200 + 32))(v200, 24, 8);
      *(_DWORD *)v201 = 1;
      *((_QWORD *)v201 + 1) = 180;
      *((_QWORD *)v201 + 2) = "ETC2_RGB8";
      qword_25411BE68 = (uint64_t)v201;
      v202 = re::introspectionAllocator(v201);
      v203 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v202 + 32))(v202, 24, 8);
      *(_DWORD *)v203 = 1;
      *((_QWORD *)v203 + 1) = 181;
      *((_QWORD *)v203 + 2) = "ETC2_RGB8_sRGB";
      qword_25411BE70 = (uint64_t)v203;
      v204 = re::introspectionAllocator(v203);
      v205 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v204 + 32))(v204, 24, 8);
      *(_DWORD *)v205 = 1;
      *((_QWORD *)v205 + 1) = 182;
      *((_QWORD *)v205 + 2) = "ETC2_RGB8A1";
      qword_25411BE78 = (uint64_t)v205;
      v206 = re::introspectionAllocator(v205);
      v207 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v206 + 32))(v206, 24, 8);
      *(_DWORD *)v207 = 1;
      *((_QWORD *)v207 + 1) = 183;
      *((_QWORD *)v207 + 2) = "ETC2_RGB8A1_sRGB";
      qword_25411BE80 = (uint64_t)v207;
      v208 = re::introspectionAllocator(v207);
      v209 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v208 + 32))(v208, 24, 8);
      *(_DWORD *)v209 = 1;
      *((_QWORD *)v209 + 1) = 186;
      *((_QWORD *)v209 + 2) = "ASTC_4x4_sRGB";
      qword_25411BE88 = (uint64_t)v209;
      v210 = re::introspectionAllocator(v209);
      v211 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v210 + 32))(v210, 24, 8);
      *(_DWORD *)v211 = 1;
      *((_QWORD *)v211 + 1) = 187;
      *((_QWORD *)v211 + 2) = "ASTC_5x4_sRGB";
      qword_25411BE90 = (uint64_t)v211;
      v212 = re::introspectionAllocator(v211);
      v213 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v212 + 32))(v212, 24, 8);
      *(_DWORD *)v213 = 1;
      *((_QWORD *)v213 + 1) = 188;
      *((_QWORD *)v213 + 2) = "ASTC_5x5_sRGB";
      qword_25411BE98 = (uint64_t)v213;
      v214 = re::introspectionAllocator(v213);
      v215 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v214 + 32))(v214, 24, 8);
      *(_DWORD *)v215 = 1;
      *((_QWORD *)v215 + 1) = 189;
      *((_QWORD *)v215 + 2) = "ASTC_6x5_sRGB";
      qword_25411BEA0 = (uint64_t)v215;
      v216 = re::introspectionAllocator(v215);
      v217 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v216 + 32))(v216, 24, 8);
      *(_DWORD *)v217 = 1;
      *((_QWORD *)v217 + 1) = 190;
      *((_QWORD *)v217 + 2) = "ASTC_6x6_sRGB";
      qword_25411BEA8 = (uint64_t)v217;
      v218 = re::introspectionAllocator(v217);
      v219 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v218 + 32))(v218, 24, 8);
      *(_DWORD *)v219 = 1;
      *((_QWORD *)v219 + 1) = 192;
      *((_QWORD *)v219 + 2) = "ASTC_8x5_sRGB";
      qword_25411BEB0 = (uint64_t)v219;
      v220 = re::introspectionAllocator(v219);
      v221 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v220 + 32))(v220, 24, 8);
      *(_DWORD *)v221 = 1;
      *((_QWORD *)v221 + 1) = 193;
      *((_QWORD *)v221 + 2) = "ASTC_8x6_sRGB";
      qword_25411BEB8 = (uint64_t)v221;
      v222 = re::introspectionAllocator(v221);
      v223 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v222 + 32))(v222, 24, 8);
      *(_DWORD *)v223 = 1;
      *((_QWORD *)v223 + 1) = 194;
      *((_QWORD *)v223 + 2) = "ASTC_8x8_sRGB";
      qword_25411BEC0 = (uint64_t)v223;
      v224 = re::introspectionAllocator(v223);
      v225 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v224 + 32))(v224, 24, 8);
      *(_DWORD *)v225 = 1;
      *((_QWORD *)v225 + 1) = 195;
      *((_QWORD *)v225 + 2) = "ASTC_10x5_sRGB";
      qword_25411BEC8 = (uint64_t)v225;
      v226 = re::introspectionAllocator(v225);
      v227 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v226 + 32))(v226, 24, 8);
      *(_DWORD *)v227 = 1;
      *((_QWORD *)v227 + 1) = 196;
      *((_QWORD *)v227 + 2) = "ASTC_10x6_sRGB";
      qword_25411BED0 = (uint64_t)v227;
      v228 = re::introspectionAllocator(v227);
      v229 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v228 + 32))(v228, 24, 8);
      *(_DWORD *)v229 = 1;
      *((_QWORD *)v229 + 1) = 197;
      *((_QWORD *)v229 + 2) = "ASTC_10x8_sRGB";
      qword_25411BED8 = (uint64_t)v229;
      v230 = re::introspectionAllocator(v229);
      v231 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v230 + 32))(v230, 24, 8);
      *(_DWORD *)v231 = 1;
      *((_QWORD *)v231 + 1) = 198;
      *((_QWORD *)v231 + 2) = "ASTC_10x10_sRGB";
      qword_25411BEE0 = (uint64_t)v231;
      v232 = re::introspectionAllocator(v231);
      v233 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v232 + 32))(v232, 24, 8);
      *(_DWORD *)v233 = 1;
      *((_QWORD *)v233 + 1) = 199;
      *((_QWORD *)v233 + 2) = "ASTC_12x10_sRGB";
      qword_25411BEE8 = (uint64_t)v233;
      v234 = re::introspectionAllocator(v233);
      v235 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v234 + 32))(v234, 24, 8);
      *(_DWORD *)v235 = 1;
      *((_QWORD *)v235 + 1) = 200;
      *((_QWORD *)v235 + 2) = "ASTC_12x12_sRGB";
      qword_25411BEF0 = (uint64_t)v235;
      v236 = re::introspectionAllocator(v235);
      v237 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v236 + 32))(v236, 24, 8);
      *(_DWORD *)v237 = 1;
      *((_QWORD *)v237 + 1) = 204;
      *((_QWORD *)v237 + 2) = "ASTC_4x4_LDR";
      qword_25411BEF8 = (uint64_t)v237;
      v238 = re::introspectionAllocator(v237);
      v239 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v238 + 32))(v238, 24, 8);
      *(_DWORD *)v239 = 1;
      *((_QWORD *)v239 + 1) = 205;
      *((_QWORD *)v239 + 2) = "ASTC_5x4_LDR";
      qword_25411BF00 = (uint64_t)v239;
      v240 = re::introspectionAllocator(v239);
      v241 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v240 + 32))(v240, 24, 8);
      *(_DWORD *)v241 = 1;
      *((_QWORD *)v241 + 1) = 206;
      *((_QWORD *)v241 + 2) = "ASTC_5x5_LDR";
      qword_25411BF08 = (uint64_t)v241;
      v242 = re::introspectionAllocator(v241);
      v243 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v242 + 32))(v242, 24, 8);
      *(_DWORD *)v243 = 1;
      *((_QWORD *)v243 + 1) = 207;
      *((_QWORD *)v243 + 2) = "ASTC_6x5_LDR";
      qword_25411BF10 = (uint64_t)v243;
      v244 = re::introspectionAllocator(v243);
      v245 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v244 + 32))(v244, 24, 8);
      *(_DWORD *)v245 = 1;
      *((_QWORD *)v245 + 1) = 208;
      *((_QWORD *)v245 + 2) = "ASTC_6x6_LDR";
      qword_25411BF18 = (uint64_t)v245;
      v246 = re::introspectionAllocator(v245);
      v247 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v246 + 32))(v246, 24, 8);
      *(_DWORD *)v247 = 1;
      *((_QWORD *)v247 + 1) = 210;
      *((_QWORD *)v247 + 2) = "ASTC_8x5_LDR";
      qword_25411BF20 = (uint64_t)v247;
      v248 = re::introspectionAllocator(v247);
      v249 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v248 + 32))(v248, 24, 8);
      *(_DWORD *)v249 = 1;
      *((_QWORD *)v249 + 1) = 211;
      *((_QWORD *)v249 + 2) = "ASTC_8x6_LDR";
      qword_25411BF28 = (uint64_t)v249;
      v250 = re::introspectionAllocator(v249);
      v251 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v250 + 32))(v250, 24, 8);
      *(_DWORD *)v251 = 1;
      *((_QWORD *)v251 + 1) = 212;
      *((_QWORD *)v251 + 2) = "ASTC_8x8_LDR";
      qword_25411BF30 = (uint64_t)v251;
      v252 = re::introspectionAllocator(v251);
      v253 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v252 + 32))(v252, 24, 8);
      *(_DWORD *)v253 = 1;
      *((_QWORD *)v253 + 1) = 213;
      *((_QWORD *)v253 + 2) = "ASTC_10x5_LDR";
      qword_25411BF38 = (uint64_t)v253;
      v254 = re::introspectionAllocator(v253);
      v255 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v254 + 32))(v254, 24, 8);
      *(_DWORD *)v255 = 1;
      *((_QWORD *)v255 + 1) = 214;
      *((_QWORD *)v255 + 2) = "ASTC_10x6_LDR";
      qword_25411BF40 = (uint64_t)v255;
      v256 = re::introspectionAllocator(v255);
      v257 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v256 + 32))(v256, 24, 8);
      *(_DWORD *)v257 = 1;
      *((_QWORD *)v257 + 1) = 215;
      *((_QWORD *)v257 + 2) = "ASTC_10x8_LDR";
      qword_25411BF48 = (uint64_t)v257;
      v258 = re::introspectionAllocator(v257);
      v259 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v258 + 32))(v258, 24, 8);
      *(_DWORD *)v259 = 1;
      *((_QWORD *)v259 + 1) = 216;
      *((_QWORD *)v259 + 2) = "ASTC_10x10_LDR";
      qword_25411BF50 = (uint64_t)v259;
      v260 = re::introspectionAllocator(v259);
      v261 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v260 + 32))(v260, 24, 8);
      *(_DWORD *)v261 = 1;
      *((_QWORD *)v261 + 1) = 217;
      *((_QWORD *)v261 + 2) = "ASTC_12x10_LDR";
      qword_25411BF58 = (uint64_t)v261;
      v262 = re::introspectionAllocator(v261);
      v263 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v262 + 32))(v262, 24, 8);
      *(_DWORD *)v263 = 1;
      *((_QWORD *)v263 + 1) = 218;
      *((_QWORD *)v263 + 2) = "ASTC_12x12_LDR";
      qword_25411BF60 = (uint64_t)v263;
      v264 = re::introspectionAllocator(v263);
      v265 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v264 + 32))(v264, 24, 8);
      *(_DWORD *)v265 = 1;
      *((_QWORD *)v265 + 1) = 222;
      *((_QWORD *)v265 + 2) = "ASTC_4x4_HDR";
      qword_25411BF68 = (uint64_t)v265;
      v266 = re::introspectionAllocator(v265);
      v267 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v266 + 32))(v266, 24, 8);
      *(_DWORD *)v267 = 1;
      *((_QWORD *)v267 + 1) = 223;
      *((_QWORD *)v267 + 2) = "ASTC_5x4_HDR";
      qword_25411BF70 = (uint64_t)v267;
      v268 = re::introspectionAllocator(v267);
      v269 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v268 + 32))(v268, 24, 8);
      *(_DWORD *)v269 = 1;
      *((_QWORD *)v269 + 1) = 224;
      *((_QWORD *)v269 + 2) = "ASTC_5x5_HDR";
      qword_25411BF78 = (uint64_t)v269;
      v270 = re::introspectionAllocator(v269);
      v271 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v270 + 32))(v270, 24, 8);
      *(_DWORD *)v271 = 1;
      *((_QWORD *)v271 + 1) = 225;
      *((_QWORD *)v271 + 2) = "ASTC_6x5_HDR";
      qword_25411BF80 = (uint64_t)v271;
      v272 = re::introspectionAllocator(v271);
      v273 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v272 + 32))(v272, 24, 8);
      *(_DWORD *)v273 = 1;
      *((_QWORD *)v273 + 1) = 226;
      *((_QWORD *)v273 + 2) = "ASTC_6x6_HDR";
      qword_25411BF88 = (uint64_t)v273;
      v274 = re::introspectionAllocator(v273);
      v275 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v274 + 32))(v274, 24, 8);
      *(_DWORD *)v275 = 1;
      *((_QWORD *)v275 + 1) = 228;
      *((_QWORD *)v275 + 2) = "ASTC_8x5_HDR";
      qword_25411BF90 = (uint64_t)v275;
      v276 = re::introspectionAllocator(v275);
      v277 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v276 + 32))(v276, 24, 8);
      *(_DWORD *)v277 = 1;
      *((_QWORD *)v277 + 1) = 229;
      *((_QWORD *)v277 + 2) = "ASTC_8x6_HDR";
      qword_25411BF98 = (uint64_t)v277;
      v278 = re::introspectionAllocator(v277);
      v279 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v278 + 32))(v278, 24, 8);
      *(_DWORD *)v279 = 1;
      *((_QWORD *)v279 + 1) = 230;
      *((_QWORD *)v279 + 2) = "ASTC_8x8_HDR";
      qword_25411BFA0 = (uint64_t)v279;
      v280 = re::introspectionAllocator(v279);
      v281 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v280 + 32))(v280, 24, 8);
      *(_DWORD *)v281 = 1;
      *((_QWORD *)v281 + 1) = 231;
      *((_QWORD *)v281 + 2) = "ASTC_10x5_HDR";
      qword_25411BFA8 = (uint64_t)v281;
      v282 = re::introspectionAllocator(v281);
      v283 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v282 + 32))(v282, 24, 8);
      *(_DWORD *)v283 = 1;
      *((_QWORD *)v283 + 1) = 232;
      *((_QWORD *)v283 + 2) = "ASTC_10x6_HDR";
      qword_25411BFB0 = (uint64_t)v283;
      v284 = re::introspectionAllocator(v283);
      v285 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v284 + 32))(v284, 24, 8);
      *(_DWORD *)v285 = 1;
      *((_QWORD *)v285 + 1) = 233;
      *((_QWORD *)v285 + 2) = "ASTC_10x8_HDR";
      qword_25411BFB8 = (uint64_t)v285;
      v286 = re::introspectionAllocator(v285);
      v287 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v286 + 32))(v286, 24, 8);
      *(_DWORD *)v287 = 1;
      *((_QWORD *)v287 + 1) = 234;
      *((_QWORD *)v287 + 2) = "ASTC_10x10_HDR";
      qword_25411BFC0 = (uint64_t)v287;
      v288 = re::introspectionAllocator(v287);
      v289 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v288 + 32))(v288, 24, 8);
      *(_DWORD *)v289 = 1;
      *((_QWORD *)v289 + 1) = 235;
      *((_QWORD *)v289 + 2) = "ASTC_12x10_HDR";
      qword_25411BFC8 = (uint64_t)v289;
      v290 = re::introspectionAllocator(v289);
      v291 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v290 + 32))(v290, 24, 8);
      *(_DWORD *)v291 = 1;
      *((_QWORD *)v291 + 1) = 236;
      *((_QWORD *)v291 + 2) = "ASTC_12x12_HDR";
      qword_25411BFD0 = (uint64_t)v291;
      v292 = re::introspectionAllocator(v291);
      v293 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v292 + 32))(v292, 24, 8);
      *(_DWORD *)v293 = 1;
      *((_QWORD *)v293 + 1) = 240;
      *((_QWORD *)v293 + 2) = "GBGR422";
      qword_25411BFD8 = (uint64_t)v293;
      v294 = re::introspectionAllocator(v293);
      v295 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v294 + 32))(v294, 24, 8);
      *(_DWORD *)v295 = 1;
      *((_QWORD *)v295 + 1) = 241;
      *((_QWORD *)v295 + 2) = "BGRG422";
      qword_25411BFE0 = (uint64_t)v295;
      v296 = re::introspectionAllocator(v295);
      v297 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v296 + 32))(v296, 24, 8);
      *(_DWORD *)v297 = 1;
      *((_QWORD *)v297 + 1) = 250;
      *((_QWORD *)v297 + 2) = "Depth16Unorm";
      qword_25411BFE8 = (uint64_t)v297;
      v298 = re::introspectionAllocator(v297);
      v299 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v298 + 32))(v298, 24, 8);
      *(_DWORD *)v299 = 1;
      *((_QWORD *)v299 + 1) = 252;
      *((_QWORD *)v299 + 2) = "Depth32Float";
      qword_25411BFF0 = (uint64_t)v299;
      v300 = re::introspectionAllocator(v299);
      v301 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v300 + 32))(v300, 24, 8);
      *(_DWORD *)v301 = 1;
      *((_QWORD *)v301 + 1) = 253;
      *((_QWORD *)v301 + 2) = "Stencil8";
      qword_25411BFF8 = (uint64_t)v301;
      v302 = re::introspectionAllocator(v301);
      v303 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v302 + 32))(v302, 24, 8);
      *(_DWORD *)v303 = 1;
      *((_QWORD *)v303 + 1) = 255;
      *((_QWORD *)v303 + 2) = "Depth24Unorm_Stencil8";
      qword_25411C000 = (uint64_t)v303;
      v304 = re::introspectionAllocator(v303);
      v305 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v304 + 32))(v304, 24, 8);
      *(_DWORD *)v305 = 1;
      *((_QWORD *)v305 + 1) = 260;
      *((_QWORD *)v305 + 2) = "Depth32Float_Stencil8";
      qword_25411C008 = (uint64_t)v305;
      v306 = re::introspectionAllocator(v305);
      v307 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v306 + 32))(v306, 24, 8);
      *(_DWORD *)v307 = 1;
      *((_QWORD *)v307 + 1) = 261;
      *((_QWORD *)v307 + 2) = "X32_Stencil8";
      qword_25411C010 = (uint64_t)v307;
      v308 = re::introspectionAllocator(v307);
      v309 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v308 + 32))(v308, 24, 8);
      *(_DWORD *)v309 = 1;
      *(_QWORD *)(v309 + 8) = 262;
      *(_QWORD *)(v309 + 16) = "X24_Stencil8";
      qword_25411C018 = v309;
      __cxa_guard_release(&qword_25411B330);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25411B338);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411B338))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B688, "PixelFormat", 4, 4, 1, 1);
    qword_25411B688 = (uint64_t)&off_24ED7D9E8;
    qword_25411B6C8 = (uint64_t)&re::mtl::introspect_PixelFormat(BOOL)::enumTable;
    dword_25411B698 = 9;
    __cxa_guard_release(&qword_25411B338);
  }
  if (v2)
  {
    if ((byte_25411B2E4 & 1) != 0)
      return &qword_25411B688;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v315);
    v5 = byte_25411B2E4;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v315);
    if ((v5 & 1) != 0)
      return &qword_25411B688;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25411B2E4 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_25411B688;
    }
  }
  byte_25411B2E4 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B688, a2);
  v311 = 0x1E660D208CFC3FALL;
  v312 = "PixelFormat";
  v315[0] = 208862;
  v315[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v315);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v315);
    v11 = (unsigned int *)qword_25411B6C8;
    v314[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v315, &v311, 1, 1, (uint64_t)v314);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v313.var0 = 2 * v17;
          v313.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v315, v21, &v313);
          re::StringID::destroyString((re::StringID *)&v313);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v313.var0 = 2 * v25;
            v313.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v315, v29, &v313);
            re::StringID::destroyString((re::StringID *)&v313);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v315, v30);
    xmmword_25411B6A8 = (__int128)v313;
    re::StringID::destroyString((re::StringID *)&v311);
    if ((v2 & 1) != 0)
      return &qword_25411B688;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v315);
  re::internal::assertLog((re::internal *)5, v310, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "PixelFormat", v311, v312);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t *re::mtl::introspect_TextureType(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  StringID v51;
  _QWORD v52[2];
  _QWORD v53[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_25411B340);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_25411B340);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "Texture1D";
      qword_25411B430 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "Texture1DArray";
      qword_25411B438 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 2;
      *((_QWORD *)v39 + 2) = "Texture2D";
      qword_25411B440 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 3;
      *((_QWORD *)v41 + 2) = "Texture2DArray";
      qword_25411B448 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 4;
      *((_QWORD *)v43 + 2) = "Texture2DMultisample";
      qword_25411B450 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 5;
      *((_QWORD *)v45 + 2) = "TextureCube";
      qword_25411B458 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = 7;
      *(_QWORD *)(v47 + 16) = "Texture3D";
      qword_25411B460 = v47;
      __cxa_guard_release(&qword_25411B340);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25411B348);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411B348))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B6D0, "TextureType", 4, 4, 1, 1);
    qword_25411B6D0 = (uint64_t)&off_24ED7D9E8;
    qword_25411B710 = (uint64_t)&re::mtl::introspect_TextureType(BOOL)::enumTable;
    dword_25411B6E0 = 9;
    __cxa_guard_release(&qword_25411B348);
  }
  if (v2)
  {
    if ((byte_25411B2E5 & 1) != 0)
      return &qword_25411B6D0;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v53);
    v5 = byte_25411B2E5;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v53);
    if ((v5 & 1) != 0)
      return &qword_25411B6D0;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25411B2E5 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_25411B6D0;
    }
  }
  byte_25411B2E5 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B6D0, a2);
  v49 = 0x1FCECCB8732F5AALL;
  v50 = "TextureType";
  v53[0] = 208862;
  v53[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v53);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v53);
    v11 = (unsigned int *)qword_25411B710;
    v52[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v53, &v49, 1, 1, (uint64_t)v52);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v51.var0 = 2 * v17;
          v51.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v53, v21, &v51);
          re::StringID::destroyString((re::StringID *)&v51);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v51.var0 = 2 * v25;
            v51.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v53, v29, &v51);
            re::StringID::destroyString((re::StringID *)&v51);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v53, v30);
    xmmword_25411B6F0 = (__int128)v51;
    re::StringID::destroyString((re::StringID *)&v49);
    if ((v2 & 1) != 0)
      return &qword_25411B6D0;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v53);
  re::internal::assertLog((re::internal *)5, v48, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "TextureType", v49, v50);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void re::mtl::introspect_TextureSwizzle(re::mtl *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  StringID v42;
  _QWORD v43[2];
  _QWORD v44[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25411B350);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25411B350);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Zero";
      qword_25411B3D0 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "One";
      qword_25411B3D8 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "Red";
      qword_25411B3E0 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "Green";
      qword_25411B3E8 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "Blue";
      qword_25411B3F0 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = 5;
      *(_QWORD *)(v38 + 16) = "Alpha";
      qword_25411B3F8 = v38;
      __cxa_guard_release(&qword_25411B350);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25411B358);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25411B358))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B718, "TextureSwizzle", 1, 1, 1, 1);
    qword_25411B718 = (uint64_t)&off_24ED7D9E8;
    qword_25411B758 = (uint64_t)&re::mtl::introspect_TextureSwizzle(BOOL)::enumTable;
    dword_25411B728 = 9;
    __cxa_guard_release(&qword_25411B358);
  }
  if ((byte_25411B2E6 & 1) == 0)
  {
    byte_25411B2E6 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B718, a2);
    v40 = 0x582818C9D1EBD686;
    v41 = "TextureSwizzle";
    v44[0] = 0x31CD534126;
    v44[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v44);
      v6 = (unsigned int *)qword_25411B758;
      v43[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v44, &v40, 1, 1, (uint64_t)v43);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v42.var0 = 2 * v12;
            v42.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v16, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v42.var0 = 2 * v20;
              v42.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v24, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v25);
      xmmword_25411B738 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v44);
      re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "TextureSwizzle", v40, v41);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::mtl::allocInfo_TextureSwizzleChannels(re::mtl *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411B360);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411B360))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411B838, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411B848 = 0;
    qword_25411B858 = 0;
    qword_25411B860 = 0xFFFFFFFFLL;
    qword_25411B838 = (uint64_t)&off_24ED7DAA8;
    qword_25411B868 = (uint64_t)"TextureSwizzleChannels";
    dword_25411B870 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25411B8A8 = 0;
    __cxa_guard_release(&qword_25411B360);
  }
  return &qword_25411B838;
}

void re::mtl::initInfo_TextureSwizzleChannels(re::mtl *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x5A47A4A43A050066;
  v19[1] = "TextureSwizzleChannels";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_25411B368);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411B368);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::mtl::introspect_TextureSwizzle((re::mtl *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "red";
      *(_QWORD *)(v8 + 16) = &qword_25411B718;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411B3B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::mtl::introspect_TextureSwizzle((re::mtl *)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "green";
      *(_QWORD *)(v11 + 16) = &qword_25411B718;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x100000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25411B3B8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::mtl::introspect_TextureSwizzle((re::mtl *)v12, v13);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "blue";
      *(_QWORD *)(v14 + 16) = &qword_25411B718;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x200000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_25411B3C0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      re::mtl::introspect_TextureSwizzle((re::mtl *)v15, v16);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "alpha";
      *(_QWORD *)(v17 + 16) = &qword_25411B718;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x300000004;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411B3C8 = v17;
      __cxa_guard_release(&qword_25411B368);
    }
  }
  *((_QWORD *)this + 2) = 0x400000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411B3B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::mtl::TextureSwizzleChannels>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::mtl::TextureSwizzleChannels>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::mtl::TextureSwizzleChannels>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::mtl::TextureSwizzleChannels>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

double re::internal::defaultConstruct<re::mtl::TextureSwizzleChannels>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  double result;

  *(_QWORD *)&result = 84148994;
  *a3 = 84148994;
  return result;
}

double re::internal::defaultConstructV2<re::mtl::TextureSwizzleChannels>(_DWORD *a1)
{
  double result;

  *(_QWORD *)&result = 84148994;
  *a1 = 84148994;
  return result;
}

uint64_t re::mtl::introspect_TextureSwizzleChannels(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TextureSwizzleChannels", (uint64_t (*)(re::internal *))re::mtl::allocInfo_TextureSwizzleChannels, (re::IntrospectionBase *(*)(void))re::mtl::initInfo_TextureSwizzleChannels, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::mtl::TextureSwizzleChannels>, this);
}

uint64_t *re::mtl::introspect_StencilOperation(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  StringID v53;
  _QWORD v54[2];
  _QWORD v55[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_25411B370);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_25411B370);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "Keep";
      qword_25411B4A8 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "Zero";
      qword_25411B4B0 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 2;
      *((_QWORD *)v39 + 2) = "Replace";
      qword_25411B4B8 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 3;
      *((_QWORD *)v41 + 2) = "IncrementClamp";
      qword_25411B4C0 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 4;
      *((_QWORD *)v43 + 2) = "DecrementClamp";
      qword_25411B4C8 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 5;
      *((_QWORD *)v45 + 2) = "Invert";
      qword_25411B4D0 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 6;
      *((_QWORD *)v47 + 2) = "IncrementWrap";
      qword_25411B4D8 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = 7;
      *(_QWORD *)(v49 + 16) = "DecrementWrap";
      qword_25411B4E0 = v49;
      __cxa_guard_release(&qword_25411B370);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25411B378);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411B378))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B760, "StencilOperation", 1, 1, 1, 1);
    qword_25411B760 = (uint64_t)&off_24ED7D9E8;
    qword_25411B7A0 = (uint64_t)&re::mtl::introspect_StencilOperation(BOOL)::enumTable;
    dword_25411B770 = 9;
    __cxa_guard_release(&qword_25411B378);
  }
  if (v2)
  {
    if ((byte_25411B2E7 & 1) != 0)
      return &qword_25411B760;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v55);
    v5 = byte_25411B2E7;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v55);
    if ((v5 & 1) != 0)
      return &qword_25411B760;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25411B2E7 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_25411B760;
    }
  }
  byte_25411B2E7 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B760, a2);
  v51 = 0xFB14E724CF1ABE56;
  v52 = "StencilOperation";
  v55[0] = 0x31CD534126;
  v55[1] = "uint8_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v55);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v55);
    v11 = (unsigned int *)qword_25411B7A0;
    v54[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v55, &v51, 1, 1, (uint64_t)v54);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v53.var0 = 2 * v17;
          v53.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v55, v21, &v53);
          re::StringID::destroyString((re::StringID *)&v53);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v53.var0 = 2 * v25;
            v53.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v55, v29, &v53);
            re::StringID::destroyString((re::StringID *)&v53);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v55, v30);
    xmmword_25411B780 = (__int128)v53;
    re::StringID::destroyString((re::StringID *)&v51);
    if ((v2 & 1) != 0)
      return &qword_25411B760;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v55);
  re::internal::assertLog((re::internal *)5, v50, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "StencilOperation", v51, v52);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void *re::mtl::introspect_LoadAction(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "DontCare";
      re::mtl::introspect_LoadAction(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Load";
      qword_255829D38 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "Clear";
      qword_255829D40 = v17;
    }
  }
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_LoadAction(BOOL)::info, "LoadAction", 4, 4, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &re::mtl::introspect_LoadAction(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_LoadAction(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_LoadAction(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = re::mtl::introspect_LoadAction(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_LoadAction(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_LoadAction(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_LoadAction(BOOL)::info;
    }
  }
  re::mtl::introspect_LoadAction(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_LoadAction(BOOL)::info, a2);
  v19[0] = 0xEF852949E8DB8;
  v19[1] = (uint64_t)"LoadAction";
  xmmword_255829D70 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_LoadAction(BOOL)::info;
}

uint64_t *re::mtl::allocInfo_Viewport(re::mtl *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411B380);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411B380))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411B8B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411B8C0 = 0;
    qword_25411B8D0 = 0;
    qword_25411B8D8 = 0xFFFFFFFFLL;
    qword_25411B8B0 = (uint64_t)&off_24ED7DAA8;
    qword_25411B8E0 = (uint64_t)"Viewport";
    dword_25411B8E8 = 0;
    xmmword_25411B8F0 = 0u;
    xmmword_25411B900 = 0u;
    xmmword_25411B910 = 0u;
    qword_25411B920 = 0;
    __cxa_guard_release(&qword_25411B380);
  }
  return &qword_25411B8B0;
}

void re::mtl::initInfo_Viewport(re::mtl *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  __int128 v32;

  v31[0] = 0x47A965CB98CLL;
  v31[1] = "Viewport";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  v4 = atomic_load((unsigned __int8 *)&qword_25411B388);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411B388);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "originX";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411B400 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "originY";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411B408 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "width";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411B410 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "height";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xC00000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25411B418 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_float((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "zNear";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x1000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_25411B420 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_float((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "zFar";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x1400000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_25411B428 = v29;
      __cxa_guard_release(&qword_25411B388);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_25411B400;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::mtl::Viewport>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::mtl::Viewport>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::mtl::Viewport>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::mtl::Viewport>;
  re::IntrospectionRegistry::add(this, v3);
  v30 = v32;
}

void re::internal::defaultConstruct<re::mtl::Viewport>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0x3F80000000000000;
}

_QWORD *re::internal::defaultConstructV2<re::mtl::Viewport>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0x3F80000000000000;
  return result;
}

uint64_t re::mtl::introspect_Viewport(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Viewport", (uint64_t (*)(re::internal *))re::mtl::allocInfo_Viewport, (re::IntrospectionBase *(*)(void))re::mtl::initInfo_Viewport, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::mtl::Viewport>, this);
}

void *re::mtl::introspect_TriangleFillMode(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  re::IntrospectionBasic *v16;
  uint64_t v17[2];
  __int128 v18;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Fill";
      re::mtl::introspect_TriangleFillMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = 1;
      *(_QWORD *)(v15 + 16) = "Line";
      qword_255829DB0 = v15;
    }
  }
  {
    v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_TriangleFillMode(BOOL)::info, "TriangleFillMode", 1, 1, 1, 1);
    *(_QWORD *)v16 = &off_24ED7D9E8;
    *((_QWORD *)v16 + 8) = &re::mtl::introspect_TriangleFillMode(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_TriangleFillMode(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_TriangleFillMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    v5 = re::mtl::introspect_TriangleFillMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_TriangleFillMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_TriangleFillMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_TriangleFillMode(BOOL)::info;
    }
  }
  re::mtl::introspect_TriangleFillMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_TriangleFillMode(BOOL)::info, a2);
  v17[0] = 0x7681134D4FCCA81CLL;
  v17[1] = (uint64_t)"TriangleFillMode";
  xmmword_255829DE0 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_TriangleFillMode(BOOL)::info;
}

void *re::mtl::introspect_IndexType(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  re::IntrospectionBasic *v16;
  uint64_t v17[2];
  __int128 v18;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "UInt16";
      re::mtl::introspect_IndexType(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = 1;
      *(_QWORD *)(v15 + 16) = "UInt32";
      qword_255829E20 = v15;
    }
  }
  {
    v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_IndexType(BOOL)::info, "IndexType", 1, 1, 1, 1);
    *(_QWORD *)v16 = &off_24ED7D9E8;
    *((_QWORD *)v16 + 8) = &re::mtl::introspect_IndexType(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_IndexType(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_IndexType(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    v5 = re::mtl::introspect_IndexType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_IndexType(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_IndexType(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_IndexType(BOOL)::info;
    }
  }
  re::mtl::introspect_IndexType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_IndexType(BOOL)::info, a2);
  v17[0] = 0x76EC8EA12618;
  v17[1] = (uint64_t)"IndexType";
  xmmword_255829E50 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_IndexType(BOOL)::info;
}

void *re::mtl::introspect_MultisampleDepthResolveFilter(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Sample0";
      re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Min";
      qword_255829E90 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "Max";
      qword_255829E98 = v17;
    }
  }
  if ((v4 & 1) == 0
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::info, "MultisampleDepthResolveFilter", 4, 4, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::info;
    }
  }
  re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::info, a2);
  v19[0] = 0x623525B3D9212FC8;
  v19[1] = (uint64_t)"MultisampleDepthResolveFilter";
  xmmword_255829EC8 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_MultisampleDepthResolveFilter(BOOL)::info;
}

void *re::mtl::introspect_MultisampleStencilResolveFilter(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  re::IntrospectionBasic *v16;
  uint64_t v17[2];
  __int128 v18;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Sample0";
      re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = 1;
      *(_QWORD *)(v15 + 16) = "DepthResolvedSample";
      qword_255829F08 = v15;
    }
  }
  if ((v4 & 1) == 0
  {
    v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::info, "MultisampleStencilResolveFilter", 4, 4, 1, 1);
    *(_QWORD *)v16 = &off_24ED7D9E8;
    *((_QWORD *)v16 + 8) = &re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    v5 = re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::info;
    }
  }
  re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::info, a2);
  v17[0] = 0x57DB6309EED0C996;
  v17[1] = (uint64_t)"MultisampleStencilResolveFilter";
  xmmword_255829F38 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_MultisampleStencilResolveFilter(BOOL)::info;
}

uint64_t *re::mtl::introspect_SamplerAddressMode(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  StringID v53;
  _QWORD v54[2];
  _QWORD v55[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_25411B390);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_25411B390);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "ClampToEdge";
      qword_25411B4E8 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 0;
      *((_QWORD *)v37 + 2) = "Clamp";
      qword_25411B4F0 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 1;
      *((_QWORD *)v39 + 2) = "MirrorClampToEdge";
      qword_25411B4F8 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 1;
      *((_QWORD *)v41 + 2) = "Mirror";
      qword_25411B500 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 2;
      *((_QWORD *)v43 + 2) = "Repeat";
      qword_25411B508 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 3;
      *((_QWORD *)v45 + 2) = "MirrorRepeat";
      qword_25411B510 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 4;
      *((_QWORD *)v47 + 2) = "ClampToZero";
      qword_25411B518 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = 5;
      *(_QWORD *)(v49 + 16) = "ClampToBorderColor";
      qword_25411B520 = v49;
      __cxa_guard_release(&qword_25411B390);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25411B398);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411B398))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B7A8, "SamplerAddressMode", 4, 4, 1, 1);
    qword_25411B7A8 = (uint64_t)&off_24ED7D9E8;
    qword_25411B7E8 = (uint64_t)&re::mtl::introspect_SamplerAddressMode(BOOL)::enumTable;
    dword_25411B7B8 = 9;
    __cxa_guard_release(&qword_25411B398);
  }
  if (v2)
  {
    if ((byte_25411B2E8 & 1) != 0)
      return &qword_25411B7A8;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v55);
    v5 = byte_25411B2E8;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v55);
    if ((v5 & 1) != 0)
      return &qword_25411B7A8;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25411B2E8 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_25411B7A8;
    }
  }
  byte_25411B2E8 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B7A8, a2);
  v51 = 0xF558394B10E0FD5ELL;
  v52 = "SamplerAddressMode";
  v55[0] = 208862;
  v55[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v55);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v55);
    v11 = (unsigned int *)qword_25411B7E8;
    v54[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v55, &v51, 1, 1, (uint64_t)v54);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v53.var0 = 2 * v17;
          v53.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v55, v21, &v53);
          re::StringID::destroyString((re::StringID *)&v53);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v53.var0 = 2 * v25;
            v53.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v55, v29, &v53);
            re::StringID::destroyString((re::StringID *)&v53);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v55, v30);
    xmmword_25411B7C8 = (__int128)v53;
    re::StringID::destroyString((re::StringID *)&v51);
    if ((v2 & 1) != 0)
      return &qword_25411B7A8;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v55);
  re::internal::assertLog((re::internal *)5, v50, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SamplerAddressMode", v51, v52);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void *re::mtl::introspect_SamplerBorderColor(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "TransparentBlack";
      re::mtl::introspect_SamplerBorderColor(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "OpaqueBlack";
      qword_255829F78 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "OpaqueWhite";
      qword_255829F80 = v17;
    }
  }
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_SamplerBorderColor(BOOL)::info, "SamplerBorderColor", 4, 4, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &re::mtl::introspect_SamplerBorderColor(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_SamplerBorderColor(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_SamplerBorderColor(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = re::mtl::introspect_SamplerBorderColor(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_SamplerBorderColor(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_SamplerBorderColor(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_SamplerBorderColor(BOOL)::info;
    }
  }
  re::mtl::introspect_SamplerBorderColor(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_SamplerBorderColor(BOOL)::info, a2);
  v19[0] = 0xF560323C0B41AB1ELL;
  v19[1] = (uint64_t)"SamplerBorderColor";
  xmmword_255829FB0 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_SamplerBorderColor(BOOL)::info;
}

void *re::mtl::introspect_SamplerMinMagFilter(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  re::IntrospectionBasic *v16;
  uint64_t v17[2];
  __int128 v18;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Nearest";
      re::mtl::introspect_SamplerMinMagFilter(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = 1;
      *(_QWORD *)(v15 + 16) = "Linear";
      qword_255829FF0 = v15;
    }
  }
  {
    v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info, "SamplerMinMagFilter", 4, 4, 1, 1);
    *(_QWORD *)v16 = &off_24ED7D9E8;
    *((_QWORD *)v16 + 8) = &re::mtl::introspect_SamplerMinMagFilter(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_SamplerMinMagFilter(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    v5 = re::mtl::introspect_SamplerMinMagFilter(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_SamplerMinMagFilter(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
    }
  }
  re::mtl::introspect_SamplerMinMagFilter(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info, a2);
  v17[0] = 0xBE442AE103A9B102;
  v17[1] = (uint64_t)"SamplerMinMagFilter";
  xmmword_25582A020 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
}

void *re::mtl::introspect_SamplerMipFilter(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "NotMipmapped";
      re::mtl::introspect_SamplerMipFilter(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Nearest";
      qword_25582A060 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "Linear";
      qword_25582A068 = v17;
    }
  }
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_SamplerMipFilter(BOOL)::info, "SamplerMipFilter", 4, 4, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &re::mtl::introspect_SamplerMipFilter(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_SamplerMipFilter(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_SamplerMipFilter(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = re::mtl::introspect_SamplerMipFilter(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_SamplerMipFilter(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_SamplerMipFilter(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_SamplerMipFilter(BOOL)::info;
    }
  }
  re::mtl::introspect_SamplerMipFilter(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_SamplerMipFilter(BOOL)::info, a2);
  v19[0] = 0xFF8F91A9E51F7C8;
  v19[1] = (uint64_t)"SamplerMipFilter";
  xmmword_25582A098 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_SamplerMipFilter(BOOL)::info;
}

uint64_t *re::mtl::introspect_SamplerCompareFunction(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  StringID v53;
  _QWORD v54[2];
  _QWORD v55[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_25411B3A0);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_25411B3A0);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "Never";
      qword_25411B528 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "Less";
      qword_25411B530 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 2;
      *((_QWORD *)v39 + 2) = "Equal";
      qword_25411B538 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 3;
      *((_QWORD *)v41 + 2) = "LessEqual";
      qword_25411B540 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 4;
      *((_QWORD *)v43 + 2) = "Greater";
      qword_25411B548 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 5;
      *((_QWORD *)v45 + 2) = "NotEqual";
      qword_25411B550 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 6;
      *((_QWORD *)v47 + 2) = "GreaterEqual";
      qword_25411B558 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = 7;
      *(_QWORD *)(v49 + 16) = "Always";
      qword_25411B560 = v49;
      __cxa_guard_release(&qword_25411B3A0);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25411B3A8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411B3A8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411B7F0, "SamplerCompareFunction", 4, 4, 1, 1);
    qword_25411B7F0 = (uint64_t)&off_24ED7D9E8;
    qword_25411B830 = (uint64_t)&re::mtl::introspect_SamplerCompareFunction(BOOL)::enumTable;
    dword_25411B800 = 9;
    __cxa_guard_release(&qword_25411B3A8);
  }
  if (v2)
  {
    if ((byte_25411B2E9 & 1) != 0)
      return &qword_25411B7F0;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v55);
    v5 = byte_25411B2E9;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v55);
    if ((v5 & 1) != 0)
      return &qword_25411B7F0;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25411B2E9 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_25411B7F0;
    }
  }
  byte_25411B2E9 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411B7F0, a2);
  v51 = 0xB5BF6CF331CEE5AALL;
  v52 = "SamplerCompareFunction";
  v55[0] = 208862;
  v55[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v55);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v55);
    v11 = (unsigned int *)qword_25411B830;
    v54[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v55, &v51, 1, 1, (uint64_t)v54);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v53.var0 = 2 * v17;
          v53.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v55, v21, &v53);
          re::StringID::destroyString((re::StringID *)&v53);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v53.var0 = 2 * v25;
            v53.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v55, v29, &v53);
            re::StringID::destroyString((re::StringID *)&v53);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v55, v30);
    xmmword_25411B810 = (__int128)v53;
    re::StringID::destroyString((re::StringID *)&v51);
    if ((v2 & 1) != 0)
      return &qword_25411B7F0;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v55);
  re::internal::assertLog((re::internal *)5, v50, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SamplerCompareFunction", v51, v52);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void *re::mtl::introspect_RenderStage(re::mtl *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  re::IntrospectionBasic *v16;
  uint64_t v17[2];
  __int128 v18;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 1;
      *((_QWORD *)v13 + 2) = "Vertex";
      re::mtl::introspect_RenderStage(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = 2;
      *(_QWORD *)(v15 + 16) = "Fragment";
      qword_25582A0D8 = v15;
    }
  }
  {
    v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::mtl::introspect_RenderStage(BOOL)::info, "RenderStage", 4, 4, 1, 1);
    *(_QWORD *)v16 = &off_24ED7D9E8;
    *((_QWORD *)v16 + 8) = &re::mtl::introspect_RenderStage(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if ((re::mtl::introspect_RenderStage(BOOL)::isInitialized & 1) != 0)
      return &re::mtl::introspect_RenderStage(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    v5 = re::mtl::introspect_RenderStage(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if ((v5 & 1) != 0)
      return &re::mtl::introspect_RenderStage(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::mtl::introspect_RenderStage(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::mtl::introspect_RenderStage(BOOL)::info;
    }
  }
  re::mtl::introspect_RenderStage(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::mtl::introspect_RenderStage(BOOL)::info, a2);
  v17[0] = 0x1F136AA037B8DD0;
  v17[1] = (uint64_t)"RenderStage";
  xmmword_25582A108 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::mtl::introspect_RenderStage(BOOL)::info;
}

re::SmoothDeformerModelBuilder *re::SmoothDeformerModelBuilder::SmoothDeformerModelBuilder(re::SmoothDeformerModelBuilder *this, re::Allocator *a2, uint64_t a3, unint64_t a4, DeformationModelData *a5)
{
  _QWORD *v9;

  *(_QWORD *)this = a5;
  v9 = (_QWORD *)re::DeformationModelData::create<re::SmoothDeformer,re::SmoothDeformerModel>((uint64_t)a5, (uint64_t)a2);
  re::FixedArray<re::StringID>::init<>(v9, (uint64_t)a2, a4);
  re::FixedArray<unsigned short>::init<unsigned short const&>(v9 + 3, (uint64_t)a2, a3, &re::SmoothDeformerModel::kInvalidIndex);
  return this;
}

uint64_t re::DeformationModelData::create<re::SmoothDeformer,re::SmoothDeformerModel>(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 48, 8);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v8[0] = &off_24ED7AE70;
  v8[1] = a2;
  v9 = v8;
  v10 = 0;
  v11[3] = v11;
  v11[0] = &off_24ED7AE70;
  v11[1] = a2;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(a1 + 440), (uint64_t)v4);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(a1 + 448), (uint64_t)v11);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v10);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return *(_QWORD *)(a1 + 440);
}

unint64_t *re::SmoothDeformerModelBuilder::setEnvelopeBufferName(re::SmoothDeformerModelBuilder *this, unint64_t a2, unint64_t a3, const re::StringID *a4)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(*(_QWORD *)this + 440);
  if (v4[4] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_WORD *)(v4[5] + 2 * a2) = a3;
  if (v4[1] <= a3)
    goto LABEL_5;
  return re::StringID::operator=((unint64_t *)(v4[2] + 16 * a3), (uint64_t *)a4);
}

uint64_t re::SmoothDeformer::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v3;
  void **ComputePipelineState;
  _BYTE v5[8];
  uint64_t v6;
  char v7;
  _QWORD v8[4];
  _QWORD v9[3];
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;

  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 4);
    if (*((_BYTE *)a2 + 263))
    {
      v5[0] = 0;
      v11 = 0;
      memset(v9, 0, sizeof(v9));
      v10 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v5);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 16), ComputePipelineState);
      *(_BYTE *)(v3 + 25) = 1;
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v9);
      this = v8[0];
      if (v8[0])
      {
        if ((v8[1] & 1) != 0)
          this = (*(uint64_t (**)(void))(*(_QWORD *)v8[0] + 40))();
        memset(v8, 0, sizeof(v8));
      }
      if (v5[0])
      {
        this = v6;
        if (v6)
        {
          if ((v7 & 1) != 0)
            return (*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
        }
      }
    }
  }
  return this;
}

int64x2_t re::SmoothDeformer::addDeformationInstance@<Q0>(re::SmoothDeformer *this@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  int64x2_t result;

  if (*a2)
  {
    v3 = 0;
  }
  else if (*((_BYTE *)this + 24))
  {
    v3 = *((_BYTE *)this + 25) != 0;
  }
  else
  {
    v3 = 1;
  }
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  result = vdupq_n_s64(2uLL);
  *(int64x2_t *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t re::SmoothDeformer::allocateBuffers(re *a1, unint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  re::AttributeTable *v29;
  _QWORD *v30;
  re::AttributeTable *v31;
  re::AttributeTable *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  re::AttributeTable *v45;
  re::AttributeTable *v46;
  uint64_t v47;
  re::AttributeTable *v48;
  re::AttributeTable *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  re::AttributeTable *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  float v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  float *v83;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v91;
  unint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  _DWORD *v95;
  re::FrameContext *v96;
  int v97;
  __int16 v98;
  int v99;
  char v100;
  uint64_t v101;
  _BYTE v102[12];
  __int16 v103;
  int v104;
  __int16 v105;
  unint64_t v106;
  __int16 v107;
  unint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v6 = a4;
  v114 = *MEMORY[0x24BDAC8D0];
  v9 = *a4;
  v10 = *(_QWORD *)(*a4 + 48);
  re::globalAllocators(a1);
  v11 = *(_QWORD *)(a2 + 24);
  v13 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 24, 8);
  v96 = (re::FrameContext *)a2;
  v14 = *(void **)(a2 + 24);
  v13[1] = v10;
  v13[2] = 0;
  *v13 = v14;
  if (v10)
  {
    if (v10 >> 57)
    {
LABEL_73:
      re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 128, v10);
      _os_crash();
      __break(1u);
      goto LABEL_74;
    }
    v14 = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, v10 << 7, 8);
    v13[2] = v14;
    if (!v14)
    {
LABEL_74:
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_75:
      re::internal::assertLog((re::internal *)5, v69, "assertion failure: '%s' (%s:line %i) Invalid deformation execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 194, v86);
      _os_crash();
      __break(1u);
    }
    a2 = (unint64_t)v14;
    if (v10 != 1)
    {
      bzero(v14, (v10 << 7) - 128);
      a2 += (v10 << 7) - 128;
    }
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  v85 = a5;
  v86 = a3;
  v16 = (unint64_t)&v109;
  *((_QWORD *)&v110 + 1) = re::globalAllocators((re *)v14)[2];
  *(_QWORD *)&v111 = &v109;
  *(_QWORD *)&v109 = &off_24ED7AE18;
  v17 = (*(uint64_t (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v11 + 16))(v11, v13, &v109);
  if ((_QWORD)v111)
  {
    (**(void (***)(_QWORD))v111)(v111);
    if ((__int128 *)v111 != &v109)
      (*(void (**)(_QWORD))(**((_QWORD **)&v110 + 1) + 40))(*((_QWORD *)&v110 + 1));
  }
  if (v10)
  {
    v18 = 0;
    v88 = v10;
    v89 = v9 + 8;
    v93 = v6;
    v87 = v17;
    while (1)
    {
      v19 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v89, v18);
      v20 = *(_QWORD *)(v19 + 8);
      v21 = v6[6];
      if (v21 <= v20)
        break;
      v10 = v19;
      v22 = (_QWORD *)(v6[5] + 312 * v20);
      v23 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v20);
      v95 = *(_DWORD **)(*(_QWORD *)(v23 + 352) + 112);
      LOBYTE(v109) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v22, 1u);
      v24 = *(_DWORD *)(v22[8]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v22 + 7, (unsigned __int8 *)&v109)+ 20);
      LOBYTE(v109) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v22, 1u);
      v25 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v22 + 15, (unsigned __int8 *)&v109);
      v16 = *(_QWORD *)(v17 + 8);
      if (v16 <= v18)
        goto LABEL_65;
      v26 = *(unsigned __int16 *)(v22[16] + 20 * v25 + 4);
      v27 = *(_QWORD *)(v17 + 16);
      v28 = re::DataArray<re::MeshModel>::get(*((_QWORD *)a1 + 1) + 8, *(_QWORD *)(*(_QWORD *)(v23 + 368) + 16));
      a2 = *(unsigned __int16 *)(v23 + 392);
      v6 = *(uint64_t **)(v28 + 56);
      if ((unint64_t)v6 <= a2)
        goto LABEL_66;
      v29 = (re::AttributeTable *)(*(_QWORD *)(v28 + 64) + 560 * *(unsigned __int16 *)(v23 + 392));
      v30 = *(_QWORD **)(*(_QWORD *)(v23 + 344) + 440);
      v92 = v10;
      if (v30)
      {
        v6 = (uint64_t *)v30[4];
        if ((unint64_t)v6 <= a2)
          goto LABEL_67;
        a2 = *(unsigned __int16 *)(v30[5] + 2 * a2);
        v6 = (uint64_t *)v30[1];
        if ((unint64_t)v6 <= a2)
          goto LABEL_68;
        re::StringID::StringID((re::StringID *)&v109, (const StringID *)(v30[2] + 16 * a2));
        v31 = v29;
        do
        {
          v32 = v31;
          v31 = (re::AttributeTable *)*((_QWORD *)v31 + 1);
        }
        while (v31 && !*((_QWORD *)v32 + 9));
        *(_QWORD *)v102 = (unint64_t)v109 >> 1;
        v33 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v32 + 6, v102);
        if (v33 == -1)
          v10 = 0;
        else
          v10 = *((_QWORD *)v32 + 7) + 16 * v33 + 8;
        re::StringID::destroyString((re::StringID *)&v109);
      }
      else
      {
        v10 = 0;
      }
      v34 = v24 / v26;
      re::FrameContext::perFrameAlloc(v96, 4 * v34, 4uLL, (uint64_t)&v109);
      v35 = v109;
      v37 = DWORD2(v109);
      v36 = HIDWORD(v109);
      v38 = v110;
      v39 = v27 + (v18 << 7);
      *(_QWORD *)(v39 + 80) = v109;
      *(_DWORD *)(v39 + 88) = v37;
      *(_DWORD *)(v39 + 92) = v36;
      *(_QWORD *)(v39 + 96) = v38;
      v40 = (void *)(v35 + v37);
      if (v10)
      {
        v41 = re::AttributeTable::buffers(v29);
        v43 = *(unsigned __int8 *)v10;
        if (v42 <= v43)
          goto LABEL_69;
        memcpy(v40, (char *)objc_msgSend(*(id *)(v41 + 16 * v43), sel_contents) + *(unsigned int *)(v41 + 16 * v43 + 8), 4 * v34);
      }
      else if (v36 >= 4)
      {
        memset_pattern16((void *)(v35 + v37), &unk_226167A70, v36 & 0xFFFFFFFC);
      }
      v44 = 4 * (v34 + 2 * v34);
      a2 = v27 + (v18 << 7);
      v45 = v29;
      do
      {
        v46 = v45;
        v45 = (re::AttributeTable *)*((_QWORD *)v45 + 1);
      }
      while (v45 && !*((_QWORD *)v46 + 9));
      v91 = v34;
      *(_QWORD *)&v109 = 0x68D02E008A94F13DLL;
      v47 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v46 + 6, &v109);
      if (v47 == -1)
        v16 = 0;
      else
        v16 = *((_QWORD *)v46 + 7) + 16 * v47 + 8;
      v48 = v29;
      do
      {
        v49 = v48;
        v48 = (re::AttributeTable *)*((_QWORD *)v48 + 1);
      }
      while (v48 && !*((_QWORD *)v49 + 9));
      *(_QWORD *)&v109 = 0x3A18F0C88F5C28F6;
      v50 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v49 + 6, &v109);
      if (v50 == -1)
        v51 = 0;
      else
        v51 = (unsigned __int8 *)(*((_QWORD *)v49 + 7) + 16 * v50 + 8);
      v94 = v44;
      v52 = v29;
      do
      {
        v10 = (unint64_t)v52;
        v52 = (re::AttributeTable *)*((_QWORD *)v52 + 1);
      }
      while (v52 && !*(_QWORD *)(v10 + 72));
      *(_QWORD *)&v109 = 0x68D02E0360163291;
      v53 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v10 + 48), &v109);
      if (v53 != -1 && v16 && v51)
      {
        v54 = v53;
        if (v95)
        {
          v55 = *v95;
          v56 = *((float *)v95 + 1);
        }
        else
        {
          v56 = 0.5;
          v55 = 10;
        }
        v10 = *(_QWORD *)(v10 + 56);
        *(_DWORD *)a2 = v55;
        a2 = v27 + (v18 << 7);
        *(float *)(a2 + 4) = v56;
        v57 = re::AttributeTable::buffers(v29);
        v59 = *(unsigned __int8 *)v16;
        if (v58 <= v59)
          goto LABEL_70;
        *(_QWORD *)(a2 + 104) = v57 + 16 * v59;
        v60 = re::AttributeTable::buffers(v29);
        v62 = *v51;
        if (v61 <= v62)
          goto LABEL_71;
        v16 = v10 + 16 * v54 + 8;
        v63 = (_QWORD *)(v27 + (v18 << 7));
        v63[14] = v60 + 16 * v62;
        v64 = re::AttributeTable::buffers(v29);
        v66 = *(unsigned __int8 *)v16;
        if (v65 <= v66)
          goto LABEL_72;
        v63[15] = v64 + 16 * v66;
        re::FrameContext::perFrameAlloc(v96, v94, 4uLL, (uint64_t)&v109);
        v67 = v110;
        v68 = *((_QWORD *)&v109 + 1);
        v63[4] = v109;
        v63[5] = v68;
        v63[6] = v67;
        re::FrameContext::perFrameAlloc(v96, v94, 4uLL, (uint64_t)&v109);
        v70 = v110;
        v71 = *((_QWORD *)&v109 + 1);
        v63[7] = v109;
        v63[8] = v71;
        v63[9] = v70;
        if (v86 == 1)
        {
          v72 = *(_QWORD **)(v23 + 360);
          v73 = v93[2];
          v98 = 257;
          v16 = 65548;
          v97 = 65548;
          a2 = 30;
          v100 = 30;
          v99 = 0;
          v74 = re::DeformationBufferAllocator::alloc(v72, v73, 1, (uint64_t)&v97, *(unsigned __int8 *)(v92 + 16), v94);
          v75 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v23 + 360), *(unsigned __int8 *)(v92 + 16), v74);
          *(_WORD *)&v102[4] = 257;
          *(_DWORD *)v102 = 65548;
          LOBYTE(v103) = 30;
          *(_DWORD *)&v102[8] = 0;
          v76 = objc_msgSend(*(id *)(v75 + 24), sel_contents);
          v77 = *(_QWORD *)(v75 + 24);
          *(_QWORD *)&v109 = v76;
          *((_QWORD *)&v109 + 1) = *(_QWORD *)(v75 + 32);
          *(_QWORD *)&v110 = v77;
          re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v22, 1u, 1, (uint64_t)&v109, (uint64_t)v102);
          if (v95)
            v78 = *((float *)v95 + 1);
          else
            v78 = 0.5;
          re::FrameContext::perFrameAlloc(v96, 8uLL, 4uLL, (uint64_t)&v109);
          v79 = v109;
          v80 = v110;
          v81 = (_QWORD *)(v27 + (v18 << 7));
          v82 = *((_QWORD *)&v109 + 1);
          v83 = (float *)(v109 + DWORD2(v109));
          *(_DWORD *)v83 = v91;
          v83[1] = v78;
          v81[1] = v79;
          v81[2] = v82;
          v81[3] = v80;
        }
        else
        {
          if (v86)
            goto LABEL_75;
          re::FrameContext::perFrameAlloc(v96, v94, 0x10uLL, (uint64_t)&v109);
          *(_WORD *)&v102[4] = 257;
          *(_DWORD *)v102 = 65548;
          LOBYTE(v103) = 30;
          *(_DWORD *)&v102[8] = 0;
          re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v22, 1u, 0, (uint64_t)&v109, (uint64_t)v102);
        }
      }
      ++v18;
      v17 = v87;
      v6 = v93;
      if (v18 == v88)
        goto LABEL_63;
    }
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *(_QWORD *)(v19 + 8), v21);
    _os_crash();
    __break(1u);
LABEL_65:
    v101 = 0;
    v113 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v102 = 136315906;
    *(_QWORD *)&v102[4] = "operator[]";
    v103 = 1024;
    v104 = 468;
    v105 = 2048;
    v106 = v18;
    v107 = 2048;
    v108 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    v101 = 0;
    v113 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v102 = 136315906;
    *(_QWORD *)&v102[4] = "operator[]";
    v103 = 1024;
    v104 = 476;
    v105 = 2048;
    v106 = a2;
    v107 = 2048;
    v108 = (unint64_t)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_67:
    v101 = 0;
    v113 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v102 = 136315906;
    *(_QWORD *)&v102[4] = "operator[]";
    v103 = 1024;
    v104 = 476;
    v105 = 2048;
    v106 = a2;
    v107 = 2048;
    v108 = (unint64_t)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    v101 = 0;
    v113 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v102 = 136315906;
    *(_QWORD *)&v102[4] = "operator[]";
    v103 = 1024;
    v104 = 476;
    v105 = 2048;
    v106 = a2;
    v107 = 2048;
    v108 = (unint64_t)v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_69:
    re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v43, v42);
    _os_crash();
    __break(1u);
LABEL_70:
    re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v59, v58);
    _os_crash();
    __break(1u);
LABEL_71:
    re::internal::assertLog((re::internal *)6, v61, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v61);
    _os_crash();
    __break(1u);
LABEL_72:
    re::internal::assertLog((re::internal *)6, v65, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v66, v65);
    _os_crash();
    __break(1u);
    goto LABEL_73;
  }
LABEL_63:
  *(_QWORD *)v85 |= 2uLL;
  *(_BYTE *)(v85 + 9) = 1;
  return v17;
}

uint64_t re::SmoothDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  void *v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD **v49;
  _BYTE v50[28];
  __int16 v51;
  unint64_t v52;
  _OWORD v53[5];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Smoothing");
  v31 = a4;
  v8 = *a4;
  v34 = *(_QWORD *)(*a4 + 48);
  if (v34)
  {
    v9 = 0;
    v32 = a2;
    v33 = v8 + 8;
    do
    {
      v10 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v33, v9);
      v12 = *(_QWORD *)(a2 + 8);
      if (v12 <= v9)
      {
        memset(v53, 0, sizeof(v53));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v50 = 136315906;
        *(_QWORD *)&v50[4] = "operator[]";
        *(_WORD *)&v50[12] = 1024;
        *(_DWORD *)&v50[14] = 468;
        *(_WORD *)&v50[18] = 2048;
        *(_QWORD *)&v50[20] = v9;
        v51 = 2048;
        v52 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_25:
        re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v4, v15);
        _os_crash();
        __break(1u);
      }
      v13 = *(_QWORD *)(a2 + 16);
      v14 = v13 + (v9 << 7);
      if (*(_QWORD *)(v14 + 104))
      {
        if (*(_QWORD *)(v14 + 112))
        {
          v49 = (_QWORD **)(v13 + (v9 << 7) + 120);
          if (*v49)
          {
            v4 = *(_QWORD *)(v10 + 8);
            v15 = v31[6];
            if (v15 <= v4)
              goto LABEL_25;
            v16 = v31[5];
            v17 = (_QWORD *)(v16 + 312 * v4);
            LOBYTE(v53[0]) = 1;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
            v36 = v17 + 7;
            v35 = v17 + 8;
            v18 = *(_DWORD *)(v17[8]
                            + 32
                            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 7, (unsigned __int8 *)v53)+ 20);
            LOBYTE(v53[0]) = 1;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
            v43 = (uint64_t)v17;
            v19 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 15, (unsigned __int8 *)v53);
            if (*(_DWORD *)v14)
            {
              v20 = *(unsigned __int16 *)(v17[16] + 20 * v19 + 4);
              v21 = objc_msgSend(*(id *)(a1 + 16), sel_maxTotalThreadsPerThreadgroup);
              if (*(_DWORD *)v14)
              {
                v22 = 0;
                v23 = v13 + (v9 << 7);
                v41 = (unsigned int *)(v23 + 40);
                v42 = v23 + 32;
                v39 = (unsigned int *)(v23 + 64);
                v40 = v23 + 56;
                v24 = v16 + 312 * v4;
                v37 = (_QWORD *)(v24 + 192);
                v38 = (_QWORD *)(v24 + 184);
                v46 = v23 + 8;
                v47 = v23 + 80;
                v45 = (v18 / v20 + v21 - 1) / v21;
                v44 = v21;
                do
                {
                  objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(a1 + 16));
                  if (v22)
                  {
                    if ((v22 & 1) != 0)
                    {
                      v25 = *(_QWORD *)(v42 + 16);
                      v26 = v41;
                    }
                    else
                    {
                      v25 = *(_QWORD *)(v40 + 16);
                      v26 = v39;
                    }
                  }
                  else
                  {
                    LOBYTE(v53[0]) = 1;
                    v4 = v43;
                    re::DeformationVertexBufferState::ensureVertexBufferInitialized(v43, 1u);
                    v25 = *(_QWORD *)(*v35
                                    + 32
                                    * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v36, (unsigned __int8 *)v53)+ 24);
                    LOBYTE(v53[0]) = 1;
                    re::DeformationVertexBufferState::ensureVertexBufferInitialized(v43, 1u);
                    v26 = (unsigned int *)(*v35
                                         + 32
                                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v36, (unsigned __int8 *)v53)+ 16);
                  }
                  objc_msgSend(*this, "setBuffer:offset:atIndex:", v25, *v26, 1);
                  if (v22 == *(_DWORD *)v14 - 1)
                  {
                    LOBYTE(v53[0]) = 1;
                    re::DeformationVertexBufferState::ensureVertexBufferInitialized(v43, 1u);
                    v4 = (unint64_t)v37;
                    v27 = *(_QWORD *)(*v37
                                    + 32
                                    * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v38, (unsigned __int8 *)v53)+ 24);
                    LOBYTE(v53[0]) = 1;
                    re::DeformationVertexBufferState::ensureVertexBufferInitialized(v43, 1u);
                    v28 = (unsigned int *)(*v37
                                         + 32
                                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v38, (unsigned __int8 *)v53)+ 16);
                  }
                  else if ((v22 & 1) != 0)
                  {
                    v27 = *(_QWORD *)(v40 + 16);
                    v28 = v39;
                  }
                  else
                  {
                    v27 = *(_QWORD *)(v42 + 16);
                    v28 = v41;
                  }
                  objc_msgSend(*this, "setBuffer:offset:atIndex:", v27, *v28, 0);
                  objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v14 + 104), *(unsigned int *)(*(_QWORD *)(v14 + 104) + 8), 2);
                  objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v14 + 112), *(unsigned int *)(*(_QWORD *)(v14 + 112) + 8), 3);
                  objc_msgSend(*this, "setBuffer:offset:atIndex:", **v49, *((unsigned int *)*v49 + 2), 4);
                  objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v47 + 16), *(unsigned int *)(v47 + 8), 5);
                  objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v46 + 16), *(unsigned int *)(v46 + 8), 6);
                  v29 = *this;
                  *(_QWORD *)&v53[0] = v45;
                  *(int64x2_t *)((char *)v53 + 8) = vdupq_n_s64(1uLL);
                  *(_QWORD *)v50 = v44;
                  *(_OWORD *)&v50[8] = *(_OWORD *)((char *)v53 + 8);
                  objc_msgSend(v29, "dispatchThreadgroups:threadsPerThreadgroup:", v53, v50);
                  ++v22;
                }
                while (v22 < *(_DWORD *)v14);
              }
            }
          }
        }
      }
      ++v9;
      a2 = v32;
    }
    while (v9 != v34);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

void re::SmoothDeformer::deformCPU(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  char *v46;
  unint64_t v47;
  float *v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  char *v54;
  float32x4_t v55;
  unsigned int v56;
  float v57;
  char *v58;
  char *v59;
  float32x4_t v60;
  char *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  char *v67;
  int v68;
  unsigned int v69;
  unsigned int *v70;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _OWORD v75[5];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v72 = *(_QWORD *)(*a3 + 48);
  if (v72)
  {
    v3 = a2;
    v4 = 0;
    v73 = *a3 + 8;
    while (1)
    {
      v5 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v73, v4);
      if (*(_QWORD *)(v3 + 8) <= v4)
        goto LABEL_37;
      v7 = *(_QWORD *)(v3 + 16);
      v74 = v4;
      v8 = v7 + (v4 << 7);
      v9 = (uint64_t *)(v8 + 104);
      if (*(_QWORD *)(v8 + 104))
      {
        v10 = (uint64_t *)(v8 + 112);
        if (*(_QWORD *)(v8 + 112))
        {
          v11 = v7 + (v74 << 7);
          v13 = *(_QWORD *)(v11 + 120);
          v12 = (uint64_t *)(v11 + 120);
          if (v13)
          {
            v14 = *(_QWORD *)(v5 + 8);
            v15 = a3[6];
            if (v15 <= v14)
              goto LABEL_38;
            v16 = (_QWORD *)(a3[5] + 312 * v14);
            LOBYTE(v75[0]) = 1;
            v70 = (unsigned int *)v8;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
            v69 = *(_DWORD *)(v16[8]
                            + 32
                            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 7, (unsigned __int8 *)v75)+ 20);
            LOBYTE(v75[0]) = 1;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
            v17 = *(unsigned __int16 *)(v16[16]
                                      + 20
                                      * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 15, (unsigned __int8 *)v75)+ 4);
            v18 = *v9;
            v67 = (char *)objc_msgSend(*(id *)v18, sel_contents);
            v63 = *(unsigned int *)(v18 + 8);
            v19 = *v10;
            v20 = (char *)objc_msgSend(*(id *)v19, sel_contents);
            v21 = *(unsigned int *)(v19 + 8);
            v22 = *v12;
            v23 = (char *)objc_msgSend(*(id *)v22, sel_contents);
            v24 = *(unsigned int *)(v22 + 8);
            v25 = v7 + (v74 << 7);
            v26 = *(_QWORD *)(v25 + 80);
            v27 = *(unsigned int *)(v25 + 88);
            LOBYTE(v75[0]) = 1;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
            v28 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 23, (unsigned __int8 *)v75);
            v33 = v69;
            v34 = *v70;
            if (*v70)
              break;
          }
        }
      }
LABEL_31:
      v4 = v74 + 1;
      v3 = a2;
      if (v74 + 1 == v72)
        return;
    }
    v35 = v17;
    v36 = 0;
    v37 = &v67[v63];
    v38 = &v20[v21];
    v39 = &v23[v24];
    v40 = v26 + v27;
    v41 = v16[24] + 32 * v28;
    v42 = (char *)(*(_QWORD *)(v41 + 8) + *(unsigned int *)(v41 + 16));
    v43 = *(_DWORD *)(v41 + 20);
    v44 = v43 / 0xCuLL;
    v45 = *(_DWORD *)(v25 + 44);
    v46 = (char *)(*(_QWORD *)(v25 + 32) + *(unsigned int *)(v25 + 40));
    v47 = v45 / 0xCuLL;
    v48 = (float *)(v25 + 4);
    v62 = v45;
    if (v69 / v35 <= 1)
      v49 = 1;
    else
      v49 = v69 / v35;
    v65 = v35;
    v64 = v40;
    while (v33 < v35)
    {
LABEL_28:
      if (v45 >= 0xC)
      {
        v68 = v36;
        memmove(v42, v46, 12 * v47);
        v45 = v62;
        v40 = v64;
        v36 = v68;
        v35 = v65;
        v33 = v69;
        v34 = *v70;
      }
      if (++v36 >= v34)
        goto LABEL_31;
    }
    v50 = 0;
    while (1)
    {
      v51 = v50 ? *(_DWORD *)&v38[4 * v50 - 4] : 0;
      v52 = *(_DWORD *)&v38[4 * v50];
      v53 = v51 + 1;
      if (v53 < v52)
        break;
      v29.i32[0] = 0;
      v55 = 0uLL;
LABEL_25:
      if (v50 == v44)
        goto LABEL_35;
      if (v50 == v47)
        goto LABEL_36;
      v59 = &v42[12 * v50];
      v30.i64[0] = *(_QWORD *)v59;
      v30.i32[2] = *((_DWORD *)v59 + 2);
      v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0);
      v60 = vaddq_f32(v30, vmulq_n_f32(vmulq_n_f32(vdivq_f32(v55, v29), *v48), *(float *)(v40 + 4 * v50)));
      v61 = &v46[12 * v50];
      *(_QWORD *)v61 = v60.i64[0];
      *((_DWORD *)v61 + 2) = v60.i32[2];
      if (++v50 == v49)
        goto LABEL_28;
    }
    v54 = &v42[12 * v50];
    v55 = 0uLL;
    v29.i32[0] = 0;
    while (1)
    {
      v56 = *(_DWORD *)&v37[4 * v53];
      if (v44 <= v56)
        break;
      if (v50 >= v44)
        goto LABEL_34;
      v57 = *(float *)&v39[4 * v53];
      v58 = &v42[12 * v56];
      v31.i64[0] = *(_QWORD *)v58;
      v31.i32[2] = *((_DWORD *)v58 + 2);
      v32.i64[0] = *(_QWORD *)v54;
      v32.i32[2] = *((_DWORD *)v54 + 2);
      v31 = vmulq_n_f32(vsubq_f32(v31, v32), v57);
      v55 = vaddq_f32(v55, v31);
      v29.f32[0] = v29.f32[0] + v57;
      if (v52 == ++v53)
        goto LABEL_25;
    }
    re::internal::assertLog((re::internal *)6, v40, *(double *)v55.i64, *(double *)v29.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *(unsigned int *)&v37[4 * v53], v43 / 0xCuLL);
    _os_crash();
    __break(1u);
LABEL_34:
    re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v50, v43 / 0xCuLL);
    _os_crash();
    __break(1u);
LABEL_35:
    re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v43 / 0xCuLL, v43 / 0xCuLL);
    _os_crash();
    __break(1u);
LABEL_36:
    re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v47, v47);
    _os_crash();
    __break(1u);
LABEL_37:
    memset(v75, 0, sizeof(v75));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_38:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v14, v15);
    _os_crash();
    __break(1u);
  }
}

re::StringID *re::SmoothDeformerModelUtil::envelopeBufferNameForSmoothDataIndex@<X0>(re::SmoothDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 55);
  if (v3 && *(_QWORD *)(v3 + 8) > (unint64_t)a2)
    return re::StringID::StringID(a3, (const StringID *)(*(_QWORD *)(v3 + 16) + 16 * a2));
  else
    return re::StringID::invalid(a3);
}

uint64_t re::SmoothDeformerModelUtil::computeSmoothDeformerModelSizeExcludingMetalBuffers(re::SmoothDeformerModelUtil *this, const DeformationModelData *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const char **v5;
  size_t v6;

  v2 = (_QWORD *)*((_QWORD *)this + 55);
  if (!v2)
    return 0;
  v3 = v2[1];
  v4 = 2 * v2[4] + 16 * v3 + 48;
  if (v3)
  {
    v5 = (const char **)(v2[2] + 8);
    do
    {
      if ((*(_BYTE *)(v5 - 1) & 1) != 0)
        v6 = strlen(*v5) + 1;
      else
        v6 = 0;
      v4 += v6;
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  return v4;
}

void re::SmoothDeformer::~SmoothDeformer(re::SmoothDeformer *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {

    *((_QWORD *)this + 2) = 0;
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {

    *((_QWORD *)this + 2) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::SmoothDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::SmoothDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *a2;
  result = **a2;
  if (result)
  {
    if (v2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *v2 = 0;
  }
  return result;
}

_QWORD *re::internal::Callable<re::SmoothDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7AE18;
  return result;
}

_QWORD *re::internal::Callable<re::SmoothDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7AE18;
  return result;
}

uint64_t re::internal::Callable<re::SmoothDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14SmoothDeformerENS2_19SmoothDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14SmoothDeformerENS2_19SmoothDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED7AE70;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14SmoothDeformerENS2_19SmoothDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED7AE70;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14SmoothDeformerENS2_19SmoothDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = v2[3];
    if (v4)
    {
      if (v2[4])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[5]);
        v2[4] = 0;
        v2[5] = 0;
      }
      v2[3] = 0;
    }
    re::FixedArray<re::StringID>::deinit(v2);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14SmoothDeformerENS2_19SmoothDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_14SmoothDeformerENS2_19SmoothDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
}

float32x2_t re::TonemapUserParameters::computeDirectParameters@<D0>(re::TonemapUserParameters *this@<X0>, float32x2_t *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float32_t v11;
  float32_t v12;
  float v13;
  float32_t v14;
  float32_t v15;
  float32_t v16;
  __int32 v17;
  float32x2_t v18;
  float32x2_t result;
  float v20;
  float v21;

  v4 = *((float *)this + 1);
  if (v4 > 1.0)
    v4 = 1.0;
  if (v4 < 0.0)
    v4 = 0.0;
  v5 = powf(v4, 2.2);
  v6 = *(float *)this;
  if (*(float *)this > 1.0)
    v6 = 1.0;
  if (v6 < 0.0)
    v6 = 0.0;
  v7 = *((float *)this + 4);
  if (v7 > 1.0)
    v7 = 1.0;
  if (v7 < 0.0)
    v7 = 0.0;
  v21 = v7;
  v9 = *((float *)this + 2);
  v8 = *((float *)this + 3);
  if (v8 > 1.0)
    v8 = 1.0;
  if (v8 < 0.0)
    v8 = 0.0;
  if (v9 > 10.0)
    v9 = 10.0;
  if (v9 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  v20 = v10;
  v11 = v5 * 0.5;
  v12 = (float)(v5 * 0.5) + (float)(v6 * (float)(0.0 - (float)(v5 * 0.5)));
  v13 = (float)(1.0 - v12) + (float)(v8 * (float)(0.0 - (float)(1.0 - v12)));
  v14 = (float)(v5 * 0.5) + v13;
  v15 = v12 + v13;
  v16 = (float)(exp2f(v10) + (float)((float)(v5 * 0.5) + (float)(1.0 - v12))) + -1.0;
  v17 = *((_DWORD *)this + 5);
  a2[2].f32[0] = v16;
  a2[2].i32[1] = v17;
  a2->f32[0] = v11;
  a2->f32[1] = v12;
  a2[1].f32[0] = v14;
  a2[1].f32[1] = v15;
  v18.i32[1] = 1056964608;
  v18.f32[0] = v16 + v16;
  result = vmul_n_f32(vmul_n_f32(v18, v21), v20);
  a2[3] = result;
  return result;
}

float re::TonemapUserParameters::computeRenderParameters@<S0>(re::TonemapUserParameters *this@<X0>, uint64_t a2@<X8>)
{
  float v4;
  int v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;
  _OWORD v13[2];

  memset(v13, 0, sizeof(v13));
  re::TonemapUserParameters::computeDirectParameters(this, (float32x2_t *)v13);
  re::TonemapUserParameters::computeRenderParametersImpl((float *)this, (float *)v13, a2);
  v4 = *(float *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 1065353216;
  *(_DWORD *)(a2 + 124) = 1065353216;
  if (*((_BYTE *)this + 44))
  {
    v5 = *((_DWORD *)this + 12);
    if (v5 == 2)
    {
      v9 = *((float *)this + 10);
    }
    else
    {
      if (v5 == 1)
      {
        v8 = *((float *)this + 13) * 0.18;
      }
      else
      {
        v6 = 1.0;
        if (v5)
        {
LABEL_12:
          *(float *)(a2 + 128) = 1.0 / *((float *)this + 13);
          goto LABEL_13;
        }
        v7 = re::computeTonemappingInverse((float *)a2, *((float *)this + 13));
        v8 = re::computeTonemapping((float *)a2, v7 * 0.18);
      }
      v9 = v8 / 0.13;
    }
    v10 = *((float *)this + 9);
    v6 = (float)(v10 * re::computeTonemappingInverse((float *)a2, v9 * 0.13)) / 0.18;
    goto LABEL_12;
  }
  if (*((_BYTE *)this + 32))
    v6 = (float)(re::computeTonemappingInverse((float *)a2, *((float *)this + 10) * 0.13) * *((float *)this + 9)) / 0.18;
  else
    v6 = 1.0;
LABEL_13:
  v11 = v4 * v6;
  *(float *)(a2 + 24) = v11;
  result = 1.0 / v11;
  *(float *)(a2 + 124) = result;
  return result;
}

float re::TonemapUserParameters::computeRenderParametersImpl@<S0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  float result;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;

  *(_BYTE *)(a3 + 120) = 1;
  v5 = a2[1];
  v6 = a2[3];
  v7 = a2[5];
  v41 = a2[7];
  v42 = a2[4];
  v8 = *a2 * (float)(1.0 / v42);
  v43 = a2[2] * (float)(1.0 / v42);
  v9 = 1.0;
  if ((float)(v43 - v8) != 0.0)
    v9 = (float)(v6 - v5) / (float)(v43 - v8);
  v40 = a2[6];
  *(float *)(a3 + 68) = (float)-(float)(v5 + (float)((float)-v9 * v8)) / v9;
  *(_QWORD *)(a3 + 72) = 0x3F80000000000000;
  *(_DWORD *)(a3 + 80) = 1065353216;
  *(float *)(a3 + 84) = v7 * logf(v9);
  *(float *)(a3 + 88) = v7;
  v39 = v5 - (float)(v9 * v8);
  v37 = v7 + -1.0;
  v38 = v7 * v9;
  v10 = (float)(v7 * v9) * powf(v39 + (float)(v9 * v8), v7 + -1.0);
  v11 = powf(v5, v7);
  if (v11 >= 0.00001)
    v12 = v11;
  else
    v12 = 0.00001;
  v13 = powf(v6, v7);
  if (v13 >= 0.00001)
    v14 = v13;
  else
    v14 = 0.00001;
  v15 = powf(v41 + 1.0, v7) + -1.0;
  *(float *)a3 = v42;
  *(float *)(a3 + 4) = 1.0 / v42;
  *(float *)(a3 + 8) = v8;
  *(float *)(a3 + 12) = v43;
  *(float *)(a3 + 16) = v12;
  *(float *)(a3 + 20) = v14;
  v16 = (float)(v8 * v10) / v12;
  v17 = logf(v12);
  v18 = logf(v8);
  *(_OWORD *)(a3 + 44) = xmmword_22610BC10;
  *(float *)(a3 + 60) = v17 - (float)(v16 * v18);
  *(float *)(a3 + 64) = v16;
  v19 = v15 + 1.0;
  v20 = v19 - v14;
  v21 = 0.0;
  v22 = (float)(v19 - v14) <= 0.0;
  v23 = 0.0;
  v24 = 0.0;
  v25 = 0.0;
  v26 = 0.0;
  if (!v22)
  {
    v24 = (float)((float)(1.0 / v42) * v40) + 1.0;
    v25 = (float)((float)(v24 - v43) * (float)(v38 * powf(v39 + (float)(v9 * v43), v37))) / v20;
    v27 = logf(v20);
    v28 = logf(v24 - v43);
    v21 = 0.0;
    v26 = v27 - (float)(v25 * v28);
    v23 = -1.0;
  }
  *(float *)(a3 + 100) = v23;
  *(float *)(a3 + 104) = v23;
  *(float *)(a3 + 92) = v24;
  *(float *)(a3 + 96) = v19;
  *(float *)(a3 + 108) = v26;
  *(float *)(a3 + 112) = v25;
  v29 = v23 * (float)(1.0 - v24);
  if (v29 > 0.0)
  {
    v30 = logf(v29);
    v21 = expf(v26 + (float)(v25 * v30));
  }
  v31 = 0;
  v32 = 1.0 / (float)(v19 + (float)(v21 * v23));
  do
  {
    v33 = a3 + v31;
    *(float *)(v33 + 48) = v32 * *(float *)(a3 + v31 + 48);
    *(float *)(v33 + 56) = v32 * *(float *)(a3 + v31 + 56);
    v31 += 24;
  }
  while (v31 != 72);
  *(float *)(a3 + 24) = exp2f(a1[7]);
  v34 = a1[6];
  v35 = powf(0.18 / a1[9], 1.0 - v34);
  *(float *)(a3 + 28) = v35;
  *(float *)(a3 + 32) = v34;
  result = 1.0 / v35;
  *(float *)(a3 + 36) = result;
  *(float *)(a3 + 40) = 1.0 / v34;
  *(_DWORD *)(a3 + 128) = 1065353216;
  return result;
}

float re::computeTonemappingInverse(float *a1, float a2)
{
  float v3;
  float v4;
  unsigned int v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;

  v3 = 1.0;
  if (a2 <= 1.0)
    v3 = a2;
  v4 = 0.0;
  if (v3 < 0.0)
    v3 = 0.0;
  if (v3 <= a1[5])
    v5 = v3 > a1[4];
  else
    v5 = 2;
  v6 = &a1[6 * v5];
  v7 = v6[13];
  v8 = v6[11];
  v9 = (float)(v3 - v6[12]) / v6[14];
  if (v9 > 0.0)
  {
    v10 = &a1[6 * v5];
    v12 = v10[15];
    v11 = v10[16];
    v13 = logf(v9);
    v4 = expf((float)(v13 - v12) / v11);
  }
  return (float)(*a1 * powf(a1[9] * (float)(v8 + (float)(v4 / v7)), a1[10])) / a1[6];
}

float re::computeTonemapping(float *a1, float a2)
{
  float v3;
  unsigned int v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;

  v3 = (float)(powf(a1[6] * a2, a1[8]) * a1[7]) * a1[1];
  if (v3 <= a1[3])
    v4 = v3 > a1[2];
  else
    v4 = 2;
  v5 = &a1[6 * v4];
  v6 = v5[14];
  v7 = v5[12];
  v8 = (float)(v3 - v5[11]) * v5[13];
  v9 = 0.0;
  if (v8 > 0.0)
  {
    v10 = &a1[6 * v4];
    v12 = v10[15];
    v11 = v10[16];
    v13 = logf(v8);
    v9 = expf(v12 + (float)(v11 * v13));
  }
  return v7 + (float)(v9 * v6);
}

void re::computeTonemappingInverseAccelerated(float *a1, const float *__A, float *a3, unint64_t a4)
{
  const float *v6;
  const float *v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  const float *v12;
  float v13;
  vDSP_Length v14;
  float v15;
  const float *v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  const float *v20;
  float v21;
  float *v22;
  float *v23;

  v6 = __A;
  v23 = a1;
  if (a4)
  {
    v8 = __A;
    v9 = a4;
    do
    {
      v10 = v9 >> 1;
      v11 = (float *)&v8[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (v13 < a1[4])
        v8 = v12;
      else
        v9 = v10;
    }
    while (v9);
    v14 = v8 - __A;
    re::computeTonemappingInverseAccelerated(re::TonemapParameters const&,float *,float *,unsigned long)::$_0::operator()(&v23, 0, __A, a3, v14);
    v15 = a1[5];
    v16 = v6;
    v17 = a4;
    do
    {
      v18 = v17 >> 1;
      v19 = (float *)&v16[v17 >> 1];
      v21 = *v19;
      v20 = v19 + 1;
      v17 += ~(v17 >> 1);
      if (v21 < v15)
        v16 = v20;
      else
        v17 = v18;
    }
    while (v17);
    v6 = v8;
  }
  else
  {
    re::computeTonemappingInverseAccelerated(re::TonemapParameters const&,float *,float *,unsigned long)::$_0::operator()(&v23, 0, __A, a3, 0);
    v14 = 0;
    v16 = v6;
  }
  v22 = &a3[v14];
  re::computeTonemappingInverseAccelerated(re::TonemapParameters const&,float *,float *,unsigned long)::$_0::operator()(&v23, 1, v6, v22, v16 - v6);
  re::computeTonemappingInverseAccelerated(re::TonemapParameters const&,float *,float *,unsigned long)::$_0::operator()(&v23, 2, v16, (float *)((char *)v22 + (char *)v16 - (char *)v6), a4 - (v14 + v16 - v6));
}

void re::computeTonemappingInverseAccelerated(re::TonemapParameters const&,float *,float *,unsigned long)::$_0::operator()(float **a1, int a2, const float *__A, float *a4, vDSP_Length __N)
{
  float *v7;
  float *v8;
  vDSP_Length v9;
  float *v10;
  vDSP_Length v11;
  float *v12;
  float *v13;
  float v14;
  int __Na;
  float __N_4;
  float v17;
  float __B;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v7 = *a1;
  v8 = &(*a1)[6 * a2];
  v23 = v8[11];
  v22 = 1.0 / v8[13];
  v21 = -v8[15];
  v20 = 1.0 / v8[16];
  v19 = 1.0 / v8[14];
  __B = -v8[12];
  v17 = *v7 / v7[6];
  vDSP_vsadd(__A, 1, &__B, a4, 1, __N);
  vDSP_vsmul(a4, 1, &v19, a4, 1, __N);
  __N_4 = 0.0;
  if (__N)
  {
    v9 = __N;
    v10 = a4;
    do
    {
      v11 = v9 >> 1;
      v12 = &v10[v9 >> 1];
      v14 = *v12;
      v13 = v12 + 1;
      v9 += ~(v9 >> 1);
      if (v14 > 0.0)
        v9 = v11;
      else
        v10 = v13;
    }
    while (v9);
  }
  else
  {
    v10 = a4;
  }
  vDSP_vramp(&__N_4, &__N_4, a4, 1, (int)(v10 - a4));
  __Na = __N - ((unint64_t)((char *)v10 - (char *)a4) >> 2);
  vvlogf(v10, v10, &__Na);
  vDSP_vsadd(v10, 1, &v21, v10, 1, __Na);
  vDSP_vsmul(v10, 1, &v20, v10, 1, __Na);
  vvexpf(v10, v10, &__Na);
  vDSP_vsmul(a4, 1, &v22, a4, 1, __N);
  vDSP_vsadd(a4, 1, &v23, a4, 1, __N);
  vDSP_vsmul(a4, 1, &v17, a4, 1, __N);
}

BOOL re::haveSamePreBlendLUT(re *this, const re::TonemapUserParameters *a2, const re::TonemapUserParameters *a3)
{
  return *(float *)this == *(float *)a2
      && *((float *)this + 1) == *((float *)a2 + 1)
      && *((float *)this + 2) == *((float *)a2 + 2)
      && *((float *)this + 3) == *((float *)a2 + 3)
      && *((float *)this + 4) == *((float *)a2 + 4)
      && *((float *)this + 5) == *((float *)a2 + 5)
      && *((float *)this + 6) == *((float *)a2 + 6)
      && *((unsigned __int8 *)this + 44) == *((unsigned __int8 *)a2 + 44)
      && *((_DWORD *)this + 12) == *((_DWORD *)a2 + 12)
      && *((float *)this + 13) == *((float *)a2 + 13);
}

BOOL re::haveSameExposure(re *this, const re::TonemapUserParameters *a2, const re::TonemapUserParameters *a3)
{
  return *((float *)this + 7) == *((float *)a2 + 7)
      && *((unsigned __int8 *)this + 32) == *((unsigned __int8 *)a2 + 32)
      && *((float *)this + 9) == *((float *)a2 + 9)
      && *((float *)this + 10) == *((float *)a2 + 10)
      && *((unsigned __int8 *)this + 44) == *((unsigned __int8 *)a2 + 44)
      && *((_DWORD *)this + 12) == *((_DWORD *)a2 + 12)
      && *((float *)this + 13) == *((float *)a2 + 13);
}

uint64_t *re::allocInfo_TonemapUserParameters(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_406);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_406))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411C080, 0);
    *(uint64_t *)((char *)&qword_25411C090 + 6) = 0;
    qword_25411C090 = 0;
    qword_25411C0A0 = 0;
    qword_25411C0A8 = 0xFFFFFFFFLL;
    qword_25411C080 = (uint64_t)&off_24ED7DAA8;
    qword_25411C0B0 = (uint64_t)"TonemapUserParameters";
    dword_25411C0B8 = 0;
    xmmword_25411C0C0 = 0u;
    unk_25411C0D0 = 0u;
    xmmword_25411C0E0 = 0u;
    qword_25411C0F0 = 0;
    __cxa_guard_release(&_MergedGlobals_406);
  }
  return &qword_25411C080;
}

void re::initInfo_TonemapUserParameters(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  void *v44;
  uint64_t v45;
  __int128 v46;
  _QWORD v47[2];
  __int128 v48;

  v47[0] = 0xA8AD3C79569E427ELL;
  v47[1] = "TonemapUserParameters";
  re::StringID::destroyString((re::StringID *)v47);
  *((_OWORD *)this + 2) = v48;
  v4 = atomic_load((unsigned __int8 *)&qword_25411C028);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411C028);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "toeStrength";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411C030 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "toeLength";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411C038 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "shoulderStrength";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411C040 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "shoulderLength";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xC00000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25411C048 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_float((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "shoulderAngle";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x1000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_25411C050 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_float((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "gamma";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x1400000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_25411C058 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_float((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "exposure";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1C00000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_25411C060 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::introspect_BOOL((re *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "enableExposureCompensation";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x2000000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_25411C068 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = re::introspect_float((re *)1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "exposureCompensationInputScalar";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x240000000ALL;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_25411C070 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v44 = re::introspect_float((re *)1, v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = "exposureCompensationTargetScalar";
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 32) = 0x280000000BLL;
      *(_DWORD *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = 0;
      *(_QWORD *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_25411C078 = v45;
      __cxa_guard_release(&qword_25411C028);
    }
  }
  *((_QWORD *)this + 2) = 0x3C00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 10;
  *((_QWORD *)this + 8) = &qword_25411C030;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TonemapUserParameters>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TonemapUserParameters>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TonemapUserParameters>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TonemapUserParameters>;
  re::IntrospectionRegistry::add(this, v3);
  v46 = v48;
}

double re::internal::defaultConstruct<re::TonemapUserParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = xmmword_2260F4F30;
  *(_OWORD *)(a3 + 16) = xmmword_2260EDC60;
  *(_BYTE *)(a3 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a3 + 36) = result;
  *(_BYTE *)(a3 + 44) = 0;
  *(_QWORD *)(a3 + 48) = 0x3F80000000000000;
  *(_BYTE *)(a3 + 56) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::TonemapUserParameters>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = xmmword_2260F4F30;
  *(_OWORD *)(a1 + 16) = xmmword_2260EDC60;
  *(_BYTE *)(a1 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 36) = result;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t re::introspect_TonemapUserParameters(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TonemapUserParameters", (uint64_t (*)(re::internal *))re::allocInfo_TonemapUserParameters, (re::IntrospectionBase *(*)(void))re::initInfo_TonemapUserParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TonemapUserParameters>, this);
}

uint64_t re::RenderGraphBuilder::RenderGraphBuilder(uint64_t a1, re::RenderGraphResourceDescriptions *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v7 = a1 + 8;
  v8 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  v9 = a1 + 88;
  v10 = a1 + 128;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = a1 + 168;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_QWORD *)(a1 + 204) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  re::RenderGraphResourceDescriptions::swap((re::RenderGraphResourceDescriptions *)a1, a2);
  *(_QWORD *)(a1 + 296) = v7;
  *(_QWORD *)(a1 + 304) = v8;
  *(_QWORD *)(a1 + 312) = v9;
  *(_QWORD *)(a1 + 320) = v10;
  *(_QWORD *)(a1 + 328) = v11;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_QWORD *)(a1 + 412) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 607) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  v12 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 624) = v12;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v13 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v13;
  v14 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v14;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 656) = a4;
  return a1;
}

void re::RenderGraphBuilder::~RenderGraphBuilder(re::RenderGraphBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  re::DynamicArray<re::RenderGraphScopeOutput>::deinit((uint64_t)this + 616);
  v2 = *((_QWORD *)this + 68);
  if (v2)
  {
    if (*((_QWORD *)this + 72))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 72) = 0;
    *((_QWORD *)this + 69) = 0;
    *((_QWORD *)this + 70) = 0;
    *((_QWORD *)this + 68) = 0;
    ++*((_DWORD *)this + 142);
  }
  v3 = *((_QWORD *)this + 63);
  if (v3)
  {
    if (*((_QWORD *)this + 67))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 67) = 0;
    *((_QWORD *)this + 64) = 0;
    *((_QWORD *)this + 65) = 0;
    *((_QWORD *)this + 63) = 0;
    ++*((_DWORD *)this + 132);
  }
  v4 = (_QWORD *)((char *)this + 424);
  v5 = *((_QWORD *)this + 58);
  if (v5)
  {
    if (*((_QWORD *)this + 62))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 62) = 0;
    *((_QWORD *)this + 59) = 0;
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 58) = 0;
    ++*((_DWORD *)this + 122);
  }
  if (*v4)
  {
    if (*((_QWORD *)this + 57))
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4);
    *((_QWORD *)this + 57) = 0;
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 55) = 0;
    *v4 = 0;
    ++*((_DWORD *)this + 112);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 47);
  re::DynamicArray<re::RenderGraphResourceSetup>::deinit((uint64_t)this + 336);
  re::RenderGraphResourceDescriptions::~RenderGraphResourceDescriptions(this);
}

uint64_t re::RenderGraphBuilder::createCompiledGraph(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = re::globalAllocators((re *)a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 832, 8);
  return re::RenderGraphCompiled::RenderGraphCompiled(v5, (re::RenderGraphResourceDescriptions *)a1, (uint64_t)(a1 + 77), (uint64_t)(a1 + 42), a2, a1[82]);
}

void re::RenderGraphBuilder::read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  __int16 v17;
  int v18;
  int v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 == -1)
  {
    if (*(_BYTE *)(a3 + 4))
      return;
    goto LABEL_10;
  }
  v7 = *(_DWORD *)(a2 + 12);
  if (v7 != -1 || *(_BYTE *)(a3 + 4) == 0)
  {
    if (v7 != -1)
    {
LABEL_12:
      v12 = *(_DWORD *)(a3 + 8);
      v11 = *(_DWORD *)(a3 + 12);
      v14 = *(_DWORD *)a3;
      v15 = v11;
      v16 = xmmword_2260E5D70;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = v12;
      v21 = 0;
      v22 = v6;
      re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)(a1 + 464), (uint64_t)&v14);
      if (*(_DWORD *)(a3 + 12) != 12)
      {
        v13 = re::RenderGraphCompiled::targetDescription(a1, a2);
        *(_DWORD *)(v13 + 64) |= 1u;
      }
      return;
    }
LABEL_10:
    v9 = *re::graphicsLogObjects((re *)a1);
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    v6 = *(_DWORD *)(a2 + 8);
    if (v10)
    {
      v14 = 67109120;
      v15 = v6;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Attempting to read from an invalid non-optional target (%u).", (uint8_t *)&v14, 8u);
      v6 = *(_DWORD *)(a2 + 8);
    }
    goto LABEL_12;
  }
}

uint64_t re::RenderGraphBuilder::write(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  int v7;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  _QWORD v13[2];
  __int128 v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v20 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 == -1)
  {
    if (*(_BYTE *)(a3 + 33))
      return result;
    goto LABEL_10;
  }
  v7 = *(_DWORD *)(a2 + 12);
  if (v7 != -1 || *(_BYTE *)(a3 + 33) == 0)
  {
    if (v7 != -1)
    {
LABEL_12:
      v13[0] = *(_QWORD *)a3;
      v14 = xmmword_2260E5D70;
      v15 = *(_WORD *)(a3 + 32);
      v16 = *(_QWORD *)(a3 + 36);
      v17 = 2;
      v18 = 0;
      v19 = v6;
      re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)(v5 + 58), (uint64_t)v13);
      *(_OWORD *)(v5[62] + (v5[60] << 6) - 48) = *(_OWORD *)(a3 + 16);
      result = re::RenderGraphCompiled::targetDescription((uint64_t)v5, a2);
      if (*(_DWORD *)(a3 + 4) == 5)
        v11 = 2;
      else
        v11 = 4;
      *(_DWORD *)(result + 64) |= v11;
      v12 = *(_QWORD *)(result + 88);
      if (v12 != -1)
        v5[73] |= v12;
      return result;
    }
LABEL_10:
    v9 = *re::graphicsLogObjects((re *)result);
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    v6 = *(_DWORD *)(a2 + 8);
    if (v10)
    {
      LODWORD(v13[0]) = 67109120;
      HIDWORD(v13[0]) = v6;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Attempting to write to an invalid non-optional target (%u).", (uint8_t *)v13, 8u);
      v6 = *(_DWORD *)(a2 + 8);
    }
    goto LABEL_12;
  }
  return result;
}

double re::RenderGraphBuilder::read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  NSObject *v8;
  _BOOL4 v9;
  double result;
  _QWORD v11[2];
  __int128 v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 == -1)
  {
    if (*(_BYTE *)(a3 + 4))
      return result;
    goto LABEL_10;
  }
  v6 = *(_DWORD *)(a2 + 12);
  if (v6 != -1 || *(_BYTE *)(a3 + 4) == 0)
  {
    if (v6 != -1)
    {
LABEL_12:
      v11[0] = 0;
      v12 = xmmword_2260E5D70;
      v13 = 0;
      v14 = 0;
      v15 = 2;
      v16 = 0;
      v17 = v5;
      *(_QWORD *)&result = re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)(a1 + 464), (uint64_t)v11).n128_u64[0];
      return result;
    }
LABEL_10:
    v8 = *re::graphicsLogObjects((re *)a1);
    v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    v5 = *(_DWORD *)(a2 + 8);
    if (v9)
    {
      LODWORD(v11[0]) = 67109120;
      HIDWORD(v11[0]) = v5;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Attempting to read from an invalid non-optional buffer (%u).", (uint8_t *)v11, 8u);
      v5 = *(_DWORD *)(a2 + 8);
    }
    goto LABEL_12;
  }
  return result;
}

void re::RenderGraphBuilder::write(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 == -1)
  {
    if (*(_BYTE *)(a3 + 33))
      return;
LABEL_10:
    v9 = *re::graphicsLogObjects((re *)a1);
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    v6 = *(_DWORD *)(a2 + 8);
    if (v10)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Attempting to write to an invalid non-optional buffer (%u).", buf, 8u);
      v6 = *(_DWORD *)(a2 + 8);
    }
    goto LABEL_12;
  }
  v7 = *(_DWORD *)(a2 + 12);
  if (v7 == -1 && *(_BYTE *)(a3 + 33) != 0)
    return;
  if (v7 == -1)
    goto LABEL_10;
LABEL_12:
  v11 = *(_DWORD *)(a3 + 4);
  if (v11 == 1)
    v11 = 11;
  *(_DWORD *)buf = *(_DWORD *)a3;
  *(_DWORD *)&buf[4] = v11;
  v16 = xmmword_2260E5D70;
  LOWORD(v17) = 0;
  *(_QWORD *)((char *)&v17 + 4) = 0;
  HIDWORD(v17) = 2;
  LOBYTE(v18) = 0;
  DWORD1(v18) = v6;
  re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)(a1 + 58), (uint64_t)buf);
  v12 = a1[39];
  v13 = *(unsigned int *)(a2 + 12);
  if (*(_QWORD *)(v12 + 16) <= v13)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 48 * v13 + 32);
  if (v14 != -1)
    a1[73] |= v14;
}

uint64_t re::RenderGraphBuilder::handleAutoMsaaTargets(re::RenderGraphBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v20[1] = 0;
  v21 = 0;
  v20[0] = 0;
  v22 = 0;
  re::DynamicArray<re::RigTransform>::setCapacity(v20, 3uLL);
  v2 = *((_QWORD *)this + 60);
  if (v2)
  {
    v3 = v2 << 6;
    v4 = (_DWORD *)(*((_QWORD *)this + 62) + 52);
    while (1)
    {
      v5 = *v4;
      v6 = *((_QWORD *)this + 37);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7 <= v5)
        break;
      v8 = *(_QWORD *)(v6 + 32);
      if (!*(_DWORD *)(v8 + 48 * v5))
      {
        v9 = *((_QWORD *)this + 38);
        v5 = *(unsigned int *)(v8 + 48 * v5 + 28);
        v7 = *(_QWORD *)(v9 + 16);
        if (v7 <= v5)
          goto LABEL_19;
        v10 = *(_QWORD *)(v9 + 32) + 112 * v5;
        v12 = *(_DWORD *)(v10 + 80);
        v11 = (_DWORD *)(v10 + 80);
        if (v12 != -1)
        {
          v13 = *(_OWORD *)(v4 - 1);
          v15 = *(_OWORD *)(v4 - 13);
          v14 = *(_OWORD *)(v4 - 9);
          v35 = *(_OWORD *)(v4 - 5);
          v36 = v13;
          v33 = v15;
          v34 = v14;
          if ((DWORD1(v15) - 1) <= 2)
          {
            DWORD1(v33) = DWORD1(v15) + 5;
            re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)v20, (uint64_t)&v33);
            *v4 = *v11;
          }
        }
      }
      v4 += 16;
      v3 -= 64;
      if (!v3)
        goto LABEL_11;
    }
    v24 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = v5;
    v31 = 2048;
    v32 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    v24 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = v5;
    v31 = 2048;
    v32 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_11:
  if (v21)
  {
    v16 = (re::RenderGraphBuilder *)((char *)this + 464);
    v17 = v23;
    v18 = v21 << 6;
    do
    {
      re::DynamicArray<re::RigTransform>::add(v16, v17);
      v17 += 64;
      v18 -= 64;
    }
    while (v18);
  }
  result = v20[0];
  if (v20[0])
  {
    if (v23)
      return (*(uint64_t (**)(void))(*(_QWORD *)v20[0] + 40))();
  }
  return result;
}

uint64_t re::RenderGraphBuilder::handleProgrammableBlendingTargets(re::RenderGraphBuilder *this)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[2];
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v17 = 0;
  re::DynamicArray<re::RigTransform>::setCapacity(v15, 8uLL);
  v2 = *((_QWORD *)this + 60);
  if (v2)
  {
    v3 = (__int128 *)*((_QWORD *)this + 62);
    v4 = v2 << 6;
    do
    {
      v5 = *((_QWORD *)this + 37);
      v6 = *((unsigned int *)v3 + 13);
      v7 = *(_QWORD *)(v5 + 16);
      if (v7 <= v6)
      {
        v19 = 0;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v20 = 136315906;
        v21 = "operator[]";
        v22 = 1024;
        v23 = 789;
        v24 = 2048;
        v25 = v6;
        v26 = 2048;
        v27 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (!*(_DWORD *)(*(_QWORD *)(v5 + 32) + 48 * v6)
        && *((_DWORD *)v3 + 1) == 1
        && ((*((unsigned __int8 *)this + 609) >> *(_DWORD *)v3) & 1) != 0)
      {
        v9 = v3[1];
        v8 = v3[2];
        v10 = *v3;
        *(_QWORD *)&v31 = *((_QWORD *)v3 + 6);
        v29 = v9;
        v30 = v8;
        v28 = v10;
        DWORD1(v28) = 10;
        re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)v15, (uint64_t)&v28);
      }
      v3 += 4;
      v4 -= 64;
    }
    while (v4);
  }
  if (v16)
  {
    v11 = (re::RenderGraphBuilder *)((char *)this + 464);
    v12 = v18;
    v13 = v16 << 6;
    do
    {
      re::DynamicArray<re::RigTransform>::add(v11, v12);
      v12 += 64;
      v13 -= 64;
    }
    while (v13);
  }
  result = v15[0];
  if (v15[0])
  {
    if (v18)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 40))();
  }
  return result;
}

_QWORD *re::RenderGraphBuilder::handleForceResolve(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;

  v1 = this[60];
  if (v1)
  {
    v2 = this[37];
    v3 = v1 << 6;
    v4 = *(_QWORD *)(v2 + 16);
    for (i = (unsigned int *)(this[62] + 52); ; i += 16)
    {
      v6 = *i;
      if (v4 <= v6)
        break;
      v7 = *(_QWORD *)(v2 + 32);
      if (!*(_DWORD *)(v7 + 48 * v6))
      {
        v8 = this[38];
        v9 = *(unsigned int *)(v7 + 48 * v6 + 28);
        if (*(_QWORD *)(v8 + 16) <= v9)
          goto LABEL_13;
        v10 = *(_QWORD *)(v8 + 32) + 112 * v9;
        v12 = *(_DWORD *)(v10 + 80);
        v11 = (_DWORD *)(v10 + 80);
        if (v12 != -1 && *(i - 12) - 6 <= 2)
          *v11 = -1;
      }
      v3 -= 64;
      if (!v3)
        return this;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return this;
}

double re::RenderGraphBuilder::setVisibilityResultsBuffer(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v6;
  _BOOL4 v7;
  double result;
  _QWORD v9[2];
  __int128 v10;
  __int16 v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 == -1 || *(_DWORD *)(a2 + 12) == -1)
  {
    v6 = *re::graphicsLogObjects((re *)a1);
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    v3 = *(_DWORD *)(a2 + 8);
    if (v7)
    {
      LODWORD(v9[0]) = 67109120;
      HIDWORD(v9[0]) = v3;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Attempting to use an invalid buffer for visibility results (%u).", (uint8_t *)v9, 8u);
      v3 = *(_DWORD *)(a2 + 8);
    }
  }
  v9[0] = 0x900000000;
  v10 = xmmword_2260E5D70;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 2;
  v15 = 0;
  v16 = v3;
  *(_QWORD *)&result = re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)(a1 + 464), (uint64_t)v9).n128_u64[0];
  return result;
}

_QWORD *re::RenderGraphBuilder::startNode(re::RenderGraphBuilder *this, re::RenderGraphNodeBase *a2)
{
  char *v3;
  _QWORD *result;
  uint64_t v5;
  re::RenderGraphNodeBase *v6;

  v6 = a2;
  v3 = (char *)this + 424;
  *((_QWORD *)this + 55) = 0;
  ++*((_DWORD *)this + 112);
  *((_QWORD *)this + 60) = 0;
  ++*((_DWORD *)this + 122);
  *((_QWORD *)this + 65) = 0;
  ++*((_DWORD *)this + 132);
  *((_QWORD *)this + 70) = 0;
  ++*((_DWORD *)this + 142);
  *((_QWORD *)this + 73) = 0;
  *((_DWORD *)this + 148) = 0;
  *((_QWORD *)this + 75) = 0;
  *(_DWORD *)(v3 + 183) = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v3, &v6);
  if ((*(uint64_t (**)(re::RenderGraphNodeBase *))(*(_QWORD *)v6 + 16))(v6))
  {
    v5 = 0;
    re::DynamicArray<unsigned long>::add((_QWORD *)this + 63, &v5);
  }
  result = (_QWORD *)(*(uint64_t (**)(re::RenderGraphNodeBase *))(*(_QWORD *)v6 + 24))(v6);
  if (result)
  {
    v5 = 0;
    return re::DynamicArray<unsigned long>::add((_QWORD *)this + 68, &v5);
  }
  return result;
}

void re::RenderGraphBuilder::finishNode(re::RenderGraphBuilder *this, re::RenderGraphNodeBase *a2)
{
  re::DynamicArray<re::RenderGraphResourceSetup>::add((re::RenderGraphBuilder *)((char *)this + 336), (uint64_t)this + 424);
  *((_QWORD *)this + 55) = 0;
  ++*((_DWORD *)this + 112);
  *((_QWORD *)this + 60) = 0;
  ++*((_DWORD *)this + 122);
  *((_QWORD *)this + 65) = 0;
  ++*((_DWORD *)this + 132);
  *((_QWORD *)this + 70) = 0;
  ++*((_DWORD *)this + 142);
  *((_QWORD *)this + 73) = 0;
  *((_DWORD *)this + 148) = 0;
  *((_QWORD *)this + 75) = 0;
  *(_DWORD *)((char *)this + 607) = 0;
}

__n128 re::DynamicArray<re::RenderGraphResourceSetup>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraphResourceSetup>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 192 * v4;
  re::DynamicArray<char const*>::DynamicArray(v5, (uint64_t *)a2);
  re::DynamicArray<re::RenderGraphResourceOperation>::DynamicArray(v5 + 40, (uint64_t *)(a2 + 40));
  re::DynamicArray<unsigned long>::DynamicArray(v5 + 80, (uint64_t *)(a2 + 80));
  re::DynamicArray<unsigned long>::DynamicArray(v5 + 120, (uint64_t *)(a2 + 120));
  result = *(__n128 *)(a2 + 160);
  *(_OWORD *)(v5 + 171) = *(_OWORD *)(a2 + 171);
  *(__n128 *)(v5 + 160) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::RenderGraphBuilder::resourceFromIndex@<Q0>(re::RenderGraphBuilder *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = *((_QWORD *)this + 37);
  if (*(_QWORD *)(v4 + 16) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 32) + 48 * a2;
  *(_DWORD *)a3 = *(_DWORD *)v5;
  re::StringID::StringID((re::StringID *)(a3 + 8), (const StringID *)(v5 + 8));
  result = *(__n128 *)(v5 + 24);
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(v5 + 40);
  *(__n128 *)(a3 + 24) = result;
  return result;
}

uint64_t re::RenderGraphCompiled::RenderGraphCompiled(uint64_t a1, re::RenderGraphResourceDescriptions *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v11 = a1 + 8;
  v12 = a1 + 48;
  *(_OWORD *)(a1 + 56) = 0u;
  v13 = a1 + 88;
  v14 = a1 + 128;
  *(_DWORD *)(a1 + 72) = 0;
  v15 = a1 + 168;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_QWORD *)(a1 + 204) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  re::RenderGraphResourceDescriptions::swap((re::RenderGraphResourceDescriptions *)a1, a2);
  *(_QWORD *)(a1 + 296) = v11;
  *(_QWORD *)(a1 + 304) = v12;
  *(_QWORD *)(a1 + 312) = v13;
  *(_QWORD *)(a1 + 320) = v14;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 328) = v15;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  v16 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)a4;
  *(_QWORD *)(a1 + 344) = v16;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v17 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v17;
  v18 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 32) = v18;
  ++*(_DWORD *)(a4 + 24);
  ++*(_DWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  v19 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)a6;
  *(_QWORD *)(a1 + 584) = v19;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v20 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)(a6 + 16) = v20;
  v21 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a6 + 32);
  *(_QWORD *)(a6 + 32) = v21;
  ++*(_DWORD *)(a6 + 24);
  ++*(_DWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 640) = 0;
  v22 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)a5;
  *(_QWORD *)(a1 + 624) = v22;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v23 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v23;
  v24 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v24;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(a1 + 640);
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 692) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_DWORD *)(a1 + 768) = 0;
  v25 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 752) = v25;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v26 = *(_QWORD *)(a1 + 760);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v26;
  v27 = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v27;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  return a1;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceSetup>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphResourceSetup>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphResourceSetup>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceSetup>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphResourceSetup>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xC0uLL))
        {
          v2 = 192 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 192 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_32;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 192, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_32:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 192 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = (_QWORD *)(v8 + v10);
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *v13 = 0;
          v13[1] = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          v13[2] = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          v13[4] = v16;
          *((_DWORD *)v13 + 6) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v12[9] = 0;
          v12[6] = 0;
          v12[7] = 0;
          v12[5] = 0;
          *((_DWORD *)v12 + 16) = 0;
          v17 = (_QWORD *)(v8 + v10 + 40);
          v18 = *(_QWORD *)(v8 + v10 + 48);
          v12[5] = *v17;
          *v17 = 0;
          v12[6] = v18;
          v13[6] = 0;
          v19 = v7[v10 / 8 + 7];
          v12[7] = *(_QWORD *)(v8 + v10 + 56);
          v13[7] = v19;
          v20 = v7[v10 / 8 + 9];
          v12[9] = *(_QWORD *)(v8 + v10 + 72);
          v13[9] = v20;
          *((_DWORD *)v13 + 16) = *(_DWORD *)(v8 + v10 + 64) + 1;
          *((_DWORD *)v12 + 16) = LODWORD(v7[v10 / 8 + 8]) + 1;
          v12[14] = 0;
          v12[11] = 0;
          v12[12] = 0;
          v12[10] = 0;
          *((_DWORD *)v12 + 26) = 0;
          v21 = (_QWORD *)(v8 + v10 + 80);
          v22 = *(_QWORD *)(v8 + v10 + 88);
          v12[10] = *v21;
          *v21 = 0;
          v12[11] = v22;
          v13[11] = 0;
          v23 = v7[v10 / 8 + 12];
          v12[12] = *(_QWORD *)(v8 + v10 + 96);
          v13[12] = v23;
          v24 = v7[v10 / 8 + 14];
          v12[14] = *(_QWORD *)(v8 + v10 + 112);
          v13[14] = v24;
          *((_DWORD *)v13 + 26) = *(_DWORD *)(v8 + v10 + 104) + 1;
          *((_DWORD *)v12 + 26) = LODWORD(v7[v10 / 8 + 13]) + 1;
          v12[19] = 0;
          v12[16] = 0;
          v12[17] = 0;
          v12[15] = 0;
          *((_DWORD *)v12 + 36) = 0;
          v25 = (_QWORD *)(v8 + v10 + 120);
          v26 = *(_QWORD *)(v8 + v10 + 128);
          v12[15] = *v25;
          *v25 = 0;
          v12[16] = v26;
          v13[16] = 0;
          v27 = v7[v10 / 8 + 17];
          v12[17] = *(_QWORD *)(v8 + v10 + 136);
          v13[17] = v27;
          v28 = v7[v10 / 8 + 19];
          v12[19] = *(_QWORD *)(v8 + v10 + 152);
          v13[19] = v28;
          *((_DWORD *)v13 + 36) = *(_DWORD *)(v8 + v10 + 144) + 1;
          *((_DWORD *)v12 + 36) = LODWORD(v7[v10 / 8 + 18]) + 1;
          v29 = *(_OWORD *)(v8 + v10 + 160);
          *(_OWORD *)((char *)v12 + 171) = *(_OWORD *)(v8 + v10 + 171);
          *((_OWORD *)v12 + 10) = v29;
          if (*v25)
          {
            if (v13[19])
              (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 40))(*v25);
            v13[19] = 0;
            *(_QWORD *)(v8 + v10 + 128) = 0;
            *(_QWORD *)(v8 + v10 + 136) = 0;
            *v25 = 0;
            ++*((_DWORD *)v13 + 36);
          }
          if (*v21)
          {
            if (v13[14])
              (*(void (**)(_QWORD))(*(_QWORD *)*v21 + 40))(*v21);
            v13[14] = 0;
            *(_QWORD *)(v8 + v10 + 88) = 0;
            *(_QWORD *)(v8 + v10 + 96) = 0;
            *v21 = 0;
            ++*((_DWORD *)v13 + 26);
          }
          if (*v17)
          {
            if (v13[9])
              (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 40))(*v17);
            v13[9] = 0;
            *(_QWORD *)(v8 + v10 + 48) = 0;
            *(_QWORD *)(v8 + v10 + 56) = 0;
            *v17 = 0;
            ++*((_DWORD *)v13 + 16);
          }
          if (*v13)
          {
            if (v13[4])
              (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 40))(*v13);
            v13[4] = 0;
            v13[1] = 0;
            v13[2] = 0;
            *v13 = 0;
            ++*((_DWORD *)v13 + 6);
          }
          v10 += 192;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_32;
    }
  }
  return result;
}

re::OffsetsDeformerModelBuilder *re::OffsetsDeformerModelBuilder::OffsetsDeformerModelBuilder(re::OffsetsDeformerModelBuilder *this, re::Allocator *a2, uint64_t a3, unint64_t a4, DeformationModelData *a5)
{
  _QWORD *v9;

  *(_QWORD *)this = a5;
  v9 = (_QWORD *)re::DeformationModelData::create<re::OffsetsDeformer,re::OffsetsDeformerModel>((uint64_t)a5, (uint64_t)a2);
  re::FixedArray<re::StringID>::init<>(v9, (uint64_t)a2, a4);
  re::FixedArray<unsigned short>::init<unsigned short const&>(v9 + 3, (uint64_t)a2, a3, &re::OffsetsDeformerModel::kInvalidIndex);
  return this;
}

uint64_t re::DeformationModelData::create<re::OffsetsDeformer,re::OffsetsDeformerModel>(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 48, 8);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v8[0] = &off_24ED7AF58;
  v8[1] = a2;
  v9 = v8;
  v10 = 0;
  v11[3] = v11;
  v11[0] = &off_24ED7AF58;
  v11[1] = a2;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(a1 + 400), (uint64_t)v4);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(a1 + 408), (uint64_t)v11);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v10);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return *(_QWORD *)(a1 + 400);
}

unint64_t *re::OffsetsDeformerModelBuilder::setEnvelopeBufferName(re::OffsetsDeformerModelBuilder *this, unint64_t a2, unint64_t a3, const re::StringID *a4)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(*(_QWORD *)this + 400);
  if (v4[4] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_WORD *)(v4[5] + 2 * a2) = a3;
  if (v4[1] <= a3)
    goto LABEL_5;
  return re::StringID::operator=((unint64_t *)(v4[2] + 16 * a3), (uint64_t *)a4);
}

uint64_t re::OffsetsDeformer::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  void **ComputePipelineState;
  char v16;
  _OWORD v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  char v29;
  _QWORD v30[4];
  _BYTE v31[24];
  int v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  _QWORD v39[3];

  v39[1] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(this + 8))
  {
    v3 = this;
    *(_BYTE *)(this + 8) = 1;
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 4);
    if (*((_BYTE *)a2 + 259))
    {
      v4 = 0;
      v5 = 0;
      v38 = 256;
      v39[0] = 0x100000000;
      do
      {
        v6 = 0;
        v7 = 0;
        v16 = v4;
        v8 = *((unsigned __int8 *)&v38 + v5);
        do
        {
          v9 = v6;
          v10 = *((unsigned int *)v39 + v7);
          v27[0] = 0;
          v33 = 0;
          memset(v31, 0, sizeof(v31));
          v32 = 0;
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v37 = 0;
          memset(v22, 0, sizeof(v22));
          v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v22, 0);
          v24 = 0;
          v25 = 0;
          v26 = 0;
          re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v22, v8);
          v23 = 53;
          v13 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v31, (re::DynamicString *)v22);
          memset(v17, 0, sizeof(v17));
          v14 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v17, 0);
          v19 = 0;
          v20 = 0;
          v21 = 0;
          re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v17, v10);
          v18 = 65565;
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v31, (re::DynamicString *)v17);
          ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v27);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 16 * v8 + 8 * v10 + 24), ComputePipelineState);
          if (v19)
          {
            if (v20)
            {
              (*(void (**)(void))(*(_QWORD *)v19 + 40))();
              v20 = 0;
              v21 = 0;
            }
            v19 = 0;
          }
          if (*(_QWORD *)&v17[0] && (BYTE8(v17[0]) & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v17[0] + 40))();
          if (v24)
          {
            if (v25)
            {
              (*(void (**)(void))(*(_QWORD *)v24 + 40))();
              v25 = 0;
              v26 = 0;
            }
            v24 = 0;
          }
          if (*(_QWORD *)&v22[0] && (BYTE8(v22[0]) & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v22[0] + 40))();
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v31);
          this = v30[0];
          if (v30[0])
          {
            if ((v30[1] & 1) != 0)
              this = (*(uint64_t (**)(void))(*(_QWORD *)v30[0] + 40))();
            memset(v30, 0, sizeof(v30));
          }
          if (v27[0])
          {
            this = v28;
            if (v28)
            {
              if ((v29 & 1) != 0)
                this = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 40))();
            }
          }
          v6 = 1;
          v7 = 1;
        }
        while ((v9 & 1) == 0);
        v4 = 1;
        v5 = 1;
      }
      while ((v16 & 1) == 0);
      *(_BYTE *)(v3 + 9) = 1;
    }
  }
  return this;
}

double re::OffsetsDeformer::addDeformationInstance@<D0>(re::OffsetsDeformer *this@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  double result;

  if (*a2)
  {
    v3 = 0;
  }
  else if (*((_BYTE *)this + 8))
  {
    v3 = *((_BYTE *)this + 9) != 0;
  }
  else
  {
    v3 = 1;
  }
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 3;
  *(_OWORD *)(a3 + 8) = xmmword_2261351D0;
  *(_BYTE *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t re::OffsetsDeformer::allocateBuffers(uint64_t a1, re::FrameContext *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  re::AttributeTable *v10;
  re::AttributeTable *v11;
  re::AttributeTable *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  re::AttributeTable *v25;
  re::AttributeTable *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  re::DeformationBufferAllocator *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  _anonymous_namespace_ *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  int v87;
  __int16 v88;
  int v89;
  char v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _BYTE v96[12];
  __int16 v97;
  int v98;
  __int16 v99;
  unint64_t v100;
  __int16 v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*a4 + 48);
  if (v4)
  {
    v6 = a1;
    v7 = 0;
    v8 = 0;
    v76 = *(_QWORD *)(*a4 + 48);
    while (1)
    {
      re::DeformationInstanceIterator::Instance::Instance(&v91, a4, v8);
      v9 = *(__int128 **)(*(_QWORD *)(v93 + 352) + 104);
      if (!v9)
        goto LABEL_54;
      v10 = (re::AttributeTable *)re::DeformationInstanceIterator::Instance::meshPart((uint64_t)&v91, *(_QWORD *)(v6 + 16));
      v11 = v10;
      do
      {
        v12 = v11;
        v11 = (re::AttributeTable *)*((_QWORD *)v11 + 1);
      }
      while (v11 && !*((_QWORD *)v12 + 9));
      *(_QWORD *)&v103 = 0x2DB839E585F57D8ALL;
      v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v12 + 6, &v103);
      if (v13 == -1)
        v14 = 0;
      else
        v14 = (unsigned __int8 *)(*((_QWORD *)v12 + 7) + 16 * v13 + 8);
      v15 = *((_DWORD *)v10 + 132);
      v16 = v14 != 0 && v15 <= *((_DWORD *)v10 + 117);
      if (!v16)
        v15 = *((_DWORD *)v10 + 117);
      if (12 * v15 != *((_DWORD *)v9 + 37))
        goto LABEL_54;
      v17 = v94;
      if (v16)
      {
        v18 = re::AttributeTable::buffers(v10);
        v20 = *v14;
        if (v19 <= v20)
          goto LABEL_60;
        v21 = v18 + 16 * v20;
      }
      else
      {
        v21 = 0;
      }
      v22 = *(_QWORD **)(*(_QWORD *)(v93 + 344) + 400);
      v82 = (uint64_t)v17;
      if (v22)
      {
        v23 = *(unsigned __int16 *)(v93 + 392);
        v24 = v22[4];
        if (v24 <= v23)
        {
          v95 = 0;
          v106 = 0u;
          v107 = 0u;
          v105 = 0u;
          v103 = 0u;
          v104 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          v97 = 1024;
          v98 = 476;
          v99 = 2048;
          v100 = v23;
          v101 = 2048;
          v102 = v24;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_59:
          v95 = 0;
          v106 = 0u;
          v107 = 0u;
          v105 = 0u;
          v103 = 0u;
          v104 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          v97 = 1024;
          v98 = 476;
          v99 = 2048;
          v100 = v23;
          v101 = 2048;
          v102 = v24;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_60:
          re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v19);
          _os_crash();
          __break(1u);
LABEL_61:
          re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v32, v31);
          _os_crash();
          __break(1u);
LABEL_62:
          re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Invalid deformation execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 222, a3);
          _os_crash();
          __break(1u);
        }
        v23 = *(unsigned __int16 *)(v22[5] + 2 * v23);
        v24 = v22[1];
        if (v24 <= v23)
          goto LABEL_59;
        re::StringID::StringID((re::StringID *)&v103, (const StringID *)(v22[2] + 16 * v23));
        v25 = v10;
        do
        {
          v26 = v25;
          v25 = (re::AttributeTable *)*((_QWORD *)v25 + 1);
        }
        while (v25 && !*((_QWORD *)v26 + 9));
        *(_QWORD *)v96 = (unint64_t)v103 >> 1;
        v27 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v26 + 6, v96);
        if (v27 == -1)
          v28 = 0;
        else
          v28 = (unsigned __int8 *)(*((_QWORD *)v26 + 7) + 16 * v27 + 8);
        re::StringID::destroyString((re::StringID *)&v103);
        v29 = re::DeformationVertexBufferState::inputVertexCount(v17, 1u);
        if (v28)
        {
          v30 = re::AttributeTable::buffers(v10);
          v32 = *v28;
          if (v31 <= v32)
            goto LABEL_61;
          v33 = (uint64_t *)(v30 + 16 * v32);
          v34 = v33[1];
          v81 = *v33;
          v35 = a3;
          goto LABEL_33;
        }
      }
      else
      {
        v29 = re::DeformationVertexBufferState::inputVertexCount(v17, 1u);
      }
      re::FrameContext::perFrameAlloc(a2, 4 * v29, 4uLL, (uint64_t)&v103);
      v36 = DWORD2(v103);
      v37 = HIDWORD(v103);
      v38 = v104;
      if (HIDWORD(v103) >= 4)
        memset_pattern16((void *)(v103 + DWORD2(v103)), &unk_226167A70, HIDWORD(v103) & 0xFFFFFFFC);
      v34 = v36 | (v37 << 32);
      v35 = a3;
      v81 = v38;
      if (!a3)
      {
        v39 = 12 * v29;
        v40 = *((_QWORD *)v9 + 18);
        v79 = *((_QWORD *)v9 + 17);
        v80 = *((_DWORD *)v9 + 32);
LABEL_38:
        re::FrameContext::perFrameAlloc(a2, v39, 0x10uLL, (uint64_t)&v103);
        *(_WORD *)&v96[4] = 257;
        *(_DWORD *)v96 = 65548;
        LOBYTE(v97) = 30;
        *(_DWORD *)&v96[8] = 0;
        v51 = (_anonymous_namespace_ *)re::DeformationVertexBufferState::setOutputBuffer(v82, 1u, 0, (uint64_t)&v103, (uint64_t)v96);
        v54 = 0;
        v52 = 0;
        v53 = 0;
        goto LABEL_39;
      }
LABEL_33:
      v39 = 12 * v29;
      v40 = *((_QWORD *)v9 + 18);
      v79 = *((_QWORD *)v9 + 17);
      v80 = *((_DWORD *)v9 + 32);
      if (v35 != 1)
      {
        if (v35)
          goto LABEL_62;
        goto LABEL_38;
      }
      v41 = v34;
      v42 = v93;
      v43 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](*v91 + 8, v92);
      v44 = *(_QWORD **)(v42 + 360);
      v45 = a4[2];
      v88 = 257;
      v87 = 65548;
      v90 = 30;
      v89 = 0;
      v46 = re::DeformationBufferAllocator::alloc(v44, v45, 1, (uint64_t)&v87, *(unsigned __int8 *)(v43 + 16), 12 * v29);
      v47 = *(re::DeformationBufferAllocator **)(v42 + 360);
      v34 = v41;
      v48 = re::DeformationBufferAllocator::allocationData(v47, *(unsigned __int8 *)(v43 + 16), v46);
      *(_WORD *)&v96[4] = 257;
      *(_DWORD *)v96 = 65548;
      LOBYTE(v97) = 30;
      *(_DWORD *)&v96[8] = 0;
      v49 = objc_msgSend(*(id *)(v48 + 24), sel_contents);
      v50 = *(_QWORD *)(v48 + 24);
      *(_QWORD *)&v103 = v49;
      *((_QWORD *)&v103 + 1) = *(_QWORD *)(v48 + 32);
      *(_QWORD *)&v104 = v50;
      re::DeformationVertexBufferState::setOutputBuffer(v82, 1u, 1, (uint64_t)&v103, (uint64_t)v96);
      v83 = *v9;
      v74 = v9[2];
      v75 = v9[1];
      v72 = v9[4];
      v73 = v9[3];
      v70 = v9[6];
      v71 = v9[5];
      v69 = v9[7];
      re::FrameContext::perFrameAlloc(a2, 0x90uLL, 0x10uLL, (uint64_t)&v103);
      v53 = *((_QWORD *)&v103 + 1);
      v52 = v103;
      v54 = v104;
      v55 = v103 + DWORD2(v103);
      *(_OWORD *)v55 = v83;
      *(_OWORD *)(v55 + 16) = v75;
      *(_OWORD *)(v55 + 32) = v74;
      *(_OWORD *)(v55 + 48) = v73;
      *(_OWORD *)(v55 + 64) = v72;
      *(_OWORD *)(v55 + 80) = v71;
      *(_OWORD *)(v55 + 96) = v70;
      *(_OWORD *)(v55 + 112) = v69;
      *(_DWORD *)(v55 + 128) = v29;
LABEL_39:
      if (!v7)
      {
        v84 = v53;
        v7 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)a2 + 3) + 32))(*((_QWORD **)a2 + 3), 40, 8);
        v56 = (_QWORD *)*((_QWORD *)a2 + 3);
        v57 = *(_QWORD *)(*a4 + 48);
        *(_QWORD *)(v7 + 32) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = v56;
        v51 = (_anonymous_namespace_ *)re::DynamicArray<re::KeyValuePair<unsigned long,re::OffsetsDeformer::PerFrameOffsetData>>::setCapacity((_QWORD *)v7, v57);
        v53 = v84;
        ++*(_DWORD *)(v7 + 24);
      }
      v58 = v92;
      v59 = *(_QWORD *)(v7 + 8);
      v60 = *(_QWORD *)(v7 + 16);
      if (v60 >= v59)
      {
        v61 = v21;
        v62 = v60 + 1;
        if (v59 < v60 + 1)
        {
          v85 = v53;
          if (*(_QWORD *)v7)
          {
            v63 = 2 * v59;
            v64 = v59 == 0;
            v65 = 8;
            if (!v64)
              v65 = v63;
            if (v65 <= v62)
              v66 = v62;
            else
              v66 = v65;
            re::DynamicArray<re::KeyValuePair<unsigned long,re::OffsetsDeformer::PerFrameOffsetData>>::setCapacity((_QWORD *)v7, v66);
          }
          else
          {
            re::DynamicArray<re::KeyValuePair<unsigned long,re::OffsetsDeformer::PerFrameOffsetData>>::setCapacity((_QWORD *)v7, v62);
            ++*(_DWORD *)(v7 + 24);
          }
          v53 = v85;
        }
        v60 = *(_QWORD *)(v7 + 16);
        v21 = v61;
      }
      v67 = *(_QWORD *)(v7 + 32) + 80 * v60;
      *(_QWORD *)v67 = v58;
      *(_QWORD *)(v67 + 8) = v79;
      *(_QWORD *)(v67 + 16) = v40;
      *(_QWORD *)(v67 + 24) = v81;
      *(_QWORD *)(v67 + 32) = v34;
      *(_QWORD *)(v67 + 40) = v52;
      *(_QWORD *)(v67 + 48) = v53;
      *(_QWORD *)(v67 + 56) = v54;
      *(_DWORD *)(v67 + 64) = v80;
      *(_QWORD *)(v67 + 72) = v21;
      ++*(_QWORD *)(v7 + 16);
      ++*(_DWORD *)(v7 + 24);
      v4 = v76;
      v6 = a1;
LABEL_54:
      if (++v8 == v4)
        return v7;
    }
  }
  return 0;
}

uint64_t re::OffsetsDeformer::deformGPU(uint64_t result, uint64_t a2, void **this, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  int64x2_t v24;

  if (a2)
  {
    v6 = result;
    re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Offset");
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 32);
      v9 = v8 + 80 * v7;
      do
      {
        re::DeformationInstanceIterator::Instance::Instance(v19, a4, *(_QWORD *)v8);
        v10 = v20;
        v11 = re::DeformationVertexBufferState::inputVertexCount(v20, 1u);
        v12 = v6 + 16 * (*(_QWORD *)(v8 + 72) != 0) + 8 * *(unsigned int *)(v8 + 64);
        v13 = objc_msgSend(*(id *)(v12 + 24), sel_maxTotalThreadsPerThreadgroup);
        objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(v12 + 24));
        LOBYTE(v23) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v10, 1u);
        v14 = *(_QWORD *)(v10[24]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v10 + 23, (unsigned __int8 *)&v23)+ 24);
        LOBYTE(v23) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v10, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v14, *(unsigned int *)(v10[24]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v10 + 23, (unsigned __int8 *)&v23)+ 16), 0);
        LOBYTE(v23) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v10, 1u);
        v15 = *(_QWORD *)(v10[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v10 + 7, (unsigned __int8 *)&v23)+ 24);
        LOBYTE(v23) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v10, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v15, *(unsigned int *)(v10[8]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v10 + 7, (unsigned __int8 *)&v23)+ 16), 1);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v8 + 8), *(unsigned int *)(v8 + 16), 2);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v8 + 24), *(unsigned int *)(v8 + 32), 3);
        v16 = *(_QWORD *)(v8 + 72);
        if (v16)
          objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)v16, *(unsigned int *)(v16 + 8), 4);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v8 + 56), *(unsigned int *)(v8 + 48), 5);
        v17 = *this;
        v23 = (v13 + v11 - 1) / v13;
        v24 = vdupq_n_s64(1uLL);
        v21 = v13;
        v22 = v24;
        objc_msgSend(v17, "dispatchThreadgroups:threadsPerThreadgroup:", &v23, &v21);
        v8 += 80;
      }
      while (v8 != v9);
    }
    return objc_msgSend(*this, "popDebugGroup");
  }
  return result;
}

void re::OffsetsDeformer::deformCPU(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  char **i;
  id *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  char *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  __int16 v50;
  int v51;
  _QWORD v52[3];
  _QWORD *v53;
  unsigned __int8 v54[9];

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(a2 + 32);
      v36 = v4 + 80 * v3;
      for (i = &selRef_setRate_; ; i = &selRef_setRate_)
      {
        re::DeformationInstanceIterator::Instance::Instance(v52, a3, *(_QWORD *)v4);
        v6 = *(id **)(v4 + 72);
        if (v6)
          v6 = (id *)((char *)objc_msgSend(*v6, i[448]) + *((unsigned int *)v6 + 2));
        v7 = v53;
        v8 = re::DeformationVertexBufferState::inputVertexCount(v53, 1u);
        v9 = (char *)objc_msgSend(*(id *)(v4 + 24), i[448]);
        v38 = *(unsigned int *)(v4 + 32);
        v39 = v9;
        LOBYTE(v49) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v7, 1u);
        v10 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v7 + 15, (unsigned __int8 *)&v49);
        v11 = v7[16];
        v49 = 0;
        v50 = 0;
        v51 = 0;
        re::VertexUnpacker::setVertexFormat((uint64_t)&v49, (const VertexBufferFormat *)(v11 + 20 * v10 + 4));
        v12 = *(_DWORD *)(v4 + 64);
        v13 = *(float32x4_t **)(*(_QWORD *)(v52[2] + 352) + 104);
        v43 = v13[1];
        v44 = *v13;
        v41 = v13[3];
        v42 = v13[2];
        v48 = v13[4];
        v46 = v13[6];
        v47 = v13[5];
        v45 = v13[7];
        v14 = (char *)objc_msgSend(*(id *)(v4 + 8), i[448]);
        v40 = v4;
        v15 = *(unsigned int *)(v4 + 16);
        v54[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v7, 1u);
        v16 = v7[8]
            + 32
            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v7 + 7, v54);
        v17 = *(_QWORD *)(v16 + 8);
        v18 = *(unsigned int *)(v16 + 16);
        v54[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v7, 1u);
        v19 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v7 + 23, v54);
        if (v8)
          break;
LABEL_18:
        v4 = v40 + 80;
        if (v40 + 80 == v36)
          return;
      }
      v20 = 0;
      v21 = &v14[v15];
      v22 = v17 + v18;
      v23 = v7[24] + 32 * v19;
      v24 = *(_DWORD *)(v23 + 20);
      v25 = (_DWORD *)(*(_QWORD *)(v23 + 8) + *(unsigned int *)(v23 + 16) + 8);
      while (1)
      {
        v26 = v6 ? *((unsigned int *)v6 + v20) : v20;
        v27 = v49(v22, v20);
        if (v8 <= v26)
          break;
        v30.i64[0] = v27;
        v30.i64[1] = v28;
        v31 = &v21[12 * v26];
        v29.i64[0] = *(_QWORD *)v31;
        v29.i32[2] = *((_DWORD *)v31 + 2);
        if (v12 == 1)
        {
          v32 = v29;
        }
        else
        {
          v32 = 0uLL;
          if (!v12)
          {
            v33 = vaddq_f32(v41, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, v30.f32[0]), v43, *(float32x2_t *)v30.f32, 1), v42, v30, 2));
            v32 = vaddq_f32(vdivq_f32(v33, (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 3)), v29);
          }
        }
        if (v24 / 0xCuLL == v20)
          goto LABEL_21;
        v34 = vaddq_f32(v45, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, v32.f32[0]), v47, *(float32x2_t *)v32.f32, 1), v46, v32, 2));
        v35 = vmlaq_n_f32(vmulq_n_f32(vdivq_f32(v34, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 3)), *(float *)&v39[4 * v26 + v38]), v30, 1.0 - *(float *)&v39[4 * v26 + v38]);
        *((_QWORD *)v25 - 1) = v35.i64[0];
        *v25 = v35.i32[2];
        ++v20;
        v25 += 3;
        if (v8 == v20)
          goto LABEL_18;
      }
      re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v26, v8);
      _os_crash();
      __break(1u);
LABEL_21:
      re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v24 / 0xCuLL, v24 / 0xCuLL);
      _os_crash();
      __break(1u);
    }
  }
}

re::StringID *re::OffsetsDeformerModelUtil::envelopeBufferNameForOffsetsDataIndex@<X0>(re::OffsetsDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 50);
  if (v3 && *(_QWORD *)(v3 + 8) > (unint64_t)a2)
    return re::StringID::StringID(a3, (const StringID *)(*(_QWORD *)(v3 + 16) + 16 * a2));
  else
    return re::StringID::invalid(a3);
}

uint64_t re::OffsetsDeformerModelUtil::computeOffsetsDeformerModelSizeExcludingMetalBuffers(re::OffsetsDeformerModelUtil *this, const DeformationModelData *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const char **v5;
  size_t v6;

  v2 = (_QWORD *)*((_QWORD *)this + 50);
  if (!v2)
    return 0;
  v3 = v2[1];
  v4 = 2 * v2[4] + 16 * v3 + 48;
  if (v3)
  {
    v5 = (const char **)(v2[2] + 8);
    do
    {
      if ((*(_BYTE *)(v5 - 1) & 1) != 0)
        v6 = strlen(*v5) + 1;
      else
        v6 = 0;
      v4 += v6;
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  return v4;
}

void re::OffsetsDeformer::~OffsetsDeformer(re::OffsetsDeformer *this)
{
  uint64_t i;
  void *v3;

  for (i = 48; i != 16; i -= 8)
  {
    v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t v2;
  void *v3;

  v2 = 48;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 16)
      JUMPOUT(0x2276933B8);
  }
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15OffsetsDeformerENS2_20OffsetsDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15OffsetsDeformerENS2_20OffsetsDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED7AF58;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15OffsetsDeformerENS2_20OffsetsDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED7AF58;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15OffsetsDeformerENS2_20OffsetsDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = v2[3];
    if (v4)
    {
      if (v2[4])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[5]);
        v2[4] = 0;
        v2[5] = 0;
      }
      v2[3] = 0;
    }
    re::FixedArray<re::StringID>::deinit(v2);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15OffsetsDeformerENS2_20OffsetsDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15OffsetsDeformerENS2_20OffsetsDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
}

_QWORD *re::DynamicArray<re::KeyValuePair<unsigned long,re::OffsetsDeformer::PerFrameOffsetData>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 80 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::KeyValuePair<unsigned long,re::OffsetsDeformer::PerFrameOffsetData>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::DeformationVertexBufferState::makeFromMeshInstance@<X0>(re::DeformationVertexBufferState *this@<X0>, re::RenderManager *a2@<X1>, const re::MeshInstance *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4;
  uint64_t result;
  unsigned int v7;
  unint64_t v8;
  re::AttributeTable *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;

  v4 = a3;
  result = re::DataArray<re::MeshModel>::get(*((_QWORD *)this + 4) + 8, *((_QWORD *)a2 + 2));
  v7 = v4;
  if (*(_QWORD *)(result + 56) <= (unint64_t)v4)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = 0;
  v9 = (re::AttributeTable *)(*(_QWORD *)(result + 64) + 560 * v7);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_BYTE *)(a4 + 32) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_OWORD *)(a4 + 280) = 0u;
  *(_OWORD *)(a4 + 296) = 0u;
  *(_QWORD *)(a4 + 40) = (char *)v9 + 476;
  *(_QWORD *)(a4 + 48) = v9;
  do
  {
    v10 = *((unsigned __int8 *)v9 + v8 + 476);
    if (v10 == 255)
      goto LABEL_7;
    result = re::AttributeTable::buffers(v9);
    if (v11 <= v10)
    {
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, v11);
      _os_crash();
      __break(1u);
      goto LABEL_10;
    }
    if (*(_DWORD *)(result + 16 * v10 + 12))
    {
      v12 = re::Bitset<64>::toWordIndex(a4, v8);
      *(_QWORD *)(a4 + 8 * v12) |= 1 << v8;
      result = re::Bitset<64>::toWordIndex(a4 + 8, v8);
      *(_QWORD *)(a4 + 8 + 8 * result) |= 1 << v8;
    }
LABEL_7:
    ++v8;
  }
  while (v8 != 24);
  return result;
}

unsigned __int8 *re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::addNew(_anonymous_namespace_ *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *result;

  result = (unsigned __int8 *)re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(a1, a2);
  if (result == (unsigned __int8 *)-1)
    return re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(a1, a2, a3);
  return result;
}

{
  uint64_t v6;

  v6 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(a1, a2, a3);
  else
    return (unsigned __int8 *)(*((_QWORD *)a1 + 1) + 32 * v6 + 8);
}

unsigned __int8 *re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::addNew(_anonymous_namespace_ *a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(a1, a2, a3);
  else
    return (unsigned __int8 *)(*((_QWORD *)a1 + 1) + 20 * v6 + 4);
}

uint64_t re::DeformationVertexBufferState::resetVertexBufferChangedState(uint64_t this)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  v1 = (_QWORD *)this;
  v2 = *(_QWORD *)(this + 16);
  *(_QWORD *)this = *(_QWORD *)(this + 8);
  if (v2)
  {
    for (i = __clz(__rbit64(v2)); ; i = __clz(__rbit64(v1[2] & (-2 << i))))
    {
      v15 = i;
      v4 = v1[24]
         + 32
         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v1 + 23, &v15);
      v5 = v1[8]
         + 32
         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v1 + 7, &v15);
      v6 = *(_QWORD *)(v4 + 24);
      *(_OWORD *)(v5 + 8) = *(_OWORD *)(v4 + 8);
      *(_QWORD *)(v5 + 24) = v6;
      v7 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v1 + 31, &v15);
      v8 = v1[32];
      v9 = v8 + 20 * v7;
      this = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v1 + 15, &v15);
      v10 = v1[16];
      v11 = v10 + 20 * this;
      v12 = *(_WORD *)(v9 + 8);
      *(_DWORD *)(v11 + 4) = *(_DWORD *)(v9 + 4);
      *(_WORD *)(v11 + 8) = v12;
      if (v11 != v9)
      {
        v13 = v8 + 20 * v7;
        v14 = v10 + 20 * this;
        *(_DWORD *)(v14 + 12) = *(_DWORD *)(v13 + 12);
        *(_BYTE *)(v14 + 16) = *(_BYTE *)(v13 + 16);
      }
      if (i == 63 || (v1[2] & (-2 << i)) == 0)
        break;
    }
  }
  v1[2] = 0;
  return this;
}

void re::DeformationVertexBufferState::buildAttributeTable(re::DeformationVertexBufferState *this, re::AttributeTable *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[7];
  int v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  int v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  uint64_t v57;
  _OWORD v58[5];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v34 = 1;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v42 = 0;
  v41 = 0;
  v46 = 0;
  v47 = 0;
  v43 = 0u;
  v44 = 0u;
  v45 = 0;
  v48 = 0;
  v3 = *((_QWORD *)this + 6);
  v25 = v3;
  if (*((_QWORD *)this + 3))
  {
    do
    {
      v5 = v3;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 && !*(_QWORD *)(v5 + 128));
    re::BufferTable::operator=((uint64_t)&v26[1] + 8, v5 + 48);
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      if (v8 > 0x17)
      {
LABEL_8:
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v8, 24, v25, *(_QWORD *)&v26[0]);
        _os_crash();
        __break(1u);
      }
      else
      {
        while (1)
        {
          v9 = *(unsigned __int8 *)(*((_QWORD *)this + 5) + v8);
          LOBYTE(v58[0]) = v8;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)this, v8);
          v10 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)this + 23, (unsigned __int8 *)v58);
          v11 = *(_QWORD *)(*((_QWORD *)this + 24) + 32 * v10 + 16);
          *(_QWORD *)&v58[0] = *(_QWORD *)(*((_QWORD *)this + 24) + 32 * v10 + 24);
          *((_QWORD *)&v58[0] + 1) = v11;
          re::BufferTable::setBuffer((re::BufferTable *)((char *)&v26[1] + 8), v9, (const BufferView *)v58);
          if ((*((_QWORD *)this + 3) & (-2 << v8)) == 0)
            break;
          v8 = __clz(__rbit64(*((_QWORD *)this + 3) & (-2 << v8)));
          if (v8 > 0x17)
            goto LABEL_8;
        }
      }
    }
    if (*((_BYTE *)this + 32))
    {
      v12 = *((_QWORD *)this + 6);
      do
      {
        v13 = v12;
        v12 = *(_QWORD *)(v12 + 8);
      }
      while (v12 && !*(_QWORD *)(v13 + 32));
      re::FixedArray<re::VertexBufferFormat>::operator=(v26, v13 + 24);
      v15 = *((_QWORD *)this + 3);
      if (v15)
      {
        v16 = __clz(__rbit64(v15));
        if (v16 > 0x17)
        {
LABEL_20:
          re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v16, 24);
          _os_crash();
          __break(1u);
        }
        else
        {
          while (1)
          {
            v17 = *(unsigned __int8 *)(*((_QWORD *)this + 5) + v16);
            LOBYTE(v58[0]) = v16;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)this, v16);
            v18 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)this + 31, (unsigned __int8 *)v58);
            v19 = *((_QWORD *)&v26[0] + 1);
            if (*((_QWORD *)&v26[0] + 1) <= v17)
            {
              v49 = 0;
              memset(v58, 0, sizeof(v58));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v50 = 136315906;
              v51 = "operator[]";
              v52 = 1024;
              v53 = 468;
              v54 = 2048;
              v55 = v17;
              v56 = 2048;
              v57 = v19;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v20 = *((_QWORD *)this + 32);
            v21 = v20 + 20 * v18;
            v22 = *(_QWORD *)&v26[1] + 16 * v17;
            v23 = *(_DWORD *)(v21 + 4);
            v21 += 4;
            *(_WORD *)(v22 + 4) = *(_WORD *)(v21 + 4);
            *(_DWORD *)v22 = v23;
            if (v22 != v21)
            {
              v24 = v20 + 20 * v18;
              *(_DWORD *)(v22 + 8) = *(_DWORD *)(v24 + 12);
              *(_BYTE *)(v22 + 12) = *(_BYTE *)(v24 + 16);
            }
            if ((*((_QWORD *)this + 3) & (-2 << v16)) == 0)
              break;
            v16 = __clz(__rbit64(*((_QWORD *)this + 3) & (-2 << v16)));
            if (v16 > 0x17)
              goto LABEL_20;
          }
        }
      }
    }
  }
  re::AttributeTableBuilder::makeAttributeTableAndReset((re::AttributeTableBuilder *)&v25, a2);
  re::AttributeTableBuilder::~AttributeTableBuilder((re::AttributeTableBuilder *)&v25);
}

uint64_t re::BufferTable::setBuffer(re::BufferTable *this, unint64_t a2, const BufferView *a3)
{
  id v7;

  if (*((_DWORD *)this + 70) <= a2)
    *((_DWORD *)this + 70) = a2 + 1;
  v7 = 0;
  re::BufferTable::setBufferRef((void **)this, a2, &v7);
  if (v7)

  re::BufferTable::setBufferView(this, a2, *(_QWORD *)a3, *((_QWORD *)a3 + 1));
  return re::BufferTable::setBufferIndirectResources(this, a2, 0, 0);
}

_QWORD *re::FixedArray<re::VertexBufferFormat>::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (_QWORD *)a2)
  {
    v4 = *(_QWORD *)a2;
    if (*a1)
    {
      if (!v4)
        return a1;
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::VertexBufferFormat>::init<>((uint64_t)a1, v4, *(_QWORD *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::VertexBufferFormat>::copy((uint64_t)a1, a2);
    }
  }
  return a1;
}

unsigned __int8 *re::DeformationVertexBufferState::ensureVertexBufferInitialized(uint64_t a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  _anonymous_namespace_ *v5;
  unsigned __int8 *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  id v19;
  id v20;
  unsigned __int8 *v21;
  _anonymous_namespace_ *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int *v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v27 = a2;
  v5 = (_anonymous_namespace_ *)(a1 + 56);
  result = (unsigned __int8 *)re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(a1 + 56), &v27);
  if (result == (unsigned __int8 *)-1)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (!v8)
      goto LABEL_15;
    if (v27 >= 0x18uLL)
    {
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v27, 24);
      _os_crash();
      __break(1u);
    }
    else
    {
      v3 = *(unsigned __int8 *)(v8 + v27);
      if (v3 == 255)
        goto LABEL_15;
      v9 = re::AttributeTable::buffers(*(re::AttributeTable **)(a1 + 48));
      if (v10 > v3)
      {
        if (*(_DWORD *)(v9 + 16 * v3 + 12))
        {
          v11 = re::AttributeTable::buffers(*(re::AttributeTable **)(a1 + 48));
          if (v12 > v3)
          {
            v13 = v11;
            v14 = (id *)(v11 + 16 * v3);
            v15 = *(_QWORD *)(a1 + 48);
            do
            {
              v16 = v15;
              v15 = *(_QWORD *)(v15 + 8);
              v2 = *(_QWORD *)(v16 + 32);
              if (v15)
                v17 = v2 == 0;
              else
                v17 = 0;
            }
            while (v17);
            if (v2 > v3)
            {
              v18 = (int *)(*(_QWORD *)(v16 + 40) + 16 * v3);
              v19 = objc_msgSend(*v14, sel_contents);
              v20 = *v14;
              *(_QWORD *)&v37 = v19;
              *((_QWORD *)&v37 + 1) = *(_QWORD *)(v13 + 16 * v3 + 8);
              *(_QWORD *)&v38 = v20;
              v21 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 184), &v27, (uint64_t)&v37);
              re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::addNew(v5, &v27, (uint64_t)v21);
              v22 = (_anonymous_namespace_ *)(a1 + 120);
              v23 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 248), &v27, v18);
              goto LABEL_18;
            }
LABEL_24:
            v28 = 0;
            v40 = 0u;
            v41 = 0u;
            v38 = 0u;
            v39 = 0u;
            v37 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v29 = 136315906;
            v30 = "operator[]";
            v31 = 1024;
            v32 = 476;
            v33 = 2048;
            v34 = v3;
            v35 = 2048;
            v36 = v2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_23:
          re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v12);
          _os_crash();
          __break(1u);
          goto LABEL_24;
        }
LABEL_15:
        v37 = 0uLL;
        *(_QWORD *)&v38 = 0;
        v24 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 184), &v27, (uint64_t)&v37);
        re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::addNew(v5, &v27, (uint64_t)v24);
        v22 = (_anonymous_namespace_ *)(a1 + 120);
        LODWORD(v37) = 0x10000;
        WORD2(v37) = 256;
        v25 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(a1 + 248), &v27);
        if (v25 != -1)
        {
          v26 = (int *)(*(_QWORD *)(a1 + 256) + 20 * v25 + 4);
          return re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::addNew(v22, &v27, v26);
        }
        v23 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd((_anonymous_namespace_ *)(a1 + 248), &v27, (uint64_t)&v37);
LABEL_18:
        v26 = (int *)v23;
        return re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::addNew(v22, &v27, v26);
      }
    }
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v10);
    _os_crash();
    __break(1u);
    goto LABEL_23;
  }
  return result;
}

unint64_t *re::BufferInitializationOptions::initializeGPUVertexBuffers(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  id *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *i;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;

  if (!*result)
    return result;
  v8 = (id *)a2;
  v9 = __clz(__rbit64(*result));
  v10 = a3 + 8;
  for (i = result; ; v9 = __clz(__rbit64(*i & (-2 << v9))))
  {
    v11 = *((unsigned __int8 *)result + v9 + 8);
    if ((_DWORD)v11 == 2)
      break;
    if ((_DWORD)v11 != 1)
      goto LABEL_24;
    v29 = *(_QWORD *)(a3 + 48);
    if (v29)
    {
      v12 = 0;
      while (1)
      {
        v13 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v10, v12);
        v15 = *(_QWORD *)(v13 + 8);
        if (a5 <= v15)
          break;
        v5 = a4 + 312 * v15 + 8;
        if ((*(_QWORD *)(v5 + 8 * re::Bitset<64>::toWordIndex(v5, v9)) & (1 << v9)) != 0)
        {
          v5 = a4 + 312 * v15;
          v30 = v9;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v5, v9);
          v16 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v5 + 56), &v30);
          v17 = v8;
          v18 = a5;
          v19 = *(_QWORD *)(v5 + 64);
          v31 = v9;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v5, v9);
          v20 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v5 + 184), &v31);
          v21 = v19 + 32 * v16;
          a5 = v18;
          v8 = v17;
          objc_msgSend(*v17, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", *(_QWORD *)(v21 + 24), *(unsigned int *)(v21 + 16), *(_QWORD *)(*(_QWORD *)(v5 + 192) + 32 * v20 + 24), *(unsigned int *)(*(_QWORD *)(v5 + 192) + 32 * v20 + 16), *(unsigned int *)(*(_QWORD *)(v5 + 192) + 32 * v20 + 20));
        }
        if (v29 == ++v12)
          goto LABEL_18;
      }
      re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(_QWORD *)(v13 + 8), a5);
      _os_crash();
      __break(1u);
      goto LABEL_23;
    }
LABEL_18:
    result = i;
    if (v9 == 63 || (*i & (-2 << v9)) == 0)
      return result;
  }
  v22 = *(_QWORD *)(a3 + 48);
  if (!v22)
    goto LABEL_18;
  v23 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v10, v23) + 8);
    if (a5 <= v5)
      break;
    if ((*(_QWORD *)(a4 + 312 * v5 + 8 + 8 * re::Bitset<64>::toWordIndex(a4 + 312 * v5 + 8, v9)) & (1 << v9)) != 0)
    {
      v25 = a4 + 312 * v5;
      v32 = v9;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, v9);
      v26 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v25 + 184), &v32);
      objc_msgSend(*v8, "fillBuffer:range:value:", *(_QWORD *)(*(_QWORD *)(v25 + 192) + 32 * v26 + 24), *(unsigned int *)(*(_QWORD *)(v25 + 192) + 32 * v26 + 16), *(unsigned int *)(*(_QWORD *)(v25 + 192) + 32 * v26 + 20), 0);
    }
    if (v22 == ++v23)
      goto LABEL_18;
  }
LABEL_23:
  re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v5, a5);
  _os_crash();
  __break(1u);
LABEL_24:
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Invalid buffer initialization type: %u.", "!\"Unreachable code\"", "initializeGPUVertexBuffers", 212, v11);
  result = (unint64_t *)_os_crash();
  __break(1u);
  return result;
}

unint64_t *re::BufferInitializationOptions::initializeCPUVertexBuffers(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *i;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;

  if (!*result)
    return result;
  v6 = __clz(__rbit64(*result));
  v7 = a2 + 8;
  for (i = result; ; v6 = __clz(__rbit64(*i & (-2 << v6))))
  {
    v8 = *((unsigned __int8 *)result + v6 + 8);
    if ((_DWORD)v8 == 2)
      break;
    if ((_DWORD)v8 != 1)
      goto LABEL_24;
    v9 = *(_QWORD *)(a2 + 48);
    if (v9)
    {
      v10 = 0;
      while (1)
      {
        v11 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v7, v10);
        v13 = *(_QWORD *)(v11 + 8);
        if (a4 <= v13)
          break;
        if ((*(_QWORD *)(a3 + 312 * v13 + 8 + 8 * re::Bitset<64>::toWordIndex(a3 + 312 * v13 + 8, v6)) & (1 << v6)) != 0)
        {
          v14 = (_QWORD *)(a3 + 312 * v13);
          v24 = v6;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v14, v6);
          v15 = v14[8]
              + 32
              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v14 + 7, &v24);
          v25 = v6;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v14, v6);
          v16 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v14 + 23, &v25);
          memcpy((void *)(*(_QWORD *)(v14[24] + 32 * v16 + 8) + *(unsigned int *)(v14[24] + 32 * v16 + 16)), (const void *)(*(_QWORD *)(v15 + 8) + *(unsigned int *)(v15 + 16)), *(unsigned int *)(v14[24] + 32 * v16 + 20));
        }
        if (v9 == ++v10)
          goto LABEL_18;
      }
      re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(_QWORD *)(v11 + 8), a4);
      _os_crash();
      __break(1u);
      goto LABEL_23;
    }
LABEL_18:
    result = i;
    if (v6 == 63 || (*i & (-2 << v6)) == 0)
      return result;
  }
  v17 = *(_QWORD *)(a2 + 48);
  if (!v17)
    goto LABEL_18;
  v18 = 0;
  while (1)
  {
    v13 = *(_QWORD *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v7, v18) + 8);
    if (a4 <= v13)
      break;
    if ((*(_QWORD *)(a3 + 312 * v13 + 8 + 8 * re::Bitset<64>::toWordIndex(a3 + 312 * v13 + 8, v6)) & (1 << v6)) != 0)
    {
      v20 = a3 + 312 * v13;
      v26 = v6;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v20, v6);
      v21 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v20 + 184), &v26);
      bzero((void *)(*(_QWORD *)(*(_QWORD *)(v20 + 192) + 32 * v21 + 8)+ *(unsigned int *)(*(_QWORD *)(v20 + 192) + 32 * v21 + 16)), *(unsigned int *)(*(_QWORD *)(v20 + 192) + 32 * v21 + 20));
    }
    if (v17 == ++v18)
      goto LABEL_18;
  }
LABEL_23:
  re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, a4);
  _os_crash();
  __break(1u);
LABEL_24:
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Invalid buffer initialization type: %u.", "!\"Unreachable code\"", "initializeCPUVertexBuffers", 259, v8);
  result = (unint64_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::DeformationInstanceIterator::Instance::Instance(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(_QWORD *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](*a2 + 8, a3) + 8);
  a1[2] = re::BucketArray<re::ActiveDeformation,8ul>::operator[](*(_QWORD *)(*a1 + 8), v4);
  v6 = *(_QWORD *)(*a1 + 48);
  if (v6 <= v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v4, v6);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    a1[3] = *(_QWORD *)(*a1 + 40) + 312 * v4;
    return (uint64_t)a1;
  }
  return result;
}

uint64_t re::DeformationInstanceIterator::Instance::handle(re::DeformationInstanceIterator::Instance *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](**(_QWORD **)this + 8, *((_QWORD *)this + 1));
  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int8 *)(v2 + 16);
  v6 = *(_QWORD *)(v4 + 336);
  if (v6 > v5)
    return *(_QWORD *)(*(_QWORD *)(v4 + 328) + (v5 << 6));
  re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v2 + 16), v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::DeformationInstanceIterator::Instance::meshPart(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = re::DataArray<re::MeshModel>::get(a2 + 8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 368) + 16));
  if (*(_QWORD *)(v3 + 56) <= (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 392))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(v3 + 64) + 560 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 392);
}

void re::ConstantTableCollection::fill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 **a5)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[8];
  _BYTE v26[12];
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  _OWORD v33[5];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a4 + 8);
  if (v8)
  {
    v9 = *(unsigned int **)a4;
    v10 = *(_QWORD *)a4 + 16 * v8;
    do
    {
      v11 = *v9;
      v12 = v9[1];
      v14 = v9[2];
      v13 = v9[3];
      if ((_DWORD)v11 == 11)
      {
        if (!*(_QWORD *)(a1 + 128))
        {
          *(_QWORD *)v26 = 0;
          memset(v25, 0, 80);
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v33[0]) = 136315906;
          *(_QWORD *)((char *)v33 + 4) = "operator[]";
          WORD6(v33[0]) = 1024;
          *(_DWORD *)((char *)v33 + 14) = 797;
          WORD1(v33[1]) = 2048;
          *(_QWORD *)((char *)&v33[1] + 4) = 0;
          WORD6(v33[1]) = 2048;
          *(_QWORD *)((char *)&v33[1] + 14) = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_20:
          v24 = 0;
          memset(v33, 0, sizeof(v33));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v26 = 136315906;
          *(_QWORD *)&v26[4] = "operator[]";
          v27 = 1024;
          v28 = 797;
          v29 = 2048;
          v30 = 0;
          v31 = 2048;
          v32 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v15 = *(_QWORD **)(a1 + 144);
      }
      else
      {
        v15 = (_QWORD *)(a1 + 8 * v11);
      }
      v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 16))(*v15);
      memcpy((void *)(a2 + v14), (const void *)(v16 + v12), v13);
      v9 += 4;
    }
    while (v9 != (unsigned int *)v10);
  }
  v17 = a5[1];
  if (v17)
  {
    v18 = *a5;
    v19 = 16 * (_QWORD)v17;
    do
    {
      v23 = *v18;
      re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v25);
      if ((_DWORD)v23 == 11)
      {
        if (!*(_QWORD *)(a1 + 128))
          goto LABEL_20;
        v20 = *(_QWORD **)(a1 + 144);
      }
      else
      {
        v20 = (_QWORD *)(a1 + 8 * v23);
      }
      v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 16))(*v20);
      v22 = *(_QWORD *)&v33[1];
      memcpy((void *)(a2 + DWORD2(v23)), *(const void **)&v33[1], HIDWORD(v23));
      if (*(_QWORD *)&v33[0])
      {
        if (*((_QWORD *)&v33[0] + 1))
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v33[0] + 40))(*(_QWORD *)&v33[0], v22);
      }
      re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v25);
      ++v18;
      v19 -= 16;
    }
    while (v19);
  }
}

__int16 re::`anonymous namespace'::castToHalfBuffer@<H0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  __int16 result;

  v5 = *(unsigned int *)(a1 + 12);
  v6 = v5 >> 1;
  *a4 = a3;
  a4[1] = v5 >> 1;
  a4[2] = 0;
  if (v5 >= 2)
  {
    v8 = v6;
    v9 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 2 * v6, 2);
    a4[2] = v9;
    if (v9)
    {
      v11 = v9;
      v12 = v9;
      if ((_DWORD)v6 != 1)
      {
        bzero(v9, v8 * 2 - 2);
        v12 = &v11[v8 - 1];
      }
      *v12 = 0;
      if (v6 <= 1)
        v13 = 1;
      else
        v13 = v6;
      for (i = v6; i; --i)
      {
        v15 = *a2++;
        _S0 = v15;
        __asm { FCVT            H0, S0 }
        *v11++ = result;
        if (!--v13)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  return result;
}

void re::ConstantTableCollection::fillInstanceArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 **a6, uint64_t a7)
{
  uint64_t i;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  const void *InstanceArraySourcePtr;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  BOOL v24;
  _QWORD v26[3];
  unsigned int v27[32];
  unsigned int v28[8];

  if (a5)
  {
    for (i = 0; i != a5; ++i)
    {
      v13 = i * a4;
      v14 = a6[1];
      if (v14)
      {
        v15 = *a6;
        v16 = 16 * (_QWORD)v14;
        do
        {
          v17 = *v15++;
          *(_OWORD *)v27 = v17;
          InstanceArraySourcePtr = (const void *)re::ConstantTableCollection::getInstanceArraySourcePtr(a1, v27, i);
          memcpy((void *)(a2 + v13 + v27[2]), InstanceArraySourcePtr, v27[3]);
          v16 -= 16;
        }
        while (v16);
      }
      v19 = *(_QWORD *)(a7 + 8);
      if (v19)
      {
        v20 = *(_OWORD **)a7;
        v21 = a2 + v13;
        v22 = 16 * v19;
        do
        {
          *(_OWORD *)v28 = *v20;
          re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v27);
          v23 = (int *)re::ConstantTableCollection::getInstanceArraySourcePtr(a1, v28, i);
          memcpy((void *)(v21 + v28[2]), (const void *)v26[2], v28[3]);
          if (v26[0])
            v24 = v26[1] == 0;
          else
            v24 = 1;
          if (!v24)
            (*(void (**)(void))(*(_QWORD *)v26[0] + 40))();
          re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v27);
          ++v20;
          v22 -= 16;
        }
        while (v22);
      }
    }
  }
}

uint64_t re::ConstantTableCollection::getInstanceArraySourcePtr(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if ((_DWORD)v4 == 11)
  {
    if (*(_QWORD *)(a1 + 128) <= (unint64_t)a3)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * a3);
    goto LABEL_7;
  }
  if ((_DWORD)v4 != 3)
  {
    v6 = *(_QWORD *)(a1 + 8 * v4);
LABEL_7:
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return v5 + a2[1];
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)) + ((uint64_t)a3 << 8);
  return v5 + a2[1];
}

uint64_t re::AttributeTableBuilder::makeAttributeTable(re::AttributeTableBuilder *this, re::AttributeTable *a2)
{
  char *v3;
  re::AttributeTable *v4;
  re::AttributeTable *v5;
  re::AttributeTable *v6;
  re::AttributeTable *v7;
  uint64_t result;

  v3 = (char *)this + 8;
  *((_QWORD *)a2 + 1) = *(_QWORD *)this;
  re::BufferTable::operator=((uint64_t)a2 + 48, (uint64_t)this + 32);
  re::FixedArray<re::VertexBufferFormat>::operator=((_QWORD *)a2 + 3, (uint64_t)v3);
  v4 = a2;
  do
  {
    v5 = v4;
    v4 = (re::AttributeTable *)*((_QWORD *)v4 + 1);
  }
  while (v4 && !*((_QWORD *)v5 + 4));
  v6 = a2;
  do
  {
    v7 = v6;
    v6 = (re::AttributeTable *)*((_QWORD *)v6 + 1);
  }
  while (v6 && !*((_QWORD *)v7 + 9));
  *((_QWORD *)a2 + 2) = result;
  return result;
}

uint64_t re::`anonymous namespace'::makeHashForAttributeTableHelper(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v15[0] = a2;
  v2 = a2[2];
  if (v2 < 0x10)
    return 0;
  v4 = 0;
  v5 = *a2;
  v6 = v2 >> 4;
  while (1)
  {
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
    v15[1] = (unsigned __int16)~v7;
    if (v7 != 0xFFFF)
      break;
    v4 += 16;
    if (!--v6)
      return 0;
  }
  v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
  v16 = v8;
  if (v8 == -1)
    return 0;
  v9 = 0;
  do
  {
    v11 = *(_QWORD *)(v15[0] + 8);
    v12 = *(unsigned __int8 *)(v11 + 16 * v8 + 8);
    v13 = *(_QWORD *)(a1 + 8);
    if (v13 <= v12)
    {
      v17 = 0;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v18 = 136315906;
      v19 = "operator[]";
      v20 = 1024;
      v21 = 476;
      v22 = 2048;
      v23 = v12;
      v24 = 2048;
      v25 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v14 = *(_QWORD *)(v11 + 16 * v8);
    v9 ^= v14 ^ re::VertexBufferFormat::hash((unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 16 * v12), 0, 0, 0, 0, 0);
    re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v15);
    v8 = v16;
  }
  while (v16 != -1);
  return v9;
}

uint64_t re::AttributeTableBuilder::makeAttributeTableAndReset(re::AttributeTableBuilder *this, re::AttributeTable *a2)
{
  uint64_t *v4;
  re::AttributeTable *v5;
  re::AttributeTable *v6;
  re::AttributeTable *v7;
  re::AttributeTable *v8;

  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)a2 + 1) = *(_QWORD *)this;
  re::BufferTable::operator=((uint64_t)a2 + 48, (uint64_t)this + 32);
  re::FixedArray<float>::operator=((uint64_t *)a2 + 3, v4);
  v5 = a2;
  do
  {
    v6 = v5;
    v5 = (re::AttributeTable *)*((_QWORD *)v5 + 1);
  }
  while (v5 && !*((_QWORD *)v6 + 4));
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = (re::AttributeTable *)*((_QWORD *)v7 + 1);
  }
  while (v7 && !*((_QWORD *)v8 + 9));
  return re::AttributeTableBuilder::deinit(this);
}

void re::DynamicTextureTableAdd(_QWORD *a1, _QWORD *a2, id *a3)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  int v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  unsigned __int8 v22;
  id v23;
  void *v24;
  id v25;
  char v26;
  int v27;
  uint64_t v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  unint64_t v36;
  id v37[2];
  id v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = (_anonymous_namespace_ *)(a1 + 1);
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 1, a2);
  if (v7 == -1)
  {
    BYTE1(v29) = a1[11];
    LOBYTE(v29) = objc_msgSend(*a3, sel_protectionOptions);
    if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v6, a2) == -1)re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd(v6, a2, &v29);
    v37[0] = *a3;
    LOBYTE(v37[1]) = 0;
    LOBYTE(v38[1]) = 0;
    re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::add(a1 + 9, (uint64_t)v37);
    if (LOBYTE(v37[1]) && v38[0])
    {

      v38[0] = 0;
    }
    if (v37[0])

  }
  else
  {
    v8 = a1[2] + 16 * v7;
    v9 = *a3;
    v12 = *(unsigned __int8 *)(v8 + 9);
    v10 = (_BYTE *)(v8 + 9);
    v11 = v12;
    v23 = v9;
    LOBYTE(v24) = 0;
    v26 = 0;
    v13 = a1[11];
    if (v13 <= v12)
    {
      v28 = 0;
      v40 = 0u;
      v41 = 0u;
      *(_OWORD *)v38 = 0u;
      v39 = 0u;
      *(_OWORD *)v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v29 = 136315906;
      v30 = "operator[]";
      v31 = 1024;
      v32 = 789;
      v33 = 2048;
      v34 = v11;
      v35 = 2048;
      v36 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v14 = a1[13];
    v15 = v14 + 32 * v11;
    NS::SharedPtr<MTL::Texture>::operator=((void **)v15, &v23);
    re::Optional<NS::SharedPtr<MTL::Texture>>::operator=(v15 + 8, &v24);
    v18 = *(unsigned __int8 *)(v15 + 24);
    v17 = (_BYTE *)(v15 + 24);
    v16 = v18;
    if (v18)
      v19 = 0;
    else
      v19 = v26 == 0;
    if (!v19)
    {
      if (v16)
        v20 = v26 == 0;
      else
        v20 = 0;
      if (v20)
      {
        *v17 = 0;
      }
      else
      {
        if (v16)
          v21 = 1;
        else
          v21 = v26 == 0;
        if (!v21)
          *v17 = 1;
        *(_DWORD *)(v14 + 32 * v11 + 25) = v27;
      }
    }
    if ((_BYTE)v24 && v25)
    {

      v25 = 0;
    }
    if (v23)

    v22 = objc_msgSend(*a3, sel_protectionOptions);
    if (*(v10 - 1) != v22)
    {
      LOBYTE(v37[0]) = v22;
      BYTE1(v37[0]) = *v10;
      re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::replace(v6, a2, v37);
    }
  }
}

BOOL re::DynamicTextureTableRemove(re *this, re::TextureTable *a2, const re::WeakStringID *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t i;

  v5 = (uint64_t *)((char *)this + 8);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 1, a2);
  if (v6 != -1)
  {
    v7 = *((_QWORD *)this + 2) + 16 * v6;
    v9 = *(unsigned __int8 *)(v7 + 9);
    v8 = (unsigned __int8 *)(v7 + 9);
    re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::removeStableAt((uint64_t)this + 72, v9);
    v18[0] = v5;
    v10 = *((_QWORD *)this + 3);
    if (v10 >= 0x10)
    {
      v11 = 0;
      v12 = *v5;
      v13 = v10 >> 4;
      while (1)
      {
        v14 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        v18[1] = (unsigned __int16)~v14;
        if (v14 != 0xFFFF)
          break;
        v11 += 16;
        if (!--v13)
          goto LABEL_11;
      }
      v15 = __clz(__rbit64((unsigned __int16)~v14)) + v11;
      for (i = v15; i != -1; v15 = i)
      {
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)v5, *((_QWORD *)this + 2) + 16 * v15);
        v16 = *((_QWORD *)this + 2) + 16 * i;
        if (*(unsigned __int8 *)(v16 + 9) > *v8)
          --*(_BYTE *)(v16 + 9);
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)v5, v16);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
      }
    }
LABEL_11:
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::remove(v5, a2);
    v18[0] = this;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::rehashKeysWith<re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::rehashNames(void)::{lambda(re::IndexAndProtectionOptions)#1}>(v5, (uint64_t)v18);
  }
  return v6 != -1;
}

void re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TextureViews<NS::SharedPtr<MTL::Texture>> *,re::TextureViews<NS::SharedPtr<MTL::Texture>> *,re::TextureViews<NS::SharedPtr<MTL::Texture>> *>((uint64_t)v7, *(_QWORD *)(a1 + 32) + 32 * a2 + 32, *(_QWORD *)(a1 + 32) + 32 * v2, *(_QWORD *)(a1 + 32) + 32 * a2);
    v2 = *(_QWORD *)(a1 + 16);
  }
  v4 = *(_QWORD *)(a1 + 32) + 32 * v2;
  if (*(_BYTE *)(v4 - 24))
  {
    v5 = *(void **)(v4 - 16);
    if (v5)
    {

      *(_QWORD *)(v4 - 16) = 0;
    }
  }
  v6 = *(void **)(v4 - 32);
  if (v6)
  {

    *(_QWORD *)(v4 - 32) = 0;
  }
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

BOOL re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateHashes((uint64_t)a1, a1[1] + 16 * v3);
    v9 = a1[2];
    *(_QWORD *)(a1[1] + 16 * v4) = 0;
    v10 = a1[4];
    if (v7)
      ++v10;
    v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v10;
    if (v9 >= 0x11 && v11 < v9 >> 2)
      re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::resize(a1, 0);
  }
  return v4 != -1;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TextureViews<NS::SharedPtr<MTL::Texture>> *,re::TextureViews<NS::SharedPtr<MTL::Texture>> *,re::TextureViews<NS::SharedPtr<MTL::Texture>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)a4, (void **)v5);
      v7 = v5 + 8;
      re::Optional<NS::SharedPtr<MTL::Texture>>::operator=(a4 + 8, (void **)(v5 + 8));
      v8 = *(unsigned __int8 *)(v5 + 24);
      if (*(_BYTE *)(a4 + 24))
        v9 = 0;
      else
        v9 = v8 == 0;
      if (!v9)
      {
        if (*(_BYTE *)(a4 + 24))
          v10 = v8 == 0;
        else
          v10 = 0;
        if (v10)
        {
          *(_BYTE *)(a4 + 24) = 0;
        }
        else
        {
          if (!*(_BYTE *)(a4 + 24) && *(_BYTE *)(v5 + 24))
            *(_BYTE *)(a4 + 24) = 1;
          *(_DWORD *)(a4 + 25) = *(_DWORD *)(v5 + 25);
        }
      }
      a4 += 32;
      v5 += 32;
    }
    while (v7 + 24 != a3);
    return a3;
  }
  return v5;
}

uint64_t re::BoundingBoxCalculation::init(uint64_t this, id *a2)
{
  uint64_t v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  void **ComputePipelineState;
  void **v10;
  NSObject *v11;
  id v12;
  unint64_t v13;
  NSObject *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  unint64_t v22;
  _OWORD v23[2];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  char v35;
  _QWORD v36[4];
  _QWORD v37[3];
  int v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint8_t buf[8];
  uint64_t v45;
  uint64_t v46;

  if (!*(_BYTE *)(this + 32))
  {
    v3 = this;
    *(_BYTE *)(this + 32) = 1;
    if (*((_BYTE *)a2 + 260))
    {
      if ((objc_msgSend(a2[23], "supportsFamily:", 1006) & 1) != 0)
        v4 = 1;
      else
        v4 = objc_msgSend(a2[23], "supportsFamily:", 2002);
      *(_BYTE *)(v3 + 34) = v4;
      v33[0] = 0;
      v39 = 0;
      memset(v37, 0, sizeof(v37));
      v38 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      memset(v28, 0, sizeof(v28));
      v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v28, 0);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v28, *(unsigned int *)(v3 + 36));
      v29 = 33;
      v7 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v37, (re::DynamicString *)v28);
      memset(v23, 0, sizeof(v23));
      v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v23, 0);
      v25 = 0;
      v26 = 0;
      v27 = 0;
      re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v23, *(unsigned __int8 *)(v3 + 34));
      v24 = 65589;
      re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v37, (re::DynamicString *)v23);
      ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v33);
      v10 = NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 8), ComputePipelineState);
      if (*(_QWORD *)(v3 + 8))
      {
        *(_BYTE *)(v3 + 33) = 1;
      }
      else
      {
        v11 = *re::graphicsLogObjects((re *)v10);
        v10 = (void **)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v10)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Bounding box make pipeline function failed, disabling GPU bounding box calculations.", buf, 2u);
        }
      }
      if (*(_BYTE *)(v3 + 33))
      {
        v12 = a2[23];
        if (v12)
        {
          *(_QWORD *)buf = 0;
          v45 = 0;
          v46 = 0;
          objc_msgSend(v12, "maxThreadsPerThreadgroup");
          v13 = *(_QWORD *)buf;
        }
        else
        {
          v13 = 0;
        }
        v15 = objc_msgSend(*(id *)(v3 + 8), sel_maxTotalThreadsPerThreadgroup);
        if ((unint64_t)v15 >= v13)
          v16 = v13;
        else
          v16 = (unint64_t)v15;
        *(_QWORD *)(v3 + 16) = v16;
        v17 = objc_msgSend(a2[23], "maxThreadgroupMemoryLength");
        v18 = (v17 - (_QWORD)objc_msgSend(*(id *)(v3 + 8), sel_staticThreadgroupMemoryLength)) & 0xFFFFFFFFFFFFFF00;
        v19 = v18 >> 5;
        v20 = *(void **)(v3 + 8);
        if (v18 >> 5 >= *(_QWORD *)(v3 + 16))
          v19 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = v19;
        *(_QWORD *)(v3 + 24) = v18;
        v21 = objc_msgSend(v20, sel_threadExecutionWidth);
        v22 = (_QWORD)objc_msgSend(*(id *)(v3 + 8), sel_threadExecutionWidth) * (_QWORD)v21;
        if (v22 >= *(_QWORD *)(v3 + 16))
          v22 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = v22;
      }
      else
      {
        v14 = *re::graphicsLogObjects((re *)v10);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Could not create GPU Bounding box reduction pipeline. Using CPU fallback", buf, 2u);
        }
      }
      if (v25)
      {
        if (v26)
        {
          (*(void (**)(void))(*(_QWORD *)v25 + 40))();
          v26 = 0;
          v27 = 0;
        }
        v25 = 0;
      }
      if (*(_QWORD *)&v23[0] && (BYTE8(v23[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v23[0] + 40))();
      if (v30)
      {
        if (v31)
        {
          (*(void (**)(void))(*(_QWORD *)v30 + 40))();
          v31 = 0;
          v32 = 0;
        }
        v30 = 0;
      }
      if (*(_QWORD *)&v28[0] && (BYTE8(v28[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v28[0] + 40))();
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v37);
      this = v36[0];
      if (v36[0])
      {
        if ((v36[1] & 1) != 0)
          this = (*(uint64_t (**)(void))(*(_QWORD *)v36[0] + 40))();
        memset(v36, 0, sizeof(v36));
      }
      if (v33[0])
      {
        this = v34;
        if (v34)
        {
          if ((v35 & 1) != 0)
            return (*(uint64_t (**)(void))(*(_QWORD *)v34 + 40))();
        }
      }
    }
  }
  return this;
}

double re::BoundingBoxCalculation::addDeformationInstance@<D0>(re::BoundingBoxCalculation *this@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  double result;

  if (*a2)
  {
    v3 = 0;
  }
  else if (*((_BYTE *)this + 32))
  {
    v3 = *((_BYTE *)this + 33) != 0;
  }
  else
  {
    v3 = 1;
  }
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 2;
  *(_OWORD *)(a3 + 8) = xmmword_2260FDD40;
  *(_BYTE *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t re::BoundingBoxCalculation::allocateBuffers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t result;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = *a4;
  *(_BYTE *)(a5 + 32) = 0;
  v8 = a4[6];
  v39 = v8;
  if (v8)
  {
    if (!is_mul_ok(v8, 0x28uLL) || 40 * v8 >= 0xFFFFFFFFFFFFFFF0)
      goto LABEL_31;
    v9 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a2 + 24) + 32))(*(_QWORD *)(a2 + 24), (40 * v8 + 16) | 7, 0);
    v10 = (_QWORD *)((v9 + 23) & 0xFFFFFFFFFFFFFFF8);
    *(v10 - 2) = v8;
    *(v10 - 1) = v9;
    bzero(v10, 40 * v8);
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(v7 + 48);
  if (!v11)
    return (uint64_t)v10;
  v12 = 0;
  while (1)
  {
    v8 = *(_QWORD *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v7 + 8, v12) + 8);
    v13 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](a4[1], v8);
    v15 = a4[6];
    if (v15 <= v8)
      break;
    v16 = v13;
    v17 = (_QWORD *)(a4[5] + 312 * v8);
    LOBYTE(v40) = 1;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
    v18 = *(_DWORD *)(v17[8]
                    + 32
                    * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 7, (unsigned __int8 *)&v40)+ 20);
    LOBYTE(v40) = 1;
    re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
    v19 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 15, (unsigned __int8 *)&v40);
    v21 = *(uint64_t ***)(*(_QWORD *)(v16 + 352) + 56);
    if (v21)
    {
      if (v39 <= v8)
        goto LABEL_30;
      v22 = v18 / *(unsigned __int16 *)(v17[16] + 20 * v19 + 4);
      v23 = &v10[5 * v8];
      re::FrameContext::perFrameAlloc((re::FrameContext *)a2, 8uLL, 4uLL, (uint64_t)&v40);
      v24 = v40;
      v25 = v42;
      v26 = v41;
      *(_QWORD *)(v40 + v41) = v22 | (v8 << 32);
      *v23 = v24;
      v23[1] = v26;
      v23[2] = v25;
      v27 = *v21;
      v28 = **v21;
      if (v28)
      {
        v29 = (v28 - 1) & 7;
        if (1 - v28 >= 0)
          v29 = -((1 - v28) & 7);
        v30 = v27[v29 + 1] & 0xFFFFFFFFFFFFFFFLL;
        v31 = *(_QWORD *)(a2 + 32);
        v32 = v31 & 0xFFFFFFFFFFFFFFFLL;
        if (v30 != 0xFFFFFFFFFFFFFFFLL)
        {
          if (v32 == 0xFFFFFFFFFFFFFFFLL || v30 != v32)
            goto LABEL_22;
          do
LABEL_20:
            v33 = --v28 & 7;
          while ((v27[v33 + 1] & 0xFFFFFFFFFFFFFFFuLL) > v30);
          goto LABEL_26;
        }
      }
      else
      {
        v31 = *(_QWORD *)(a2 + 32);
        v32 = v31 & 0xFFFFFFFFFFFFFFFLL;
      }
      v30 = 0xFFFFFFFFFFFFFFFLL;
      if (v32 == 0xFFFFFFFFFFFFFFFLL)
        goto LABEL_20;
LABEL_22:
      *v27 = v28 + 1;
      v34 = -v28 < 0;
      v35 = -v28 & 7;
      v36 = v28 & 7;
      if (v34)
        v33 = v36;
      else
        v33 = -v35;
      v27[v33 + 1] = v31;
LABEL_26:
      v37 = (char *)&v10[5 * v8];
      *((_QWORD *)v37 + 3) = v27[v33 + 9];
      *((_QWORD *)v37 + 4) = 0x2000000000;
    }
    if (++v12 == v11)
      return (uint64_t)v10;
  }
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v15);
  _os_crash();
  __break(1u);
LABEL_30:
  re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v39);
  _os_crash();
  __break(1u);
LABEL_31:
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 40, v8);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::BoundingBoxCalculation::deformGPU(uint64_t a1, uint64_t a2, void **this, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t result;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  int64x2_t v33;
  uint64_t v34;

  v4 = a4;
  v8 = *a4;
  v30 = a4[6];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Bounding Box Reduction Calculation");
  v29 = *(_QWORD *)(v8 + 48);
  if (!v29)
    return objc_msgSend(*this, "popDebugGroup");
  v9 = 0;
  v27 = v4;
  v28 = v8 + 8;
  v26 = a2;
  while (1)
  {
    v10 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v28, v9);
    v12 = *(_QWORD *)(v10 + 8);
    if (v30 <= v12)
      break;
    v13 = a2 + 40 * v12;
    if (*(_DWORD *)(v13 + 12))
    {
      v14 = v4[6];
      if (v14 <= v12)
        goto LABEL_16;
      v15 = v4[5] + 312 * v12;
      v33.i8[0] = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v15, 1u);
      v16 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v15 + 64)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v15 + 56), (unsigned __int8 *)&v33)+ 24), sel_length)/ *(unsigned int *)(a1 + 40);
      v17 = sqrtf((float)v16);
      if (*(_BYTE *)(a1 + 34))
        v18 = v16;
      else
        v18 = v17;
      v19 = objc_msgSend(*(id *)(a1 + 8), sel_threadExecutionWidth);
      v20 = (v19 + v18 - 1) & -v19;
      v21 = *(_DWORD *)(a1 + 16);
      if (v20 >= v21)
        v22 = v21;
      else
        v22 = v20;
      objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(a1 + 8));
      v33.i8[0] = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v15, 1u);
      v23 = *(_QWORD *)(*(_QWORD *)(v15 + 64)
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v15 + 56), (unsigned __int8 *)&v33)+ 24);
      v33.i8[0] = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v15, 1u);
      a2 = v26;
      objc_msgSend(*this, "setBuffer:offset:atIndex:", v23, *(unsigned int *)(*(_QWORD *)(v15 + 64)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v15 + 56), (unsigned __int8 *)&v33)+ 16), 0);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v13 + 16), *(unsigned int *)(v13 + 8), 1);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(a2 + 40 * v12 + 24), *(unsigned int *)(a2 + 40 * v12 + 32), 2);
      objc_msgSend(*this, "setThreadgroupMemoryLength:atIndex:", 16 * v22, 0);
      objc_msgSend(*this, "setThreadgroupMemoryLength:atIndex:", 16 * v22, 1);
      v24 = *this;
      v32 = vdupq_n_s64(1uLL);
      v33 = v32;
      v34 = 1;
      v31 = v22;
      v4 = v27;
      objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", &v33, &v31);
    }
    if (v29 == ++v9)
      return objc_msgSend(*this, "popDebugGroup");
  }
  re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(_QWORD *)(v10 + 8), v30);
  _os_crash();
  __break(1u);
LABEL_16:
  re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v12, v14);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::BoundingBoxCalculation::deformCPU(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(re::_anonymous_namespace_ *, const void *, float16x4_t);
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  char *v21;
  re::_anonymous_namespace_ *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  void *v27;
  float32x4_t *v28;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42[9];

  v33 = *(_QWORD *)(*a3 + 48);
  if (v33)
  {
    v3 = a3;
    v4 = 0;
    v31 = a3[6];
    v32 = *a3 + 8;
    v34 = vdupq_n_s32(0x7F800000u);
    while (1)
    {
      v5 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v32, v4);
      v7 = *(_QWORD *)(v5 + 8);
      v8 = v3[6];
      if (v8 <= v7)
        break;
      v9 = (_QWORD *)(v3[5] + 312 * v7);
      v39 = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v9, 1u);
      v10 = v9 + 8;
      v11 = *(_DWORD *)(v9[8]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v9 + 7, &v39)+ 20);
      v40 = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v9, 1u);
      v12 = *(unsigned __int16 *)(v9[16]
                                + 20
                                * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v9 + 15, &v40)+ 4);
      v41 = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v9, 1u);
      v14 = *(unsigned __int8 *)(v9[16]
                               + 20
                               * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v9 + 15, &v41)+ 16);
      if (v14 > 0x19)
      {
        if ((_DWORD)v14 != 26)
        {
          if ((_DWORD)v14 != 30)
            goto LABEL_25;
        }
      }
      else if ((_DWORD)v14 == 8)
      {
      }
      else
      {
        if ((_DWORD)v14 != 11)
          goto LABEL_25;
      }
      v42[0] = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v9, 1u);
      v16 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v9 + 7, v42);
      v19.i64[0] = 0x7F0000007FLL;
      v19.i64[1] = 0x7F0000007FLL;
      v20 = (float32x4_t)v34;
      if (v11 >= v12)
      {
        v21 = 0;
        v22 = (re::_anonymous_namespace_ *)(*(_QWORD *)(*v10 + 32 * v16 + 8) + *(unsigned int *)(*v10 + 32 * v16 + 16));
        if (v11 / v12 <= 1)
          v23 = 1;
        else
          v23 = v11 / v12;
        v20 = (float32x4_t)v34;
        do
        {
          v35 = v20;
          v37 = v19;
          v15(v22, v21, *(float16x4_t *)v18.f32);
          v24 = v35;
          v25 = v37;
          v18.i64[0] = v26;
          v18.i64[1] = v17;
          v24.i32[3] = 0;
          v20 = vminnmq_f32(v24, v18);
          v25.i32[3] = 0;
          v19 = vmaxnmq_f32(v25, v18);
          ++v21;
        }
        while ((char *)v23 != v21);
      }
      if (v31 <= v7)
        goto LABEL_24;
      v27 = *(void **)(a2 + 40 * v7 + 24);
      if (v27)
      {
        v38 = v19;
        v36 = v20;
        v28 = (float32x4_t *)((char *)objc_msgSend(v27, sel_contents) + *(unsigned int *)(a2 + 40 * v7 + 32));
        *v28 = v36;
        v28[1] = v38;
      }
      ++v4;
      v3 = a3;
      if (v4 == v33)
        return;
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, *(_QWORD *)(v5 + 8), v8);
    _os_crash();
    __break(1u);
LABEL_24:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, v31);
    _os_crash();
    __break(1u);
LABEL_25:
    re::internal::assertLog((re::internal *)5, v13, "assertion failure: '%s' (%s:line %i) Unsupported packed vertex format: %u.", "!\"Unreachable code\"", "vertexUnpackFunctionForFormat", 54, v14);
    _os_crash();
    __break(1u);
  }
}

void re::BoundingBoxCalculation::~BoundingBoxCalculation(re::BoundingBoxCalculation *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {

    *((_QWORD *)this + 1) = 0;
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {

    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x2276933B8);
}

double re::`anonymous namespace'::unpackHalf3Data(re::_anonymous_namespace_ *this, const void *a2, float16x4_t a3)
{
  char *v3;
  double result;

  v3 = (char *)this + 8 * (_QWORD)a2;
  a3.i32[0] = *(_DWORD *)v3;
  *(_QWORD *)&result = vcvtq_f32_f16(a3).u64[0];
  _H1 = *((_WORD *)v3 + 2);
  __asm { FCVT            S1, H1 }
  return result;
}

int8x8_t re::`anonymous namespace'::unpackChar3NormalizedData(re::_anonymous_namespace_ *this, const void *a2)
{
  char *v2;
  int32x2_t v3;
  float32x2_t v4;

  v2 = (char *)this + 4 * (_QWORD)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  v4 = vdiv_f32(vcvt_f32_s32(v3), (float32x2_t)vdup_n_s32(0x42FE0000u));
  __asm { FMOV            V1.2S, #1.0 }
  return vbsl_s8((int8x8_t)vcgt_f32(v4, _D1), (int8x8_t)_D1, (int8x8_t)v4);
}

float32x2_t re::`anonymous namespace'::unpackUChar3NormalizedData(re::_anonymous_namespace_ *this, const void *a2)
{
  unsigned __int8 *v2;
  uint32x2_t v3;

  v2 = (unsigned __int8 *)this + 4 * (_QWORD)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  return vdiv_f32(vcvt_f32_u32(v3), (float32x2_t)vdup_n_s32(0x437F0000u));
}

uint64_t re::`anonymous namespace'::unpackFloat3Data(re::_anonymous_namespace_ *this, const void *a2)
{
  return *(_QWORD *)((char *)this + 12 * (_QWORD)a2);
}

uint64_t re::CombinedDynamicFunctionConstants::hash(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;

  v2 = 0x9E3779B97F4A7C17;
  v3 = 0x9E3779B97F4A7C17;
  if (*(_QWORD *)a1)
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 48) - 0x61C8864680B583E9;
  v4 = *((_QWORD *)a1 + 1);
  if (v4)
    v4 = *(_QWORD *)(v4 + 48);
  v5 = *((_QWORD *)a1 + 2);
  if (v5)
    v2 = *(_QWORD *)(v5 + 48) - 0x61C8864680B583E9;
  v6 = a1 + 24;
  v8 = *a2;
  v7 = a2 + 1;
  if (v8)
    v6 = v7;
  v9 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * *v6) ^ ((0xBF58476D1CE4E5B9 * *v6) >> 27));
  v10 = (v3 + ((v9 ^ (v9 >> 31)) << 6) + ((v9 ^ (v9 >> 31)) >> 2)) ^ v9 ^ (v9 >> 31);
  return ((((v4 >> 2) + (v4 << 6) + v2) ^ v4) - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10;
}

void re::CombinedDynamicFunctionConstants::combinedMap(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, _anonymous_namespace_ *a3@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  const char *v21;
  const char *v22;
  const char *v23;
  size_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = 0;
  v31 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  v29 = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
  v30 = *a1;
  v7 = (int8x16_t)xmmword_2260EE390;
  do
  {
    v8 = (uint64_t *)v29.i64[v6];
    if (v8)
    {
      v26 = v29.i64[v6];
      v27 = 0;
      v9 = v8[2];
      if (v9 >= 0x10)
      {
        v10 = 0;
        v11 = *v8;
        v12 = v9 >> 4;
        while (1)
        {
          v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + v10)), v7)))), (int8x8_t)0x3830282018100800).u16[0];
          v27 = (unsigned __int16)~v13;
          if (v13 != 0xFFFF)
            break;
          v10 += 16;
          if (!--v12)
            goto LABEL_10;
        }
        v14 = __clz(__rbit64((unsigned __int16)~v13)) + v10;
        for (i = v14; i != -1; v14 = i)
        {
          re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace(a3, (_QWORD *)(*(_QWORD *)(v26 + 8) + 16 * v14), (_DWORD *)(*(_QWORD *)(v26 + 8) + 16 * v14 + 8));
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v26);
          v7 = (int8x16_t)xmmword_2260EE390;
        }
      }
    }
LABEL_10:
    ++v6;
  }
  while (v6 != 3);
  if ((v15 & 1) == 0
  {
    re::CombinedDynamicFunctionConstants::combinedMap(re::Optional<re::FunctionConstantRenderFeatures>)const::kRenderFeatureHashes[0] = re::hashString((re *)"EnableDitherFade", v21);
    qword_25582A148 = re::hashString((re *)"EnableClipping", v22);
    v24 = re::hashString((re *)"RenderForBlur", v23);
    qword_25582A158 = 0;
    unk_25582A160 = 0;
    qword_25582A150 = v24;
  }
  v16 = 0;
  v17 = (unsigned __int8 *)(a1 + 3);
  v19 = *a2;
  v18 = a2 + 1;
  if (v19)
    v17 = v18;
  v20 = *v17;
  do
  {
    if (((v20 >> v16) & 1) != 0)
    {
      v26 = re::CombinedDynamicFunctionConstants::combinedMap(re::Optional<re::FunctionConstantRenderFeatures>)const::kRenderFeatureHashes[v16];
      v25 = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace(a3, &v26, &v25);
    }
    ++v16;
  }
  while (v16 != 5);
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace(_anonymous_namespace_ *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
  v7 = v6;
  re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v6);
  v8 = *((_QWORD *)a1 + 1) + 16 * v7;
  *(_DWORD *)(v8 + 8) = *a3;
  re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)a1, v8);
  return *((_QWORD *)a1 + 1) + 16 * v7 + 8;
}

uint64_t re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
  v7 = v6;
  re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v6);
  v8 = *((_QWORD *)a1 + 1) + 16 * v7;
  *(_DWORD *)(v8 + 8) = *a3;
  re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)a1, v8);
  return *((_QWORD *)a1 + 1) + 16 * v7 + 8;
}

void re::MeshManager::init(re::MeshManager *this, id *a2, int a3, int a4)
{
  re::MeshManager *v6;
  id v7;
  void *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;

  v6 = this;
  *(_QWORD *)this = a2;
  v7 = (id)objc_msgSend(a2[23], "newCommandQueue");

  v8 = (void *)*((_QWORD *)v6 + 23);
  *((_QWORD *)v6 + 23) = v7;

  re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::setCapacity((_QWORD *)v6 + 1, 0);
  ++*((_DWORD *)v6 + 8);
  *((_DWORD *)v6 + 13) = a3;
  re::DataArray<re::MeshModel>::allocBlock((unsigned int *)v6 + 2);
  v6 = (re::MeshManager *)((char *)v6 + 72);
  re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::setCapacity(v6, 0);
  ++*((_DWORD *)v6 + 6);
  *((_DWORD *)v6 + 11) = a4;
  re::DataArray<re::MeshInstance>::allocBlock((unsigned int *)v6);
}

unint64_t re::DataArray<re::MeshModel>::create<re::MeshModel>(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  __int128 v15;

  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 + 1) >> 24)
    v5 = 1;
  else
    v5 = v4 + 1;
  *(_DWORD *)(a1 + 56) = v5;
  v6 = *(unsigned __int16 *)(a1 + 52);
  v7 = *(unsigned __int16 *)(a1 + 54);
  if (v6 == 0xFFFF && (_DWORD)v7 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
      re::DataArray<re::MeshModel>::allocBlock((unsigned int *)a1);
    v11 = *(_QWORD *)(a1 + 16);
    v7 = (unsigned __int16)(v11 - 1);
    if (v11)
    {
      v6 = *(unsigned int *)(a1 + 48);
      if (v6 < 0x10000)
      {
        v12 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
        *(_DWORD *)(a1 + 48) = v6 + 1;
        *(_DWORD *)(v12[1] + 4 * v6) = *(_DWORD *)(a1 + 56);
        v10 = (_DWORD *)(*v12 + 816 * v6);
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v6, v14, v15);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    v14 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v15) = 136315906;
    *(_QWORD *)((char *)&v15 + 4) = "operator[]";
    WORD6(v15) = 1024;
    HIWORD(v15) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16) <= v7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
  *(_DWORD *)(v9[1] + 4 * v6) = v5;
  v10 = (_DWORD *)(*v9 + 816 * v6);
  *(_DWORD *)(a1 + 52) = *v10;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  re::MeshModel::MeshModel((uint64_t)v10, a2);
  return (v7 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v6;
}

unint64_t re::DataArray<re::MeshInstance>::create<re::MeshInstance>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;

  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 + 1) >> 24)
    v5 = 1;
  else
    v5 = v4 + 1;
  *(_DWORD *)(a1 + 56) = v5;
  v6 = *(unsigned __int16 *)(a1 + 52);
  v7 = *(unsigned __int16 *)(a1 + 54);
  if (v6 == 0xFFFF && (_DWORD)v7 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
      re::DataArray<re::MeshInstance>::allocBlock((unsigned int *)a1);
    v11 = *(_QWORD *)(a1 + 16);
    v7 = (unsigned __int16)(v11 - 1);
    if (v11)
    {
      v6 = *(unsigned int *)(a1 + 48);
      if (v6 < 0x10000)
      {
        v12 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
        *(_DWORD *)(a1 + 48) = v6 + 1;
        *(_DWORD *)(v12[1] + 4 * v6) = *(_DWORD *)(a1 + 56);
        v10 = *v12 + 144 * v6;
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v6, v20, v21);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    v20 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v21) = 136315906;
    *(_QWORD *)((char *)&v21 + 4) = "operator[]";
    WORD6(v21) = 1024;
    HIWORD(v21) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16) <= v7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
  *(_DWORD *)(v9[1] + 4 * v6) = v5;
  v10 = *v9 + 144 * v6;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v10;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)a2;
  *(_QWORD *)v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)a2 & 1;
  *(_QWORD *)v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = &str_110;
  v14 = *(_OWORD *)(a2 + 32);
  v16 = *(_OWORD *)(a2 + 64);
  v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v10 + 64) = v16;
  *(_OWORD *)(v10 + 32) = v14;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 80) = v15;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)(v10 + 112) = 0;
  *(_QWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(v10 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v17 = *(_QWORD *)(v10 + 112);
  *(_QWORD *)(v10 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v17;
  *(_QWORD *)(v10 + 120) = 0;
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = 0;
  *(_QWORD *)(v10 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(v10 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v18 = *(_QWORD *)(v10 + 136);
  *(_QWORD *)(v10 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v18;
  return (v7 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v6;
}

uint64_t re::MeshManager::destroyModel(uint64_t *a1, uint64_t a2)
{
  uint64_t *ValidAllocator;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  ValidAllocator = re::getValidAllocator((re *)(*(_QWORD *)(*(_QWORD *)(*a1 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*a1 + 136) + 16) << 60)));
  v5 = *a1;
  v7[0] = &off_24ED7B090;
  v7[1] = a1;
  v7[2] = a2;
  v8 = ValidAllocator;
  v9 = v7;
  re::FrameManager::addDelayedDestructor(*(_QWORD *)(v5 + 136), (uint64_t)v7);
  result = (uint64_t)v9;
  if (v9)
  {
    result = (*(uint64_t (**)(_QWORD *))*v9)(v9);
    if (v9 != v7)
      return (*(uint64_t (**)(uint64_t *))(*v8 + 40))(v8);
  }
  return result;
}

uint64_t re::MeshManager::destroyInstance(uint64_t *a1, uint64_t a2)
{
  uint64_t *ValidAllocator;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  ValidAllocator = re::getValidAllocator((re *)(*(_QWORD *)(*(_QWORD *)(*a1 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*a1 + 136) + 16) << 60)));
  v5 = *a1;
  v7[0] = &off_24ED7B0E0;
  v7[1] = a1;
  v7[2] = a2;
  v8 = ValidAllocator;
  v9 = v7;
  re::FrameManager::addDelayedDestructor(*(_QWORD *)(v5 + 136), (uint64_t)v7);
  result = (uint64_t)v9;
  if (v9)
  {
    result = (*(uint64_t (**)(_QWORD *))*v9)(v9);
    if (v9 != v7)
      return (*(uint64_t (**)(uint64_t *))(*v8 + 40))(v8);
  }
  return result;
}

uint64_t *re::MeshManager::destroyCollection(uint64_t *this, re::MeshCollectionHandles *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 4);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      this = (uint64_t *)re::MeshManager::destroyInstance(v3, v7);
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *((_QWORD *)a2 + 7);
  if (v8)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 9);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      this = (uint64_t *)re::MeshManager::destroyModel(v3, v11);
      v10 -= 8;
    }
    while (v10);
  }
  return this;
}

uint64_t re::MeshManager::findMaxMaterialIndex(re::MeshManager *this, const re::MeshCollectionHandles *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;

  v4 = *((_QWORD *)a2 + 7);
  if (v4)
  {
    v5 = (_QWORD *)*((_QWORD *)a2 + 9);
    v6 = &v5[v4];
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::DataArray<re::MeshModel>::get((uint64_t)this + 8, *v5);
      v9 = *(_QWORD *)(v8 + 56);
      if (v9)
      {
        v10 = 560 * v9;
        v11 = (unsigned __int16 *)(*(_QWORD *)(v8 + 64) + 474);
        do
        {
          if ((int)v7 <= *v11)
            v7 = *v11;
          else
            v7 = v7;
          v11 += 280;
          v10 -= 560;
        }
        while (v10);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12 = *((_QWORD *)a2 + 2);
  if (v12)
  {
    v13 = (_QWORD *)*((_QWORD *)a2 + 4);
    v14 = &v13[v12];
    v15 = (char *)this + 72;
    do
    {
      v16 = re::DataArray<re::MeshInstance>::get((uint64_t)v15, *v13);
      v17 = *(_QWORD *)(v16 + 104);
      if (v17)
      {
        v18 = *(int **)(v16 + 112);
        v19 = 4 * v17;
        do
        {
          v21 = *v18++;
          v20 = v21;
          if ((int)v7 <= v21)
            v7 = v20;
          else
            v7 = v7;
          v19 -= 4;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  return v7;
}

void re::internal::MoveOnlyCallable<re::MeshManager::destroyModel(re::DataArrayHandle<re::MeshModel>)::$_0,void ()(void)>::~MoveOnlyCallable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::MoveOnlyCallable<re::MeshManager::destroyModel(re::DataArrayHandle<re::MeshModel>)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = re::DataArray<re::MeshModel>::tryGet(v2 + 8, *(_QWORD *)(a1 + 16));
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 56);
    if (v4)
    {
      v5 = *(_QWORD **)(v3 + 64);
      v6 = &v5[70 * v4];
      do
      {
        if (*v5)
        {
          if (objc_isUniquelyReferenced())
          {
            v7 = *v5 + 24;
            v8 = re::Hash<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)&v24, v7);
            if (*(_QWORD *)(v2 + 136))
            {
              v9 = v8 % *(unsigned int *)(v2 + 160);
              v10 = *(unsigned int *)(*(_QWORD *)(v2 + 144) + 4 * v9);
              if ((_DWORD)v10 != 0x7FFFFFFF)
              {
                if (re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)&v25, *(_QWORD *)(v2 + 152) + 200 * v10 + 12, v7))
                {
                  *(_DWORD *)(*(_QWORD *)(v2 + 144) + 4 * v9) = *(_DWORD *)(*(_QWORD *)(v2 + 152)
                                                                          + 200 * v10
                                                                          + 8) & 0x7FFFFFFF;
LABEL_13:
                  v13 = *(_QWORD *)(v2 + 152);
                  v14 = v13 + 200 * v10;
                  v17 = *(_DWORD *)(v14 + 8);
                  v15 = (int *)(v14 + 8);
                  v16 = v17;
                  if (v17 < 0)
                  {
                    *v15 = v16 & 0x7FFFFFFF;
                    v18 = v13 + 200 * v10;
                    v21 = *(_QWORD *)(v18 + 192);
                    v20 = (_QWORD *)(v18 + 192);
                    v19 = v21;
                    if (v21)
                    {

                      *v20 = 0;
                    }
                  }
                  v22 = *(_QWORD *)(v2 + 152) + 200 * v10;
                  v23 = *(_DWORD *)(v2 + 176);
                  *(_DWORD *)(v22 + 8) = *(_DWORD *)(v22 + 8) & 0x80000000 | *(_DWORD *)(v2 + 172);
                  --*(_DWORD *)(v2 + 164);
                  *(_DWORD *)(v2 + 172) = v10;
                  *(_DWORD *)(v2 + 176) = v23 + 1;
                }
                else
                {
                  while (1)
                  {
                    v11 = v10;
                    v12 = *(_QWORD *)(v2 + 152);
                    v10 = *(_DWORD *)(v12 + 200 * v10 + 8) & 0x7FFFFFFF;
                    if (v10 == 0x7FFFFFFF)
                      break;
                    if (re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)&v25, v12 + 200 * v10 + 12, v7))
                    {
                      *(_DWORD *)(*(_QWORD *)(v2 + 152) + 200 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(v2 + 152)
                                                                                     + 200 * v11
                                                                                     + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v2 + 152) + 200 * v10 + 8) & 0x7FFFFFFF;
                      goto LABEL_13;
                    }
                  }
                }
              }
            }
          }
        }
        v5 += 70;
      }
      while (v5 != v6);
    }
    re::DataArray<re::MeshModel>::destroy(v2 + 8, *(_QWORD *)(a1 + 16));
  }
}

uint64_t re::internal::MoveOnlyCallable<re::MeshManager::destroyModel(re::DataArrayHandle<re::MeshModel>)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED7B090;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::MeshManager::destroyModel(re::DataArrayHandle<re::MeshModel>)::$_0,void ()(void)>::size()
{
  return 24;
}

void re::internal::MoveOnlyCallable<re::MeshManager::destroyInstance(re::DataArrayHandle<re::MeshInstance>)::$_0,void ()(void)>::~MoveOnlyCallable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::MoveOnlyCallable<re::MeshManager::destroyInstance(re::DataArrayHandle<re::MeshInstance>)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  re::DataArray<re::MeshInstance>::destroy(*(_QWORD *)(a1 + 8) + 72, *(_QWORD *)(a1 + 16));
}

uint64_t re::internal::MoveOnlyCallable<re::MeshManager::destroyInstance(re::DataArrayHandle<re::MeshInstance>)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED7B0E0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::MeshManager::destroyInstance(re::DataArrayHandle<re::MeshInstance>)::$_0,void ()(void)>::size()
{
  return 24;
}

void re::DataArray<re::MeshModel>::allocBlock(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = 816 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  _os_crash();
  __break(1u);
}

_QWORD *re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

__n128 re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::DataArray<re::MeshInstance>::allocBlock(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = 144 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::DataArray<re::MeshModel>::ElementBlock>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  _os_crash();
  __break(1u);
}

uint64_t re::getOrCreateDepthStencilState(uint64_t a1, uint64_t a2, uint64_t a3, uint8x8_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64x2_t v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  re *v24;
  NSObject *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  const char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  id v54;
  _BYTE v55[12];
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a3)
    v7 = re::Hash<re::DynamicString>::operator()((uint64_t)v55, a3 + 8);
  else
    v7 = 0;
  v8 = *(unsigned __int16 *)(a3 + 49);
  if (!*(_BYTE *)(a3 + 54))
    v8 = 0;
  if (*(_BYTE *)(a3 + 55))
    v8 |= ((unint64_t)*(unsigned __int8 *)(a3 + 52) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 51) << 16);
  if (!*(_BYTE *)(a3 + 54))
  {
    v9 = 0;
    if (!*(_BYTE *)(a3 + 55))
      goto LABEL_11;
    goto LABEL_10;
  }
  v9 = *(unsigned __int8 *)(a3 + 40) | (16 * *(unsigned __int8 *)(a3 + 41)) | ((unint64_t)*(unsigned __int8 *)(a3 + 42) << 8) | ((unint64_t)*(unsigned __int8 *)(a3 + 43) << 12);
  if (*(_BYTE *)(a3 + 55))
  {
LABEL_10:
    a4.i32[0] = *(_DWORD *)(a3 + 44);
    v10 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
    v11.i64[0] = v10.u32[0];
    v11.i64[1] = v10.u32[1];
    v12.i64[0] = 255;
    v12.i64[1] = 255;
    v13 = (uint64x2_t)vandq_s8(v11, v12);
    v11.i64[0] = v10.u32[2];
    v11.i64[1] = v10.u32[3];
    v14 = vorrq_s8((int8x16_t)vshlq_u64(v13, (uint64x2_t)xmmword_22616DC70), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v11, v12), (uint64x2_t)xmmword_22616DC60));
    v9 |= *(_QWORD *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  }
LABEL_11:
  v15 = ((unint64_t)*(unsigned __int8 *)(a3 + 54) << 48) | ((unint64_t)*(unsigned __int8 *)(a3 + 55) << 56) | v8 | ((unint64_t)*(unsigned __int8 *)(a3 + 53) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 48) << 40);
  v16 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
  v17 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
  v18 = ((((((v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7)
         + ((v16 ^ (v16 >> 31)) << 6)
         + ((v16 ^ (v16 >> 31)) >> 2)
         - 0x61C8864680B583E9) ^ v16 ^ (v16 >> 31))
       + ((v17 ^ (v17 >> 31)) << 6)
       + ((v17 ^ (v17 >> 31)) >> 2)
       - 0x61C8864680B583E9) ^ v17 ^ (v17 >> 31);
  if (*(_QWORD *)a2)
  {
    v19 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * (v18 % *(unsigned int *)(a2 + 24)));
    if ((_DWORD)v19 != 0x7FFFFFFF)
    {
      v30 = *(_QWORD *)(a2 + 16);
      if (*(_QWORD *)(v30 + 24 * v19 + 8) == v18)
        return v30 + 24 * v19 + 16;
      while (1)
      {
        LODWORD(v19) = *(_DWORD *)(v30 + 24 * v19) & 0x7FFFFFFF;
        if ((_DWORD)v19 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v30 + 24 * v19 + 8) == v18)
          return v30 + 24 * v19 + 16;
      }
    }
  }
  v20 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD590], sel_alloc), sel_init);
  if (*(_BYTE *)a3)
  {
    if ((*(_QWORD *)(a3 + 16) & 1) != 0)
      v21 = *(_QWORD *)(a3 + 24);
    else
      v21 = a3 + 17;
    objc_msgSend(v20, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v21, 4));
  }
  objc_msgSend(v20, sel_setDepthWriteEnabled_, *(unsigned __int8 *)(a3 + 53));
  objc_msgSend(v20, sel_setDepthCompareFunction_, *(unsigned __int8 *)(a3 + 48));
  if (*(_BYTE *)(a3 + 54))
  {
    v22 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD718], sel_alloc), sel_init);
    objc_msgSend(v22, sel_setStencilCompareFunction_, *(unsigned __int8 *)(a3 + 40));
    objc_msgSend(v22, sel_setDepthFailureOperation_, *(unsigned __int8 *)(a3 + 41));
    objc_msgSend(v22, sel_setStencilFailureOperation_, *(unsigned __int8 *)(a3 + 42));
    objc_msgSend(v22, sel_setDepthStencilPassOperation_, *(unsigned __int8 *)(a3 + 43));
    objc_msgSend(v22, sel_setReadMask_, *(unsigned __int8 *)(a3 + 49));
    objc_msgSend(v22, sel_setWriteMask_, *(unsigned __int8 *)(a3 + 50));
    objc_msgSend(v20, sel_setFrontFaceStencil_, v22);
    if (v22)

  }
  if (*(_BYTE *)(a3 + 55))
  {
    v23 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD718], sel_alloc), sel_init);
    objc_msgSend(v23, sel_setStencilCompareFunction_, *(unsigned __int8 *)(a3 + 44));
    objc_msgSend(v23, sel_setDepthFailureOperation_, *(unsigned __int8 *)(a3 + 45));
    objc_msgSend(v23, sel_setStencilFailureOperation_, *(unsigned __int8 *)(a3 + 46));
    objc_msgSend(v23, sel_setDepthStencilPassOperation_, *(unsigned __int8 *)(a3 + 47));
    objc_msgSend(v23, sel_setReadMask_, *(unsigned __int8 *)(a3 + 51));
    objc_msgSend(v23, sel_setWriteMask_, *(unsigned __int8 *)(a3 + 52));
    objc_msgSend(v20, sel_setBackFaceStencil_, v23);
    if (v23)

  }
  v54 = 0;
  *(_QWORD *)v55 = objc_msgSend(*(id *)(a1 + 184), sel_newDepthStencilStateWithDescriptor_, v20);
  NS::SharedPtr<MTL::Texture>::operator=(&v54, (void **)v55);
  v24 = *(re **)v55;
  if (*(_QWORD *)v55)

  if (!v54)
  {
    v25 = *re::graphicsLogObjects(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      if (*(_BYTE *)a3)
      {
        if ((*(_BYTE *)(a3 + 16) & 1) != 0)
          v39 = *(const char **)(a3 + 24);
        else
          v39 = (const char *)(a3 + 17);
      }
      else
      {
        v39 = "<Unnamed>";
      }
      v40 = *(unsigned __int8 *)(a3 + 53);
      v41 = *(unsigned __int8 *)(a3 + 48);
      v42 = *(unsigned __int8 *)(a3 + 54);
      v43 = *(unsigned __int8 *)(a3 + 40);
      v44 = *(unsigned __int8 *)(a3 + 41);
      v45 = *(unsigned __int8 *)(a3 + 42);
      v46 = *(unsigned __int8 *)(a3 + 43);
      v47 = *(unsigned __int8 *)(a3 + 49);
      v48 = *(unsigned __int8 *)(a3 + 55);
      v49 = *(unsigned __int8 *)(a3 + 44);
      v50 = *(unsigned __int8 *)(a3 + 45);
      v51 = *(unsigned __int8 *)(a3 + 46);
      v52 = *(unsigned __int8 *)(a3 + 47);
      v53 = *(unsigned __int8 *)(a3 + 51);
      *(_DWORD *)v55 = 136319234;
      *(_QWORD *)&v55[4] = v39;
      v56 = 1024;
      v57 = v40;
      v58 = 1024;
      v59 = v41;
      v60 = 1024;
      v61 = v42;
      v62 = 1024;
      v63 = v43;
      v64 = 1024;
      v65 = v44;
      v66 = 1024;
      v67 = v45;
      v68 = 1024;
      v69 = v46;
      v70 = 1024;
      v71 = v47;
      v72 = 1024;
      v73 = v47;
      v74 = 1024;
      v75 = v48;
      v76 = 1024;
      v77 = v49;
      v78 = 1024;
      v79 = v50;
      v80 = 1024;
      v81 = v51;
      v82 = 1024;
      v83 = v52;
      v84 = 1024;
      v85 = v53;
      v86 = 1024;
      v87 = v53;
      _os_log_error_impl(&dword_224FE9000, v25, OS_LOG_TYPE_ERROR, "Failed to create depth-stencil state. Descriptor parameters:  label: %s  depth write enabled: %u  depth cmp: %u  frontStencilEnabled: %u    frontStencilCmp: %u    frontStencilDepthFailOp: %u    frontStencilStencilFailOp: %u    frontStencilDepthStencilPassOp: %u    frontStencilReadMask: %u    frontStencilWriteMask: %u  backStencilEnabled: %u    backStencilCmp: %u    backStencilDepthFailOp: %u    backStencilStencilFailOp: %u    backStencilDepthStencilPassOp: %u    backStencilReadMask: %u    backStencilWriteMask: %u", v55, 0x6Cu);
    }
  }
  if (!*(_QWORD *)a2)
  {
    LODWORD(v26) = 0;
    goto LABEL_41;
  }
  v26 = v18 % *(unsigned int *)(a2 + 24);
  v27 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * v26);
  if ((_DWORD)v27 == 0x7FFFFFFF)
  {
LABEL_41:
    v32 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v32 == 0x7FFFFFFF)
    {
      v32 = *(unsigned int *)(a2 + 32);
      v33 = v32;
      if ((_DWORD)v32 == *(_DWORD *)(a2 + 24))
      {
        re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a2, 2 * *(_DWORD *)(a2 + 28));
        LODWORD(v26) = v18 % *(unsigned int *)(a2 + 24);
        v33 = *(_DWORD *)(a2 + 32);
      }
      *(_DWORD *)(a2 + 32) = v33 + 1;
      v34 = *(_QWORD *)(a2 + 16);
      v35 = *(_DWORD *)(v34 + 24 * v32);
    }
    else
    {
      v34 = *(_QWORD *)(a2 + 16);
      v35 = *(_DWORD *)(v34 + 24 * v32);
      *(_DWORD *)(a2 + 36) = v35 & 0x7FFFFFFF;
    }
    v36 = 24 * v32;
    *(_DWORD *)(v34 + v36) = v35 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + v36) = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24 * v32) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v26);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 24 * v32 + 8) = v18;
    v37 = *(_QWORD *)(a2 + 16) + 24 * v32;
    *(_QWORD *)(v37 + 16) = v54;
    *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v26) = v32;
    ++*(_DWORD *)(a2 + 28);
    ++*(_DWORD *)(a2 + 40);
    v29 = *(_QWORD *)(a2 + 16) + 24 * v32;
    goto LABEL_47;
  }
  v28 = *(_QWORD *)(a2 + 16);
  while (*(_QWORD *)(v28 + 24 * v27 + 8) != v18)
  {
    LODWORD(v27) = *(_DWORD *)(v28 + 24 * v27) & 0x7FFFFFFF;
    if ((_DWORD)v27 == 0x7FFFFFFF)
      goto LABEL_41;
  }
  v29 = v28 + 24 * v27;
LABEL_47:
  v31 = v29 + 16;
  if (v54)

  if (v20)
  return v31;
}

uint64_t re::removeNameMappedProtectedTexture<re::DynamicArray<re::TextureViews<re::TextureHandle>>>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 v8;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, a1);
  if (result != -1)
  {
    v7 = a2[1] + 16 * result;
    re::DynamicArray<re::TextureViews<re::TextureHandle>>::removeStableAt(a3, *(unsigned __int8 *)(v7 + 9));
    v8 = *(_BYTE *)(v7 + 9);
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::mapValues<void re::removeNameMappedProtectedTexture<re::DynamicArray<re::TextureViews<re::TextureHandle>>>(re::WeakStringID,re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>&,re::DynamicArray<re::TextureViews<re::TextureHandle>> &)::{lambda(re::IndexAndProtectionOptions&)#1}>(a2, &v8);
    return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::remove(a2, a1);
  }
  return result;
}

void re::DynamicArray<re::TextureViews<re::TextureHandle>>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  void *v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 + 40 * a2 + 40 != v4 + 40 * v2)
    {
      v5 = 40 * a2;
      v6 = 40 * v2 - 40;
      do
      {
        v7 = v4 + v5;
        re::TextureHandle::operator=((re::TextureHandle *)(v4 + v5), (re::TextureHandle *)(v4 + v5 + 40));
        re::Optional<NS::SharedPtr<MTL::Texture>>::operator=(v7 + 16, (void **)(v7 + 56));
        v8 = *(unsigned __int8 *)(v4 + v5 + 72);
        if (*(_BYTE *)(v4 + v5 + 32))
          v9 = 0;
        else
          v9 = v8 == 0;
        if (!v9)
        {
          if (*(_BYTE *)(v4 + v5 + 32))
            v10 = v8 == 0;
          else
            v10 = 0;
          if (v10)
          {
            *(_BYTE *)(v7 + 32) = 0;
          }
          else
          {
            if (*(_BYTE *)(v4 + v5 + 32))
              v11 = 1;
            else
              v11 = v8 == 0;
            if (!v11)
              *(_BYTE *)(v7 + 32) = 1;
            *(_DWORD *)(v4 + v5 + 33) = *(_DWORD *)(v4 + v5 + 73);
          }
        }
        v4 += 40;
        v6 -= 40;
      }
      while (v5 != v6);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  v12 = *(_QWORD *)(a1 + 32) + 40 * v2;
  if (*(_BYTE *)(v12 - 24))
  {
    v13 = *(void **)(v12 - 16);
    if (v13)
    {

      *(_QWORD *)(v12 - 16) = 0;
    }
  }
  re::TextureHandle::invalidate((re::TextureHandle *)(v12 - 40));
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

uint64_t *re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::mapValues<void re::removeNameMappedProtectedTexture<re::DynamicArray<re::TextureViews<re::TextureHandle>>>(re::WeakStringID,re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>&,re::DynamicArray<re::TextureViews<re::TextureHandle>> &)::{lambda(re::IndexAndProtectionOptions&)#1}>(uint64_t *result, unsigned __int8 *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t i;

  v11[0] = result;
  v2 = result[2];
  if (v2 >= 0x10)
  {
    v4 = (uint64_t)result;
    v5 = 0;
    v6 = *result;
    v7 = v2 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v11[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        return result;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash(v4, *(_QWORD *)(v4 + 8) + 16 * v9);
      v10 = *(_QWORD *)(v4 + 8) + 16 * i;
      if (*(unsigned __int8 *)(v10 + 9) >= *a2)
        --*(_BYTE *)(v10 + 9);
      re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash(v4, v10);
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v11);
    }
  }
  return result;
}

uint64_t re::removeNameMappedConstant(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t i;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, a1);
  if (result != -1)
  {
    v9 = a2[1] + 16 * result;
    if (*(unsigned __int8 *)(v9 + 10) == a4)
    {
      v10 = (unsigned __int16 *)(v9 + 8);
      v11 = *(unsigned __int16 *)(v9 + 8);
      if (((a4 + 3) & 0xFFFFFFFFFFFFFFFCLL) >= a3[2] - v11)
        v12 = a3[2] - v11;
      else
        v12 = (a4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      re::DynamicArray<unsigned char>::removeManyStableAt(a3, v11, v12);
      v20[0] = a2;
      v13 = a2[2];
      if (v13 >= 0x10)
      {
        v14 = 0;
        v15 = *a2;
        v16 = v13 >> 4;
        while (1)
        {
          v17 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v20[1] = (unsigned __int16)~v17;
          if (v17 != 0xFFFF)
            break;
          v14 += 16;
          if (!--v16)
            return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::remove(a2, a1);
        }
        v18 = __clz(__rbit64((unsigned __int16)~v17)) + v14;
        for (i = v18; i != -1; v18 = i)
        {
          re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash((uint64_t)a2, a2[1] + 16 * v18);
          v19 = a2[1] + 16 * i;
          if (*(unsigned __int16 *)(v19 + 8) > *v10)
            *(_WORD *)(v19 + 8) -= v12;
          re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash((uint64_t)a2, v19);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        }
      }
      return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::remove(a2, a1);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<unsigned char>::removeManyStableAt(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;

  if (a3)
  {
    v4 = result;
    v5 = a2 + a3 - 1;
    v6 = result[2];
    if (v5 >= v6)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v5 < v6 - 1)
    {
      v7 = result[4];
      result = (_QWORD *)(v7 + a2);
      v8 = (_BYTE *)(v7 + a2 + a3);
      v9 = (_BYTE *)(v7 + v6);
      if (v9 != v8)
      {
        result = memmove(result, v8, v9 - v8);
        v6 = v4[2];
      }
    }
    v4[2] = v6 - a3;
    ++*((_DWORD *)v4 + 6);
  }
  return result;
}

BOOL re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateHashes((uint64_t)a1, a1[1] + 16 * v3);
    v9 = a1[2];
    *(_QWORD *)(a1[1] + 16 * v4) = 0;
    v10 = a1[4];
    if (v7)
      ++v10;
    v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v10;
    if (v9 >= 0x11 && v11 < v9 >> 2)
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::resize(a1, 0);
  }
  return v4 != -1;
}

uint64_t re::removeNameMappedConstant(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t i;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, a1);
  if (result != -1)
  {
    v7 = a2[1] + 16 * result;
    v10 = *(unsigned __int16 *)(v7 + 8);
    v9 = (unsigned __int16 *)(v7 + 8);
    v8 = v10;
    v11 = a3[2] - v10;
    if (((*((unsigned __int8 *)v9 + 2) + 3) & 0x1FCu) >= v11)
      v12 = v11;
    else
      v12 = (*((unsigned __int8 *)v9 + 2) + 3) & 0x1FC;
    re::DynamicArray<unsigned char>::removeManyStableAt(a3, v8, v12);
    v20[0] = a2;
    v13 = a2[2];
    if (v13 >= 0x10)
    {
      v14 = 0;
      v15 = *a2;
      v16 = v13 >> 4;
      while (1)
      {
        v17 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        v20[1] = (unsigned __int16)~v17;
        if (v17 != 0xFFFF)
          break;
        v14 += 16;
        if (!--v16)
          return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::remove(a2, a1);
      }
      v18 = __clz(__rbit64((unsigned __int16)~v17)) + v14;
      for (i = v18; i != -1; v18 = i)
      {
        re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash((uint64_t)a2, a2[1] + 16 * v18);
        v19 = a2[1] + 16 * i;
        if (*(unsigned __int16 *)(v19 + 8) > *v9)
          *(_WORD *)(v19 + 8) -= v12;
        re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateKvpsHash((uint64_t)a2, v19);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
      }
    }
    return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::remove(a2, a1);
  }
  return result;
}

re::ShadowRenderManager *re::ShadowRenderManager::ShadowRenderManager(re::ShadowRenderManager *this, const re::RenderManager *a2)
{
  _anonymous_namespace_ *v4;
  int64x2_t v6;
  int v7;
  int64x2_t v8;
  int v9;

  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v8 = vdupq_n_s64(1uLL);
  v9 = 0;
  re::generatePatchPlane((uint64_t)a2, (uint64_t)&v8, (uint64_t *)this + 32);
  v6 = vdupq_n_s64(0x1EuLL);
  v7 = 0;
  re::generatePatchPlane((uint64_t)a2, (uint64_t)&v6, (uint64_t *)this + 37);
  *((_DWORD *)this + 90) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 436) = 0u;
  *(_QWORD *)((char *)this + 452) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 124) = 0;
  *(_QWORD *)((char *)this + 500) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 68) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 134) = 0;
  *((_QWORD *)this + 66) = 0;
  v4 = re::MeshShadowGenerationQueue::MeshShadowGenerationQueue((re::ShadowRenderManager *)((char *)this + 552));
  *((_QWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 94) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 190) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 96) = 0;
  *((_DWORD *)this + 198) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *(_OWORD *)((char *)this + 828) = 0u;
  *(_QWORD *)((char *)this + 844) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *((_QWORD *)this + 111) = 0;
  return this;
}

double re::WorldOrderedShadows::create@<D0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  _BYTE v34[44];
  uint64_t v35;
  __int128 v36;
  int v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45[12];

  v45[11] = *MEMORY[0x24BDAC8D0];
  memset(v34, 0, 36);
  *(_QWORD *)&v34[36] = 0x7FFFFFFFLL;
  v5 = *((_QWORD *)a1 + 2);
  if (v5)
  {
    v6 = 32 * v5;
    v7 = (uint64_t *)(*((_QWORD *)a1 + 4) + 8);
    do
    {
      v8 = *v7;
      v7 += 4;
      v45[0] = v8;
      v30 = 0;
      v4 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)v34, v45, &v30);
      ++*((_DWORD *)v4 + 1);
      v6 -= 32;
    }
    while (v6);
  }
  v9 = *(_DWORD *)&v34[32];
  if (*(_DWORD *)&v34[32])
  {
    v10 = 0;
    v11 = (int *)(*(_QWORD *)&v34[16] + 8);
    while (1)
    {
      v12 = *v11;
      v11 += 8;
      if (v12 < 0)
        break;
      if (*(unsigned int *)&v34[32] == ++v10)
      {
        LODWORD(v10) = *(_DWORD *)&v34[32];
        break;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (*(_DWORD *)&v34[32] == (_DWORD)v10)
  {
    v13 = 0;
  }
  else
  {
    LODWORD(v13) = 0;
    v14 = v10;
    v15 = *(_QWORD *)&v34[16];
    do
    {
      v16 = v15 + 32 * v14;
      v17 = *(_DWORD *)(v16 + 28);
      *(_DWORD *)(v16 + 24) = v13;
      *(_DWORD *)(v16 + 28) = 0;
      v13 = (v17 + v13);
      v15 = *(_QWORD *)&v34[16];
      if (v9 <= (int)v10 + 1)
        v18 = v10 + 1;
      else
        v18 = v9;
      v19 = v10;
      while (1)
      {
        v14 = (v19 + 1);
        if (v18 - 1 == v19)
          break;
        ++v19;
        LODWORD(v10) = v14;
        if ((*(_DWORD *)(*(_QWORD *)&v34[16] + 32 * v14 + 8) & 0x80000000) != 0)
          goto LABEL_21;
      }
      LODWORD(v10) = v18;
LABEL_21:
      ;
    }
    while (v9 != (_DWORD)v10);
  }
  v33 = 0;
  v31 = 0uLL;
  v32 = 0;
  re::DynamicArray<re::EvaluationRegister>::setCapacity(&v30, v13);
  ++v32;
  re::DynamicArray<re::AllocatedShadowHandle>::resizeUninitialized(&v30, v13);
  v20 = *((_QWORD *)a1 + 2);
  if (v20)
  {
    v21 = (uint64_t *)*((_QWORD *)a1 + 4);
    v22 = &v21[4 * v20];
    do
    {
      v24 = *v21;
      v23 = v21[1];
      v36 = *((_OWORD *)v21 + 1);
      v25 = (_DWORD *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v34, v23);
      v26 = (v25[1] + *v25);
      v27 = *((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1) <= v26)
      {
        v35 = 0;
        memset(v45, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v37 = 136315906;
        v38 = "operator[]";
        v39 = 1024;
        v40 = 789;
        v41 = 2048;
        v42 = v26;
        v43 = 2048;
        v44 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v28 = v33 + 32 * v26;
      *(_QWORD *)v28 = v24;
      *(_QWORD *)(v28 + 8) = v23;
      *(_QWORD *)(v28 + 16) = v36;
      *(_DWORD *)(v28 + 24) = DWORD2(v36);
      ++v25[1];
      v21 += 4;
    }
    while (v21 != v22);
  }
  *(_QWORD *)a2 = v30;
  *(_OWORD *)(a2 + 8) = v31;
  *(_QWORD *)(a2 + 32) = v33;
  *(_DWORD *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)v34;
  *(_OWORD *)v34 = 0uLL;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)&v34[16];
  *(_QWORD *)&v34[16] = 0;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v34[24];
  *(_OWORD *)&v34[24] = xmmword_2260F5A80;
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v34);
}

double re::WorldOrderedShadows::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t *v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  _BYTE v44[44];
  uint64_t v45;
  __int128 v46;
  int v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55[14];

  v55[11] = *MEMORY[0x24BDAC8D0];
  memset(v44, 0, 36);
  *(_QWORD *)&v44[36] = 0x7FFFFFFFLL;
  v5 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 18;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 != (_DWORD)v6)
  {
    v9 = v6;
    v10 = *(_QWORD *)(a1 + 16);
    do
    {
      v55[0] = *(_QWORD *)(v10 + 72 * v9 + 48);
      v40 = 0;
      v4 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)v44, v55, &v40);
      ++*((_DWORD *)v4 + 1);
      v10 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 32) <= (v6 + 1))
        v11 = v6 + 1;
      else
        v11 = *(_DWORD *)(a1 + 32);
      v12 = v6;
      while (1)
      {
        v9 = (v12 + 1);
        if (v11 - 1 == v12)
          break;
        ++v12;
        LODWORD(v6) = v9;
        if ((*(_DWORD *)(v10 + 72 * v9 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v6) = v11;
LABEL_17:
      ;
    }
    while ((_DWORD)v5 != (_DWORD)v6);
  }
  v13 = *(_DWORD *)&v44[32];
  if (*(_DWORD *)&v44[32])
  {
    v14 = 0;
    v15 = (int *)(*(_QWORD *)&v44[16] + 8);
    while (1)
    {
      v16 = *v15;
      v15 += 8;
      if (v16 < 0)
        break;
      if (*(unsigned int *)&v44[32] == ++v14)
      {
        LODWORD(v14) = *(_DWORD *)&v44[32];
        break;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if (*(_DWORD *)&v44[32] == (_DWORD)v14)
  {
    v17 = 0;
  }
  else
  {
    LODWORD(v17) = 0;
    v18 = v14;
    v19 = *(_QWORD *)&v44[16];
    do
    {
      v20 = v19 + 32 * v18;
      v21 = *(_DWORD *)(v20 + 28);
      *(_DWORD *)(v20 + 24) = v17;
      *(_DWORD *)(v20 + 28) = 0;
      v17 = (v21 + v17);
      v19 = *(_QWORD *)&v44[16];
      if (v13 <= (int)v14 + 1)
        v22 = v14 + 1;
      else
        v22 = v13;
      v23 = v14;
      while (1)
      {
        v18 = (v23 + 1);
        if (v22 - 1 == v23)
          break;
        ++v23;
        LODWORD(v14) = v18;
        if ((*(_DWORD *)(*(_QWORD *)&v44[16] + 32 * v18 + 8) & 0x80000000) != 0)
          goto LABEL_35;
      }
      LODWORD(v14) = v22;
LABEL_35:
      ;
    }
    while (v13 != (_DWORD)v14);
  }
  v43 = 0;
  v41 = 0uLL;
  v42 = 0;
  re::DynamicArray<re::EvaluationRegister>::setCapacity(&v40, v17);
  ++v42;
  re::DynamicArray<re::AllocatedShadowHandle>::resizeUninitialized(&v40, v17);
  v24 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v27 = *v26;
      v26 += 18;
      if (v27 < 0)
        break;
      if (v24 == ++v25)
      {
        LODWORD(v25) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v25) = 0;
  }
  if ((_DWORD)v24 != (_DWORD)v25)
  {
    v28 = v25;
    v29 = *(_QWORD *)(a1 + 16);
    do
    {
      v30 = v29 + 72 * v28;
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      v46 = *(_OWORD *)(v30 + 56);
      v33 = (_DWORD *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v44, v31);
      v34 = (v33[1] + *v33);
      v35 = *((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) <= v34)
      {
        v45 = 0;
        memset(v55, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v47 = 136315906;
        v48 = "operator[]";
        v49 = 1024;
        v50 = 789;
        v51 = 2048;
        v52 = v34;
        v53 = 2048;
        v54 = v35;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v36 = v43 + 32 * v34;
      *(_QWORD *)v36 = v32;
      *(_QWORD *)(v36 + 8) = v31;
      *(_QWORD *)(v36 + 16) = v46;
      *(_DWORD *)(v36 + 24) = DWORD2(v46);
      ++v33[1];
      v29 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 32) <= (v25 + 1))
        v37 = v25 + 1;
      else
        v37 = *(_DWORD *)(a1 + 32);
      while (1)
      {
        v28 = (v25 + 1);
        if (v37 - 1 == (_DWORD)v25)
          break;
        LODWORD(v25) = v25 + 1;
        v38 = v28;
        if ((*(_DWORD *)(v29 + 72 * v28 + 8) & 0x80000000) != 0)
          goto LABEL_52;
      }
      v38 = v37;
LABEL_52:
      LODWORD(v25) = v38;
    }
    while ((_DWORD)v24 != v38);
  }
  *(_QWORD *)a2 = v40;
  *(_OWORD *)(a2 + 8) = v41;
  *(_QWORD *)(a2 + 32) = v43;
  *(_DWORD *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)v44;
  *(_OWORD *)v44 = 0uLL;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)&v44[16];
  *(_QWORD *)&v44[16] = 0;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v44[24];
  *(_OWORD *)&v44[24] = xmmword_2260F5A80;
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v44);
}

void re::PersistentShadowState::consumeMeshShadowUpdate(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int32x4_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  NSObject *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  NSObject *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v72;
  unint64_t v73;
  _BOOL8 v74;
  _BOOL4 v75;
  NSObject *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  simd_float4 v90;
  uint64_t v91;
  _OWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  simd_float4 v96;
  int v97;
  BOOL v99;
  BOOL v100;
  __int128 v101;
  int v102;
  BOOL v103;
  BOOL v104;
  BOOL v105;
  __int128 v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  unint64_t v110;
  NSObject *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  int v137;
  int v138;
  _anonymous_namespace_ *v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  int v143;
  unint64_t v144;
  _anonymous_namespace_ *v145;
  uint64_t v146;
  int *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int *v169;
  int v170;
  int v171;
  __int128 v172;
  unsigned int v173;
  unsigned int v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  float v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  float32x4_t v184;
  uint64_t v185;
  float32x4_t *v186;
  BOOL v187;
  uint64_t v188;
  float32x4_t *v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  BOOL v194;
  float32x4_t v195;
  float32x4_t v196;
  float v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float v207;
  float v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  int32x4_t v212;
  float32x2_t v213;
  float32x2_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  int32x4_t v219;
  float32x2_t v220;
  float32x2_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x2_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  uint64_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  uint32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  uint64_t v238;
  float32x4_t v239;
  float v240;
  float v241;
  float v242;
  float32x4_t v243;
  uint64_t v244;
  float v245;
  float v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  uint64_t v251;
  simd_float4 v252;
  uint64_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float v258;
  float v259;
  float32x4_t v260;
  float32x4_t v261;
  uint64_t v262;
  int v263;
  unsigned int v264;
  unsigned int v265;
  float v266;
  simd_float4 v267;
  simd_float4 v268;
  simd_float4 v269;
  float v270;
  float v271;
  int32x2_t v272;
  float v273;
  float v274;
  float v275;
  float32x2_t v276;
  simd_float4 v277;
  uint64_t i;
  _OWORD *v279;
  float32x2_t v280;
  unsigned int v281;
  float v282;
  float v283;
  float v284;
  uint64_t v285;
  uint64_t v286;
  float32x2_t v287;
  float32x2_t v288;
  float32x2_t v289;
  int32x2_t v290;
  unsigned int v291;
  uint32x2_t v292;
  float32x2_t v293;
  float32x2_t v294;
  _BYTE *v295;
  float32x2_t v296;
  float32x2_t v297;
  uint32x2_t v298;
  float32x2_t v299;
  float32x2_t v300;
  int32x2_t v301;
  int32x2_t v302;
  __int128 v303;
  float32x4_t v304;
  int32x2_t v305;
  __int128 v306;
  uint64_t v307;
  uint32x2_t *v308;
  float32x4_t v309;
  float32x4_t v310;
  uint32x2_t v311;
  __int32 v312;
  __int32 v313;
  uint64_t v314;
  int32x2_t v315;
  float v316;
  float v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float v321;
  unint64_t v322;
  float32x4_t v323;
  uint64_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  uint64_t v328;
  uint64_t v329;
  simd_float4 v330;
  _BYTE *v331;
  uint64_t v332;
  _BYTE *v333;
  uint32x2_t v334;
  int v335;
  int v336;
  uint64_t v337;
  int32x2_t v338;
  float v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  unsigned __int32 v343;
  unint64_t v344;
  float32x4_t v345;
  uint64_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x2_t v350;
  __int32 v351;
  simd_float4 v352;
  simd_float4 v353;
  _BYTE *v354;
  float v355;
  unsigned int v356;
  uint64_t v357;
  float32x4_t v358;
  uint32x4_t v359;
  __int128 v361;
  uint64_t v362;
  float v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  unint64_t v367;
  uint64_t v368;
  float v369;
  float v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  __int32 v374;
  simd_float4 v375;
  float32x2_t *v376;
  uint32x2_t v377;
  float v378;
  float32x2_t v379;
  float32x2_t v380;
  int32x2_t v381;
  unint64_t v382;
  float v383;
  _BYTE *v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float32_t v390;
  float32x4_t v391;
  int32x2_t v392;
  int32x2_t v393;
  unint64_t v394;
  float32x4_t v395;
  simd_float4 v396;
  simd_float4 v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t v404;
  char **__ptr32 *v405;
  simd_float4 v406;
  unsigned __int8 v407;
  char **__ptr32 *v408;
  unint64_t v409;
  float32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  float32x2_t v413;
  float32x4_t v414;
  float32x4_t v415;
  unint64_t v416;
  simd_float4 v417;
  simd_float4 v418;
  simd_float4 v419;
  simd_float4 v420;
  float32x4_t v421;
  unint64_t v422;
  float32x4_t v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  unint64_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  float v432;
  float v433;
  int32x2_t v434;
  unsigned int v435;
  char v436;
  float v437;
  int32x2_t v438;
  int32x2_t v439;
  float32x4_t v440;
  unsigned __int8 v441;
  unint64_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  uint64_t v447;
  int32x2_t v448;
  float32x2_t v449;
  __int128 v450;
  __int128 v451;
  simd_float4 v452;
  unint64_t v453;
  simd_float4 v454;
  simd_float4 v455;
  __int128 v456;
  simd_float4 v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x2_t v462;
  float32x2_t v463;
  float32x2_t v464;
  float32x2_t v465;
  float32x2_t v466;
  float32x2_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t *v471;
  _QWORD *v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unsigned int v477;
  unsigned int v478;
  int v479;
  signed int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  __int128 *v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  unsigned __int8 *v493;
  int v494;
  int v495;
  int v496;
  uint64_t v497;
  __int16 v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  uint64_t v504;
  uint64_t v505;
  __int128 v506;
  _anonymous_namespace_ *v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  unint64_t v516;
  float32x2_t v517;
  uint64_t i64;
  uint64_t v519;
  unsigned __int8 *v520;
  uint64_t v521;
  simd_float4 v522;
  simd_float4 v523;
  float32x4_t v524;
  int32x4_t v525;
  simd_float4 v526;
  simd_float4 v527;
  simd_float4 v528;
  simd_float4 v529;
  float v530;
  float v531;
  __int128 *v532;
  int32x2_t v533;
  int32x2_t v534;
  int32x2_t v535;
  float v536;
  float v537;
  float v538;
  simd_float4 v539;
  simd_float4 v540;
  simd_float4 v541;
  unint64_t v542;
  uint64_t v543;
  simd_float4 v544;
  simd_float4 v545;
  simd_float4 v546;
  simd_float4 v547;
  simd_float4 v548;
  simd_float4 v549;
  float v550;
  float v551;
  int32x4_t *v552;
  float v553;
  float v554;
  uint64_t v555;
  simd_float4 v556;
  float v557;
  float v558;
  simd_float4 v559;
  int32x2_t v560;
  simd_float4 v561;
  float v562;
  simd_float4 v563;
  float v564;
  simd_float4 v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float v577;
  float32x4_t v578;
  int v579;
  simd_float4 v580;
  float32x4_t v581;
  simd_float4 v582;
  float32x4_t v583;
  simd_float4 v584;
  float32x4_t v585;
  simd_float4 v586;
  float32x4_t v587;
  float32x4_t *v588;
  float32x4_t v589;
  int32x4_t v590;
  _QWORD *v591;
  uint64_t v592;
  int32x4_t v593;
  int v594;
  __int128 v595;
  __int128 v596;
  unsigned int v597;
  uint64_t v598;
  uint64_t v599[2];
  uint64_t v600;
  unsigned int v601;
  _OWORD v602[2];
  int v603;
  uint64_t v604;
  __int128 v605;
  __int128 v606;
  int v607;
  uint64_t v608;
  unint64_t v609;
  unsigned __int8 v610;
  _BYTE v611[120];
  float32x4_t v612;
  _OWORD v613[2];
  float32x4_t v614;
  float32x4_t v615;
  __n128 buf[2];
  __int128 v617;
  int32x4_t v618;
  simd_float4 v619;
  int32x4_t v620;
  simd_float4 v621;
  simd_float4 v622;
  simd_float4 v623;
  simd_float4 v624;
  simd_float4 v625;
  __int128 v626;
  float32x2_t v627;
  float32x2_t v628;
  __int128 v629;
  _OWORD v630[58];
  float v631;
  simd_float4 v632;
  simd_float4 v633;
  simd_float4 v634;
  simd_float4 v635;
  float v636;
  int v637;
  float32x4_t v638;
  simd_float4 v639;
  simd_float4 v640;
  simd_float4 v641;
  simd_float4 v642;
  char v643;
  _OWORD v644[2];
  float32x4_t v645[17];
  float v646;
  float v647;
  float v648;
  float v649;
  simd_float4 v650;
  simd_float4 v651;
  simd_float4 v652;
  simd_float4 v653;
  float32x4_t v654;
  float v655;
  __int16 v656;
  int v657;
  simd_float4x4 v658;
  __int128 v659;
  float32x4_t v660;
  __int128 v661;
  __int128 v662;
  _BYTE __src[916];
  _BYTE v664[32];
  __int128 v665;
  __int128 v666;
  _BYTE v667[48];
  simd_float4 v668;
  uint64_t v669;
  simd_float4x4 v670;
  simd_float4x4 v671;
  simd_float4x4 v672;
  simd_float4x4 v673;
  simd_float4x4 v674;

  MEMORY[0x24BDAC7A8](a1);
  v515 = v3;
  v516 = v4;
  v552 = v5;
  v6 = v1;
  v514 = v7;
  v669 = *MEMORY[0x24BDAC8D0];
  v597 = 0;
  v595 = 0u;
  v596 = 0u;
  v598 = 0x7FFFFFFFLL;
  v588 = (float32x4_t *)v2;
  v8 = *(_QWORD *)(v2 + 304);
  if (v8)
  {
    v9 = *(unint64_t **)(v2 + 320);
    v10 = &v9[v8];
    do
    {
      v11 = *re::shadowLogObjects((re *)v1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *v9;
        buf[0].n128_u32[0] = 134217984;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v12;
        _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "PersistentShadowState: Removing cluster %llu", (uint8_t *)buf, 0xCu);
      }
      v1 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v6 + 128, *v9);
      if ((v1 & 1) != 0)
        goto LABEL_9;
      v13 = *re::shadowLogObjects((re *)v1);
      v1 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v1)
      {
        v18 = *v9;
        buf[0].n128_u32[0] = 134217984;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v18;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "PersistentShadowState: Got a removed cluster that has not been added %llu", (uint8_t *)buf, 0xCu);
      }
      if (!re::internal::shadows::g_allowMultipleShadowRemovals)
      {
LABEL_9:
        v14 = *(_QWORD *)(v6 + 192);
        if (v14)
        {
          v15 = *(unint64_t **)(v6 + 208);
          v16 = 16 * v14;
          do
          {
            buf[0].n128_u64[0] = *v9;
            buf[0].n128_u64[1] = *v15;
            v17 = *v15;
            v15 += 2;
            buf[1].n128_u8[0] = v17 != 0;
            v1 = re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add((uint64_t)&v595, (uint64_t)buf);
            v16 -= 16;
          }
          while (v16);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  v19 = v588;
  v20 = v588[6].i64[1];
  if (v20)
  {
    v21 = (unint64_t *)__src;
    v22 = (unint64_t *)v588[7].i64[1];
    v23 = &v22[v20];
    do
    {
      v24 = *re::shadowLogObjects((re *)v1);
      v1 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v1)
      {
        v25 = *v22;
        buf[0].n128_u32[0] = 134217984;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v25;
        _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "PersistentShadowState: Removing world %llu", (uint8_t *)buf, 0xCu);
      }
      v26 = *(_QWORD *)(v6 + 208);
      v27 = *(_QWORD *)(v6 + 192);
      if (v27)
      {
        v28 = 16 * v27;
        v29 = *(_QWORD *)(v6 + 208);
        while (*(_QWORD *)v29 != *v22 || *(_BYTE *)(v29 + 8) != (*v22 != 0))
        {
          v29 += 16;
          v28 -= 16;
          if (!v28)
          {
            v29 = v26 + 16 * v27;
            break;
          }
        }
      }
      else
      {
        v29 = *(_QWORD *)(v6 + 208);
      }
      if (v27 != (v29 - v26) >> 4)
        goto LABEL_28;
      v30 = *re::shadowLogObjects((re *)v1);
      v1 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v1)
      {
        v38 = *v22;
        buf[0].n128_u32[0] = 134217984;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v38;
        _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "PersistentShadowState: Got a removed world that has not been added %llu", (uint8_t *)buf, 0xCu);
      }
      if (!re::internal::shadows::g_allowMultipleShadowRemovals)
      {
LABEL_28:
        v31 = *(unsigned int *)(v6 + 160);
        if ((_DWORD)v31)
        {
          v32 = 0;
          v33 = (_DWORD *)(*(_QWORD *)(v6 + 144) + 8);
          while ((*v33 & 0x80000000) == 0)
          {
            v33 += 92;
            if (v31 == ++v32)
            {
              LODWORD(v32) = *(_DWORD *)(v6 + 160);
              break;
            }
          }
        }
        else
        {
          LODWORD(v32) = 0;
        }
        if ((_DWORD)v31 != (_DWORD)v32)
        {
          v34 = v32;
          v35 = *(_QWORD *)(v6 + 144);
          do
          {
            buf[0].n128_u64[0] = *(_QWORD *)(v35 + 368 * v34 + 16);
            buf[0].n128_u64[1] = *v22;
            buf[1].n128_u8[0] = *v22 != 0;
            v1 = re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add((uint64_t)&v595, (uint64_t)buf);
            v35 = *(_QWORD *)(v6 + 144);
            if (*(_DWORD *)(v6 + 160) <= (v32 + 1))
              v36 = v32 + 1;
            else
              v36 = *(_DWORD *)(v6 + 160);
            v37 = v32;
            while (1)
            {
              v34 = (v37 + 1);
              if (v36 - 1 == v37)
                break;
              ++v37;
              LODWORD(v32) = v34;
              if ((*(_DWORD *)(v35 + 368 * v34 + 8) & 0x80000000) != 0)
                goto LABEL_44;
            }
            LODWORD(v32) = v36;
LABEL_44:
            ;
          }
          while ((_DWORD)v31 != (_DWORD)v32);
        }
      }
      ++v22;
    }
    while (v22 != v23);
    v19 = v588;
    v39 = v588[6].i64[1];
    if (v39)
    {
      v40 = (_QWORD *)v588[7].i64[1];
      v41 = &v40[v39];
      v42 = *(_QWORD *)(v6 + 192);
      do
      {
        v43 = *(_QWORD *)(v6 + 208);
        v44 = v43 + 16 * v42;
        if (v42)
        {
          v45 = 16 * v42;
          v46 = *(_QWORD *)(v6 + 208);
          while (*(_QWORD *)v46 != *v40 || *(_BYTE *)(v46 + 8) != (*v40 != 0))
          {
            v46 += 16;
            v45 -= 16;
            if (!v45)
            {
              v46 = v43 + 16 * v42;
              break;
            }
          }
        }
        else
        {
          v46 = *(_QWORD *)(v6 + 208);
        }
        v47 = (v46 - v43) >> 4;
        if (v47 != v42)
        {
          if (v42 <= v47)
          {
            v658.columns[0].i64[0] = 0;
            v619 = 0u;
            v618 = 0u;
            v617 = 0u;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)__src = 136315906;
            *(_QWORD *)&__src[4] = "removeAt";
            *(_WORD *)&__src[12] = 1024;
            *(_DWORD *)&__src[14] = 931;
            *(_WORD *)&__src[18] = 2048;
            *(_QWORD *)&__src[20] = v47;
            *(_WORD *)&__src[28] = 2048;
            *(_QWORD *)&__src[30] = v42;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_437:
            v614.i64[0] = 0;
            v619 = 0u;
            v618 = 0u;
            v617 = 0u;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v667 = 136315906;
            *(_QWORD *)&v667[4] = "operator[]";
            *(_WORD *)&v667[12] = 1024;
            *(_DWORD *)&v667[14] = 789;
            *(_WORD *)&v667[18] = 2048;
            *(_QWORD *)&v667[20] = v21;
            *(_WORD *)&v667[28] = 2048;
            *(_QWORD *)&v667[30] = v23;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (--v42 > v47)
          {
            v48 = v43 + 16 * v47;
            v49 = *(_QWORD *)(v44 - 16);
            *(_BYTE *)(v48 + 8) = *(_BYTE *)(v44 - 8);
            *(_QWORD *)v48 = v49;
            v42 = *(_QWORD *)(v6 + 192) - 1;
          }
          *(_QWORD *)(v6 + 192) = v42;
          ++*(_DWORD *)(v6 + 200);
        }
        ++v40;
      }
      while (v40 != v41);
    }
  }
  v50 = v19[19].i64[0];
  if (v50)
  {
    v51 = (uint64_t *)v588[20].i64[0];
    v52 = &v51[v50];
    do
    {
      if (*(_QWORD *)(v6 + 128))
      {
        v53 = *v51;
        v54 = 0xBF58476D1CE4E5B9 * (*v51 ^ ((unint64_t)*v51 >> 30));
        v55 = ((0x94D049BB133111EBLL * (v54 ^ (v54 >> 27))) ^ ((0x94D049BB133111EBLL * (v54 ^ (v54 >> 27))) >> 31))
            % *(unsigned int *)(v6 + 152);
        v56 = *(_QWORD *)(v6 + 136);
        v57 = *(unsigned int *)(v56 + 4 * v55);
        if ((_DWORD)v57 != 0x7FFFFFFF)
        {
          v58 = *(_QWORD *)(v6 + 144);
          if (*(_QWORD *)(v58 + 368 * v57 + 16) == v53)
          {
            *(_DWORD *)(v56 + 4 * v55) = *(_DWORD *)(v58 + 368 * v57 + 8) & 0x7FFFFFFF;
LABEL_70:
            re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(*(_QWORD *)(v6 + 144) + 368 * v57);
            v60 = *(_QWORD *)(v6 + 144) + 368 * v57;
            *(_DWORD *)(v60 + 8) = *(_DWORD *)(v60 + 8) & 0x80000000 | *(_DWORD *)(v6 + 164);
            --*(_DWORD *)(v6 + 156);
            v61 = *(_DWORD *)(v6 + 168) + 1;
            *(_DWORD *)(v6 + 164) = v57;
            *(_DWORD *)(v6 + 168) = v61;
          }
          else
          {
            while (1)
            {
              v59 = v57;
              v57 = *(_DWORD *)(v58 + 368 * v57 + 8) & 0x7FFFFFFF;
              if (v57 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v58 + 368 * v57 + 16) == v53)
              {
                *(_DWORD *)(v58 + 368 * v59 + 8) = *(_DWORD *)(v58 + 368 * v59 + 8) & 0x80000000 | *(_DWORD *)(v58 + 368 * v57 + 8) & 0x7FFFFFFF;
                goto LABEL_70;
              }
            }
          }
        }
      }
      ++v51;
    }
    while (v51 != v52);
  }
  v62 = v597;
  if (v597)
  {
    v63 = 0;
    v64 = (int *)(v596 + 8);
    while (1)
    {
      v65 = *v64;
      v64 += 10;
      if (v65 < 0)
        break;
      if (v597 == ++v63)
      {
        LODWORD(v63) = v597;
        break;
      }
    }
  }
  else
  {
    LODWORD(v63) = 0;
  }
  if (v597 != (_DWORD)v63)
  {
    v149 = v63;
    v150 = v596;
    v151 = v6 + 80;
    do
    {
      v152 = (unint64_t *)(v150 + 40 * v149 + 16);
      v153 = re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::tryGet(v151, (uint64_t)v152);
      if (v153)
        goto LABEL_198;
      v163 = v62;
      v164 = *re::shadowLogObjects(0);
      if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
      {
        v175 = *v152;
        v176 = *(_QWORD *)(v150 + 40 * v149 + 24);
        buf[0].n128_u32[0] = 134218240;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v175;
        buf[0].n128_u16[6] = 2048;
        *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v176;
        _os_log_error_impl(&dword_224FE9000, v164, OS_LOG_TYPE_ERROR, "PersistentShadowState: Received a request to remove shadow that doesnt exist (%llu, %llu)", (uint8_t *)buf, 0x16u);
      }
      v62 = v163;
      v151 = v6 + 80;
      if (!re::internal::shadows::g_allowMultipleShadowRemovals)
      {
LABEL_198:
        re::ShadowTileManager::releaseTile((_QWORD *)v6, (unsigned __int16 *)(v153 + 24));
        v154 = re::Hash<re::ShadowPair>::operator()((uint64_t)buf, v152);
        if (*(_QWORD *)(v6 + 80))
        {
          v155 = v154 % *(unsigned int *)(v6 + 104);
          v156 = *(_QWORD *)(v6 + 88);
          v157 = *(unsigned int *)(v156 + 4 * v155);
          if ((_DWORD)v157 != 0x7FFFFFFF)
          {
            v158 = *(_QWORD *)(v6 + 96);
            v159 = v150 + 40 * v149;
            v160 = *(_QWORD *)(v159 + 24);
            v161 = *(unsigned __int8 *)(v159 + 32);
            v162 = 0x7FFFFFFFLL;
            while (*(_QWORD *)(v158 + 72 * v157 + 16) != *v152
                 || *(_QWORD *)(v158 + 72 * v157 + 24) != v160
                 || *(unsigned __int8 *)(v158 + 72 * v157 + 32) != v161)
            {
              v162 = v157;
              v157 = *(_DWORD *)(v158 + 72 * v157 + 8) & 0x7FFFFFFF;
              if (v157 == 0x7FFFFFFF)
                goto LABEL_216;
            }
            v165 = *(_DWORD *)(v158 + 72 * v157 + 8) & 0x7FFFFFFF;
            if (v162 == 0x7FFFFFFF)
              *(_DWORD *)(v156 + 4 * v155) = v165;
            else
              *(_DWORD *)(v158 + 72 * v162 + 8) = *(_DWORD *)(v158 + 72 * v162 + 8) & 0x80000000 | v165;
            v166 = *(_QWORD *)(v6 + 96);
            v167 = v166 + 72 * v157;
            v170 = *(_DWORD *)(v167 + 8);
            v169 = (int *)(v167 + 8);
            v168 = v170;
            if (v170 < 0)
            {
              *v169 = v168 & 0x7FFFFFFF;
              v166 = *(_QWORD *)(v6 + 96);
              v168 = *(_DWORD *)(v166 + 72 * v157 + 8);
            }
            *(_DWORD *)(v166 + 72 * v157 + 8) = *(_DWORD *)(v6 + 116) | v168 & 0x80000000;
            --*(_DWORD *)(v6 + 108);
            v171 = *(_DWORD *)(v6 + 120) + 1;
            *(_DWORD *)(v6 + 116) = v157;
            *(_DWORD *)(v6 + 120) = v171;
          }
        }
LABEL_216:
        v172 = *(_OWORD *)v152;
        *(_QWORD *)&__src[16] = *(_QWORD *)(v150 + 40 * v149 + 32);
        *(_OWORD *)__src = v172;
        re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::remove(v6 + 216, (uint64_t)__src);
        buf[0] = *(__n128 *)__src;
        buf[1].n128_u64[0] = *(_QWORD *)&__src[16];
        re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::remove(v6 + 312, (uint64_t)buf);
      }
      v150 = v596;
      if (v597 <= (int)v63 + 1)
        v173 = v63 + 1;
      else
        v173 = v597;
      while (1)
      {
        v149 = (v63 + 1);
        if (v173 - 1 == (_DWORD)v63)
          break;
        LODWORD(v63) = v63 + 1;
        v174 = v149;
        if ((*(_DWORD *)(v596 + 40 * v149 + 8) & 0x80000000) != 0)
          goto LABEL_224;
      }
      v174 = v173;
LABEL_224:
      LODWORD(v63) = v174;
    }
    while ((_DWORD)v62 != v174);
  }
  v66 = (uint64_t)re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v611);
  v67 = v588[9].i64[0];
  __asm { FMOV            V9.2S, #1.0 }
  if (v67)
  {
    v72 = v588[10].i64[0];
    v592 = v72 + 224 * v67;
    v590 = vdupq_n_s32(0x7F800000u);
    do
    {
      v73 = *(_QWORD *)(v72 + 192);
      *(_QWORD *)__src = v73;
      v74 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v6 + 128, v73);
      v75 = v74;
      if (!v74)
      {
        v76 = *re::shadowLogObjects((re *)v74);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].n128_u32[0] = 134217984;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v73;
          _os_log_impl(&dword_224FE9000, v76, OS_LOG_TYPE_DEFAULT, "PersistentShadowState: Inserting cluster %llu", (uint8_t *)buf, 0xCu);
        }
      }
      v77 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v6 + 128, v73);
      if (!v77)
      {
        memset(v630, 0, 112);
        v629 = 0u;
        v627 = 0;
        v617 = 0u;
        memset(buf, 0, sizeof(buf));
        v618 = v590;
        v90.i64[0] = 0x7F0000007FLL;
        v90.i64[1] = 0x7F0000007FLL;
        v619 = v90;
        v620 = v590;
        v621 = v90;
        v622 = 0u;
        v623 = 0u;
        v624 = 0u;
        v625 = 0u;
        v626 = 0u;
        v628 = _D9;
        v77 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v6 + 128, (uint64_t *)__src, (uint64_t)buf);
        if (buf[0].n128_u64[0])
        {
          if ((_QWORD)v617)
            (*(void (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
        }
      }
      v66 = re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v77, v72);
      v79 = *(_OWORD *)(v72 + 64);
      v78 = *(_OWORD *)(v72 + 80);
      *(_OWORD *)(v77 + 48) = *(_OWORD *)(v72 + 48);
      *(_OWORD *)(v77 + 64) = v79;
      *(_OWORD *)(v77 + 80) = v78;
      v80 = *(_OWORD *)(v72 + 144);
      v82 = *(_OWORD *)(v72 + 96);
      v81 = *(_OWORD *)(v72 + 112);
      *(_OWORD *)(v77 + 128) = *(_OWORD *)(v72 + 128);
      *(_OWORD *)(v77 + 144) = v80;
      *(_OWORD *)(v77 + 96) = v82;
      *(_OWORD *)(v77 + 112) = v81;
      v84 = *(_OWORD *)(v72 + 176);
      v83 = *(_OWORD *)(v72 + 192);
      v85 = *(_OWORD *)(v72 + 160);
      *(_QWORD *)(v77 + 208) = *(_QWORD *)(v72 + 208);
      *(_OWORD *)(v77 + 176) = v84;
      *(_OWORD *)(v77 + 192) = v83;
      *(_OWORD *)(v77 + 160) = v85;
      v86 = *(_QWORD *)(v6 + 192);
      if (v86)
      {
        v87 = !v75;
        v88 = *(_QWORD *)(v6 + 208);
        v89 = 16 * v86;
        do
        {
          v609 = *(_QWORD *)v88;
          v610 = *(_BYTE *)(v88 + 8);
          buf[0].n128_u64[0] = v73;
          buf[0].n128_u64[1] = v609;
          buf[1].n128_u8[0] = v610;
          v66 = re::MeshShadowGenerationQueue::enqueue(v6 + 216, buf, v87);
          v88 += 16;
          v89 -= 16;
        }
        while (v89);
      }
      v72 += 224;
    }
    while (v72 != v592);
  }
  v91 = v588[11].i64[1];
  if (v91)
  {
    v92 = (_OWORD *)(v588[12].i64[1] + 80);
    v93 = 112 * v91;
    v593 = vdupq_n_s32(0x7F800000u);
    do
    {
      v94 = *((_QWORD *)v92 - 10);
      *(_QWORD *)__src = v94;
      v66 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v6 + 128, v94);
      if (v66)
      {
        v95 = v66;
      }
      else
      {
        memset(v630, 0, 112);
        v629 = 0u;
        v627 = 0;
        v617 = 0u;
        memset(buf, 0, sizeof(buf));
        v618 = v593;
        v96.i64[0] = 0x7F0000007FLL;
        v96.i64[1] = 0x7F0000007FLL;
        v619 = v96;
        v620 = v593;
        v621 = v96;
        v622 = 0u;
        v623 = 0u;
        v624 = 0u;
        v625 = 0u;
        v626 = 0u;
        v628 = _D9;
        v95 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v6 + 128, (uint64_t *)__src, (uint64_t)buf);
        v66 = buf[0].n128_u64[0];
        if (buf[0].n128_u64[0] && (_QWORD)v617)
          v66 = (*(uint64_t (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
        v94 = *((_QWORD *)v92 - 10);
      }
      *(_QWORD *)(v95 + 224) = v94;
      v97 = *((unsigned __int8 *)v92 - 64);
      if (*(_BYTE *)(v95 + 240))
        _ZF = 0;
      else
        _ZF = v97 == 0;
      if (!_ZF)
      {
        if (*(_BYTE *)(v95 + 240))
          v99 = v97 == 0;
        else
          v99 = 0;
        if (v99)
        {
          *(_BYTE *)(v95 + 240) = 0;
        }
        else
        {
          if (*(_BYTE *)(v95 + 240))
            v100 = 1;
          else
            v100 = v97 == 0;
          if (!v100)
            *(_BYTE *)(v95 + 240) = 1;
          v101 = *(v92 - 2);
          *(_OWORD *)(v95 + 256) = *(v92 - 3);
          *(_OWORD *)(v95 + 272) = v101;
        }
      }
      v102 = *((unsigned __int8 *)v92 - 16);
      if (*(_BYTE *)(v95 + 288))
        v103 = 0;
      else
        v103 = v102 == 0;
      if (!v103)
      {
        if (*(_BYTE *)(v95 + 288))
          v104 = v102 == 0;
        else
          v104 = 0;
        if (v104)
        {
          *(_BYTE *)(v95 + 288) = 0;
        }
        else
        {
          if (*(_BYTE *)(v95 + 288))
            v105 = 1;
          else
            v105 = v102 == 0;
          if (!v105)
            *(_BYTE *)(v95 + 288) = 1;
          v106 = v92[1];
          *(_OWORD *)(v95 + 304) = *v92;
          *(_OWORD *)(v95 + 320) = v106;
        }
      }
      v92 += 7;
      v93 -= 112;
    }
    while (v93);
  }
  v107 = v588[1].i64[1];
  if (v107)
  {
    v108 = (unint64_t *)v588[2].i64[1];
    v109 = &v108[v107];
    do
    {
      v110 = *v108;
      v111 = *re::shadowLogObjects((re *)v66);
      v66 = os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v66)
      {
        buf[0].n128_u32[0] = 134217984;
        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v110;
        _os_log_impl(&dword_224FE9000, v111, OS_LOG_TYPE_DEFAULT, "PersistentShadowState: Adding world %llu", (uint8_t *)buf, 0xCu);
      }
      v112 = *(_QWORD *)(v6 + 184);
      v113 = *(_QWORD *)(v6 + 192);
      if (v113 >= v112)
      {
        v114 = v113 + 1;
        if (v112 < v113 + 1)
        {
          if (*(_QWORD *)(v6 + 176))
          {
            v115 = 2 * v112;
            _ZF = v112 == 0;
            v116 = 8;
            if (!_ZF)
              v116 = v115;
            if (v116 <= v114)
              v117 = v114;
            else
              v117 = v116;
            v66 = (uint64_t)re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v6 + 176), v117);
          }
          else
          {
            v66 = (uint64_t)re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v6 + 176), v114);
            ++*(_DWORD *)(v6 + 200);
          }
        }
        v113 = *(_QWORD *)(v6 + 192);
      }
      v118 = *(_QWORD *)(v6 + 208) + 16 * v113;
      *(_QWORD *)v118 = v110;
      *(_BYTE *)(v118 + 8) = v110 != 0;
      ++*(_QWORD *)(v6 + 192);
      ++*(_DWORD *)(v6 + 200);
      v119 = *(unsigned int *)(v6 + 160);
      if ((_DWORD)v119)
      {
        v120 = 0;
        v121 = (_DWORD *)(*(_QWORD *)(v6 + 144) + 8);
        while ((*v121 & 0x80000000) == 0)
        {
          v121 += 92;
          if (v119 == ++v120)
          {
            LODWORD(v120) = *(_DWORD *)(v6 + 160);
            break;
          }
        }
      }
      else
      {
        LODWORD(v120) = 0;
      }
      if ((_DWORD)v119 != (_DWORD)v120)
      {
        v122 = v120;
        v123 = *(_QWORD *)(v6 + 144);
        do
        {
          buf[0].n128_u64[0] = *(_QWORD *)(v123 + 368 * v122 + 16);
          buf[0].n128_u64[1] = v110;
          buf[1].n128_u8[0] = v110 != 0;
          v66 = re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(v6 + 216, (uint64_t)buf);
          v123 = *(_QWORD *)(v6 + 144);
          if (*(_DWORD *)(v6 + 160) <= (v120 + 1))
            v124 = v120 + 1;
          else
            v124 = *(_DWORD *)(v6 + 160);
          v125 = v120;
          while (1)
          {
            v122 = (v125 + 1);
            if (v124 - 1 == v125)
              break;
            ++v125;
            LODWORD(v120) = v122;
            if ((*(_DWORD *)(v123 + 368 * v122 + 8) & 0x80000000) != 0)
              goto LABEL_163;
          }
          LODWORD(v120) = v124;
LABEL_163:
          ;
        }
        while ((_DWORD)v119 != (_DWORD)v120);
      }
      ++v108;
    }
    while (v108 != v109);
  }
  v126 = v588[4].i64[0];
  if (v126)
  {
    v127 = (unint64_t *)v588[5].i64[0];
    v128 = &v127[v126];
    v129 = *(unsigned int *)(v6 + 160);
    do
    {
      v130 = 0;
      if ((_DWORD)v129)
      {
        v131 = (_DWORD *)(*(_QWORD *)(v6 + 144) + 8);
        while ((*v131 & 0x80000000) == 0)
        {
          v131 += 92;
          if (v129 == ++v130)
          {
            LODWORD(v130) = v129;
            break;
          }
        }
      }
      if ((_DWORD)v129 == (_DWORD)v130)
      {
        v132 = v129;
      }
      else
      {
        v133 = *v127;
        v134 = v130;
        v135 = *v127 != 0;
        v136 = *(_QWORD *)(v6 + 144);
        do
        {
          buf[0].n128_u64[0] = *(_QWORD *)(v136 + 368 * v134 + 16);
          buf[0].n128_u64[1] = v133;
          buf[1].n128_u8[0] = v135;
          v66 = re::MeshShadowGenerationBacklog::pushBack((_anonymous_namespace_ *)(v6 + 264), buf);
          v132 = *(unsigned int *)(v6 + 160);
          v136 = *(_QWORD *)(v6 + 144);
          if (v132 <= (int)v130 + 1)
            v137 = v130 + 1;
          else
            v137 = *(_DWORD *)(v6 + 160);
          v138 = v130;
          while (1)
          {
            v134 = (v138 + 1);
            if (v137 - 1 == v138)
              break;
            ++v138;
            LODWORD(v130) = v134;
            if ((*(_DWORD *)(v136 + 368 * v134 + 8) & 0x80000000) != 0)
              goto LABEL_183;
          }
          LODWORD(v130) = v137;
LABEL_183:
          ;
        }
        while ((_DWORD)v129 != (_DWORD)v130);
      }
      ++v127;
      v129 = v132;
    }
    while (v127 != v128);
  }
  v607 = 0;
  v606 = 0u;
  v605 = 0u;
  v608 = 0x7FFFFFFFLL;
  v603 = 0;
  memset(v602, 0, sizeof(v602));
  v604 = 0x7FFFFFFFLL;
  re::MeshShadowGenerationQueue::getEnqueued((re::MeshShadowGenerationQueue *)(v6 + 216), (uint64_t)v599);
  v140 = v601;
  v513 = v6 + 216;
  v141 = 0;
  if (v601)
  {
    v142 = (int *)(v600 + 8);
    while (1)
    {
      v143 = *v142;
      v142 += 10;
      if (v143 < 0)
        break;
      if (v601 == ++v141)
      {
        LODWORD(v141) = v601;
        break;
      }
    }
  }
  if (v601 != (_DWORD)v141)
  {
    v177 = v141;
    v543 = v6 + 128;
    i64 = (uint64_t)v552[4].i64;
    v178 = 0.5;
    v179 = v600;
    v519 = v601;
    v517 = _D9;
    v542 = v6;
    do
    {
      v180 = v140;
      v181 = (uint64_t *)(v179 + 40 * v177 + 16);
      v182 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v543, v181);
      v183 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v543, v181);
      v185 = v182;
      if (v183)
        v186 = (float32x4_t *)(v183 + 224);
      else
        v186 = 0;
      if (v185)
        v187 = v183 == 0;
      else
        v187 = 1;
      if (v187)
      {
        re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add((uint64_t)v602, (uint64_t)v181);
        v140 = v180;
        v6 = v542;
        goto LABEL_360;
      }
      v532 = (__int128 *)(v179 + 40 * v177 + 16);
      v188 = v179 + 40 * v177;
      v579 = *(unsigned __int8 *)(v188 + 32);
      v520 = (unsigned __int8 *)(v188 + 32);
      v521 = v179;
      v189 = (float32x4_t *)(v185 + 128);
      v184.i64[0] = *(_QWORD *)(v185 + 128);
      v190 = *(float32x4_t *)(v185 + 144);
      v191 = *(float32x4_t *)(v185 + 160);
      v192 = v184;
      v192.i32[2] = *(_DWORD *)(v185 + 136);
      v193 = vmulq_f32(v192, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v191, (int8x16_t)v191, 0xCuLL), (int8x16_t)v191, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v190, (int32x4_t)v190), (int8x16_t)v190, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v191, (int32x4_t)v191), (int8x16_t)v191, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v190, (int8x16_t)v190, 0xCuLL), (int8x16_t)v190, 8uLL)));
      v194 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v193, 2), vaddq_f32(v193, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v193.f32, 1))).f32[0] <= 0.0;
      v195 = vmulq_f32(v192, v192);
      v196 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v195.f32, 1);
      v197 = -1.0;
      if (!v194)
        v197 = 1.0;
      v198 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v195, 2), vaddq_f32(v195, v196));
      v198.f32[0] = sqrtf(v198.f32[0]);
      v199 = vmulq_f32(v190, v190);
      v200 = vmulq_f32(v191, v191);
      v198.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v199, 2), vaddq_f32(v199, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v199.f32, 1))).f32[0]);
      v198.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v200, 2), vaddq_f32(v200, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v200.f32, 1))).f32[0]);
      v201 = vmulq_n_f32(v198, v197);
      v202 = vmulq_f32(v201, v201);
      v555 = v185;
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v202, 2), vaddq_f32(v202, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v202.f32, 1))).f32[0]) >= 1.0e-10)
      {
        v589 = v588[33];
        v209 = vabsq_f32(v589);
        v6 = v542;
        if (fmaxf(fmaxf(v209.f32[0], v209.f32[2]), v209.f32[1]) == v209.f32[1])
        {
          v184.i32[2] = *(_DWORD *)(v185 + 136);
          v210 = vaddq_f32(vmlaq_f32(vmulq_f32(v184, (float32x4_t)0), (float32x4_t)0, v190), v191);
        }
        else
        {
          v210 = (float32x4_t)xmmword_2260E5F20;
        }
        v211 = vsubq_f32((float32x4_t)0, v589);
        v212 = (int32x4_t)vmulq_f32(v211, v211);
        v212.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v212, 2), vadd_f32(*(float32x2_t *)v212.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v212.i8, 1))).u32[0];
        v213 = vrsqrte_f32((float32x2_t)v212.u32[0]);
        v214 = vmul_f32(v213, vrsqrts_f32((float32x2_t)v212.u32[0], vmul_f32(v213, v213)));
        v215 = vmulq_n_f32(v211, vmul_f32(v214, vrsqrts_f32((float32x2_t)v212.u32[0], vmul_f32(v214, v214))).f32[0]);
        v216 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v215, (int32x4_t)v215), (int8x16_t)v215, 0xCuLL);
        v217 = vmlaq_f32(vmulq_f32(v216, vnegq_f32(v210)), v215, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v210, (int32x4_t)v210), (int8x16_t)v210, 0xCuLL));
        v218 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v217, (int32x4_t)v217), (int8x16_t)v217, 0xCuLL);
        v219 = (int32x4_t)vmulq_f32(v217, v217);
        v219.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v219.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v219, 2), *(float32x2_t *)v219.i8)).u32[0];
        v220 = vrsqrte_f32((float32x2_t)v219.u32[0]);
        v221 = vmul_f32(v220, vrsqrts_f32((float32x2_t)v219.u32[0], vmul_f32(v220, v220)));
        v222 = vmulq_n_f32(v218, vmul_f32(v221, vrsqrts_f32((float32x2_t)v219.u32[0], vmul_f32(v221, v221))).f32[0]);
        v223 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v222, (int32x4_t)v222), (int8x16_t)v222, 0xCuLL), vnegq_f32(v215)), v222, v216);
        v224 = vmulq_f32(v222, (float32x4_t)0);
        v225 = vmulq_f32(v223, (float32x4_t)0);
        v226 = (float32x2_t)vext_s8(*(int8x8_t *)v224.f32, *(int8x8_t *)v225.f32, 4uLL);
        v225.i32[0] = v224.i32[2];
        *(float32x2_t *)v224.f32 = vadd_f32(*(float32x2_t *)v225.f32, vadd_f32((float32x2_t)__PAIR64__(v225.u32[2], v224.u32[0]), v226));
        v227 = vmulq_f32(v215, (float32x4_t)0);
        v228.i64[0] = __PAIR64__(v223.u32[0], v222.u32[1]);
        v229.i64[0] = __PAIR64__(v223.u32[1], v222.u32[2]);
        v222.i32[1] = v223.i32[2];
        v222.i64[1] = v215.u32[0];
        v228.i64[1] = v215.u32[1];
        v229.i64[1] = v215.u32[2];
        v223.i64[0] = vnegq_f32(v224).u64[0];
        v223.f32[2] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v227, 2), vaddq_f32(v227, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v227.f32, 1))).f32[0];
        v223.i32[3] = 1.0;
        v583 = v222;
        v585 = v229;
        *(float32x4_t *)v667 = v222;
        *(float32x4_t *)&v667[16] = v228;
        v587 = v228;
        *(float32x4_t *)&v667[32] = v229;
        v668 = (simd_float4)v223;
        v581 = v223;
        v230 = v185 + 48;
        re::AABB::transform((float32x4_t *)(v185 + 48), (float32x4_t *)(v185 + 128), (uint64_t)v664);
        v571 = *(float32x4_t *)v664;
        v573 = *(float32x4_t *)&v664[16];
        v231 = vsubq_f32(*(float32x4_t *)&v664[16], *(float32x4_t *)v664);
        v231.i32[3] = 0;
        v232 = vmaxnmq_f32(v231, (float32x4_t)0);
        v233.i64[0] = 0xBF000000BF000000;
        v233.i64[1] = 0xBF000000BF000000;
        v234.i64[0] = 0x3F0000003F000000;
        v234.i64[1] = 0x3F0000003F000000;
        v614 = vmulq_f32(v232, v233);
        v615 = vmulq_f32(v232, v234);
        re::AABB::transform(&v614, (float32x4_t *)v667, (uint64_t)v613);
        v575 = (float32x4_t)v613[0];
        v578 = (float32x4_t)v613[1];
        re::BoundingSphere::BoundingSphere(&v612, v230, v189);
        v235 = (uint32x4_t)vcgtq_f32(v571, v573);
        v235.i32[3] = v235.i32[2];
        v236 = 0uLL;
        if ((vmaxvq_u32(v235) & 0x80000000) == 0)
        {
          v237.i64[0] = 0x3F0000003F000000;
          v237.i64[1] = 0x3F0000003F000000;
          v236 = vmulq_f32(vaddq_f32(v573, v571), v237);
        }
        v238 = 0;
        v239 = vsubq_f32(v578, v575);
        v239.i32[3] = 0;
        v240 = v612.f32[3];
        v241 = vmuls_lane_f32(v178, vmaxnmq_f32(v239, (float32x4_t)0), 2);
        v242 = v612.f32[3] + (float)(v612.f32[3] - v241);
        v243 = vnegq_f32(vsubq_f32(v236, vmulq_n_f32(v589, v242)));
        v243.i32[3] = 1.0;
        v658.columns[0] = (simd_float4)xmmword_2260E5F10;
        v658.columns[1] = (simd_float4)xmmword_2260E5F20;
        v658.columns[2] = (simd_float4)xmmword_2260E5F40;
        v658.columns[3] = (simd_float4)v243;
        do
        {
          *(float32x4_t *)&__src[v238 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v583, COERCE_FLOAT(*(_OWORD *)&v658.columns[v238])), v587, *(float32x2_t *)v658.columns[v238].f32, 1), v585, (float32x4_t)v658.columns[v238], 2), v581, (float32x4_t)v658.columns[v238], 3);
          ++v238;
        }
        while (v238 != 4);
        v244 = 0;
        v245 = v240 + v240;
        v208 = v245 * 1.001;
        v246 = v245 / v588[27].f32[1];
        if ((float)((float)(v588[27].f32[2] / 10.0) * 256.0) >= v246)
          v207 = (float)(v588[27].f32[2] / 10.0) * 256.0;
        else
          v207 = v246;
        v247.i32[1] = 0;
        v247.i64[1] = 0;
        v247.f32[0] = 2.0 / v207;
        v248.i32[0] = 0;
        v248.i64[1] = 0;
        v248.f32[1] = 2.0 / v207;
        v249.i64[0] = 0;
        v249.i32[3] = 0;
        v249.f32[2] = 1.0 / (float)(0.0 - v208);
        v250.i64[0] = 0;
        v250.f32[2] = 0.0 / (float)(0.0 - v208);
        v250.i32[3] = 1.0;
        v584 = *(simd_float4 *)&__src[16];
        v586 = *(simd_float4 *)__src;
        v658 = *(simd_float4x4 *)__src;
        v580 = *(simd_float4 *)&__src[48];
        v582 = *(simd_float4 *)&__src[32];
        v185 = v555;
        do
        {
          *(float32x4_t *)&__src[v244 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v247, COERCE_FLOAT(*(_OWORD *)&v658.columns[v244])), v248, *(float32x2_t *)v658.columns[v244].f32, 1), v249, (float32x4_t)v658.columns[v244], 2), v250, (float32x4_t)v658.columns[v244], 3);
          ++v244;
        }
        while (v244 != 4);
        v251 = 0;
        v203 = *(float32x4_t *)__src;
        v204 = *(float32x4_t *)&__src[16];
        v577 = fmaxf(v207 * 10.0, 10.0) / v207;
        v252.i64[0] = 0;
        v252.i32[3] = 0;
        v252.f32[2] = 1.0 / v577;
        v205 = *(float32x4_t *)&__src[32];
        v206 = *(float32x4_t *)&__src[48];
        v658.columns[0] = (simd_float4)xmmword_2260E5F10;
        v658.columns[1] = (simd_float4)xmmword_2260E5F20;
        v658.columns[2] = v252;
        v658.columns[3] = (simd_float4)xmmword_2260E5D70;
        do
        {
          *(float32x4_t *)&__src[v251 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v247, COERCE_FLOAT(*(_OWORD *)&v658.columns[v251])), v248, *(float32x2_t *)v658.columns[v251].f32, 1), v249, (float32x4_t)v658.columns[v251], 2), v250, (float32x4_t)v658.columns[v251], 3);
          ++v251;
        }
        while (v251 != 4);
        v253 = 0;
        v254 = *(float32x4_t *)__src;
        v255 = *(float32x4_t *)&__src[16];
        v256 = *(float32x4_t *)&__src[32];
        v257 = *(float32x4_t *)&__src[48];
        v658.columns[0] = v586;
        v658.columns[1] = v584;
        v658.columns[2] = v582;
        v658.columns[3] = v580;
        do
        {
          *(float32x4_t *)&__src[v253 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v254, COERCE_FLOAT(*(_OWORD *)&v658.columns[v253])), v255, *(float32x2_t *)v658.columns[v253].f32, 1), v256, (float32x4_t)v658.columns[v253], 2), v257, (float32x4_t)v658.columns[v253], 3);
          ++v253;
        }
        while (v253 != 4);
        v568 = *(float32x4_t *)&__src[16];
        v569 = *(float32x4_t *)__src;
        v566 = *(float32x4_t *)&__src[48];
        v567 = *(float32x4_t *)&__src[32];
        v531 = (float)(v242 - v241) / (float)(v577 * v208);
      }
      else
      {
        v577 = 0.0;
        v203 = 0uLL;
        v204 = 0uLL;
        v205 = 0uLL;
        v206 = 0uLL;
        v568 = 0u;
        v569 = 0u;
        v566 = 0u;
        v567 = 0u;
        v584 = 0u;
        v586 = 0u;
        v580 = 0u;
        v582 = 0u;
        v589 = 0u;
        v207 = 0.0;
        v208 = 0.0;
        v531 = 0.0;
        v6 = v542;
      }
      v574 = v204;
      v576 = v203;
      v570 = v206;
      v572 = v205;
      v553 = v207;
      if (v579)
      {
        v258 = NAN;
        v538 = NAN;
        v259 = INFINITY;
        if (!re::internal::shadows::g_enableMeshDepthFallbackWhenFlattening)
          v259 = NAN;
        v554 = v259;
      }
      else
      {
        v670.columns[1] = v584;
        v670.columns[0] = v586;
        v670.columns[3] = v580;
        v670.columns[2] = v582;
        v671 = __invert_f4(v670);
        if (v186[1].i8[0])
        {
          v260 = vmulq_f32(vsubq_f32((float32x4_t)v671.columns[3], v186[3]), v186[2]);
          v258 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v260, 2), vaddq_f32(v260, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.f32, 1))).f32[0]);
        }
        else
        {
          v258 = NAN;
        }
        v204 = v574;
        v203 = v576;
        v206 = v570;
        v205 = v572;
        v185 = v555;
        if (v186[4].i8[0])
        {
          v261 = vmulq_f32(vsubq_f32((float32x4_t)v671.columns[3], v186[6]), v186[5]);
          v538 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v261, 2), vaddq_f32(v261, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v261.f32, 1))).f32[0]);
        }
        else
        {
          v538 = NAN;
        }
        v554 = v258;
      }
      v262 = 0;
      v263 = re::internal::shadows::g_enableAbsoluteSpace;
      v564 = v588[28].f32[1];
      v537 = v588[28].f32[0];
      v536 = v588[28].f32[2];
      v264 = v588[26].u32[2];
      v265 = v588[26].u32[1];
      v266 = v588[26].f32[0];
      v267 = *(simd_float4 *)(v185 + 144);
      v268 = *(simd_float4 *)(v185 + 160);
      v269 = *(simd_float4 *)(v185 + 176);
      v658.columns[0] = *(simd_float4 *)(v185 + 128);
      v658.columns[1] = v267;
      v658.columns[2] = v268;
      v658.columns[3] = v269;
      do
      {
        *(float32x4_t *)&__src[v262 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v203, COERCE_FLOAT(*(_OWORD *)&v658.columns[v262])), v204, *(float32x2_t *)v658.columns[v262].f32, 1), v205, (float32x4_t)v658.columns[v262], 2), v206, (float32x4_t)v658.columns[v262], 3);
        ++v262;
      }
      while (v262 != 4);
      v270 = (float)v265;
      *(_OWORD *)v664 = *(_OWORD *)__src;
      *(_OWORD *)&v664[16] = *(_OWORD *)&__src[16];
      v271 = (float)(v266 * 3.0) * (float)(v270 / v270);
      v665 = *(_OWORD *)&__src[32];
      v666 = *(_OWORD *)&__src[48];
      re::AABB::transform((float32x4_t *)(v185 + 48), (float32x4_t *)v664, (uint64_t)&v614);
      *(float *)v272.i32 = (float)(v264 >> 1);
      v273 = v270;
      v274 = v614.f32[1];
      v558 = v270 * 0.5;
      v560 = v272;
      v275 = *(float *)v272.i32 + (float)(v614.f32[0] * (float)(v270 * 0.5));
      v276 = *(float32x2_t *)v615.f32;
      v562 = v275;
      v550 = v275 + 0.5;
      bzero(__src, 0x3A0uLL);
      for (i = 0; i != 896; i += 224)
      {
        v279 = &__src[i];
        v279[6] = 0uLL;
        v279[7] = 0uLL;
        v279[4] = 0uLL;
        v279[5] = 0uLL;
        v279[2] = 0uLL;
        v279[3] = 0uLL;
        v279[10] = 0uLL;
        v279[11] = 0uLL;
        v279[12] = 0uLL;
        v279[13] = 0uLL;
      }
      v280 = vmla_n_f32((float32x2_t)vdup_lane_s32(v560, 0), v276, v558);
      v281 = vcvtps_u32_f32(v271 * 2.4477);
      v282 = *(float *)v560.i32 + (float)(v274 * v558);
      v283 = v208;
      if (v263)
        v284 = v208;
      else
        v284 = 1.0;
      *(_QWORD *)&__src[896] = __PAIR64__(v281, LODWORD(v271));
      v557 = v284;
      *(_QWORD *)&__src[904] = __PAIR64__(LODWORD(v577), LODWORD(v284));
      v530 = v258 / v208;
      *(float *)&__src[912] = v258 / v208;
      v285 = v588[27].u32[0];
      if ((_DWORD)v285)
      {
        v286 = 0;
        v178 = 0.5;
        v287.f32[0] = v550;
        v287.f32[1] = v282 + 0.5;
        v288 = vcvt_f32_u32(vcvt_u32_f32(v287));
        v289 = vcvt_f32_u32(vcvt_u32_f32(vadd_f32(v280, (float32x2_t)0xBF000000BF000000)));
        v290 = vdup_n_s32(v281);
        v291 = v588[26].u32[3];
        v292 = (uint32x2_t)vdup_n_s32(v291);
        do
        {
          v293 = v288;
          v294 = v289;
          if (v286)
          {
            v295 = &__src[224 * v286];
            v293 = vmul_f32(vcvt_f32_u32(*(uint32x2_t *)(v295 - 224)), (float32x2_t)0x3F0000003F000000);
            v294 = vmul_f32(vcvt_f32_u32(*(uint32x2_t *)(v295 - 216)), (float32x2_t)0x3F0000003F000000);
          }
          v296 = vsub_f32(v294, v293);
          v297 = vadd_f32(v293, v294);
          v298 = vmax_u32(v292, vcvt_u32_f32(vadd_f32(v296, v517)));
          v299 = vmul_f32(v297, (float32x2_t)0x3F0000003F000000);
          v300 = vmul_f32(vcvt_f32_u32(v298), (float32x2_t)0x3F0000003F000000);
          v301 = (int32x2_t)vcvt_u32_f32(vadd_f32(vsub_f32(v299, v300), (float32x2_t)0x3F0000003F000000));
          v302 = (int32x2_t)vcvt_u32_f32(vadd_f32(vadd_f32(v299, v300), (float32x2_t)0xBF000000BF000000));
          *(int32x2_t *)&v303 = v301;
          *((int32x2_t *)&v303 + 1) = v302;
          *(_OWORD *)&__src[224 * v286] = v303;
          *(int32x2_t *)v304.f32 = vsub_s32(v301, v290);
          v305 = vadd_s32(v290, v302);
          *(_QWORD *)&v306 = v304.i64[0];
          *((int32x2_t *)&v306 + 1) = v305;
          *(_OWORD *)&__src[224 * v286 + 16] = v306;
          if (v286)
          {
            v307 = 0;
            v308 = (uint32x2_t *)&__src[224 * (v286 - 1)];
            v309.i32[1] = 0;
            v309.i64[1] = 0;
            v309.f32[0] = 1.0 / (float)(v264 >> (v286 - 1));
            v310.i32[0] = 0;
            v310.i64[1] = 0;
            v310.f32[1] = v309.f32[0];
            v311 = *v308;
            *(float32x2_t *)v277.f32 = vadd_f32(vcvt_f32_u32(*v308), (float32x2_t)0x3F0000003F000000);
            v277.i32[2] = 1.0;
            v313 = v308[1].i32[0];
            v312 = v308[1].i32[1];
            *(_OWORD *)v667 = xmmword_2260E5F10;
            *(_OWORD *)&v667[16] = xmmword_2260E5F20;
            *(simd_float4 *)&v667[32] = v277;
            do
            {
              v658.columns[v307] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v309, COERCE_FLOAT(*(_OWORD *)&v667[v307 * 16])), v310, *(float32x2_t *)&v667[v307 * 16], 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)&v667[v307 * 16], 2);
              ++v307;
            }
            while (v307 != 3);
            v314 = 0;
            v315 = vsub_s32(v302, v301);
            v316 = (float)(v313 - v311.i32[0]) / (float)v315.u32[0];
            v317 = (float)(v312 - v311.i32[1]) / (float)v315.u32[1];
            v318 = (float32x4_t)v658.columns[0];
            v319 = (float32x4_t)v658.columns[1];
            v320 = (float32x4_t)v658.columns[2];
            v321 = v316;
            LODWORD(v322) = 0;
            *((float *)&v322 + 1) = v317;
            *(_OWORD *)v667 = LODWORD(v321);
            *(_OWORD *)&v667[16] = v322;
            *(_OWORD *)&v667[32] = xmmword_2260E5F40;
            do
            {
              v323 = *(float32x4_t *)&v667[v314 * 16];
              v658.columns[v314++] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v318, v323.f32[0]), v319, *(float32x2_t *)v323.f32, 1), v320, v323, 2);
            }
            while (v314 != 3);
            v324 = 0;
            v325 = (float32x4_t)v658.columns[0];
            v326 = (float32x4_t)v658.columns[1];
            v327 = (float32x4_t)v658.columns[2];
            *(float32x2_t *)v323.f32 = vneg_f32(vcvt_f32_u32((uint32x2_t)v301));
            v323.i32[2] = 1.0;
            *(_OWORD *)v667 = xmmword_2260E5F10;
            *(_OWORD *)&v667[16] = xmmword_2260E5F20;
            *(float32x4_t *)&v667[32] = v323;
            do
            {
              v658.columns[v324] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v325, COERCE_FLOAT(*(_OWORD *)&v667[v324 * 16])), v326, *(float32x2_t *)&v667[v324 * 16], 1), v327, *(float32x4_t *)&v667[v324 * 16], 2);
              ++v324;
            }
            while (v324 != 3);
            v328 = 0;
            v329 = v658.columns[0].i64[0];
            v330 = v658.columns[1];
            v331 = &__src[224 * v286];
            *((_DWORD *)v331 + 10) = v658.columns[0].i32[2];
            *((_DWORD *)v331 + 14) = v330.i32[2];
            v332 = v658.columns[2].i64[0];
            *((_DWORD *)v331 + 18) = v658.columns[2].i32[2];
            *((_QWORD *)v331 + 4) = v329;
            *((_QWORD *)v331 + 6) = v330.i64[0];
            *((_QWORD *)v331 + 8) = v332;
            v333 = &__src[224 * (v286 - 1)];
            v334 = *(uint32x2_t *)(v333 + 16);
            v336 = *((_DWORD *)v333 + 6);
            v335 = *((_DWORD *)v333 + 7);
            *(float32x2_t *)v330.f32 = vadd_f32(vcvt_f32_u32(v334), (float32x2_t)0x3F0000003F000000);
            v330.i32[2] = 1.0;
            *(_OWORD *)v667 = xmmword_2260E5F10;
            *(_OWORD *)&v667[16] = xmmword_2260E5F20;
            *(simd_float4 *)&v667[32] = v330;
            do
            {
              v658.columns[v328] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v309, COERCE_FLOAT(*(_OWORD *)&v667[v328 * 16])), v310, *(float32x2_t *)&v667[v328 * 16], 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)&v667[v328 * 16], 2);
              ++v328;
            }
            while (v328 != 3);
            v337 = 0;
            v338 = vsub_s32(v305, *(int32x2_t *)v304.f32);
            *(float *)v334.i32 = (float)(v336 - v334.i32[0]) / (float)v338.u32[0];
            v339 = (float)(v335 - v334.i32[1]) / (float)v338.u32[1];
            v340 = (float32x4_t)v658.columns[0];
            v341 = (float32x4_t)v658.columns[1];
            v342 = (float32x4_t)v658.columns[2];
            v343 = v334.i32[0];
            LODWORD(v344) = 0;
            *((float *)&v344 + 1) = v339;
            *(_OWORD *)v667 = v343;
            *(_OWORD *)&v667[16] = v344;
            *(_OWORD *)&v667[32] = xmmword_2260E5F40;
            do
            {
              v345 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v340, COERCE_FLOAT(*(_OWORD *)&v667[v337 * 16])), v341, *(float32x2_t *)&v667[v337 * 16], 1), v342, *(float32x4_t *)&v667[v337 * 16], 2);
              v658.columns[v337++] = (simd_float4)v345;
            }
            while (v337 != 3);
            v346 = 0;
            v347 = (float32x4_t)v658.columns[0];
            v348 = (float32x4_t)v658.columns[1];
            v349 = (float32x4_t)v658.columns[2];
            v350 = vcvt_f32_u32(*(uint32x2_t *)v304.f32);
            *(float32x2_t *)v345.f32 = vneg_f32(v350);
            v345.i32[2] = 1.0;
            *(_OWORD *)v667 = xmmword_2260E5F10;
            *(_OWORD *)&v667[16] = xmmword_2260E5F20;
            *(float32x4_t *)&v667[32] = v345;
            do
            {
              v658.columns[v346] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v347, COERCE_FLOAT(*(_OWORD *)&v667[v346 * 16])), v348, *(float32x2_t *)&v667[v346 * 16], 1), v349, *(float32x4_t *)&v667[v346 * 16], 2);
              ++v346;
            }
            while (v346 != 3);
            v351 = v658.columns[0].i32[2];
            v352 = v658.columns[1];
            v353 = v658.columns[2];
            v354 = &__src[224 * v286];
            *((_QWORD *)v354 + 10) = v658.columns[0].i64[0];
            *((_DWORD *)v354 + 22) = v351;
            *((_QWORD *)v354 + 12) = v352.i64[0];
            *((_DWORD *)v354 + 26) = v352.i32[2];
            *((_QWORD *)v354 + 14) = v353.i64[0];
            *((_DWORD *)v354 + 30) = v353.i32[2];
            v355 = v350.f32[1];
            v356 = v286;
          }
          else
          {
            v356 = 0;
            v350.f32[0] = (float)v304.u32[0];
            v355 = (float)v304.u32[1];
          }
          v357 = 0;
          *(int32x2_t *)&v304.u32[2] = v305;
          v358.i32[1] = 0;
          v358.i64[1] = 0;
          v359 = vshlq_u32((uint32x4_t)v304, (uint32x4_t)vdupq_n_s32(v356));
          v304.i32[0] = 0;
          v304.i64[1] = 0;
          __asm { FMOV            V21.4S, #1.0 }
          *((_QWORD *)&v361 + 1) = *((_QWORD *)&_Q21 + 1);
          *(float *)&v361 = v350.f32[0] + 0.5;
          *((float *)&v361 + 1) = v355 + 0.5;
          *(uint32x4_t *)&__src[224 * v286 + 128] = v359;
          *(_OWORD *)v667 = xmmword_2260E5F10;
          *(_OWORD *)&v667[16] = xmmword_2260E5F20;
          *(_OWORD *)&v667[32] = v361;
          do
          {
            v358.f32[0] = 1.0 / (float)(v264 >> v356);
            v304.f32[1] = v358.f32[0];
            v658.columns[v357] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v358, COERCE_FLOAT(*(_OWORD *)&v667[v357 * 16])), v304, *(float32x2_t *)&v667[v357 * 16], 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)&v667[v357 * 16], 2);
            ++v357;
          }
          while (v357 != 3);
          v362 = 0;
          v363 = (float)(1 << v356);
          v364 = (float32x4_t)v658.columns[0];
          v365 = (float32x4_t)v658.columns[1];
          v366 = (float32x4_t)v658.columns[2];
          LODWORD(v367) = 0;
          *((float *)&v367 + 1) = 1.0 / v363;
          *(_OWORD *)v667 = COERCE_UNSIGNED_INT(1.0 / v363);
          *(_OWORD *)&v667[16] = v367;
          *(_OWORD *)&v667[32] = xmmword_2260E5F40;
          do
          {
            v658.columns[v362] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v364, COERCE_FLOAT(*(_OWORD *)&v667[v362 * 16])), v365, *(float32x2_t *)&v667[v362 * 16], 1), v366, *(float32x4_t *)&v667[v362 * 16], 2);
            ++v362;
          }
          while (v362 != 3);
          v368 = 0;
          v369 = (float)v359.u32[0];
          v370 = (float)v359.u32[1];
          v371 = (float32x4_t)v658.columns[0];
          v372 = (float32x4_t)v658.columns[1];
          v373 = (float32x4_t)v658.columns[2];
          *(float *)&_Q21 = -v369;
          *((float *)&_Q21 + 1) = -v370;
          *(_OWORD *)v667 = xmmword_2260E5F10;
          *(_OWORD *)&v667[16] = xmmword_2260E5F20;
          *(_OWORD *)&v667[32] = _Q21;
          do
          {
            v658.columns[v368] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v371, COERCE_FLOAT(*(_OWORD *)&v667[v368 * 16])), v372, *(float32x2_t *)&v667[v368 * 16], 1), v373, *(float32x4_t *)&v667[v368 * 16], 2);
            ++v368;
          }
          while (v368 != 3);
          v374 = v658.columns[0].i32[2];
          v375 = v658.columns[1];
          v277 = v658.columns[2];
          v376 = (float32x2_t *)&__src[224 * v286];
          v376[22] = *(float32x2_t *)v658.columns[0].f32;
          v376[23].i32[0] = v374;
          v376[24] = *(float32x2_t *)v375.f32;
          v376[25].i32[0] = v375.i32[2];
          v376[27].i32[0] = v277.i32[2];
          v376[26] = *(float32x2_t *)v277.f32;
          v377 = (uint32x2_t)vadd_s32(v302, v301);
          v378 = (float)(v553 / v273) * v363;
          v379 = vmul_f32(vcvt_f32_u32(v377), (float32x2_t)0x3F0000003F000000);
          v380.f32[0] = v350.f32[0] - v379.f32[0];
          v380.f32[1] = v355 - v379.f32[1];
          v376[20] = vmul_n_f32(v380, v378);
          v376[21] = vmul_n_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)v305), v379), v378);
          ++v286;
        }
        while (v286 != v285);
        v381 = *(int32x2_t *)&__src[136];
        v535 = *(int32x2_t *)&__src[128];
      }
      else
      {
        v381 = 0;
        v535 = 0;
        v291 = v588[26].u32[3];
        v178 = 0.5;
      }
      v534 = v381;
      v382 = 0;
      *(float *)v381.i32 = (float)v264;
      v533 = v381;
      v383 = v273 / (float)v264;
      if ((int)v285 <= 1)
        LODWORD(v285) = 1;
      v384 = &__src[224 * (v285 - 1)];
      v385 = v280.f32[0] - v562;
      v386 = v280.f32[1] - v282;
      v387 = (float)v291;
      if (v385 <= (float)v291)
        v388 = (float)v291;
      else
        v388 = v385;
      if (v386 > v387)
        v387 = v386;
      v389 = v383 * (float)(v388 / v385);
      v390 = v383 * (float)(v387 / v386);
      v391.i32[0] = 0;
      v391.i64[1] = 0;
      v391.f32[1] = v390;
      v392 = *(int32x2_t *)(v384 + 128);
      v393 = *(int32x2_t *)(v384 + 136);
      *(float32x4_t *)v667 = v576;
      *(float32x4_t *)&v667[16] = v574;
      v551 = v564 * v557;
      *(float32x4_t *)&v667[32] = v572;
      v668 = (simd_float4)v570;
      do
      {
        v658.columns[v382 / 0x10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)LODWORD(v389), COERCE_FLOAT(*(_OWORD *)&v667[v382])), v391, *(float32x2_t *)&v667[v382], 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)&v667[v382], 2), (float32x4_t)xmmword_2260E5D70, *(float32x4_t *)&v667[v382], 3);
        v382 += 16;
      }
      while (v382 != 64);
      v394 = 0;
      v395.i32[0] = 0;
      v395.i64[1] = 0;
      v395.f32[1] = v383;
      v396 = v658.columns[0];
      v397 = v658.columns[1];
      v559 = v658.columns[3];
      v561 = v658.columns[2];
      *(float32x4_t *)v667 = v569;
      *(float32x4_t *)&v667[16] = v568;
      *(float32x4_t *)&v667[32] = v567;
      v668 = (simd_float4)v566;
      do
      {
        v658.columns[v394 / 0x10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)LODWORD(v383), COERCE_FLOAT(*(_OWORD *)&v667[v394])), v395, *(float32x2_t *)&v667[v394], 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)&v667[v394], 2), (float32x4_t)xmmword_2260E5D70, *(float32x4_t *)&v667[v394], 3);
        v394 += 16;
      }
      while (v394 != 64);
      v398 = 0;
      v528 = v658.columns[1];
      v529 = v658.columns[0];
      v526 = v658.columns[3];
      v527 = v658.columns[2];
      *(float32x4_t *)v667 = v576;
      *(float32x4_t *)&v667[16] = v574;
      *(float32x4_t *)&v667[32] = v572;
      v668 = (simd_float4)v570;
      do
      {
        v658.columns[v398 / 0x10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)LODWORD(v383), COERCE_FLOAT(*(_OWORD *)&v667[v398])), v395, *(float32x2_t *)&v667[v398], 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)&v667[v398], 2), (float32x4_t)xmmword_2260E5D70, *(float32x4_t *)&v667[v398], 3);
        v398 += 16;
      }
      while (v398 != 64);
      v548 = v658.columns[1];
      v549 = v658.columns[0];
      v546 = v658.columns[3];
      v547 = v658.columns[2];
      v399 = *(_QWORD *)(v555 + 32);
      v400 = *(_QWORD *)(v555 + 16);
      v401 = v399 + 16 * v400;
      v563 = v397;
      v565 = v396;
      v544 = (simd_float4)xmmword_2260E5D70;
      v545 = (simd_float4)xmmword_2260E5F40;
      if (v400)
      {
        v402 = 16 * v400;
        while (!*(_BYTE *)(v399 + 8))
        {
          v399 += 16;
          v402 -= 16;
          if (!v402)
          {
            v399 = v401;
            break;
          }
        }
      }
      WORD2(v613[0]) = 0;
      LODWORD(v613[0]) = 0;
      v403 = *(_DWORD *)(v555 + 200);
      v404 = *(_QWORD *)(v555 + 192);
      v672.columns[1] = v584;
      v672.columns[0] = v586;
      v672.columns[3] = v580;
      v672.columns[2] = v582;
      v673 = __invert_f4(v672);
      v405 = &off_2260E5000;
      v556 = v673.columns[0];
      v540 = v673.columns[2];
      v541 = v673.columns[1];
      v539 = v673.columns[3];
      if (v552)
      {
        if (!v579)
        {
          if (re::internal::shadows::g_enableShadowFlattening)
          {
            v406 = v673.columns[1];
            if (v554 != INFINITY)
            {
              v524 = (float32x4_t)v552[1];
              v525 = *v552;
              v407 = atomic_load((unsigned __int8 *)&_MergedGlobals_407);
              v408 = &off_2260E5000;
              if ((v407 & 1) == 0)
              {
                v479 = __cxa_guard_acquire(&_MergedGlobals_407);
                v673.columns[3] = v539;
                v673.columns[2] = v540;
                v406 = v541;
                v673.columns[0] = v556;
                v405 = &off_2260E5000;
                v408 = &off_2260E5000;
                if (v479)
                {
                  xmmword_25411C110 = xmmword_2260E5F10;
                  unk_25411C120 = xmmword_2260E5F20;
                  xmmword_25411C130 = xmmword_2260E5F40;
                  unk_25411C140 = xmmword_226133620;
                  __cxa_guard_release(&_MergedGlobals_407);
                  v673.columns[3] = v539;
                  v673.columns[2] = v540;
                  v406 = v541;
                  v673.columns[0] = v556;
                  v405 = &off_2260E5000;
                  v408 = &off_2260E5000;
                }
              }
              v409 = 0;
              v410.i64[0] = *(_QWORD *)&__src[832];
              v410.i64[1] = 0x3F80000000000000;
              v411 = vdupq_lane_s32(0, 0);
              v412 = v411;
              v413 = vsub_f32(*(float32x2_t *)&__src[840], *(float32x2_t *)&__src[832]);
              v411.i32[1] = v413.i32[1];
              v412.i32[0] = v413.i32[0];
              *(int32x4_t *)v667 = v412;
              *(int32x4_t *)&v667[16] = v411;
              *(_OWORD *)&v667[32] = 0uLL;
              v668 = (simd_float4)xmmword_2260E5D70;
              do
              {
                v414 = *((float32x4_t *)v405 + 242);
                v415 = *((float32x4_t *)v408 + 244);
                v658.columns[v409 / 0x10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(*(_OWORD *)&v667[v409])), v414, *(float32x2_t *)&v667[v409], 1), v415, *(float32x4_t *)&v667[v409], 2), v410, *(float32x4_t *)&v667[v409], 3);
                v409 += 16;
              }
              while (v409 != 64);
              v416 = 0;
              v417 = v658.columns[0];
              v418 = v658.columns[1];
              v419 = v658.columns[2];
              v420 = v658.columns[3];
              v421 = vmulq_n_f32(v589, v554);
              v421.i32[3] = 1.0;
              *(simd_float4 *)v667 = v673.columns[0];
              *(simd_float4 *)&v667[16] = v406;
              *(simd_float4 *)&v667[32] = v673.columns[2];
              v668 = v673.columns[3];
              do
              {
                v658.columns[v416 / 0x10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(*(_OWORD *)&v667[v416])), v414, *(float32x2_t *)&v667[v416], 1), v415, *(float32x4_t *)&v667[v416], 2), v421, *(float32x4_t *)&v667[v416], 3);
                v416 += 16;
              }
              while (v416 != 64);
              v422 = 0;
              v423 = (float32x4_t)v658.columns[0];
              v424 = (float32x4_t)v658.columns[1];
              v425 = (float32x4_t)v658.columns[2];
              v426 = (float32x4_t)v658.columns[3];
              *(simd_float4 *)v667 = v417;
              *(simd_float4 *)&v667[16] = v418;
              *(simd_float4 *)&v667[32] = v419;
              v668 = v420;
              do
              {
                v658.columns[v422 / 0x10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v423, COERCE_FLOAT(*(_OWORD *)&v667[v422])), v424, *(float32x2_t *)&v667[v422], 1), v425, *(float32x4_t *)&v667[v422], 2), v426, *(float32x4_t *)&v667[v422], 3);
                v422 += 16;
              }
              while (v422 != 64);
              v427 = 0;
              v428 = (float32x4_t)v658.columns[0];
              v429 = (float32x4_t)v658.columns[1];
              v430 = (float32x4_t)v658.columns[2];
              v431 = (float32x4_t)v658.columns[3];
              *(_OWORD *)v667 = xmmword_25411C110;
              *(_OWORD *)&v667[16] = unk_25411C120;
              *(_OWORD *)&v667[32] = xmmword_25411C130;
              v668 = (simd_float4)unk_25411C140;
              v432 = v538;
              v433 = v537;
              v434 = v534;
              v435 = v403;
              do
              {
                v658.columns[v427 / 0x10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v428, COERCE_FLOAT(*(_OWORD *)&v667[v427])), v429, *(float32x2_t *)&v667[v427], 1), v430, *(float32x4_t *)&v667[v427], 2), v431, *(float32x4_t *)&v667[v427], 3);
                v427 += 16;
              }
              while (v427 != 64);
              v436 = 0;
              v522 = v658.columns[1];
              v523 = v658.columns[0];
              v544 = v658.columns[3];
              v545 = v658.columns[2];
              v437 = v536;
              v438 = v535;
              v439 = v533;
              goto LABEL_343;
            }
          }
        }
        v522 = (simd_float4)xmmword_2260E5F20;
        v523 = (simd_float4)xmmword_2260E5F10;
        v441 = atomic_load((unsigned __int8 *)&qword_25411C108);
        if ((v441 & 1) == 0 && __cxa_guard_acquire(&qword_25411C108))
        {
          xmmword_25411C150 = xmmword_22610BB90;
          unk_25411C160 = xmmword_226133610;
          xmmword_25411C170 = xmmword_2260E5F40;
          unk_25411C180 = xmmword_226133620;
          __cxa_guard_release(&qword_25411C108);
        }
        v442 = 0;
        v443 = (float32x4_t)xmmword_25411C150;
        v444 = (float32x4_t)unk_25411C160;
        v445 = (float32x4_t)xmmword_25411C170;
        v446 = (float32x4_t)unk_25411C180;
        *(simd_float4 *)v667 = v549;
        *(simd_float4 *)&v667[16] = v548;
        *(simd_float4 *)&v667[32] = v547;
        v668 = v546;
        do
        {
          v658.columns[v442 / 0x10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v443, COERCE_FLOAT(*(_OWORD *)&v667[v442])), v444, *(float32x2_t *)&v667[v442], 1), v445, *(float32x4_t *)&v667[v442], 2), v446, *(float32x4_t *)&v667[v442], 3);
          v442 += 16;
        }
        while (v442 != 64);
        v674 = __invert_f4(v658);
        v447 = 0;
        v448.i32[1] = 1;
        *(float *)v448.i32 = (float)v588[26].u32[2];
        v449 = (float32x2_t)vdup_lane_s32(v448, 0);
        *(float32x2_t *)&v450 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(*(int32x2_t *)&__src[800], (int32x2_t)0x100000001)), v449);
        *(float32x2_t *)&v451 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(*(int32x2_t *)&__src[808], (int32x2_t)-1)), v449);
        v452.i64[0] = v450;
        v452.i64[1] = 0x3F80000000000000;
        v453 = __PAIR64__(DWORD1(v451), v450);
        v454.i64[0] = __PAIR64__(DWORD1(v451), v450);
        v454.i64[1] = 0x3F80000000000000;
        v455.i64[0] = v451;
        v455.i64[1] = 0x3F80000000000000;
        *(_QWORD *)&v456 = __PAIR64__(DWORD1(v450), v451);
        v457.i64[0] = __PAIR64__(DWORD1(v450), v451);
        v457.i64[1] = 0x3F80000000000000;
        *((float *)&v450 + 2) = (float)((float)(4.6052 / v551) + 1.0) - v588[30].f32[2];
        HIDWORD(v450) = 1.0;
        v459.i64[1] = __PAIR64__(1.0, DWORD2(v450));
        v658.columns[0] = v452;
        v658.columns[1] = v454;
        *((_QWORD *)&v451 + 1) = __PAIR64__(1.0, DWORD2(v450));
        v658.columns[2] = v455;
        v658.columns[3] = v457;
        *((_QWORD *)&v456 + 1) = __PAIR64__(1.0, DWORD2(v450));
        v659 = v450;
        v660 = v459;
        v661 = v451;
        v662 = v456;
        v458 = (float32x4_t)vdupq_n_s32(0x7F800000u);
        v459.i64[0] = 0x7F0000007FLL;
        v459.i32[2] = 127;
        do
        {
          v460 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v674.columns[0], COERCE_FLOAT(*(_OWORD *)&v658.columns[v447])), (float32x4_t)v674.columns[1], *(float32x2_t *)v658.columns[v447].f32, 1), (float32x4_t)v674.columns[2], (float32x4_t)v658.columns[v447], 2), (float32x4_t)v674.columns[3], (float32x4_t)v658.columns[v447], 3);
          v461 = vdivq_f32(v460, (float32x4_t)vdupq_laneq_s32((int32x4_t)v460, 3));
          v458.i32[3] = 0;
          v461.i32[3] = 0;
          v458 = vminnmq_f32(v458, v461);
          v459.i32[3] = 0;
          v459 = vmaxnmq_f32(v459, v461);
          ++v447;
        }
        while (v447 != 8);
        v436 = 1;
        v524 = v459;
        v525 = (int32x4_t)v458;
      }
      else
      {
        v522 = (simd_float4)xmmword_2260E5F20;
        v523 = (simd_float4)xmmword_2260E5F10;
        v436 = 1;
        v440.i64[0] = 0x7F0000007FLL;
        v440.i64[1] = 0x7F0000007FLL;
        v524 = v440;
        v525 = vdupq_n_s32(0x7F800000u);
      }
      v432 = v538;
      v433 = v537;
      v437 = v536;
      v438 = v535;
      v439 = v533;
      v434 = v534;
      v435 = v403;
LABEL_343:
      v462 = (float32x2_t)vdup_lane_s32(v439, 0);
      v463 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v393, v392)), (float32x2_t)0x3F0000003F000000);
      v464 = vdiv_f32(vadd_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)v393), (float32x2_t)vdup_lane_s32((int32x2_t)v463, 0)), (float32x2_t)0x3F0000003F000000), v462);
      v465 = vdiv_f32(vadd_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)v392), v463), (float32x2_t)0xBF000000BF000000), v462);
      v466 = vsub_f32(v464, v465);
      v467 = vmul_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v438, v434)), (float32x2_t)0x3F0000003F000000);
      buf[0].n128_u64[0] = __PAIR64__(LODWORD(v577), LODWORD(v530));
      buf[0].n128_f32[2] = v432 / v283;
      buf[0].n128_f32[3] = v551;
      buf[1].n128_f32[0] = v557 * v433;
      buf[1].n128_f32[1] = v557 * v437;
      buf[1].n128_u64[1] = v435;
      *(_QWORD *)&v617 = v404;
      BYTE8(v617) = v579;
      BYTE9(v617) = v399 != v401;
      *(_DWORD *)((char *)&v617 + 10) = v613[0];
      HIWORD(v617) = WORD2(v613[0]);
      v618 = (int32x4_t)v565;
      v619 = v563;
      v620 = (int32x4_t)v561;
      v621 = v559;
      v622 = v529;
      v623 = v528;
      v624 = v527;
      v625 = v526;
      *(float32x2_t *)&v626 = vdiv_f32(vadd_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)v438), v467), (float32x2_t)0xBF000000BF000000), v462);
      *((float32x2_t *)&v626 + 1) = vsub_f32(vdiv_f32(vadd_f32(vsub_f32(vcvt_f32_u32((uint32x2_t)v434), v467), (float32x2_t)0x3F0000003F000000), v462), *(float32x2_t *)&v626);
      v627 = v465;
      v628 = v466;
      *(float *)&v629 = v531;
      memcpy(v630, __src, 0x394uLL);
      v631 = v554;
      v632 = v556;
      v633 = v541;
      v634 = v540;
      v635 = v539;
      v636 = v283;
      v637 = v579;
      v638 = v589;
      v639 = v549;
      v640 = v548;
      v641 = v547;
      v642 = v546;
      v643 = v436;
      v644[0] = v525;
      v644[1] = v524;
      v645[0] = (float32x4_t)v523;
      v645[1] = (float32x4_t)v522;
      v645[2] = (float32x4_t)v545;
      v645[3] = (float32x4_t)v544;
      v645[4] = v576;
      v645[5] = v574;
      v645[6] = v572;
      v645[7] = v570;
      v645[8] = v569;
      v645[9] = v568;
      v645[10] = v567;
      v645[11] = v566;
      v645[12] = (float32x4_t)v586;
      v645[13] = (float32x4_t)v584;
      v645[14] = (float32x4_t)v582;
      v645[15] = (float32x4_t)v580;
      v645[16] = v589;
      v646 = v531;
      v647 = v283;
      v648 = v553;
      v649 = v577;
      v650 = v565;
      v651 = v563;
      v652 = v561;
      v653 = v559;
      v654 = vnegq_f32(v589);
      v655 = v577;
      v656 = 0;
      v657 = 0;
      if (v552)
      {
        v468 = re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(i64, *(_QWORD *)(v521 + 40 * v177 + 24));
        if (v468
          || (v468 = re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(i64, 0)) != 0)
        {
          v469 = *(_QWORD *)(v468 + 16);
          if (!v469)
          {
LABEL_350:
            re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add((uint64_t)v602, (uint64_t)v532);
            v140 = v519;
            goto LABEL_360;
          }
          v470 = *(uint64_t **)(v468 + 32);
          v471 = &v470[14 * v469];
          while (1)
          {
            v473 = *v470;
            v472 = v470 + 2;
            *(_QWORD *)__src = v472;
            *(_QWORD *)&__src[8] = v473;
            if (re::isBoundingBoxInsidePlanes((uint64_t)v644, (uint64_t)__src, v645))
              break;
            v470 = v472 + 12;
            if (v470 == v471)
              goto LABEL_350;
          }
        }
      }
      v474 = re::Hash<re::ShadowPair>::operator()((uint64_t)__src, v532);
      if ((_QWORD)v605)
      {
        v475 = v474 % DWORD2(v606);
        v476 = *(unsigned int *)(*((_QWORD *)&v605 + 1) + 4 * v475);
        v140 = v519;
        if ((_DWORD)v476 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v606 + 1808 * v476 + 16) != *(_QWORD *)v532
               || *(_QWORD *)(v606 + 1808 * v476 + 24) != *(_QWORD *)(v521 + 40 * v177 + 24)
               || *(unsigned __int8 *)(v606 + 1808 * v476 + 32) != *v520)
          {
            v476 = *(_DWORD *)(v606 + 1808 * v476 + 8) & 0x7FFFFFFF;
            if (v476 == 0x7FFFFFFF)
              goto LABEL_359;
          }
          goto LABEL_360;
        }
      }
      else
      {
        LODWORD(v475) = 0;
        v140 = v519;
      }
LABEL_359:
      re::HashTable<re::ShadowPair,re::ShadowInfo,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsMove((uint64_t)&v605, v475, v474, v532, buf);
      ++HIDWORD(v608);
LABEL_360:
      v179 = v600;
      if (v601 <= (int)v141 + 1)
        v477 = v141 + 1;
      else
        v477 = v601;
      while (1)
      {
        v177 = (v141 + 1);
        if (v477 - 1 == (_DWORD)v141)
          break;
        LODWORD(v141) = v141 + 1;
        v478 = v177;
        if ((*(_DWORD *)(v600 + 40 * v177 + 8) & 0x80000000) != 0)
          goto LABEL_367;
      }
      v478 = v477;
LABEL_367:
      LODWORD(v141) = v478;
    }
    while ((_DWORD)v140 != v478);
  }
  re::MeshShadowGenerationQueue::dequeue(v513, v515, v516, (uint64_t)v602, (uint64_t)__src);
  v144 = *(unsigned int *)&__src[28];
  v658.columns[2].i64[0] = 0;
  memset(&v658.columns[0].u32[2], 0, 20);
  re::DynamicArray<re::EvaluationRegister>::setCapacity(&v658, v144);
  ++v658.columns[1].i32[2];
  v594 = *(_DWORD *)&__src[32];
  v146 = 0;
  if (*(_DWORD *)&__src[32])
  {
    v147 = (int *)(*(_QWORD *)&__src[16] + 8);
    while (1)
    {
      v148 = *v147;
      v147 += 10;
      if (v148 < 0)
        break;
      if (*(unsigned int *)&__src[32] == ++v146)
      {
        LODWORD(v146) = *(_DWORD *)&__src[32];
        break;
      }
    }
  }
  if (*(_DWORD *)&__src[32] != (_DWORD)v146)
  {
    v485 = v146;
    v486 = *(_QWORD *)&__src[16];
    v591 = (_QWORD *)(v6 + 80);
    do
    {
      v487 = (__int128 *)(v486 + 40 * v485 + 16);
      v488 = re::Hash<re::ShadowPair>::operator()((uint64_t)buf, v487);
      if ((_QWORD)v605)
      {
        v489 = *(unsigned int *)(*((_QWORD *)&v605 + 1) + 4 * (v488 % DWORD2(v606)));
        if ((_DWORD)v489 != 0x7FFFFFFF)
        {
          v490 = v606;
          v491 = v486 + 40 * v485;
          v494 = *(unsigned __int8 *)(v491 + 32);
          v493 = (unsigned __int8 *)(v491 + 32);
          v492 = v494;
          while (*(_QWORD *)(v606 + 1808 * v489 + 16) != *(_QWORD *)v487
               || *(_QWORD *)(v606 + 1808 * v489 + 24) != *((_QWORD *)v493 - 1)
               || *(unsigned __int8 *)(v606 + 1808 * v489 + 32) != v492)
          {
            v489 = *(_DWORD *)(v606 + 1808 * v489 + 8) & 0x7FFFFFFF;
            if (v489 == 0x7FFFFFFF)
              goto LABEL_398;
          }
          v497 = re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::tryGet((uint64_t)v591, (uint64_t)v487);
          if (v497)
          {
            *(_OWORD *)&v664[7] = *(_OWORD *)v497;
            *(_QWORD *)&v664[23] = *(_QWORD *)(v497 + 16);
            v21 = (unint64_t *)*(unsigned __int16 *)(v497 + 24);
            LODWORD(v613[0]) = *(_DWORD *)(v497 + 26);
            v498 = *(_WORD *)(v497 + 30);
LABEL_422:
            WORD2(v613[0]) = v498;
            v23 = *(unint64_t **)(v6 + 56);
            if (v23 <= v21)
              goto LABEL_437;
            v507 = (_anonymous_namespace_ *)memcpy((void *)(*(_QWORD *)(v6 + 72) + 1776 * v21), (const void *)(v490 + 1808 * v489 + 48), 0x6E0uLL);
            v508 = v658.columns[1].i64[0];
            if (v658.columns[1].i64[0] >= (unint64_t)v658.columns[0].i64[1])
            {
              v509 = v658.columns[1].i64[0] + 1;
              if (v658.columns[0].i64[1] < (unint64_t)(v658.columns[1].i64[0] + 1))
              {
                if (v658.columns[0].i64[0])
                {
                  v510 = 8;
                  if (v658.columns[0].i64[1])
                    v510 = 2 * v658.columns[0].i64[1];
                  if (v510 <= v509)
                    v511 = v658.columns[1].i64[0] + 1;
                  else
                    v511 = v510;
                  re::DynamicArray<re::EvaluationRegister>::setCapacity(&v658, v511);
                }
                else
                {
                  re::DynamicArray<re::EvaluationRegister>::setCapacity(&v658, v509);
                  ++v658.columns[1].i32[2];
                }
              }
              v508 = v658.columns[1].i64[0];
            }
            v512 = v658.columns[2].i64[0] + 32 * v508;
            *(_OWORD *)v512 = *(_OWORD *)&v664[7];
            *(_QWORD *)(v512 + 16) = *(_QWORD *)&v664[23];
            *(_WORD *)(v512 + 24) = (_WORD)v21;
            *(_DWORD *)(v512 + 26) = v613[0];
            *(_WORD *)(v512 + 30) = WORD2(v613[0]);
            ++v658.columns[1].i64[0];
            ++v658.columns[1].i32[2];
            goto LABEL_398;
          }
          re::ShadowTileManager::acquireTile((_QWORD *)v6, (uint64_t)v667);
          if (v667[0])
          {
            buf[0] = (__n128)*v487;
            buf[1].n128_u64[0] = *((_QWORD *)v487 + 2);
            buf[1].n128_u32[2] = *(_DWORD *)&v667[2];
            v499 = re::Hash<re::ShadowPair>::operator()((uint64_t)&v614, v487);
            if (*v591)
            {
              v500 = v499 % *(unsigned int *)(v6 + 104);
              v501 = *(unsigned int *)(*(_QWORD *)(v6 + 88) + 4 * v500);
              if ((_DWORD)v501 != 0x7FFFFFFF)
              {
                v502 = *(_QWORD *)(v6 + 96);
                while (*(_QWORD *)(v502 + 72 * v501 + 16) != *(_QWORD *)v487
                     || *(_QWORD *)(v502 + 72 * v501 + 24) != *((_QWORD *)v493 - 1)
                     || *(unsigned __int8 *)(v502 + 72 * v501 + 32) != *v493)
                {
                  v501 = *(_DWORD *)(v502 + 72 * v501 + 8) & 0x7FFFFFFF;
                  if (v501 == 0x7FFFFFFF)
                    goto LABEL_420;
                }
                v504 = v502 + 72 * v501;
                goto LABEL_421;
              }
            }
            else
            {
              LODWORD(v500) = 0;
            }
LABEL_420:
            v503 = re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsMove((uint64_t)v591, v500, v499, v487, (__int128 *)buf);
            ++*(_DWORD *)(v6 + 120);
            v504 = *(_QWORD *)(v6 + 96) + 72 * v503;
LABEL_421:
            v506 = *(_OWORD *)(v504 + 40);
            v505 = v504 + 40;
            *(_OWORD *)&v664[7] = v506;
            *(_QWORD *)&v664[23] = *(_QWORD *)(v505 + 16);
            v21 = (unint64_t *)*(unsigned __int16 *)(v505 + 24);
            LODWORD(v613[0]) = *(_DWORD *)(v505 + 26);
            v498 = *(_WORD *)(v505 + 30);
            goto LABEL_422;
          }
          *(_OWORD *)v667 = *v487;
          *(_QWORD *)&v667[16] = *((_QWORD *)v487 + 2);
          buf[0] = *(__n128 *)v667;
          buf[1].n128_u64[0] = *(_QWORD *)&v667[16];
          re::MeshShadowGenerationBacklog::pushBack((_anonymous_namespace_ *)(v6 + 264), buf);
        }
      }
LABEL_398:
      v486 = *(_QWORD *)&__src[16];
      if (*(_DWORD *)&__src[32] <= (v146 + 1))
        v495 = v146 + 1;
      else
        v495 = *(_DWORD *)&__src[32];
      while (1)
      {
        v485 = (v146 + 1);
        if (v495 - 1 == (_DWORD)v146)
          break;
        LODWORD(v146) = v146 + 1;
        v496 = v485;
        if ((*(_DWORD *)(*(_QWORD *)&__src[16] + 40 * v485 + 8) & 0x80000000) != 0)
          goto LABEL_405;
      }
      v496 = v495;
LABEL_405:
      LODWORD(v146) = v496;
    }
    while (v594 != v496);
  }
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)__src);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(v599);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v602);
  re::HashTable<re::ShadowPair,re::ShadowInfo,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::deinit((uint64_t *)&v605);
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v611);
  *(_DWORD *)(v514 + 32) = 0;
  *(_OWORD *)v514 = 0u;
  *(_OWORD *)(v514 + 16) = 0u;
  *(_QWORD *)(v514 + 36) = 0x7FFFFFFFLL;
  if ((_QWORD)v595)
  {
    if (HIDWORD(v596) <= 3)
      v480 = 3;
    else
      v480 = HIDWORD(v596);
    re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::init(v514, v595, v480);
    re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::clear(v514);
    if (*(_DWORD *)(v514 + 24) < HIDWORD(v596))
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::setCapacity(v514, HIDWORD(v596));
    v481 = v597;
    if (v597)
    {
      v482 = 0;
      v483 = 0;
      do
      {
        if ((*(_DWORD *)(v596 + v482 + 8) & 0x80000000) != 0)
        {
          re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsCopy(v514, *(_QWORD *)(v596 + v482) % (unint64_t)*(unsigned int *)(v514 + 24), *(_QWORD *)(v596 + v482), v596 + v482 + 16, (__int128 *)(v596 + v482 + 16));
          v481 = v597;
        }
        ++v483;
        v482 += 40;
      }
      while (v483 < v481);
    }
  }
  *(_QWORD *)(v514 + 48) = 0;
  *(_QWORD *)(v514 + 80) = 0;
  *(_QWORD *)(v514 + 56) = 0;
  *(_QWORD *)(v514 + 64) = 0;
  *(_DWORD *)(v514 + 72) = 0;
  if (v658.columns[0].i64[0])
  {
    v484 = v658.columns[1].u64[0];
    *(_QWORD *)(v514 + 48) = v658.columns[0].i64[0];
    re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v514 + 48), v484);
    ++*(_DWORD *)(v514 + 72);
    re::DynamicArray<re::AllocatedShadowHandle>::copy((void **)(v514 + 48), (uint64_t)&v658);
    if (v658.columns[0].i64[0])
    {
      if (v658.columns[2].i64[0])
        (*(void (**)(void))(*(_QWORD *)v658.columns[0].i64[0] + 40))();
    }
  }
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)&v595);
}

BOOL re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 368 * v3 + 16) == a2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 368 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 368 * v3 + 16) != a2);
  return result;
}

unint64_t re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = re::Hash<re::ShadowPair>::operator()((uint64_t)&v9, (_QWORD *)a2);
  v5 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v5)
  {
    LODWORD(v6) = 0;
    goto LABEL_10;
  }
  v6 = result % v5;
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (result % v5));
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
LABEL_10:
    result = re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsCopy(a1, v6, result, a2, (__int128 *)a2);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v8 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v8 + 40 * v7 + 16) != *(_QWORD *)a2
       || *(_QWORD *)(v8 + 40 * v7 + 24) != *(_QWORD *)(a2 + 8)
       || *(unsigned __int8 *)(v8 + 40 * v7 + 32) != *(unsigned __int8 *)(a2 + 16))
  {
    v7 = *(_DWORD *)(v8 + 40 * v7 + 8) & 0x7FFFFFFF;
    if (v7 == 0x7FFFFFFF)
      goto LABEL_10;
  }
  return result;
}

uint64_t re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::ShadowPair>::operator()((uint64_t)&v8, (_QWORD *)a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v6 + 72 * v5 + 16) != *(_QWORD *)a2
       || *(_QWORD *)(v6 + 72 * v5 + 24) != *(_QWORD *)(a2 + 8)
       || *(unsigned __int8 *)(v6 + 72 * v5 + 32) != *(unsigned __int8 *)(a2 + 16))
  {
    v5 = *(_DWORD *)(v6 + 72 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 72 * v5 + 40;
}

uint64_t re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 368 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 368 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 368 * v3 + 16) == a2)
        return v5 + 368 * v3 + 32;
    }
    return 0;
  }
  return v5 + 368 * v3 + 32;
}

uint64_t re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 368 * v13;
    return v12 + 32;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 368 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 368 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 368 * v10;
  return v12 + 32;
}

uint64_t re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v45[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v45, 0, 36);
          *(_QWORD *)&v45[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v45, v13, v12);
          v15 = *(_OWORD *)v45;
          *(_OWORD *)v45 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v45[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v45[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v45[24];
          *(_OWORD *)&v45[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v45[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 16);
              ++v21;
              v22 += 368;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v45);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 368 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 368 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 368 * v9;
  *(_DWORD *)(v23 + v26 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26 + 16) = *a4;
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 + v26;
  *(_QWORD *)(v28 + 64) = 0;
  *(_DWORD *)(v28 + 56) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 48) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 32) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v28 + 40) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v29 = *(_QWORD *)(v27 + v26 + 48);
  *(_QWORD *)(v28 + 48) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v29;
  v30 = *(_QWORD *)(v28 + 64);
  *(_QWORD *)(v28 + 64) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v30;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v28 + 56);
  v31 = *(_OWORD *)(a5 + 48);
  v32 = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v28 + 96) = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(v28 + 112) = v32;
  *(_OWORD *)(v28 + 80) = v31;
  v33 = *(_OWORD *)(a5 + 96);
  v34 = *(_OWORD *)(a5 + 112);
  v35 = *(_OWORD *)(a5 + 144);
  *(_OWORD *)(v28 + 160) = *(_OWORD *)(a5 + 128);
  *(_OWORD *)(v28 + 176) = v35;
  *(_OWORD *)(v28 + 128) = v33;
  *(_OWORD *)(v28 + 144) = v34;
  v36 = *(_OWORD *)(a5 + 160);
  v37 = *(_OWORD *)(a5 + 176);
  v38 = *(_OWORD *)(a5 + 192);
  *(_QWORD *)(v28 + 240) = *(_QWORD *)(a5 + 208);
  *(_OWORD *)(v28 + 208) = v37;
  *(_OWORD *)(v28 + 224) = v38;
  *(_OWORD *)(v28 + 192) = v36;
  *(_QWORD *)(v28 + 256) = *(_QWORD *)(a5 + 224);
  LODWORD(v30) = *(unsigned __int8 *)(a5 + 240);
  *(_BYTE *)(v28 + 272) = v30;
  if ((_DWORD)v30)
  {
    v39 = *(_OWORD *)(a5 + 272);
    v40 = v27 + 368 * v9;
    *(_OWORD *)(v40 + 288) = *(_OWORD *)(a5 + 256);
    *(_OWORD *)(v40 + 304) = v39;
  }
  v41 = *(unsigned __int8 *)(a5 + 288);
  *(_BYTE *)(v27 + 368 * v9 + 320) = v41;
  if (v41)
  {
    v42 = *(_OWORD *)(a5 + 320);
    v43 = v27 + 368 * v9;
    *(_OWORD *)(v43 + 336) = *(_OWORD *)(a5 + 304);
    *(_OWORD *)(v43 + 352) = v42;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 368 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::ShadowPair,re::ShadowInfo,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 1808 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 368 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 368 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 368 * v4 + 16) == v2)
        return v6 + 368 * v4 + 32;
    }
    return 0;
  }
  return v6 + 368 * v4 + 32;
}

