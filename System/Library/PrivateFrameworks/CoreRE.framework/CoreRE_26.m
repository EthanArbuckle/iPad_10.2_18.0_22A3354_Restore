__int128 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,`anonymous namespace'::DepthSortKey *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 *result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE var10[32];
  _BYTE var10a[32];
  _BYTE var10b[32];

  v9 = 24;
  while (1)
  {
    v10 = *(_QWORD *)((char *)a4 + v9);
    v11 = *(_QWORD *)((char *)a3 + v9);
    if (v10 != v11)
      break;
    v9 -= 8;
    if (v9 == -8)
      return result;
  }
  if (v10 < v11)
  {
    v12 = *a3;
    *(_OWORD *)var10 = a3[1];
    *(_OWORD *)&var10[16] = a3[2];
    v14 = *a4;
    v13 = a4[1];
    *(__int128 *)((char *)a3 + 29) = *(__int128 *)((char *)a4 + 29);
    *a3 = v14;
    a3[1] = v13;
    *a4 = v12;
    a4[1] = *(_OWORD *)var10;
    *(__int128 *)((char *)a4 + 29) = *(_OWORD *)&var10[13];
    v15 = 24;
    while (1)
    {
      v16 = *(_QWORD *)((char *)a3 + v15);
      v17 = *(_QWORD *)((char *)a2 + v15);
      if (v16 != v17)
        break;
      v15 -= 8;
      if (v15 == -8)
        return result;
    }
    if (v16 < v17)
    {
      v18 = *a2;
      *(_OWORD *)var10a = a2[1];
      *(_OWORD *)&var10a[16] = a2[2];
      v20 = *a3;
      v19 = a3[1];
      *(__int128 *)((char *)a2 + 29) = *(__int128 *)((char *)a3 + 29);
      *a2 = v20;
      a2[1] = v19;
      *a3 = v18;
      a3[1] = *(_OWORD *)var10a;
      *(__int128 *)((char *)a3 + 29) = *(_OWORD *)&var10a[13];
      v21 = 24;
      while (1)
      {
        v22 = *(_QWORD *)((char *)a2 + v21);
        v23 = *(_QWORD *)((char *)a1 + v21);
        if (v22 != v23)
          break;
        v21 -= 8;
        if (v21 == -8)
          return result;
      }
      if (v22 < v23)
      {
        v24 = *a1;
        *(_OWORD *)var10b = a1[1];
        *(_OWORD *)&var10b[16] = a1[2];
        v26 = *a2;
        v25 = a2[1];
        *(__int128 *)((char *)a1 + 29) = *(__int128 *)((char *)a2 + 29);
        *a1 = v26;
        a1[1] = v25;
        *a2 = v24;
        a2[1] = *(_OWORD *)var10b;
        *(__int128 *)((char *)a2 + 29) = *(_OWORD *)&var10b[13];
      }
    }
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *,false>(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, BOOL a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char v20;
  unint64_t v21;
  __int128 *v23;
  unint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  __int128 *v51;
  __int128 v52;
  __int128 v53;
  __int128 *v54;
  uint64_t v55;
  __int128 *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 *v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  BOOL v89;
  __int128 *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  __int128 *v118;
  int v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  __int128 *v126;
  __int128 *v127;
  __int128 *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  __int128 *v132;
  BOOL v134;
  __int128 *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 *v141;
  __int128 *v142;
  __int128 *v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  __int128 v149;
  __int128 v150;
  int64_t v151;
  __int128 *v152;
  __int128 *v153;
  int64_t v154;
  int64_t v155;
  uint64_t v156;
  __int128 *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  int v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 *v181;
  __int128 *v182;
  __int128 *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  __int128 v188;
  __int128 v189;
  int v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  unint64_t v196;
  __int128 *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  __int128 v201;
  __int128 v203;
  __int128 v204;
  __int128 *v205;
  int v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 *v238;
  __int128 *v239;
  uint64_t v240;
  __int128 *v241;
  __int128 v242;
  unint64_t v243;
  unint64_t v244;
  int v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  unint64_t v260;
  unint64_t v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 *v268;
  __int128 v269;
  __int128 vars0;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  int v274;
  int v275;
  int v276;

  v20 = a4;
  v21 = a3;
  v23 = (__int128 *)result;
  a20 = *MEMORY[0x24BDAC8D0];
  v24 = (unint64_t)&v269 | 0x20;
LABEL_2:
  v268 = (__int128 *)(a2 - 64);
  v25 = v23;
  while (2)
  {
    v23 = v25;
    v26 = a2 - (_QWORD)v25;
    v27 = (uint64_t)(a2 - (_QWORD)v25) >> 6;
    switch(v27)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v123 = 0;
        while (1)
        {
          v124 = *(_QWORD *)(a2 - 32 + v123);
          v125 = *(_QWORD *)((char *)v25 + v123 + 32);
          if (v124 != v125)
            break;
          v123 -= 8;
          if (v123 == -40)
            return result;
        }
        if (v124 < v125)
        {
          v215 = v25[1];
          v216 = v25[3];
          a15 = v25[2];
          a16 = v216;
          a14 = v215;
          a13 = *v25;
          v218 = *(_OWORD *)(a2 - 48);
          v217 = *(_OWORD *)(a2 - 32);
          v219 = *v268;
          *((_DWORD *)v25 + 12) = *(_DWORD *)(a2 - 16);
          v25[1] = v218;
          v25[2] = v217;
          *v25 = v219;
          v221 = a14;
          v220 = a15;
          v222 = a13;
          *(_DWORD *)(a2 - 16) = a16;
          *(_OWORD *)(a2 - 48) = v221;
          *(_OWORD *)(a2 - 32) = v220;
          *v268 = v222;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v25, v25 + 4, v268);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v25, v25 + 4, v25 + 8, (uint64_t)v268);
      case 5uLL:
        v126 = v25 + 4;
        v127 = v25 + 8;
        v128 = v25 + 12;
        result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v25, v25 + 4, v25 + 8, (uint64_t)(v25 + 12));
        v129 = 0;
        while (1)
        {
          v130 = *(_QWORD *)(a2 - 32 + v129);
          v131 = *(_QWORD *)((char *)v25 + v129 + 224);
          if (v130 != v131)
            break;
          v129 -= 8;
          if (v129 == -40)
            return result;
        }
        if (v130 < v131)
        {
          v223 = 0;
          v225 = v25[15];
          a15 = v25[14];
          v224 = a15;
          a16 = v225;
          v226 = v25[13];
          a13 = *v128;
          v227 = a13;
          a14 = v226;
          v229 = *(_OWORD *)(a2 - 48);
          v228 = *(_OWORD *)(a2 - 32);
          v230 = *v268;
          *((_DWORD *)v25 + 60) = *(_DWORD *)(a2 - 16);
          v25[13] = v229;
          v25[14] = v228;
          *v128 = v230;
          *(_DWORD *)(a2 - 16) = a16;
          *(_OWORD *)(a2 - 48) = v226;
          *(_OWORD *)(a2 - 32) = v224;
          *v268 = v227;
          while (1)
          {
            v231 = *(_QWORD *)((char *)v25 + v223 + 224);
            v232 = *(_QWORD *)((char *)v25 + v223 + 160);
            if (v231 != v232)
              break;
            v223 -= 8;
            if (v223 == -40)
              return result;
          }
          if (v231 < v232)
          {
            v248 = 0;
            v249 = v25[10];
            a16 = v25[11];
            *((_DWORD *)v25 + 44) = *((_DWORD *)v25 + 60);
            *((_DWORD *)v25 + 60) = a16;
            v251 = *v127;
            v250 = v25[9];
            v252 = v25[13];
            *v127 = *v128;
            v25[9] = v252;
            v25[10] = v25[14];
            *v128 = v251;
            v25[13] = v250;
            v25[14] = v249;
            while (1)
            {
              v253 = *(_QWORD *)((char *)v25 + v248 + 160);
              v254 = *(_QWORD *)((char *)v25 + v248 + 96);
              if (v253 != v254)
                break;
              v248 -= 8;
              if (v248 == -40)
                return result;
            }
            if (v253 < v254)
            {
              v255 = 0;
              v256 = v25[6];
              a16 = v25[7];
              *((_DWORD *)v25 + 28) = *((_DWORD *)v25 + 44);
              *((_DWORD *)v25 + 44) = a16;
              v258 = *v126;
              v257 = v25[5];
              v259 = v25[9];
              *v126 = *v127;
              v25[5] = v259;
              v25[6] = v25[10];
              *v127 = v258;
              v25[9] = v257;
              v25[10] = v256;
              while (1)
              {
                v260 = *(_QWORD *)((char *)v25 + v255 + 96);
                v261 = *(_QWORD *)((char *)v25 + v255 + 32);
                if (v260 != v261)
                  break;
                v255 -= 8;
                if (v255 == -40)
                  return result;
              }
              if (v260 < v261)
              {
                v262 = v25[1];
                v263 = v25[3];
                a15 = v25[2];
                a16 = v263;
                a14 = v262;
                a13 = *v25;
                *((_DWORD *)v25 + 12) = *((_DWORD *)v25 + 28);
                v264 = v25[6];
                v25[1] = v25[5];
                v25[2] = v264;
                *v25 = *v126;
                v265 = a13;
                v266 = a14;
                v267 = a15;
                *((_DWORD *)v25 + 28) = a16;
                v25[5] = v266;
                v25[6] = v267;
                *v126 = v265;
              }
            }
          }
        }
        return result;
      default:
        if (v26 <= 1535)
        {
          v132 = v25 + 4;
          v134 = v25 == (__int128 *)a2 || v132 == (__int128 *)a2;
          if ((v20 & 1) != 0)
          {
            if (!v134)
            {
              v135 = v25;
              do
              {
                v136 = 0;
                while (1)
                {
                  v137 = *(_QWORD *)((char *)v135 + v136 + 96);
                  v138 = *(_QWORD *)((char *)v135 + v136 + 32);
                  if (v137 != v138)
                    break;
                  v136 -= 8;
                  if (v136 == -40)
                    goto LABEL_147;
                }
                if (v137 < v138)
                {
                  v140 = v132[2];
                  v139 = v132[3];
                  a14 = v132[1];
                  a15 = v140;
                  a16 = v139;
                  a13 = *v132;
                  v141 = v135;
                  v142 = v132;
                  while (1)
                  {
                    v143 = v142;
                    v142 = v141;
                    v144 = v141[1];
                    *v143 = *v141;
                    v143[1] = v144;
                    v143[2] = v141[2];
                    *((_DWORD *)v143 + 12) = *((_DWORD *)v141 + 12);
                    if (v141 == v25)
                      break;
                    v145 = 0;
                    v141 -= 4;
                    while (1)
                    {
                      v146 = *(_QWORD *)(((unint64_t)&a13 | 0x20) + v145);
                      v147 = *(_QWORD *)((char *)v142 + v145 - 32);
                      if (v146 != v147)
                        break;
                      v145 -= 8;
                      if (v145 == -40)
                        goto LABEL_146;
                    }
                    if (v146 >= v147)
                      goto LABEL_146;
                  }
                  v142 = v25;
LABEL_146:
                  v148 = a16;
                  v149 = a15;
                  v142[1] = a14;
                  v142[2] = v149;
                  v150 = a13;
                  *((_DWORD *)v142 + 12) = v148;
                  *v142 = v150;
                }
LABEL_147:
                v132 += 4;
                v135 += 4;
              }
              while (v132 != (__int128 *)a2);
            }
          }
          else if (!v134)
          {
            do
            {
              v233 = 0;
              while (1)
              {
                v234 = *(_QWORD *)((char *)v23 + v233 + 96);
                v235 = *(_QWORD *)((char *)v23 + v233 + 32);
                if (v234 != v235)
                  break;
                v233 -= 8;
                if (v233 == -40)
                  goto LABEL_238;
              }
              if (v234 < v235)
              {
                v237 = v132[2];
                v236 = v132[3];
                a14 = v132[1];
                a15 = v237;
                a16 = v236;
                a13 = *v132;
                v238 = v23;
                v239 = v132;
                do
                {
                  v240 = 0;
                  v241 = v239;
                  v239 = v238;
                  v242 = v238[1];
                  *v241 = *v238;
                  v241[1] = v242;
                  v241[2] = v238[2];
                  *((_DWORD *)v241 + 12) = *((_DWORD *)v238 + 12);
                  v238 -= 4;
                  while (1)
                  {
                    v243 = *(_QWORD *)((char *)&a15 + v240);
                    v244 = *(_QWORD *)((char *)v239 + v240 - 32);
                    if (v243 != v244)
                      break;
                    v240 -= 8;
                    if (v240 == -40)
                      goto LABEL_237;
                  }
                }
                while (v243 < v244);
LABEL_237:
                v245 = a16;
                v246 = a15;
                v239[1] = a14;
                v239[2] = v246;
                v247 = a13;
                *((_DWORD *)v239 + 12) = v245;
                *v239 = v247;
              }
LABEL_238:
              v132 += 4;
              v23 += 4;
            }
            while (v132 != (__int128 *)a2);
          }
          return result;
        }
        if (!v21)
        {
          if (v25 != (__int128 *)a2)
          {
            v151 = (v27 - 2) >> 1;
            v152 = &v25[8 * v151];
            v153 = &v25[4 * v151];
            v154 = v151;
            do
            {
              v155 = v154;
              if (v151 >= v154)
              {
                v156 = (2 * v154) | 1;
                v157 = &v25[4 * v156];
                if (2 * v155 + 2 < (uint64_t)v27)
                {
                  v158 = 0;
                  while (1)
                  {
                    v159 = *(_QWORD *)((char *)v152 + v158 + 96);
                    a4 = *(_QWORD *)((char *)v152 + v158 + 160);
                    if (v159 != a4)
                      break;
                    v158 -= 8;
                    if (v158 == -40)
                      goto LABEL_158;
                  }
                  LOBYTE(a5) = v159 < a4;
LABEL_158:
                  if (((v159 != a4) & a5) != 0)
                  {
                    v157 += 4;
                    v156 = 2 * v155 + 2;
                  }
                }
                result = (unint64_t)&v25[4 * v155];
                v160 = 32;
                while (1)
                {
                  v161 = *(_QWORD *)((char *)v157 + v160);
                  a3 = *(_QWORD *)((char *)v153 + v160);
                  if (v161 != a3)
                    break;
                  v160 -= 8;
                  if (v160 == -8)
                    goto LABEL_165;
                }
                if (v161 < a3)
                  goto LABEL_185;
LABEL_165:
                v163 = *(_OWORD *)(result + 32);
                v162 = *(_OWORD *)(result + 48);
                a14 = *(_OWORD *)(result + 16);
                a15 = v163;
                a16 = v162;
                a13 = *(_OWORD *)result;
                while (1)
                {
                  v164 = (unint64_t)v157;
                  v165 = *((_DWORD *)v157 + 12);
                  v166 = *(_OWORD *)(v164 + 32);
                  *(_OWORD *)(result + 16) = *(_OWORD *)(v164 + 16);
                  *(_OWORD *)(result + 32) = v166;
                  v167 = *(_OWORD *)v164;
                  *(_DWORD *)(result + 48) = v165;
                  *(_OWORD *)result = v167;
                  if (v151 < v156)
                    break;
                  v168 = (2 * v156) | 1;
                  v157 = &v25[4 * v168];
                  v169 = 2 * v156 + 2;
                  if (v169 >= (uint64_t)v27)
                  {
                    v156 = (2 * v156) | 1;
                  }
                  else
                  {
                    a4 = 0;
                    v170 = &v25[8 * v156];
                    while (1)
                    {
                      a5 = *(_QWORD *)((char *)v170 + a4 + 96);
                      v171 = *(_QWORD *)((char *)v170 + a4 + 160);
                      if (a5 != v171)
                        break;
                      a4 -= 8;
                      if (a4 == -40)
                        goto LABEL_174;
                    }
                    a7 = a5 < v171;
LABEL_174:
                    if (a5 != v171 && a7)
                    {
                      v157 += 4;
                      v156 = v169;
                    }
                    else
                    {
                      v156 = v168;
                    }
                  }
                  v172 = 32;
                  while (1)
                  {
                    v173 = *(_QWORD *)((char *)v157 + v172);
                    a3 = *(_QWORD *)((char *)&a13 + v172);
                    if (v173 != a3)
                      break;
                    v172 -= 8;
                    if (v172 == -8)
                      goto LABEL_182;
                  }
                  LOBYTE(a4) = v173 < a3;
LABEL_182:
                  result = v164;
                  if (v173 != a3)
                  {
                    result = v164;
                    if ((a4 & 1) != 0)
                      break;
                  }
                }
                v174 = a16;
                v175 = a15;
                *(_OWORD *)(v164 + 16) = a14;
                *(_OWORD *)(v164 + 32) = v175;
                v176 = a13;
                *(_DWORD *)(v164 + 48) = v174;
                *(_OWORD *)v164 = v176;
              }
LABEL_185:
              v154 = v155 - 1;
              v152 -= 8;
              v153 -= 4;
            }
            while (v155);
            v177 = (unint64_t)v26 >> 6;
            do
            {
              v178 = 0;
              v180 = v25[2];
              v179 = v25[3];
              vars0 = v25[1];
              v273 = v180;
              v276 = v179;
              v269 = *v25;
              v181 = v25;
              do
              {
                v182 = &v181[4 * v178];
                v183 = v182 + 4;
                v184 = (2 * v178) | 1;
                v178 = 2 * v178 + 2;
                if (v178 >= v177)
                {
                  v178 = v184;
                }
                else
                {
                  v185 = 0;
                  while (1)
                  {
                    result = *(_QWORD *)((char *)v182 + v185 + 96);
                    v186 = *(_QWORD *)((char *)v182 + v185 + 160);
                    if (result != v186)
                      break;
                    v185 -= 8;
                    if (v185 == -40)
                      goto LABEL_195;
                  }
                  LOBYTE(a3) = result < v186;
LABEL_195:
                  if (((result != v186) & a3) != 0)
                    v183 = v182 + 8;
                  else
                    v178 = v184;
                }
                v187 = *((_DWORD *)v183 + 12);
                v188 = v183[2];
                v181[1] = v183[1];
                v181[2] = v188;
                v189 = *v183;
                *((_DWORD *)v181 + 12) = v187;
                *v181 = v189;
                v181 = v183;
              }
              while (v178 <= (uint64_t)((unint64_t)(v177 - 2) >> 1));
              a2 -= 64;
              if (v183 == (__int128 *)a2)
              {
                v183[1] = vars0;
                v183[2] = v180;
                v201 = v269;
                *((_DWORD *)v183 + 12) = v276;
                *v183 = v201;
              }
              else
              {
                v190 = *(_DWORD *)(a2 + 48);
                v191 = *(_OWORD *)(a2 + 32);
                v183[1] = *(_OWORD *)(a2 + 16);
                v183[2] = v191;
                v192 = *(_OWORD *)a2;
                *((_DWORD *)v183 + 12) = v190;
                *v183 = v192;
                v193 = vars0;
                v194 = v269;
                *(_DWORD *)(a2 + 48) = v276;
                *(_OWORD *)(a2 + 16) = v193;
                *(_OWORD *)(a2 + 32) = v273;
                *(_OWORD *)a2 = v194;
                v195 = (char *)v183 - (char *)v25 + 64;
                if (v195 >= 65)
                {
                  v196 = (((unint64_t)v195 >> 6) - 2) >> 1;
                  v197 = &v25[4 * v196];
                  v198 = 32;
                  while (1)
                  {
                    v199 = *(_QWORD *)((char *)v197 + v198);
                    v200 = *(_QWORD *)((char *)v183 + v198);
                    if (v199 != v200)
                      break;
                    v198 -= 8;
                    if (v198 == -8)
                      goto LABEL_206;
                  }
                  if (v199 < v200)
                  {
                    v204 = v183[2];
                    v203 = v183[3];
                    a14 = v183[1];
                    a15 = v204;
                    a16 = v203;
                    a13 = *v183;
                    do
                    {
                      v205 = v197;
                      v206 = *((_DWORD *)v197 + 12);
                      v207 = v205[2];
                      v183[1] = v205[1];
                      v183[2] = v207;
                      v208 = *v205;
                      *((_DWORD *)v183 + 12) = v206;
                      *v183 = v208;
                      if (!v196)
                        break;
                      v196 = (v196 - 1) >> 1;
                      v197 = &v25[4 * v196];
                      v209 = 32;
                      while (1)
                      {
                        v210 = *(_QWORD *)((char *)v197 + v209);
                        v211 = *(_QWORD *)((char *)&a13 + v209);
                        if (v210 != v211)
                          break;
                        v209 -= 8;
                        if (v209 == -8)
                          goto LABEL_217;
                      }
                      v183 = v205;
                    }
                    while (v210 < v211);
LABEL_217:
                    v212 = a16;
                    v213 = a15;
                    v205[1] = a14;
                    v205[2] = v213;
                    v214 = a13;
                    *((_DWORD *)v205 + 12) = v212;
                    *v205 = v214;
                  }
                }
              }
LABEL_206:
              ;
            }
            while (v177-- > 2);
          }
          return result;
        }
        v28 = v27 >> 1;
        v29 = &v25[4 * (v27 >> 1)];
        if ((unint64_t)v26 <= 0x2000)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(&v23[4 * (v27 >> 1)], v23, v268);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v23, &v23[4 * (v27 >> 1)], v268);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v23 + 4, v29 - 4, (__int128 *)(a2 - 128));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v23 + 8, &v23[4 * v28 + 4], (__int128 *)(a2 - 192));
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(v29 - 4, v29, &v23[4 * v28 + 4]);
          v34 = v23[1];
          v35 = v23[3];
          a15 = v23[2];
          a16 = v35;
          a14 = v34;
          a13 = *v23;
          v37 = v29[1];
          v36 = v29[2];
          v38 = *v29;
          *((_DWORD *)v23 + 12) = *((_DWORD *)v29 + 12);
          v23[1] = v37;
          v23[2] = v36;
          *v23 = v38;
          v40 = a14;
          v39 = a15;
          v41 = a13;
          *((_DWORD *)v29 + 12) = a16;
          v29[1] = v40;
          v29[2] = v39;
          *v29 = v41;
        }
        --v21;
        if ((v20 & 1) == 0)
        {
          v42 = 0;
          while (1)
          {
            v43 = *(_QWORD *)((char *)v23 + v42 - 32);
            v44 = *(_QWORD *)((char *)v23 + v42 + 32);
            if (v43 != v44)
              break;
            v42 -= 8;
            if (v42 == -40)
              goto LABEL_13;
          }
          if (v43 >= v44)
          {
LABEL_13:
            v45 = 0;
            v47 = v23[2];
            v46 = v23[3];
            vars0 = v23[1];
            v271 = v47;
            v274 = v46;
            v269 = *v23;
            while (1)
            {
              v48 = *(_QWORD *)((char *)&v269 + v45 + 32);
              v49 = *(_QWORD *)(a2 + v45 - 32);
              v50 = v48 >= v49;
              if (v48 != v49)
                break;
              v45 -= 8;
              if (v45 == -40)
              {
                v51 = v23;
                while (1)
                {
LABEL_75:
                  v25 = v51 + 4;
                  if ((unint64_t)(v51 + 4) >= a2)
                    goto LABEL_83;
                  v94 = 0;
                  while (1)
                  {
                    v95 = *(_QWORD *)(v24 + v94);
                    v96 = *(_QWORD *)((char *)v51 + v94 + 96);
                    if (v95 != v96)
                      break;
                    v94 -= 8;
                    if (v94 == -40)
                      goto LABEL_81;
                  }
                  v30 = v95 < v96;
LABEL_81:
                  v51 += 4;
                  if (v95 != v96)
                  {
                    v51 = v25;
                    if (v30)
                      goto LABEL_83;
                  }
                }
              }
            }
            v90 = v23;
            v51 = v23;
            if (v50)
              goto LABEL_75;
            while (1)
            {
              v91 = 0;
              v25 = v90 + 4;
              while (1)
              {
                v92 = *(_QWORD *)(v24 + v91);
                v93 = *(_QWORD *)((char *)v90 + v91 + 96);
                if (v92 != v93)
                  break;
                v91 -= 8;
                if (v91 == -40)
                  goto LABEL_72;
              }
              v30 = v92 < v93;
LABEL_72:
              v90 += 4;
              if (v92 != v93)
              {
                v90 = v25;
                if (v30)
                  break;
              }
            }
LABEL_83:
            v97 = a2;
            if ((unint64_t)v25 < a2)
            {
              v98 = a2;
              do
              {
                v99 = 0;
                v97 = v98 - 64;
                while (1)
                {
                  v100 = *(_QWORD *)(v24 + v99);
                  v101 = *(_QWORD *)(v98 + v99 - 32);
                  if (v100 != v101)
                    break;
                  v99 -= 8;
                  if (v99 == -40)
                    goto LABEL_105;
                }
                v98 -= 64;
              }
              while (v100 < v101);
            }
LABEL_105:
            while ((unint64_t)v25 < v97)
            {
              v102 = v25[1];
              v103 = v25[3];
              a15 = v25[2];
              a16 = v103;
              a14 = v102;
              a13 = *v25;
              v105 = *(_OWORD *)(v97 + 16);
              v104 = *(_OWORD *)(v97 + 32);
              v106 = *(_OWORD *)v97;
              *((_DWORD *)v25 + 12) = *(_DWORD *)(v97 + 48);
              v25[1] = v105;
              v25[2] = v104;
              *v25 = v106;
              v108 = a14;
              v107 = a15;
              v109 = a13;
              *(_DWORD *)(v97 + 48) = a16;
              *(_OWORD *)(v97 + 16) = v108;
              *(_OWORD *)(v97 + 32) = v107;
              *(_OWORD *)v97 = v109;
              v110 = v25;
              while (1)
              {
                v111 = 0;
                v25 = v110 + 4;
                while (1)
                {
                  v112 = *(_QWORD *)(v24 + v111);
                  v113 = *(_QWORD *)((char *)v110 + v111 + 96);
                  if (v112 != v113)
                    break;
                  v111 -= 8;
                  if (v111 == -40)
                    goto LABEL_97;
                }
                v31 = v112 < v113;
LABEL_97:
                v110 += 4;
                if (v112 != v113)
                {
                  v110 = v25;
                  if (v31)
                    break;
                }
              }
              v114 = v97;
              do
              {
                v115 = 0;
                v97 = v114 - 64;
                while (1)
                {
                  v116 = *(_QWORD *)(v24 + v115);
                  v117 = *(_QWORD *)(v114 + v115 - 32);
                  if (v116 != v117)
                    break;
                  v115 -= 8;
                  if (v115 == -40)
                    goto LABEL_105;
                }
                v114 -= 64;
              }
              while (v116 < v117);
            }
            v118 = v25 - 4;
            if (v25 - 4 != v23)
            {
              v119 = *((_DWORD *)v25 - 4);
              v120 = *(v25 - 2);
              v23[1] = *(v25 - 3);
              v23[2] = v120;
              v121 = *v118;
              *((_DWORD *)v23 + 12) = v119;
              *v23 = v121;
            }
            v20 = 0;
            *(v25 - 3) = vars0;
            *(v25 - 2) = v271;
            v122 = v269;
            *((_DWORD *)v25 - 4) = v274;
            *v118 = v122;
            continue;
          }
        }
        v53 = v23[2];
        v52 = v23[3];
        vars0 = v23[1];
        v272 = v53;
        v275 = v52;
        v269 = *v23;
        v54 = v23;
        do
        {
          v55 = 0;
          v56 = v54;
          v54 += 4;
          while (1)
          {
            v57 = *(_QWORD *)((char *)v56 + v55 + 96);
            v58 = *(_QWORD *)((char *)&v269 + v55 + 32);
            if (v57 != v58)
              break;
            v55 -= 8;
            if (v55 == -40)
              goto LABEL_24;
          }
        }
        while (v57 < v58);
LABEL_24:
        v59 = a2;
        if (v56 == v23)
        {
          v64 = a2;
          while ((unint64_t)v54 < v64)
          {
            v65 = 0;
            v61 = v64 - 64;
            while (1)
            {
              v66 = *(_QWORD *)(v64 + v65 - 32);
              v67 = *(_QWORD *)(v24 + v65);
              if (v66 != v67)
                break;
              v65 -= 8;
              if (v65 == -40)
                goto LABEL_40;
            }
            v32 = v66 < v67;
LABEL_40:
            v64 -= 64;
            if (v66 != v67)
            {
              v64 = v61;
              if (v32)
                goto LABEL_44;
            }
          }
          v61 = v64;
        }
        else
        {
          while (1)
          {
            v60 = 0;
            v61 = v59 - 64;
            while (1)
            {
              v62 = *(_QWORD *)(v59 + v60 - 32);
              v63 = *(_QWORD *)(v24 + v60);
              if (v62 != v63)
                break;
              v60 -= 8;
              if (v60 == -40)
                goto LABEL_30;
            }
            v32 = v62 < v63;
LABEL_30:
            v59 -= 64;
            if (v62 != v63)
            {
              v59 = v61;
              if (v32)
                break;
            }
          }
        }
LABEL_44:
        if ((unint64_t)v54 < v61)
        {
          v68 = v54;
          v69 = v61;
          do
          {
            v71 = v68[3];
            a15 = v68[2];
            v70 = a15;
            a16 = v71;
            v72 = v68[1];
            a13 = *v68;
            v73 = a13;
            a14 = v72;
            v75 = *(_OWORD *)(v69 + 16);
            v74 = *(_OWORD *)(v69 + 32);
            v76 = *(_OWORD *)v69;
            *((_DWORD *)v68 + 12) = *(_DWORD *)(v69 + 48);
            v68[1] = v75;
            v68[2] = v74;
            *v68 = v76;
            v77 = a16;
            *(_OWORD *)(v69 + 16) = v72;
            *(_OWORD *)(v69 + 32) = v70;
            *(_OWORD *)v69 = v73;
            *(_DWORD *)(v69 + 48) = v77;
            do
            {
              v78 = 0;
              v56 = v68;
              v68 += 4;
              while (1)
              {
                v79 = *(_QWORD *)((char *)v56 + v78 + 96);
                v80 = *(_QWORD *)(v24 + v78);
                if (v79 != v80)
                  break;
                v78 -= 8;
                if (v78 == -40)
                  goto LABEL_52;
              }
            }
            while (v79 < v80);
            while (1)
            {
LABEL_52:
              v81 = 0;
              v82 = v69 - 64;
              while (1)
              {
                v83 = *(_QWORD *)(v69 + v81 - 32);
                v84 = *(_QWORD *)(v24 + v81);
                if (v83 != v84)
                  break;
                v81 -= 8;
                if (v81 == -40)
                  goto LABEL_57;
              }
              v33 = v83 < v84;
LABEL_57:
              v69 -= 64;
              if (v83 != v84)
              {
                v69 = v82;
                if (v33)
                  break;
              }
            }
            v69 = v82;
          }
          while ((unint64_t)v68 < v82);
        }
        if (v56 != v23)
        {
          v85 = *((_DWORD *)v56 + 12);
          v86 = v56[2];
          v23[1] = v56[1];
          v23[2] = v86;
          v87 = *v56;
          *((_DWORD *)v23 + 12) = v85;
          *v23 = v87;
        }
        v56[1] = vars0;
        v56[2] = v272;
        v88 = v269;
        *((_DWORD *)v56 + 12) = v275;
        *v56 = v88;
        if ((unint64_t)v54 < v61)
        {
LABEL_65:
          result = std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *,false>(v23, v56, v21, v20 & 1);
          v20 = 0;
          v25 = v56 + 4;
          continue;
        }
        v89 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>((char *)v23, (char *)v56);
        v25 = v56 + 4;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>((char *)v56 + 64, (char *)a2);
        if (!(_DWORD)result)
        {
          if (v89)
            continue;
          goto LABEL_65;
        }
        a2 = (unint64_t)v56;
        if (!v89)
          goto LABEL_2;
        return result;
    }
  }
}

_OWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(_OWORD *result, __int128 *a2, __int128 *a3)
{
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v5 = 32;
  while (1)
  {
    v6 = *(_QWORD *)((char *)a2 + v5);
    v7 = *(_QWORD *)((char *)result + v5);
    if (v6 != v7)
      break;
    v5 -= 8;
    if (v5 == -8)
      goto LABEL_6;
  }
  v3 = v6 < v7;
LABEL_6:
  v8 = v6 != v7 && v3;
  v9 = 32;
  while (1)
  {
    v10 = *(_QWORD *)((char *)a3 + v9);
    v11 = *(_QWORD *)((char *)a2 + v9);
    if (v10 != v11)
      break;
    v9 -= 8;
    if (v9 == -8)
      goto LABEL_11;
  }
  v4 = v10 < v11;
LABEL_11:
  if (v8)
  {
    if (v10 != v11 && v4)
    {
      v12 = result[2];
      v45 = result[3];
      v13 = *result;
      v14 = result[1];
      v16 = a3[1];
      v15 = a3[2];
      v17 = *a3;
      *((_DWORD *)result + 12) = *((_DWORD *)a3 + 12);
      result[1] = v16;
      result[2] = v15;
      *result = v17;
LABEL_27:
      a3[1] = v14;
      a3[2] = v12;
      *a3 = v13;
      *((_DWORD *)a3 + 12) = v45;
      return result;
    }
    v27 = result[2];
    v47 = result[3];
    v28 = *result;
    v29 = result[1];
    v31 = a2[1];
    v30 = a2[2];
    v32 = *a2;
    *((_DWORD *)result + 12) = *((_DWORD *)a2 + 12);
    result[1] = v31;
    result[2] = v30;
    *result = v32;
    a2[1] = v29;
    a2[2] = v27;
    *a2 = v28;
    *((_DWORD *)a2 + 12) = v47;
    v33 = 32;
    while (1)
    {
      v34 = *(_QWORD *)((char *)a3 + v33);
      v35 = *(_QWORD *)((char *)a2 + v33);
      if (v34 != v35)
        break;
      v33 -= 8;
      if (v33 == -8)
        return result;
    }
    if (v34 < v35)
    {
      v12 = a2[2];
      v45 = a2[3];
      v13 = *a2;
      v14 = a2[1];
      v43 = a3[1];
      v42 = a3[2];
      v44 = *a3;
      *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
      a2[1] = v43;
      a2[2] = v42;
      *a2 = v44;
      goto LABEL_27;
    }
  }
  else if (v10 != v11 && v4)
  {
    v18 = a2[2];
    v46 = a2[3];
    v19 = *a2;
    v20 = a2[1];
    v22 = a3[1];
    v21 = a3[2];
    v23 = *a3;
    *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
    a2[1] = v22;
    a2[2] = v21;
    *a2 = v23;
    a3[1] = v20;
    a3[2] = v18;
    *a3 = v19;
    *((_DWORD *)a3 + 12) = v46;
    v24 = 32;
    while (1)
    {
      v25 = *(_QWORD *)((char *)a2 + v24);
      v26 = *(_QWORD *)((char *)result + v24);
      if (v25 != v26)
        break;
      v24 -= 8;
      if (v24 == -8)
        return result;
    }
    if (v25 < v26)
    {
      v36 = result[2];
      v48 = result[3];
      v37 = *result;
      v38 = result[1];
      v40 = a2[1];
      v39 = a2[2];
      v41 = *a2;
      *((_DWORD *)result + 12) = *((_DWORD *)a2 + 12);
      result[1] = v40;
      result[2] = v39;
      *result = v41;
      a2[1] = v38;
      a2[2] = v36;
      *a2 = v37;
      *((_DWORD *)a2 + 12) = v48;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(char *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 vars0;

  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = 0;
      v7 = a2 - 64;
      while (1)
      {
        v8 = *(_QWORD *)&a2[v6 - 32];
        v9 = *(_QWORD *)&a1[v6 + 32];
        if (v8 != v9)
          break;
        v6 -= 8;
        if (v6 == -40)
          return 1;
      }
      if (v8 < v9)
      {
        v36 = *((_OWORD *)a1 + 2);
        vars0 = *((_OWORD *)a1 + 3);
        v37 = *(_OWORD *)a1;
        v38 = *((_OWORD *)a1 + 1);
        v40 = *((_OWORD *)a2 - 3);
        v39 = *((_OWORD *)a2 - 2);
        v41 = *(_OWORD *)v7;
        *((_DWORD *)a1 + 12) = *((_DWORD *)a2 - 4);
        *((_OWORD *)a1 + 1) = v40;
        *((_OWORD *)a1 + 2) = v39;
        *(_OWORD *)a1 = v41;
        *((_OWORD *)a2 - 3) = v38;
        *((_OWORD *)a2 - 2) = v36;
        *(_OWORD *)v7 = v37;
        *((_DWORD *)a2 - 4) = vars0;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(a1, (__int128 *)a1 + 4, (__int128 *)a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>((__int128 *)a1, (__int128 *)a1 + 4, (__int128 *)a1 + 8, (uint64_t)(a2 - 64));
      return 1;
    case 5:
      v29 = (__int128 *)(a1 + 64);
      v30 = (__int128 *)(a1 + 128);
      v31 = (__int128 *)(a1 + 192);
      v32 = a2 - 64;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>((__int128 *)a1, (__int128 *)a1 + 4, (__int128 *)a1 + 8, (uint64_t)(a1 + 192));
      v33 = 0;
      while (1)
      {
        v34 = *(_QWORD *)&a2[v33 - 32];
        v35 = *(_QWORD *)&a1[v33 + 224];
        if (v34 != v35)
          break;
        v33 -= 8;
        if (v33 == -40)
          return 1;
      }
      if (v34 < v35)
      {
        v42 = 0;
        v43 = *((_OWORD *)a1 + 14);
        vars0 = *((_OWORD *)a1 + 15);
        v44 = *v31;
        v45 = *((_OWORD *)a1 + 13);
        v47 = *((_OWORD *)a2 - 3);
        v46 = *((_OWORD *)a2 - 2);
        v48 = *(_OWORD *)v32;
        *((_DWORD *)a1 + 60) = *((_DWORD *)a2 - 4);
        *((_OWORD *)a1 + 13) = v47;
        *((_OWORD *)a1 + 14) = v46;
        *v31 = v48;
        *((_DWORD *)a2 - 4) = vars0;
        *((_OWORD *)a2 - 3) = v45;
        *((_OWORD *)a2 - 2) = v43;
        *(_OWORD *)v32 = v44;
        result = 1;
        while (1)
        {
          v49 = *(_QWORD *)&a1[v42 + 224];
          v50 = *(_QWORD *)&a1[v42 + 160];
          if (v49 != v50)
            break;
          v42 -= 8;
          if (v42 == -40)
            return result;
        }
        if (v49 < v50)
        {
          v51 = 0;
          v52 = *((_OWORD *)a1 + 10);
          vars0 = *((_OWORD *)a1 + 11);
          *((_DWORD *)a1 + 44) = *((_DWORD *)a1 + 60);
          *((_DWORD *)a1 + 60) = vars0;
          v54 = *v30;
          v53 = *((_OWORD *)a1 + 9);
          v55 = *((_OWORD *)a1 + 13);
          *v30 = *v31;
          *((_OWORD *)a1 + 9) = v55;
          *((_OWORD *)a1 + 10) = *((_OWORD *)a1 + 14);
          *v31 = v54;
          *((_OWORD *)a1 + 13) = v53;
          *((_OWORD *)a1 + 14) = v52;
          result = 1;
          while (1)
          {
            v56 = *(_QWORD *)&a1[v51 + 160];
            v57 = *(_QWORD *)&a1[v51 + 96];
            if (v56 != v57)
              break;
            v51 -= 8;
            if (v51 == -40)
              return result;
          }
          if (v56 < v57)
          {
            v58 = 0;
            v59 = *((_OWORD *)a1 + 6);
            vars0 = *((_OWORD *)a1 + 7);
            *((_DWORD *)a1 + 28) = *((_DWORD *)a1 + 44);
            *((_DWORD *)a1 + 44) = vars0;
            v61 = *v29;
            v60 = *((_OWORD *)a1 + 5);
            v62 = *((_OWORD *)a1 + 9);
            *v29 = *v30;
            *((_OWORD *)a1 + 5) = v62;
            *((_OWORD *)a1 + 6) = *((_OWORD *)a1 + 10);
            *v30 = v61;
            *((_OWORD *)a1 + 9) = v60;
            *((_OWORD *)a1 + 10) = v59;
            result = 1;
            while (1)
            {
              v63 = *(_QWORD *)&a1[v58 + 96];
              v64 = *(_QWORD *)&a1[v58 + 32];
              if (v63 != v64)
                break;
              v58 -= 8;
              if (v58 == -40)
                return result;
            }
            if (v63 < v64)
            {
              v65 = *((_OWORD *)a1 + 2);
              vars0 = *((_OWORD *)a1 + 3);
              v67 = *(_OWORD *)a1;
              v66 = *((_OWORD *)a1 + 1);
              v68 = *((_OWORD *)a1 + 5);
              *(_OWORD *)a1 = *v29;
              *((_OWORD *)a1 + 1) = v68;
              *((_OWORD *)a1 + 2) = *((_OWORD *)a1 + 6);
              *((_DWORD *)a1 + 12) = *((_DWORD *)a1 + 28);
              *v29 = v67;
              *((_OWORD *)a1 + 5) = v66;
              *((_OWORD *)a1 + 6) = v65;
              *((_DWORD *)a1 + 28) = vars0;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(a1, (__int128 *)a1 + 4, (__int128 *)a1 + 8);
      v11 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v12 = 0;
      v13 = a1 + 96;
      v14 = a1;
      break;
  }
  while (2)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)((char *)v14 + v15 + 224);
      v17 = *(_QWORD *)((char *)v14 + v15 + 160);
      if (v16 != v17)
        break;
      v15 -= 8;
      if (v15 == -40)
        goto LABEL_23;
    }
    if (v16 < v17)
    {
      v18 = *((_OWORD *)v11 + 1);
      v69 = *(_OWORD *)v11;
      v70 = v18;
      v19 = *((_OWORD *)v11 + 3);
      v71 = *((_OWORD *)v11 + 2);
      vars0 = v19;
      v20 = v13;
      v21 = v11;
      while (1)
      {
        v22 = *((_OWORD *)v10 + 1);
        *(_OWORD *)v21 = *(_OWORD *)v10;
        *((_OWORD *)v21 + 1) = v22;
        *((_OWORD *)v21 + 2) = *((_OWORD *)v10 + 2);
        *((_DWORD *)v21 + 12) = *((_DWORD *)v10 + 12);
        if (v10 == a1)
          break;
        v21 = v10;
        v23 = 0;
        v10 -= 64;
        while (1)
        {
          v24 = *(_QWORD *)(((unint64_t)&v69 | 0x20) + v23);
          v25 = *(_QWORD *)((char *)v20 + v23);
          if (v24 != v25)
            break;
          v23 -= 8;
          if (v23 == -40)
            goto LABEL_22;
        }
        v20 -= 4;
        if (v24 >= v25)
          goto LABEL_22;
      }
      v21 = a1;
LABEL_22:
      v26 = vars0;
      v27 = v71;
      *((_OWORD *)v21 + 1) = v70;
      *((_OWORD *)v21 + 2) = v27;
      v28 = v69;
      *((_DWORD *)v21 + 12) = v26;
      *(_OWORD *)v21 = v28;
      if (++v12 == 8)
        return v11 + 64 == a2;
    }
LABEL_23:
    v10 = v11;
    v14 += 4;
    v13 += 4;
    v11 += 64;
    if (v11 != a2)
      continue;
    return 1;
  }
}

_OWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  _OWORD *result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *>(a1, a2, a3);
  v9 = 32;
  while (1)
  {
    v10 = *(_QWORD *)(a4 + v9);
    v11 = *(_QWORD *)((char *)a3 + v9);
    if (v10 != v11)
      break;
    v9 -= 8;
    if (v9 == -8)
      return result;
  }
  if (v10 < v11)
  {
    v12 = a3[2];
    v36 = a3[3];
    v13 = *a3;
    v14 = a3[1];
    v16 = *(_OWORD *)(a4 + 16);
    v15 = *(_OWORD *)(a4 + 32);
    v17 = *(_OWORD *)a4;
    *((_DWORD *)a3 + 12) = *(_DWORD *)(a4 + 48);
    a3[1] = v16;
    a3[2] = v15;
    *a3 = v17;
    *(_OWORD *)(a4 + 16) = v14;
    *(_OWORD *)(a4 + 32) = v12;
    *(_OWORD *)a4 = v13;
    *(_DWORD *)(a4 + 48) = v36;
    v18 = 32;
    while (1)
    {
      v19 = *(_QWORD *)((char *)a3 + v18);
      v20 = *(_QWORD *)((char *)a2 + v18);
      if (v19 != v20)
        break;
      v18 -= 8;
      if (v18 == -8)
        return result;
    }
    if (v19 < v20)
    {
      v21 = a2[2];
      v37 = a2[3];
      v22 = *a2;
      v23 = a2[1];
      v25 = a3[1];
      v24 = a3[2];
      v26 = *a3;
      *((_DWORD *)a2 + 12) = *((_DWORD *)a3 + 12);
      a2[1] = v25;
      a2[2] = v24;
      *a2 = v26;
      a3[1] = v23;
      a3[2] = v21;
      *a3 = v22;
      *((_DWORD *)a3 + 12) = v37;
      v27 = 32;
      while (1)
      {
        v28 = *(_QWORD *)((char *)a2 + v27);
        v29 = *(_QWORD *)((char *)a1 + v27);
        if (v28 != v29)
          break;
        v27 -= 8;
        if (v27 == -8)
          return result;
      }
      if (v28 < v29)
      {
        v30 = a1[2];
        v38 = a1[3];
        v31 = *a1;
        v32 = a1[1];
        v34 = a2[1];
        v33 = a2[2];
        v35 = *a2;
        *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
        a1[1] = v34;
        a1[2] = v33;
        *a1 = v35;
        a2[1] = v32;
        a2[2] = v30;
        *a2 = v31;
        *((_DWORD *)a2 + 12) = v38;
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 32);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 32 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *,false>(__int128 *a1, __int128 *a2, unint64_t a3, unint64_t a4, unint64_t a5, __n128 a6, uint64_t a7, BOOL a8)
{
  char v8;
  unint64_t v9;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 *v37;
  unint64_t v38;
  unint64_t v39;
  __int128 *v40;
  uint64_t v41;
  __int128 *v42;
  unint64_t v43;
  unint64_t v44;
  __int128 *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 *v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  BOOL v63;
  double v64;
  __int128 *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int128 *v72;
  __int128 *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  __int128 *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __n128 *v88;
  __n128 v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  __int128 *v93;
  __int128 *v94;
  __int128 *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __int128 *v99;
  BOOL v101;
  __int128 *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int128 *v106;
  __int128 *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int64_t v111;
  __int128 *v112;
  __int128 *v113;
  int64_t v114;
  int64_t v115;
  uint64_t v116;
  __int128 *v117;
  uint64_t v118;
  unint64_t v119;
  __int128 *v120;
  uint64_t v121;
  unint64_t v122;
  __int128 *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  __n128 *v134;
  __n128 *v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  __n128 v141;
  __n128 v142;
  uint64_t v143;
  unint64_t v144;
  __int128 *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  __int128 *v150;
  __int128 v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  __int128 v155;
  __n128 v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  __int128 *v165;
  __int128 *v166;
  uint64_t v167;
  __int128 *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  __int128 v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  __int128 v176;
  unint64_t v177;
  unint64_t v178;
  __int128 *v180;
  _BYTE v181[32];
  _BYTE var10[32];

  v8 = a4;
  v9 = a3;
  v12 = (unint64_t)v181 | 0x10;
LABEL_2:
  v180 = a2 - 2;
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (char *)a2 - (char *)v13;
    v15 = ((char *)a2 - (char *)v13) >> 5;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return a6.n128_f64[0];
      case 2uLL:
        v90 = 0;
        while (1)
        {
          v91 = *(_QWORD *)((char *)a2 + v90 - 16);
          v92 = *(_QWORD *)((char *)v13 + v90 + 16);
          if (v91 != v92)
            break;
          v90 -= 8;
          if (v90 == -24)
            return a6.n128_f64[0];
        }
        if (v91 < v92)
        {
          v155 = v13[1];
          *(_OWORD *)var10 = *v13;
          *(_OWORD *)&var10[16] = v155;
          v156 = (__n128)*v180;
          *(__int128 *)((char *)v13 + 15) = *(__int128 *)((char *)a2 - 17);
          *v13 = (__int128)v156;
          a6 = *(__n128 *)var10;
          *(__int128 *)((char *)a2 - 17) = *(_OWORD *)&var10[15];
          *v180 = (__int128)a6;
        }
        return a6.n128_f64[0];
      case 3uLL:
        a6.n128_f64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v13, v13 + 2, v180, a6.n128_f64[0]);
        return a6.n128_f64[0];
      case 4uLL:
        a6.n128_f64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v13, v13 + 2, v13 + 4, v180, a6.n128_f64[0]);
        return a6.n128_f64[0];
      case 5uLL:
        v93 = v13 + 2;
        v94 = v13 + 4;
        v95 = v13 + 6;
        a6.n128_f64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v13, v13 + 2, v13 + 4, v13 + 6, a6.n128_f64[0]);
        v96 = 0;
        while (1)
        {
          v97 = *(_QWORD *)((char *)a2 + v96 - 16);
          v98 = *(_QWORD *)((char *)v13 + v96 + 112);
          if (v97 != v98)
            break;
          v96 -= 8;
          if (v96 == -24)
            return a6.n128_f64[0];
        }
        if (v97 < v98)
        {
          v157 = 0;
          v158 = v13[7];
          *(_OWORD *)var10 = *v95;
          v159 = *(_OWORD *)var10;
          *(_OWORD *)&var10[16] = v158;
          a6 = *(__n128 *)((char *)a2 - 17);
          *v95 = *v180;
          *(__int128 *)((char *)v13 + 111) = (__int128)a6;
          a6.n128_u64[0] = *(_QWORD *)&var10[15];
          *(__int128 *)((char *)a2 - 17) = *(_OWORD *)&var10[15];
          *v180 = v159;
          while (1)
          {
            v160 = *(_QWORD *)((char *)v13 + v157 + 112);
            v161 = *(_QWORD *)((char *)v13 + v157 + 80);
            if (v160 != v161)
              break;
            v157 -= 8;
            if (v157 == -24)
              return a6.n128_f64[0];
          }
          if (v160 < v161)
          {
            v171 = 0;
            v172 = v13[5];
            *(_OWORD *)var10 = *v94;
            a6 = *(__n128 *)var10;
            *(_OWORD *)&var10[16] = v172;
            *v94 = *v95;
            *(__int128 *)((char *)v13 + 79) = *(__int128 *)((char *)v13 + 111);
            *v95 = (__int128)a6;
            a6.n128_u64[0] = *(_QWORD *)&var10[15];
            *(__int128 *)((char *)v13 + 111) = *(_OWORD *)&var10[15];
            while (1)
            {
              v173 = *(_QWORD *)((char *)v13 + v171 + 80);
              v174 = *(_QWORD *)((char *)v13 + v171 + 48);
              if (v173 != v174)
                break;
              v171 -= 8;
              if (v171 == -24)
                return a6.n128_f64[0];
            }
            if (v173 < v174)
            {
              v175 = 0;
              v176 = v13[3];
              *(_OWORD *)var10 = *v93;
              a6 = *(__n128 *)var10;
              *(_OWORD *)&var10[16] = v176;
              *v93 = *v94;
              *(__int128 *)((char *)v13 + 47) = *(__int128 *)((char *)v13 + 79);
              *v94 = (__int128)a6;
              a6.n128_u64[0] = *(_QWORD *)&var10[15];
              *(__int128 *)((char *)v13 + 79) = *(_OWORD *)&var10[15];
              while (1)
              {
                v177 = *(_QWORD *)((char *)v13 + v175 + 48);
                v178 = *(_QWORD *)((char *)v13 + v175 + 16);
                if (v177 != v178)
                  break;
                v175 -= 8;
                if (v175 == -24)
                  return a6.n128_f64[0];
              }
              if (v177 < v178)
              {
                a6 = (__n128)v13[1];
                *(_OWORD *)var10 = *v13;
                *(__n128 *)&var10[16] = a6;
                *v13 = *v93;
                *(__int128 *)((char *)v13 + 15) = *(__int128 *)((char *)v13 + 47);
                *v93 = *(_OWORD *)var10;
                a6.n128_u64[0] = *(_QWORD *)&var10[15];
                *(__int128 *)((char *)v13 + 47) = *(_OWORD *)&var10[15];
              }
            }
          }
        }
        return a6.n128_f64[0];
      default:
        if (v14 <= 767)
        {
          v99 = v13 + 2;
          v101 = v13 == a2 || v99 == a2;
          if ((v8 & 1) != 0)
          {
            if (!v101)
            {
              v102 = v13;
              do
              {
                v103 = 0;
                while (1)
                {
                  v104 = *(_QWORD *)((char *)v102 + v103 + 48);
                  v105 = *(_QWORD *)((char *)v102 + v103 + 16);
                  if (v104 != v105)
                    break;
                  v103 -= 8;
                  if (v103 == -24)
                    goto LABEL_147;
                }
                if (v104 < v105)
                {
                  *(_OWORD *)&var10[16] = v99[1];
                  *(_OWORD *)var10 = *v99;
                  v106 = v102;
                  v107 = v99;
                  while (1)
                  {
                    *v107 = *v106;
                    *(__int128 *)((char *)v107 + 15) = *(__int128 *)((char *)v106 + 15);
                    if (v106 == v13)
                      break;
                    v107 = v106;
                    v108 = 0;
                    v106 -= 2;
                    while (1)
                    {
                      v109 = *(_QWORD *)(((unint64_t)var10 | 0x10) + v108);
                      v110 = *(_QWORD *)((char *)v107 + v108 - 16);
                      if (v109 != v110)
                        break;
                      v108 -= 8;
                      if (v108 == -24)
                        goto LABEL_146;
                    }
                    if (v109 >= v110)
                      goto LABEL_146;
                  }
                  v107 = v13;
LABEL_146:
                  a6 = *(__n128 *)var10;
                  *(__int128 *)((char *)v107 + 15) = *(_OWORD *)&var10[15];
                  *v107 = (__int128)a6;
                }
LABEL_147:
                v99 += 2;
                v102 += 2;
              }
              while (v99 != a2);
            }
          }
          else if (!v101)
          {
            do
            {
              v162 = 0;
              while (1)
              {
                v163 = *(_QWORD *)((char *)a1 + v162 + 48);
                v164 = *(_QWORD *)((char *)a1 + v162 + 16);
                if (v163 != v164)
                  break;
                v162 -= 8;
                if (v162 == -24)
                  goto LABEL_238;
              }
              if (v163 < v164)
              {
                *(_OWORD *)&var10[16] = v99[1];
                *(_OWORD *)var10 = *v99;
                v165 = a1;
                v166 = v99;
                do
                {
                  v167 = 0;
                  v168 = v166;
                  v166 = v165;
                  *v168 = *v165;
                  *(__int128 *)((char *)v168 + 15) = *(__int128 *)((char *)v165 + 15);
                  v165 -= 2;
                  while (1)
                  {
                    v169 = *(_QWORD *)&var10[v167 + 16];
                    v170 = *(_QWORD *)((char *)v166 + v167 - 16);
                    if (v169 != v170)
                      break;
                    v167 -= 8;
                    if (v167 == -24)
                      goto LABEL_237;
                  }
                }
                while (v169 < v170);
LABEL_237:
                a6 = *(__n128 *)var10;
                *(__int128 *)((char *)v166 + 15) = *(_OWORD *)&var10[15];
                *v166 = (__int128)a6;
              }
LABEL_238:
              v99 += 2;
              a1 += 2;
            }
            while (v99 != a2);
          }
          return a6.n128_f64[0];
        }
        if (!v9)
        {
          if (v13 != a2)
          {
            v111 = (v15 - 2) >> 1;
            v112 = &v13[4 * v111];
            v113 = &v13[2 * v111];
            v114 = v111;
            do
            {
              v115 = v114;
              if (v111 >= v114)
              {
                v116 = (2 * v114) | 1;
                v117 = &v13[2 * v116];
                if (2 * v115 + 2 < (uint64_t)v15)
                {
                  v118 = 0;
                  while (1)
                  {
                    v119 = *(_QWORD *)((char *)v112 + v118 + 48);
                    a4 = *(_QWORD *)((char *)v112 + v118 + 80);
                    if (v119 != a4)
                      break;
                    v118 -= 8;
                    if (v118 == -24)
                      goto LABEL_158;
                  }
                  LOBYTE(a5) = v119 < a4;
LABEL_158:
                  if (((v119 != a4) & a5) != 0)
                  {
                    v117 += 2;
                    v116 = 2 * v115 + 2;
                  }
                }
                v120 = &v13[2 * v115];
                v121 = 16;
                while (1)
                {
                  v122 = *(_QWORD *)((char *)v117 + v121);
                  a3 = *(_QWORD *)((char *)v113 + v121);
                  if (v122 != a3)
                    break;
                  v121 -= 8;
                  if (v121 == -8)
                    goto LABEL_165;
                }
                if (v122 < a3)
                  goto LABEL_185;
LABEL_165:
                *(_OWORD *)&var10[16] = v120[1];
                *(_OWORD *)var10 = *v120;
                while (1)
                {
                  v123 = v117;
                  v124 = *v117;
                  *(__int128 *)((char *)v120 + 15) = *(__int128 *)((char *)v117 + 15);
                  *v120 = v124;
                  if (v111 < v116)
                    break;
                  v125 = (2 * v116) | 1;
                  v117 = &v13[2 * v125];
                  v126 = 2 * v116 + 2;
                  if (v126 >= (uint64_t)v15)
                  {
                    v116 = (2 * v116) | 1;
                  }
                  else
                  {
                    a4 = 0;
                    v127 = &v13[4 * v116];
                    while (1)
                    {
                      a5 = *(_QWORD *)((char *)v127 + a4 + 48);
                      v128 = *(_QWORD *)((char *)v127 + a4 + 80);
                      if (a5 != v128)
                        break;
                      a4 -= 8;
                      if (a4 == -24)
                        goto LABEL_174;
                    }
                    a8 = a5 < v128;
LABEL_174:
                    if (a5 != v128 && a8)
                    {
                      v117 += 2;
                      v116 = v126;
                    }
                    else
                    {
                      v116 = v125;
                    }
                  }
                  v129 = 16;
                  while (1)
                  {
                    v130 = *(_QWORD *)((char *)v117 + v129);
                    a3 = *(_QWORD *)&var10[v129];
                    if (v130 != a3)
                      break;
                    v129 -= 8;
                    if (v129 == -8)
                      goto LABEL_182;
                  }
                  LOBYTE(a4) = v130 < a3;
LABEL_182:
                  v120 = v123;
                  if (v130 != a3)
                  {
                    v120 = v123;
                    if ((a4 & 1) != 0)
                      break;
                  }
                }
                v131 = *(_OWORD *)var10;
                *(__int128 *)((char *)v123 + 15) = *(_OWORD *)&var10[15];
                *v123 = v131;
              }
LABEL_185:
              v114 = v115 - 1;
              v112 -= 4;
              v113 -= 2;
            }
            while (v115);
            v132 = (unint64_t)v14 >> 5;
            do
            {
              v133 = 0;
              *(_OWORD *)&v181[16] = v13[1];
              *(_OWORD *)v181 = *v13;
              v134 = (__n128 *)v13;
              do
              {
                v135 = &v134[2 * v133];
                v136 = (__int128 *)&v135[2];
                v137 = (2 * v133) | 1;
                v133 = 2 * v133 + 2;
                if (v133 >= v132)
                {
                  v133 = v137;
                }
                else
                {
                  v138 = 0;
                  while (1)
                  {
                    v139 = v135[3].n128_u64[v138];
                    v140 = v135[5].n128_u64[v138];
                    if (v139 != v140)
                      break;
                    if (--v138 == -3)
                      goto LABEL_195;
                  }
                  LOBYTE(a3) = v139 < v140;
LABEL_195:
                  if (((v139 != v140) & a3) != 0)
                    v136 = (__int128 *)&v135[4];
                  else
                    v133 = v137;
                }
                v141 = (__n128)*v136;
                *(__n128 *)((char *)v134 + 15) = *(__n128 *)((char *)v136 + 15);
                *v134 = v141;
                v134 = (__n128 *)v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
              a2 -= 2;
              if (v136 == a2)
              {
                a6 = *(__n128 *)v181;
                *(__int128 *)((char *)v136 + 15) = *(_OWORD *)&v181[15];
                *v136 = (__int128)a6;
              }
              else
              {
                v142 = (__n128)*a2;
                *(__int128 *)((char *)v136 + 15) = *(__int128 *)((char *)a2 + 15);
                *v136 = (__int128)v142;
                a6 = *(__n128 *)v181;
                *(__int128 *)((char *)a2 + 15) = *(_OWORD *)&v181[15];
                *a2 = (__int128)a6;
                v143 = (char *)v136 - (char *)v13 + 32;
                if (v143 >= 33)
                {
                  v144 = (((unint64_t)v143 >> 5) - 2) >> 1;
                  v145 = &v13[2 * v144];
                  v146 = 16;
                  while (1)
                  {
                    v147 = *(_QWORD *)((char *)v145 + v146);
                    v148 = *(_QWORD *)((char *)v136 + v146);
                    if (v147 != v148)
                      break;
                    v146 -= 8;
                    if (v146 == -8)
                      goto LABEL_206;
                  }
                  if (v147 < v148)
                  {
                    *(_OWORD *)&var10[16] = v136[1];
                    *(_OWORD *)var10 = *v136;
                    do
                    {
                      v150 = v145;
                      v151 = *v145;
                      *(__int128 *)((char *)v136 + 15) = *(__int128 *)((char *)v145 + 15);
                      *v136 = v151;
                      if (!v144)
                        break;
                      v144 = (v144 - 1) >> 1;
                      v145 = &v13[2 * v144];
                      v152 = 16;
                      while (1)
                      {
                        v153 = *(_QWORD *)((char *)v145 + v152);
                        v154 = *(_QWORD *)&var10[v152];
                        if (v153 != v154)
                          break;
                        v152 -= 8;
                        if (v152 == -8)
                          goto LABEL_217;
                      }
                      v136 = v150;
                    }
                    while (v153 < v154);
LABEL_217:
                    a6 = *(__n128 *)var10;
                    *(__int128 *)((char *)v150 + 15) = *(_OWORD *)&var10[15];
                    *v150 = (__int128)a6;
                  }
                }
              }
LABEL_206:
              ;
            }
            while (v132-- > 2);
          }
          return a6.n128_f64[0];
        }
        v16 = v15 >> 1;
        v17 = &v13[2 * (v15 >> 1)];
        if ((unint64_t)v14 <= 0x1000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(&a1[2 * (v15 >> 1)], a1, v180, a6.n128_f64[0]);
        }
        else
        {
          v18 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, &a1[2 * (v15 >> 1)], v180, a6.n128_f64[0]);
          v19 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1 + 2, v17 - 2, a2 - 4, v18);
          v20 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1 + 4, &a1[2 * v16 + 2], a2 - 6, v19);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v17 - 2, v17, &a1[2 * v16 + 2], v20);
          *(_OWORD *)&var10[16] = a1[1];
          *(_OWORD *)var10 = *a1;
          v25 = *(__int128 *)((char *)v17 + 15);
          *a1 = *v17;
          *(__int128 *)((char *)a1 + 15) = v25;
          v26 = *(_OWORD *)var10;
          *(__int128 *)((char *)v17 + 15) = *(_OWORD *)&var10[15];
          *v17 = v26;
        }
        --v9;
        if ((v8 & 1) == 0)
        {
          v27 = 0;
          while (1)
          {
            v28 = *(_QWORD *)((char *)a1 + v27 - 16);
            v29 = *(_QWORD *)((char *)a1 + v27 + 16);
            if (v28 != v29)
              break;
            v27 -= 8;
            if (v27 == -24)
              goto LABEL_13;
          }
          if (v28 >= v29)
          {
LABEL_13:
            v30 = 0;
            *(_OWORD *)&v181[16] = a1[1];
            *(_OWORD *)v181 = *a1;
            while (1)
            {
              v31 = *(_QWORD *)&v181[v30 + 16];
              v32 = *(_QWORD *)((char *)a2 + v30 - 16);
              v33 = v31 >= v32;
              if (v31 != v32)
                break;
              v30 -= 8;
              if (v30 == -24)
              {
                v34 = a1;
                while (1)
                {
LABEL_75:
                  v13 = v34 + 2;
                  if (v34 + 2 >= a2)
                    goto LABEL_83;
                  v69 = 0;
                  while (1)
                  {
                    v70 = *(_QWORD *)(v12 + v69);
                    v71 = *(_QWORD *)((char *)v34 + v69 + 48);
                    if (v70 != v71)
                      break;
                    v69 -= 8;
                    if (v69 == -24)
                      goto LABEL_81;
                  }
                  v21 = v70 < v71;
LABEL_81:
                  v34 += 2;
                  if (v70 != v71)
                  {
                    v34 = v13;
                    if (v21)
                      goto LABEL_83;
                  }
                }
              }
            }
            v65 = a1;
            v34 = a1;
            if (v33)
              goto LABEL_75;
            while (1)
            {
              v66 = 0;
              v13 = v65 + 2;
              while (1)
              {
                v67 = *(_QWORD *)(v12 + v66);
                v68 = *(_QWORD *)((char *)v65 + v66 + 48);
                if (v67 != v68)
                  break;
                v66 -= 8;
                if (v66 == -24)
                  goto LABEL_72;
              }
              v21 = v67 < v68;
LABEL_72:
              v65 += 2;
              if (v67 != v68)
              {
                v65 = v13;
                if (v21)
                  break;
              }
            }
LABEL_83:
            v72 = a2;
            if (v13 < a2)
            {
              v73 = a2;
              do
              {
                v74 = 0;
                v72 = v73 - 2;
                while (1)
                {
                  v75 = *(_QWORD *)(v12 + v74);
                  v76 = *(_QWORD *)((char *)v73 + v74 - 16);
                  if (v75 != v76)
                    break;
                  v74 -= 8;
                  if (v74 == -24)
                    goto LABEL_105;
                }
                v73 -= 2;
              }
              while (v75 < v76);
            }
LABEL_105:
            while (v13 < v72)
            {
              v77 = v13[1];
              *(_OWORD *)var10 = *v13;
              *(_OWORD *)&var10[16] = v77;
              v78 = *v72;
              *(__int128 *)((char *)v13 + 15) = *(__int128 *)((char *)v72 + 15);
              *v13 = v78;
              v79 = *(_OWORD *)var10;
              *(__int128 *)((char *)v72 + 15) = *(_OWORD *)&var10[15];
              *v72 = v79;
              v80 = v13;
              while (1)
              {
                v81 = 0;
                v13 = v80 + 2;
                while (1)
                {
                  v82 = *(_QWORD *)(v12 + v81);
                  v83 = *(_QWORD *)((char *)v80 + v81 + 48);
                  if (v82 != v83)
                    break;
                  v81 -= 8;
                  if (v81 == -24)
                    goto LABEL_97;
                }
                v22 = v82 < v83;
LABEL_97:
                v80 += 2;
                if (v82 != v83)
                {
                  v80 = v13;
                  if (v22)
                    break;
                }
              }
              v84 = v72;
              do
              {
                v85 = 0;
                v72 = v84 - 2;
                while (1)
                {
                  v86 = *(_QWORD *)(v12 + v85);
                  v87 = *(_QWORD *)((char *)v84 + v85 - 16);
                  if (v86 != v87)
                    break;
                  v85 -= 8;
                  if (v85 == -24)
                    goto LABEL_105;
                }
                v84 -= 2;
              }
              while (v86 < v87);
            }
            v88 = (__n128 *)(v13 - 2);
            if (v13 - 2 != a1)
            {
              v89 = *v88;
              *(__int128 *)((char *)a1 + 15) = *(__int128 *)((char *)v13 - 17);
              *a1 = (__int128)v89;
            }
            v8 = 0;
            a6 = *(__n128 *)v181;
            *(__int128 *)((char *)v13 - 17) = *(_OWORD *)&v181[15];
            *v88 = a6;
            continue;
          }
        }
        *(_OWORD *)&v181[16] = a1[1];
        *(_OWORD *)v181 = *a1;
        v35 = a1;
        do
        {
          v36 = 0;
          v37 = v35;
          v35 += 2;
          while (1)
          {
            v38 = *(_QWORD *)((char *)v37 + v36 + 48);
            v39 = *(_QWORD *)&v181[v36 + 16];
            if (v38 != v39)
              break;
            v36 -= 8;
            if (v36 == -24)
              goto LABEL_24;
          }
        }
        while (v38 < v39);
LABEL_24:
        v40 = a2;
        if (v37 == a1)
        {
          v45 = a2;
          while (v35 < v45)
          {
            v46 = 0;
            v42 = v45 - 2;
            while (1)
            {
              v47 = *(_QWORD *)((char *)v45 + v46 - 16);
              v48 = *(_QWORD *)(v12 + v46);
              if (v47 != v48)
                break;
              v46 -= 8;
              if (v46 == -24)
                goto LABEL_40;
            }
            v23 = v47 < v48;
LABEL_40:
            v45 -= 2;
            if (v47 != v48)
            {
              v45 = v42;
              if (v23)
                goto LABEL_44;
            }
          }
          v42 = v45;
        }
        else
        {
          while (1)
          {
            v41 = 0;
            v42 = v40 - 2;
            while (1)
            {
              v43 = *(_QWORD *)((char *)v40 + v41 - 16);
              v44 = *(_QWORD *)(v12 + v41);
              if (v43 != v44)
                break;
              v41 -= 8;
              if (v41 == -24)
                goto LABEL_30;
            }
            v23 = v43 < v44;
LABEL_30:
            v40 -= 2;
            if (v43 != v44)
            {
              v40 = v42;
              if (v23)
                break;
            }
          }
        }
LABEL_44:
        if (v35 < v42)
        {
          v49 = v35;
          v50 = v42;
          do
          {
            v51 = v49[1];
            *(_OWORD *)var10 = *v49;
            v52 = *(_OWORD *)var10;
            *(_OWORD *)&var10[16] = v51;
            v53 = *(__int128 *)((char *)v50 + 15);
            *v49 = *v50;
            *(__int128 *)((char *)v49 + 15) = v53;
            *(__int128 *)((char *)v50 + 15) = *(_OWORD *)&var10[15];
            *v50 = v52;
            do
            {
              v54 = 0;
              v37 = v49;
              v49 += 2;
              while (1)
              {
                v55 = *(_QWORD *)((char *)v37 + v54 + 48);
                v56 = *(_QWORD *)(v12 + v54);
                if (v55 != v56)
                  break;
                v54 -= 8;
                if (v54 == -24)
                  goto LABEL_52;
              }
            }
            while (v55 < v56);
            while (1)
            {
LABEL_52:
              v57 = 0;
              v58 = v50 - 2;
              while (1)
              {
                v59 = *(_QWORD *)((char *)v50 + v57 - 16);
                v60 = *(_QWORD *)(v12 + v57);
                if (v59 != v60)
                  break;
                v57 -= 8;
                if (v57 == -24)
                  goto LABEL_57;
              }
              v24 = v59 < v60;
LABEL_57:
              v50 -= 2;
              if (v59 != v60)
              {
                v50 = v58;
                if (v24)
                  break;
              }
            }
            v50 = v58;
          }
          while (v49 < v58);
        }
        if (v37 != a1)
        {
          v61 = *v37;
          *(__int128 *)((char *)a1 + 15) = *(__int128 *)((char *)v37 + 15);
          *a1 = v61;
        }
        v62 = *(_OWORD *)v181;
        *(__int128 *)((char *)v37 + 15) = *(_OWORD *)&v181[15];
        *v37 = v62;
        if (v35 < v42)
        {
LABEL_65:
          std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *,false>(a1, v37, v9, v8 & 1);
          v8 = 0;
          v13 = v37 + 2;
          continue;
        }
        v63 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, v37, *(double *)&v62);
        v13 = v37 + 2;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(v37 + 2, a2, v64))
        {
          if (v63)
            continue;
          goto LABEL_65;
        }
        a2 = v37;
        if (!v63)
          goto LABEL_2;
        return a6.n128_f64[0];
    }
  }
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(__int128 *a1, __int128 *a2, __int128 *a3, double result)
{
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 vars0;
  _BYTE vars0a[32];
  _BYTE vars0b[32];
  _BYTE vars0c[32];

  v6 = 16;
  while (1)
  {
    v7 = *(_QWORD *)((char *)a2 + v6);
    v8 = *(_QWORD *)((char *)a1 + v6);
    if (v7 != v8)
      break;
    v6 -= 8;
    if (v6 == -8)
      goto LABEL_6;
  }
  v4 = v7 < v8;
LABEL_6:
  v9 = v7 != v8 && v4;
  v10 = 16;
  while (1)
  {
    v11 = *(_QWORD *)((char *)a3 + v10);
    v12 = *(_QWORD *)((char *)a2 + v10);
    if (v11 != v12)
      break;
    v10 -= 8;
    if (v10 == -8)
      goto LABEL_11;
  }
  v5 = v11 < v12;
LABEL_11:
  if (v9)
  {
    if (v11 != v12 && v5)
    {
      v13 = *a1;
      vars0 = *a1;
      v14 = *(__int128 *)((char *)a3 + 15);
      *a1 = *a3;
      *(__int128 *)((char *)a1 + 15) = v14;
LABEL_27:
      *a3 = v13;
      result = *(double *)((char *)&vars0 + 15);
      *(__int128 *)((char *)a3 + 15) = *(__int128 *)((char *)&vars0 + 15);
      return result;
    }
    *(_OWORD *)vars0b = *a1;
    v20 = *a1;
    *(_OWORD *)&vars0b[16] = a1[1];
    v21 = *(__int128 *)((char *)a2 + 15);
    *a1 = *a2;
    *(__int128 *)((char *)a1 + 15) = v21;
    *a2 = v20;
    result = *(double *)&vars0b[15];
    *(__int128 *)((char *)a2 + 15) = *(_OWORD *)&vars0b[15];
    v22 = 16;
    while (1)
    {
      v23 = *(_QWORD *)((char *)a3 + v22);
      v24 = *(_QWORD *)((char *)a2 + v22);
      if (v23 != v24)
        break;
      v22 -= 8;
      if (v22 == -8)
        return result;
    }
    if (v23 < v24)
    {
      v13 = *a2;
      vars0 = *a2;
      v27 = *(__int128 *)((char *)a3 + 15);
      *a2 = *a3;
      *(__int128 *)((char *)a2 + 15) = v27;
      goto LABEL_27;
    }
  }
  else if (v11 != v12 && v5)
  {
    *(_OWORD *)vars0a = *a2;
    v15 = *a2;
    *(_OWORD *)&vars0a[16] = a2[1];
    v16 = *(__int128 *)((char *)a3 + 15);
    *a2 = *a3;
    *(__int128 *)((char *)a2 + 15) = v16;
    *a3 = v15;
    result = *(double *)&vars0a[15];
    *(__int128 *)((char *)a3 + 15) = *(_OWORD *)&vars0a[15];
    v17 = 16;
    while (1)
    {
      v18 = *(_QWORD *)((char *)a2 + v17);
      v19 = *(_QWORD *)((char *)a1 + v17);
      if (v18 != v19)
        break;
      v17 -= 8;
      if (v17 == -8)
        return result;
    }
    if (v18 < v19)
    {
      *(_OWORD *)vars0c = *a1;
      v25 = *a1;
      *(_OWORD *)&vars0c[16] = a1[1];
      v26 = *(__int128 *)((char *)a2 + 15);
      *a1 = *a2;
      *(__int128 *)((char *)a1 + 15) = v26;
      *a2 = v25;
      result = *(double *)&vars0c[15];
      *(__int128 *)((char *)a2 + 15) = *(_OWORD *)&vars0c[15];
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(__int128 *a1, __int128 *a2, double a3)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[32];

  v5 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = 0;
      v8 = a2 - 2;
      while (1)
      {
        v9 = *(_QWORD *)((char *)a2 + v7 - 16);
        v10 = *(_QWORD *)((char *)a1 + v7 + 16);
        if (v9 != v10)
          break;
        v7 -= 8;
        if (v7 == -24)
          return 1;
      }
      if (v9 < v10)
      {
        v34 = a1[1];
        *(_OWORD *)v54 = *a1;
        v33 = *(_OWORD *)v54;
        *(_OWORD *)&v54[16] = v34;
        v35 = *(__int128 *)((char *)a2 - 17);
        *a1 = *v8;
        *(__int128 *)((char *)a1 + 15) = v35;
        *v8 = v33;
        *(__int128 *)((char *)a2 - 17) = *(_OWORD *)&v54[15];
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      v26 = a1 + 2;
      v27 = a1 + 4;
      v28 = a1 + 6;
      v29 = a2 - 2;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a1 + 2, a1 + 4, a1 + 6, a3);
      v30 = 0;
      while (1)
      {
        v31 = *(_QWORD *)((char *)a2 + v30 - 16);
        v32 = *(_QWORD *)((char *)a1 + v30 + 112);
        if (v31 != v32)
          break;
        v30 -= 8;
        if (v30 == -24)
          return 1;
      }
      if (v31 < v32)
      {
        v36 = 0;
        v38 = a1[7];
        *(_OWORD *)v54 = *v28;
        v37 = *(_OWORD *)v54;
        *(_OWORD *)&v54[16] = v38;
        v39 = *(__int128 *)((char *)a2 - 17);
        *v28 = *v29;
        *(__int128 *)((char *)a1 + 111) = v39;
        *v29 = v37;
        *(__int128 *)((char *)a2 - 17) = *(_OWORD *)&v54[15];
        result = 1;
        while (1)
        {
          v40 = *(_QWORD *)((char *)a1 + v36 + 112);
          v41 = *(_QWORD *)((char *)a1 + v36 + 80);
          if (v40 != v41)
            break;
          v36 -= 8;
          if (v36 == -24)
            return result;
        }
        if (v40 < v41)
        {
          v42 = 0;
          v44 = a1[5];
          *(_OWORD *)v54 = *v27;
          v43 = *(_OWORD *)v54;
          *(_OWORD *)&v54[16] = v44;
          *v27 = *v28;
          *(__int128 *)((char *)a1 + 79) = *(__int128 *)((char *)a1 + 111);
          *v28 = v43;
          *(__int128 *)((char *)a1 + 111) = *(_OWORD *)&v54[15];
          result = 1;
          while (1)
          {
            v45 = *(_QWORD *)((char *)a1 + v42 + 80);
            v46 = *(_QWORD *)((char *)a1 + v42 + 48);
            if (v45 != v46)
              break;
            v42 -= 8;
            if (v42 == -24)
              return result;
          }
          if (v45 < v46)
          {
            v47 = 0;
            v49 = a1[3];
            *(_OWORD *)v54 = *v26;
            v48 = *(_OWORD *)v54;
            *(_OWORD *)&v54[16] = v49;
            *v26 = *v27;
            *(__int128 *)((char *)a1 + 47) = *(__int128 *)((char *)a1 + 79);
            *v27 = v48;
            *(__int128 *)((char *)a1 + 79) = *(_OWORD *)&v54[15];
            result = 1;
            while (1)
            {
              v50 = *(_QWORD *)((char *)a1 + v47 + 48);
              v51 = *(_QWORD *)((char *)a1 + v47 + 16);
              if (v50 != v51)
                break;
              v47 -= 8;
              if (v47 == -24)
                return result;
            }
            if (v50 < v51)
            {
              v53 = a1[1];
              *(_OWORD *)v54 = *a1;
              v52 = *(_OWORD *)v54;
              *(_OWORD *)&v54[16] = v53;
              *a1 = *v26;
              *(__int128 *)((char *)a1 + 15) = *(__int128 *)((char *)a1 + 47);
              *v26 = v52;
              *(__int128 *)((char *)a1 + 47) = *(_OWORD *)&v54[15];
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a1 + 2, a1 + 4, a3);
      v12 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v13 = 0;
      v14 = a1 + 3;
      v15 = a1;
      break;
  }
  while (2)
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)((char *)v15 + v16 + 112);
      v18 = *(_QWORD *)((char *)v15 + v16 + 80);
      if (v17 != v18)
        break;
      v16 -= 8;
      if (v16 == -24)
        goto LABEL_23;
    }
    if (v17 < v18)
    {
      v19 = v12[1];
      *(_OWORD *)v54 = *v12;
      *(_OWORD *)&v54[16] = v19;
      v20 = v14;
      v21 = v12;
      while (1)
      {
        *v21 = *v11;
        *(__int128 *)((char *)v21 + 15) = *(__int128 *)((char *)v11 + 15);
        if (v11 == a1)
          break;
        v21 = v11;
        v22 = 0;
        v11 -= 2;
        while (1)
        {
          v23 = *(_QWORD *)(((unint64_t)v54 | 0x10) + v22);
          v24 = *(_QWORD *)((char *)v20 + v22);
          if (v23 != v24)
            break;
          v22 -= 8;
          if (v22 == -24)
            goto LABEL_22;
        }
        v20 -= 2;
        if (v23 >= v24)
          goto LABEL_22;
      }
      v21 = a1;
LABEL_22:
      v25 = *(_OWORD *)v54;
      *(__int128 *)((char *)v21 + 15) = *(_OWORD *)&v54[15];
      *v21 = v25;
      if (++v13 == 8)
        return v12 + 2 == a2;
    }
LABEL_23:
    v11 = v12;
    v15 += 2;
    v14 += 2;
    v12 += 2;
    if (v12 != a2)
      continue;
    return 1;
  }
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, double a5)
{
  double result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[32];
  _BYTE v26[32];
  _BYTE v27[32];

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *>(a1, a2, a3, a5);
  v10 = 16;
  while (1)
  {
    v11 = *(_QWORD *)((char *)a4 + v10);
    v12 = *(_QWORD *)((char *)a3 + v10);
    if (v11 != v12)
      break;
    v10 -= 8;
    if (v10 == -8)
      return result;
  }
  if (v11 < v12)
  {
    *(_OWORD *)v25 = *a3;
    v13 = *a3;
    *(_OWORD *)&v25[16] = a3[1];
    v14 = *(__int128 *)((char *)a4 + 15);
    *a3 = *a4;
    *(__int128 *)((char *)a3 + 15) = v14;
    *a4 = v13;
    result = *(double *)&v25[15];
    *(__int128 *)((char *)a4 + 15) = *(_OWORD *)&v25[15];
    v15 = 16;
    while (1)
    {
      v16 = *(_QWORD *)((char *)a3 + v15);
      v17 = *(_QWORD *)((char *)a2 + v15);
      if (v16 != v17)
        break;
      v15 -= 8;
      if (v15 == -8)
        return result;
    }
    if (v16 < v17)
    {
      *(_OWORD *)v26 = *a2;
      v18 = *a2;
      *(_OWORD *)&v26[16] = a2[1];
      v19 = *(__int128 *)((char *)a3 + 15);
      *a2 = *a3;
      *(__int128 *)((char *)a2 + 15) = v19;
      *a3 = v18;
      result = *(double *)&v26[15];
      *(__int128 *)((char *)a3 + 15) = *(_OWORD *)&v26[15];
      v20 = 16;
      while (1)
      {
        v21 = *(_QWORD *)((char *)a2 + v20);
        v22 = *(_QWORD *)((char *)a1 + v20);
        if (v21 != v22)
          break;
        v20 -= 8;
        if (v20 == -8)
          return result;
      }
      if (v21 < v22)
      {
        *(_OWORD *)v27 = *a1;
        v23 = *a1;
        *(_OWORD *)&v27[16] = a1[1];
        v24 = *(__int128 *)((char *)a2 + 15);
        *a1 = *a2;
        *(__int128 *)((char *)a1 + 15) = v24;
        *a2 = v23;
        result = *(double *)&v27[15];
        *(__int128 *)((char *)a2 + 15) = *(_OWORD *)&v27[15];
      }
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::DepthPatchData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re14DepthPatchDataE";
  if (((unint64_t)"N2re14DepthPatchDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re14DepthPatchDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::DepthPatchData::~DepthPatchData(re::DepthPatchData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 10) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 18);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 10) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 18);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphMipmapGenerationNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphMipmapGenerationNode::execute(char **this, re::RenderGraphContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3 = re::RenderGraphDataStore::tryGet<re::MipmapGenerationContext>(*((_QWORD *)a2 + 146), (int)"MipmapGenerationContext", this[4]);
  if (v3)
  {
    v4 = v3;
    re::RenderGraphContext::makeBlitCommandEncoder(a2, 0, &v9);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = *(uint64_t **)(v4 + 32);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        objc_msgSend(v9, "generateMipmapsForTexture:", v8);
        v7 -= 8;
      }
      while (v7);
    }
    re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)a2, &v9);

  }
}

void re::RenderGraphMipmapGenerationNode::~RenderGraphMipmapGenerationNode(re::RenderGraphMipmapGenerationNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

re::RenderGraphMRCNode *re::RenderGraphMRCNode::RenderGraphMRCNode(re::RenderGraphMRCNode *this, const char *a2)
{
  re::RenderGraphNode *v3;
  _QWORD *v4;

  v3 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *(_QWORD *)v3 = &off_24ED85B80;
  v4 = (_QWORD *)((char *)v3 + 280);
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_QWORD *)v3 + 38) = 0;
  re::DynamicString::setCapacity(v4, 0);
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_BYTE *)this + 344) = 1;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 94) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  return this;
}

void re::RenderGraphMRCNode::configure(re::RenderGraphMRCNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re::AssetHandle::loadNow(*((_QWORD *)this + 33), 0);
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

void re::RenderGraphMRCNode::setup(re::RenderGraphMRCNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 344))
  {
    v6 = *((_QWORD *)this + 6);
    if ((v7 & 1) == 0
    {
      re::introspect<re::ThreadGroupMemoryData>(void)::info = (_UNKNOWN *)re::introspect_ThreadGroupMemoryData(0);
    }
    v8 = strlen(*((const char **)re::introspect<re::ThreadGroupMemoryData>(void)::info + 6));
    if (v8)
    {
      MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::ThreadGroupMemoryData>(void)::info + 6), v8, 0, v12);
      v9 = (v12[1] - 0x61C8864680B583E9 + (v12[0] << 6) + (v12[0] >> 2)) ^ v12[0];
    }
    else
    {
      v9 = 0;
    }
    v12[0] = (v6 - 0x61C8864680B583E9 + (v9 << 6) + (v9 >> 2)) ^ v9;
    v10 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)a3 + 14, v12);
    if (v10 != -1)
    {
      v11 = *(_QWORD *)(*((_QWORD *)a3 + 15) + 16 * v10 + 8);
      if (v11)
      {
        if (*(_BYTE *)(v11 + 8))
          *((_QWORD *)this + 9) = *(_QWORD *)(v11 + 16);
      }
    }
  }
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphMRCNode::execute(re::RenderGraphMRCNode *this, re::RenderGraphContext *a2)
{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  BOOL v6;
  void **TileRenderPipelineState;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint32x4_t v35;
  unint64_t v36;
  const re::Projection *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  unint64_t v40;
  unint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64x2_t v54;
  uint64x2_t v55;
  float32x4_t v56[2];
  id v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _BYTE v62[16];
  uint64_t v63;
  _BYTE v64[48];
  int v65;
  id v66[2];
  _OWORD v67[4];
  uint64_t v68;
  uint64_t v69;
  int v70;
  _BYTE v71[56];
  int v72;
  id v73;
  __int16 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v62, 5036, 0);
  v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(re::RenderGraphMRCNode *, re::RenderGraphContext *))(*(_QWORD *)this + 136))(this, a2);
  if ((_DWORD)v4)
  {
    LOBYTE(v66[0]) = 0;
    memset((char *)&v67[1] + 8, 0, 32);
    re::DynamicString::setCapacity((_QWORD *)&v67[1] + 1, 0);
    *((_QWORD *)&v67[3] + 1) = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v72 = 0;
    memset(v71, 0, 53);
    v73 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD638], sel_alloc), sel_init);
    v74 = 1;
    re::DynamicString::operator=((re::DynamicString *)((char *)&v67[1] + 8), (re::RenderGraphMRCNode *)((char *)this + 280));
    re::DynamicArray<re::TechniqueFunctionConstant>::operator=((uint64_t)&v67[3] + 8, (uint64_t *)this + 50);
    re::RenderGraphContext::rtInfo(a2, this, (uint64_t)v64);
    *(_OWORD *)&v71[8] = *(_OWORD *)v64;
    *(_OWORD *)&v71[24] = *(_OWORD *)&v64[16];
    *(_OWORD *)&v71[40] = *(_OWORD *)&v64[32];
    v72 = v65;
    if (*((_QWORD *)this + 33))
    {
      v5 = re::AssetHandle::loadedAsset<re::ShaderLibraryAsset>((re::RenderGraphMRCNode *)((char *)this + 256));
      re::DynamicString::DynamicString((re::DynamicString *)&v59, (const re::DynamicString *)(v5 + 40));
      v64[0] = 1;
      *(_QWORD *)&v64[8] = v59;
      *(_QWORD *)&v64[32] = v61;
      *(_OWORD *)&v64[16] = v60;
      v61 = 0;
      v59 = 0;
      v60 = 0uLL;
      re::Optional<re::DynamicString>::operator=((unsigned __int8 *)v66, v64);
      if (v64[0] && *(_QWORD *)&v64[8])
      {
        if ((v64[16] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v64[8] + 40))();
        memset(&v64[8], 0, 32);
      }
      if (v59 && (v60 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v59 + 40))();
    }
    if (*((_DWORD *)this + 84))
      v6 = *((_DWORD *)this + 85) == 0;
    else
      v6 = 1;
    LOBYTE(v74) = v6;
    TileRenderPipelineState = (void **)re::getOrCreateTileRenderPipelineState(*((_QWORD *)a2 + 1), (uint64_t)v66);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 49, TileRenderPipelineState);
    if (v73)
    {

      v73 = 0;
    }
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v67[3] + 8);
    if (*((_QWORD *)&v67[1] + 1))
    {
      if ((v67[2] & 1) != 0)
        (*(void (**)(void))(**((_QWORD **)&v67[1] + 1) + 40))();
      memset((char *)&v67[1] + 8, 0, 32);
    }
    if (LOBYTE(v66[0]) && v66[1] && (v67[0] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v66[1] + 40))();
  }
  v8 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedRenderEncoder(&v57, a2, v8, 0);
  (*(void (**)(_QWORD, char *, _QWORD))(v58 + 56))(*(_QWORD *)v58, sel_setRenderPipelineState_, *((_QWORD *)this + 49));
  v9 = *((_QWORD *)this + 46);
  if (v9)
  {
    v10 = 0;
    v11 = 8 * v9;
    v12 = (unsigned int *)(*((_QWORD *)this + 48) + 4);
    do
    {
      objc_msgSend(v57, sel_setThreadgroupMemoryLength_offset_atIndex_, *v12, v10, *(v12 - 1));
      v13 = *v12;
      v12 += 2;
      v10 += v13;
      v11 -= 8;
    }
    while (v11);
  }
  v14 = *((_QWORD *)this + 14);
  if (v14)
  {
    v15 = *((_QWORD *)this + 16);
    v16 = 32 * v14;
    do
    {
      if (!*(_BYTE *)(v15 + 20) || *(_DWORD *)(v15 + 8) != -1 && *(_DWORD *)(v15 + 12) != -1)
      {
        v17 = re::RenderGraphContext::metalBuffer((uint64_t)a2, v15);
        objc_msgSend(v57, sel_setTileBuffer_offset_atIndex_, *(_QWORD *)v17, *(unsigned int *)(v17 + 8), *(unsigned int *)(v15 + 16));
      }
      v15 += 32;
      v16 -= 32;
    }
    while (v16);
  }
  v18 = *((_QWORD *)this + 19);
  if (v18)
  {
    v19 = *((_QWORD *)this + 21);
    v20 = v18 << 6;
    do
    {
      if (!*(_BYTE *)(v19 + 49) || *(_DWORD *)(v19 + 8) != -1 && *(_DWORD *)(v19 + 12) != -1)
      {
        v21 = re::RenderGraphContext::metalBuffer((uint64_t)a2, v19);
        objc_msgSend(v57, sel_setTileBuffer_offset_atIndex_, *(_QWORD *)v21, *(unsigned int *)(v21 + 8), *(unsigned int *)(v19 + 16));
      }
      v19 += 64;
      v20 -= 64;
    }
    while (v20);
  }
  v22 = *((_QWORD *)this + 24);
  if (v22)
  {
    v23 = *((_QWORD *)this + 26);
    v24 = 32 * v22;
    do
    {
      if (!*(_BYTE *)(v23 + 20) || *(_DWORD *)(v23 + 8) != -1 && *(_DWORD *)(v23 + 12) != -1)
      {
        re::RenderGraphContext::metalTexture((uint64_t)a2, v23, *(unsigned __int8 *)(v23 + 21), *(unsigned __int8 *)(v23 + 22), v66);
        objc_msgSend(v57, sel_setTileTexture_atIndex_, v66[0], *(unsigned int *)(v23 + 16));
        if (v66[0])

      }
      v23 += 32;
      v24 -= 32;
    }
    while (v24);
  }
  v25 = *((_QWORD *)this + 29);
  if (v25)
  {
    v26 = *((_QWORD *)this + 31);
    v27 = v25 << 6;
    do
    {
      if (!*(_BYTE *)(v26 + 49) || *(_DWORD *)(v26 + 8) != -1 && *(_DWORD *)(v26 + 12) != -1)
      {
        re::RenderGraphContext::metalTexture((uint64_t)a2, v26, 0, 0, v66);
        objc_msgSend(v57, sel_setTileTexture_atIndex_, v66[0], *(unsigned int *)(v26 + 16));
        if (v66[0])

      }
      v26 += 64;
      v27 -= 64;
    }
    while (v27);
  }
  (*(void (**)(re::RenderGraphMRCNode *, re::RenderGraphContext *, id *))(*(_QWORD *)this + 128))(this, a2, &v57);
  v28 = *((_DWORD *)this + 84);
  if (!v28 || (v29 = *((_DWORD *)this + 85)) == 0)
  {
    v28 = objc_msgSend(v57, sel_tileWidth);
    v29 = objc_msgSend(v57, sel_tileHeight);
  }
  v30 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (v30)
  {
    v32 = v30;
    v33 = v29;
    v34 = v28;
    v35 = (uint32x4_t)vceqzq_f32(*((float32x4_t *)this + 20));
    v35.i32[3] = v35.i32[2];
    if ((vminvq_u32(v35) & 0x80000000) != 0)
    {
      v59 = 0;
      v60 = 0uLL;
      v49 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v66[0] = 0;
      v66[1] = 0;
      *(_QWORD *)&v67[0] = 0;
      v50 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
      if (v50)
        v51 = *(unsigned __int8 *)(v50 + 64);
      else
        v51 = 1;
      re::FixedArray<re::mtl::Viewport>::init<>(&v59, v49, v51);
      re::FixedArray<re::Vector4<float>>::init<>((uint64_t *)v66, v49, v51);
      v52 = re::RenderGraphDataStore::tryGet<re::ViewportData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
      re::RenderGraphContext::selectViewport((unint64_t)a2, v52, (uint64_t)&v59, (_anonymous_namespace_ *)v66, 0);
      if (v66[0] && v66[1])
        (*(void (**)(void))(*(_QWORD *)v66[0] + 40))();
      if (*(_BYTE *)(v32 + 490))
      {
        v53 = 0;
        this = 0;
        while (1)
        {
          v38 = (float32x4_t *)v60;
          if ((unint64_t)v60 <= (unint64_t)this)
            break;
          v54 = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)(*((_QWORD *)&v60 + 1) + v53)));
          v55 = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)(*((_QWORD *)&v60 + 1) + v53 + 8)));
          *(_QWORD *)v64 = v34;
          *(_QWORD *)&v64[8] = v29;
          *(_QWORD *)&v64[16] = 1;
          *(uint64x2_t *)v66 = v54;
          *(uint64x2_t *)((char *)v67 + 8) = v55;
          *(_QWORD *)&v67[0] = 0;
          *((_QWORD *)&v67[1] + 1) = 1;
          objc_msgSend(v57, sel_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex_, v64, v66, this);
          this = (re::RenderGraphMRCNode *)((char *)this + 1);
          v53 += 24;
          if ((unint64_t)this >= *(unsigned __int8 *)(v32 + 490))
            goto LABEL_83;
        }
LABEL_89:
        v63 = 0;
        memset(v67, 0, sizeof(v67));
        *(_OWORD *)v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v64 = 136315906;
        *(_QWORD *)&v64[4] = "operator[]";
        *(_WORD *)&v64[12] = 1024;
        *(_DWORD *)&v64[14] = 468;
        *(_WORD *)&v64[18] = 2048;
        *(_QWORD *)&v64[20] = this;
        *(_WORD *)&v64[28] = 2048;
        *(_QWORD *)&v64[30] = v38;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_83:
      if (v59 && (_QWORD)v60)
        (*(void (**)(void))(*(_QWORD *)v59 + 40))();
    }
    else if (*(_BYTE *)(v30 + 490))
    {
      v36 = 0;
      v37 = (const re::Projection *)(v30 + 144);
      v38 = (float32x4_t *)(v30 + 64);
      v39 = (float32x4_t *)((char *)a2 + 64);
      while (1)
      {
        v40 = *(_QWORD *)(v32 + 128);
        if (v40 <= v36)
          break;
        v41 = *(_QWORD *)(v32 + 48);
        if (v41 <= v36)
          goto LABEL_88;
        v42 = v39[1];
        v56[0] = *v39;
        v56[1] = v42;
        re::RenderCamera::transformWorldBoundsToScreen(v38, v56, v37, (uint64_t)v64);
        v43 = *((float32x4_t *)this + 20);
        v44 = vmulq_f32(*(float32x4_t *)v64, v43);
        *(float32x4_t *)v64 = v44;
        *(float32x4_t *)&v64[16] = vmulq_f32(v43, *(float32x4_t *)&v64[16]);
        v45 = vsubq_f32(*(float32x4_t *)&v64[16], v44);
        v46 = v45;
        v46.i32[3] = 0;
        v47 = vmaxnmq_f32(v46, (float32x4_t)0).u64[0];
        if (*(float *)&v47 >= 1.0 && *((float *)&v47 + 1) >= 1.0)
        {
          v59 = v34;
          *(_QWORD *)&v60 = v33;
          *((_QWORD *)&v60 + 1) = 1;
          *(uint64x2_t *)v66 = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v44.f32));
          *(uint64x2_t *)((char *)v67 + 8) = vcvtq_u64_f64(vcvtq_f64_f32(vrndp_f32(*(float32x2_t *)v45.f32)));
          *(_QWORD *)&v67[0] = 0;
          *((_QWORD *)&v67[1] + 1) = 1;
          objc_msgSend(v57, sel_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex_, &v59, v66, v36);
        }
        ++v36;
        v37 = (const re::Projection *)((char *)v37 + 64);
        v38 += 2;
        if (v36 >= *(unsigned __int8 *)(v32 + 490))
          goto LABEL_86;
      }
      re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v36, v40);
      _os_crash();
      __break(1u);
LABEL_88:
      re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v36, v41);
      _os_crash();
      __break(1u);
      goto LABEL_89;
    }
  }
LABEL_86:
  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&v57);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v62);
}

uint64_t *re::allocInfo_RenderGraphMRCNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_453);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_453))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120348, 0);
    *(uint64_t *)((char *)&qword_254120358 + 6) = 0;
    qword_254120358 = 0;
    qword_254120368 = 0;
    qword_254120370 = 0xFFFFFFFFLL;
    qword_254120348 = (uint64_t)&off_24ED7DAA8;
    qword_254120378 = (uint64_t)"RenderGraphMRCNode";
    dword_254120380 = 0;
    xmmword_254120388 = 0u;
    unk_254120398 = 0u;
    xmmword_2541203A8 = 0u;
    qword_2541203B8 = 0;
    __cxa_guard_release(&_MergedGlobals_453);
  }
  return &qword_254120348;
}

void re::initInfo_RenderGraphMRCNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0xA5BAE2AB5AB1D450;
  v21[1] = "RenderGraphMRCNode";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254120320);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120320);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254120328 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "library";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254120330 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get((re *)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "threadGroupMemorySettings";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x16000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254120338 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::IntrospectionInfo<re::DynamicString>::get(1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "tileFunction";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x11800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254120340 = v19;
      __cxa_guard_release(&qword_254120320);
    }
  }
  *((_QWORD *)this + 2) = 0x1C000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254120328;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMRCNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMRCNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMRCNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMRCNode>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

re::RenderGraphMRCNode *re::internal::defaultConstruct<re::RenderGraphMRCNode>(int a1, int a2, re::RenderGraphMRCNode *this)
{
  return re::RenderGraphMRCNode::RenderGraphMRCNode(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphMRCNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphMRCNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphMRCNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMRCNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMRCNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMRCNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMRCNode>, this);
}

re::RenderGraphMRCNode *re::RenderGraphMRCNode::RenderGraphMRCNode(re::RenderGraphMRCNode *this)
{
  re::RenderGraphNode *v2;
  _QWORD *v3;

  v2 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v2 = &off_24ED85B80;
  v3 = (_QWORD *)((char *)v2 + 280);
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_QWORD *)v2 + 38) = 0;
  re::DynamicString::setCapacity(v3, 0);
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_BYTE *)this + 344) = 1;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 94) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  return this;
}

void re::RenderGraphCommitCommandBufferNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphCommitCommandBufferNode::execute(re::RenderGraphCommitCommandBufferNode *this, re::RenderGraphContext *a2)
{
  re::DrawingManager *v2;

  v2 = *(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104);
  if (v2)
    re::DrawingManager::commitQueuedCommandBuffers(v2);
}

uint64_t *re::allocInfo_RenderGraphCommitCommandBufferNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_454);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_454))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541203D8, 0);
    *(uint64_t *)((char *)&qword_2541203E8 + 6) = 0;
    qword_2541203E8 = 0;
    qword_2541203F8 = 0;
    qword_254120400 = 0xFFFFFFFFLL;
    qword_2541203D8 = (uint64_t)&off_24ED7DAA8;
    qword_254120408 = (uint64_t)"RenderGraphCommitCommandBufferNode";
    dword_254120410 = 0;
    unk_254120418 = 0u;
    unk_254120428 = 0u;
    unk_254120438 = 0u;
    qword_254120448 = 0;
    __cxa_guard_release(&_MergedGlobals_454);
  }
  return &qword_2541203D8;
}

void re::initInfo_RenderGraphCommitCommandBufferNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x292463081C40DE7CLL;
  v10[1] = "RenderGraphCommitCommandBufferNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_2541203D0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541203D0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541203C8 = v8;
      __cxa_guard_release(&qword_2541203D0);
    }
  }
  *((_QWORD *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541203C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphCommitCommandBufferNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphCommitCommandBufferNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphCommitCommandBufferNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphCommitCommandBufferNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphCommitCommandBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED85C38;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphCommitCommandBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphCommitCommandBufferNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED85C38;
  return result;
}

uint64_t re::introspect_RenderGraphCommitCommandBufferNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphCommitCommandBufferNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphCommitCommandBufferNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphCommitCommandBufferNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphCommitCommandBufferNode>, this);
}

void re::RenderGraphCommitCommandBufferNode::~RenderGraphCommitCommandBufferNode(re::RenderGraphCommitCommandBufferNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphMPSImageAreaMaxNode::configure(id *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  id v6;
  id *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;

  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  v6 = *(id *)(*((_QWORD *)a4 + 1) + 184);
  v17 = v6;
  v7 = this + 33;
  v8 = this[33];
  if (!v8)
  {
    re::mtl::mps::ImageAreaMax::ImageAreaMax((re::mtl::mps::ImageAreaMax *)&v16, (const re::mtl::Device *)&v17, *((int *)this + 64), *((int *)this + 64));
    if (v7 != &v16)
    {
      v9 = v16;
      v16 = 0;
      v10 = *v7;
      *v7 = v9;

    }
    v8 = *v7;
  }
  v11 = objc_msgSend(v8, "kernelWidth");
  v12 = *((int *)this + 64);
  if (v11 != v12 || (v13 = objc_msgSend(this[33], "kernelHeight"), v12 = *((int *)this + 64), v13 != v12))
  {
    re::mtl::mps::ImageAreaMax::ImageAreaMax((re::mtl::mps::ImageAreaMax *)&v16, (const re::mtl::Device *)&v17, v12, v12);
    if (v7 != &v16)
    {
      v14 = v16;
      v16 = 0;
      v15 = *v7;
      *v7 = v14;

    }
  }

}

void re::RenderGraphMPSImageAreaMaxNode::execute(id *this, id **a2)
{
  _BYTE *v2;
  id *v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  _QWORD *v9;
  uint64x2_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64x2_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float32x2_t *v21;
  id v22;
  id v23;
  _QWORD v24[2];
  _QWORD v25[2];
  id v26;
  id v27;
  id location;
  id v29;
  id v30;
  char v31;
  uint64_t v32;
  id v33;
  _BYTE v34[16];
  uint64_t v35;
  _BYTE v36[12];
  __int16 v37;
  int v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  unint64_t v42;
  _OWORD v43[5];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34, 5093, 0);
  v5 = *a2;
  re::RenderGraphMPSNodeBase::getCommandBufferWithProtectionOptions((re::RenderGraphMPSNodeBase *)this, (re::RenderGraphContext *)a2, &v33);
  v27 = *v5;
  v26 = v33;
  v32 = 0;
  v29 = 0;
  v30 = 0;
  location = 0;
  v31 = 0;
  re::ObjCObject::operator=(&v29, &v26);
  re::ObjCObject::operator=(&location, &v27);

  objc_msgSend(this[33], "setEdgeMode:", *((unsigned __int8 *)this + 260));
  if (!this[24])
  {
LABEL_26:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  v7 = this[26];
  v25[0] = *v7;
  v25[1] = v7[1];
  if (!this[29])
  {
LABEL_27:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_28;
  }
  v2 = v36;
  v8 = this + 33;
  v9 = this[31];
  v24[0] = *v9;
  v24[1] = v9[1];
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v25, 0, 0, &v23);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v24, 0, 0, &v22);
  re::SyncMechanism::sync((re::SyncMechanism *)&location);
  *(_QWORD *)&v43[0] = objc_msgSend(v23, sel_width);
  *(_QWORD *)v36 = objc_msgSend(v23, sel_height);
  re::RenderGraphMPSNodeBase::getViewports((re::RenderGraphContext *)a2, (const unint64_t *)v43, (const unint64_t *)v36, &v19);
  if (objc_msgSend(v23, sel_textureType) == (id)2)
  {
    if (v20)
    {
      v10 = vcvtq_u64_f64(vcvtq_f64_f32(v21[1]));
      v11 = *v8;
      v43[0] = vcvtq_u64_f64(vcvtq_f64_f32(*v21));
      *(uint64x2_t *)((char *)&v43[1] + 8) = v10;
      *(_QWORD *)&v43[1] = 0;
      *((_QWORD *)&v43[2] + 1) = 1;
      objc_msgSend(v11, "setClipRect:", v43);
      re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer(this + 33, (uint64_t *)&v33, &v23, (uint64_t *)&v22);
      goto LABEL_15;
    }
LABEL_28:
    v35 = 0;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v36 = 136315906;
    *(_QWORD *)(v2 + 4) = "operator[]";
    v37 = 1024;
    *(_DWORD *)(v2 + 14) = 468;
    v39 = 2048;
    *(_QWORD *)(v2 + 20) = 0;
    v41 = 2048;
    *(_QWORD *)(v2 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (objc_msgSend(v23, sel_textureType) != (id)3)
  {
    objc_msgSend(v23, sel_textureType);
    v17 = objc_msgSend(v23, sel_textureType);
    re::internal::assertLog((re::internal *)5, v18, "assertion failure: '%s' (%s:line %i) Unsupported texture type %lu.", "false", "execute", 66, v17);
    _os_crash();
    __break(1u);
    return;
  }
  if (objc_msgSend(v23, sel_arrayLength))
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v20;
      if (v20 <= v13)
        break;
      v15 = vcvtq_u64_f64(vcvtq_f64_f32(v21[v12 + 1]));
      v16 = *v8;
      v43[0] = vcvtq_u64_f64(vcvtq_f64_f32(v21[v12]));
      *(uint64x2_t *)((char *)&v43[1] + 8) = v15;
      *(_QWORD *)&v43[1] = 0;
      *((_QWORD *)&v43[2] + 1) = 1;
      objc_msgSend(v16, "setClipRect:", v43);
      re::makeView2DArrayTo2D(&v23, v13, v43);
      re::makeView2DArrayTo2D(&v22, v13, v36);
      re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer(v8, (uint64_t *)&v33, (id *)v43, (uint64_t *)v36);
      if (*(_QWORD *)v36)

      if (*(_QWORD *)&v43[0])
      ++v13;
      v12 += 3;
      if (v13 >= (unint64_t)objc_msgSend(v23, sel_arrayLength))
        goto LABEL_15;
    }
    v35 = 0;
    memset(v43, 0, sizeof(v43));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v36 = 136315906;
    *(_QWORD *)&v36[4] = "operator[]";
    v37 = 1024;
    v38 = 468;
    v39 = 2048;
    v40 = v13;
    v41 = 2048;
    v42 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_26;
  }
LABEL_15:
  re::SyncMechanism::sync((re::SyncMechanism *)&location);
  if (v19 && v20)
    (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  if (v22)

  if (v23)
  if (v30)
  {

    v30 = 0;
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34);
}

uint64_t *re::allocInfo_RenderGraphMPSImageAreaMaxNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_455);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_455))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120478, 0);
    *(uint64_t *)((char *)&qword_254120488 + 6) = 0;
    qword_254120488 = 0;
    qword_254120498 = 0;
    qword_2541204A0 = 0xFFFFFFFFLL;
    qword_254120478 = (uint64_t)&off_24ED7DAA8;
    qword_2541204A8 = (uint64_t)"RenderGraphMPSImageAreaMaxNode";
    dword_2541204B0 = 0;
    unk_2541204B8 = 0u;
    unk_2541204C8 = 0u;
    unk_2541204D8 = 0u;
    qword_2541204E8 = 0;
    __cxa_guard_release(&_MergedGlobals_455);
  }
  return &qword_254120478;
}

void re::initInfo_RenderGraphMPSImageAreaMaxNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x265369E83F9AD5ACLL;
  v18[1] = "RenderGraphMPSImageAreaMaxNode";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_254120458);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120458);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254120460 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_int((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "dilation";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254120468 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_MPSImageEdgeModeType((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "edgeMode";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10400000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254120470 = v16;
      __cxa_guard_release(&qword_254120458);
    }
  }
  *((_QWORD *)this + 2) = 0x11000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254120460;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMPSImageAreaMaxNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMPSImageAreaMaxNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMPSImageAreaMaxNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMPSImageAreaMaxNode>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphMPSImageAreaMaxNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED85CE0;
  *((_BYTE *)result + 260) = 0;
  *((_QWORD *)result + 33) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphMPSImageAreaMaxNode>(uint64_t a1, uint64_t a2, id *a3)
{

  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphMPSImageAreaMaxNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED85CE0;
  *((_BYTE *)result + 260) = 0;
  *((_QWORD *)result + 33) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphMPSImageAreaMaxNode>(id *a1)
{

  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a1);
}

uint64_t re::introspect_RenderGraphMPSImageAreaMaxNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMPSImageAreaMaxNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMPSImageAreaMaxNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMPSImageAreaMaxNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMPSImageAreaMaxNode>, this);
}

void re::RenderGraphMPSImageAreaMaxNode::~RenderGraphMPSImageAreaMaxNode(id *this)
{

  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)this);
}

{

  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::allocInfo_DummyEnvironmentNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_456);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_456))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120508, 0);
    *(uint64_t *)((char *)&qword_254120518 + 6) = 0;
    qword_254120518 = 0;
    qword_254120528 = 0;
    qword_254120530 = 0xFFFFFFFFLL;
    qword_254120508 = (uint64_t)&off_24ED7DAA8;
    qword_254120538 = (uint64_t)"DummyEnvironmentNode";
    dword_254120540 = 0;
    unk_254120548 = 0u;
    unk_254120558 = 0u;
    unk_254120568 = 0u;
    qword_254120578 = 0;
    __cxa_guard_release(&_MergedGlobals_456);
  }
  return &qword_254120508;
}

void re::initInfo_DummyEnvironmentNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xE867E250ADF42A1ALL;
  v10[1] = "DummyEnvironmentNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254120500);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120500);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541204F8 = v8;
      __cxa_guard_release(&qword_254120500);
    }
  }
  *((_QWORD *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541204F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DummyEnvironmentNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DummyEnvironmentNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DummyEnvironmentNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DummyEnvironmentNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::DummyEnvironmentNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED29318;
  return result;
}

uint64_t re::internal::defaultDestruct<re::DummyEnvironmentNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::DummyEnvironmentNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED29318;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::DummyEnvironmentNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_DummyEnvironmentNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DummyEnvironmentNode", (uint64_t (*)(re::internal *))re::allocInfo_DummyEnvironmentNode, (re::IntrospectionBase *(*)(void))re::initInfo_DummyEnvironmentNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DummyEnvironmentNode>, this);
}

uint64_t re::LightContextAtlasContainer::allocateTiles(re::LightContextAtlasContainer *this)
{
  unsigned int v2;
  uint64_t result;

  if (dyld_program_sdk_at_least())
    v2 = 2;
  else
    v2 = 1;
  re::TextureAtlas::allocateTiles((uint64_t)this, v2);
  result = re::TextureAtlas::allocateTiles((uint64_t)this + 96, 1u);
  *((_BYTE *)this + 192) = 1;
  return result;
}

_QWORD *re::LightContextBuilder::addAmbientLights(_QWORD *result, __int16 a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  unint64_t v60;
  __int16 v61;
  unint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  if (*(_QWORD *)(a3 + 16))
  {
    v3 = result;
    v19 = 0;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v18 = 0;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v15, a3);
    memset(v25, 0, 24);
    v22 = 0u;
    v23 = 1uLL;
    v24 = 0uLL;
    *((_QWORD *)&v25[1] + 1) = 1;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v31 = 1;
    v30 = 0u;
    v29 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v37 = 1;
    v36 = 0u;
    v35 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v43 = 1;
    v42 = 0u;
    v41 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v49 = 1;
    v48 = 0u;
    v52 = 0;
    v51 = 0;
    v53 = 0;
    v50 = 0;
    v54 = 0;
    v4 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add((uint64_t)(v3 + 11), &v20, (uint64_t)&v22);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v48);
    if ((_QWORD)v48)
    {
      v5 = v49;
      if ((v49 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v48 + 40))();
        v5 = v49;
      }
      v48 = 0uLL;
      LODWORD(v49) = (v5 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v42);
    if ((_QWORD)v42)
    {
      v6 = v43;
      if ((v43 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v42 + 40))();
        v6 = v43;
      }
      v42 = 0uLL;
      LODWORD(v43) = (v6 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v36);
    if ((_QWORD)v36)
    {
      v7 = v37;
      if ((v37 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v36 + 40))();
        v7 = v37;
      }
      v36 = 0uLL;
      LODWORD(v37) = (v7 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v30);
    if ((_QWORD)v30)
    {
      v8 = v31;
      if ((v31 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v30 + 40))();
        v8 = v31;
      }
      v30 = 0uLL;
      LODWORD(v31) = (v8 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)v25 + 8);
    if (*((_QWORD *)&v25[0] + 1))
    {
      v9 = DWORD2(v25[1]);
      if ((BYTE8(v25[1]) & 1) == 0)
      {
        (*(void (**)(void))(**((_QWORD **)&v25[0] + 1) + 40))();
        v9 = DWORD2(v25[1]);
      }
      *((_QWORD *)&v25[0] + 1) = 0;
      *(_QWORD *)&v25[1] = 0;
      DWORD2(v25[1]) = (v9 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v22);
    result = (_QWORD *)v22;
    if ((_QWORD)v22 && (v23 & 1) == 0)
      result = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v22 + 40))();
    v10 = *(_QWORD *)(v4 + 40);
    v11 = *(_QWORD *)(v4 + 8);
    if (v10 + 1 > 4 * v11)
    {
      result = re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)v4, (v10 + 4) >> 2);
      v11 = *(_QWORD *)(v4 + 8);
    }
    if (v11 <= v10 >> 2)
    {
      v21 = 0;
      memset(v25, 0, sizeof(v25));
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v55 = 136315906;
      v56 = "operator[]";
      v57 = 1024;
      v58 = 858;
      v59 = 2048;
      v60 = v10 >> 2;
      v61 = 2048;
      v62 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = *(_QWORD *)(v4 + 32);
    if ((*(_DWORD *)(v4 + 16) & 1) != 0)
      v12 = v4 + 24;
    v13 = *(_QWORD *)(v12 + 8 * (v10 >> 2));
    ++*(_QWORD *)(v4 + 40);
    ++*(_DWORD *)(v4 + 48);
    v14 = v13 + 40 * (v10 & 3);
    *(_QWORD *)(v14 + 32) = 0;
    *(_DWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)v14 = v15;
    *(_QWORD *)(v14 + 8) = v16;
    *(_QWORD *)(v14 + 16) = v17;
    *(_QWORD *)(v14 + 32) = v19;
    ++v18;
    ++*(_DWORD *)(v14 + 24);
    *((_BYTE *)v3 + 2992) = 0;
  }
  return result;
}

uint64_t re::LightContextBuilder::addDirectionalLights(uint64_t result, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[8];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v25 = a2;
  if (*(_QWORD *)(a3 + 16))
  {
    v3 = result;
    v19 = 0;
    v20 = 0uLL;
    v21 = 0;
    v22 = 0u;
    memset(v23, 0, sizeof(v23));
    v24 = 0;
    v4 = (_anonymous_namespace_ *)re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v19, a3);
    v5 = *((_QWORD *)&v20 + 1);
    v6 = 0;
    if (v5)
    {
      v7 = 0;
      v8 = 134;
      do
      {
        v9 = *((_QWORD *)&v20 + 1);
        if (*((_QWORD *)&v20 + 1) <= v7)
        {
          v26 = 0;
          memset(v30, 0, 32);
          v29 = 0u;
          v27 = 0u;
          v28 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v57 = 136315906;
          v58 = "operator[]";
          v59 = 1024;
          v60 = 789;
          v61 = 2048;
          v62 = v7;
          v63 = 2048;
          v64 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_38:
          v26 = 0;
          memset(v30, 0, 32);
          v29 = 0u;
          v27 = 0u;
          v28 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v57 = 136315906;
          v58 = "operator[]";
          v59 = 1024;
          v60 = 468;
          v61 = 2048;
          v62 = v7;
          v63 = 2048;
          v64 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = v22;
        if (*(_BYTE *)(v22 + v8))
        {
          if (dyld_program_sdk_at_least() && v6 >= 8)
          {
            *(_BYTE *)(v10 + v8) = 0;
          }
          else
          {
            v11 = re::TextureAtlas::requestTile(*(re::TextureAtlas **)(v3 + 2984), 1024, 1024, 0.0);
            v9 = *((_QWORD *)&v23[1] + 1);
            if (*((_QWORD *)&v23[1] + 1) <= v7)
              goto LABEL_38;
            *(_QWORD *)(v24 + 8 * v7) = v11;
            ++v6;
          }
        }
        ++v7;
        v8 += 144;
      }
      while (v5 != v7);
    }
    v27 = 0u;
    v28 = 1uLL;
    v29 = 0uLL;
    v30[3] = 1;
    memset(v30, 0, 24);
    memset(&v30[4], 0, 32);
    v32 = 1;
    v31 = 0u;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v38 = 1;
    v37 = 0u;
    v36 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v44 = 1;
    v43 = 0u;
    v42 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v51 = 0;
    v49 = 0u;
    v54 = 0;
    v50 = 1;
    v53 = 0;
    v55 = 0;
    v52 = 0;
    v56 = 0;
    v12 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v3 + 88, &v25, (uint64_t)&v27);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v49);
    if ((_QWORD)v49)
    {
      v13 = v50;
      if ((v50 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        v13 = v50;
      }
      v49 = 0uLL;
      v50 = (v13 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v43);
    if ((_QWORD)v43)
    {
      v14 = v44;
      if ((v44 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v43 + 40))();
        v14 = v44;
      }
      v43 = 0uLL;
      LODWORD(v44) = (v14 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v37);
    if ((_QWORD)v37)
    {
      v15 = v38;
      if ((v38 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v37 + 40))();
        v15 = v38;
      }
      v37 = 0uLL;
      LODWORD(v38) = (v15 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v31);
    if ((_QWORD)v31)
    {
      v16 = v32;
      if ((v32 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v31 + 40))();
        v16 = v32;
      }
      v31 = 0uLL;
      LODWORD(v32) = (v16 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v30[1]);
    if (v30[1])
    {
      v17 = v30[3];
      if ((v30[3] & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v30[1] + 40))();
        v17 = v30[3];
      }
      v30[1] = 0;
      v30[2] = 0;
      LODWORD(v30[3]) = (v17 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v27);
    if ((_QWORD)v27)
    {
      if ((v28 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v27 + 40))();
    }
    v18 = re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::addUninitialized(v12 + 56);
    *(_QWORD *)(v18 + 32) = 0;
    *(_DWORD *)(v18 + 24) = 0;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)v18 = v19;
    v19 = 0;
    *(_OWORD *)(v18 + 8) = v20;
    v20 = 0u;
    *(_QWORD *)(v18 + 32) = v22;
    ++v21;
    ++*(_DWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 56) = 0;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_QWORD *)(v18 + 40) = *((_QWORD *)&v22 + 1);
    v22 = 0u;
    *(_QWORD *)(v18 + 48) = *(_QWORD *)&v23[0];
    *(_QWORD *)&v23[0] = 0;
    *(_QWORD *)(v18 + 56) = *((_QWORD *)&v23[0] + 1);
    *(_QWORD *)(v18 + 80) = 0;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_QWORD *)(v18 + 64) = *(_QWORD *)&v23[1];
    *(_OWORD *)((char *)v23 + 8) = 0u;
    *(_QWORD *)(v18 + 72) = *((_QWORD *)&v23[1] + 1);
    *(_QWORD *)(v18 + 80) = v24;
    *((_QWORD *)&v23[1] + 1) = 0;
    v24 = 0;
    *(_QWORD *)(v12 + 336) = v6;
    *(_BYTE *)(v3 + 2992) = 0;
    return re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v19);
  }
  return result;
}

uint64_t re::LightContextBuilder::addGlobalDirectionalLight(re::LightContextBuilder *this, float a2)
{
  re::LightContextBuilder *v3;
  unsigned __int8 v4;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  _anonymous_namespace_ *v15;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  const char *v25;
  char v26;
  _QWORD v27[2];
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t *v33;
  _QWORD v34[2];
  uint64_t v35;
  int v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[28];
  uint64_t v44;
  char v45;
  _BYTE v46[10];
  uint64_t v47;
  int v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v3 = this;
  v61 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254120588);
  if ((v4 & 1) == 0)
    goto LABEL_24;
  while (1)
  {
    *((_BYTE *)v3 + 3032) = _MergedGlobals_457;
    memset(v38, 0, sizeof(v38));
    re::DynamicString::setCapacity(v38, 0);
    *(_DWORD *)&v43[24] = 1092616192;
    v45 = 0;
    *(_DWORD *)&v46[6] = 1065353216;
    v39 = xmmword_2260E5F10;
    v40 = xmmword_2261998C0;
    v41 = xmmword_2261998D0;
    v42 = xmmword_2260E5D70;
    *(_QWORD *)&v43[16] = 0x3C23D70A3F800000;
    __asm { FMOV            V0.4S, #1.0 }
    *(_OWORD *)v43 = _Q0;
    v44 = LODWORD(a2) | 0x3F00000000000000;
    *(_DWORD *)v46 = 16843009;
    v37 = 0;
    v34[1] = 0;
    v35 = 0;
    v34[0] = 0;
    v36 = 0;
    re::DynamicArray<re::DirectionalLightInfo>::growCapacity(v34, 1uLL);
    v10 = v37 + 144 * v35;
    v11 = *((_QWORD *)&v38[1] + 1);
    *(_QWORD *)v10 = *(_QWORD *)&v38[0];
    *(_QWORD *)(v10 + 24) = v11;
    *(_OWORD *)(v10 + 8) = *(_OWORD *)((char *)v38 + 8);
    v12 = v42;
    *(_OWORD *)(v10 + 64) = v41;
    *(_OWORD *)(v10 + 80) = v12;
    *(_OWORD *)(v10 + 96) = *(_OWORD *)v43;
    *(_OWORD *)(v10 + 108) = *(_OWORD *)&v43[12];
    v13 = v40;
    *(_OWORD *)(v10 + 32) = v39;
    *(_OWORD *)(v10 + 48) = v13;
    *(_QWORD *)(v10 + 124) = v44;
    *(_BYTE *)(v10 + 132) = 0;
    *(_QWORD *)(v10 + 134) = *(_QWORD *)v46;
    *(_WORD *)(v10 + 142) = *(_WORD *)&v46[8];
    v14 = ++v35;
    ++v36;
    v27[0] = 0;
    v27[1] = 0;
    v29 = 0;
    v28 = 0;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0;
    if (!v34[0])
      break;
    v27[0] = v34[0];
    re::DynamicArray<re::DirectionalLightInfo>::setCapacity(v27, v14);
    ++v29;
    v15 = re::DynamicArray<re::DirectionalLightInfo>::copy(v27, (uint64_t)v34);
    if (v28 != 1)
      break;
    *((_BYTE *)v3 + 2992) = 0;
    v16 = &v32;
    if (!v28)
    {
      v47 = 0;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v56 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v48 = 136315906;
      v49 = "operator[]";
      v50 = 1024;
      v51 = 789;
      v52 = 2048;
      v53 = 0;
      v54 = 2048;
      v55 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_22:
      v47 = 0;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v56 = 0u;
      v3 = (re::LightContextBuilder *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v48 = 136315906;
      v49 = "operator[]";
      v50 = (__int16)v16;
      v51 = 468;
      v52 = 2048;
      v53 = 0;
      v54 = 2048;
      v55 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_23;
    }
    if (*(_BYTE *)(v30 + 134))
    {
      LOWORD(v16) = 1024;
      v17 = re::TextureAtlas::requestTile(*((re::TextureAtlas **)v3 + 373), 1024, 1024, 0.0);
      if (!*((_QWORD *)&v32 + 1))
        goto LABEL_22;
      *v33 = v17;
    }
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v3, (uint64_t)v27);
    re::FixedArray<float>::operator=((uint64_t *)v3 + 5, (uint64_t *)&v30 + 1);
    if (v27 == (_QWORD *)v3)
      break;
    v19 = *((_QWORD *)v3 + 8);
    if (!v19 || v19 == (_QWORD)v32)
    {
      v20 = *((_QWORD *)v3 + 9);
      v21 = (unint64_t *)*((_QWORD *)v3 + 10);
      v22 = *((_QWORD *)&v32 + 1);
      v23 = v33;
      *((_QWORD *)v3 + 8) = v32;
      *((_QWORD *)v3 + 9) = v22;
      *(_QWORD *)&v32 = v19;
      *((_QWORD *)&v32 + 1) = v20;
      *((_QWORD *)v3 + 10) = v23;
      v33 = v21;
      break;
    }
LABEL_23:
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
    _os_crash();
    __break(1u);
LABEL_24:
    this = (re::LightContextBuilder *)__cxa_guard_acquire(&qword_254120588);
    if ((_DWORD)this)
    {
      re::Defaults::BOOLValue((re::Defaults *)"enableCalculateIBLShadowProjectionBoundsFromScene", v25, (char *)v38);
      if (LOBYTE(v38[0]))
        v26 = BYTE1(v38[0]);
      else
        v26 = 1;
      _MergedGlobals_457 = v26;
      __cxa_guard_release(&qword_254120588);
    }
  }
  if ((_QWORD)v32)
  {
    if (*((_QWORD *)&v32 + 1))
    {
      (*(void (**)(void))(*(_QWORD *)v32 + 40))();
      *((_QWORD *)&v32 + 1) = 0;
      v33 = 0;
    }
    *(_QWORD *)&v32 = 0;
  }
  if (*((_QWORD *)&v30 + 1))
  {
    if ((_QWORD)v31)
    {
      (*(void (**)(void))(**((_QWORD **)&v30 + 1) + 40))();
      v31 = 0uLL;
    }
    *((_QWORD *)&v30 + 1) = 0;
  }
  re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)v27);
  return re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)v34);
}

uint64_t re::LightContextBuilder::addRealWorldProxyLights(uint64_t result, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[8];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  _QWORD *v73;
  __int16 v74;
  unint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v36 = a2;
  if (*(_QWORD *)(a3 + 16))
  {
    v3 = result;
    v26 = 0;
    v27 = 0;
    v29 = 0;
    v28 = 0;
    v30 = 0u;
    v31 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v4 = (unint64_t)&v26;
    v5 = (_anonymous_namespace_ *)re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v26, a3);
    v6 = v28;
    if (v6)
    {
      v8 = 0;
      while (1)
      {
        v9 = re::TextureAtlas::requestTile(*(re::TextureAtlas **)(v3 + 2984), 1024, 1024, 0.0);
        v10 = v35;
        if ((unint64_t)v35 <= v8)
          break;
        *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * v8++) = v9;
        if (v6 == v8)
          goto LABEL_6;
      }
      v37 = 0;
      memset(v41, 0, 32);
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v68 = 136315906;
      v69 = "operator[]";
      v70 = 1024;
      v71 = 468;
      v72 = 2048;
      v73 = (_QWORD *)v8;
      v74 = 2048;
      v75 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_47:
      v37 = 0;
      memset(v41, 0, 32);
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v68 = 136315906;
      v69 = "operator[]";
      v70 = 1024;
      v71 = 858;
      v72 = 2048;
      v73 = (_QWORD *)v4;
      v74 = 2048;
      v75 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_6:
    v39 = 1uLL;
    v38 = 0u;
    v40 = 0uLL;
    v41[3] = 1;
    memset(v41, 0, 24);
    memset(&v41[4], 0, 32);
    v43 = 1;
    v42 = 0u;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v49 = 1;
    v48 = 0u;
    v47 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v55 = 1;
    v54 = 0u;
    v53 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v62 = 0;
    v60 = 0u;
    v65 = 0;
    v61 = 1;
    v64 = 0;
    v66 = 0;
    v63 = 0;
    v67 = 0;
    v11 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v3 + 88, &v36, (uint64_t)&v38);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v60);
    if ((_QWORD)v60)
    {
      v12 = v61;
      if ((v61 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v60 + 40))();
        v12 = v61;
      }
      v60 = 0uLL;
      v61 = (v12 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v54);
    if ((_QWORD)v54)
    {
      v13 = v55;
      if ((v55 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v54 + 40))();
        v13 = v55;
      }
      v54 = 0uLL;
      LODWORD(v55) = (v13 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v48);
    if ((_QWORD)v48)
    {
      v14 = v49;
      if ((v49 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v48 + 40))();
        v14 = v49;
      }
      v48 = 0uLL;
      LODWORD(v49) = (v14 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v42);
    if ((_QWORD)v42)
    {
      v15 = v43;
      if ((v43 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v42 + 40))();
        v15 = v43;
      }
      v42 = 0uLL;
      LODWORD(v43) = (v15 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v41[1]);
    if (v41[1])
    {
      v16 = v41[3];
      if ((v41[3] & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v41[1] + 40))();
        v16 = v41[3];
      }
      v41[1] = 0;
      v41[2] = 0;
      LODWORD(v41[3]) = (v16 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v38);
    if ((_QWORD)v38 && (v39 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)v38 + 40))();
    v17 = *(_QWORD *)(v11 + 152);
    v10 = *(_QWORD *)(v11 + 120);
    if (v17 + 1 > 4 * v10)
    {
      re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity((_QWORD *)(v11 + 112), (v17 + 4) >> 2);
      v10 = *(_QWORD *)(v11 + 120);
    }
    v4 = v17 >> 2;
    if (v10 <= v17 >> 2)
      goto LABEL_47;
    v18 = *(_QWORD *)(v11 + 144);
    if ((*(_DWORD *)(v11 + 128) & 1) != 0)
      v18 = v11 + 136;
    v19 = *(_QWORD *)(v18 + 8 * v4);
    ++*(_QWORD *)(v11 + 152);
    ++*(_DWORD *)(v11 + 160);
    v20 = v19 + 120 * (v17 & 3);
    *(_QWORD *)(v20 + 32) = 0;
    *(_DWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)v20 = 0;
    *(_QWORD *)v20 = v26;
    v26 = 0;
    *(_QWORD *)(v20 + 8) = v27;
    v27 = 0;
    v21 = *(_QWORD *)(v20 + 16);
    *(_QWORD *)(v20 + 16) = v28;
    v28 = v21;
    v22 = *(_QWORD *)(v20 + 32);
    *(_QWORD *)(v20 + 32) = v30;
    *(_QWORD *)&v30 = v22;
    ++v29;
    ++*(_DWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 48) = 0;
    *(_QWORD *)(v20 + 56) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 40) = *((_QWORD *)&v30 + 1);
    *((_QWORD *)&v30 + 1) = 0;
    *(_QWORD *)(v20 + 48) = v31;
    *(_QWORD *)&v31 = 0;
    v23 = *(_QWORD *)(v20 + 56);
    *(_QWORD *)(v20 + 56) = *((_QWORD *)&v31 + 1);
    *((_QWORD *)&v31 + 1) = v23;
    *(_QWORD *)(v20 + 64) = v32;
    *(_QWORD *)(v20 + 72) = 0;
    *(_QWORD *)(v20 + 80) = 0;
    *(_QWORD *)(v20 + 88) = 0;
    *(_QWORD *)(v20 + 72) = v33;
    *(_QWORD *)&v33 = 0;
    *(_QWORD *)(v20 + 80) = *((_QWORD *)&v33 + 1);
    *((_QWORD *)&v33 + 1) = 0;
    v24 = *(_QWORD *)(v20 + 88);
    *(_QWORD *)(v20 + 88) = v34;
    *(_QWORD *)&v34 = v24;
    *(_QWORD *)(v20 + 96) = 0;
    *(_QWORD *)(v20 + 104) = 0;
    *(_QWORD *)(v20 + 112) = 0;
    *(_QWORD *)(v20 + 96) = *((_QWORD *)&v34 + 1);
    *((_QWORD *)&v34 + 1) = 0;
    *(_QWORD *)(v20 + 104) = v35;
    *(_QWORD *)&v35 = 0;
    v25 = *(_QWORD *)(v20 + 112);
    *(_QWORD *)(v20 + 112) = *((_QWORD *)&v35 + 1);
    *((_QWORD *)&v35 + 1) = v25;
    *(_QWORD *)(v11 + 336) += v6;
    *(_BYTE *)(v3 + 2992) = 0;
    if (*((_QWORD *)&v34 + 1))
      *((_QWORD *)&v34 + 1) = 0;
    if ((_QWORD)v33)
    {
      if (*((_QWORD *)&v33 + 1))
      {
        (*(void (**)(void))(*(_QWORD *)v33 + 40))();
        *((_QWORD *)&v33 + 1) = 0;
        *(_QWORD *)&v34 = 0;
      }
      *(_QWORD *)&v33 = 0;
    }
    if (*((_QWORD *)&v30 + 1))
    {
      if ((_QWORD)v31)
      {
        (*(void (**)(void))(**((_QWORD **)&v30 + 1) + 40))();
        v31 = 0uLL;
      }
      *((_QWORD *)&v30 + 1) = 0;
    }
    return re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v26);
  }
  return result;
}

uint64_t re::LightContextBuilder::addSpotLights(uint64_t result, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int16 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[8];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  const char *v84;
  __int16 v85;
  int v86;
  __int16 v87;
  unint64_t v88;
  __int16 v89;
  unint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  if (!*(_QWORD *)(a3 + 16))
    return result;
  v5 = result;
  v41 = 0;
  v42 = 0;
  v44 = 0;
  v43 = 0;
  v45 = 0u;
  v46 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v41, a3);
  v7 = v43;
  if (!*(_DWORD *)(v5 + 2964))
  {
    v18 = *(_QWORD *)(v5 + 104);
    if (v18)
    {
      v16 = v5 + 128;
      v19 = 352 * v18;
      while (*(unsigned __int16 *)(v16 - 8) != a2)
      {
        v16 += 352;
        v19 -= 352;
        if (!v19)
          goto LABEL_14;
      }
      goto LABEL_9;
    }
LABEL_14:
    v17 = 0;
    goto LABEL_15;
  }
  if (!*(_QWORD *)(v5 + 2936))
    goto LABEL_14;
  v10 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2) ^ ((0xBF58476D1CE4E5B9 * a2) >> 27));
  v11 = v10 ^ (v10 >> 31);
  v12 = *(unsigned int *)(*(_QWORD *)(v5 + 2944) + 4 * (v11 % *(unsigned int *)(v5 + 2960)));
  if ((_DWORD)v12 == 0x7FFFFFFF)
    goto LABEL_14;
  v13 = *(_QWORD *)(v5 + 2952);
  v14 = 0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v13 + 352 * v12 + 4);
  if (((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31)) != v11)
  {
    do
    {
      LODWORD(v12) = *(_DWORD *)(v13 + 352 * v12) & 0x7FFFFFFF;
      if ((_DWORD)v12 == 0x7FFFFFFF)
        goto LABEL_14;
      v15 = 0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v13 + 352 * v12 + 4);
    }
    while (((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31)) != v11);
  }
  v16 = v13 + 352 * v12 + 8;
LABEL_9:
  v17 = *(_QWORD *)(v16 + 336);
LABEL_15:
  if (v7)
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = v43;
      if (v43 <= v21)
      {
        v52 = 0;
        memset(v56, 0, 32);
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v83 = 136315906;
        v84 = "operator[]";
        v85 = 1024;
        v86 = 789;
        v87 = 2048;
        v88 = v21;
        v89 = 2048;
        v90 = v22;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_69:
        v52 = 0;
        memset(v56, 0, 32);
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v83 = 136315906;
        v84 = "operator[]";
        v85 = 1024;
        v86 = 468;
        v87 = 2048;
        v88 = v21;
        v89 = 2048;
        v90 = v22;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_70:
        v52 = 0;
        memset(v56, 0, 32);
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v83 = 136315906;
        v84 = "operator[]";
        v85 = 1024;
        v86 = 468;
        v87 = 2048;
        v88 = v21;
        v89 = 2048;
        v90 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_71:
        v52 = 0;
        memset(v56, 0, 32);
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v83 = 136315906;
        v84 = "operator[]";
        v85 = 1024;
        v86 = 858;
        v87 = 2048;
        v88 = v20;
        v89 = 2048;
        v90 = v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v23 = v45 + v20;
      if (!*(_BYTE *)(v45 + v20 + 224))
        goto LABEL_24;
      if (!dyld_program_sdk_at_least() || v17 < 8)
        break;
      *(_BYTE *)(v23 + 224) = 0;
LABEL_27:
      ++v21;
      v20 += 240;
      if (v7 == v21)
        goto LABEL_28;
    }
    v24 = re::TextureAtlas::requestTile(*(re::TextureAtlas **)(v5 + 2984), 512, 512, 1.0);
    v3 = v50;
    if ((unint64_t)v50 <= v21)
      goto LABEL_70;
    *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * v21) = v24;
    ++v17;
LABEL_24:
    if (*(_BYTE *)(v23 + 223))
    {
      v25 = re::TextureAtlas::requestTile((re::TextureAtlas *)(*(_QWORD *)(v5 + 2984) + 96), 512, 512, 1.0);
      v22 = *((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1) <= v21)
        goto LABEL_69;
      *(_QWORD *)(v49 + 8 * v21) = v25;
    }
    goto LABEL_27;
  }
LABEL_28:
  v54 = 1uLL;
  v53 = 0u;
  v55 = 0uLL;
  v56[3] = 1;
  memset(v56, 0, 24);
  memset(&v56[4], 0, 32);
  v58 = 1;
  v57 = 0u;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v64 = 1;
  v63 = 0u;
  v62 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v70 = 1;
  v69 = 0u;
  v68 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v77 = 0;
  v75 = 0u;
  v80 = 0;
  v76 = 1;
  v79 = 0;
  v81 = 0;
  v78 = 0;
  v82 = 0;
  v26 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v5 + 88, &v51, (uint64_t)&v53);
  re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v75);
  if ((_QWORD)v75)
  {
    v27 = v76;
    if ((v76 & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v75 + 40))();
      v27 = v76;
    }
    v75 = 0uLL;
    v76 = (v27 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v69);
  if ((_QWORD)v69)
  {
    v28 = v70;
    if ((v70 & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v69 + 40))();
      v28 = v70;
    }
    v69 = 0uLL;
    LODWORD(v70) = (v28 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v63);
  if ((_QWORD)v63)
  {
    v29 = v64;
    if ((v64 & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v63 + 40))();
      v29 = v64;
    }
    v63 = 0uLL;
    LODWORD(v64) = (v29 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v57);
  if ((_QWORD)v57)
  {
    v30 = v58;
    if ((v58 & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v57 + 40))();
      v30 = v58;
    }
    v57 = 0uLL;
    LODWORD(v58) = (v30 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v56[1]);
  if (v56[1])
  {
    v31 = v56[3];
    if ((v56[3] & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v56[1] + 40))();
      v31 = v56[3];
    }
    v56[1] = 0;
    v56[2] = 0;
    LODWORD(v56[3]) = (v31 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v53);
  if ((_QWORD)v53 && (v54 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v53 + 40))();
  v32 = *(_QWORD *)(v26 + 208);
  v21 = *(_QWORD *)(v26 + 176);
  if (v32 + 1 > 4 * v21)
  {
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity((_QWORD *)(v26 + 168), (v32 + 4) >> 2);
    v21 = *(_QWORD *)(v26 + 176);
  }
  v20 = v32 >> 2;
  if (v21 <= v32 >> 2)
    goto LABEL_71;
  v33 = *(_QWORD *)(v26 + 200);
  if ((*(_DWORD *)(v26 + 184) & 1) != 0)
    v33 = v26 + 192;
  v34 = *(_QWORD *)(v33 + 8 * v20);
  ++*(_QWORD *)(v26 + 208);
  ++*(_DWORD *)(v26 + 216);
  v35 = v34 + 120 * (v32 & 3);
  *(_QWORD *)(v35 + 32) = 0;
  *(_DWORD *)(v35 + 24) = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  *(_QWORD *)v35 = 0;
  *(_QWORD *)v35 = v41;
  v41 = 0;
  *(_QWORD *)(v35 + 8) = v42;
  v42 = 0;
  v36 = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v35 + 16) = v43;
  v43 = v36;
  v37 = *(_QWORD *)(v35 + 32);
  *(_QWORD *)(v35 + 32) = v45;
  *(_QWORD *)&v45 = v37;
  ++v44;
  ++*(_DWORD *)(v35 + 24);
  *(_QWORD *)(v35 + 48) = 0;
  *(_QWORD *)(v35 + 56) = 0;
  *(_QWORD *)(v35 + 40) = 0;
  *(_QWORD *)(v35 + 40) = *((_QWORD *)&v45 + 1);
  *((_QWORD *)&v45 + 1) = 0;
  *(_QWORD *)(v35 + 48) = v46;
  *(_QWORD *)&v46 = 0;
  v38 = *(_QWORD *)(v35 + 56);
  *(_QWORD *)(v35 + 56) = *((_QWORD *)&v46 + 1);
  *((_QWORD *)&v46 + 1) = v38;
  *(_QWORD *)(v35 + 64) = v47;
  *(_QWORD *)(v35 + 72) = 0;
  *(_QWORD *)(v35 + 80) = 0;
  *(_QWORD *)(v35 + 88) = 0;
  *(_QWORD *)(v35 + 72) = v48;
  *(_QWORD *)&v48 = 0;
  *(_QWORD *)(v35 + 80) = *((_QWORD *)&v48 + 1);
  *((_QWORD *)&v48 + 1) = 0;
  v39 = *(_QWORD *)(v35 + 88);
  *(_QWORD *)(v35 + 88) = v49;
  *(_QWORD *)&v49 = v39;
  *(_QWORD *)(v35 + 96) = 0;
  *(_QWORD *)(v35 + 104) = 0;
  *(_QWORD *)(v35 + 112) = 0;
  *(_QWORD *)(v35 + 96) = *((_QWORD *)&v49 + 1);
  *((_QWORD *)&v49 + 1) = 0;
  *(_QWORD *)(v35 + 104) = v50;
  *(_QWORD *)&v50 = 0;
  v40 = *(_QWORD *)(v35 + 112);
  *(_QWORD *)(v35 + 112) = *((_QWORD *)&v50 + 1);
  *((_QWORD *)&v50 + 1) = v40;
  *(_QWORD *)(v26 + 336) = v17;
  *(_BYTE *)(v5 + 2992) = 0;
  if (*((_QWORD *)&v49 + 1))
    *((_QWORD *)&v49 + 1) = 0;
  if ((_QWORD)v48)
  {
    if (*((_QWORD *)&v48 + 1))
    {
      (*(void (**)(void))(*(_QWORD *)v48 + 40))();
      *((_QWORD *)&v48 + 1) = 0;
      *(_QWORD *)&v49 = 0;
    }
    *(_QWORD *)&v48 = 0;
  }
  if (*((_QWORD *)&v45 + 1))
  {
    if ((_QWORD)v46)
    {
      (*(void (**)(void))(**((_QWORD **)&v45 + 1) + 40))();
      v46 = 0uLL;
    }
    *((_QWORD *)&v45 + 1) = 0;
  }
  return re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)&v41);
}

uint64_t re::LightContextBuilder::addPointLights(uint64_t result, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  unint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t j;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  re::TextureAtlas *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[8];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  const char *v81;
  __int16 v82;
  int v83;
  __int16 v84;
  unint64_t v85;
  __int16 v86;
  unint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v48 = a2;
  if (*(_QWORD *)(a3 + 16))
  {
    v3 = result;
    v38 = 0;
    v39 = 0;
    v41 = 0;
    v40 = 0;
    v42 = 0u;
    v43 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v4 = (_anonymous_namespace_ *)re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v38, a3);
    v5 = v40;
    *(_QWORD *)&v47 = v5;
    if (v5)
    {
      if (v5 >= 0x555555555555556)
      {
LABEL_72:
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v5);
        _os_crash();
        __break(1u);
        goto LABEL_73;
      }
      *((_QWORD *)&v47 + 1) = v8;
      if (!v8)
      {
LABEL_73:
        re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_74;
      }
      v10 = v5 - 1;
      if (v5 != 1)
      {
        v11 = 0;
        do
        {
          for (i = 0; i != 48; i += 8)
            *(_QWORD *)((char *)v8 + i) = 0xFFFFFFFFLL;
          v8 = (_anonymous_namespace_ *)((char *)v8 + 48);
          ++v11;
        }
        while (v11 != v10);
      }
      for (j = 0; j != 48; j += 8)
        *(_QWORD *)((char *)v8 + j) = 0xFFFFFFFFLL;
      *((_QWORD *)&v45 + 1) = v5;
      *(_QWORD *)&v46 = v14;
      if (!v14)
      {
LABEL_74:
        re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
      if (v5 != 1)
      {
        do
        {
          *(_QWORD *)v14 = 0xFFFFFFFFLL;
          v14 = (_anonymous_namespace_ *)((char *)v14 + 8);
          --v10;
        }
        while (v10);
      }
      *(_QWORD *)v14 = 0xFFFFFFFFLL;
    }
    else
    {
    }
    if (v5)
    {
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v40;
        if (v40 <= v17)
          break;
        v19 = v42;
        if (*(_BYTE *)(v42 + 224 * v17 + 215))
        {
          v18 = v47;
          if ((unint64_t)v47 <= v17)
            goto LABEL_69;
          v20 = 0;
          v21 = *(re::TextureAtlas **)(v3 + 2984);
          v22 = *((_QWORD *)&v47 + 1) + v16;
          do
          {
            *(_QWORD *)(v22 + v20) = re::TextureAtlas::requestTile(v21, 256, 256, 2.0);
            v20 += 8;
          }
          while (v20 != 48);
        }
        if (*(_BYTE *)(v19 + 224 * v17 + 214))
        {
          v18 = *((_QWORD *)&v45 + 1);
          if (*((_QWORD *)&v45 + 1) <= v17)
            goto LABEL_70;
          v23 = v46;
          *(_QWORD *)(v23 + 8 * v17) = re::TextureAtlas::requestTile((re::TextureAtlas *)(*(_QWORD *)(v3 + 2984) + 96), 512, 256, 2.0);
        }
        ++v17;
        v16 += 48;
        if (v17 == v5)
          goto LABEL_28;
      }
      v49 = 0;
      memset(v53, 0, 32);
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v80 = 136315906;
      v81 = "operator[]";
      v82 = 1024;
      v83 = 789;
      v84 = 2048;
      v85 = v17;
      v86 = 2048;
      v87 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      v49 = 0;
      memset(v53, 0, 32);
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v80 = 136315906;
      v81 = "operator[]";
      v82 = 1024;
      v83 = 468;
      v84 = 2048;
      v85 = v17;
      v86 = 2048;
      v87 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      v49 = 0;
      memset(v53, 0, 32);
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v80 = 136315906;
      v81 = "operator[]";
      v82 = 1024;
      v83 = 468;
      v84 = 2048;
      v85 = v17;
      v86 = 2048;
      v87 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_71;
    }
LABEL_28:
    v51 = 1uLL;
    v50 = 0u;
    v52 = 0uLL;
    v53[3] = 1;
    memset(v53, 0, 24);
    memset(&v53[4], 0, 32);
    v55 = 1;
    v54 = 0u;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v61 = 1;
    v60 = 0u;
    v59 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v67 = 1;
    v66 = 0u;
    v65 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v74 = 0;
    v72 = 0u;
    v73 = 1;
    v76 = 0;
    v78 = 0;
    v75 = 0;
    v77 = 0;
    v79 = 0;
    v5 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v3 + 88, &v48, (uint64_t)&v50);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v72);
    if ((_QWORD)v72)
    {
      v24 = v73;
      if ((v73 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v72 + 40))();
        v24 = v73;
      }
      v72 = 0uLL;
      v73 = (v24 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v66);
    if ((_QWORD)v66)
    {
      v25 = v67;
      if ((v67 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v66 + 40))();
        v25 = v67;
      }
      v66 = 0uLL;
      LODWORD(v67) = (v25 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v60);
    if ((_QWORD)v60)
    {
      v26 = v61;
      if ((v61 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v60 + 40))();
        v26 = v61;
      }
      v60 = 0uLL;
      LODWORD(v61) = (v26 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v54);
    if ((_QWORD)v54)
    {
      v27 = v55;
      if ((v55 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v54 + 40))();
        v27 = v55;
      }
      v54 = 0uLL;
      LODWORD(v55) = (v27 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v53[1]);
    if (v53[1])
    {
      v28 = v53[3];
      if ((v53[3] & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v53[1] + 40))();
        v28 = v53[3];
      }
      v53[1] = 0;
      v53[2] = 0;
      LODWORD(v53[3]) = (v28 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v50);
    if ((_QWORD)v50 && (v51 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)v50 + 40))();
    v29 = *(_QWORD *)(v5 + 264);
    v18 = *(_QWORD *)(v5 + 232);
    if (v29 + 1 > 4 * v18)
    {
      re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity((_QWORD *)(v5 + 224), (v29 + 4) >> 2);
      v18 = *(_QWORD *)(v5 + 232);
    }
    v17 = v29 >> 2;
    if (v18 <= v29 >> 2)
    {
LABEL_71:
      v49 = 0;
      memset(v53, 0, 32);
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v80 = 136315906;
      v81 = "operator[]";
      v82 = 1024;
      v83 = 858;
      v84 = 2048;
      v85 = v17;
      v86 = 2048;
      v87 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_72;
    }
    v30 = *(_QWORD *)(v5 + 256);
    if ((*(_DWORD *)(v5 + 240) & 1) != 0)
      v30 = v5 + 248;
    v31 = *(_QWORD *)(v30 + 8 * v17);
    ++*(_QWORD *)(v5 + 264);
    ++*(_DWORD *)(v5 + 272);
    v32 = v31 + 120 * (v29 & 3);
    *(_QWORD *)(v32 + 32) = 0;
    *(_DWORD *)(v32 + 24) = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)v32 = 0;
    *(_QWORD *)v32 = v38;
    v38 = 0;
    *(_QWORD *)(v32 + 8) = v39;
    v39 = 0;
    v33 = *(_QWORD *)(v32 + 16);
    *(_QWORD *)(v32 + 16) = v40;
    v40 = v33;
    v34 = *(_QWORD *)(v32 + 32);
    *(_QWORD *)(v32 + 32) = v42;
    *(_QWORD *)&v42 = v34;
    ++v41;
    ++*(_DWORD *)(v32 + 24);
    *(_QWORD *)(v32 + 48) = 0;
    *(_QWORD *)(v32 + 56) = 0;
    *(_QWORD *)(v32 + 40) = 0;
    *(_QWORD *)(v32 + 40) = *((_QWORD *)&v42 + 1);
    *((_QWORD *)&v42 + 1) = 0;
    *(_QWORD *)(v32 + 48) = v43;
    *(_QWORD *)&v43 = 0;
    v35 = *(_QWORD *)(v32 + 56);
    *(_QWORD *)(v32 + 56) = *((_QWORD *)&v43 + 1);
    *((_QWORD *)&v43 + 1) = v35;
    *(_QWORD *)(v32 + 64) = v44;
    *(_QWORD *)(v32 + 72) = 0;
    *(_QWORD *)(v32 + 80) = 0;
    *(_QWORD *)(v32 + 88) = 0;
    *(_QWORD *)(v32 + 72) = v45;
    *(_QWORD *)&v45 = 0;
    *(_QWORD *)(v32 + 80) = *((_QWORD *)&v45 + 1);
    *((_QWORD *)&v45 + 1) = 0;
    v36 = *(_QWORD *)(v32 + 88);
    *(_QWORD *)(v32 + 88) = v46;
    *(_QWORD *)&v46 = v36;
    *(_QWORD *)(v32 + 96) = 0;
    *(_QWORD *)(v32 + 104) = 0;
    *(_QWORD *)(v32 + 112) = 0;
    *(_QWORD *)(v32 + 96) = *((_QWORD *)&v46 + 1);
    *((_QWORD *)&v46 + 1) = 0;
    *(_QWORD *)(v32 + 104) = v47;
    *(_QWORD *)&v47 = 0;
    v37 = *(_QWORD *)(v32 + 112);
    *(_QWORD *)(v32 + 112) = *((_QWORD *)&v47 + 1);
    *((_QWORD *)&v47 + 1) = v37;
    *(_BYTE *)(v3 + 2992) = 0;
    if (*((_QWORD *)&v46 + 1))
      *((_QWORD *)&v46 + 1) = 0;
    if ((_QWORD)v45)
    {
      if (*((_QWORD *)&v45 + 1))
      {
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
        *((_QWORD *)&v45 + 1) = 0;
        *(_QWORD *)&v46 = 0;
      }
      *(_QWORD *)&v45 = 0;
    }
    if (*((_QWORD *)&v42 + 1))
    {
      if ((_QWORD)v43)
      {
        (*(void (**)(void))(**((_QWORD **)&v42 + 1) + 40))();
        v43 = 0uLL;
      }
      *((_QWORD *)&v42 + 1) = 0;
    }
    return re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)&v38);
  }
  return result;
}

uint64_t re::LightContextBuilder::addRectAreaLights(uint64_t result, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  unint64_t v60;
  __int16 v61;
  unint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  if (*(_QWORD *)(a3 + 16))
  {
    v3 = result;
    v19 = 0;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v18 = 0;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v15, a3);
    memset(v25, 0, 24);
    v22 = 0u;
    v23 = 1uLL;
    v24 = 0uLL;
    *((_QWORD *)&v25[1] + 1) = 1;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v31 = 1;
    v30 = 0u;
    v29 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v37 = 1;
    v36 = 0u;
    v35 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v43 = 1;
    v42 = 0u;
    v41 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v49 = 1;
    v48 = 0u;
    v52 = 0;
    v51 = 0;
    v53 = 0;
    v50 = 0;
    v54 = 0;
    v4 = re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(v3 + 88, &v20, (uint64_t)&v22);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v48);
    if ((_QWORD)v48)
    {
      v5 = v49;
      if ((v49 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v48 + 40))();
        v5 = v49;
      }
      v48 = 0uLL;
      LODWORD(v49) = (v5 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v42);
    if ((_QWORD)v42)
    {
      v6 = v43;
      if ((v43 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v42 + 40))();
        v6 = v43;
      }
      v42 = 0uLL;
      LODWORD(v43) = (v6 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v36);
    if ((_QWORD)v36)
    {
      v7 = v37;
      if ((v37 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v36 + 40))();
        v7 = v37;
      }
      v36 = 0uLL;
      LODWORD(v37) = (v7 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v30);
    if ((_QWORD)v30)
    {
      v8 = v31;
      if ((v31 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v30 + 40))();
        v8 = v31;
      }
      v30 = 0uLL;
      LODWORD(v31) = (v8 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)v25 + 8);
    if (*((_QWORD *)&v25[0] + 1))
    {
      v9 = DWORD2(v25[1]);
      if ((BYTE8(v25[1]) & 1) == 0)
      {
        (*(void (**)(void))(**((_QWORD **)&v25[0] + 1) + 40))();
        v9 = DWORD2(v25[1]);
      }
      *((_QWORD *)&v25[0] + 1) = 0;
      *(_QWORD *)&v25[1] = 0;
      DWORD2(v25[1]) = (v9 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v22);
    if ((_QWORD)v22 && (v23 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    v10 = *(_QWORD *)(v4 + 320);
    v11 = *(_QWORD *)(v4 + 288);
    if (v10 + 1 > 4 * v11)
    {
      re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(v4 + 280), (v10 + 4) >> 2);
      v11 = *(_QWORD *)(v4 + 288);
    }
    if (v11 <= v10 >> 2)
    {
      v21 = 0;
      memset(v25, 0, sizeof(v25));
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v55 = 136315906;
      v56 = "operator[]";
      v57 = 1024;
      v58 = 858;
      v59 = 2048;
      v60 = v10 >> 2;
      v61 = 2048;
      v62 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = *(_QWORD *)(v4 + 312);
    if ((*(_DWORD *)(v4 + 296) & 1) != 0)
      v12 = v4 + 304;
    v13 = *(_QWORD *)(v12 + 8 * (v10 >> 2));
    ++*(_QWORD *)(v4 + 320);
    ++*(_DWORD *)(v4 + 328);
    v14 = v13 + 40 * (v10 & 3);
    *(_QWORD *)(v14 + 32) = 0;
    *(_DWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)v14 = v15;
    v15 = 0;
    *(_QWORD *)(v14 + 8) = v16;
    v16 = 0;
    *(_QWORD *)(v14 + 16) = v17;
    v17 = 0;
    *(_QWORD *)(v14 + 32) = v19;
    v19 = 0;
    ++v18;
    ++*(_DWORD *)(v14 + 24);
    *(_BYTE *)(v3 + 2992) = 0;
    return re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v15);
  }
  return result;
}

uint64_t re::LightContextBuilder::computeSceneBoundingBoxCorners(uint64_t result, uint64_t a2, uint64_t a3, int a4, char a5, double a6, double a7, double a8, __n128 a9)
{
  unint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  float v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  __int128 v55;
  float32x4_t v56[5];
  _BYTE v57[48];
  __int128 v58;
  uint64_t v59;

  v44 = result;
  v59 = *MEMORY[0x24BDAC8D0];
  v45 = *(_QWORD *)(a3 + 40);
  if (v45)
  {
    v9 = 0;
    v10 = a2 + 72;
    v11 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v12 = a2 + 8;
    v13.i64[0] = 0x7F0000007FLL;
    v13.i64[1] = 0x7F0000007FLL;
    while (1)
    {
      v51 = v13;
      v53 = v11;
      v47 = v9;
      result = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](a3, v9);
      v14 = *(_QWORD *)(result + 16);
      if (v14)
        break;
      v13 = v51;
      v11 = v53;
LABEL_24:
      v9 = v47 + 1;
      if (v47 + 1 == v45)
        goto LABEL_27;
    }
    v15 = *(float32x4_t **)(result + 32);
    v50 = &v15[41 * v14];
    v13 = v51;
    v11 = v53;
    while (1)
    {
      if ((a5 & 1) != 0)
      {
        if (v15[40].i8[1])
          goto LABEL_9;
      }
      else if (v15[26].u16[4] == a4)
      {
LABEL_9:
        v16 = v15[1].i64[1];
        v55 = *(_OWORD *)v16;
        if (v15->i64[1])
        {
          v17 = 0;
          do
          {
            v52 = v13;
            v54 = v11;
            result = re::DataArray<re::MeshInstance>::tryGet(v10, *(_QWORD *)(v15->i64[0] + 8 * v17));
            if (result
              && (v18 = (_OWORD *)result,
                  (result = re::DataArray<re::MeshModel>::tryGet(v12, *(_QWORD *)(result + 16))) != 0))
            {
              v19 = *(_QWORD *)(v16 + 24);
              if (v19 <= v17)
              {
                memset(v56, 0, sizeof(v56));
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v57 = 136315906;
                *(_QWORD *)&v57[4] = "operator[]";
                *(_WORD *)&v57[12] = 1024;
                *(_DWORD *)&v57[14] = 866;
                *(_WORD *)&v57[18] = 2048;
                *(_QWORD *)&v57[20] = v17;
                *(_WORD *)&v57[28] = 2048;
                *(_QWORD *)&v57[30] = v19;
                _os_log_send_and_compose_impl();
                result = _os_crash_msg();
                __break(1u);
                goto LABEL_37;
              }
              v20 = v16 + 40;
              if ((*(_BYTE *)(v16 + 32) & 1) == 0)
                v20 = *(_QWORD *)(v16 + 48);
              v21 = 0;
              v22 = *(unsigned int *)(v20 + 4 * v17);
              v23 = v18[3];
              v24 = v18[4];
              v25 = v18[5];
              v26 = *(_QWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFF7 | (8 * (v22 & 1)));
              v27 = v22 >> 1;
              v28 = v15[3];
              v29 = v15[4];
              v30 = v15[5];
              v31 = v15[6];
              *(_OWORD *)v57 = v18[2];
              *(_OWORD *)&v57[16] = v23;
              *(_OWORD *)&v57[32] = v24;
              v58 = v25;
              do
              {
                v56[v21 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, COERCE_FLOAT(*(_OWORD *)&v57[v21])), v29, *(float32x2_t *)&v57[v21], 1), v30, *(float32x4_t *)&v57[v21], 2), v31, *(float32x4_t *)&v57[v21], 3);
                v21 += 16;
              }
              while (v21 != 64);
              result = (uint64_t)re::AABB::transform((float32x4_t *)(v26 + 32 * v27), v56, (uint64_t)v57);
              v33 = v52;
              v32 = v54;
              v32.i32[3] = 0;
              v34 = *(float32x4_t *)v57;
              v35 = *(float32x4_t *)&v57[16];
              v34.i32[3] = 0;
              v11 = vminnmq_f32(v32, v34);
              v33.i32[3] = 0;
              v35.i32[3] = 0;
              v13 = vmaxnmq_f32(v33, v35);
            }
            else
            {
              v13 = v52;
              v11 = v54;
            }
          }
          while (++v17 < v15->i64[1]);
        }
      }
      v15 += 41;
      if (v15 == v50)
        goto LABEL_24;
    }
  }
  v11 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v13.i64[0] = 0x7F0000007FLL;
  v13.i64[1] = 0x7F0000007FLL;
LABEL_27:
  v36 = (uint32x4_t)vcgtq_f32(v11, v13);
  v36.i32[3] = v36.i32[2];
  if ((vmaxvq_u32(v36) & 0x80000000) != 0)
  {
LABEL_37:
    for (i = 0; i != 256; i += 32)
    {
      v43 = v44 + i;
      *(_QWORD *)v43 = 0;
      *(_QWORD *)(v43 + 8) = 0;
      *(_BYTE *)(v43 + 16) = 0;
    }
  }
  else
  {
    for (j = 0; j != 256; j += 32)
    {
      v38 = v44 + j;
      *(_QWORD *)v38 = 0;
      *(_QWORD *)(v38 + 8) = 0;
      *(_BYTE *)(v38 + 16) = 0;
    }
    v39 = 0;
    v40 = (__n128 *)(v44 + 16);
    do
    {
      a9.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v39), (int8x8_t)0x200000001)), *(int8x8_t *)v11.f32, *(int8x8_t *)v13.f32);
      if ((v39 & 4) != 0)
        v41 = v13.f32[2];
      else
        v41 = v11.f32[2];
      a9.n128_f32[2] = v41;
      v40[-1] = a9;
      v40->n128_u8[0] = 0;
      v40 += 2;
      ++v39;
    }
    while (v39 != 8);
  }
  return result;
}

void re::LightContextBuilder::calculateDirectionalLightBoundsWithCameraView(float32x4_t *a1, _OWORD *a2, float32x4_t *a3, float32x4_t *a4, int a5, int a6, char a7, float a8)
{
  __int128 v16;
  __int128 v17;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  float v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float v79;
  float v80;
  uint64_t v81;
  float32x4_t v82;
  int32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  float32x4_t v87;
  float32x4_t v88;
  float v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  simd_float4x4 v103;
  simd_float4x4 v104;

  v16 = a2[5];
  v99 = a2[4];
  v100 = v16;
  v17 = a2[7];
  v101 = a2[6];
  v102 = v17;
  BYTE12(v100) = 0;
  _ZF = (_DWORD)v17 == 1;
  v19 = 1.0;
  if (!_ZF)
    v19 = 0.0;
  v94 = v19;
  re::Projection::computeMatrix4x4F((re::Projection *)&v99, (uint64_t)&v95);
  v103.columns[2] = (simd_float4)v97;
  v103.columns[3] = (simd_float4)v98;
  v103.columns[0] = (simd_float4)v95;
  v103.columns[1] = (simd_float4)v96;
  v104 = __invert_f4(v103);
  v90 = (float32x4_t)v104.columns[1];
  v91 = (float32x4_t)v104.columns[0];
  v92 = (float32x4_t)v104.columns[3];
  v93 = (float32x4_t)v104.columns[2];
  re::RenderCamera::computeLocalTransform((re::RenderCamera *)(a2 + 2), (uint64_t)&v95);
  v20 = vaddq_f32(v92, vmlaq_n_f32(vsubq_f32(v90, v91), v93, v94));
  v21 = vdivq_f32(v20, (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3));
  v22 = vmulq_f32(v21, (float32x4_t)xmmword_226108EE0);
  v23 = vaddq_f32(vmulq_n_f32(v21, (float)(a8 + 0.0)/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), (float32x4_t)0);
  v24 = vaddq_f32(v92, vmlaq_n_f32(vaddq_f32(v90, v91), v93, v94));
  v25 = vdivq_f32(v24, (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3));
  v26 = vmulq_f32(v25, (float32x4_t)xmmword_226108EE0);
  v27 = vaddq_f32(vmulq_n_f32(v25, (float)(a8 + 0.0)/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]), (float32x4_t)0);
  __asm { FMOV            V6.4S, #-1.0 }
  v32 = vaddq_f32(v92, vmlaq_n_f32(vmlaq_f32(vnegq_f32(v91), _Q6, v90), v93, v94));
  v33 = vdivq_f32(v32, (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 3));
  v34 = vmulq_f32(v33, (float32x4_t)xmmword_226108EE0);
  v35 = vaddq_f32(vmulq_n_f32(v33, (float)(a8 + 0.0)/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]), (float32x4_t)0);
  v36 = vaddq_f32(v92, vmlaq_n_f32(vmlaq_f32(v91, _Q6, v90), v93, v94));
  v37 = vdivq_f32(v36, (float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 3));
  v38 = vmulq_f32(v37, (float32x4_t)xmmword_226108EE0);
  v39 = vaddq_f32(vmulq_n_f32(v37, (float)(a8 + 0.0)/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]), (float32x4_t)0);
  v40.i64[0] = 0x3F0000003F000000;
  v40.i64[1] = 0x3F0000003F000000;
  v41 = vmulq_f32(vaddq_f32(vmulq_f32(vaddq_f32(v25, v33), v40), vmulq_f32(vaddq_f32(v27, v35), v40)), v40);
  if (a5)
  {
    if (a6)
    {
      v42 = vsubq_f32(v27, v41);
      v43 = v42.f32[1];
      if (v42.f32[0] >= v42.f32[1])
        v43 = v42.f32[0];
      v42.i32[0] = v42.i32[2];
      if (v43 >= v42.f32[2])
        v42.f32[0] = v43;
    }
    else
    {
      v54 = vsubq_f32(v39, v21);
      v55 = vmulq_f32(v54, v54);
      v56 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0]);
      v57 = vsubq_f32(v35, v25);
      v58 = vmulq_f32(v57, v57);
      v59 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]);
      v60 = vsubq_f32(v27, v33);
      v61 = vmulq_f32(v60, v60);
      v62 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0]);
      v63 = vsubq_f32(v23, v37);
      v64 = vmulq_f32(v63, v63);
      v65 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0]);
      if (v56 < v59)
        v56 = v59;
      if (v62 < v56)
        v62 = v56;
      if (v65 < v62)
        v65 = v62;
      v42.f32[0] = v65 * 0.5;
    }
  }
  else if ((a7 & 1) != 0)
  {
    v44 = vsubq_f32(v39, v21);
    v45 = vmulq_f32(v44, v44);
    v46 = vsubq_f32(v35, v25);
    v47 = vmulq_f32(v46, v46);
    v48 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]);
    v49 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0]);
    v50 = vsubq_f32(v27, v33);
    v51 = vmulq_f32(v50, v50);
    v52 = vsubq_f32(v23, v37);
    v42 = vmulq_f32(v52, v52);
    v53 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0]);
    v42.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]);
    if (v48 < v49)
      v48 = v49;
    if (v53 < v48)
      v53 = v48;
    if (v42.f32[0] < v53)
      v42.f32[0] = v53;
  }
  else
  {
    v66 = vsubq_f32(v39, v41);
    v67 = vmulq_f32(v66, v66);
    LODWORD(v68) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).u32[0];
    v69 = vsubq_f32(v35, v41);
    v70 = vmulq_f32(v69, v69);
    v71 = vsubq_f32(v27, v41);
    v72 = vmulq_f32(v71, v71);
    LODWORD(v73) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).u32[0];
    v74 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1)));
    v75 = vsubq_f32(v23, v41);
    v76 = vmulq_f32(v75, v75);
    v42 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1)));
    if ((vmovn_s32(vcgtq_f32(v42, v74)).u8[0] & 1) == 0)
      v42.f32[0] = v74.f32[0];
    if (v73 >= v42.f32[0])
      v42.f32[0] = v73;
    if (v68 >= v42.f32[0])
      v42.f32[0] = v68;
    v42.f32[0] = sqrtf(v42.f32[0]);
  }
  v77 = vaddq_f32(v98, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, v41.f32[0]), v96, *(float32x2_t *)v41.f32, 1), v97, v41, 2));
  v78 = vmulq_f32(*a3, *a3);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).f32[0]) >= 1.0e-10)
  {
    v81 = 0;
    v82 = a4[4];
    v83 = (int32x4_t)vmulq_f32(v82, v82);
    v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
    v84 = vrsqrte_f32((float32x2_t)v83.u32[0]);
    v85 = vmul_f32(v84, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v84, v84)));
    LODWORD(v86) = vmul_f32(v85, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v85, v85))).u32[0];
    v80 = INFINITY;
    v79 = -INFINITY;
    v87 = vnegq_f32(vmulq_n_f32(v82, v86));
    do
    {
      v88 = vmulq_f32(vsubq_f32(a3[v81], v77), v87);
      v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0];
      if (v89 > v79)
        v79 = v89;
      if (v89 < v80)
        v80 = v89;
      v81 += 2;
    }
    while (v81 != 16);
  }
  else
  {
    v79 = 10.0;
    v80 = 0.01;
  }
  *a1 = v77;
  a1[1].i32[0] = v42.i32[0];
  a1[1].f32[1] = v80;
  a1[1].f32[2] = v79;
}

void re::LightContextBuilder::buildShadowViews(re::PerFrameAllocator *,re::LightContexts &)const::$_0::operator()(re::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, _BYTE *a7, _anonymous_namespace_ *a8)
{
  const char *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  float32x2_t v29;
  float32x2_t v30;
  __int128 v31;
  float v32;
  float v33;
  float v34;
  NSObject *v35;
  uint64_t v36;
  float v37;
  float v38;
  float32x2_t v39;
  float32x2_t v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  unsigned int v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  float32x2_t v56;
  float32x2_t v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  char v62;
  _BYTE buf[12];
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  int32x2_t v67[22];
  BOOL v68;
  char v69;
  int v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (*(__int16 *)(a3 + 20) == -1)
  {
    v35 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      if ((*(_QWORD *)(a2 + 8) & 1) != 0)
        v36 = *(_QWORD *)(a2 + 16);
      else
        v36 = a2 + 9;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v36;
      _os_log_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEFAULT, "Failed to allocate shadow map for light %s: not enough free space in shadow map atlas.", buf, 0xCu);
    }
  }
  else
  {
    re::ShadowView::ShadowView((re::ShadowView *)buf, a1);
    if ((*(_QWORD *)(a2 + 8) & 1) != 0)
      v16 = *(const char **)(a2 + 16);
    else
      v16 = (const char *)(a2 + 9);
    re::DynamicString::DynamicString((re::DynamicString *)&v61, v16, a1);
    re::DynamicString::operator=((re::DynamicString *)buf, (re::DynamicString *)&v61);
    if (v61 && (v62 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v61 + 40))();
    *(_OWORD *)v67[0].i8 = *(_OWORD *)a3;
    *(int32x2_t *)((char *)&v67[1] + 6) = *(int32x2_t *)(a3 + 14);
    v18 = *(float *)(a2 + 32);
    v17 = *(float *)(a2 + 36);
    v19 = *(float *)(a2 + 40);
    v20 = *(float *)(a2 + 48);
    v21 = *(float *)(a2 + 52);
    v22 = *(float *)(a2 + 56);
    v23 = *(float *)(a2 + 64);
    v24 = *(float *)(a2 + 68);
    v25 = *(float *)(a2 + 72);
    v26 = (float)(v18 + v21) + v25;
    if (v26 >= 0.0)
    {
      v37 = sqrtf(v26 + 1.0);
      v38 = v37 + v37;
      v39 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v37 + v37));
      v40 = vmul_f32(v39, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v37 + v37), v39));
      v41 = vmul_f32(v40, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v37 + v37), v40)).f32[0];
      *(float *)&v31 = (float)(v22 - v24) * v41;
      v32 = (float)(v23 - v19) * v41;
      v33 = (float)(v17 - v20) * v41;
      v34 = v38 * 0.25;
    }
    else if (v18 < v21 || v18 < v25)
    {
      v42 = 1.0 - v18;
      v43 = v21 < v25;
      v44 = sqrtf((float)(v42 - v21) + v25);
      *(float *)&v45 = v44 + v44;
      v46 = vrecpe_f32((float32x2_t)v45);
      v47 = vmul_f32(v46, vrecps_f32((float32x2_t)v45, v46));
      v48 = vmul_f32(v47, vrecps_f32((float32x2_t)v45, v47)).f32[0];
      v49 = (float)(v19 + v23) * v48;
      v50 = v22 + v24;
      v51 = v50 * v48;
      v52 = *(float *)&v45 * 0.25;
      v53 = (float)(v17 - v20) * v48;
      v54 = sqrtf(v21 + (float)(v42 - v25));
      *(float *)&v55 = v54 + v54;
      v56 = vrecpe_f32((float32x2_t)v55);
      v57 = vmul_f32(v56, vrecps_f32((float32x2_t)v55, v56));
      v57.f32[0] = vmul_f32(v57, vrecps_f32((float32x2_t)v55, v57)).f32[0];
      v58 = (float)(v17 + v20) * v57.f32[0];
      v59 = *(float *)&v55 * 0.25;
      v60 = v50 * v57.f32[0];
      v34 = (float)(v23 - v19) * v57.f32[0];
      if (v43)
        *(float *)&v31 = v49;
      else
        *(float *)&v31 = v58;
      if (v43)
        v32 = v51;
      else
        v32 = v59;
      if (v43)
        v33 = v52;
      else
        v33 = v60;
      if (v43)
        v34 = v53;
    }
    else
    {
      v27 = sqrtf(v18 + (float)((float)(1.0 - v21) - v25));
      *(float *)&v28 = v27 + v27;
      v29 = vrecpe_f32((float32x2_t)v28);
      v30 = vmul_f32(v29, vrecps_f32((float32x2_t)v28, v29));
      v30.f32[0] = vmul_f32(v30, vrecps_f32((float32x2_t)v28, v30)).f32[0];
      *(float *)&v31 = *(float *)&v28 * 0.25;
      v32 = (float)(v17 + v20) * v30.f32[0];
      v33 = (float)(v19 + v23) * v30.f32[0];
      v34 = (float)(v22 - v24) * v30.f32[0];
    }
    *((float *)&v31 + 1) = v32;
    *((_QWORD *)&v31 + 1) = __PAIR64__(LODWORD(v34), LODWORD(v33));
    v64 = *(_OWORD *)(a2 + 80);
    v65 = v31;
    re::Projection::setFromMatrix4x4F((uint64_t)&v66, a4);
    *(int32x2_t *)((char *)&v67[1] + 4) = vadd_s32(*(int32x2_t *)((char *)&v67[1] + 4), (int32x2_t)0x300000003);
    v67[0] = vadd_s32(v67[0], (int32x2_t)0x500000005);
    v71 = a5;
    if (v68 || *a7)
    {
      if (!v68 || *a7)
      {
        if (!v68)
          v68 = *a7 != 0;
        v69 = a7[1];
      }
      else
      {
        v68 = 0;
      }
    }
    v70 = a6;
    re::DynamicArray<re::ShadowView>::add(a8, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      if ((buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
    }
  }
}

BOOL re::LightContextBuilder::checkIfMeshBoundingBoxIsInsideSpotLightCone(uint64_t a1, float32x4_t *a2, float32_t a3, float a4, double a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v21;
  int32x4_t v22;
  float v23;
  float v24;
  _BYTE *v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x8_t v29;
  int8x8_t v30;
  float v31;
  float v32;
  float32x4_t *v33;
  char v34;
  char v35;
  unsigned __int32 v36;
  float32x4_t v37;
  float v38;
  uint64_t v39;
  float v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x4_t v50;
  char v51;
  float v52;
  char v53;
  char v54;
  char v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  float32x4_t v60;
  float v61;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  _BYTE v68[16];
  uint64_t v69;

  v11 = 0;
  v13 = a2[2];
  v12 = a2[3];
  v64 = *a2;
  v65 = a2[1];
  v63 = vmulq_f32(*a2, (float32x4_t)0);
  v14 = vmlaq_f32(v63, (float32x4_t)0, v65);
  v15 = vmlaq_f32(v14, (float32x4_t)0, v13);
  __asm { FMOV            V0.4S, #-1.0 }
  v66 = v13;
  v21 = vmlaq_f32(v14, _Q0, v13);
  v22 = (int32x4_t)vmulq_f32(v21, v21);
  v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
  *(float32x2_t *)v13.f32 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  *(float32x2_t *)v13.f32 = vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32)));
  LODWORD(v23) = vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32))).u32[0];
  v24 = a4 * 0.5;
  do
  {
    v25 = &v68[v11];
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 0;
    v11 += 32;
  }
  while (v11 != 256);
  v26 = 0;
  v27 = vaddq_f32(v12, v15);
  v28 = vmulq_n_f32(v21, v23);
  v29 = *(int8x8_t *)a1;
  v30 = *(int8x8_t *)(a1 + 16);
  v31 = *(float *)(a1 + 8);
  v32 = *(float *)(a1 + 24);
  v33 = (float32x4_t *)&v69;
  v34 = 1;
  v35 = 1;
  do
  {
    *(int8x8_t *)a10.f32 = vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v26), (int8x8_t)0x200000001)), v29, v30);
    if ((v26 & 4) != 0)
      *(float *)&v36 = v32;
    else
      *(float *)&v36 = v31;
    a10.i32[2] = v36;
    v37 = vmulq_f32(v28, vsubq_f32(a10, v27));
    v33[-1] = a10;
    a10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1)));
    if (a10.f32[0] > a3)
    {
      v35 = 0;
LABEL_11:
      v33->i8[0] = 1;
      goto LABEL_13;
    }
    if (a10.f32[0] < 0.0)
    {
      v34 = 0;
      goto LABEL_11;
    }
    v35 = 0;
    v34 = 0;
    v33->i8[0] = 0;
LABEL_13:
    ++v26;
    v33 += 2;
  }
  while (v26 != 8);
  v67 = v27;
  v38 = tanf(v24);
  v39 = 0;
  v40 = v38 * a3;
  v41 = vmlaq_f32(vmlaq_f32(v64, (float32x4_t)0, v65), (float32x4_t)0, v66);
  v42 = (int32x4_t)vmulq_f32(v41, v41);
  v42.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2), vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1))).u32[0];
  v43 = vrsqrte_f32((float32x2_t)v42.u32[0]);
  v44 = vmul_f32(v43, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v43, v43)));
  v45 = vmulq_n_f32(v41, vmul_f32(v44, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v44, v44))).f32[0]);
  v46 = vmlaq_f32(vaddq_f32(v63, v65), (float32x4_t)0, v66);
  v47 = (int32x4_t)vmulq_f32(v46, v46);
  v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1))).u32[0];
  v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
  v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
  v50 = vmulq_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]);
  v51 = 1;
  v52 = -(float)(v38 * a3);
  v53 = 1;
  v54 = 1;
  v55 = 1;
  do
  {
    v56 = vsubq_f32(*(float32x4_t *)&v68[v39], v67);
    v57 = vmulq_f32(v56, v56);
    v58 = vmulq_f32(v45, v56);
    v57.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).f32[0]);
    v59 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]/ v57.f32[0];
    v60 = vmulq_f32(v50, v56);
    v61 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0]/ v57.f32[0];
    v55 &= v59 < v52;
    if (v59 <= v40)
      v54 = 0;
    else
      v55 = 0;
    v53 &= v59 < v52;
    if (v61 <= v40)
      v51 = 0;
    else
      v53 = 0;
    v39 += 32;
  }
  while (v39 != 256);
  return (((v54 | v55 | v51 | v53) | (v34 | v35)) & 1) == 0;
}

BOOL re::LightContextBuilder::checkIfMeshBoundingBoxIsInsidePointLightSphere(uint64_t a1, float32x4_t *a2, float a3)
{
  float32x4_t v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t *v8;
  uint64_t v9;
  int8x8_t v10;
  int8x8_t v11;
  float v12;
  float v13;
  float32x4_t *v14;
  float v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  char v31;
  char v32;
  float v33;
  char v34;
  char v35;
  char v36;
  char v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  float32x4_t v48[16];

  v4 = 0;
  v5 = a2[2];
  v6 = a2[3];
  v7 = vmlaq_f32(vmulq_f32(*a2, (float32x4_t)0), (float32x4_t)0, a2[1]);
  do
  {
    v8 = &v48[v4];
    v8->i64[0] = 0;
    v8->i64[1] = 0;
    v8[1].i8[0] = 0;
    v4 += 2;
  }
  while (v4 != 16);
  v9 = 0;
  v10 = *(int8x8_t *)a1;
  v11 = *(int8x8_t *)(a1 + 16);
  v12 = *(float *)(a1 + 8);
  v13 = *(float *)(a1 + 24);
  v14 = v48;
  do
  {
    *(int8x8_t *)v3.f32 = vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v9), (int8x8_t)0x200000001)), v10, v11);
    if ((v9 & 4) != 0)
      v15 = v13;
    else
      v15 = v12;
    v3.f32[2] = v15;
    *v14 = v3;
    v14 += 2;
    ++v9;
  }
  while (v9 != 8);
  v16 = 0;
  v17 = vaddq_f32(v6, vmlaq_f32(v7, (float32x4_t)0, v5));
  v18 = vsubq_f32(v48[2], v48[0]);
  v19 = (int32x4_t)vmulq_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
  v22 = vmulq_n_f32(v18, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
  v23 = vsubq_f32(v48[4], v48[0]);
  v24 = (int32x4_t)vmulq_f32(v23, v23);
  v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
  v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
  v27 = vmulq_n_f32(v23, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]);
  v28 = vsubq_f32(v48[8], v48[0]);
  v29 = (int32x4_t)vmulq_f32(v28, v28);
  v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
  *(float32x2_t *)v24.i8 = vrsqrte_f32((float32x2_t)v29.u32[0]);
  *(float32x2_t *)v24.i8 = vmul_f32(*(float32x2_t *)v24.i8, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8)));
  v30 = vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v24.i8, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8))).f32[0]);
  v31 = 1;
  v32 = 1;
  v33 = -a3;
  v34 = 1;
  v35 = 1;
  v36 = 1;
  v37 = 1;
  do
  {
    v38 = vsubq_f32(v48[v16], v17);
    v39 = vmulq_f32(v22, v38);
    v40 = vmulq_f32(v27, v38);
    v39.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0];
    v41 = vmulq_f32(v30, v38);
    LODWORD(v42) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u32[0];
    LODWORD(v43) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).u32[0];
    v44 = v39.f32[0] < v33;
    v37 &= v39.f32[0] > a3;
    if (v39.f32[0] > a3)
      v44 = 0;
    v36 &= v44;
    v45 = v42 < v33;
    v35 &= v42 > a3;
    if (v42 > a3)
      v45 = 0;
    v34 &= v45;
    v32 &= v43 > a3;
    v46 = v43 <= a3 && v43 < v33;
    v31 &= v46;
    v16 += 2;
  }
  while (v16 != 16);
  return (((v37 | v36 | v35 | v34) | (v32 | v31)) & 1) == 0;
}

uint64_t re::LightContextBuilder::buildLightContext(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float32x4_t v25;
  uint64_t v26;
  unint64_t j;
  uint64_t v28;
  unint64_t k;
  uint64_t v30;
  unint64_t m;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  int v58;
  int v59;
  __int16 v60;
  char v61;
  _BYTE *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float v66;
  uint64_t n;
  char *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  double v85;
  double v86;
  double v87;
  float32x4_t v88;
  unint64_t v89;
  unint64_t v90;
  float32_t v91;
  float v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  char v101;
  char v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  _DWORD *v109;
  int *v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  __int128 *v128;
  int v129;
  int v130;
  __int16 v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  int v157;
  int v158;
  float32x4_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _BYTE v168[28];
  _OWORD v169[7];
  _QWORD v170[7];
  __int16 v171;
  char v172;
  _OWORD v173[2];
  _BYTE v174[12];
  __int16 v175;
  int v176;
  __int16 v177;
  unint64_t v178;
  __int16 v179;
  unint64_t v180;
  _OWORD v181[3];
  __int128 v182;
  __int128 v183;
  uint64_t v184;

  v152 = result;
  v5 = a3;
  v150 = a2;
  v184 = *MEMORY[0x24BDAC8D0];
  v6 = a3 + 56;
  v7 = *(_QWORD *)(a3 + 96);
  if (v7)
  {
    v8 = 0;
    for (i = 0; i != v7; ++i)
    {
      result = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](v6, i);
      v8 += *(_QWORD *)(result + 16);
    }
  }
  else
  {
    v8 = 0;
  }
  v142 = v6;
  v139 = v5 + 224;
  v10 = *(_QWORD *)(v5 + 264);
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v139, v12);
      v13 = *(_QWORD *)(result + 16);
      if (v13)
        break;
LABEL_14:
      if (++v12 == v10)
        goto LABEL_17;
    }
    v14 = 0;
    v15 = *(_QWORD *)(result + 48);
    v16 = *(_QWORD *)(result + 56);
    v17 = *(_QWORD *)(result + 32) + 200;
    while (v15 != v14)
    {
      if (*(_BYTE *)(v16 + v14))
      {
        result = re::LightContextBuilder::checkIfMeshBoundingBoxIsInsidePointLightSphere(a5, (float32x4_t *)(v17 - 168), *(float *)v17);
        v11 += result;
      }
      ++v14;
      v17 += 224;
      if (v13 == v14)
        goto LABEL_14;
    }
    *(_QWORD *)v174 = 0;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v159 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(_QWORD *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 4) = v15;
    WORD6(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 14) = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_178;
  }
  v11 = 0;
LABEL_17:
  v138 = v5 + 168;
  v135 = (_QWORD *)v5;
  v18 = *(_QWORD *)(v5 + 208);
  if (v18)
  {
    v15 = 0;
    v19 = 0;
    while (1)
    {
      result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v138, v19);
      v14 = *(_QWORD *)(result + 16);
      if (v14)
        break;
LABEL_25:
      if (++v19 == v18)
        goto LABEL_28;
    }
    v16 = 0;
    v13 = *(_QWORD *)(result + 48);
    v17 = *(_QWORD *)(result + 56);
    v5 = *(_QWORD *)(result + 32) + 208;
    while (v13 != v16)
    {
      if (*(_BYTE *)(v17 + v16))
      {
        result = re::LightContextBuilder::checkIfMeshBoundingBoxIsInsideSpotLightCone(a5, (float32x4_t *)(v5 - 176), *(float32_t *)(v5 - 8), *(float *)v5, v20, v21, v22, v23, v24, v25);
        v15 += result;
      }
      ++v16;
      v5 += 240;
      if (v14 == v16)
        goto LABEL_25;
    }
LABEL_178:
    *(_QWORD *)v174 = 0;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v159 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(_QWORD *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 4) = v13;
    WORD6(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_179:
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 476;
    v177 = 2048;
    v178 = v8;
    v179 = 2048;
    v180 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_180:
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 468;
    v177 = 2048;
    v178 = v150 + v8;
    v179 = 2048;
    v180 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_181;
  }
  v15 = 0;
LABEL_28:
  v13 = (unint64_t)v135;
  v26 = v135[5];
  if (v26)
  {
    v16 = 0;
    for (j = 0; j != v26; ++j)
    {
      result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v135, j);
      v16 += *(_QWORD *)(result + 16);
    }
  }
  else
  {
    v16 = 0;
  }
  v28 = v135[40];
  if (v28)
  {
    v14 = 0;
    for (k = 0; k != v28; ++k)
    {
      result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)(v135 + 35), k);
      v14 += *(_QWORD *)(result + 16);
    }
  }
  else
  {
    v14 = 0;
  }
  v5 = (unint64_t)(v135 + 14);
  v30 = v135[19];
  if (v30)
  {
    v17 = 0;
    for (m = 0; m != v30; ++m)
    {
      result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[]((uint64_t)(v135 + 14), m);
      v17 += *(_QWORD *)(result + 64);
    }
  }
  else
  {
    v17 = 0;
  }
  v147 = *(_OWORD *)(a4 + 168);
  v148 = *(_OWORD *)(a4 + 72);
  v32 = v152;
  *(_QWORD *)(v152 + 8) = v8;
  *(_QWORD *)(v152 + 16) = 0;
  *(_QWORD *)v152 = v150;
  if (v8)
  {
    if (v8 >= 0x13B13B13B13B13CLL)
    {
LABEL_196:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 208, v8);
      _os_crash();
      __break(1u);
      goto LABEL_197;
    }
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v150 + 32))(v150, 208 * v8, 16);
    *(_QWORD *)(v152 + 16) = result;
    if (!result)
    {
LABEL_197:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_198;
    }
    v33 = v8 - 1;
    if (v8 != 1)
    {
      do
      {
        *(_DWORD *)(result + 176) = 0;
        *(_OWORD *)(result + 144) = 0uLL;
        *(_OWORD *)(result + 160) = 0uLL;
        *(_OWORD *)(result + 112) = 0uLL;
        *(_OWORD *)(result + 128) = 0uLL;
        *(_OWORD *)(result + 80) = 0uLL;
        *(_OWORD *)(result + 96) = 0uLL;
        *(_OWORD *)(result + 48) = 0uLL;
        *(_OWORD *)(result + 64) = 0uLL;
        *(_OWORD *)(result + 16) = 0uLL;
        *(_OWORD *)(result + 32) = 0uLL;
        *(_OWORD *)result = 0uLL;
        *(_WORD *)(result + 176) = -1;
        *(_QWORD *)(result + 196) = 0;
        *(_QWORD *)(result + 180) = 0;
        *(_QWORD *)(result + 188) = 0;
        *(_WORD *)(result + 200) = -1;
        *(_WORD *)(result + 204) = 0;
        result += 208;
        --v33;
      }
      while (v33);
    }
    *(_DWORD *)(result + 176) = 0;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_WORD *)(result + 176) = -1;
    *(_QWORD *)(result + 196) = 0;
    *(_QWORD *)(result + 180) = 0;
    *(_QWORD *)(result + 188) = 0;
    *(_WORD *)(result + 200) = -1;
    *(_WORD *)(result + 204) = 0;
    v32 = v152;
  }
  *(_QWORD *)(v32 + 32) = v11;
  *(_QWORD *)(v32 + 40) = 0;
  *(_QWORD *)(v32 + 24) = v150;
  if (v11)
  {
    if (v11 >= 0xBA2E8BA2E8BA2FLL)
    {
LABEL_198:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 352, v11);
      _os_crash();
      __break(1u);
      goto LABEL_199;
    }
    v34 = v32;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v150 + 32))(v150, 352 * v11, 16);
    *(_QWORD *)(v34 + 40) = result;
    if (!result)
    {
LABEL_199:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_200;
    }
    if (v11 != 1)
    {
      v35 = 0;
      do
      {
        v36 = 0;
        *(_OWORD *)(result + 156) = 0uLL;
        *(_OWORD *)(result + 128) = 0uLL;
        *(_OWORD *)(result + 144) = 0uLL;
        *(_OWORD *)(result + 96) = 0uLL;
        *(_OWORD *)(result + 112) = 0uLL;
        *(_OWORD *)(result + 64) = 0uLL;
        *(_OWORD *)(result + 80) = 0uLL;
        *(_OWORD *)(result + 32) = 0uLL;
        *(_OWORD *)(result + 48) = 0uLL;
        *(_OWORD *)result = 0uLL;
        *(_OWORD *)(result + 16) = 0uLL;
        do
        {
          v37 = result + v36;
          *(_QWORD *)(v37 + 180) = 0;
          *(_QWORD *)(v37 + 172) = 0;
          *(_DWORD *)(v37 + 188) = 0;
          *(_WORD *)(v37 + 192) = -1;
          v36 += 24;
        }
        while (v36 != 144);
        v38 = (_QWORD *)(result + 316);
        *(_DWORD *)(result + 332) = 0;
        *(_QWORD *)(result + 324) = 0;
        *(_WORD *)(result + 336) = -1;
        *(_WORD *)(result + 340) = 0;
        *(_BYTE *)(result + 342) = 0;
        result += 352;
        ++v35;
        *v38 = 0;
      }
      while (v35 != v11 - 1);
    }
    v39 = 0;
    *(_OWORD *)(result + 156) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    do
    {
      v40 = result + v39;
      *(_QWORD *)(v40 + 180) = 0;
      *(_QWORD *)(v40 + 172) = 0;
      *(_DWORD *)(v40 + 188) = 0;
      *(_WORD *)(v40 + 192) = -1;
      v39 += 24;
    }
    while (v39 != 144);
    *(_DWORD *)(result + 332) = 0;
    *(_QWORD *)(result + 324) = 0;
    *(_QWORD *)(result + 316) = 0;
    *(_WORD *)(result + 336) = -1;
    *(_WORD *)(result + 340) = 0;
    *(_BYTE *)(result + 342) = 0;
    v32 = v152;
  }
  *(_QWORD *)(v32 + 56) = v15;
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)(v32 + 48) = v150;
  if (v15)
  {
    if (v15 >= 0x111111111111112)
    {
LABEL_200:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 240, v15);
      _os_crash();
      __break(1u);
      goto LABEL_201;
    }
    v41 = v32;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v150 + 32))(v150, 240 * v15, 16);
    *(_QWORD *)(v41 + 64) = result;
    if (!result)
    {
LABEL_201:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_202;
    }
    v42 = v15 - 1;
    if (v15 != 1)
    {
      do
      {
        *(_OWORD *)(result + 188) = 0uLL;
        *(_OWORD *)(result + 160) = 0uLL;
        *(_OWORD *)(result + 176) = 0uLL;
        *(_OWORD *)(result + 128) = 0uLL;
        *(_OWORD *)(result + 144) = 0uLL;
        *(_OWORD *)(result + 96) = 0uLL;
        *(_OWORD *)(result + 112) = 0uLL;
        *(_OWORD *)(result + 64) = 0uLL;
        *(_OWORD *)(result + 80) = 0uLL;
        *(_OWORD *)(result + 32) = 0uLL;
        *(_OWORD *)(result + 48) = 0uLL;
        *(_OWORD *)result = 0uLL;
        *(_OWORD *)(result + 16) = 0uLL;
        *(_WORD *)(result + 200) = -1;
        *(_QWORD *)(result + 220) = 0;
        *(_QWORD *)(result + 204) = 0;
        *(_QWORD *)(result + 212) = 0;
        *(_WORD *)(result + 224) = -1;
        *(_WORD *)(result + 228) = 0;
        *(_BYTE *)(result + 230) = 0;
        result += 240;
        --v42;
      }
      while (v42);
    }
    *(_OWORD *)(result + 188) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_WORD *)(result + 200) = -1;
    *(_QWORD *)(result + 220) = 0;
    *(_QWORD *)(result + 204) = 0;
    *(_QWORD *)(result + 212) = 0;
    *(_WORD *)(result + 224) = -1;
    *(_WORD *)(result + 228) = 0;
    *(_BYTE *)(result + 230) = 0;
    v32 = v152;
  }
  *(_QWORD *)(v32 + 80) = v16;
  *(_QWORD *)(v32 + 88) = 0;
  *(_QWORD *)(v32 + 72) = v150;
  if (v16)
  {
    v43 = v142;
    if (v16 >> 59)
    {
LABEL_202:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, v16);
      _os_crash();
      __break(1u);
      goto LABEL_203;
    }
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v150 + 32))(v150, 32 * v16, 16);
    v32 = v152;
    *(_QWORD *)(v152 + 88) = result;
    if (!result)
    {
LABEL_203:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_204;
    }
    v133 = result;
    v44 = result;
    v45 = v16 - 1;
    if (v16 != 1)
    {
      v44 = result;
      do
      {
        *(_QWORD *)v44 = 0;
        *(_QWORD *)(v44 + 8) = 0;
        *(_DWORD *)(v44 + 16) = 0;
        v44 += 32;
        --v45;
      }
      while (v45);
    }
    *(_QWORD *)v44 = 0;
    *(_QWORD *)(v44 + 8) = 0;
    *(_DWORD *)(v44 + 16) = 0;
  }
  else
  {
    v133 = 0;
    v43 = v142;
  }
  *(_QWORD *)(v32 + 104) = v14;
  *(_QWORD *)(v32 + 112) = 0;
  *(_QWORD *)(v32 + 96) = v150;
  if (v14)
  {
    if (v14 >= 0x24924924924924ALL)
    {
LABEL_204:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 112, v14);
      _os_crash();
      __break(1u);
      goto LABEL_205;
    }
    v46 = v32;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v150 + 32))(v150, 112 * v14, 16);
    *(_QWORD *)(v46 + 112) = result;
    if (!result)
    {
LABEL_205:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_206;
    }
    v47 = v14 - 1;
    if (v14 != 1)
    {
      do
      {
        *(_QWORD *)(result + 88) = 0;
        *(_BYTE *)(result + 96) = 0;
        *(_OWORD *)result = 0uLL;
        *(_OWORD *)(result + 16) = 0uLL;
        *(_OWORD *)(result + 32) = 0uLL;
        *(_OWORD *)(result + 48) = 0uLL;
        *(_OWORD *)(result + 64) = 0uLL;
        *(_DWORD *)(result + 80) = 0;
        result += 112;
        --v47;
      }
      while (v47);
    }
    *(_QWORD *)(result + 88) = 0;
    *(_BYTE *)(result + 96) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_DWORD *)(result + 80) = 0;
    v32 = v152;
  }
  *(_QWORD *)(v32 + 128) = v17;
  *(_QWORD *)(v32 + 136) = 0;
  *(_QWORD *)(v32 + 120) = v150;
  v141 = v17;
  if (v17)
  {
    if (v17 >= 0x155555555555556)
    {
LABEL_206:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 192, v17);
      _os_crash();
      __break(1u);
LABEL_207:
      re::internal::assertLog((re::internal *)4, v48, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v150 + 32))(v150, 192 * v17, 16);
    v32 = v152;
    *(_QWORD *)(v152 + 136) = result;
    if (!result)
      goto LABEL_207;
    v49 = result;
    v50 = v17 - 1;
    if (v17 != 1)
    {
      v49 = result;
      do
      {
        *(_DWORD *)(v49 + 176) = 0;
        *(_OWORD *)(v49 + 144) = 0uLL;
        *(_OWORD *)(v49 + 160) = 0uLL;
        *(_OWORD *)(v49 + 112) = 0uLL;
        *(_OWORD *)(v49 + 128) = 0uLL;
        *(_OWORD *)(v49 + 80) = 0uLL;
        *(_OWORD *)(v49 + 96) = 0uLL;
        *(_OWORD *)(v49 + 48) = 0uLL;
        *(_OWORD *)(v49 + 64) = 0uLL;
        *(_OWORD *)(v49 + 16) = 0uLL;
        *(_OWORD *)(v49 + 32) = 0uLL;
        *(_OWORD *)v49 = 0uLL;
        *(_WORD *)(v49 + 176) = -1;
        v49 += 192;
        --v50;
      }
      while (v50);
    }
    v140 = result;
    *(_DWORD *)(v49 + 176) = 0;
    *(_OWORD *)(v49 + 144) = 0u;
    *(_OWORD *)(v49 + 160) = 0u;
    *(_OWORD *)(v49 + 112) = 0u;
    *(_OWORD *)(v49 + 128) = 0u;
    *(_OWORD *)(v49 + 80) = 0u;
    *(_OWORD *)(v49 + 96) = 0u;
    *(_OWORD *)(v49 + 48) = 0u;
    *(_OWORD *)(v49 + 64) = 0u;
    *(_OWORD *)(v49 + 16) = 0u;
    *(_OWORD *)(v49 + 32) = 0u;
    *(_OWORD *)v49 = 0u;
    *(_WORD *)(v49 + 176) = -1;
  }
  else
  {
    v140 = 0;
  }
  *(_QWORD *)&v51 = v147;
  *((_QWORD *)&v51 + 1) = v148;
  *(_OWORD *)(v32 + 144) = v51;
  *(_BYTE *)(v32 + 160) = 0;
  v144 = v135[12];
  if (v144)
  {
    v150 = 0;
    v52 = 0;
    v16 = (unint64_t)&v163;
    v17 = (unint64_t)v173 + 2;
    do
    {
      result = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](v43, v52);
      if (*(_QWORD *)(result + 16))
      {
        v14 = result;
        v146 = v52;
        v53 = 0;
        v5 = 0;
        v8 = 0;
        v54 = v152;
        v55 = 208 * v150 + 205;
        do
        {
          v56 = *(_QWORD *)(v14 + 32);
          v155 = 0uLL;
          v157 = 0;
          memset((char *)v173 + 2, 0, 20);
          v13 = v56 + v53;
          v159 = *(float32x4_t *)(v56 + v53 + 32);
          v160 = *(_OWORD *)(v56 + v53 + 48);
          v161 = *(_OWORD *)(v56 + v53 + 64);
          v162 = *(_OWORD *)(v56 + v53 + 80);
          v15 = *(_QWORD *)(v14 + 48);
          if (v15 <= v8)
            goto LABEL_179;
          v57 = (__int128 *)(*(_QWORD *)(v14 + 56) + v5);
          v163 = *v57;
          v164 = v57[1];
          v165 = v57[2];
          v166 = v57[3];
          v167 = *(_OWORD *)(v13 + 96);
          v58 = *(_DWORD *)(v13 + 112);
          v59 = *(_DWORD *)(v13 + 128);
          v15 = *(unsigned __int8 *)(v13 + 135);
          if (*(_BYTE *)(v13 + 134))
          {
            v11 = *(_QWORD *)(v14 + 72);
            if (v11 <= v8)
              goto LABEL_183;
            result = re::DataArray<re::TextureAtlasTile>::get(a4 + 8, *(_QWORD *)(*(_QWORD *)(v14 + 80) + 8 * v8));
            v155 = *(_OWORD *)result;
            v157 = *(_DWORD *)(result + 16);
            v60 = *(_WORD *)(result + 20);
            v54 = v152;
            if (!(_DWORD)v15)
              *(_BYTE *)(v152 + 160) = 1;
          }
          else
          {
            v60 = -1;
          }
          v11 = *(_QWORD *)(v54 + 8);
          if (v11 <= v150 + v8)
            goto LABEL_180;
          v61 = *(_BYTE *)(v13 + 134);
          v62 = (_BYTE *)(*(_QWORD *)(v54 + 16) + v55);
          *(_OWORD *)(v62 - 125) = v164;
          *(_OWORD *)(v62 - 109) = v165;
          *(_OWORD *)(v62 - 93) = v166;
          *(_OWORD *)(v62 - 77) = v167;
          *(_OWORD *)(v62 - 189) = v160;
          *(_OWORD *)(v62 - 173) = v161;
          *(_OWORD *)(v62 - 157) = v162;
          *(_OWORD *)(v62 - 141) = v163;
          *(float32x4_t *)(v62 - 205) = v159;
          *(_DWORD *)(v62 - 61) = v58;
          *(_DWORD *)(v62 - 57) = v59;
          *(_DWORD *)(v62 - 53) = 3;
          *(_OWORD *)(v62 - 49) = v155;
          *(_DWORD *)(v62 - 33) = v157;
          *(_WORD *)(v62 - 29) = v60;
          *(_OWORD *)(v62 - 27) = v173[0];
          *(_QWORD *)(v62 - 13) = *(_QWORD *)((char *)v173 + 14);
          *(_WORD *)(v62 - 5) = -1;
          *(v62 - 1) = v61;
          *v62 = v15;
          ++v8;
          v55 += 208;
          v5 += 64;
          v53 += 144;
        }
        while (v8 < *(_QWORD *)(v14 + 16));
        v150 += v8;
        v13 = (unint64_t)v135;
        v43 = v142;
        v52 = v146;
      }
      ++v52;
    }
    while (v52 != v144);
  }
  v136 = *(_QWORD *)(v13 + 264);
  if (v136)
  {
    v149 = 0;
    v63 = 0;
    v14 = (unint64_t)&v159;
    v17 = (unint64_t)&v159;
    v64 = a4 + 8;
    while (1)
    {
      v137 = v63;
      result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v139, v63);
      v5 = *(_QWORD *)(result + 16);
      if (v5)
        break;
LABEL_124:
      v63 = v137 + 1;
      if (v137 + 1 == v136)
        goto LABEL_125;
    }
    v11 = 0;
    v8 = 0;
    v151 = (_QWORD *)result;
    while (1)
    {
      v15 = *(_QWORD *)(result + 48);
      if (v15 <= v8)
        break;
      if (*(_BYTE *)(*(_QWORD *)(result + 56) + v8))
      {
        v13 = *(_QWORD *)(result + 32);
        v65 = v13 + 224 * v8;
        v16 = v65 + 32;
        v66 = *(float *)(v65 + 200);
        if (re::LightContextBuilder::checkIfMeshBoundingBoxIsInsidePointLightSphere(a5, (float32x4_t *)(v65 + 32), v66))
        {
          for (n = 0; n != 144; n += 24)
          {
            v68 = (char *)&v159 + n;
            *(_QWORD *)(v68 + 180) = 0;
            *(_QWORD *)(v68 + 172) = 0;
            *((_DWORD *)v68 + 47) = 0;
            *((_WORD *)v68 + 96) = -1;
          }
          memset(&v170[4], 0, 20);
          WORD2(v170[6]) = -1;
          v159 = *(float32x4_t *)v16;
          v160 = *(_OWORD *)(v65 + 48);
          v161 = *(_OWORD *)(v65 + 64);
          v162 = *(_OWORD *)(v65 + 80);
          v69 = v13 + 224 * v8;
          v166 = *(_OWORD *)(v69 + 176);
          v165 = *(_OWORD *)(v69 + 160);
          v164 = *(_OWORD *)(v69 + 144);
          v163 = *(_OWORD *)(v69 + 128);
          v167 = *(_OWORD *)(v65 + 96);
          *(_QWORD *)v168 = *(_QWORD *)(v65 + 112);
          *(float *)&v168[8] = v66;
          v70 = *(unsigned __int8 *)(v69 + 215);
          v16 = v69 + 215;
          *(_QWORD *)&v168[12] = *(_QWORD *)(v16 - 11);
          *(_QWORD *)&v168[20] = 0x300000003;
          v71 = v152;
          v5 = v149;
          if (v70)
          {
            v15 = v151[13];
            if (v15 <= v8)
              goto LABEL_192;
            v72 = 0;
            v73 = v151[14] + v11;
            v74 = v169;
            do
            {
              v75 = re::DataArray<re::TextureAtlasTile>::get(v64, *(_QWORD *)(v73 + v72));
              *v74 = *(_OWORD *)v75;
              *(_QWORD *)((char *)v74 + 14) = *(_QWORD *)(v75 + 14);
              v72 += 8;
              v74 = (_OWORD *)((char *)v74 + 24);
            }
            while (v72 != 48);
            v71 = v152;
            *(_BYTE *)(v152 + 160) = 1;
            v14 = (unint64_t)&v159;
            v5 = v149;
          }
          v76 = v13 + 224 * v8;
          v78 = *(unsigned __int8 *)(v76 + 214);
          v13 = v76 + 214;
          v77 = v78;
          if (v78)
          {
            v15 = v151[10];
            if (v15 <= v8)
              goto LABEL_193;
            v79 = re::DataArray<re::TextureAtlasTile>::get(a4 + 104, *(_QWORD *)(v151[11] + 8 * v8));
            *(_OWORD *)&v170[4] = *(_OWORD *)v79;
            v71 = v152;
            *(_QWORD *)((char *)&v170[5] + 6) = *(_QWORD *)(v79 + 14);
            v77 = *(_BYTE *)v13;
          }
          LOBYTE(v171) = 0;
          HIBYTE(v171) = *(_BYTE *)v16;
          v172 = v77;
          v15 = *(_QWORD *)(v71 + 32);
          if (v15 <= v5)
            goto LABEL_187;
          v80 = *(_QWORD *)(v71 + 40) + 352 * v5;
          v81 = v5 + 1;
          *(_OWORD *)(v80 + 112) = v166;
          *(_OWORD *)(v80 + 128) = v167;
          *(_OWORD *)(v80 + 144) = *(_OWORD *)v168;
          *(_OWORD *)(v80 + 156) = *(_OWORD *)&v168[12];
          *(_OWORD *)(v80 + 48) = v162;
          *(_OWORD *)(v80 + 64) = v163;
          *(_OWORD *)(v80 + 80) = v164;
          *(_OWORD *)(v80 + 96) = v165;
          *(float32x4_t *)v80 = v159;
          *(_OWORD *)(v80 + 16) = v160;
          *(_OWORD *)(v80 + 32) = v161;
          *(_OWORD *)(v80 + 252) = v169[5];
          *(_OWORD *)(v80 + 268) = v169[6];
          *(_OWORD *)(v80 + 284) = *(_OWORD *)v170;
          *(_OWORD *)(v80 + 298) = *(_OWORD *)((char *)&v170[1] + 6);
          *(_OWORD *)(v80 + 188) = v169[1];
          *(_OWORD *)(v80 + 204) = v169[2];
          *(_OWORD *)(v80 + 220) = v169[3];
          *(_OWORD *)(v80 + 236) = v169[4];
          *(_OWORD *)(v80 + 172) = v169[0];
          *(_OWORD *)(v80 + 316) = *(_OWORD *)&v170[4];
          *(_QWORD *)(v80 + 330) = *(_QWORD *)((char *)&v170[5] + 6);
          *(_WORD *)(v80 + 340) = v171;
          *(_BYTE *)(v80 + 342) = v172;
          result = (uint64_t)v151;
          v5 = v151[2];
          v149 = v81;
        }
        else
        {
          result = (uint64_t)v151;
        }
      }
      ++v8;
      v11 += 48;
      if (v8 >= v5)
        goto LABEL_124;
    }
LABEL_181:
    *(_QWORD *)v174 = 0;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v159 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(_QWORD *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 4) = v8;
    WORD6(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 14) = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_182;
  }
LABEL_125:
  v143 = v135[26];
  if (v143)
  {
    v5 = 0;
    v82 = 0;
    v13 = (unint64_t)v173 + 2;
    while (1)
    {
      v145 = v82;
      result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v138, v82);
      v89 = *(_QWORD *)(result + 16);
      if (v89)
        break;
LABEL_143:
      v82 = v145 + 1;
      if (v145 + 1 == v143)
        goto LABEL_144;
    }
    v11 = result;
    v8 = 0;
    v15 = 112;
    while (1)
    {
      v14 = *(_QWORD *)(v11 + 48);
      if (v14 <= v8)
        break;
      if (*(_BYTE *)(*(_QWORD *)(v11 + 56) + v8))
      {
        v14 = *(_QWORD *)(v11 + 32);
        v90 = v14 + v15;
        v16 = v14 + v15 - 80;
        v91 = *(float *)(v14 + v15 + 88);
        v92 = *(float *)(v14 + v15 + 96);
        result = re::LightContextBuilder::checkIfMeshBoundingBoxIsInsideSpotLightCone(a5, (float32x4_t *)v16, v91, v92, *(double *)&v83, *(double *)&v84, v85, v86, v87, v88);
        if ((_DWORD)result)
        {
          v156 = 0uLL;
          v158 = 0;
          memset((char *)v173 + 2, 0, 20);
          v159 = *(float32x4_t *)v16;
          v160 = *(_OWORD *)(v14 + v15 - 64);
          v161 = *(_OWORD *)(v14 + v15 - 48);
          v162 = *(_OWORD *)(v14 + v15 - 32);
          v93 = *(_OWORD *)(v90 + 16);
          v94 = *(_OWORD *)(v90 + 32);
          v83 = *(_OWORD *)(v90 + 48);
          v84 = *(_OWORD *)(v90 + 64);
          v165 = v83;
          v166 = v84;
          v163 = v93;
          v164 = v94;
          v167 = *(_OWORD *)(v90 - 16);
          v95 = *(_QWORD *)v90;
          v96 = *(_DWORD *)(v90 + 92);
          v97 = *(_QWORD *)(v90 + 100);
          if (*(_BYTE *)(v90 + 112))
          {
            v64 = *(_QWORD *)(v11 + 104);
            if (v64 <= v8)
              goto LABEL_194;
            result = re::DataArray<re::TextureAtlasTile>::get(a4 + 8, *(_QWORD *)(*(_QWORD *)(v11 + 112) + 8 * v8));
            v156 = *(_OWORD *)result;
            v158 = *(_DWORD *)(result + 16);
            v16 = *(unsigned __int16 *)(result + 20);
            v98 = v152;
            *(_BYTE *)(v152 + 160) = 1;
          }
          else
          {
            v16 = 0xFFFFLL;
            v98 = v152;
          }
          if (*(_BYTE *)(v14 + v15 + 111))
          {
            v17 = *(_QWORD *)(v11 + 80);
            if (v17 <= v8)
              goto LABEL_195;
            result = re::DataArray<re::TextureAtlasTile>::get(a4 + 104, *(_QWORD *)(*(_QWORD *)(v11 + 88) + 8 * v8));
            *(_OWORD *)((char *)v173 + 2) = *(_OWORD *)result;
            *(_DWORD *)((char *)&v173[1] + 2) = *(_DWORD *)(result + 16);
            v99 = *(_WORD *)(result + 20);
            v98 = v152;
          }
          else
          {
            v99 = -1;
          }
          v17 = *(_QWORD *)(v98 + 56);
          if (v17 <= v5)
            goto LABEL_188;
          v100 = *(_QWORD *)(v98 + 64) + 240 * v5++;
          v101 = *(_BYTE *)(v14 + v15 + 111);
          v102 = *(_BYTE *)(v90 + 112);
          v103 = *(_BYTE *)(v14 + v15 + 110);
          *(_OWORD *)(v100 + 80) = v164;
          *(_OWORD *)(v100 + 96) = v165;
          *(_OWORD *)(v100 + 112) = v166;
          *(_OWORD *)(v100 + 128) = v167;
          *(_OWORD *)(v100 + 16) = v160;
          *(_OWORD *)(v100 + 32) = v161;
          *(_OWORD *)(v100 + 48) = v162;
          *(_OWORD *)(v100 + 64) = v163;
          *(float32x4_t *)v100 = v159;
          *(_QWORD *)(v100 + 144) = v95;
          *(float32_t *)(v100 + 152) = v91;
          *(_DWORD *)(v100 + 156) = v96;
          *(float *)(v100 + 160) = v92;
          *(_QWORD *)(v100 + 164) = v97;
          *(_QWORD *)(v100 + 172) = 0x300000003;
          *(_OWORD *)(v100 + 180) = v156;
          *(_DWORD *)(v100 + 196) = v158;
          *(_WORD *)(v100 + 200) = v16;
          *(_OWORD *)(v100 + 202) = v173[0];
          *(_QWORD *)(v100 + 216) = *(_QWORD *)((char *)v173 + 14);
          *(_WORD *)(v100 + 224) = v99;
          *(_BYTE *)(v100 + 228) = v103;
          *(_BYTE *)(v100 + 229) = v102;
          *(_BYTE *)(v100 + 230) = v101;
          v89 = *(_QWORD *)(v11 + 16);
        }
      }
      ++v8;
      v15 += 240;
      if (v8 >= v89)
        goto LABEL_143;
    }
LABEL_182:
    *(_QWORD *)v174 = 0;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v159 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(_QWORD *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 4) = v8;
    WORD6(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 14) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_183:
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 476;
    v177 = 2048;
    v178 = v8;
    v179 = 2048;
    v180 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_184;
  }
LABEL_144:
  v17 = (unint64_t)(v135 + 14);
  v16 = (unint64_t)v135;
  v104 = v135[5];
  v11 = (unint64_t)(v135 + 35);
  if (v104)
  {
    v15 = 0;
    v105 = 0;
    v13 = v133 + 16;
    while (1)
    {
      result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v135, v105);
      v106 = *(_QWORD *)(result + 16);
      if (v106)
        break;
LABEL_153:
      if (++v105 == v104)
        goto LABEL_154;
    }
    v8 = *(_QWORD *)(v152 + 80);
    if (v15 <= v8)
      v14 = *(_QWORD *)(v152 + 80);
    else
      v14 = v15;
    v107 = 32 * v106;
    v108 = (int *)(*(_QWORD *)(result + 32) + 16);
    v109 = (_DWORD *)(v13 + 32 * v15);
    while (v14 != v15)
    {
      v110 = v108 - 4;
      v111 = *v108;
      v108 += 8;
      ++v15;
      *((_OWORD *)v109 - 1) = *(_OWORD *)v110;
      *v109 = v111;
      v109 += 8;
      v107 -= 32;
      if (!v107)
        goto LABEL_153;
    }
LABEL_184:
    *(_QWORD *)v174 = 0;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v159 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(_QWORD *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 468;
    WORD1(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 4) = v14;
    WORD6(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 14) = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_185:
    *(_QWORD *)&v173[0] = 0;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v159 = 0u;
    v125 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 468;
    v177 = 2048;
    v178 = v14;
    v179 = 2048;
    v180 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_186;
  }
LABEL_154:
  v112 = v135[40];
  if (v112)
  {
    v15 = 0;
    v113 = 0;
    v13 = (unint64_t)&v183;
    while (1)
    {
      result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)(v135 + 35), v113);
      v114 = *(_QWORD *)(result + 16);
      if (v114)
        break;
LABEL_163:
      if (++v113 == v112)
        goto LABEL_164;
    }
    v115 = 0;
    v116 = *(_QWORD *)(result + 32);
    v8 = *(_QWORD *)(v152 + 104);
    if (v15 <= v8)
      v14 = *(_QWORD *)(v152 + 104);
    else
      v14 = v15;
    v117 = 144 * v114;
    v118 = 112 * v15;
    while (1)
    {
      v119 = v116 + v115;
      v181[0] = *(_OWORD *)(v116 + v115 + 32);
      v181[1] = *(_OWORD *)(v116 + v115 + 48);
      v181[2] = *(_OWORD *)(v116 + v115 + 64);
      v182 = *(_OWORD *)(v116 + v115 + 80);
      v183 = *(_OWORD *)(v116 + v115 + 96);
      if (v14 == v15)
        goto LABEL_185;
      ++v15;
      v120 = *(_BYTE *)(v119 + 136);
      v121 = *(_QWORD *)(v119 + 128);
      v122 = *(_DWORD *)(v119 + 112);
      v123 = *(_QWORD *)(v152 + 112) + v118;
      *(_OWORD *)(v123 + 16) = v181[1];
      *(_OWORD *)(v123 + 32) = v181[2];
      *(_OWORD *)(v123 + 48) = v182;
      *(_OWORD *)(v123 + 64) = v183;
      *(_OWORD *)v123 = v181[0];
      *(_DWORD *)(v123 + 80) = v122;
      *(_QWORD *)(v123 + 88) = v121;
      *(_BYTE *)(v123 + 96) = v120;
      v115 += 144;
      v118 += 112;
      if (v117 == v115)
        goto LABEL_163;
    }
  }
LABEL_164:
  v154 = v135[19];
  if (v154)
  {
    v14 = 0;
    v64 = 0;
    v16 = (unint64_t)&v163;
    v11 = (unint64_t)&v167;
    v8 = a4 + 8;
    while (1)
    {
      result = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v17, v64);
      v124 = *(_QWORD *)(result + 16);
      if (v124)
        break;
LABEL_175:
      ++v64;
      v17 = (unint64_t)(v135 + 14);
      if (v64 == v154)
        return result;
    }
    v15 = result;
    v17 = 0;
    v5 = 0;
    v13 = 0;
    while (1)
    {
      v125 = *(_QWORD *)(v15 + 48);
      if (v125 <= v13)
        break;
      if (*(_BYTE *)(*(_QWORD *)(v15 + 56) + v13))
      {
        v126 = *(_QWORD *)(v15 + 32) + v17;
        v159 = *(float32x4_t *)(v126 + 32);
        v160 = *(_OWORD *)(v126 + 48);
        v161 = *(_OWORD *)(v126 + 64);
        v162 = *(_OWORD *)(v126 + 80);
        v127 = *(_QWORD *)(v15 + 80);
        if (v127 <= v13)
          goto LABEL_189;
        v128 = (__int128 *)(*(_QWORD *)(v15 + 88) + v5);
        v163 = *v128;
        v164 = v128[1];
        v165 = v128[2];
        v166 = v128[3];
        v167 = *(_OWORD *)(v126 + 96);
        v127 = *(_QWORD *)(v15 + 104);
        if (v127 <= v13)
          goto LABEL_190;
        v129 = *(_DWORD *)(v126 + 112);
        v130 = *(_DWORD *)(v126 + 128);
        result = re::DataArray<re::TextureAtlasTile>::get(v8, *(_QWORD *)(*(_QWORD *)(v15 + 112) + 8 * v13));
        v173[0] = *(_OWORD *)result;
        LODWORD(v173[1]) = *(_DWORD *)(result + 16);
        v131 = *(_WORD *)(result + 20);
        *(_BYTE *)(v152 + 160) = 1;
        if (v141 <= v14)
          goto LABEL_191;
        v132 = v140 + 192 * v14++;
        *(_OWORD *)(v132 + 80) = v164;
        *(_OWORD *)(v132 + 96) = v165;
        *(_OWORD *)(v132 + 112) = v166;
        *(_OWORD *)(v132 + 128) = v167;
        *(_OWORD *)(v132 + 16) = v160;
        *(_OWORD *)(v132 + 32) = v161;
        *(_OWORD *)(v132 + 48) = v162;
        *(_OWORD *)(v132 + 64) = v163;
        *(float32x4_t *)v132 = v159;
        *(_DWORD *)(v132 + 144) = v129;
        *(_DWORD *)(v132 + 148) = v130;
        *(_DWORD *)(v132 + 152) = 3;
        *(_OWORD *)(v132 + 156) = v173[0];
        *(_DWORD *)(v132 + 172) = v173[1];
        *(_WORD *)(v132 + 176) = v131;
        v124 = *(_QWORD *)(v15 + 16);
      }
      ++v13;
      v5 += 64;
      v17 += 144;
      if (v13 >= v124)
        goto LABEL_175;
    }
LABEL_186:
    *(_QWORD *)v174 = 0;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v159 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v181[0]) = 136315906;
    *(_QWORD *)((char *)v181 + 4) = "operator[]";
    WORD6(v181[0]) = 1024;
    *(_DWORD *)((char *)v181 + 14) = 476;
    WORD1(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 4) = v13;
    WORD6(v181[1]) = 2048;
    *(_QWORD *)((char *)&v181[1] + 14) = v125;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_187:
    *(_QWORD *)&v173[0] = 0;
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 468;
    v177 = 2048;
    v178 = v5;
    v179 = 2048;
    v180 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_188:
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    v127 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 468;
    v177 = 2048;
    v178 = v5;
    v179 = 2048;
    v180 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_189:
    *(_QWORD *)&v173[0] = 0;
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 476;
    v177 = 2048;
    v178 = v13;
    v179 = 2048;
    v180 = v127;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_190:
    *(_QWORD *)&v173[0] = 0;
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    v64 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 476;
    v177 = 2048;
    v178 = v13;
    v179 = 2048;
    v180 = v127;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_191:
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 468;
    v177 = 2048;
    v178 = v14;
    v179 = 2048;
    v180 = v141;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_192:
    *(_QWORD *)&v173[0] = 0;
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 476;
    v177 = 2048;
    v178 = v8;
    v179 = 2048;
    v180 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_193:
    *(_QWORD *)&v173[0] = 0;
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 476;
    v177 = 2048;
    v178 = v8;
    v179 = 2048;
    v180 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_194:
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 476;
    v177 = 2048;
    v178 = v8;
    v179 = 2048;
    v180 = v64;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_195:
    v182 = 0u;
    v183 = 0u;
    memset(v181, 0, sizeof(v181));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v174 = 136315906;
    *(_QWORD *)&v174[4] = "operator[]";
    v175 = 1024;
    v176 = 476;
    v177 = 2048;
    v178 = v8;
    v179 = 2048;
    v180 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_196;
  }
  return result;
}

uint64_t re::LightContexts::addPerMeshLightContext(uint64_t a1, unsigned int a2, unint64_t a3, __n128 *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  __int128 v27;
  unint64_t v28;
  __int16 v29;

  v29 = a2;
  v28 = a3;
  v7 = a4[10].n128_u8[0];
  v8 = *(_QWORD *)(a1 + 40);
  re::BucketArray<re::LightContext,16ul>::add(a1, a4);
  *(_BYTE *)(a1 + 288) |= v7;
  v9 = *(_QWORD *)(a1 + 56);
  LODWORD(v25) = 0;
  v27 = 0u;
  memset(v26, 0, sizeof(v26));
  DWORD1(v27) = 0x7FFFFFFF;
  v10 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2) ^ ((0xBF58476D1CE4E5B9 * a2) >> 27));
  v11 = v10 ^ (v10 >> 31);
  if (v9)
  {
    v12 = v11 % *(unsigned int *)(a1 + 80);
    v13 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v12);
    if ((_DWORD)v13 != 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(a1 + 72);
      if (*(unsigned __int16 *)(v14 + 72 * v13 + 12) == a2)
      {
LABEL_6:
        v15 = v14 + 72 * v13;
        goto LABEL_9;
      }
      while (1)
      {
        LODWORD(v13) = *(_DWORD *)(v14 + 72 * v13 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v13 == 0x7FFFFFFF)
          break;
        if (*(unsigned __int16 *)(v14 + 72 * v13 + 12) == a2)
          goto LABEL_6;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  v16 = re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsMove(a1 + 56, v12, v11, &v29, &v25);
  ++*(_DWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 72) + 72 * v16;
LABEL_9:
  v17 = v15 + 16;
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v26);
  result = v17 + 8;
  v19 = *(_QWORD *)(v17 + 8);
  LODWORD(v25) = v8;
  v20 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  v21 = v20 ^ (v20 >> 31);
  if (v19)
  {
    v22 = v21 % *(unsigned int *)(v17 + 32);
    v23 = *(unsigned int *)(*(_QWORD *)(v17 + 16) + 4 * v22);
    if ((_DWORD)v23 != 0x7FFFFFFF)
    {
      v24 = *(_QWORD *)(v17 + 24);
      if (*(_QWORD *)(v24 + 32 * v23 + 16) == a3)
        return result;
      while (1)
      {
        v23 = *(_DWORD *)(v24 + 32 * v23 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v23 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v24 + 32 * v23 + 16) == a3)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  result = re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(result, v22, v21, &v28, &v25);
  ++*(_DWORD *)(v17 + 48);
  return result;
}

void *re::DynamicArray<re::SingleCullingFrustum>::add(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::SingleCullingFrustum>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::SingleCullingFrustum>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 240 * v5;
  *(_QWORD *)v11 = 0;
  *(_DWORD *)(v11 + 8) = 0;
  re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)v11, a2);
  *(_OWORD *)(v11 + 112) = 0u;
  v11 += 112;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  result = memmove((void *)v11, a2 + 14, 0x80uLL);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::LightContextBuilder::build@<X0>(uint64_t a1@<X0>, re::Allocator *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int32x2_t v10;
  uint64_t v13;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _OWORD **v23;
  _OWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int32 v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  __n128 v33;
  int v34;
  unsigned __int16 *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  int32x4_t v46;
  unint64_t nn;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  char *v60;
  uint64_t j;
  char *v62;
  double v63;
  __n128 v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t i4;
  unint64_t k;
  uint64_t v72;
  unint64_t v73;
  int32x2_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float v77;
  float v78;
  int v79;
  uint64_t v80;
  float32x4_t v81;
  float v82;
  __int128 v83;
  uint64_t v84;
  float32x4_t v85;
  char v86;
  float32x4_t v87;
  float32x4_t v88;
  simd_float4 *v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  simd_float4 *v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x2_t v108;
  uint64_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  uint64_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float v122;
  float v123;
  float v124;
  unsigned int v125;
  unsigned int v126;
  _OWORD *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  float32x4_t v137;
  float v138;
  float v139;
  float v140;
  float32x4_t v141;
  unsigned int v142;
  float v143;
  unint64_t v144;
  float32x4_t v145;
  uint64_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x4_t *v149;
  uint64_t v150;
  unint64_t m;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  float32x4_t v156;
  int32x4_t v157;
  uint64_t v158;
  uint64_t v159;
  float v160;
  unsigned int v161;
  int v162;
  unsigned __int16 *v163;
  BOOL v164;
  uint64_t v165;
  unint64_t n;
  uint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  uint64_t v173;
  uint64_t v174;
  const re::RenderCamera *v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t ii;
  uint64_t v182;
  uint64_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  uint64_t v189;
  uint64_t v190;
  const re::RenderCamera *v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  uint64_t v203;
  unint64_t jj;
  uint64_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t v211;
  uint64_t v212;
  const re::RenderCamera *v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  uint64_t v226;
  uint64_t v227;
  const re::RenderCamera *v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  _DWORD *v244;
  uint64_t v245;
  unint64_t *v246;
  BOOL v247;
  re::ProfilerConfig *v248;
  _QWORD *v249;
  simd_float4x4 *v250;
  float32x4_t *v251;
  float32x4_t *v252;
  uint64_t isStatisticCollectionEnabled;
  int64x2_t *v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  int64x2_t v258;
  uint64_t v259;
  int64x2_t *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  int64x2_t v264;
  uint64_t v265;
  int64x2_t *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  int64x2_t v270;
  re *v271;
  uint64_t v272;
  int64x2_t *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  int64x2_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  int v282;
  unsigned __int16 *v283;
  uint64_t v284;
  _DWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t kk;
  uint64_t v290;
  int64_t v291;
  unint64_t v292;
  _QWORD *v293;
  double v294;
  float32x4_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  float32x4_t *v300;
  float32x4_t v301;
  uint64_t v302;
  uint64_t *v303;
  BOOL isBoundingSphereIntersectingFrustumPlanes;
  uint64_t v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  uint64_t v317;
  float32x4_t *v318;
  char v319;
  uint64_t v320;
  unint64_t *v321;
  unsigned int v322;
  int v323;
  uint64_t v324;
  BOOL v325;
  uint64_t v326;
  BOOL v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  unsigned __int16 *v331;
  uint64_t v332;
  _DWORD *v333;
  uint64_t v334;
  unsigned __int16 *v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  simd_float4 v342;
  float32x4_t v343;
  uint64_t v344;
  float32x4_t *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  uint64_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  uint64_t v362;
  unint64_t mm;
  uint64_t v364;
  uint64_t v365;
  float32x4_t *v366;
  uint64_t v367;
  simd_float4 v368;
  char v369;
  __int32 v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  __int32 v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  __n128 v380;
  unsigned int v381;
  int v382;
  _BOOL4 v383;
  uint64_t v384;
  BOOL v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  unint64_t v390;
  uint64_t v391;
  _DWORD *v392;
  uint64_t v393;
  unsigned __int16 *v394;
  _QWORD *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t i5;
  unint64_t i2;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  float32x4_t *v405;
  simd_float4 v406;
  simd_float4 v407;
  float32x4_t v408;
  int v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  float32x4_t *v415;
  simd_float4 v416;
  simd_float4 v417;
  float32x4_t v418;
  uint64_t v419;
  unint64_t i1;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t i3;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  uint64_t v436;
  unint64_t PointLightFaceLookatOrientations;
  _QWORD *v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  NSObject *v452;
  uint64_t v453;
  unsigned int v454;
  int v455;
  unsigned __int16 *v456;
  BOOL v457;
  uint64_t v458;
  BOOL v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  __int16 *v472;
  __int16 *v473;
  uint64_t v474;
  unint64_t v475;
  __int128 v476;
  float v477;
  float v478;
  float v479;
  float v480;
  float v481;
  float v482;
  float v483;
  float v484;
  float v485;
  float v486;
  float v488;
  BOOL v489;
  BOOL v490;
  float v491;
  unsigned int v492;
  float32x2_t v493;
  float32x2_t v494;
  float v495;
  float v496;
  float v497;
  float v498;
  float v499;
  float v500;
  float v501;
  unsigned int v502;
  float32x2_t v503;
  float32x2_t v504;
  float v505;
  float v506;
  float v507;
  float v508;
  NSObject *v509;
  uint64_t v510;
  float v511;
  float v512;
  float32x2_t v513;
  float32x2_t v514;
  float v515;
  float v516;
  unsigned int v517;
  float32x2_t v518;
  float32x2_t v519;
  simd_float4 v520;
  float v521;
  float v522;
  float v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  unsigned int v527;
  int v528;
  __int128 *v529;
  const char *v530;
  size_t v531;
  float v532;
  float v533;
  float v534;
  float v535;
  float v536;
  float v537;
  float v538;
  NSObject *v539;
  uint64_t v540;
  unsigned int v541;
  int v542;
  BOOL v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  int v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unsigned __int16 *v554;
  _QWORD *v556;
  uint64_t v557;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  int v564;
  uint64_t v565;
  int v566;
  int v567;
  int v568;
  uint64_t v569;
  uint64_t *v570;
  unint64_t v571;
  uint64_t v572;
  int v573;
  unint64_t *v574;
  uint64_t v575;
  unsigned __int16 *v576;
  int v577;
  uint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unsigned __int16 *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  re::Allocator *v596;
  _OWORD *v597;
  uint64_t v598;
  int v599;
  int32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  unint64_t *v603;
  unint64_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  uint64_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  uint64_t v612;
  float32x4_t *v613;
  simd_float4 v614;
  _QWORD *v615;
  float32x4_t v616;
  float32x4_t v617;
  float v618;
  uint64_t v619;
  float32x4_t v620;
  uint64_t v621;
  float32x4_t v622;
  int v623;
  uint64_t v624;
  _BYTE v625[2];
  float32x4_t v626[4];
  simd_float4 v627;
  simd_float4 v628;
  simd_float4 v629;
  float32x4_t v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  float32x4_t v637;
  char v638;
  simd_float4x4 v639;
  simd_float4 v640;
  simd_float4 v641;
  simd_float4 v642;
  float32x4_t v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  float32x4_t v650;
  char v651;
  _BYTE v652[28];
  float32x4_t *v653;
  _BYTE v654[18];
  __int16 v655;
  unint64_t v656;
  __int16 v657;
  unint64_t v658;
  simd_float4x4 v659;
  simd_float4 v660;
  simd_float4 v661;
  simd_float4 v662;
  simd_float4x4 v663;
  float32x4_t v664;
  _BYTE v665[80];
  __int128 v666;
  _BYTE v667[48];
  _BYTE v668[24];
  int v669;
  int v670;
  _QWORD v671[5];
  unint64_t v672;
  uint64_t v673;
  simd_float4x4 v674;
  simd_float4x4 v675;
  simd_float4x4 v676;
  simd_float4x4 v677;
  simd_float4x4 v678;

  v13 = a6;
  v673 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v17 = *(_QWORD *)(a6 + 40);
    if (v17)
    {
      v18 = 0;
      do
      {
        v19 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v13, v18);
        if (*(_QWORD *)(v19 + 16))
          goto LABEL_13;
      }
      while (v17 != ++v18);
    }
  }
  if (a7)
  {
    v20 = *(_QWORD *)(a7 + 40);
    if (v20)
    {
      v21 = 0;
      while (1)
      {
        v19 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a7, v21);
        if (*(_QWORD *)(v19 + 16))
          break;
        if (v20 == ++v21)
          goto LABEL_11;
      }
LABEL_13:
      v23 = (_OWORD **)(v19 + 32);
      goto LABEL_17;
    }
  }
LABEL_11:
  if (*(_QWORD *)(a8 + 40))
  {
    v22 = (_QWORD *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](a8, 0);
  }
  else
  {
    if (!*(_QWORD *)(a8 + 96))
      return re::LightContextBuilder::Result::Result(a9, a2);
    v22 = (_QWORD *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](a8 + 56, 0);
  }
  v23 = (_OWORD **)(*v22 + 32);
LABEL_17:
  v24 = *v23;
  if (!*v23)
    return re::LightContextBuilder::Result::Result(a9, a2);
  v639.columns[0].i16[0] = 0;
  v660 = 0u;
  v661 = (simd_float4)1uLL;
  v662 = 0uLL;
  v663.columns[1].i64[1] = 1;
  memset(&v663, 0, 24);
  memset(&v663.columns[2], 0, 32);
  v664 = 0u;
  *(_OWORD *)v665 = 1uLL;
  memset(&v665[16], 0, 40);
  *(_QWORD *)&v665[56] = 1;
  *(_OWORD *)&v665[64] = 0uLL;
  v666 = 0uLL;
  v670 = 0;
  memset(v668, 0, sizeof(v668));
  *(_OWORD *)v667 = 0u;
  *(_OWORD *)&v667[16] = 1uLL;
  *(_OWORD *)&v667[32] = 0uLL;
  v669 = 1;
  memset(v671, 0, sizeof(v671));
  re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(a1 + 88, (__int16 *)&v639, (uint64_t)&v660);
  re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v668[8]);
  if (*(_QWORD *)&v668[8])
  {
    v25 = v669;
    if ((v669 & 1) == 0)
    {
      (*(void (**)(void))(**(_QWORD **)&v668[8] + 40))();
      v25 = v669;
    }
    *(_QWORD *)&v668[8] = 0;
    *(_QWORD *)&v668[16] = 0;
    v669 = (v25 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)v667);
  if (*(_QWORD *)v667)
  {
    v26 = *(_DWORD *)&v667[16];
    if ((v667[16] & 1) == 0)
    {
      (*(void (**)(void))(**(_QWORD **)v667 + 40))();
      v26 = *(_DWORD *)&v667[16];
    }
    *(_OWORD *)v667 = 0uLL;
    *(_DWORD *)&v667[16] = (v26 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v665[40]);
  if (*(_QWORD *)&v665[40])
  {
    v27 = *(_DWORD *)&v665[56];
    if ((v665[56] & 1) == 0)
    {
      (*(void (**)(void))(**(_QWORD **)&v665[40] + 40))();
      v27 = *(_DWORD *)&v665[56];
    }
    *(_QWORD *)&v665[40] = 0;
    *(_QWORD *)&v665[48] = 0;
    *(_DWORD *)&v665[56] = (v27 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v664);
  if (v664.i64[0])
  {
    v28 = *(_DWORD *)v665;
    if ((v665[0] & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v664.i64[0] + 40))();
      v28 = *(_DWORD *)v665;
    }
    v664 = 0uLL;
    *(_DWORD *)v665 = (v28 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v663.columns[0].i64[1]);
  if (v663.columns[0].i64[1])
  {
    v29 = v663.columns[1].i32[2];
    if ((v663.columns[1].i8[8] & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v663.columns[0].i64[1] + 40))();
      v29 = v663.columns[1].i32[2];
    }
    v663.columns[0].i64[1] = 0;
    v663.columns[1].i64[0] = 0;
    v663.columns[1].i32[2] = (v29 | 1) + 2;
  }
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)&v660);
  if (v660.i64[0] && (v661.i8[0] & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v660.i64[0] + 40))();
  v34 = *(_DWORD *)(a1 + 2964);
  v551 = a7;
  v552 = a9;
  if (v34)
  {
    v35 = (unsigned __int16 *)(a1 + 2936);
    v30 = *(unsigned int *)(a1 + 2968);
    if ((_DWORD)v30)
    {
      v36 = 0;
      v37 = *(_DWORD **)(a1 + 2952);
      while ((*v37 & 0x80000000) == 0)
      {
        v37 += 88;
        if (v30 == ++v36)
        {
          LODWORD(v36) = *(_DWORD *)(a1 + 2968);
          break;
        }
      }
      v31 = v36;
    }
    else
    {
      v31 = 0;
    }
    v39 = a1 + 2936;
  }
  else
  {
    v35 = (unsigned __int16 *)(a1 + 120);
    v39 = a1 + 120 + 352 * *(_QWORD *)(a1 + 104);
  }
  v40 = v35 == (unsigned __int16 *)v39;
  if (v34)
    v40 = (_DWORD)v30 == (_DWORD)v31;
  v595 = a1;
  v596 = a2;
  if (!v40)
  {
    v550 = a1 + 40;
    v44 = 144;
    v45.i64[0] = 0;
    v46.i64[0] = 0;
    v600.i8[0] = 0;
    nn = (unint64_t)&v659;
    v48 = (unint64_t)v626;
    v548 = v13;
    v549 = a8;
    v597 = v24;
    v547 = *(_DWORD *)(a1 + 2964);
    v545 = v39;
    v546 = v30;
    while (1)
    {
      v553 = v31;
      v554 = v35;
      if (v34)
      {
        v49 = *((_QWORD *)v35 + 2) + 352 * v31;
        v50 = (unsigned __int16 *)(v49 + 4);
        v51 = (_QWORD *)(v49 + 8);
      }
      else
      {
        v51 = v35 + 4;
        v50 = v35;
      }
      v52 = *v50;
      if (*(_QWORD *)(a1 + 16))
      {
        v53 = re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::addUninitialized((uint64_t)(v51 + 7));
        v54 = v53;
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 8) = 0;
        *(_QWORD *)(v53 + 16) = 0;
        *(_QWORD *)v53 = 0;
        *(_DWORD *)(v53 + 24) = 0;
        if (*(_QWORD *)a1)
        {
          v55 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)v53 = *(_QWORD *)a1;
          re::DynamicArray<re::DirectionalLightInfo>::setCapacity((_QWORD *)v53, v55);
          ++*(_DWORD *)(v54 + 24);
          re::DynamicArray<re::DirectionalLightInfo>::copy((_QWORD *)v54, a1);
        }
        re::FixedArray<re::Matrix4x4<float>>::FixedArray((uint64_t *)(v54 + 40), v550);
        *(_QWORD *)(v54 + 64) = 0;
        *(_QWORD *)(v54 + 72) = 0;
        *(_QWORD *)(v54 + 80) = 0;
        v56 = *(_QWORD *)(a1 + 64);
        if (v56)
        {
          re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>((_QWORD *)(v54 + 64), v56, *(_QWORD *)(a1 + 72));
          v58 = *(_QWORD *)(a1 + 72);
          if (*(_QWORD *)(v54 + 72) != v58)
            goto LABEL_688;
          if (v58)
            memmove(*(void **)(v54 + 80), *(const void **)(a1 + 80), 8 * v58);
        }
      }
      for (i = 0; i != 256; i += 32)
      {
        v60 = (char *)&v660 + i;
        *(_QWORD *)v60 = 0;
        *((_QWORD *)v60 + 1) = 0;
        v60[16] = 0;
      }
      for (j = 0; j != 256; j += 32)
      {
        v62 = (char *)&v639 + j;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
        v62[16] = 0;
      }
      v556 = v51;
      if (v51[12] || v51[19] || v51[26])
      {
        re::LightContextBuilder::computeSceneBoundingBoxCorners((uint64_t)v626, a3, a4, v52, 0, *(double *)v45.i64, *(double *)v46.i64, v32, v33);
        *(_OWORD *)&v665[64] = v635;
        v666 = v636;
        *(float32x4_t *)v667 = v637;
        v667[16] = v638;
        *(_OWORD *)v665 = v631;
        *(_OWORD *)&v665[16] = v632;
        *(_OWORD *)&v665[32] = v633;
        *(_OWORD *)&v665[48] = v634;
        v663.columns[1] = v627;
        v663.columns[2] = v628;
        v663.columns[3] = v629;
        v664 = v630;
        v660 = (simd_float4)v626[0];
        v661 = (simd_float4)v626[1];
        v662 = (simd_float4)v626[2];
        v663.columns[0] = (simd_float4)v626[3];
        re::LightContextBuilder::computeSceneBoundingBoxCorners((uint64_t)v626, a3, a4, v52, 1, *(double *)v626[2].i64, *(double *)v626[3].i64, v63, v64);
        v648 = v635;
        v649 = v636;
        v650 = v637;
        v651 = v638;
        v644 = v631;
        v645 = v632;
        v646 = v633;
        v647 = v634;
        v640 = v627;
        v641 = v628;
        v642 = v629;
        v643 = v630;
        v639.columns[0] = (simd_float4)v626[0];
        v639.columns[1] = (simd_float4)v626[1];
        v45.i64[0] = v626[2].i64[0];
        v46.i64[0] = v626[3].i64[0];
        v639.columns[2] = (simd_float4)v626[2];
        v639.columns[3] = (simd_float4)v626[3];
        v65 = *(_QWORD *)(a1 + 2984);
        v565 = v51[12];
        if (v565)
        {
          v66 = 0;
          v67 = *(unsigned __int8 *)(a1 + 3032);
          v561 = (uint64_t)(v51 + 7);
          v544 = *(_QWORD *)(a1 + 2984);
          v578 = v65 + 8;
          do
          {
            v571 = v66;
            v68 = (uint64_t *)re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](v561, v66);
            v69 = v68[2];
            i4 = 1;
            if (v68[2])
            {
              for (k = 0; k < v68[2]; ++k)
              {
                v72 = v68[4];
                v73 = v72 + 144 * k;
                if (*(_BYTE *)(v73 + 135))
                {
                  re::LightContextBuilder::calculateDirectionalLightBoundsWithCameraView((float32x4_t *)v652, v24, (float32x4_t *)&v660, (float32x4_t *)v73, 1, v67 != 0, 1, *(float *)(v72 + 144 * k + 124));
                  if (vabds_f32(*(float *)v652, *(float *)&re::LightContextBuilder::globalBounds) >= 0.5
                    || vabds_f32(*(float *)&v652[4], *((float *)&re::LightContextBuilder::globalBounds + 1)) >= 0.5
                    || vabds_f32(*(float *)&v652[8], *((float *)&re::LightContextBuilder::globalBounds + 2)) >= 0.5
                    || vabds_f32(*(float *)&v652[16], *(float *)&dword_255835980) >= 0.5)
                  {
                    re::LightContextBuilder::globalBounds = *(_OWORD *)v652;
                    v74.i32[1] = *(_DWORD *)&v652[16];
                    *(__int128 *)((char *)&re::LightContextBuilder::globalBounds + 12) = *(_OWORD *)&v652[12];
                  }
                  if (v67)
                  {
                    v74.i32[0] = dword_255835980;
                    v75 = (float32x4_t)v639.columns[0];
                    v76 = vmulq_f32(v75, v75);
                    v32 = COERCE_DOUBLE(vdup_lane_s32(v74, 0));
                    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).f32[0]) >= 1.0e-10)
                    {
                      v84 = 0;
                      v85 = (float32x4_t)re::LightContextBuilder::globalBounds;
                      v86 = 1;
LABEL_96:
                      v87 = vsubq_f32((float32x4_t)v639.columns[2 * v84], v85);
                      v88 = vmulq_f32(v87, v87);
                      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0]) > *(float *)v74.i32)
                      {
LABEL_101:
                        v93 = &v639.columns[2 * v84++ + 2];
                        while (1)
                        {
                          v93[-1].i8[0] = 1;
                          if (v84 == 8)
                            break;
                          v94 = *(float32x4_t *)v93;
                          v93 += 2;
                          v95 = vsubq_f32(v94, v85);
                          v96 = vmulq_f32(v95, v95);
                          ++v84;
                          if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))).f32[0]) <= *(float *)v74.i32)
                          {
                            v86 = 0;
                            if (v84 != 8)
                              goto LABEL_96;
                            goto LABEL_117;
                          }
                        }
                        if ((v86 & 1) == 0)
                          goto LABEL_117;
                        v104 = v85;
                        v104.i32[3] = *(_DWORD *)(v73 + 92);
                        *(float32x4_t *)(v73 + 80) = v104;
                        v105 = v85;
                      }
                      else
                      {
                        v89 = &v639.columns[2 * v84 + 2];
                        while (v84 != 7)
                        {
                          v90 = *(float32x4_t *)v89;
                          v89 += 2;
                          v91 = vsubq_f32(v90, v85);
                          v92 = vmulq_f32(v91, v91);
                          ++v84;
                          if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).f32[0]) > *(float *)v74.i32)
                          {
                            v86 = 0;
                            goto LABEL_101;
                          }
                        }
                        if ((v86 & 1) != 0)
                        {
                          v106.i64[0] = 0x3F0000003F000000;
                          v106.i64[1] = 0x3F0000003F000000;
                          v105 = vmulq_f32(vaddq_f32(v75, v650), v106);
                          v107 = v105;
                          v107.i32[3] = *(_DWORD *)(v73 + 92);
                          *(float32x4_t *)(v73 + 80) = v107;
                          v107.i32[0] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u32[0];
                          v107.i32[1] = v105.i32[0];
                          v108.i32[0] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u32[0];
                          v108.i32[1] = v75.i32[0];
                          v32 = COERCE_DOUBLE(vabd_f32(*(float32x2_t *)v107.f32, v108));
                        }
                        else
                        {
LABEL_117:
                          v109 = 0;
                          v110 = 0uLL;
                          do
                          {
                            v111 = (float32x4_t)v639.columns[v109];
                            if (v639.columns[v109 + 1].i8[0])
                            {
                              v112 = vsubq_f32(v111, v85);
                              v113 = (int32x4_t)vmulq_f32(v112, v112);
                              v113.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v113, 2), vadd_f32(*(float32x2_t *)v113.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v113.i8, 1))).u32[0];
                              v114 = vrsqrte_f32((float32x2_t)v113.u32[0]);
                              v115 = vmul_f32(v114, vrsqrts_f32((float32x2_t)v113.u32[0], vmul_f32(v114, v114)));
                              v111 = vaddq_f32(v85, vmulq_n_f32(vmulq_n_f32(v112, vmul_f32(v115, vrsqrts_f32((float32x2_t)v113.u32[0], vmul_f32(v115, v115))).f32[0]), *(float *)v74.i32));
                              v639.columns[v109] = (simd_float4)v111;
                            }
                            v110 = vaddq_f32(v110, v111);
                            v109 += 2;
                          }
                          while (v109 != 16);
                          v116 = 0;
                          v117.i64[0] = 0x3E0000003E000000;
                          v117.i64[1] = 0x3E0000003E000000;
                          v105 = vmulq_f32(v110, v117);
                          v118 = v105;
                          v118.i32[3] = *(_DWORD *)(v73 + 92);
                          *(float32x4_t *)(v73 + 80) = v118;
                          v119.i32[0] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u32[0];
                          v119.i32[1] = v105.i32[0];
                          v32 = 0.0;
                          do
                          {
                            v120.i32[0] = v639.columns[v116].i32[2];
                            v120.i32[1] = v639.columns[v116].i32[0];
                            v121 = vabd_f32(v120, v119);
                            v32 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcgt_f32(v121, *(float32x2_t *)&v32), (int8x8_t)v121, *(int8x8_t *)&v32));
                            v116 += 2;
                          }
                          while (v116 != 16);
                        }
                      }
                      LODWORD(v122) = vsubq_f32(v105, v85).i32[1];
                      v78 = v122 - *(float *)v74.i32;
                      v77 = *(float *)v74.i32 + v122;
                    }
                    else
                    {
                      v77 = 10.0;
                      v78 = 0.01;
                    }
                    v73 = v68[6];
                    if (v73 <= k)
                      goto LABEL_456;
                    v123 = v77 + (float)(fabsf(v77) * 0.3);
                    v124 = v123 - (float)(v78 - (float)(fabsf(v78) * 0.3));
                    *(float *)&v125 = v123 / v124;
                    v45.i64[0] = 0;
                    v45.i64[1] = __PAIR64__(1.0, v125);
                    *(float *)&v126 = 1.0 / v124;
                    v46.i64[0] = 0;
                    v46.i64[1] = v126;
                    v33.n128_u32[0] = 0;
                    v33.n128_u64[1] = 0;
                    v33.n128_f32[1] = 2.0 / (float)(*(float *)&v32 + *(float *)&v32);
                    *(float *)&v32 = 2.0 / (float)(*((float *)&v32 + 1) + *((float *)&v32 + 1));
                  }
                  else
                  {
                    v83 = re::LightContextBuilder::globalBounds;
                    HIDWORD(v83) = *(_DWORD *)(v73 + 92);
                    *(_OWORD *)(v73 + 80) = v83;
                    v73 = v68[6];
                    if (v73 <= k)
                    {
                      *(_QWORD *)v654 = 0;
                      v627 = 0u;
                      memset(v626, 0, sizeof(v626));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      v659.columns[0].i32[0] = 136315906;
                      *(uint64_t *)((char *)v659.columns[0].i64 + 4) = (uint64_t)"operator[]";
                      v659.columns[0].i16[6] = 1024;
                      *(__int32 *)((char *)&v659.columns[0].i32[3] + 2) = 468;
                      v659.columns[1].i16[1] = 2048;
                      *(uint64_t *)((char *)v659.columns[1].i64 + 4) = k;
                      v659.columns[1].i16[6] = 2048;
                      *(uint64_t *)((char *)&v659.columns[1].i64[1] + 6) = v73;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_461;
                    }
                    v45.i64[0] = 0;
                    *(float *)&v45.i32[2] = unk_255835988 / (float)(unk_255835988 - *(float *)&dword_255835984);
                    v45.i32[3] = 1.0;
                    v46.i64[0] = 0;
                    v46.i32[3] = 0;
                    *(float *)&v46.i32[2] = 1.0 / (float)(unk_255835988 - *(float *)&dword_255835984);
                    *(float *)&v32 = 2.0 / (float)(*(float *)&dword_255835980 + *(float *)&dword_255835980);
                    v33.n128_u32[0] = 0;
                    v33.n128_u64[1] = 0;
                    v33.n128_f32[1] = *(float *)&v32;
                  }
                  v127 = (_OWORD *)(v68[7] + (k << 6));
                  *v127 = LODWORD(v32);
                  v127[1] = v33;
                  v127[2] = v46;
                  v127[3] = v45;
                }
                else
                {
                  i4 = v68[9];
                  if (i4 <= k)
                    goto LABEL_457;
                  v79 = *(unsigned __int8 *)(v72 + 144 * k + 134);
                  v80 = *(_QWORD *)(v68[10] + 8 * k);
                  if (*(_BYTE *)(v72 + 144 * k + 136))
                  {
                    re::LightContextBuilder::calculateDirectionalLightBoundsWithCameraView(v626, v597, (float32x4_t *)&v660, (float32x4_t *)v73, 0, 0, *(_BYTE *)(v72 + 144 * k + 137), *(float *)(v72 + 144 * k + 124));
                    v81 = v626[0];
                    LODWORD(v32) = v626[1].i32[1];
                    v82 = v626[1].f32[0];
                    v45.i32[0] = v626[1].i32[2];
                    v33 = *(__n128 *)(v73 + 80);
                  }
                  else
                  {
                    v33 = *(__n128 *)(v73 + 80);
                    v82 = *(float *)(v72 + 144 * k + 140) * 0.5;
                    LODWORD(v32) = *(_DWORD *)(v73 + 116);
                    v45.i32[0] = *(_DWORD *)(v73 + 120);
                    v81 = (float32x4_t)v33;
                  }
                  v81.i32[3] = v33.n128_i32[3];
                  *(float32x4_t *)(v73 + 80) = v81;
                  *(float *)&v32 = *(float *)v45.i32 - *(float *)&v32;
                  v33.n128_f32[0] = 1.0 / *(float *)&v32;
                  v97.i32[1] = 0;
                  v97.i64[1] = 0;
                  v97.f32[0] = 2.0 / (float)(v82 + v82);
                  v98.i32[0] = 0;
                  v98.i64[1] = 0;
                  v98.f32[1] = v97.f32[0];
                  v99.i64[0] = 0;
                  v99.i32[3] = 0;
                  v99.f32[2] = 1.0 / *(float *)&v32;
                  *(float *)v45.i32 = *(float *)v45.i32 / *(float *)&v32;
                  v46.i64[0] = 0;
                  v46.i64[1] = __PAIR64__(1.0, v45.u32[0]);
                  if (v79)
                  {
                    v609 = v98;
                    v616 = v97;
                    v601 = (float32x4_t)v46;
                    v605 = v99;
                    v10 = *(int32x2_t *)re::DataArray<re::TextureAtlasTile>::get(v578, v80);
                    v674 = __invert_f4(*(simd_float4x4 *)(v73 + 32));
                    v99 = v605;
                    v98 = v609;
                    v97 = v616;
                    v100 = 0;
                    v659 = v674;
                    do
                    {
                      v626[v100] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v616, COERCE_FLOAT(*(_OWORD *)&v659.columns[v100])), v609, *(float32x2_t *)v659.columns[v100].f32, 1), v605, (float32x4_t)v659.columns[v100], 2), v601, (float32x4_t)v659.columns[v100], 3);
                      ++v100;
                    }
                    while (v100 != 4);
                    v101 = vcvt_f32_u32((uint32x2_t)vadd_s32(v10, (int32x2_t)0x500000005));
                    v33 = (__n128)v626[2];
                    v102 = vmlaq_f32(vmlaq_f32(vmulq_f32(v626[0], (float32x4_t)0), (float32x4_t)0, v626[1]), (float32x4_t)0, v626[2]);
                    *(float32x2_t *)v102.f32 = vmul_f32(vmul_f32(v101, (float32x2_t)0x3F0000003F000000), vadd_f32(*(float32x2_t *)v626[3].f32, *(float32x2_t *)v102.f32));
                    *(_QWORD *)&v32 = vrndaq_f32(v102).u64[0];
                    *(float32x2_t *)v45.i8 = vadd_f32(vmul_f32(vdiv_f32((float32x2_t)0x4000000040000000, v101), vsub_f32(*(float32x2_t *)&v32, *(float32x2_t *)v102.f32)), 0);
                    v45.i64[1] = vextq_s8((int8x16_t)v601, (int8x16_t)v601, 8uLL).u64[0];
                    v46 = v45;
                  }
                  v24 = v597;
                  i4 = 1;
                  v73 = v68[6];
                  if (v73 <= k)
                  {
LABEL_458:
                    *(_QWORD *)v652 = 0;
                    v627 = 0u;
                    memset(v626, 0, sizeof(v626));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v659.columns[0].i32[0] = 136315906;
                    *(uint64_t *)((char *)v659.columns[0].i64 + 4) = (uint64_t)"operator[]";
                    v659.columns[0].i16[6] = 1024;
                    *(__int32 *)((char *)&v659.columns[0].i32[3] + 2) = 468;
                    v659.columns[1].i16[1] = 2048;
                    *(uint64_t *)((char *)v659.columns[1].i64 + 4) = k;
                    v659.columns[1].i16[6] = 2048;
                    *(uint64_t *)((char *)&v659.columns[1].i64[1] + 6) = v73;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_459:
                    v331 = (unsigned __int16 *)(v73 + 120);
                    v384 = v73 + 120 + 352 * *(_QWORD *)(v73 + 104);
                    goto LABEL_463;
                  }
                  v103 = (float32x4_t *)(v68[7] + (k << 6));
                  *v103 = v97;
                  v103[1] = v98;
                  v103[2] = v99;
                  v103[3] = (float32x4_t)v46;
                }
              }
            }
            v66 = v571 + 1;
          }
          while (v571 + 1 != v565);
          v51 = v556;
          v65 = v544;
        }
      }
      else
      {
        v65 = *(_QWORD *)(a1 + 2984);
      }
      v570 = (uint64_t *)v51[19];
      if (v570)
        break;
LABEL_143:
      v150 = v556[26];
      if (v150)
      {
        for (m = 0; m != v150; ++m)
        {
          v152 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[]((uint64_t)(v556 + 21), m);
          v153 = *(_QWORD *)(v152 + 16);
          if (v153)
          {
            v154 = v152;
            v155 = 0;
            v156.i64[0] = 0x3F0000003F000000;
            v156.i64[1] = 0x3F0000003F000000;
            v157 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)v660, *(float32x4_t *)v667), v156);
            v46 = vdupq_lane_s32(*(int32x2_t *)v157.i8, 1);
            v611 = (float32x4_t)v46;
            v618 = *(float *)v157.i32;
            v45 = vdupq_laneq_s32(v157, 2);
            v607 = (float32x4_t)v45;
            v158 = 116;
            do
            {
              v159 = *(_QWORD *)(v154 + 32) + v158;
              if (*(_BYTE *)(v159 + 108))
              {
                v676 = __invert_f4(*(simd_float4x4 *)(v159 - 84));
                *(float *)v10.i32 = fabsf(COERCE_FLOAT(vaddq_f32(*(float32x4_t *)(&v676 + 48), vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)&v676, v618), v611, *(float32x4_t *)(&v676 + 16)), v607, *(float32x4_t *)(&v676 + 32))).i32[2]));
                *(double *)v45.i64 = tan(*(float *)(v159 + 92) * 0.5);
                *(float *)v45.i32 = *(double *)v45.i64;
                *(float *)v46.i32 = *(float *)v159 * *(float *)v45.i32;
                if (*(float *)v46.i32 < (float)(*(float *)v10.i32 * *(float *)v45.i32))
                  *(float *)v46.i32 = *(float *)v10.i32 * *(float *)v45.i32;
                v33.n128_u32[0] = 1140654080;
                *(float *)&v32 = *(float *)v46.i32
                               + (float)((float)((float)(*(float *)v46.i32 + *(float *)v46.i32) / 506.0) * 3.0);
                v160 = (float)(*(float *)&v32 * *(float *)v45.i32) / *(float *)v46.i32;
                v46.i32[0] = 1.0;
                *(float *)v45.i32 = 1.0 / v160;
                *(_DWORD *)(v159 + 32) = v45.i32[0];
                *(_DWORD *)(v159 + 12) = v45.i32[0];
                v153 = *(_QWORD *)(v154 + 16);
              }
              ++v155;
              v158 += 240;
            }
            while (v155 < v153);
          }
        }
      }
      v34 = v547;
      if (v547)
      {
        v35 = v554;
        v161 = v553 + 1;
        a1 = v595;
        a2 = v596;
        v13 = v548;
        a8 = v549;
        v24 = v597;
        v163 = (unsigned __int16 *)v545;
        v162 = v546;
        do
        {
          v31 = v161;
          if (v161 >= *((_DWORD *)v554 + 8))
            break;
          ++v161;
        }
        while ((*(_DWORD *)(*((_QWORD *)v554 + 2) + 352 * v31) & 0x80000000) == 0);
      }
      else
      {
        v31 = v553;
        v35 = v554 + 176;
        a1 = v595;
        a2 = v596;
        v13 = v548;
        a8 = v549;
        v24 = v597;
        v163 = (unsigned __int16 *)v545;
        v162 = v546;
      }
      v164 = v35 == v163;
      if (v547)
        v164 = v162 == (_DWORD)v31;
      if (v164)
        goto LABEL_55;
    }
    v128 = 0;
    v129 = v65 + 8;
    while (1)
    {
      v579 = v128;
      v130 = (uint64_t *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[]((uint64_t)(v556 + 14), v128);
      v131 = v130[2];
      if (v130[2])
        break;
LABEL_142:
      v128 = v579 + 1;
      if ((uint64_t *)(v579 + 1) == v570)
        goto LABEL_143;
    }
    v132 = 0;
    while (1)
    {
      v133 = v130[13];
      if (v133 <= v132)
        break;
      v134 = v130[4];
      v135 = v134 + 144 * v132;
      v136 = *(_QWORD *)(v130[14] + 8 * v132);
      if (*(_BYTE *)(v135 + 134))
      {
        re::LightContextBuilder::calculateDirectionalLightBoundsWithCameraView(v626, v24, (float32x4_t *)&v660, (float32x4_t *)v135, 0, 0, *(_BYTE *)(v134 + 144 * v132 + 140), *(float *)(v134 + 144 * v132 + 124));
        v137 = v626[0];
        v139 = v626[1].f32[1];
        v138 = v626[1].f32[0];
        v140 = v626[1].f32[2];
        v141 = *(float32x4_t *)(v135 + 80);
      }
      else
      {
        v141 = *(float32x4_t *)(v135 + 80);
        v138 = *(float *)(v134 + 144 * v132 + 136) * 0.5;
        v139 = *(float *)(v135 + 116);
        v140 = *(float *)(v135 + 120);
        v137 = v141;
      }
      v137.i32[3] = v141.i32[3];
      *(float32x4_t *)(v135 + 80) = v137;
      *(float *)&v142 = 2.0 / (float)(v138 + v138);
      v143 = v140 - v139;
      v617 = (float32x4_t)v142;
      LODWORD(v144) = 0;
      HIDWORD(v144) = v142;
      v145.i64[0] = 0;
      v145.i32[3] = 0;
      v145.f32[2] = 1.0 / v143;
      v606 = v145;
      v610 = (float32x4_t)v144;
      v145.i64[0] = 0;
      v145.i64[1] = __PAIR64__(1.0, v140 / v143);
      v602 = v145;
      v10 = *(int32x2_t *)re::DataArray<re::TextureAtlasTile>::get(v129, v136);
      v675 = __invert_f4(*(simd_float4x4 *)(v135 + 32));
      v146 = 0;
      v659 = v675;
      do
      {
        v626[v146] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v617, COERCE_FLOAT(*(_OWORD *)&v659.columns[v146])), v610, *(float32x2_t *)v659.columns[v146].f32, 1), v606, (float32x4_t)v659.columns[v146], 2), v602, (float32x4_t)v659.columns[v146], 3);
        ++v146;
      }
      while (v146 != 4);
      v133 = v130[10];
      if (v133 <= v132)
        goto LABEL_201;
      v32 = *(double *)v626[2].i64;
      v33 = (__n128)v626[3];
      v147 = vcvt_f32_u32((uint32x2_t)vadd_s32(v10, (int32x2_t)0x500000005));
      v148 = vmlaq_f32(vmlaq_f32(vmulq_f32(v626[0], (float32x4_t)0), (float32x4_t)0, v626[1]), (float32x4_t)0, v626[2]);
      *(float32x2_t *)v148.f32 = vmul_f32(vmul_f32(v147, (float32x2_t)0x3F0000003F000000), vadd_f32(*(float32x2_t *)v626[3].f32, *(float32x2_t *)v148.f32));
      *(float32x2_t *)v45.i8 = vadd_f32(vmul_f32(vdiv_f32((float32x2_t)0x4000000040000000, v147), vsub_f32((float32x2_t)*(_OWORD *)&vrndaq_f32(v148), *(float32x2_t *)v148.f32)), 0);
      v46.i64[0] = vextq_s8((int8x16_t)v602, (int8x16_t)v602, 8uLL).u64[0];
      v45.i64[1] = v46.i64[0];
      v149 = (float32x4_t *)(v130[11] + (v132 << 6));
      *v149 = v617;
      v149[1] = v610;
      v149[2] = v606;
      v149[3] = (float32x4_t)v45;
      if (++v132 >= v130[2])
        goto LABEL_142;
    }
    *(_QWORD *)v652 = 0;
    v627 = 0u;
    memset(v626, 0, sizeof(v626));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v659.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v659.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v659.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v659.columns[0].i32[3] + 2) = 468;
    v659.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v659.columns[1].i64 + 4) = v132;
    v659.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v659.columns[1].i64[1] + 6) = v133;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_201:
    *(_QWORD *)v652 = 0;
    v627 = 0u;
    memset(v626, 0, sizeof(v626));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v659.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v659.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v659.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v659.columns[0].i32[3] + 2) = 468;
    v659.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v659.columns[1].i64 + 4) = v132;
    v659.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v659.columns[1].i64[1] + 6) = v133;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_202;
  }
LABEL_55:
  if (!re::s_debugSettingsManager)
  {
    v653 = 0;
    *(_QWORD *)&v652[16] = 0;
    *(_DWORD *)&v652[24] = 0;
    *(_OWORD *)v652 = (unint64_t)a2;
    re::DynamicArray<re::SingleCullingFrustum>::setCapacity(v652, 0);
    ++*(_DWORD *)&v652[24];
    if (!v13)
      goto LABEL_171;
LABEL_165:
    v165 = *(_QWORD *)(v13 + 40);
    if (v165)
    {
      for (n = 0; n != v165; ++n)
      {
        v167 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v13, n);
        v173 = *(_QWORD *)(v167 + 16);
        if (v173)
        {
          v174 = 672 * v173;
          v175 = (const re::RenderCamera *)(*(_QWORD *)(v167 + 32) + 64);
          do
          {
            re::computeCullingPlanes((float32x4_t *)v175 - 2, v175, (const re::Projection *)1, (float32x4_t *)&v660, v168, v169, v170, v171, v172);
            re::computeFrustumCorners((float32x4_t *)v175 - 2, (uint64_t)v175, 1, &v664, v176, v177, v178);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v652, (unint64_t *)&v660);
            v175 = (const re::RenderCamera *)((char *)v175 + 672);
            v174 -= 672;
          }
          while (v174);
        }
      }
    }
    goto LABEL_171;
  }
  v639.columns[0].i8[0] = 0;
  v660.i64[0] = 0xF53EA7863F1002DELL;
  v660.i64[1] = (uint64_t)"overrides:disablelightfrustumculling";
  re::DebugSettingsManager::getWithErrorCode<BOOL>(re::s_debugSettingsManager, &v660, &v639);
  re::StringID::destroyString((re::StringID *)&v660);
  v41 = v639.columns[0].u8[0];
  v653 = 0;
  *(_QWORD *)&v652[16] = 0;
  *(_DWORD *)&v652[24] = 0;
  *(_OWORD *)v652 = (unint64_t)a2;
  re::DynamicArray<re::SingleCullingFrustum>::setCapacity(v652, 0);
  ++*(_DWORD *)&v652[24];
  if (v41)
    goto LABEL_192;
  if (v13)
    goto LABEL_165;
LABEL_171:
  v179 = v551;
  if (v551)
  {
    v180 = *(_QWORD *)(v551 + 40);
    if (v180)
    {
      for (ii = 0; ii != v180; ++ii)
      {
        v182 = v179;
        v183 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v179, ii);
        v189 = *(_QWORD *)(v183 + 16);
        if (v189)
        {
          v190 = 1360 * v189;
          v191 = (const re::RenderCamera *)(*(_QWORD *)(v183 + 32) + 736);
          do
          {
            re::computeCullingPlanes((float32x4_t *)v191 - 44, (const re::RenderCamera *)((char *)v191 - 672), (const re::Projection *)1, (float32x4_t *)&v660, v184, v185, v186, v187, v188);
            re::computeFrustumCorners((float32x4_t *)v191 - 44, (uint64_t)v191 - 672, 1, &v664, v192, v193, v194);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v652, (unint64_t *)&v660);
            re::computeCullingPlanes((float32x4_t *)v191 - 2, v191, (const re::Projection *)1, (float32x4_t *)&v660, v195, v196, v197, v198, v199);
            re::computeFrustumCorners((float32x4_t *)v191 - 2, (uint64_t)v191, 1, &v664, v200, v201, v202);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v652, (unint64_t *)&v660);
            v191 = (const re::RenderCamera *)((char *)v191 + 1360);
            v190 -= 1360;
          }
          while (v190);
        }
        v179 = v182;
      }
    }
  }
  v203 = *(_QWORD *)(a8 + 40);
  if (v203)
  {
    for (jj = 0; jj != v203; ++jj)
    {
      v205 = *(_QWORD *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](a8, jj);
      if (v205)
      {
        v211 = *(_QWORD *)(v205 + 16);
        if (v211)
        {
          v212 = 672 * v211;
          v213 = (const re::RenderCamera *)(*(_QWORD *)(v205 + 32) + 64);
          do
          {
            re::computeCullingPlanes((float32x4_t *)v213 - 2, v213, (const re::Projection *)1, (float32x4_t *)&v660, v206, v207, v208, v209, v210);
            re::computeFrustumCorners((float32x4_t *)v213 - 2, (uint64_t)v213, 1, &v664, v214, v215, v216);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v652, (unint64_t *)&v660);
            v213 = (const re::RenderCamera *)((char *)v213 + 672);
            v212 -= 672;
          }
          while (v212);
        }
      }
    }
  }
  v217 = *(_QWORD *)(a8 + 96);
  if (v217)
  {
    v218 = 0;
    v219 = a8 + 56;
    do
    {
      v220 = *(_QWORD *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](v219, v218);
      if (v220)
      {
        v226 = *(_QWORD *)(v220 + 16);
        if (v226)
        {
          v227 = 1360 * v226;
          v228 = (const re::RenderCamera *)(*(_QWORD *)(v220 + 32) + 736);
          do
          {
            re::computeCullingPlanes((float32x4_t *)v228 - 44, (const re::RenderCamera *)((char *)v228 - 672), (const re::Projection *)1, (float32x4_t *)&v660, v221, v222, v223, v224, v225);
            re::computeFrustumCorners((float32x4_t *)v228 - 44, (uint64_t)v228 - 672, 1, &v664, v229, v230, v231);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v652, (unint64_t *)&v660);
            re::computeCullingPlanes((float32x4_t *)v228 - 2, v228, (const re::Projection *)1, (float32x4_t *)&v660, v232, v233, v234, v235, v236);
            re::computeFrustumCorners((float32x4_t *)v228 - 2, (uint64_t)v228, 1, &v664, v237, v238, v239);
            re::DynamicArray<re::SingleCullingFrustum>::add((uint64_t)v652, (unint64_t *)&v660);
            v228 = (const re::RenderCamera *)((char *)v228 + 1360);
            v227 -= 1360;
          }
          while (v227);
        }
      }
      ++v218;
    }
    while (v218 != v217);
  }
LABEL_192:
  v240 = v595;
  v241 = *(_DWORD *)(v595 + 2964);
  if (!v241)
  {
    v242 = v595 + 120;
    v245 = v595 + 120 + 352 * *(_QWORD *)(v595 + 104);
    goto LABEL_204;
  }
  v242 = v595 + 2936;
  v42 = *(unsigned int *)(v595 + 2968);
  if ((_DWORD)v42)
  {
    v243 = 0;
    v244 = *(_DWORD **)(v595 + 2952);
    while ((*v244 & 0x80000000) == 0)
    {
      v244 += 88;
      if (v42 == ++v243)
      {
        LODWORD(v243) = *(_DWORD *)(v595 + 2968);
        break;
      }
    }
    v43 = v243;
    goto LABEL_203;
  }
LABEL_202:
  v43 = 0;
LABEL_203:
  v245 = v242;
LABEL_204:
  v603 = (unint64_t *)(v240 + 3024);
  v246 = (unint64_t *)(v240 + 3016);
  v247 = v242 == v245;
  if (v241)
    v247 = (_DWORD)v42 == (_DWORD)v43;
  if (v247)
  {
LABEL_207:
    v248 = *(re::ProfilerConfig **)v652;
    v250 = (simd_float4x4 *)v595;
    v249 = v596;
    if (*(_QWORD *)v652 && v653)
    {
      if (*(_QWORD *)&v652[16])
      {
        v251 = &v653[15 * *(_QWORD *)&v652[16]];
        v252 = v653;
        do
        {
          v252->i64[0] = 0;
          ++v252->i32[2];
          v252 += 15;
        }
        while (v252 != v251);
      }
      v248 = (re::ProfilerConfig *)(*(uint64_t (**)(re::ProfilerConfig *))(*(_QWORD *)v248 + 40))(v248);
    }
    *(_QWORD *)(v595 + 3000) = *(_QWORD *)(v595 + 3016) + *(_QWORD *)(v595 + 3008) + *(_QWORD *)(v595 + 3024);
    isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled(v248);
    if ((isStatisticCollectionEnabled & 1) != 0)
    {
      isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
      v254 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
      if (v254)
      {
        v255 = *(_QWORD *)(v595 + 3008);
        v256 = v254[420].u64[0];
        if (v256 >= v255)
          v256 = *(_QWORD *)(v595 + 3008);
        v254[420].i64[0] = v256;
        v257 = v254[420].u64[1];
        if (v257 <= v255)
          v257 = v255;
        v254[420].i64[1] = v257;
        v258 = vdupq_n_s64(1uLL);
        v258.i64[0] = v255;
        v254[421] = vaddq_s64(v254[421], v258);
        *(_BYTE *)(isStatisticCollectionEnabled + 184) = 0;
      }
    }
    v259 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if ((_DWORD)v259)
    {
      v259 = re::profilerThreadContext((re *)v259);
      v260 = *(int64x2_t **)(v259 + 152);
      if (v260)
      {
        v261 = *v246;
        v262 = v260[412].u64[0];
        if (v262 >= *v246)
          v262 = *v246;
        v260[412].i64[0] = v262;
        v263 = v260[412].u64[1];
        if (v263 <= v261)
          v263 = v261;
        v260[412].i64[1] = v263;
        v264 = vdupq_n_s64(1uLL);
        v264.i64[0] = v261;
        v260[413] = vaddq_s64(v260[413], v264);
        *(_BYTE *)(v259 + 184) = 0;
      }
    }
    v265 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v259);
    if ((_DWORD)v265)
    {
      v265 = re::profilerThreadContext((re *)v265);
      v266 = *(int64x2_t **)(v265 + 152);
      if (v266)
      {
        v267 = *v603;
        v268 = v266[404].u64[0];
        if (v268 >= *v603)
          v268 = *v603;
        v266[404].i64[0] = v268;
        v269 = v266[404].u64[1];
        if (v269 <= v267)
          v269 = v267;
        v266[404].i64[1] = v269;
        v270 = vdupq_n_s64(1uLL);
        v270.i64[0] = v267;
        v266[405] = vaddq_s64(v266[405], v270);
        *(_BYTE *)(v265 + 184) = 0;
      }
    }
    v271 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v265);
    if ((_DWORD)v271)
    {
      v272 = re::profilerThreadContext(v271);
      v273 = *(int64x2_t **)(v272 + 152);
      if (v273)
      {
        v274 = *(_QWORD *)(v595 + 3000);
        v275 = v273[388].u64[0];
        if (v275 >= v274)
          v275 = *(_QWORD *)(v595 + 3000);
        v273[388].i64[0] = v275;
        v276 = v273[388].u64[1];
        if (v276 <= v274)
          v276 = v274;
        v273[388].i64[1] = v276;
        v277 = vdupq_n_s64(1uLL);
        v277.i64[0] = v274;
        v273[389] = vaddq_s64(v273[389], v277);
        *(_BYTE *)(v272 + 184) = 0;
      }
    }
    re::LightContextBuilder::Result::Result(v552, v596);
    v278 = *(_QWORD *)(v595 + 2984);
    v619 = *(_QWORD *)(v278 + 72);
    v612 = *(_QWORD *)(v278 + 168);
    v660 = 0u;
    v661.i32[0] = 1;
    v661.i64[1] = 0;
    v662 = 0u;
    v663.columns[0].i32[0] = 0;
    re::BucketArray<re::LightContext,16ul>::init((uint64_t)&v660, (uint64_t)v596, 1uLL);
    v570 = &v663.columns[0].i64[1];
    memset(&v663.columns[0].u32[2], 0, 36);
    v10 = (int32x2_t)0x7FFFFFFFLL;
    *(uint64_t *)((char *)&v663.columns[2].i64[1] + 4) = 0x7FFFFFFFLL;
    v663.columns[3].i64[1] = (uint64_t)v596;
    v664 = 0u;
    *(_OWORD *)&v665[8] = 0u;
    *(_QWORD *)v665 = v596;
    *(_QWORD *)&v665[24] = v596;
    *(_OWORD *)&v665[32] = 0u;
    *(_OWORD *)&v665[56] = 0u;
    *(_QWORD *)&v665[48] = v596;
    *(_QWORD *)&v665[72] = v596;
    v666 = 0u;
    *(_QWORD *)v667 = v596;
    memset(&v667[8], 0, 33);
    *(_QWORD *)&v281 = v612;
    *((_QWORD *)&v281 + 1) = v619;
    *(_OWORD *)v668 = v281;
    v668[16] = 0;
    v282 = *(_DWORD *)(v595 + 2964);
    if (!v282)
      goto LABEL_303;
    v283 = (unsigned __int16 *)(v595 + 2936);
    v279 = *(unsigned int *)(v595 + 2968);
    if ((_DWORD)v279)
    {
      v284 = 0;
      v285 = *(_DWORD **)(v595 + 2952);
      while ((*v285 & 0x80000000) == 0)
      {
        v285 += 88;
        if (v279 == ++v284)
        {
          LODWORD(v284) = *(_DWORD *)(v595 + 2968);
          break;
        }
      }
      v280 = v284;
    }
    else
    {
      v280 = 0;
    }
    v326 = v595 + 2936;
    goto LABEL_306;
  }
  v613 = v653;
  v286 = *(_QWORD *)&v652[16];
  v608 = 240 * *(_QWORD *)&v652[16] - 240;
  v250 = &v639;
  v562 = v245;
  v566 = v42;
  v574 = (unint64_t *)(v240 + 3016);
  LODWORD(v570) = v241;
  while (1)
  {
    v580 = v43;
    v584 = v242;
    if (v241)
      v287 = *(_QWORD *)(v242 + 16) + 352 * v43 + 8;
    else
      v287 = v242 + 8;
    v288 = *(_QWORD *)(v287 + 152);
    if (v288)
    {
      for (kk = 0; kk != v288; ++kk)
      {
        v290 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v287 + 112, kk);
        *(_QWORD *)(v290 + 64) = *(_QWORD *)(v290 + 16);
        v291 = *(_QWORD *)(v290 + 48);
        if (v291 >= 1)
          memset(*(void **)(v290 + 56), 1, v291);
      }
    }
    v588 = v287;
    v598 = *(_QWORD *)(v287 + 264);
    if (v598)
      break;
LABEL_273:
    v246 = v574;
    v621 = *(_QWORD *)(v588 + 208);
    if (v621)
    {
      v308 = 0;
      v600.i64[0] = v588 + 168;
      while (1)
      {
        v309 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v600.i64[0], v308);
        *(_QWORD *)(v309 + 64) = 0;
        v310 = (unint64_t *)(v309 + 64);
        if (*(_QWORD *)(v309 + 16))
          break;
LABEL_290:
        if (++v308 == v621)
          goto LABEL_291;
      }
      v249 = (_QWORD *)v309;
      v296 = 0;
      while (2)
      {
        v311 = v249[4] + 240 * v296;
        v677 = __invert_f4(*(simd_float4x4 *)(v311 + 32));
        v312 = 0;
        v313 = *(float32x4_t *)(v311 + 128);
        v314 = *(float32x4_t *)(v311 + 144);
        v315 = *(float32x4_t *)(v311 + 160);
        v316 = *(float32x4_t *)(v311 + 176);
        v639 = v677;
        do
        {
          *(float32x4_t *)((char *)&v660 + v312 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v313, COERCE_FLOAT(*(_OWORD *)&v639.columns[v312])), v314, *(float32x2_t *)v639.columns[v312].f32, 1), v315, (float32x4_t)v639.columns[v312], 2), v316, (float32x4_t)v639.columns[v312], 3);
          ++v312;
        }
        while (v312 != 4);
        v678.columns[0] = v660;
        v678.columns[1] = v661;
        v678.columns[2] = v662;
        v678.columns[3] = v663.columns[0];
        v626[0] = (float32x4_t)v660;
        v626[1] = (float32x4_t)v661;
        v626[2] = (float32x4_t)v662;
        v626[3] = (float32x4_t)v663.columns[0];
        v659 = __invert_f4(v678);
        re::buildCullingFrustum((uint64_t)v626, &v659, &v660);
        if (v286)
        {
          v317 = v608;
          v318 = v613;
          do
          {
            v319 = re::approxFrustumIntersectFrustum(v318, (float32x4_t *)&v660);
            if ((v319 & 1) != 0)
              break;
            v318 += 15;
            v320 = v317;
            v317 -= 240;
          }
          while (v320);
          v306 = v249[6];
          if (v306 <= v296)
            goto LABEL_302;
          *(_BYTE *)(v249[7] + v296) = v319;
          v321 = v310;
          if ((v319 & 1) != 0)
            goto LABEL_289;
        }
        else
        {
          v306 = v249[6];
          if (v306 <= v296)
            goto LABEL_302;
          *(_BYTE *)(v249[7] + v296) = 0;
        }
        v321 = v574;
LABEL_289:
        ++*v321;
        if (++v296 >= v249[2])
          goto LABEL_290;
        continue;
      }
    }
LABEL_291:
    v241 = (int)v570;
    if ((_DWORD)v570)
    {
      v242 = v584;
      v322 = v580 + 1;
      v324 = v562;
      v323 = v566;
      do
      {
        v43 = v322;
        if (v322 >= *(_DWORD *)(v584 + 32))
          break;
        ++v322;
      }
      while ((*(_DWORD *)(*(_QWORD *)(v584 + 16) + 352 * v43) & 0x80000000) == 0);
    }
    else
    {
      v43 = v580;
      v242 = v584 + 352;
      v324 = v562;
      v323 = v566;
    }
    v325 = v242 == v324;
    if ((_DWORD)v570)
      v325 = v323 == (_DWORD)v43;
    if (v325)
      goto LABEL_207;
  }
  v292 = 0;
  v592 = v287 + 224;
  while (1)
  {
    v600.i64[0] = v292;
    v293 = (_QWORD *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v592, v292);
    v293[8] = 0;
    v296 = (unint64_t)(v293 + 8);
    if (v293[2])
      break;
LABEL_272:
    v292 = v600.i64[0] + 1;
    if (v600.i64[0] + 1 == v598)
      goto LABEL_273;
  }
  v249 = v293;
  v297 = 0;
  v298 = v293[4];
  v299 = v293[7];
  while (!v286)
  {
    v306 = v249[6];
    if (v306 <= v297)
      goto LABEL_301;
    *(_BYTE *)(v299 + v297) = 0;
LABEL_270:
    v307 = v603;
LABEL_271:
    ++*v307;
    if (++v297 >= v249[2])
      goto LABEL_272;
  }
  v300 = (float32x4_t *)(v298 + 224 * v297);
  v301 = v300[5];
  v301.i32[3] = v300[12].i32[2];
  v620 = v301;
  v302 = v608;
  v303 = (uint64_t *)v613;
  do
  {
    v660 = (simd_float4)v620;
    isBoundingSphereIntersectingFrustumPlanes = re::isBoundingSphereIntersectingFrustumPlanes((float32x4_t *)&v660, v303, *(double *)v620.i64, v294, v295);
    if (isBoundingSphereIntersectingFrustumPlanes)
      break;
    v303 += 30;
    v305 = v302;
    v302 -= 240;
  }
  while (v305);
  v306 = v249[6];
  if (v306 > v297)
  {
    *(_BYTE *)(v299 + v297) = isBoundingSphereIntersectingFrustumPlanes;
    v307 = (_QWORD *)v296;
    if (isBoundingSphereIntersectingFrustumPlanes)
      goto LABEL_271;
    goto LABEL_270;
  }
LABEL_301:
  v626[0].i64[0] = 0;
  memset(&v663, 0, 32);
  v662 = 0u;
  v661 = 0u;
  v660 = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v639.columns[0].i32[0] = 136315906;
  *(uint64_t *)((char *)v639.columns[0].i64 + 4) = (uint64_t)"operator[]";
  v639.columns[0].i16[6] = 1024;
  *(__int32 *)((char *)&v639.columns[0].i32[3] + 2) = 468;
  v639.columns[1].i16[1] = 2048;
  *(uint64_t *)((char *)v639.columns[1].i64 + 4) = v297;
  v639.columns[1].i16[6] = 2048;
  *(uint64_t *)((char *)&v639.columns[1].i64[1] + 6) = v306;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_302:
  v624 = 0;
  v640 = 0u;
  memset(&v639, 0, sizeof(v639));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v654 = 136315906;
  *(_QWORD *)&v654[4] = "operator[]";
  *(_WORD *)&v654[12] = 1024;
  *(_DWORD *)&v654[14] = 468;
  v655 = 2048;
  v656 = v296;
  v657 = 2048;
  v658 = v306;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_303:
  v283 = &v250[1].columns[3].u16[4];
  v326 = (uint64_t)&v250[1].columns[22 * v250[1].columns[2].i64[1] + 3].i64[1];
LABEL_306:
  v327 = v283 == (unsigned __int16 *)v326;
  if (v282)
    v327 = (_DWORD)v279 == (_DWORD)v280;
  if (!v327)
  {
    v44 = (uint64_t)&v639;
    v557 = v326;
    v600 = vdupq_n_s32(0x7F800000u);
    v567 = v282;
    v563 = v279;
    do
    {
      if (v282)
      {
        v334 = *((_QWORD *)v283 + 2) + 352 * v280;
        v335 = (unsigned __int16 *)(v334 + 4);
        v336 = v334 + 8;
      }
      else
      {
        v336 = (unint64_t)(v283 + 4);
        v335 = v283;
      }
      v575 = v280;
      v581 = v283;
      v337 = *v335;
      if (*(_QWORD *)(v336 + 208) || *(_QWORD *)(v336 + 264))
      {
        v604 = v336;
        v585 = *(_QWORD *)(a4 + 40);
        if (v585)
        {
          v338 = 0;
          v599 = *v335;
          do
          {
            v589 = v338;
            v339 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](a4, v338);
            v340 = *(_QWORD *)(v339 + 16);
            if (v340)
            {
              nn = *(_QWORD *)(v339 + 32);
              v341 = nn + 656 * v340;
              do
              {
                if (*(unsigned __int16 *)(nn + 424) == (_DWORD)v337)
                {
                  v659.columns[0] = (simd_float4)v600;
                  v342.i64[0] = 0x7F0000007FLL;
                  v342.i64[1] = 0x7F0000007FLL;
                  v659.columns[1] = v342;
                  k = *(_QWORD *)(nn + 24);
                  if (k)
                  {
                    *(_OWORD *)v652 = *(_OWORD *)k;
                    if (*(_QWORD *)(nn + 8))
                    {
                      v48 = 0;
                      v73 = k + 40;
                      v343.i64[0] = 0x7F0000007FLL;
                      v343.i64[1] = 0x7F0000007FLL;
                      v614 = (simd_float4)v600;
                      v622 = v343;
                      while (1)
                      {
                        v344 = re::DataArray<re::MeshInstance>::tryGet(a3 + 72, *(_QWORD *)(*(_QWORD *)nn + 8 * v48));
                        if (v344)
                        {
                          v345 = (float32x4_t *)v344;
                          if (re::DataArray<re::MeshModel>::tryGet(a3 + 8, *(_QWORD *)(v344 + 16)))
                          {
                            i4 = *(_QWORD *)(k + 24);
                            if (i4 <= v48)
                            {
                              *(_QWORD *)v654 = 0;
                              v640 = 0u;
                              memset(&v639, 0, sizeof(v639));
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              v626[0].i32[0] = 136315906;
                              *(uint64_t *)((char *)v626[0].i64 + 4) = (uint64_t)"operator[]";
                              v626[0].i16[6] = 1024;
                              *(__int32 *)((char *)&v626[0].i32[3] + 2) = 866;
                              v626[1].i16[1] = 2048;
                              *(uint64_t *)((char *)v626[1].i64 + 4) = v48;
                              v626[1].i16[6] = 2048;
                              *(uint64_t *)((char *)&v626[1].i64[1] + 6) = i4;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_456:
                              *(_QWORD *)v654 = 0;
                              v627 = 0u;
                              memset(v626, 0, sizeof(v626));
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              v659.columns[0].i32[0] = 136315906;
                              *(uint64_t *)((char *)v659.columns[0].i64 + 4) = (uint64_t)"operator[]";
                              v659.columns[0].i16[6] = 1024;
                              *(__int32 *)((char *)&v659.columns[0].i32[3] + 2) = 468;
                              v659.columns[1].i16[1] = 2048;
                              *(uint64_t *)((char *)v659.columns[1].i64 + 4) = k;
                              v659.columns[1].i16[6] = 2048;
                              *(uint64_t *)((char *)&v659.columns[1].i64[1] + 6) = v73;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_457:
                              *(_QWORD *)v652 = 0;
                              v627 = 0u;
                              memset(v626, 0, sizeof(v626));
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              v659.columns[0].i32[0] = 136315906;
                              *(uint64_t *)((char *)v659.columns[0].i64 + 4) = (uint64_t)"operator[]";
                              v659.columns[0].i16[6] = 1024;
                              *(__int32 *)((char *)&v659.columns[0].i32[3] + 2) = 468;
                              v659.columns[1].i16[1] = 2048;
                              *(uint64_t *)((char *)v659.columns[1].i64 + 4) = k;
                              v659.columns[1].i16[6] = 2048;
                              *(uint64_t *)((char *)&v659.columns[1].i64[1] + 6) = i4;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
                              goto LABEL_458;
                            }
                            v346 = k + 40;
                            if ((*(_BYTE *)(k + 32) & 1) == 0)
                              v346 = *(_QWORD *)(k + 48);
                            v347 = 0;
                            v348 = *(unsigned int *)(v346 + 4 * v48);
                            v349 = v345[3];
                            v350 = v345[4];
                            v351 = v345[5];
                            v352 = *(_QWORD *)((unint64_t)v652 & 0xFFFFFFFFFFFFFFF7 | (8 * (v348 & 1)));
                            v353 = *(float32x4_t *)(nn + 48);
                            v354 = *(float32x4_t *)(nn + 64);
                            v355 = *(float32x4_t *)(nn + 80);
                            v356 = *(float32x4_t *)(nn + 96);
                            v626[0] = v345[2];
                            v626[1] = v349;
                            v626[2] = v350;
                            v626[3] = v351;
                            do
                            {
                              v639.columns[v347] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v353, COERCE_FLOAT(*(_OWORD *)&v626[v347])), v354, *(float32x2_t *)v626[v347].f32, 1), v355, v626[v347], 2), v356, v626[v347], 3);
                              ++v347;
                            }
                            while (v347 != 4);
                            re::AABB::transform((float32x4_t *)(v352 + ((16 * v348) & 0xFFFFFFFE0)), (float32x4_t *)&v639, (uint64_t)v626);
                            v357 = (float32x4_t)v614;
                            v357.i32[3] = 0;
                            v358 = v626[0];
                            v359 = v626[1];
                            v358.i32[3] = 0;
                            v360 = vminnmq_f32(v357, v358);
                            v361 = v622;
                            v361.i32[3] = 0;
                            v359.i32[3] = 0;
                            v614 = (simd_float4)v360;
                            v622 = vmaxnmq_f32(v361, v359);
                          }
                        }
                        if (++v48 >= *(_QWORD *)(nn + 8))
                        {
                          v659.columns[0] = v614;
                          v659.columns[1] = (simd_float4)v622;
                          v250 = (simd_float4x4 *)v595;
                          v249 = v596;
                          LODWORD(v337) = v599;
                          break;
                        }
                      }
                    }
                  }
                  re::LightContextBuilder::buildLightContext((uint64_t)&v639, (uint64_t)v249, v604, v250[46].columns[2].i64[1], (uint64_t)&v659);
                  re::LightContexts::addPerMeshLightContext((uint64_t)&v660, v337, *(_QWORD *)(nn + 416), (__n128 *)&v639);
                  if (v643.i64[1] && (_QWORD)v644)
                  {
                    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v643.i64[1] + 40))(v643.i64[1], *((_QWORD *)&v644 + 1));
                    v644 = 0uLL;
                  }
                  if (v642.i64[0] && v642.i64[1])
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v642.i64[0] + 40))(v642.i64[0], v643.i64[0]);
                  if (v640.i64[1] && v641.i64[0])
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v640.i64[1] + 40))(v640.i64[1], v641.i64[1]);
                  if (v639.columns[3].i64[0] && v639.columns[3].i64[1])
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v639.columns[3].i64[0] + 40))(v639.columns[3].i64[0], v640.i64[0]);
                  if (v639.columns[1].i64[1] && v639.columns[2].i64[0])
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v639.columns[1].i64[1] + 40))(v639.columns[1].i64[1], v639.columns[2].i64[1]);
                  if (v639.columns[0].i64[0] && v639.columns[0].i64[1])
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v639.columns[0].i64[0] + 40))(v639.columns[0].i64[0], v639.columns[1].i64[0]);
                }
                nn += 656;
              }
              while (nn != v341);
            }
            v338 = v589 + 1;
          }
          while (v589 + 1 != v585);
        }
        if (a5)
        {
          v362 = *(_QWORD *)(a5 + 40);
          if (v362)
          {
            for (mm = 0; mm != v362; ++mm)
            {
              v364 = re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::operator[](a5, mm);
              v365 = *(_QWORD *)(v364 + 16);
              if (v365)
              {
                v366 = (float32x4_t *)(*(_QWORD *)(v364 + 32) + 416);
                v367 = 800 * v365;
                do
                {
                  if (v366->u16[4] == (_DWORD)v337)
                  {
                    v626[0] = v366[2];
                    v626[1] = v366[3];
                    re::LightContextBuilder::buildLightContext((uint64_t)&v639, (uint64_t)v596, v604, *(_QWORD *)(v595 + 2984), (uint64_t)v626);
                    re::LightContexts::addPerMeshLightContext((uint64_t)&v660, v337, v366->i64[0], (__n128 *)&v639);
                    if (v643.i64[1] && (_QWORD)v644)
                    {
                      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v643.i64[1] + 40))(v643.i64[1], *((_QWORD *)&v644 + 1));
                      v644 = 0uLL;
                    }
                    if (v642.i64[0] && v642.i64[1])
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v642.i64[0] + 40))(v642.i64[0], v643.i64[0]);
                    if (v640.i64[1] && v641.i64[0])
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v640.i64[1] + 40))(v640.i64[1], v641.i64[1]);
                    if (v639.columns[3].i64[0] && v639.columns[3].i64[1])
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v639.columns[3].i64[0] + 40))(v639.columns[3].i64[0], v640.i64[0]);
                    if (v639.columns[1].i64[1] && v639.columns[2].i64[0])
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v639.columns[1].i64[1] + 40))(v639.columns[1].i64[1], v639.columns[2].i64[1]);
                    if (v639.columns[0].i64[0] && v639.columns[0].i64[1])
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v639.columns[0].i64[0] + 40))(v639.columns[0].i64[0], v639.columns[1].i64[0]);
                  }
                  v366 += 50;
                  v367 -= 800;
                }
                while (v367);
              }
            }
          }
        }
        goto LABEL_445;
      }
      v659.columns[0] = (simd_float4)v600;
      v368.i64[0] = 0x7F0000007FLL;
      v368.i64[1] = 0x7F0000007FLL;
      v659.columns[1] = v368;
      re::LightContextBuilder::buildLightContext((uint64_t)&v639, (uint64_t)v249, v336, v250[46].columns[2].i64[1], (uint64_t)&v659);
      v369 = v646;
      v370 = v662.i32[2];
      re::BucketArray<re::LightContext,16ul>::add((uint64_t)&v660, (__n128 *)&v639);
      v668[16] |= v369;
      memset(&v626[0].u32[2], 0, 36);
      *(int32x2_t *)((char *)&v626[2].u64[1] + 4) = v10;
      v626[0].i32[0] = v370;
      v371 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v337) ^ ((0xBF58476D1CE4E5B9 * v337) >> 27));
      v372 = v371 ^ (v371 >> 31);
      if (v663.columns[0].i64[1])
      {
        v373 = v372 % v663.columns[2].u32[0];
        v374 = *(unsigned int *)(v663.columns[1].i64[0] + 4 * v373);
        if ((_DWORD)v374 != 0x7FFFFFFF)
        {
          while (*(unsigned __int16 *)(v663.columns[1].i64[1] + 72 * v374 + 12) != (_DWORD)v337)
          {
            LODWORD(v374) = *(_DWORD *)(v663.columns[1].i64[1] + 72 * v374 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v374 == 0x7FFFFFFF)
              goto LABEL_420;
          }
          goto LABEL_426;
        }
      }
      else
      {
        v373 = 0;
      }
LABEL_420:
      v375 = v663.columns[2].u32[3];
      if (v663.columns[2].i32[3] == 0x7FFFFFFF)
      {
        v375 = v663.columns[2].u32[2];
        v376 = v663.columns[2].i32[2];
        if (v663.columns[2].i32[2] == v663.columns[2].i32[0])
        {
          re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity((uint64_t)v570, 2 * v663.columns[2].i32[1]);
          v376 = v663.columns[2].i32[2];
          v373 = v372 % v663.columns[2].u32[0];
        }
        v663.columns[2].i32[2] = v376 + 1;
        v377 = v663.columns[1].i64[1];
        v378 = *(_DWORD *)(v663.columns[1].i64[1] + 72 * v375 + 8);
      }
      else
      {
        v377 = v663.columns[1].i64[1];
        v378 = *(_DWORD *)(v663.columns[1].i64[1] + 72 * v663.columns[2].u32[3] + 8);
        v663.columns[2].i32[3] = v378 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v377 + 72 * v375 + 8) = v378 | 0x80000000;
      *(_DWORD *)(v663.columns[1].i64[1] + 72 * v375 + 8) = *(_DWORD *)(v663.columns[1].i64[1] + 72 * v375 + 8) & 0x80000000 | *(_DWORD *)(v663.columns[1].i64[0] + 4 * v373);
      *(_QWORD *)(v663.columns[1].i64[1] + 72 * v375) = v372;
      *(_WORD *)(v663.columns[1].i64[1] + 72 * v375 + 12) = v337;
      v379 = v663.columns[1].i64[1] + 72 * v375;
      *(_DWORD *)(v379 + 16) = v370;
      re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(v379 + 24, (uint64_t)&v626[0].i64[1]);
      *(_DWORD *)(v663.columns[1].i64[0] + 4 * v373) = v375;
      ++v663.columns[2].i32[1];
      ++v663.columns[3].i32[0];
LABEL_426:
      v380.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(&v626[0].i64[1]);
      if (v643.i64[1])
      {
        if ((_QWORD)v644)
        {
          (*(void (**)(double))(*(_QWORD *)v643.i64[1] + 40))(v380.n128_f64[0]);
          v644 = 0uLL;
        }
        v643.i64[1] = 0;
      }
      if (v642.i64[0] && v642.i64[1])
        (*(void (**)(__n128))(*(_QWORD *)v642.i64[0] + 40))(v380);
      if (v640.i64[1] && v641.i64[0])
        (*(void (**)(__n128))(*(_QWORD *)v640.i64[1] + 40))(v380);
      if (v639.columns[3].i64[0] && v639.columns[3].i64[1])
        (*(void (**)(__n128))(*(_QWORD *)v639.columns[3].i64[0] + 40))(v380);
      if (v639.columns[1].i64[1] && v639.columns[2].i64[0])
        (*(void (**)(__n128))(*(_QWORD *)v639.columns[1].i64[1] + 40))(v380);
      if (v639.columns[0].i64[0] && v639.columns[0].i64[1])
        (*(void (**)(__n128))(*(_QWORD *)v639.columns[0].i64[0] + 40))(v380);
LABEL_445:
      v282 = v567;
      if (v567)
      {
        v283 = v581;
        v381 = v575 + 1;
        v250 = (simd_float4x4 *)v595;
        v249 = v596;
        v382 = v563;
        do
        {
          v280 = v381;
          if (v381 >= *((_DWORD *)v581 + 8))
            break;
          ++v381;
        }
        while ((*(_DWORD *)(*((_QWORD *)v581 + 2) + 352 * v280) & 0x80000000) == 0);
      }
      else
      {
        v283 = v581 + 176;
        v250 = (simd_float4x4 *)v595;
        v249 = v596;
        v382 = v563;
        v280 = v575;
      }
      v383 = v283 == (unsigned __int16 *)v557;
      if (v567)
        v383 = v382 == v280;
    }
    while (!v383);
  }
  i4 = (unint64_t)v667;
  nn = (unint64_t)v668;
  v44 = v552;
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=((_QWORD *)(v552 + 80), &v660);
  re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(v552 + 136, v570);
  re::FixedArray<float>::operator=((uint64_t *)(v552 + 184), &v663.columns[3].i64[1]);
  re::FixedArray<float>::operator=((uint64_t *)(v552 + 208), (uint64_t *)v665);
  re::FixedArray<float>::operator=((uint64_t *)(v552 + 232), (uint64_t *)&v665[24]);
  re::FixedArray<float>::operator=((uint64_t *)(v552 + 256), (uint64_t *)&v665[48]);
  re::FixedArray<float>::operator=((uint64_t *)(v552 + 280), (uint64_t *)&v665[72]);
  re::FixedArray<float>::operator=((uint64_t *)(v552 + 304), (uint64_t *)v667);
  *(_OWORD *)(v552 + 328) = *(_OWORD *)&v667[24];
  *(_BYTE *)(v552 + 344) = v667[40];
  *(_OWORD *)(v552 + 352) = *(_OWORD *)v668;
  *(_BYTE *)(v552 + 368) = v668[16];
  if (*(_QWORD *)v667)
  {
    if (*(_QWORD *)&v667[8])
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v667 + 40))(*(_QWORD *)v667, *(_QWORD *)&v667[16]);
      *(_QWORD *)&v667[8] = 0;
      *(_QWORD *)&v667[16] = 0;
    }
    *(_QWORD *)v667 = 0;
  }
  v73 = v595;
  v48 = (unint64_t)v596;
  if (*(_QWORD *)&v665[72])
  {
    if ((_QWORD)v666)
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v665[72] + 40))(*(_QWORD *)&v665[72], *((_QWORD *)&v666 + 1));
      v666 = 0uLL;
    }
    *(_QWORD *)&v665[72] = 0;
  }
  if (*(_QWORD *)&v665[48])
  {
    if (*(_QWORD *)&v665[56])
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v665[48] + 40))(*(_QWORD *)&v665[48], *(_QWORD *)&v665[64]);
      *(_QWORD *)&v665[56] = 0;
      *(_QWORD *)&v665[64] = 0;
    }
    *(_QWORD *)&v665[48] = 0;
  }
  if (*(_QWORD *)&v665[24])
  {
    if (*(_QWORD *)&v665[32])
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v665[24] + 40))(*(_QWORD *)&v665[24], *(_QWORD *)&v665[40]);
      *(_OWORD *)&v665[32] = 0uLL;
    }
    *(_QWORD *)&v665[24] = 0;
  }
  if (*(_QWORD *)v665)
  {
    if (*(_QWORD *)&v665[8])
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v665 + 40))(*(_QWORD *)v665, *(_QWORD *)&v665[16]);
      *(_QWORD *)&v665[8] = 0;
      *(_QWORD *)&v665[16] = 0;
    }
    *(_QWORD *)v665 = 0;
  }
  if (v663.columns[3].i64[1])
  {
    if (v664.i64[0])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v663.columns[3].i64[1] + 40))(v663.columns[3].i64[1], v664.i64[1]);
      v664 = 0uLL;
    }
    v663.columns[3].i64[1] = 0;
  }
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(v570);
  re::BucketArray<re::LightContext,16ul>::deinit((uint64_t)&v660);
  if (v660.i64[0] && (v661.i8[0] & 1) == 0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v660.i64[0] + 40))(v660.i64[0], v662.i64[0]);
  v626[2].i64[0] = 0;
  v626[1].i64[0] = 0;
  v626[1].i32[2] = 0;
  v626[0] = (float32x4_t)(unint64_t)v596;
  re::DynamicArray<re::ShadowView>::setCapacity(v626, 0);
  ++v626[1].i32[2];
  v330 = *(_DWORD *)(v595 + 2964);
  if (!v330)
    goto LABEL_459;
  v331 = (unsigned __int16 *)(v595 + 2936);
  v328 = *(unsigned int *)(v595 + 2968);
  if (!(_DWORD)v328)
  {
LABEL_461:
    v329 = 0;
    goto LABEL_462;
  }
  v332 = 0;
  v333 = *(_DWORD **)(v595 + 2952);
  while ((*v333 & 0x80000000) == 0)
  {
    v333 += 88;
    if (v328 == ++v332)
    {
      LODWORD(v332) = *(_DWORD *)(v595 + 2968);
      break;
    }
  }
  v329 = v332;
LABEL_462:
  v384 = (uint64_t)v331;
LABEL_463:
  v385 = v331 == (unsigned __int16 *)v384;
  if (v330)
    v385 = (_DWORD)v328 == (_DWORD)v329;
  if (!v385)
  {
    v568 = v330;
    v560 = v384;
    v564 = v328;
    while (1)
    {
      v572 = v329;
      v576 = v331;
      if (v330)
      {
        v393 = *((_QWORD *)v331 + 2) + 352 * v329;
        v394 = (unsigned __int16 *)(v393 + 4);
        v395 = (_QWORD *)(v393 + 8);
      }
      else
      {
        v395 = v331 + 4;
        v394 = v331;
      }
      v623 = *v394;
      v615 = v395;
      v396 = v395[12];
      if (v396)
      {
        v397 = 0;
        v73 = (unint64_t)(v395 + 7);
        do
        {
          v398 = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](v73, v397);
          v399 = *(_QWORD *)(v398 + 16);
          if (v399)
          {
            i4 = v398;
            i5 = 0;
            i2 = 0;
            for (nn = 0; nn < v399; ++nn)
            {
              v48 = *(_QWORD *)(i4 + 32);
              v402 = v48 + i2;
              if (*(_BYTE *)(v48 + i2 + 134))
              {
                v403 = *(_QWORD *)(i4 + 72);
                if (v403 <= nn)
                  goto LABEL_677;
                v404 = re::DataArray<re::TextureAtlasTile>::get(*(_QWORD *)(v595 + 2984) + 8, *(_QWORD *)(*(_QWORD *)(i4 + 80) + 8 * nn));
                v403 = *(_QWORD *)(i4 + 48);
                if (v403 <= nn)
                  goto LABEL_678;
                v405 = (float32x4_t *)(*(_QWORD *)(i4 + 56) + i5);
                v406 = (simd_float4)v405[2];
                v408 = *v405;
                v407 = (simd_float4)v405[1];
                v663.columns[0] = (simd_float4)v405[3];
                v662 = v406;
                v660 = (simd_float4)v408;
                v661 = v407;
                v409 = *(unsigned __int8 *)(v48 + i2 + 135);
                v654[0] = *(_BYTE *)(v48 + i2 + 132);
                if (v654[0])
                  v654[1] = *(_BYTE *)(v48 + i2 + 133);
                re::LightContextBuilder::buildShadowViews(re::PerFrameAllocator *,re::LightContexts &)const::$_0::operator()(v596, v48 + i2, v404, (uint64_t)&v660, v409 != 0, v623, v654, (_anonymous_namespace_ *)v626);
                v399 = *(_QWORD *)(i4 + 16);
              }
              i2 += 144;
              i5 += 64;
            }
          }
          ++v397;
        }
        while (v397 != v396);
      }
      v402 = (unint64_t)v615;
      v410 = v615[19];
      if (v410)
        break;
LABEL_502:
      v419 = v615[26];
      v403 = (unint64_t)&v639;
      if (v419)
      {
        for (i1 = 0; i1 != v419; ++i1)
        {
          v421 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[]((uint64_t)(v615 + 21), i1);
          v422 = *(_QWORD *)(v421 + 16);
          if (v422)
          {
            i4 = v421;
            i5 = 0;
            for (nn = 0; nn < v422; ++nn)
            {
              v423 = *(_QWORD *)(i4 + 32);
              if (*(_BYTE *)(v423 + i5 + 224))
              {
                i2 = *(_QWORD *)(i4 + 48);
                if (i2 <= nn)
                  goto LABEL_683;
                if (*(_BYTE *)(*(_QWORD *)(i4 + 56) + nn))
                {
                  i2 = *(_QWORD *)(i4 + 104);
                  if (i2 <= nn)
                    goto LABEL_684;
                  v424 = re::DataArray<re::TextureAtlasTile>::get(*(_QWORD *)(v595 + 2984) + 8, *(_QWORD *)(*(_QWORD *)(i4 + 112) + 8 * nn));
                  v425 = v423 + i5;
                  v625[0] = *(_BYTE *)(v423 + i5 + 220);
                  if (v625[0])
                    v625[1] = *(_BYTE *)(v425 + 221);
                  re::LightContextBuilder::buildShadowViews(re::PerFrameAllocator *,re::LightContexts &)const::$_0::operator()(v596, v423 + i5, v424, v425 + 128, 0, v623, v625, (_anonymous_namespace_ *)v626);
                  v422 = *(_QWORD *)(i4 + 16);
                }
              }
              i5 += 240;
            }
          }
        }
      }
      v73 = v595;
      v48 = (unint64_t)v596;
      v582 = v615[33];
      if (!v582)
        goto LABEL_558;
      v426 = 0;
      v586 = (uint64_t)(v615 + 28);
      i4 = 224;
      do
      {
        v590 = v426;
        v427 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v586, v426);
        v428 = *(_QWORD *)(v427 + 16);
        if (!v428)
          goto LABEL_557;
        v402 = v427;
        v429 = 0;
        for (i2 = 0; i2 < v428; ++i2)
        {
          v430 = *(_QWORD *)(v402 + 32);
          i5 = v430 + 224 * i2;
          if (!*(_BYTE *)(i5 + 215))
            goto LABEL_556;
          nn = *(_QWORD *)(v402 + 48);
          if (nn <= i2)
            goto LABEL_685;
          if (!*(_BYTE *)(*(_QWORD *)(v402 + 56) + i2))
            goto LABEL_556;
          v593 = v429;
          for (i3 = 0; i3 != 144; i3 += 24)
          {
            v432 = (char *)&v639 + i3;
            *(_QWORD *)v432 = 0;
            *((_QWORD *)v432 + 1) = 0;
            *((_DWORD *)v432 + 4) = 0;
            *((_WORD *)v432 + 10) = -1;
          }
          v433 = 0;
          v48 = v429;
          do
          {
            nn = *(_QWORD *)(v402 + 104);
            if (nn <= i2)
            {
              *(_QWORD *)v652 = 0;
              memset(&v663, 0, 32);
              v662 = 0u;
              v661 = 0u;
              v660 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v659.columns[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v659.columns[0].i64 + 4) = (uint64_t)"operator[]";
              v659.columns[0].i16[6] = 1024;
              *(__int32 *)((char *)&v659.columns[0].i32[3] + 2) = 476;
              v659.columns[1].i16[1] = 2048;
              *(uint64_t *)((char *)v659.columns[1].i64 + 4) = i2;
              v659.columns[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v659.columns[1].i64[1] + 6) = nn;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_673:
              v659.columns[0].i64[0] = 0;
              memset(&v663, 0, 32);
              v662 = 0u;
              v661 = 0u;
              v660 = 0u;
              v439 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v626[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v626[0].i64 + 4) = (uint64_t)"operator[]";
              v626[0].i16[6] = 1024;
              *(__int32 *)((char *)&v626[0].i32[3] + 2) = 476;
              v626[1].i16[1] = 2048;
              *(uint64_t *)((char *)v626[1].i64 + 4) = v402;
              v626[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v626[1].i64[1] + 6) = v48;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_674:
              re::internal::assertLog((re::internal *)6, v441, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v439, v615);
              _os_crash();
              __break(1u);
LABEL_675:
              v659.columns[0].i64[0] = 0;
              memset(&v663, 0, 32);
              v662 = 0u;
              v661 = 0u;
              v660 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v626[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v626[0].i64 + 4) = (uint64_t)"operator[]";
              v626[0].i16[6] = 1024;
              *(__int32 *)((char *)&v626[0].i32[3] + 2) = 476;
              v626[1].i16[1] = 2048;
              *(uint64_t *)((char *)v626[1].i64 + 4) = v403;
              v626[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v626[1].i64[1] + 6) = v73;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_676;
            }
            v434 = re::DataArray<re::TextureAtlasTile>::get(*(_QWORD *)(v73 + 2984) + 8, *(_QWORD *)(*(_QWORD *)(v402 + 112) + v48));
            v435 = (char *)&v639 + v433;
            *(_OWORD *)v435 = *(_OWORD *)v434;
            *(_QWORD *)(v435 + 14) = *(_QWORD *)(v434 + 14);
            v433 += 24;
            v48 += 8;
          }
          while (v433 != 144);
          v436 = v430 + 224 * i2;
          nn = *(unsigned __int8 *)(v436 + 212);
          if (*(_BYTE *)(v436 + 212))
            v600.i8[0] = *(_BYTE *)(v430 + 224 * i2 + 213);
          PointLightFaceLookatOrientations = (unint64_t)re::getPointLightFaceLookatOrientations((re *)v434);
          v73 = PointLightFaceLookatOrientations;
          v615 = v438;
          v439 = 0;
          v403 = i5 + 9;
          v440 = v430 + 224 * i2 + 128;
          i4 = (unint64_t)&v639;
          do
          {
            if (*(__int16 *)(i4 + 20) == -1)
            {
              v452 = *re::graphicsLogObjects((re *)PointLightFaceLookatOrientations);
              PointLightFaceLookatOrientations = os_log_type_enabled(v452, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)PointLightFaceLookatOrientations)
              {
                if ((*(_QWORD *)(i5 + 8) & 1) != 0)
                  v453 = *(_QWORD *)(i5 + 16);
                else
                  v453 = i5 + 9;
                v660.i32[0] = 136315138;
                *(uint64_t *)((char *)v660.i64 + 4) = v453;
                _os_log_impl(&dword_224FE9000, v452, OS_LOG_TYPE_DEFAULT, "Failed to allocate shadow map face for point light %s: not enough free space in shadow map atlas.", (uint8_t *)&v660, 0xCu);
              }
            }
            else
            {
              v48 = (unint64_t)v596;
              re::ShadowView::ShadowView((re::ShadowView *)&v660, v596);
              if ((unint64_t)v615 <= v439)
                goto LABEL_674;
              v442 = *(_QWORD *)(v73 + 16 * v439);
              v443 = *(_QWORD *)(v73 + 16 * v439 + 8);
              v662 = *(simd_float4 *)(i5 + 80);
              v663.columns[0].i64[0] = v442;
              v663.columns[0].i64[1] = v443;
              if ((*(_QWORD *)(i5 + 8) & 1) != 0)
                v444 = *(_QWORD *)(i5 + 16);
              else
                v444 = i5 + 9;
              re::DynamicString::format(v596, (re::Allocator *)"%s_face%u", (re::DynamicString *)&v659, v444, v439);
              re::DynamicString::operator=((re::DynamicString *)&v660, (re::DynamicString *)&v659);
              if (v659.columns[0].i64[0] && (v659.columns[0].i8[8] & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v659.columns[0].i64[0] + 40))();
              v445 = atan2f((float)*(unsigned int *)i4, (float)(*(_DWORD *)i4 - 3));
              v446 = v445 + v445;
              re::Projection::setFromMatrix4x4F((uint64_t)&v663.columns[1], v440);
              v447 = v663.columns[1].f32[1];
              v448 = (float)(v663.columns[2].f32[0] - v663.columns[1].f32[3])
                   / (float)(v663.columns[2].f32[1] - v663.columns[2].f32[2]);
              v449 = (float)(v663.columns[2].f32[0] + v663.columns[1].f32[3]) * 0.5;
              v450 = (float)(v663.columns[2].f32[1] + v663.columns[2].f32[2]) * 0.5;
              v451 = v447 * tanf(v446 * 0.5);
              v663.columns[2].f32[1] = v450 + v451;
              v663.columns[2].f32[2] = v450 - v451;
              v663.columns[2].f32[0] = v449 + (float)(v448 * v451);
              v663.columns[1].f32[3] = v449 - (float)(v448 * v451);
              HIDWORD(v671[0]) = v623;
              if (LOBYTE(v671[0]) | nn)
              {
                if ((_DWORD)nn || !LOBYTE(v671[0]))
                {
                  if ((_DWORD)nn && !LOBYTE(v671[0]))
                    LOBYTE(v671[0]) = 1;
                  BYTE1(v671[0]) = v600.i8[0];
                }
                else
                {
                  LOBYTE(v671[0]) = 0;
                }
              }
              *(_OWORD *)v665 = *(_OWORD *)i4;
              *(_QWORD *)&v665[14] = *(_QWORD *)(i4 + 14);
              re::DynamicArray<re::ShadowView>::add((_anonymous_namespace_ *)v626, (uint64_t)&v660);
              PointLightFaceLookatOrientations = v660.i64[0];
              if (v660.i64[0] && (v660.i8[8] & 1) != 0)
                PointLightFaceLookatOrientations = (*(uint64_t (**)(void))(*(_QWORD *)v660.i64[0] + 40))();
            }
            i4 += 24;
            ++v439;
          }
          while (v439 != 6);
          v428 = *(_QWORD *)(v402 + 16);
          v73 = v595;
          v48 = (unint64_t)v596;
          i4 = 224;
          v403 = (unint64_t)&v639;
          v429 = v593;
LABEL_556:
          v429 += 48;
        }
LABEL_557:
        v426 = v590 + 1;
      }
      while (v590 + 1 != v582);
LABEL_558:
      v330 = v568;
      if (v568)
      {
        v331 = v576;
        v454 = v572 + 1;
        v44 = v552;
        v456 = (unsigned __int16 *)v560;
        v455 = v564;
        do
        {
          v329 = v454;
          if (v454 >= *((_DWORD *)v576 + 8))
            break;
          ++v454;
        }
        while ((*(_DWORD *)(*((_QWORD *)v576 + 2) + 352 * v329) & 0x80000000) == 0);
      }
      else
      {
        v329 = v572;
        v331 = v576 + 176;
        v44 = v552;
        v456 = (unsigned __int16 *)v560;
        v455 = v564;
      }
      v457 = v331 == v456;
      if (v568)
        v457 = v455 == (_DWORD)v329;
      if (v457)
        goto LABEL_466;
    }
    v411 = 0;
    v73 = (unint64_t)(v615 + 14);
    while (1)
    {
      v412 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[]((uint64_t)(v615 + 14), v411);
      v413 = *(_QWORD *)(v412 + 16);
      if (v413)
        break;
LABEL_501:
      if (++v411 == v410)
        goto LABEL_502;
    }
    i4 = v412;
    i5 = 0;
    i2 = 0;
    nn = 0;
    while (1)
    {
      v403 = *(_QWORD *)(i4 + 48);
      if (v403 <= nn)
        break;
      if (*(_BYTE *)(*(_QWORD *)(i4 + 56) + nn))
      {
        v403 = *(_QWORD *)(i4 + 104);
        if (v403 <= nn)
          goto LABEL_681;
        v48 = *(_QWORD *)(i4 + 32);
        v414 = re::DataArray<re::TextureAtlasTile>::get(*(_QWORD *)(v595 + 2984) + 8, *(_QWORD *)(*(_QWORD *)(i4 + 112) + 8 * nn));
        v403 = *(_QWORD *)(i4 + 80);
        if (v403 <= nn)
          goto LABEL_682;
        v415 = (float32x4_t *)(*(_QWORD *)(i4 + 88) + i5);
        v416 = (simd_float4)v415[2];
        v418 = *v415;
        v417 = (simd_float4)v415[1];
        v663.columns[0] = (simd_float4)v415[3];
        v662 = v416;
        v660 = (simd_float4)v418;
        v661 = v417;
        LOBYTE(v624) = *(_BYTE *)(v48 + i2 + 132);
        if ((_BYTE)v624)
          BYTE1(v624) = *(_BYTE *)(v48 + i2 + 133);
        re::LightContextBuilder::buildShadowViews(re::PerFrameAllocator *,re::LightContexts &)const::$_0::operator()(v596, v48 + i2, v414, (uint64_t)&v660, 0, v623, &v624, (_anonymous_namespace_ *)v626);
        v413 = *(_QWORD *)(i4 + 16);
      }
      ++nn;
      i2 += 144;
      i5 += 64;
      if (nn >= v413)
        goto LABEL_501;
    }
LABEL_676:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v639.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v639.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v639.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v639.columns[0].i32[3] + 2) = 476;
    v639.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v639.columns[1].i64 + 4) = nn;
    v639.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v639.columns[1].i64[1] + 6) = v403;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_677:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v639.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v639.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v639.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v639.columns[0].i32[3] + 2) = 476;
    v639.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v639.columns[1].i64 + 4) = nn;
    v639.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v639.columns[1].i64[1] + 6) = v403;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_678:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v639.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v639.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v639.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v639.columns[0].i32[3] + 2) = 476;
    v639.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v639.columns[1].i64 + 4) = nn;
    v639.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v639.columns[1].i64[1] + 6) = v403;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_679:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v626[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v626[0].i64 + 4) = (uint64_t)"operator[]";
    v626[0].i16[6] = 1024;
    *(__int32 *)((char *)&v626[0].i32[3] + 2) = 476;
    v626[1].i16[1] = 2048;
    *(uint64_t *)((char *)v626[1].i64 + 4) = v402;
    v626[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v626[1].i64[1] + 6) = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_680:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v626[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v626[0].i64 + 4) = (uint64_t)"operator[]";
    v626[0].i16[6] = 1024;
    *(__int32 *)((char *)&v626[0].i32[3] + 2) = 476;
    v626[1].i16[1] = 2048;
    *(uint64_t *)((char *)v626[1].i64 + 4) = v403;
    v626[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v626[1].i64[1] + 6) = v73;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_681:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v639.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v639.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v639.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v639.columns[0].i32[3] + 2) = 476;
    v639.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v639.columns[1].i64 + 4) = nn;
    v639.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v639.columns[1].i64[1] + 6) = v403;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_682:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v639.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v639.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v639.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v639.columns[0].i32[3] + 2) = 476;
    v639.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v639.columns[1].i64 + 4) = nn;
    v639.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v639.columns[1].i64[1] + 6) = v403;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_683:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v639.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v639.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v639.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v639.columns[0].i32[3] + 2) = 476;
    v639.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v639.columns[1].i64 + 4) = nn;
    v639.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v639.columns[1].i64[1] + 6) = i2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_684:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v639.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v639.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v639.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v639.columns[0].i32[3] + 2) = 476;
    v639.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v639.columns[1].i64 + 4) = nn;
    v639.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v639.columns[1].i64[1] + 6) = i2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_685:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v639.columns[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v639.columns[0].i64 + 4) = (uint64_t)"operator[]";
    v639.columns[0].i16[6] = 1024;
    *(__int32 *)((char *)&v639.columns[0].i32[3] + 2) = 476;
    v639.columns[1].i16[1] = 2048;
    *(uint64_t *)((char *)v639.columns[1].i64 + 4) = i2;
    v639.columns[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v639.columns[1].i64[1] + 6) = nn;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_686:
    re::internal::assertLog((re::internal *)6, v386, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, i5, v462);
    _os_crash();
    __break(1u);
LABEL_687:
    v659.columns[0].i64[0] = 0;
    memset(&v663, 0, 32);
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v626[0].i32[0] = 136315906;
    *(uint64_t *)((char *)v626[0].i64 + 4) = (uint64_t)"operator[]";
    v626[0].i16[6] = 1024;
    *(__int32 *)((char *)&v626[0].i32[3] + 2) = 866;
    v626[1].i16[1] = 2048;
    *(uint64_t *)((char *)v626[1].i64 + 4) = nn;
    v626[1].i16[6] = 2048;
    *(uint64_t *)((char *)&v626[1].i64[1] + 6) = i4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_688:
    re::internal::assertLog((re::internal *)4, v57, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    _os_crash();
    __break(1u);
  }
LABEL_466:
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v44, (uint64_t)v626);
  re::DynamicArray<re::ShadowView>::deinit((uint64_t)v626);
  v639.columns[2].i64[0] = 0;
  v639.columns[1].i64[0] = 0;
  v639.columns[1].i32[2] = 0;
  v639.columns[0] = (simd_float4)v48;
  re::DynamicArray<re::FilterView>::setCapacity(&v639, 0);
  ++v639.columns[1].i32[2];
  v389 = *(_DWORD *)(v73 + 2964);
  if (v389)
  {
    v390 = v73 + 2936;
    v387 = *(unsigned int *)(v73 + 2968);
    if ((_DWORD)v387)
    {
      v391 = 0;
      v392 = *(_DWORD **)(v73 + 2952);
      while ((*v392 & 0x80000000) == 0)
      {
        v392 += 88;
        if (v387 == ++v391)
        {
          LODWORD(v391) = *(_DWORD *)(v73 + 2968);
          break;
        }
      }
      v388 = v391;
    }
    else
    {
      v388 = 0;
    }
    v458 = v73 + 2936;
  }
  else
  {
    v390 = v73 + 120;
    v458 = v73 + 120 + 352 * *(_QWORD *)(v73 + 104);
  }
  v459 = v390 == v458;
  if (v389)
    v459 = (_DWORD)v387 == (_DWORD)v388;
  if (!v459)
  {
    v615 = v671;
    v577 = *(_DWORD *)(v73 + 2964);
    v569 = v458;
    v573 = v387;
    do
    {
      v583 = v388;
      v587 = v390;
      if (v389)
        i5 = *(_QWORD *)(v390 + 16) + 352 * v388 + 8;
      else
        i5 = v390 + 8;
      v468 = *(_QWORD *)(i5 + 208);
      if (v468)
      {
        for (i4 = 0; i4 != v468; ++i4)
        {
          v469 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](i5 + 168, i4);
          v470 = *(_QWORD *)(v469 + 16);
          if (v470)
          {
            i2 = v469;
            v402 = 0;
            nn = 128;
            do
            {
              v471 = *(_QWORD *)(i2 + 32);
              v403 = v471 + nn;
              if (*(_BYTE *)(v471 + nn + 95))
              {
                v48 = *(_QWORD *)(i2 + 48);
                if (v48 <= v402)
                  goto LABEL_673;
                if (*(_BYTE *)(*(_QWORD *)(i2 + 56) + v402))
                {
                  v48 = *(_QWORD *)(i2 + 80);
                  if (v48 <= v402)
                    goto LABEL_679;
                  v472 = (__int16 *)re::DataArray<re::TextureAtlasTile>::get(*(_QWORD *)(v73 + 2984) + 104, *(_QWORD *)(*(_QWORD *)(i2 + 88) + 8 * v402));
                  if (v472[10] == -1)
                  {
                    v509 = *re::graphicsLogObjects((re *)v472);
                    if (os_log_type_enabled(v509, OS_LOG_TYPE_DEFAULT))
                    {
                      v510 = v471 + nn - 119;
                      if ((*(_QWORD *)(v471 + nn - 120) & 1) != 0)
                        v510 = *(_QWORD *)(v471 + nn - 112);
                      v660.i32[0] = 136315138;
                      *(uint64_t *)((char *)v660.i64 + 4) = v510;
                      _os_log_impl(&dword_224FE9000, v509, OS_LOG_TYPE_DEFAULT, "Failed to allocate filter map for light %s: not enough free space in filter map atlas.", (uint8_t *)&v660, 0xCu);
                    }
                  }
                  else
                  {
                    v473 = v472;
                    v474 = v471 + nn;
                    v475 = *(_QWORD *)(v471 + nn + 64);
                    re::FilterView::FilterView((uint64_t)&v660, (uint64_t)v596);
                    v672 = v475;
                    re::DynamicString::operator=((re::DynamicString *)&v660, (re::DynamicString *)(v403 - 128));
                    v476 = *(_OWORD *)v473;
                    *(_QWORD *)&v665[14] = *(_QWORD *)(v473 + 7);
                    *(_OWORD *)v665 = v476;
                    v478 = *(float *)(v474 - 96);
                    v477 = *(float *)(v474 - 92);
                    v479 = *(float *)(v474 - 88);
                    v480 = *(float *)(v474 - 80);
                    v481 = *(float *)(v474 - 76);
                    v482 = *(float *)(v474 - 72);
                    v483 = *(float *)(v474 - 64);
                    v484 = *(float *)(v474 - 60);
                    v485 = *(float *)(v474 - 56);
                    v486 = (float)(v478 + v481) + v485;
                    if (v486 >= 0.0)
                    {
                      v511 = sqrtf(v486 + 1.0);
                      v512 = v511 + v511;
                      v513 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v511 + v511));
                      v514 = vmul_f32(v513, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v511 + v511), v513));
                      v515 = vmul_f32(v514, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v511 + v511), v514)).f32[0];
                      v520.f32[0] = (float)(v482 - v484) * v515;
                      v521 = (float)(v483 - v479) * v515;
                      v522 = (float)(v477 - v480) * v515;
                      v523 = v512 * 0.25;
                    }
                    else if (v478 < v481 || v478 < v485)
                    {
                      v488 = 1.0 - v478;
                      v489 = v481 < v485;
                      v490 = v481 < v485;
                      v491 = sqrtf((float)(v488 - v481) + v485);
                      *(float *)&v492 = v491 + v491;
                      v493 = vrecpe_f32((float32x2_t)v492);
                      v494 = vmul_f32(v493, vrecps_f32((float32x2_t)v492, v493));
                      v495 = vmul_f32(v494, vrecps_f32((float32x2_t)v492, v494)).f32[0];
                      v496 = (float)(v479 + v483) * v495;
                      v497 = v482 + v484;
                      v498 = v497 * v495;
                      v499 = *(float *)&v492 * 0.25;
                      v500 = (float)(v477 - v480) * v495;
                      v501 = sqrtf(v481 + (float)(v488 - v485));
                      *(float *)&v502 = v501 + v501;
                      v503 = vrecpe_f32((float32x2_t)v502);
                      v504 = vmul_f32(v503, vrecps_f32((float32x2_t)v502, v503));
                      v505 = vmul_f32(v504, vrecps_f32((float32x2_t)v502, v504)).f32[0];
                      v506 = (float)(v477 + v480) * v505;
                      v507 = *(float *)&v502 * 0.25;
                      v508 = v497 * v505;
                      v523 = (float)(v483 - v479) * v505;
                      if (v489)
                        v520.f32[0] = v496;
                      else
                        v520.f32[0] = v506;
                      if (v490)
                        v521 = v498;
                      else
                        v521 = v507;
                      if (v490)
                        v522 = v499;
                      else
                        v522 = v508;
                      if (v490)
                        v523 = v500;
                    }
                    else
                    {
                      v516 = sqrtf(v478 + (float)((float)(1.0 - v481) - v485));
                      *(float *)&v517 = v516 + v516;
                      v518 = vrecpe_f32((float32x2_t)v517);
                      v519 = vmul_f32(v518, vrecps_f32((float32x2_t)v517, v518));
                      v519.f32[0] = vmul_f32(v519, vrecps_f32((float32x2_t)v517, v519)).f32[0];
                      v520.f32[0] = *(float *)&v517 * 0.25;
                      v521 = (float)(v477 + v480) * v519.f32[0];
                      v522 = (float)(v479 + v483) * v519.f32[0];
                      v523 = (float)(v482 - v484) * v519.f32[0];
                    }
                    v520.f32[1] = v521;
                    v520.i64[1] = __PAIR64__(LODWORD(v523), LODWORD(v522));
                    v662 = *(simd_float4 *)(v474 - 48);
                    v663.columns[0] = v520;
                    re::Projection::setFromMatrix4x4F((uint64_t)&v663.columns[1], v474);
                    *(int32x2_t *)&v665[12] = vadd_s32(*(int32x2_t *)&v665[12], (int32x2_t)0x300000003);
                    *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)v665, (int32x2_t)0x500000005);
                    re::DynamicArray<re::FilterView>::add((uint64_t)&v639, (uint64_t)&v660);
                    re::DynamicArray<re::MeshScene>::deinit((uint64_t)v671);
                    if (v660.i64[0] && (v660.i8[8] & 1) != 0)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v660.i64[0] + 40))(v660.i64[0], v661.i64[0]);
                  }
                  v470 = *(_QWORD *)(i2 + 16);
                  v73 = v595;
                }
              }
              ++v402;
              nn += 240;
            }
            while (v402 < v470);
          }
        }
      }
      v594 = *(_QWORD *)(i5 + 264);
      if (v594)
      {
        i2 = 0;
        v591 = i5 + 224;
        do
        {
          v524 = re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](v591, i2);
          v525 = *(_QWORD *)(v524 + 16);
          if (v525)
          {
            v402 = v524;
            v403 = 0;
            i4 = 128;
            do
            {
              nn = *(_QWORD *)(v402 + 32);
              v48 = nn + i4;
              if (*(_BYTE *)(nn + i4 + 86))
              {
                v73 = *(_QWORD *)(v402 + 48);
                if (v73 <= v403)
                  goto LABEL_675;
                if (*(_BYTE *)(*(_QWORD *)(v402 + 56) + v403))
                {
                  v73 = *(_QWORD *)(v402 + 80);
                  if (v73 <= v403)
                    goto LABEL_680;
                  v526 = re::DataArray<re::TextureAtlasTile>::get(*(_QWORD *)(v595 + 2984) + 104, *(_QWORD *)(*(_QWORD *)(v402 + 88) + 8 * v403));
                  v527 = *(_DWORD *)v526;
                  *(_OWORD *)v654 = *(_OWORD *)(v526 + 4);
                  v528 = *(unsigned __int16 *)(v526 + 20);
                  i5 = *(_QWORD *)(nn + i4 + 64);
                  v529 = re::getPointLightFaceLookatOrientations((re *)v526);
                  if (v528 == 0xFFFF)
                  {
                    v539 = *re::graphicsLogObjects((re *)v529);
                    if (os_log_type_enabled(v539, OS_LOG_TYPE_DEFAULT))
                    {
                      v540 = nn + i4 - 119;
                      if ((*(_QWORD *)(nn + i4 - 120) & 1) != 0)
                        v540 = *(_QWORD *)(nn + i4 - 112);
                      v660.i32[0] = 136315138;
                      *(uint64_t *)((char *)v660.i64 + 4) = v540;
                      _os_log_impl(&dword_224FE9000, v539, OS_LOG_TYPE_DEFAULT, "Failed to allocate filter map face for point light %s: not enough free space in filter map atlas.", (uint8_t *)&v660, 0xCu);
                    }
                  }
                  else
                  {
                    re::FilterView::FilterView((uint64_t)&v660, (uint64_t)v596);
                    v672 = i5;
                    v662 = *(simd_float4 *)(nn + i4 - 48);
                    v663.columns[0].i64[1] = 0x3F80000000000000;
                    v663.columns[0].i64[0] = 0;
                    re::DynamicString::format((re::DynamicString *)"_face%u", (re::DynamicString *)&v659, 0);
                    re::DynamicString::operator+((re::DynamicString *)(v48 - 128), (uint64_t)&v659, (re::DynamicString *)v626);
                    if ((v626[0].i8[8] & 1) != 0)
                      v530 = (const char *)v626[1].i64[0];
                    else
                      v530 = &v626[0].i8[9];
                    v531 = strlen(v530);
                    *(_QWORD *)v652 = v530;
                    *(_QWORD *)&v652[8] = v531;
                    re::DynamicString::operator=((re::DynamicString *)&v660, (uint64_t)v652);
                    if (v626[0].i64[0])
                    {
                      if ((v626[0].i8[8] & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v626[0].i64[0] + 40))();
                      memset(v626, 0, 32);
                    }
                    if (v659.columns[0].i64[0] && (v659.columns[0].i8[8] & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v659.columns[0].i64[0] + 40))();
                    v532 = atan2f((float)v527, (float)(v527 - 3));
                    v533 = v532 + v532;
                    re::Projection::setFromMatrix4x4F((uint64_t)&v663.columns[1], nn + i4);
                    v534 = v663.columns[1].f32[1];
                    v535 = (float)(v663.columns[2].f32[0] - v663.columns[1].f32[3])
                         / (float)(v663.columns[2].f32[1] - v663.columns[2].f32[2]);
                    v536 = (float)(v663.columns[2].f32[0] + v663.columns[1].f32[3]) * 0.5;
                    v537 = (float)(v663.columns[2].f32[1] + v663.columns[2].f32[2]) * 0.5;
                    v538 = v534 * tanf(v533 * 0.5);
                    v663.columns[2].f32[1] = v537 + v538;
                    v663.columns[2].f32[2] = v537 - v538;
                    v663.columns[2].f32[0] = v536 + (float)(v535 * v538);
                    v663.columns[1].f32[3] = v536 - (float)(v535 * v538);
                    *(_DWORD *)v665 = v527;
                    *(_OWORD *)&v665[4] = *(_OWORD *)v654;
                    *(_WORD *)&v665[20] = v528;
                    re::DynamicArray<re::FilterView>::add((uint64_t)&v639, (uint64_t)&v660);
                    re::DynamicArray<re::MeshScene>::deinit((uint64_t)v671);
                    if (v660.i64[0] && (v660.i8[8] & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v660.i64[0] + 40))();
                  }
                  v525 = *(_QWORD *)(v402 + 16);
                }
              }
              ++v403;
              i4 += 224;
            }
            while (v403 < v525);
          }
          ++i2;
        }
        while (i2 != v594);
      }
      v389 = v577;
      if (v577)
      {
        v390 = v587;
        v541 = v583 + 1;
        v73 = v595;
        v542 = v573;
        do
        {
          v388 = v541;
          if (v541 >= *(_DWORD *)(v587 + 32))
            break;
          ++v541;
        }
        while ((*(_DWORD *)(*(_QWORD *)(v587 + 16) + 352 * v388) & 0x80000000) == 0);
      }
      else
      {
        v388 = v583;
        v390 = v587 + 352;
        v73 = v595;
        v542 = v573;
      }
      v543 = v390 == v569;
      if (v577)
        v543 = v542 == (_DWORD)v388;
    }
    while (!v543);
  }
  v460 = a10;
  v461 = *(_QWORD *)(a10 + 40);
  if (v461)
  {
    for (i5 = 0; i5 != v461; ++i5)
    {
      v462 = *(_QWORD *)(v460 + 40);
      if (v462 <= i5)
        goto LABEL_686;
      nn = i5 >> 2;
      i4 = *(_QWORD *)(v460 + 8);
      if (i4 <= i5 >> 2)
        goto LABEL_687;
      v463 = *(_QWORD *)(v460 + 32);
      if ((*(_BYTE *)(v460 + 16) & 1) != 0)
        v463 = a10 + 24;
      v464 = *(_QWORD *)(v463 + 8 * nn) + 40 * (i5 & 3);
      v465 = *(_QWORD *)(v464 + 16);
      if (v465)
      {
        v466 = *(_QWORD *)(v464 + 32);
        i4 = v466 + 656 * v465;
        do
        {
          if (v639.columns[1].i64[0])
          {
            nn = v639.columns[2].i64[0] + 304;
            v467 = 352 * v639.columns[1].i64[0];
            do
            {
              if (*(_QWORD *)(nn + 40) == *(_QWORD *)(v466 + 416))
              {
                if (*(_QWORD *)nn)
                  re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)nn, (__int128 *)v466);
              }
              nn += 352;
              v467 -= 352;
            }
            while (v467);
          }
          v466 += 656;
        }
        while (v466 != i4);
      }
      v460 = a10;
    }
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v552 + 40, (uint64_t)&v639);
  return re::DynamicArray<re::FilterView>::deinit((uint64_t)&v639);
}

_anonymous_namespace_ *re::DynamicArray<re::ShadowView>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;

  v3 = result;
  v5 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 2);
  if (v4 >= v5)
  {
    v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v5;
        if (!v5)
          v7 = 8;
        if (v7 <= v6)
          v8 = v6;
        else
          v8 = v7;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::ShadowView>::setCapacity(result, v8);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::ShadowView>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v4 = *((_QWORD *)v3 + 2);
  }
  v9 = *((_QWORD *)v3 + 4);
  v10 = v9 + 320 * v4;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v14 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v10 + 16) = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v13;
  v15 = *(_OWORD *)(a2 + 96);
  v16 = *(_OWORD *)(a2 + 112);
  v17 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(v10 + 142) = *(_QWORD *)(a2 + 142);
  *(_OWORD *)(v10 + 112) = v16;
  *(_OWORD *)(v10 + 128) = v17;
  *(_OWORD *)(v10 + 96) = v15;
  v18 = *(_OWORD *)(a2 + 32);
  v19 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v10 + 80) = v20;
  *(_OWORD *)(v10 + 32) = v18;
  *(_OWORD *)(v10 + 48) = v19;
  *(_BYTE *)(v10 + 160) = *(_BYTE *)(a2 + 160);
  LODWORD(v12) = *(unsigned __int8 *)(a2 + 161);
  *(_BYTE *)(v10 + 161) = v12;
  if ((_DWORD)v12)
    *(_BYTE *)(v9 + 320 * v4 + 162) = *(_BYTE *)(a2 + 162);
  v21 = *(unsigned __int8 *)(a2 + 164);
  *(_BYTE *)(v9 + 320 * v4 + 164) = v21;
  if (v21)
    *(_DWORD *)(v9 + 320 * v4 + 168) = *(_DWORD *)(a2 + 168);
  v22 = v9 + 320 * v4;
  v23 = *(_OWORD *)(a2 + 176);
  v24 = *(_OWORD *)(a2 + 192);
  v25 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(v22 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v22 + 224) = v25;
  *(_OWORD *)(v22 + 176) = v23;
  *(_OWORD *)(v22 + 192) = v24;
  v26 = *(_OWORD *)(a2 + 240);
  v27 = *(_OWORD *)(a2 + 256);
  v28 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(v22 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v22 + 288) = v28;
  *(_OWORD *)(v22 + 240) = v26;
  *(_OWORD *)(v22 + 256) = v27;
  v29 = *(unsigned __int8 *)(a2 + 304);
  *(_BYTE *)(v22 + 304) = v29;
  if (v29)
    *(_BYTE *)(v9 + 320 * v4 + 305) = *(_BYTE *)(a2 + 305);
  v30 = v9 + 320 * v4;
  v31 = *(_DWORD *)(a2 + 308);
  *(_BYTE *)(v30 + 312) = *(_BYTE *)(a2 + 312);
  *(_DWORD *)(v30 + 308) = v31;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

re::ShadowView *re::ShadowView::ShadowView(re::ShadowView *this, re::Allocator *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  re::DynamicString::setCapacity(this, 0);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0x3F80000000000000;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 68) = xmmword_226117740;
  *(_QWORD *)((char *)this + 84) = 0xBDCCCCCD3DCCCCCDLL;
  *((_BYTE *)this + 92) = 0;
  *((_OWORD *)this + 6) = xmmword_2260E5F40;
  *((_DWORD *)this + 28) = 1;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_WORD *)this + 74) = -1;
  *((_WORD *)this + 80) = 1;
  *((_BYTE *)this + 164) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 244) = xmmword_226117740;
  *(_QWORD *)((char *)this + 260) = 0xBDCCCCCD3DCCCCCDLL;
  *((_BYTE *)this + 268) = 0;
  *((_OWORD *)this + 17) = xmmword_2260E5F40;
  *((_DWORD *)this + 72) = 1;
  *((_QWORD *)this + 37) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_DWORD *)this + 77) = 0;
  *((_BYTE *)this + 312) = 0;
  return this;
}

__n128 re::DynamicArray<re::FilterView>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= v5)
  {
    v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v5;
        if (!v5)
          v7 = 8;
        if (v7 <= v6)
          v8 = v6;
        else
          v8 = v7;
        re::DynamicArray<re::FilterView>::setCapacity((_QWORD *)a1, v8);
      }
      else
      {
        re::DynamicArray<re::FilterView>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v4 = *(_QWORD *)(a1 + 16);
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = v9 + 352 * v4;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v14 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v10 + 16) = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v13;
  v15 = *(_OWORD *)(a2 + 96);
  v16 = *(_OWORD *)(a2 + 112);
  v17 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(v10 + 142) = *(_QWORD *)(a2 + 142);
  *(_OWORD *)(v10 + 112) = v16;
  *(_OWORD *)(v10 + 128) = v17;
  *(_OWORD *)(v10 + 96) = v15;
  v18 = *(_OWORD *)(a2 + 32);
  v19 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v10 + 80) = v20;
  *(_OWORD *)(v10 + 32) = v18;
  *(_OWORD *)(v10 + 48) = v19;
  *(_BYTE *)(v10 + 160) = *(_BYTE *)(a2 + 160);
  LODWORD(v12) = *(unsigned __int8 *)(a2 + 161);
  *(_BYTE *)(v10 + 161) = v12;
  if ((_DWORD)v12)
    *(_BYTE *)(v9 + 352 * v4 + 162) = *(_BYTE *)(a2 + 162);
  v21 = *(unsigned __int8 *)(a2 + 164);
  *(_BYTE *)(v9 + 352 * v4 + 164) = v21;
  if (v21)
    *(_DWORD *)(v9 + 352 * v4 + 168) = *(_DWORD *)(a2 + 168);
  v22 = v9 + 352 * v4;
  v23 = *(_OWORD *)(a2 + 176);
  v24 = *(_OWORD *)(a2 + 192);
  v25 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(v22 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v22 + 224) = v25;
  *(_OWORD *)(v22 + 176) = v23;
  *(_OWORD *)(v22 + 192) = v24;
  result = *(__n128 *)(a2 + 240);
  v27 = *(_OWORD *)(a2 + 256);
  v28 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(v22 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v22 + 288) = v28;
  *(__n128 *)(v22 + 240) = result;
  *(_OWORD *)(v22 + 256) = v27;
  *(_QWORD *)(v22 + 336) = 0;
  *(_QWORD *)(v22 + 312) = 0;
  *(_QWORD *)(v22 + 320) = 0;
  *(_QWORD *)(v22 + 304) = 0;
  *(_DWORD *)(v22 + 328) = 0;
  v29 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(v22 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(v22 + 312) = v29;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  v30 = *(_QWORD *)(v22 + 320);
  *(_QWORD *)(v22 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = v30;
  v31 = *(_QWORD *)(v22 + 336);
  v32 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(v22 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = v31;
  ++*(_DWORD *)(a2 + 328);
  ++*(_DWORD *)(v22 + 328);
  *(_QWORD *)(v22 + 344) = v32;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::FilterView::FilterView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 68) = xmmword_226117740;
  *(_QWORD *)(a1 + 84) = 0xBDCCCCCD3DCCCCCDLL;
  *(_BYTE *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_2260E5F40;
  *(_DWORD *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 148) = -1;
  *(_WORD *)(a1 + 160) = 1;
  *(_BYTE *)(a1 + 164) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 244) = xmmword_226117740;
  *(_QWORD *)(a1 + 260) = 0xBDCCCCCD3DCCCCCDLL;
  *(_BYTE *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 272) = xmmword_2260E5F40;
  *(_DWORD *)(a1 + 288) = 1;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = a2;
  re::DynamicArray<re::MeshScene>::setCapacity((_QWORD *)(a1 + 304), 0);
  ++*(_DWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 344) = 0;
  return a1;
}

uint64_t re::DynamicArray<re::MeshScene>::add(_anonymous_namespace_ *this, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshScene>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  v6 = v5 + 656 * v4;
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[3];
  *(_OWORD *)(v6 + 32) = a2[2];
  *(_OWORD *)(v6 + 48) = v9;
  *(_OWORD *)v6 = v7;
  *(_OWORD *)(v6 + 16) = v8;
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[7];
  *(_OWORD *)(v6 + 96) = a2[6];
  *(_OWORD *)(v6 + 112) = v12;
  *(_OWORD *)(v6 + 64) = v10;
  *(_OWORD *)(v6 + 80) = v11;
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[11];
  *(_OWORD *)(v6 + 160) = a2[10];
  *(_OWORD *)(v6 + 176) = v15;
  *(_OWORD *)(v6 + 128) = v13;
  *(_OWORD *)(v6 + 144) = v14;
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[15];
  *(_OWORD *)(v6 + 224) = a2[14];
  *(_OWORD *)(v6 + 240) = v18;
  *(_OWORD *)(v6 + 192) = v16;
  *(_OWORD *)(v6 + 208) = v17;
  result = re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown(v6 + 256, (uint64_t *)a2 + 32);
  *(_DWORD *)(v6 + 320) = *((_DWORD *)a2 + 80);
  v20 = *((unsigned __int8 *)a2 + 328);
  *(_BYTE *)(v6 + 328) = v20;
  if (v20)
    *(_QWORD *)(v5 + 656 * v4 + 336) = *((_QWORD *)a2 + 42);
  v21 = v5 + 656 * v4;
  *(_OWORD *)(v21 + 344) = *(__int128 *)((char *)a2 + 344);
  v22 = *(__int128 *)((char *)a2 + 360);
  v23 = *(__int128 *)((char *)a2 + 376);
  v24 = *(__int128 *)((char *)a2 + 408);
  *(_OWORD *)(v21 + 392) = *(__int128 *)((char *)a2 + 392);
  *(_OWORD *)(v21 + 408) = v24;
  *(_OWORD *)(v21 + 360) = v22;
  *(_OWORD *)(v21 + 376) = v23;
  v25 = *(__int128 *)((char *)a2 + 424);
  v26 = *(__int128 *)((char *)a2 + 440);
  v27 = *(__int128 *)((char *)a2 + 472);
  *(_OWORD *)(v21 + 456) = *(__int128 *)((char *)a2 + 456);
  *(_OWORD *)(v21 + 472) = v27;
  *(_OWORD *)(v21 + 424) = v25;
  *(_OWORD *)(v21 + 440) = v26;
  v28 = *((unsigned __int8 *)a2 + 496);
  *(_BYTE *)(v21 + 496) = v28;
  if (v28)
  {
    v29 = a2[33];
    v30 = v5 + 656 * v4;
    *(_OWORD *)(v30 + 512) = a2[32];
    *(_OWORD *)(v30 + 528) = v29;
  }
  v31 = v5 + 656 * v4;
  *(_QWORD *)(v31 + 544) = *((_QWORD *)a2 + 68);
  v32 = *((unsigned __int8 *)a2 + 560);
  *(_BYTE *)(v31 + 560) = v32;
  if (v32)
  {
    v33 = (_OWORD *)(v5 + 656 * v4);
    v34 = a2[36];
    v35 = a2[37];
    v36 = a2[39];
    v33[38] = a2[38];
    v33[39] = v36;
    v33[36] = v34;
    v33[37] = v35;
  }
  *(_QWORD *)(v5 + 656 * v4 + 640) = *((_QWORD *)a2 + 80);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::BucketArray<re::LightContext,16ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 16 * v5)
  {
    re::BucketArray<re::LightContext,16ul>::setBucketsCapacity((uint64_t *)a1, (v4 + 16) >> 4);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 4));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v8 = (__n128 *)(v7 + 168 * (v4 & 0xF));
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = 0;
  v8[1].n128_u64[0] = 0;
  v8->n128_u64[0] = a2->n128_u64[0];
  a2->n128_u64[0] = 0;
  v8->n128_u64[1] = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  v9 = v8[1].n128_u64[0];
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = v9;
  v8[1].n128_u64[1] = 0;
  v8[2].n128_u64[0] = 0;
  v8[2].n128_u64[1] = 0;
  v8[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = 0;
  v8[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  v10 = v8[2].n128_u64[1];
  v8[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v10;
  v8[3].n128_u64[0] = 0;
  v8[3].n128_u64[1] = 0;
  v8[4].n128_u64[0] = 0;
  v8[3].n128_u64[0] = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  v8[3].n128_u64[1] = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = 0;
  v11 = v8[4].n128_u64[0];
  v8[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = v11;
  v8[4].n128_u64[1] = 0;
  v8[5].n128_u64[0] = 0;
  v8[5].n128_u64[1] = 0;
  v8[4].n128_u64[1] = a2[4].n128_u64[1];
  a2[4].n128_u64[1] = 0;
  v8[5].n128_u64[0] = a2[5].n128_u64[0];
  a2[5].n128_u64[0] = 0;
  v12 = v8[5].n128_u64[1];
  v8[5].n128_u64[1] = a2[5].n128_u64[1];
  a2[5].n128_u64[1] = v12;
  v8[6].n128_u64[0] = 0;
  v8[6].n128_u64[1] = 0;
  v8[7].n128_u64[0] = 0;
  v8[6].n128_u64[0] = a2[6].n128_u64[0];
  a2[6].n128_u64[0] = 0;
  v8[6].n128_u64[1] = a2[6].n128_u64[1];
  a2[6].n128_u64[1] = 0;
  v13 = v8[7].n128_u64[0];
  v8[7].n128_u64[0] = a2[7].n128_u64[0];
  a2[7].n128_u64[0] = v13;
  v8[7].n128_u64[1] = 0;
  v8[8].n128_u64[0] = 0;
  v8[8].n128_u64[1] = 0;
  v8[7].n128_u64[1] = a2[7].n128_u64[1];
  a2[7].n128_u64[1] = 0;
  v8[8].n128_u64[0] = a2[8].n128_u64[0];
  a2[8].n128_u64[0] = 0;
  v14 = v8[8].n128_u64[1];
  v8[8].n128_u64[1] = a2[8].n128_u64[1];
  a2[8].n128_u64[1] = v14;
  result = a2[9];
  v8[10].n128_u8[0] = a2[10].n128_u8[0];
  v8[9] = result;
  return result;
}

uint64_t re::LightContextBuilder::Result::Result(uint64_t a1, re::Allocator *a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a2;
  re::DynamicArray<re::ShadowView>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  re::DynamicArray<re::FilterView>::setCapacity((_QWORD *)(a1 + 40), 0);
  ++*(_DWORD *)(a1 + 64);
  re::LightContexts::LightContexts((re::LightContexts *)(a1 + 80), a2);
  return a1;
}

uint64_t re::SmallHashTable<unsigned short,re::LightContextBuilder::LightArrays,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true>::add(uint64_t a1, __int16 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;

  if (*(_DWORD *)(a1 + 2876))
  {
    v6 = a1 + 2848;
    return re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::add(v6, a2, a3);
  }
  v8 = a1 + 32;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = 0;
    do
    {
      if (*(unsigned __int16 *)(a1 + v10 + 32) == (unsigned __int16)*a2)
        return a1 + v10 + 40;
      v10 += 352;
    }
    while (352 * v9 != v10);
    if ((v9 & 0xFFFFFFF8) == 0)
      goto LABEL_17;
    if (*(_QWORD *)(a1 + 2848))
      goto LABEL_13;
    v11 = *(uint64_t **)a1;
    if (!*(_QWORD *)a1)
    {
    }
    re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::init(a1 + 2848, (uint64_t)v11, 16);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
LABEL_13:
      v12 = (_WORD *)(v8 + 352 * v9);
      v13 = (_WORD *)(a1 + 32);
      do
      {
        re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::add(a1 + 2848, v13, (uint64_t)(v13 + 4));
        v13 += 176;
      }
      while (v13 != v12);
      v9 = *(_QWORD *)(a1 + 16);
    }
    re::ObjectHelper::destroy<re::KeyValuePair<unsigned short,re::LightContextBuilder::LightArrays>>(a1 + 32, v8 + 352 * v9);
    *(_QWORD *)(a1 + 16) = 0;
    ++*(_DWORD *)(a1 + 24);
    v6 = a1 + 2848;
    return re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::add(v6, a2, a3);
  }
LABEL_17:
  v24 = *a2;
  v25[0] = 0;
  v25[1] = 0;
  v26 = 1;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v30 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)v25, a3);
  v31 = 0;
  v32 = 0;
  v33 = 1;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v37 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v31, a3 + 56);
  v38 = 0;
  v39 = 0;
  v40 = 1;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v44 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v38, a3 + 112);
  v45 = 0;
  v46 = 0;
  v47 = 1;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v51 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v45, a3 + 168);
  v52 = 0;
  v53 = 0;
  v54 = 1;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v58 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v52, a3 + 224);
  v59 = 0;
  v60 = 0;
  v61 = 1;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v65 = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap((uint64_t)&v59, a3 + 280);
  v66 = *(_QWORD *)(a3 + 336);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 < 8)
  {
    v16 = v8 + 352 * v15;
    *(_WORD *)v16 = v24;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_DWORD *)(v16 + 24) = 1;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 48) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_DWORD *)(v16 + 56) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 8, (uint64_t)v25);
    *(_QWORD *)(v16 + 64) = 0;
    *(_QWORD *)(v16 + 72) = 0;
    *(_DWORD *)(v16 + 80) = 1;
    *(_QWORD *)(v16 + 96) = 0;
    *(_QWORD *)(v16 + 104) = 0;
    *(_QWORD *)(v16 + 88) = 0;
    *(_DWORD *)(v16 + 112) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 64, (uint64_t)&v31);
    *(_QWORD *)(v16 + 120) = 0;
    *(_QWORD *)(v16 + 128) = 0;
    *(_DWORD *)(v16 + 136) = 1;
    *(_QWORD *)(v16 + 152) = 0;
    *(_QWORD *)(v16 + 160) = 0;
    *(_QWORD *)(v16 + 144) = 0;
    *(_DWORD *)(v16 + 168) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 120, (uint64_t)&v38);
    *(_QWORD *)(v16 + 176) = 0;
    *(_QWORD *)(v16 + 184) = 0;
    *(_DWORD *)(v16 + 192) = 1;
    *(_QWORD *)(v16 + 208) = 0;
    *(_QWORD *)(v16 + 216) = 0;
    *(_QWORD *)(v16 + 200) = 0;
    *(_DWORD *)(v16 + 224) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 176, (uint64_t)&v45);
    *(_QWORD *)(v16 + 232) = 0;
    *(_QWORD *)(v16 + 240) = 0;
    v16 += 232;
    *(_DWORD *)(v16 + 16) = 1;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(_DWORD *)(v16 + 48) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16, (uint64_t)&v52);
    *(_QWORD *)(v16 + 56) = 0;
    *(_QWORD *)(v16 + 64) = 0;
    *(_DWORD *)(v16 + 72) = 1;
    *(_QWORD *)(v16 + 88) = 0;
    *(_QWORD *)(v16 + 96) = 0;
    *(_QWORD *)(v16 + 80) = 0;
    *(_DWORD *)(v16 + 104) = 0;
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v16 + 56, (uint64_t)&v59);
    *(_QWORD *)(v16 + 112) = v66;
    ++*(_QWORD *)(a1 + 16);
    ++*(_DWORD *)(a1 + 24);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)&v59);
    if (v59)
    {
      v17 = v61;
      if ((v61 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v59 + 40))();
        v17 = v61;
      }
      v59 = 0;
      v60 = 0;
      v61 = (v17 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit((uint64_t)&v52);
    if (v52)
    {
      v18 = v54;
      if ((v54 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v52 + 40))();
        v18 = v54;
      }
      v52 = 0;
      v53 = 0;
      v54 = (v18 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit((uint64_t)&v45);
    if (v45)
    {
      v19 = v47;
      if ((v47 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
        v19 = v47;
      }
      v45 = 0;
      v46 = 0;
      v47 = (v19 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit((uint64_t)&v38);
    if (v38)
    {
      v20 = v40;
      if ((v40 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v20 = v40;
      }
      v38 = 0;
      v39 = 0;
      v40 = (v20 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit((uint64_t)&v31);
    if (v31)
    {
      v21 = v33;
      if ((v33 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v31 + 40))();
        v21 = v33;
      }
      v31 = 0;
      v32 = 0;
      v33 = (v21 | 1) + 2;
    }
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit((uint64_t)v25);
    if (v25[0] && (v26 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)v25[0] + 40))();
    v23 = *(_QWORD *)(a1 + 16);
    if (v23)
      return v8 + 352 * (v23 - 1) + 8;
    re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::add(uint64_t a1, _WORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (unsigned __int16)*a2) ^ ((0xBF58476D1CE4E5B9 * (unsigned __int16)*a2) >> 27));
  v7 = v6 ^ (v6 >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v14 = re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 352 * v14;
    return v13 + 8;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = 0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v10 + 352 * v9 + 4);
  if (((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31)) != v7)
  {
    do
    {
      LODWORD(v9) = *(_DWORD *)(v10 + 352 * v9) & 0x7FFFFFFF;
      if ((_DWORD)v9 == 0x7FFFFFFF)
        goto LABEL_8;
      v12 = 0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v10 + 352 * v9 + 4);
    }
    while (((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31)) != v7);
  }
  v13 = v10 + 352 * v9;
  return v13 + 8;
}

void re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 352 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int16 *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::init((uint64_t)v31, v14, v13);
          v16 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v31[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = 0;
            v23 = (unsigned __int16 *)(v18 + 4);
            do
            {
              if ((*((_DWORD *)v23 - 1) & 0x80000000) != 0)
              {
                v24 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * *v23) ^ ((0xBF58476D1CE4E5B9 * *v23) >> 27));
                re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::addAsMove(a1, (v24 ^ (v24 >> 31)) % *(unsigned int *)(a1 + 24), v24 ^ (v24 >> 31), v23, v23 + 2);
              }
              ++v22;
              v23 += 176;
            }
            while (v22 < v21);
          }
          re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13)
          v27 = 2 * v12;
        else
          v27 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 352 * v9);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 352 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  v28 = 352 * v9;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_WORD *)(*(_QWORD *)(a1 + 16) + v28 + 4) = *a4;
  v29 = *(_QWORD *)(a1 + 16) + v28;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_DWORD *)(v29 + 24) = 1;
  *(_QWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 48) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_DWORD *)(v29 + 56) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 8, a5);
  *(_QWORD *)(v29 + 64) = 0;
  *(_QWORD *)(v29 + 72) = 0;
  *(_DWORD *)(v29 + 80) = 1;
  *(_QWORD *)(v29 + 96) = 0;
  *(_QWORD *)(v29 + 104) = 0;
  *(_QWORD *)(v29 + 88) = 0;
  *(_DWORD *)(v29 + 112) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 64, a5 + 56);
  *(_QWORD *)(v29 + 120) = 0;
  *(_QWORD *)(v29 + 128) = 0;
  *(_DWORD *)(v29 + 136) = 1;
  *(_QWORD *)(v29 + 152) = 0;
  *(_QWORD *)(v29 + 160) = 0;
  *(_QWORD *)(v29 + 144) = 0;
  *(_DWORD *)(v29 + 168) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 120, a5 + 112);
  *(_QWORD *)(v29 + 176) = 0;
  *(_QWORD *)(v29 + 184) = 0;
  *(_DWORD *)(v29 + 192) = 1;
  *(_QWORD *)(v29 + 208) = 0;
  *(_QWORD *)(v29 + 216) = 0;
  *(_QWORD *)(v29 + 200) = 0;
  *(_DWORD *)(v29 + 224) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 176, a5 + 168);
  *(_QWORD *)(v29 + 232) = 0;
  *(_QWORD *)(v29 + 240) = 0;
  v29 += 232;
  *(_DWORD *)(v29 + 16) = 1;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_DWORD *)(v29 + 48) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29, a5 + 224);
  *(_QWORD *)(v29 + 56) = 0;
  *(_QWORD *)(v29 + 64) = 0;
  *(_DWORD *)(v29 + 72) = 1;
  *(_QWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 96) = 0;
  *(_QWORD *)(v29 + 80) = 0;
  *(_DWORD *)(v29 + 104) = 0;
  re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(v29 + 56, a5 + 280);
  *(_QWORD *)(v29 + 112) = *(_QWORD *)(a5 + 336);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::swap(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7[2];
  int v8;
  uint64_t v9;
  uint64_t v10;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 1;
  v9 = 0;
  v10 = 0;
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move((uint64_t)v7, a1);
    }
    else
    {
      v7[0] = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 16) = v4 + 2;
      v8 = 3;
    }
  }
  else
  {
    v8 = 3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap(v7, (uint64_t *)a1);
  }
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a1, a2);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a2, (uint64_t)v7);
  result = v7[0];
  if (v7[0] && (v8 & 1) == 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v7[0] + 40))();
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v6;
  ++*(_DWORD *)(a1 + 48);
  ++*(_DWORD *)(a2 + 48);
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 88 * (v2 & 3);
}

_QWORD *re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 352, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

re::DynamicString *re::DynamicArray<re::DirectionalLightInfo>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  re::DynamicString *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::DirectionalLightInfo>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DirectionalLightInfo *,re::DirectionalLightInfo *,re::DirectionalLightInfo *>(*(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 144 * a1[2]), a1[4]);
    v10 = a1[2];
    if (v10 != v4)
    {
      v11 = *(_QWORD *)(a2 + 32);
      v12 = a1[4];
      v13 = 144 * v10;
      v14 = 144 * v4;
      do
      {
        v15 = v11 + v13;
        result = re::DynamicString::DynamicString((re::DynamicString *)(v12 + v13), (const re::DynamicString *)(v11 + v13));
        v16 = *(_OWORD *)(v11 + v13 + 48);
        *((_OWORD *)result + 2) = *(_OWORD *)(v11 + v13 + 32);
        *((_OWORD *)result + 3) = v16;
        v17 = *(_OWORD *)(v11 + v13 + 64);
        v18 = *(_OWORD *)(v11 + v13 + 80);
        v19 = *(_OWORD *)(v11 + v13 + 96);
        *(_OWORD *)((char *)result + 108) = *(_OWORD *)(v11 + v13 + 108);
        *((_OWORD *)result + 5) = v18;
        *((_OWORD *)result + 6) = v19;
        *((_OWORD *)result + 4) = v17;
        *(_QWORD *)((char *)result + 124) = *(_QWORD *)(v11 + v13 + 124);
        v20 = *(unsigned __int8 *)(v11 + v13 + 132);
        *((_BYTE *)result + 132) = v20;
        if (v20)
          *((_BYTE *)result + 133) = *(_BYTE *)(v15 + 133);
        v21 = *(_QWORD *)(v15 + 134);
        *((_WORD *)result + 71) = *(_WORD *)(v15 + 142);
        *(_QWORD *)((char *)result + 134) = v21;
        v11 += 144;
        v14 -= 144;
        v12 += 144;
      }
      while (v13 != v14);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DirectionalLightInfo *,re::DirectionalLightInfo *,re::DirectionalLightInfo *>(*(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 144 * v4), a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = a1[4] + 144 * v4;
      v8 = 144 * v6 - 144 * v4;
      v9 = 0uLL;
      do
      {
        result = *(re::DynamicString **)v7;
        if (*(_QWORD *)v7)
        {
          if ((*(_BYTE *)(v7 + 8) & 1) != 0)
          {
            result = (re::DynamicString *)(*(uint64_t (**)(re::DynamicString *, _QWORD, __n128))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v7 + 16), v9);
            v9 = 0uLL;
          }
          *(__n128 *)v7 = v9;
          *(__n128 *)(v7 + 16) = v9;
        }
        v7 += 144;
        v8 -= 144;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DirectionalLightInfo *,re::DirectionalLightInfo *,re::DirectionalLightInfo *>(re::DynamicString *result, re::DynamicString *a2, uint64_t a3)
{
  re::DynamicString *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      result = re::DynamicString::operator=((re::DynamicString *)(a3 + v6), (re::DynamicString *)((char *)v5 + v6));
      v7 = *(_OWORD *)((char *)v5 + v6 + 48);
      *((_OWORD *)result + 2) = *(_OWORD *)((char *)v5 + v6 + 32);
      *((_OWORD *)result + 3) = v7;
      v8 = *(_OWORD *)((char *)v5 + v6 + 64);
      v9 = *(_OWORD *)((char *)v5 + v6 + 80);
      v10 = *(_OWORD *)((char *)v5 + v6 + 96);
      *(_OWORD *)((char *)result + 108) = *(_OWORD *)((char *)v5 + v6 + 108);
      *((_OWORD *)result + 5) = v9;
      *((_OWORD *)result + 6) = v10;
      *((_OWORD *)result + 4) = v8;
      *(_QWORD *)((char *)result + 124) = *(_QWORD *)((char *)v5 + v6 + 124);
      if (*((_BYTE *)result + 132) || *((_BYTE *)v5 + v6 + 132))
      {
        if (!*((_BYTE *)result + 132) || *((_BYTE *)v5 + v6 + 132))
        {
          if (*((_BYTE *)result + 132) || !*((_BYTE *)v5 + v6 + 132))
          {
            *(_BYTE *)(a3 + v6 + 133) = *((_BYTE *)v5 + v6 + 133);
          }
          else
          {
            *((_BYTE *)result + 132) = 1;
            *(_BYTE *)(a3 + v6 + 133) = *((_BYTE *)v5 + v6 + 133);
          }
        }
        else
        {
          *((_BYTE *)result + 132) = 0;
        }
      }
      v11 = a3 + v6;
      v12 = *(_QWORD *)((char *)v5 + v6 + 134);
      *(_WORD *)(v11 + 142) = *(_WORD *)((char *)v5 + v6 + 142);
      *(_QWORD *)(v11 + 134) = v12;
      v6 += 144;
    }
    while ((re::DynamicString *)((char *)v5 + v6) != a2);
  }
  return result;
}

_QWORD *re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 480, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 120 * (a2 & 3);
}

_QWORD *re::DynamicArray<re::SingleCullingFrustum>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SingleCullingFrustum>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xF0uLL))
        {
          v2 = 240 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 240 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 240, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 240 * v9;
        v11 = v7;
        do
        {
          *(_QWORD *)v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)v11, (unint64_t *)v8);
          v11[7] = 0u;
          v12 = v11 + 7;
          v12[6] = 0u;
          v12[7] = 0u;
          v12[4] = 0u;
          v12[5] = 0u;
          v12[2] = 0u;
          v12[3] = 0u;
          v12[1] = 0u;
          memmove(v12, (const void *)(v8 + 112), 0x80uLL);
          *(_QWORD *)v8 = 0;
          ++*(_DWORD *)(v8 + 8);
          v8 += 240;
          v11 = v12 + 8;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 8 * (a2 & 3);
}

uint64_t re::RayTracedAmbientOcclusionProvider::RayTracedAmbientOcclusionProvider(uint64_t a1, const re::DynamicString *a2)
{
  uint64_t v4;
  char v5;

  re::DynamicString::DynamicString((re::DynamicString *)&v4, a2);
  *(_QWORD *)a1 = off_24ED381E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 8), (const re::DynamicString *)&v4);
  if (v4 && (v5 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v4 + 40))();
  *(_QWORD *)a1 = &off_24ED85D88;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 44) = xmmword_2261998E0;
  *(_WORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 62) = 16843009;
  *(_WORD *)(a1 + 66) = 256;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  return a1;
}

void re::RayTracedAmbientOcclusionProvider::~RayTracedAmbientOcclusionProvider(re::RayTracedAmbientOcclusionProvider *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)((char *)this + 152);
  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    v4 = *((_QWORD *)this + 23);
    if (v4)
    {
      v5 = *((_QWORD *)this + 21);
      if (v5)
      {
        v6 = 8 * v5;
        do
        {
          if (*(_QWORD *)v4)
          {

            *(_QWORD *)v4 = 0;
          }
          v4 += 8;
          v6 -= 8;
        }
        while (v6);
        v2 = *((_QWORD *)this + 19);
        v4 = *((_QWORD *)this + 23);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
    }
    *((_QWORD *)this + 23) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 44);
  }
  re::AssetHandle::~AssetHandle((re::RayTracedAmbientOcclusionProvider *)((char *)this + 120));
  re::AssetHandle::~AssetHandle((re::RayTracedAmbientOcclusionProvider *)((char *)this + 96));
  re::AssetHandle::~AssetHandle((re::RayTracedAmbientOcclusionProvider *)((char *)this + 72));
  *(_QWORD *)this = off_24ED381E0;
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  re::RayTracedAmbientOcclusionProvider::~RayTracedAmbientOcclusionProvider(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RayTracedAmbientOcclusionProvider::prepareFrame(re::RayTracedAmbientOcclusionProvider *this, char *__s, const char *a3, re::RenderFrame *a4)
{
  uint64_t v8;
  char v9;
  const char *v10;
  int v11;
  id *v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int ScopeLayer;
  int v18;
  uint64_t v19;
  re *v20;
  int v21;
  int v22;
  uint64_t *v23;
  _QWORD *v24;
  _anonymous_namespace_ *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t ScopeResolution;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  re::RayTracedAmbientOcclusionMutablePersistentData *v39;
  char v40;
  id v41;
  id v42;
  id v43;
  _anonymous_namespace_ *v44;
  re::RenderGraphPersistentResourceManager *v49;
  uint64_t v50;
  re::RenderGraphPersistentResourceManager *v51;
  re::RenderGraphPersistentResourceManager *v52;
  re::RenderGraphPersistentResourceManager *v53;
  re::RenderGraphPersistentResourceManager *v54;
  uint64_t v55;
  re::RenderGraphPersistentResourceManager *v56;
  re::RenderGraphPersistentResourceManager *v57;
  re::RenderGraphPersistentResourceManager *v58;
  uint64_t v59;
  re::RenderGraphPersistentResourceManager *v60;
  re::RenderGraphPersistentResourceManager *v61;
  unint64_t ScopeHash;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v76;
  char *__sa;
  const char *v78;
  unint64_t v79;
  char v80;
  id *v81;
  unint64_t v82[2];
  uint64_t v83;
  _QWORD v84[2];
  char v85;
  int v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  _QWORD v90[2];
  char v91;
  int v92;
  unint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  __int128 v99;
  char v100;
  void *v101;
  __int128 v102;
  __int128 v103;
  int v104;
  __int128 v105;
  char v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  __int128 v111;
  char v112;
  void *v113;
  __int128 v114;
  __int128 v115;
  int v116;
  __int128 v117;
  char v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  __int128 v122;
  char v123;
  void *v124;
  __int128 v125;
  __int128 v126;
  int v127;
  __int128 v128;
  char v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  __int128 v133;
  char v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  int v138;
  __int128 v139;
  char v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  __int128 v144;
  char v145;
  void *v146;
  __int128 v147;
  __int128 v148;
  int v149;
  __int128 v150;
  char v151;
  BOOL v152;
  _QWORD v153[2];
  id v154;
  id v155;
  id v156;
  re::RayTracedAmbientOcclusionMutablePersistentData *v157;
  char *v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE v203[12];
  uint64_t v204;
  _BYTE v205[18];
  void *v206;
  __int128 v207;
  __int128 v208;
  int v209;
  __int128 v210;
  char v211;
  void *v212[6];
  __int128 v213;
  __int128 v214;
  int v215;
  __int128 v216;
  char v217;
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v8 = *a3;
    if (*a3)
    {
      v9 = a3[1];
      if (v9)
      {
        v10 = a3 + 2;
        do
        {
          v8 = 31 * v8 + v9;
          v11 = *(unsigned __int8 *)v10++;
          v9 = v11;
        }
        while (v11);
      }
      v8 &= ~0x8000000000000000;
    }
  }
  else
  {
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v202 = v8;
  v12 = (id *)*((_QWORD *)a4 + 1);
  v13 = *((unsigned __int8 *)this + 40);
  v14 = *((unsigned __int8 *)this + 144) != v13;
  *((_BYTE *)this + 144) = v13;
  if (!v13)
    return 0;
  v15 = re::RenderGraphDataStore::tryGet<re::SceneScope>((uint64_t)a4 + 32, __s, a3);
  v78 = a3;
  __sa = __s;
  v81 = v12;
  v80 = v14;
  if (!v15)
  {
    ScopeLayer = re::RenderFrame::getScopeLayer(a4, a3);
LABEL_14:
    if (ScopeLayer == -1)
      v18 = 0;
    else
      v18 = ScopeLayer;
    goto LABEL_17;
  }
  v16 = re::RenderGraphDataStore::tryGet<re::SimplifiedMeshBufferDeformationIndex>((uint64_t)a4 + 32, *(const char **)(v15 + 8));
  ScopeLayer = re::RenderFrame::getScopeLayer(a4, a3);
  if (!v16)
    goto LABEL_14;
  v18 = *(_DWORD *)(v16 + 8);
LABEL_17:
  v79 = v18;
  if (*((_QWORD *)this + 21) <= (unint64_t)v18)
  {
    v20 = (re *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)this + 19, v18 + 1);
    v21 = *((_DWORD *)this + 42);
    if ((int)v79 >= v21)
    {
      v22 = v79 - v21 + 1;
      do
      {
        v23 = re::globalAllocators(v20);
        v24 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[2] + 32))(v23[2], 736, 16);
        bzero(v24, 0x2E0uLL);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)v24, 0);
        *v24 = &off_24ED85DD0;
        *((_DWORD *)v24 + 6) = 0;
        *((_WORD *)v24 + 14) = 257;
        *((_OWORD *)v24 + 14) = 0u;
        *((_OWORD *)v24 + 15) = 0u;
        *((_OWORD *)v24 + 16) = 0u;
        *((_OWORD *)v24 + 13) = 0u;
        *(_OWORD *)((char *)v24 + 268) = 0u;
        *(_QWORD *)((char *)v24 + 284) = 0x7FFFFFFFLL;
        *(_OWORD *)(v24 + 37) = 0u;
        *(_OWORD *)(v24 + 39) = 0u;
        *((_DWORD *)v24 + 82) = 0;
        *(_QWORD *)((char *)v24 + 332) = 0x7FFFFFFFLL;
        *(_OWORD *)(v24 + 43) = 0u;
        *(_OWORD *)(v24 + 45) = 0u;
        *((_DWORD *)v24 + 94) = 0;
        *(_QWORD *)((char *)v24 + 380) = 0x7FFFFFFFLL;
        v24[70] = 0;
        *(_OWORD *)((char *)v24 + 420) = 0u;
        *(_OWORD *)(v24 + 49) = 0u;
        *(_OWORD *)(v24 + 51) = 0u;
        *((_DWORD *)v24 + 118) = 0;
        *(_OWORD *)(v24 + 55) = 0u;
        *(_OWORD *)(v24 + 57) = 0u;
        *((_DWORD *)v24 + 128) = 0;
        *((_OWORD *)v24 + 30) = 0u;
        *((_OWORD *)v24 + 31) = 0u;
        *((_DWORD *)v24 + 138) = 0;
        *(_OWORD *)(v24 + 65) = 0u;
        *(_OWORD *)(v24 + 67) = 0u;
        v24[71] = 850045863;
        *((_OWORD *)v24 + 44) = 0u;
        *((_OWORD *)v24 + 45) = 0u;
        *((_OWORD *)v24 + 42) = 0u;
        *((_OWORD *)v24 + 43) = 0u;
        *((_OWORD *)v24 + 40) = 0u;
        *((_OWORD *)v24 + 41) = 0u;
        *((_OWORD *)v24 + 38) = 0u;
        *((_OWORD *)v24 + 39) = 0u;
        *((_OWORD *)v24 + 36) = 0u;
        *((_OWORD *)v24 + 37) = 0u;
        v26 = *((_QWORD *)this + 20);
        v27 = *((_QWORD *)this + 21);
        if (v27 >= v26)
        {
          v28 = v27 + 1;
          if (v26 < v27 + 1)
          {
            if (*((_QWORD *)this + 19))
            {
              v29 = 2 * v26;
              _ZF = v26 == 0;
              v31 = 8;
              if (!_ZF)
                v31 = v29;
              if (v31 <= v28)
                v32 = v28;
              else
                v32 = v31;
              v20 = (re *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)this + 19, v32);
            }
            else
            {
              v20 = (re *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)this + 19, v28);
              ++*((_DWORD *)this + 44);
            }
          }
          v27 = *((_QWORD *)this + 21);
        }
        *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v27) = v24;
        *((_QWORD *)this + 21) = v27 + 1;
        ++*((_DWORD *)this + 44);
        --v22;
      }
      while (v22);
    }
  }
  v158 = 0;
  v157 = 0;
  v159 = 1065353216;
  v160 = 0;
  v162 = 0;
  v161 = 0;
  v163 = -1;
  v164 = 0;
  v165 = -1;
  v166 = 0;
  v167 = -1;
  v168 = 0;
  v169 = -1;
  v170 = 0;
  v171 = -1;
  v172 = 0;
  v173 = -1;
  v174 = 0;
  v175 = -1;
  v176 = 0;
  v177 = -1;
  v178 = 0;
  v179 = -1;
  v180 = 0;
  v181 = -1;
  v182 = 0;
  v183 = -1;
  v184 = 0;
  v185 = -1;
  v186 = 0;
  v187 = -1;
  v188 = 0;
  v189 = -1;
  v190 = 0;
  v191 = -1;
  v192 = 0;
  v193 = -1;
  v194 = 0;
  v195 = -1;
  v196 = 0;
  v197 = -1;
  v198 = 0;
  v199 = -1;
  v200 = 0;
  v201 = -1;
  v33 = *((_QWORD *)this + 21);
  if (v33 <= v79)
  {
    v141 = 0;
    v213 = 0u;
    v214 = 0u;
    memset(v212, 0, sizeof(v212));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v203 = 136315906;
    *(_QWORD *)&v203[4] = "operator[]";
    v204 = 0x800000003150400;
    *(_QWORD *)v205 = v79;
    *(_WORD *)&v205[8] = 2048;
    *(_QWORD *)&v205[10] = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v157, *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v79));
  v158 = (char *)this + 44;
  v159 = *((_DWORD *)this + 17);
  ScopeResolution = re::RenderFrame::getScopeResolution(a4, v78);
  v35 = ScopeResolution;
  v19 = 0;
  v36 = HIDWORD(ScopeResolution);
  v37 = (float)((float)(int)ScopeResolution * 0.25);
  v38 = (float)((float)SHIDWORD(ScopeResolution) * 0.25);
  v160 = __PAIR64__(v38, v37);
  if (v37 && v38)
  {
    v39 = v157;
    v40 = v80;
    if (*((_QWORD *)v157 + 26) != ScopeResolution)
    {
      *((_QWORD *)v157 + 26) = ScopeResolution;
      re::RayTracedAmbientOcclusionMutablePersistentData::createPersistentTextures((void **)v39, v37, v38, v81 + 23);
      v40 = 1;
    }
    *((_BYTE *)v39 + 29) = v40;
    v76 = v36;
    if (*((_BYTE *)v39 + 28))
    {
      *((_BYTE *)v39 + 28) = 0;
      re::RayTracedAmbientOcclusionMutablePersistentData::createRayTracer(v39, v81);
      re::RayTracedAmbientOcclusionMutablePersistentData::compileShaderFunctions((void **)v39, (uint64_t)v81, (uint64_t)this + 44);
      v212[0] = objc_msgSend(v81[23], sel_newEvent);
      NS::SharedPtr<MTL::Texture>::operator=((void **)v39 + 79, v212);
      if (v212[0])

      v39 = v157;
    }
    v41 = *((id *)v39 + 80);
    v156 = v41;
    v212[0] = (void *)0x13DF6A181E311838;
    re::RenderFrame::registerExternalTexture((uint64_t)a4, &v156, v212, &v202, 0);
    if (v41)
    {

      v156 = 0;
    }
    v42 = *((id *)v157 + 81);
    v155 = v42;
    v212[0] = (void *)0x13DF6A181E3A91ECLL;
    re::RenderFrame::registerExternalTexture((uint64_t)a4, &v155, v212, &v202, 0);
    if (v42)
    {

      v155 = 0;
    }
    v43 = *((id *)v157 + 82);
    v154 = v43;
    v212[0] = (void *)0x1B064461A1224D17;
    re::RenderFrame::registerExternalTexture((uint64_t)a4, &v154, v212, &v202, 0);
    if (v43)
    {

      v154 = 0;
    }
    v153[0] = 0;
    v153[1] = &str_110;
    BYTE4(v212[4]) = 0;
    __asm { FMOV            V8.2S, #1.0 }
    v212[5] = _D8;
    v215 = -1;
    v217 = 0;
    *(void **)((char *)&v212[1] + 4) = (void *)v160;
    v212[0] = (void *)0x1900000000;
    LODWORD(v212[1]) = 2;
    *(_OWORD *)((char *)&v212[2] + 4) = xmmword_2261326E0;
    v216 = 0u;
    v213 = xmmword_226135530;
    v214 = xmmword_2261998F0;
    v152 = 0;
    v49 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    v50 = v153[0] >> 1;
    *(_QWORD *)v203 = v153[0] >> 1;
    v141 = 0x4465F5311B5B73D5;
    v130 = 0x4465F5311B5B73D5;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v49, (const re::WeakStringID *)v203, (const re::WeakStringID *)&v141, (const re::WeakStringID *)&v130, a4, (const re::RenderGraphTargetDescription *)v212, &v152);
    v51 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    *(_QWORD *)v203 = v50;
    v141 = 0x4465F5311B5B73D6;
    v130 = 0x4465F5311B5B73D6;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v51, (const re::WeakStringID *)v203, (const re::WeakStringID *)&v141, (const re::WeakStringID *)&v130, a4, (const re::RenderGraphTargetDescription *)v212, &v152);
    v205[16] = 0;
    v206 = _D8;
    v207 = xmmword_226135530;
    v208 = xmmword_226135540;
    v209 = -1;
    v211 = 0;
    v204 = v160;
    *(_QWORD *)v203 = 0xD00000000;
    *(_DWORD *)&v203[8] = 2;
    *(_OWORD *)v205 = xmmword_2261326E0;
    v210 = 0u;
    v52 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    v141 = v50;
    v130 = 0x20954661F6FLL;
    v119 = 0x20954661F6FLL;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v52, (const re::WeakStringID *)&v141, (const re::WeakStringID *)&v130, (const re::WeakStringID *)&v119, a4, (const re::RenderGraphTargetDescription *)v203, &v152);
    v145 = 0;
    v146 = _D8;
    v147 = xmmword_226135530;
    v148 = xmmword_226135540;
    v149 = -1;
    v151 = 0;
    v143 = v160;
    v141 = 0x1900000000;
    v142 = 2;
    v144 = xmmword_2261326E0;
    v150 = 0u;
    v53 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    v130 = v50;
    v119 = 0x238480915F587375;
    v107 = 0x238480915F587375;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v53, (const re::WeakStringID *)&v130, (const re::WeakStringID *)&v119, (const re::WeakStringID *)&v107, a4, (const re::RenderGraphTargetDescription *)&v141, &v152);
    v134 = 0;
    v135 = _D8;
    v136 = xmmword_226135530;
    v137 = xmmword_226135540;
    v138 = -1;
    v140 = 0;
    v132 = v160;
    v130 = 0xFC00000000;
    v131 = 2;
    v133 = xmmword_2261326E0;
    v139 = 0u;
    v54 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    v55 = v153[0] >> 1;
    v119 = v153[0] >> 1;
    v107 = 0xE819A4F8ADA157;
    v96 = 0xE819A4F8ADA157;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v54, (const re::WeakStringID *)&v119, (const re::WeakStringID *)&v107, (const re::WeakStringID *)&v96, a4, (const re::RenderGraphTargetDescription *)&v130, &v152);
    v123 = 0;
    v124 = _D8;
    v125 = xmmword_226135530;
    v126 = xmmword_226135540;
    v127 = -1;
    v129 = 0;
    v121 = v160;
    v119 = 0x1700000000;
    v120 = 2;
    v122 = xmmword_2261326E0;
    v128 = 0u;
    v56 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    v107 = v55;
    v96 = 0x1C1B1AFA2EA4B8D3;
    v90[0] = 0x1C1B1AFA2EA4B8D3;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v56, (const re::WeakStringID *)&v107, (const re::WeakStringID *)&v96, (const re::WeakStringID *)v90, a4, (const re::RenderGraphTargetDescription *)&v119, &v152);
    v112 = 0;
    v113 = _D8;
    v114 = xmmword_226135530;
    v115 = xmmword_226135540;
    v116 = -1;
    v118 = 0;
    v110 = v76;
    v107 = 0xA00000000;
    v109 = v35;
    v108 = 2;
    v111 = xmmword_2261326E0;
    v117 = 0u;
    v57 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    v96 = v55;
    v90[0] = 0x1E19C7A8DCC7299BLL;
    v84[0] = 0x1E19C7A8DCC7299BLL;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v57, (const re::WeakStringID *)&v96, (const re::WeakStringID *)v90, (const re::WeakStringID *)v84, a4, (const re::RenderGraphTargetDescription *)&v107, &v152);
    v100 = 0;
    v101 = _D8;
    v102 = xmmword_226135530;
    v103 = xmmword_226135540;
    v104 = -1;
    v106 = 0;
    v98 = v160;
    v96 = 0xD00000000;
    v97 = 2;
    v99 = xmmword_2261326E0;
    v105 = 0u;
    v58 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    v59 = v153[0] >> 1;
    v90[0] = v153[0] >> 1;
    v84[0] = 0x5A9E5718CD5BF864;
    v95 = 0x5A9E5718CD5BF864;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v58, (const re::WeakStringID *)v90, (const re::WeakStringID *)v84, (const re::WeakStringID *)&v95, a4, (const re::RenderGraphTargetDescription *)&v96, &v152);
    v161 = (4 * v160 * HIDWORD(v160));
    v91 = 0;
    v92 = 1065353216;
    v93 = 0xFFFFFFFF00000020;
    LODWORD(v90[0]) = 0;
    v90[1] = 24 * v161;
    v94 = 0u;
    v60 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    v84[0] = v59;
    v95 = 81930;
    v89 = 81930;
    re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v60, (const re::WeakStringID *)v84, (const re::WeakStringID *)&v95, (const re::WeakStringID *)&v89, a4, (const re::RenderGraphBufferDescription *)v90, &v152, 0);
    v85 = 0;
    v86 = 1065353216;
    v87 = 0xFFFFFFFF00000020;
    LODWORD(v84[0]) = 0;
    v84[1] = 4 * v161;
    v88 = 0u;
    v61 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
    v95 = v59;
    v89 = 0x1B0929D413E97EA9;
    v83 = 0x1B0929D413E97EA9;
    re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v61, (const re::WeakStringID *)&v95, (const re::WeakStringID *)&v89, (const re::WeakStringID *)&v83, a4, (const re::RenderGraphBufferDescription *)v84, &v152, 0);
    v82[0] = 0x6BAE80D95E64306FLL;
    v82[1] = (unint64_t)"RayTracedAmbientOcclusionProvider";
    ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v82, __sa, v78);
    v63 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v79 ^ (v79 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v79 ^ (v79 >> 30))) >> 27));
    v64 = (v63 ^ (v63 >> 31)) + (ScopeHash << 6) + (ScopeHash >> 2);
    v65 = 0xBF58476D1CE4E5B9 * (v160 ^ ((unint64_t)v160 >> 30));
    v66 = (0x94D049BB133111EBLL * (v65 ^ (v65 >> 27))) ^ ((0x94D049BB133111EBLL * (v65 ^ (v65 >> 27))) >> 31);
    v67 = 0xBF58476D1CE4E5B9 * (HIDWORD(v160) ^ ((unint64_t)HIDWORD(v160) >> 30));
    v68 = ((((v64 - 0x61C8864680B583E9) ^ ScopeHash) << 6)
         + (((v64 - 0x61C8864680B583E9) ^ ScopeHash) >> 2)
         + ((((0x94D049BB133111EBLL * (v67 ^ (v67 >> 27))) ^ ((0x94D049BB133111EBLL * (v67 ^ (v67 >> 27))) >> 31))
           + (v66 << 6)
           + (v66 >> 2)
           - 0x61C8864680B583E9) ^ v66)
         - 0x61C8864680B583E9) ^ (v64 - 0x61C8864680B583E9) ^ ScopeHash;
    v69 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)v157 + 29)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)v157 + 29)) >> 27));
    v70 = ((v69 ^ (v69 >> 31)) + (v68 << 6) + (v68 >> 2) - 0x61C8864680B583E9) ^ v68;
    v71 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 62)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 62)) >> 27));
    v72 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 65)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 65)) >> 27));
    v73 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 67)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 67)) >> 27));
    v74 = ((v71 ^ (v71 >> 31)) + (v70 << 6) + (v70 >> 2) - 0x61C8864680B583E9) ^ v70;
    v19 = ((((v73 ^ (v73 >> 31)) + ((v72 ^ (v72 >> 31)) << 6) + ((v72 ^ (v72 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v72 ^ (v72 >> 31))
         + (v74 << 6)
         + (v74 >> 2)
         - 0x61C8864680B583E9) ^ v74;
    re::StringID::destroyString((re::StringID *)v153);
  }
  if (v157)

  return v19;
}

void re::RayTracedAmbientOcclusionProvider::provide(re::RayTracedAmbientOcclusionProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  re *RenderGraph;
  uint64_t v9;
  char v10;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int ScopeLayer;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t ScopeResolution;
  re::RayTracedAmbientOcclusionProvider *v27;
  re::RenderGraphMeshNode *v28;
  re::RenderGraphMeshNode *v29;
  re *v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  re *v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD *v37;
  re *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  re *v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  re *v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  re *v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD *v57;
  re *v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  re::RenderGraphNode *v62;
  re::RenderGraphNode *v63;
  re::RenderGraphNode *v64;
  re *v65;
  int i;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  _QWORD *v72;
  int v73;
  uint64_t (*v74)(void);
  uint64_t *v75;
  re::RenderGraphFullscreenNode *v76;
  uint64_t *v77;
  _anonymous_namespace_ *v78;
  double v79;
  _anonymous_namespace_ *v80;
  double v81;
  _anonymous_namespace_ *v82;
  double v83;
  uint64_t *v84;
  _QWORD *v85;
  __n128 v86;
  _OWORD v87[2];
  __n128 v88;
  _OWORD v89[2];
  __n128 v90;
  _OWORD v91[2];
  int v92;
  uint64_t v93;
  char v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  char v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[20];
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  _BYTE v117[20];
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  _BYTE v128[20];
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _BYTE v139[20];
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  _BYTE v150[20];
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  _BYTE v161[20];
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  _BYTE v172[20];
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  _BYTE v183[20];
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  _OWORD v195[22];
  _BYTE v196[20];
  uint64_t v197;
  _BYTE v198[10];
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  _OWORD v206[3];
  __int128 v207;
  __int128 v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  __n128 v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  __int16 v217;
  uint64_t v218;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, a3, 0);
  if (a3)
  {
    v9 = *a3;
    if (*a3)
    {
      v10 = a3[1];
      if (v10)
      {
        v11 = a3 + 2;
        do
        {
          v9 = 31 * v9 + v10;
          v12 = *(unsigned __int8 *)v11++;
          v10 = v12;
        }
        while (v12);
      }
      v13 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v14 = re::RenderGraphDataStore::tryGet<re::SceneScope>((uint64_t)a4 + 32, a2, a3);
  if (v14)
  {
    v15 = re::RenderGraphDataStore::tryGet<re::SimplifiedMeshBufferDeformationIndex>((uint64_t)a4 + 32, *(const char **)(v14 + 8));
    ScopeLayer = re::RenderFrame::getScopeLayer(a4, a3);
    if (v15)
    {
      v17 = *(_DWORD *)(v15 + 8);
      goto LABEL_16;
    }
  }
  else
  {
    ScopeLayer = re::RenderFrame::getScopeLayer(a4, a3);
  }
  if (ScopeLayer == -1)
    v17 = 0;
  else
    v17 = ScopeLayer;
LABEL_16:
  *(_QWORD *)&v195[0] = 0;
  v194 = 0;
  LODWORD(v195[1]) = 0;
  *((_QWORD *)&v195[0] + 1) = 1065353216;
  *(_QWORD *)&v195[2] = 0;
  *((_QWORD *)&v195[1] + 1) = 0;
  *((_QWORD *)&v195[2] + 1) = -1;
  *(_QWORD *)&v195[3] = 0;
  *((_QWORD *)&v195[3] + 1) = -1;
  *(_QWORD *)&v195[4] = 0;
  *((_QWORD *)&v195[4] + 1) = -1;
  *(_QWORD *)&v195[5] = 0;
  *((_QWORD *)&v195[5] + 1) = -1;
  *(_QWORD *)&v195[6] = 0;
  *((_QWORD *)&v195[6] + 1) = -1;
  *(_QWORD *)&v195[7] = 0;
  *((_QWORD *)&v195[7] + 1) = -1;
  *(_QWORD *)&v195[8] = 0;
  *((_QWORD *)&v195[8] + 1) = -1;
  *(_QWORD *)&v195[9] = 0;
  *((_QWORD *)&v195[9] + 1) = -1;
  *(_QWORD *)&v195[10] = 0;
  *((_QWORD *)&v195[10] + 1) = -1;
  *(_QWORD *)&v195[11] = 0;
  *((_QWORD *)&v195[11] + 1) = -1;
  *(_QWORD *)&v195[12] = 0;
  *((_QWORD *)&v195[12] + 1) = -1;
  *(_QWORD *)&v195[13] = 0;
  *((_QWORD *)&v195[13] + 1) = -1;
  *(_QWORD *)&v195[14] = 0;
  *((_QWORD *)&v195[14] + 1) = -1;
  *(_QWORD *)&v195[15] = 0;
  *((_QWORD *)&v195[15] + 1) = -1;
  *(_QWORD *)&v195[16] = 0;
  *((_QWORD *)&v195[16] + 1) = -1;
  *(_QWORD *)&v195[17] = 0;
  *((_QWORD *)&v195[17] + 1) = -1;
  *(_QWORD *)&v195[18] = 0;
  *((_QWORD *)&v195[18] + 1) = -1;
  *(_QWORD *)&v195[19] = 0;
  *((_QWORD *)&v195[19] + 1) = -1;
  *(_QWORD *)&v195[20] = 0;
  *((_QWORD *)&v195[20] + 1) = -1;
  v18 = v17;
  *(_QWORD *)&v195[21] = 0;
  v19 = *((_QWORD *)this + 21);
  *((_QWORD *)&v195[21] + 1) = -1;
  if (v19 <= v17)
  {
    *(_QWORD *)v183 = 0;
    v208 = 0u;
    v207 = 0u;
    memset(v206, 0, sizeof(v206));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v196 = 136315906;
    *(_QWORD *)&v196[4] = "operator[]";
    *(_WORD *)&v196[12] = 1024;
    *(_DWORD *)&v196[14] = 789;
    *(_WORD *)&v196[18] = 2048;
    v197 = v18;
    *(_WORD *)v198 = 2048;
    *(_QWORD *)&v198[2] = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v194, *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v17));
  *(_QWORD *)&v195[0] = (char *)this + 44;
  DWORD2(v195[0]) = *((_DWORD *)this + 17);
  ScopeResolution = re::RenderFrame::getScopeResolution(a4, a3);
  __asm { FMOV            V1.2S, #0.25 }
  *(uint32x2_t *)((char *)v195 + 12) = vcvt_u32_f32(vmul_f32(vcvt_f32_s32((int32x2_t)ScopeResolution), _D1));
  re::RenderFrame::tryGetInputTarget(a4, "Color", 0, (double *)v206);
  v195[2] = v206[0];
  re::RenderFrame::tryGetInputTarget(a4, "Depth", 0, (double *)v206);
  v195[3] = v206[0];
  DWORD2(v206[0]) = 2;
  memset((char *)v206 + 12, 255, 24);
  BYTE4(v206[2]) = 0;
  __asm { FMOV            V9.2S, #1.0 }
  *((_QWORD *)&v206[2] + 1) = _D9;
  v207 = xmmword_226135530;
  v208 = xmmword_226135540;
  v209 = -1;
  v212 = 0;
  *(_QWORD *)&v206[0] = 2;
  *(_QWORD *)v196 = 0x27BED4303C623070;
  *(_QWORD *)&v196[8] = "PreviousCount";
  v210 = -1;
  v211 = (v13 - 0x64F625B8ECE32FDBLL) ^ 0x13DF6A181E311838;
  re::StringID::destroyString((re::StringID *)v196);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v206, "PreviousCount", v196);
  v195[4] = *(_OWORD *)v196;
  *(_DWORD *)&v196[8] = 2;
  *(_QWORD *)&v196[12] = -1;
  v197 = -1;
  *(_QWORD *)v198 = -1;
  v198[8] = 0;
  v199 = _D9;
  v200 = xmmword_226135530;
  v201 = xmmword_226135540;
  v202 = -1;
  v205 = 0;
  *(_QWORD *)v196 = 2;
  *(_QWORD *)v183 = 0x27BED4303C7523D8;
  *(_QWORD *)&v183[8] = "PreviousDepth";
  v203 = -1;
  v204 = (v13 - 0x64F625B8EA82646ELL) ^ 0x13DF6A181E3A91ECLL;
  re::StringID::destroyString((re::StringID *)v183);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v196, "PreviousDepth", v183);
  v195[5] = *(_OWORD *)v183;
  *(_DWORD *)&v183[8] = 2;
  *(_QWORD *)&v183[12] = -1;
  v184 = -1;
  v185 = -1;
  v186 = 0;
  v187 = _D9;
  v188 = xmmword_226135530;
  v189 = xmmword_226135540;
  v190 = -1;
  v193 = 0;
  *(_QWORD *)v183 = 2;
  *(_QWORD *)v172 = 0x360C88C342449A2ELL;
  *(_QWORD *)&v172[8] = "AccumulatedAmbientOcclusion";
  v191 = -1;
  v192 = (v13 + 0x668A233A3026551CLL) ^ 0x1B064461A1224D17;
  re::StringID::destroyString((re::StringID *)v172);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v183, "AccumulatedAmbientOcclusion", v172);
  v195[6] = *(_OWORD *)v172;
  *(_DWORD *)&v172[8] = 2;
  *(_QWORD *)&v172[12] = -1;
  v173 = -1;
  v174 = -1;
  v175 = 0;
  v176 = _D9;
  v177 = xmmword_226135530;
  v178 = xmmword_226135540;
  v179 = -1;
  v182 = 0;
  *(_QWORD *)v172 = 2;
  *(_QWORD *)v161 = 0x88CBEA6236B6E7AALL;
  *(_QWORD *)&v161[8] = "ColorIntermediate1";
  v180 = -1;
  v181 = (v13 - 0x3731BCB36301B1B4) ^ 0x4465F5311B5B73D5;
  re::StringID::destroyString((re::StringID *)v161);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v172, "ColorIntermediate1", v161);
  v195[7] = *(_OWORD *)v161;
  *(_QWORD *)v161 = 0x88CBEA6236B6E7ACLL;
  *(_QWORD *)&v161[8] = "ColorIntermediate2";
  v181 = (v13 - 0x3731BCB36301B174) ^ 0x4465F5311B5B73D6;
  re::StringID::destroyString((re::StringID *)v161);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v172, "ColorIntermediate2", v161);
  v195[8] = *(_OWORD *)v161;
  *(_DWORD *)&v161[8] = 2;
  *(_QWORD *)&v161[12] = -1;
  v162 = -1;
  v163 = -1;
  v164 = 0;
  v165 = _D9;
  v166 = xmmword_226135530;
  v167 = xmmword_226135540;
  v168 = -1;
  v171 = 0;
  *(_QWORD *)v161 = 2;
  *(_QWORD *)v150 = 0x412A8CC3EDELL;
  *(_QWORD *)&v150[8] = "NewCount";
  v169 = -1;
  v170 = (v13 - 0x61C8036F1214204ELL) ^ 0x20954661F6FLL;
  re::StringID::destroyString((re::StringID *)v150);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v161, "NewCount", v150);
  v195[10] = *(_OWORD *)v150;
  *(_DWORD *)&v150[8] = 2;
  *(_QWORD *)&v150[12] = -1;
  v151 = -1;
  v152 = -1;
  v153 = 0;
  v154 = _D9;
  v155 = xmmword_226135530;
  v156 = xmmword_226135540;
  v157 = -1;
  v160 = 0;
  *(_QWORD *)v150 = 2;
  *(_QWORD *)v139 = 0x47090122BEB0E6EALL;
  *(_QWORD *)&v139[8] = "NewAmbientOcclusion";
  v158 = -1;
  v159 = (v13 - 0x77C741CA52C289CCLL) ^ 0x238480915F587375;
  re::StringID::destroyString((re::StringID *)v139);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v150, "NewAmbientOcclusion", v139);
  v195[11] = *(_OWORD *)v139;
  *(_DWORD *)&v139[8] = 2;
  *(_QWORD *)&v139[12] = -1;
  v140 = -1;
  v141 = -1;
  v142 = 0;
  v143 = _D9;
  v144 = xmmword_226135530;
  v145 = xmmword_226135540;
  v146 = -1;
  v149 = 0;
  *(_QWORD *)v139 = 2;
  *(_QWORD *)v128 = 0x1D03349F15B42AELL;
  *(_QWORD *)&v128[8] = "LowResDepth";
  v147 = -1;
  v148 = (v13 - 0x2788169F1721C5D4) ^ 0xE819A4F8ADA157;
  re::StringID::destroyString((re::StringID *)v128);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v139, "LowResDepth", v128);
  v195[13] = *(_OWORD *)v128;
  *(_DWORD *)&v128[8] = 2;
  *(_QWORD *)&v128[12] = -1;
  v129 = -1;
  v130 = -1;
  v131 = 0;
  v132 = _D9;
  v133 = xmmword_226135530;
  v134 = xmmword_226135540;
  v135 = -1;
  v138 = 0;
  *(_QWORD *)v128 = 2;
  *(_QWORD *)v117 = 0x383635F45D4971A6;
  *(_QWORD *)&v117[8] = "LowResNormal";
  v136 = -1;
  v137 = (v13 - 0x53FB00FC4BDE20F5) ^ 0x1C1B1AFA2EA4B8D3;
  re::StringID::destroyString((re::StringID *)v117);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v128, "LowResNormal", v117);
  v195[14] = *(_OWORD *)v117;
  *(_DWORD *)&v117[8] = 2;
  *(_QWORD *)&v117[12] = -1;
  v118 = -1;
  v119 = -1;
  v120 = 0;
  v121 = _D9;
  v122 = xmmword_226135530;
  v123 = xmmword_226135540;
  v124 = -1;
  v127 = 0;
  *(_QWORD *)v117 = 2;
  *(_QWORD *)v106 = 0x3C338F51B98E5336;
  *(_QWORD *)&v106[8] = "ReceiverMask";
  v125 = -1;
  v126 = (v13 + 0x2C2FD5DAE846AD3DLL) ^ 0x1E19C7A8DCC7299BLL;
  re::StringID::destroyString((re::StringID *)v106);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v117, "ReceiverMask", v106);
  v195[16] = *(_OWORD *)v106;
  *(_DWORD *)&v106[8] = 2;
  *(_QWORD *)&v106[12] = -1;
  v107 = -1;
  v108 = -1;
  v109 = 0;
  v110 = _D9;
  v111 = xmmword_226135530;
  v112 = xmmword_226135540;
  v113 = -1;
  v116 = 0;
  *(_QWORD *)v106 = 2;
  v213.n128_u64[0] = 0xB53CAE319AB7F0C8;
  v213.n128_u64[1] = (unint64_t)"RayTracingMask";
  v114 = -1;
  v115 = (v13 + 0x5C74D5B3099F9330) ^ 0x5A9E5718CD5BF864;
  re::StringID::destroyString((re::StringID *)&v213);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v106, "RayTracingMask", &v213);
  v195[15] = v213;
  *((_QWORD *)&v195[1] + 1) = (4 * HIDWORD(v195[0]) * LODWORD(v195[1]));
  v100 = -1;
  v101 = 0;
  v102 = 1065353216;
  v103 = 0xFFFFFFFF00000020;
  v99 = 2;
  v213.n128_u64[0] = 163860;
  v213.n128_u64[1] = (unint64_t)"Ray";
  v104 = -1;
  v105 = (v13 - 0x61C8864680653167) ^ 0x1400A;
  re::StringID::destroyString((re::StringID *)&v213);
  re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v99, "Ray", &v213);
  v195[20] = v213;
  v93 = -1;
  v94 = 0;
  v95 = 1065353216;
  v96 = 0xFFFFFFFF00000020;
  v92 = 2;
  v213.n128_u64[0] = 0x361253A827D2FD52;
  v213.n128_u64[1] = (unint64_t)"Intersection";
  v97 = -1;
  v98 = (v13 + 0x674439337EA48601) ^ 0x1B0929D413E97EA9;
  v27 = this;
  re::StringID::destroyString((re::StringID *)&v213);
  re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v92, "Intersection", &v213);
  v195[21] = v213;
  v213.n128_u64[0] = 65290051;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)&v213, (double *)&v195[2], 0);
  v213.n128_u64[0] = 65919651;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)&v213, (double *)&v195[3], 0);
  v28 = re::RenderGraph::addNode<re::RenderGraphMeshNode>(RenderGraph, "RayTracedAmbientOcclusionLowResMeshNode");
  v213.n128_u64[0] = (unint64_t)"Ground";
  v213.n128_u64[1] = 6;
  re::DynamicString::operator=((re::RenderGraphMeshNode *)((char *)v28 + 264), (uint64_t)&v213);
  v28 = (re::RenderGraphMeshNode *)((char *)v28 + 216);
  v213 = (__n128)v195[14];
  v214 = 0x100000000;
  v216 = xmmword_2260E5D70;
  v217 = 1;
  v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v28, (uint64_t)&v213);
  v213 = (__n128)v195[13];
  v214 = 0x200000000;
  v216 = xmmword_2260E5D70;
  v217 = 1;
  v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v28, (uint64_t)&v213);
  v29 = re::RenderGraph::addNode<re::RenderGraphMeshNode>(RenderGraph, "RayTracedAmbientOcclusionFullResMeshNode");
  v213.n128_u64[0] = (unint64_t)"FullResGround";
  v213.n128_u64[1] = 13;
  re::DynamicString::operator=((re::RenderGraphMeshNode *)((char *)v29 + 264), (uint64_t)&v213);
  v29 = (re::RenderGraphMeshNode *)((char *)v29 + 216);
  v213 = (__n128)v195[16];
  v214 = 0x100000000;
  v216 = xmmword_2260E5D70;
  v217 = 0;
  v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v29, (uint64_t)&v213);
  v213 = (__n128)v195[3];
  v214 = 0x200000000;
  v216 = xmmword_2260E5D70;
  v217 = 0;
  v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v29, (uint64_t)&v213);
  v213 = (__n128)v195[3];
  v214 = 0x300000000;
  v216 = xmmword_2260E5D70;
  v217 = 256;
  v218 = 0;
  re::DynamicArray<re::TargetWrite>::add(v29, (uint64_t)&v213);
  v31 = re::globalAllocators(v30);
  v32 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31[2] + 32))(v31[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v32, "RayTracedAmbientOcclusionCameraMatchingNode");
  *v33 = &off_24ED85E18;
  v213.n128_u64[0] = (unint64_t)v33;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v32[3] = *((_QWORD *)RenderGraph + 10);
  v32[4] = *((_QWORD *)RenderGraph + 12);
  v32[6] = *((_QWORD *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v32 + 32, v194);
  v34 = (re *)memcpy(v32 + 33, v195, 0x160uLL);
  v35 = re::globalAllocators(v34);
  v36 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35[2] + 32))(v35[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v36, "RayTracedAmbientOcclusionAccelerationStructureNode");
  *v37 = &off_24ED85FA8;
  v213.n128_u64[0] = (unint64_t)v37;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v36[3] = *((_QWORD *)RenderGraph + 10);
  v36[4] = *((_QWORD *)RenderGraph + 12);
  v36[6] = *((_QWORD *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v36 + 32, v194);
  v38 = (re *)memcpy(v36 + 33, v195, 0x160uLL);
  v39 = re::globalAllocators(v38);
  v40 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[2] + 32))(v39[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v40, "RayTracedAmbientOcclusionMaskGenerationNode");
  *v41 = &off_24ED86100;
  v213.n128_u64[0] = (unint64_t)v41;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v40[3] = *((_QWORD *)RenderGraph + 10);
  v40[4] = *((_QWORD *)RenderGraph + 12);
  v40[6] = *((_QWORD *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v40 + 32, v194);
  v42 = (re *)memcpy(v40 + 33, v195, 0x160uLL);
  v43 = re::globalAllocators(v42);
  v44 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43[2] + 32))(v43[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v44, "RayTracedAmbientOcclusionRaysNode");
  *v45 = &off_24ED861A8;
  v213.n128_u64[0] = (unint64_t)v45;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v44[3] = *((_QWORD *)RenderGraph + 10);
  v44[4] = *((_QWORD *)RenderGraph + 12);
  v44[6] = *((_QWORD *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v44 + 32, v194);
  v46 = (re *)memcpy(v44 + 33, v195, 0x160uLL);
  v47 = re::globalAllocators(v46);
  v48 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47[2] + 32))(v47[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v48, "RayTracedAmbientOcclusionIntersectionsNode");
  *v49 = &off_24ED86250;
  v213.n128_u64[0] = (unint64_t)v49;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v48[3] = *((_QWORD *)RenderGraph + 10);
  v48[4] = *((_QWORD *)RenderGraph + 12);
  v48[6] = *((_QWORD *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v48 + 32, v194);
  v50 = (re *)memcpy(v48 + 33, v195, 0x160uLL);
  v51 = re::globalAllocators(v50);
  v52 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51[2] + 32))(v51[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v52, "RayTracedAmbientOcclusionTextureNode");
  *v53 = &off_24ED862F8;
  v213.n128_u64[0] = (unint64_t)v53;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v52[3] = *((_QWORD *)RenderGraph + 10);
  v52[4] = *((_QWORD *)RenderGraph + 12);
  v52[6] = *((_QWORD *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v52 + 32, v194);
  v54 = (re *)memcpy(v52 + 33, v195, 0x160uLL);
  v55 = re::globalAllocators(v54);
  v56 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[2] + 32))(v55[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v56, "RayTracedAmbientOcclusionGradientBlurNode");
  *v57 = &off_24ED863A0;
  v213.n128_u64[0] = (unint64_t)v57;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v56[3] = *((_QWORD *)RenderGraph + 10);
  v56[4] = *((_QWORD *)RenderGraph + 12);
  v56[6] = *((_QWORD *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v56 + 32, v194);
  v58 = (re *)memcpy(v56 + 33, v195, 0x160uLL);
  v59 = re::globalAllocators(v58);
  v60 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59[2] + 32))(v59[2], 616, 8);
  re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v60, "RayTracedAmbientOcclusionAccumulationNode");
  *v61 = &off_24ED86448;
  v213.n128_u64[0] = (unint64_t)v61;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
  v60[3] = *((_QWORD *)RenderGraph + 10);
  v60[4] = *((_QWORD *)RenderGraph + 12);
  v60[6] = *((_QWORD *)RenderGraph + 13);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v60 + 32, v194);
  memcpy(v60 + 33, v195, 0x160uLL);
  v62 = re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(RenderGraph, "RayTracedAmbientOcclusionUpdateDepth");
  v213 = (__n128)v195[13];
  v214 = 0;
  v215 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v62 + 176), &v213);
  v213 = (__n128)v195[5];
  v214 = 0x400000000;
  v216 = xmmword_2260E5D70;
  v217 = 0;
  v218 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v62 + 216), (uint64_t)&v213);
  v63 = re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(RenderGraph, "RayTracedAmbientOcclusionUpdateCount");
  v213 = (__n128)v195[10];
  v214 = 0;
  v215 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v63 + 176), &v213);
  v213 = (__n128)v195[4];
  v214 = 0x400000000;
  v216 = xmmword_2260E5D70;
  v217 = 0;
  v218 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v63 + 216), (uint64_t)&v213);
  v64 = re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(RenderGraph, "RayTracedAmbientOcclusionUpdateAccumulatedAmbientOcclusion");
  v213 = (__n128)v195[11];
  v214 = 0;
  v215 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v64 + 176), &v213);
  v213 = (__n128)v195[6];
  v214 = 0x400000000;
  v216 = xmmword_2260E5D70;
  v217 = 0;
  v218 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v64 + 216), (uint64_t)&v213);
  if (*((_BYTE *)this + 62) && *((_BYTE *)this + 65))
  {
    for (i = 0; i != 5; ++i)
    {
      v67 = re::globalAllocators(v65);
      v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67[2] + 32))(v67[2], 624, 8);
      re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v68, "RayTracedAmbientOcclusionDenoisingNode");
      *(_QWORD *)v69 = &off_24ED864F0;
      *(_DWORD *)(v69 + 616) = 16908287;
      v213.n128_u64[0] = v69;
      re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
      *(_QWORD *)(v68 + 24) = *((_QWORD *)RenderGraph + 10);
      *(_QWORD *)(v68 + 32) = *((_QWORD *)RenderGraph + 12);
      *(_QWORD *)(v68 + 48) = *((_QWORD *)RenderGraph + 13);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v68 + 256), v194);
      v65 = (re *)memcpy((void *)(v68 + 264), v195, 0x160uLL);
      *(_WORD *)(v68 + 616) = i;
      *(_BYTE *)(v68 + 618) = i == 4;
      *(_BYTE *)(v68 + 619) = (i & 1) == 0;
    }
  }
  else
  {
    v70 = re::globalAllocators(v65);
    v71 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70[2] + 32))(v70[2], 616, 8);
    re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v71, "RayTracedAmbientOcclusionBypassDenoisingNode");
    *v72 = &off_24ED86598;
    v213.n128_u64[0] = (unint64_t)v72;
    re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
    v71[3] = *((_QWORD *)RenderGraph + 10);
    v71[4] = *((_QWORD *)RenderGraph + 12);
    v71[6] = *((_QWORD *)RenderGraph + 13);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v71 + 32, v194);
    v65 = (re *)memcpy(v71 + 33, v195, 0x160uLL);
  }
  v73 = *((unsigned __int8 *)v27 + 67);
  v74 = *(uint64_t (**)(void))(*(_QWORD *)re::globalAllocators(v65)[2] + 32);
  if (v73)
  {
    v75 = (uint64_t *)v74();
    v76 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)v75, "RayTracedAmbientOcclusionFullscreenComposite");
    *(_QWORD *)v76 = &off_24ED86640;
    v77 = (uint64_t *)((char *)v76 + 456);
    *(_OWORD *)((char *)v76 + 456) = 0u;
    *(_OWORD *)((char *)v76 + 472) = 0u;
    *(_OWORD *)((char *)v76 + 488) = 0u;
    *(_OWORD *)((char *)v76 + 504) = 0u;
    *(_OWORD *)((char *)v76 + 520) = 0u;
    *(_OWORD *)((char *)v76 + 536) = 0u;
    v213.n128_u64[0] = (unint64_t)v76;
    re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
    v75[3] = *((_QWORD *)RenderGraph + 10);
    v75[4] = *((_QWORD *)RenderGraph + 12);
    v75[6] = *((_QWORD *)RenderGraph + 13);
    v213 = (__n128)v195[2];
    v214 = 0;
    v215 = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v75 + 22), &v213);
    v213 = (__n128)v195[7];
    v214 = 0;
    v215 = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v75 + 22), &v213);
    v213 = (__n128)v195[16];
    v214 = 0;
    v215 = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v75 + 22), &v213);
    v213 = (__n128)v195[2];
    v214 = 0x100000000;
    v216 = xmmword_2260E5D70;
    v217 = 0;
    v218 = 0;
    re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v75 + 27), (uint64_t)&v213);
    v90 = (__n128)v195[2];
    v79 = re::RenderGraphFullscreenNode::setRenderGraphTexture((uint64_t)v75, (const re::DynamicString *)v91, &v90);
    v80 = *(_anonymous_namespace_ **)&v91[0];
    if (*(_QWORD *)&v91[0])
    {
      if ((BYTE8(v91[0]) & 1) != 0)
        v80 = (_anonymous_namespace_ *)(*(uint64_t (**)(double))(**(_QWORD **)&v91[0] + 40))(v79);
      memset(v91, 0, sizeof(v91));
    }
    v88 = (__n128)v195[7];
    v81 = re::RenderGraphFullscreenNode::setRenderGraphTexture((uint64_t)v75, (const re::DynamicString *)v89, &v88);
    v82 = *(_anonymous_namespace_ **)&v89[0];
    if (*(_QWORD *)&v89[0])
    {
      if ((BYTE8(v89[0]) & 1) != 0)
        v82 = (_anonymous_namespace_ *)(*(uint64_t (**)(double))(**(_QWORD **)&v89[0] + 40))(v81);
      memset(v89, 0, sizeof(v89));
    }
    v86 = (__n128)v195[16];
    v83 = re::RenderGraphFullscreenNode::setRenderGraphTexture((uint64_t)v75, (const re::DynamicString *)v87, &v86);
    if (*(_QWORD *)&v87[0])
    {
      if ((BYTE8(v87[0]) & 1) != 0)
        (*(void (**)(double))(**(_QWORD **)&v87[0] + 40))(v83);
      memset(v87, 0, sizeof(v87));
    }
    v213.n128_u64[0] = (unint64_t)"fullscreen";
    v213.n128_u64[1] = 10;
    re::DynamicString::operator=((re::DynamicString *)(v75 + 36), (uint64_t)&v213);
    re::AssetHandle::operator=(v77, (uint64_t *)v27 + 9);
    re::AssetHandle::operator=(v75 + 60, (uint64_t *)v27 + 12);
    re::AssetHandle::operator=(v75 + 63, (uint64_t *)v27 + 15);
    v75[66] = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionProvider *)((char *)v27 + 72));
    if (*((_QWORD *)v27 + 13))
      v75[67] = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionProvider *)((char *)v27 + 96));
    if (*((_QWORD *)v27 + 16))
      v75[68] = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionProvider *)((char *)v27 + 120));
  }
  else
  {
    v84 = (uint64_t *)v74();
    re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode((re::RayTracedAmbientOcclusionNode *)v84, "RayTracedAmbientOcclusionDirectDisplayNode");
    *v85 = &off_24ED866E8;
    v213.n128_u64[0] = (unint64_t)v85;
    re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v213);
    v84[3] = *((_QWORD *)RenderGraph + 10);
    v84[4] = *((_QWORD *)RenderGraph + 12);
    v84[6] = *((_QWORD *)RenderGraph + 13);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v84 + 32, v194);
    memcpy(v84 + 33, v195, 0x160uLL);
  }
  if (v194)

}

uint64_t *re::allocInfo_RayTracedAmbientOcclusionSettings(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_458);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_458))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120610, 0);
    *(uint64_t *)((char *)&qword_254120620 + 6) = 0;
    qword_254120620 = 0;
    qword_254120630 = 0;
    qword_254120638 = 0xFFFFFFFFLL;
    qword_254120610 = (uint64_t)&off_24ED7DAA8;
    qword_254120640 = (uint64_t)"RayTracedAmbientOcclusionSettings";
    dword_254120648 = 0;
    xmmword_254120650 = 0u;
    unk_254120660 = 0u;
    xmmword_254120670 = 0u;
    qword_254120680 = 0;
    __cxa_guard_release(&_MergedGlobals_458);
  }
  return &qword_254120610;
}

void re::initInfo_RayTracedAmbientOcclusionSettings(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  _QWORD v51[2];
  __int128 v52;

  v51[0] = 0xD75D01D3DD85CD42;
  v51[1] = "RayTracedAmbientOcclusionSettings";
  re::StringID::destroyString((re::StringID *)v51);
  *((_OWORD *)this + 2) = v52;
  v4 = atomic_load((unsigned __int8 *)&qword_254120598);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120598);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "rayDistributionVerticalStretchOnGround";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2541205B8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "rayDistributionVerticalStretchOnWall";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541205C0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "whiteLevel";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2541205C8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "minFullIntensityAngle";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xC00000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2541205D0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_short((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "ambientOcclusionType";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x1000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2541205D8 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_BOOL((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "postProcessAmbientOcclusion";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x1200000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_2541205E0 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_BOOL((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "accumulateAmbientOcclusion";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1300000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_2541205E8 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::introspect_BOOL((re *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "temporallyReprojectAmbientOcclusion";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x1400000008;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_2541205F0 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = re::introspect_BOOL((re *)1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "denoiseAmbientOcclusion";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x1500000009;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_2541205F8 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v44 = re::introspect_BOOL((re *)1, v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = "reduceIntensityAtGrazingAngles";
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 32) = 0x160000000ALL;
      *(_DWORD *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = 0;
      *(_QWORD *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_254120600 = v45;
      v46 = re::introspectionAllocator((re *)v45);
      v48 = re::introspect_BOOL((re *)1, v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "compositeAmbientOcclusion";
      *(_QWORD *)(v49 + 16) = v48;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0x170000000DLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_254120608 = v49;
      __cxa_guard_release(&qword_254120598);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_2541205B8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RayTracedAmbientOcclusionSettings>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RayTracedAmbientOcclusionSettings>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RayTracedAmbientOcclusionSettings>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RayTracedAmbientOcclusionSettings>;
  re::IntrospectionRegistry::add(this, v3);
  v50 = v52;
}

double re::internal::defaultConstruct<re::RayTracedAmbientOcclusionSettings>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  result = 0.12500003;
  *(_OWORD *)a3 = xmmword_2261998E0;
  *(_WORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 18) = 16843009;
  *(_WORD *)(a3 + 22) = 256;
  return result;
}

double re::internal::defaultConstructV2<re::RayTracedAmbientOcclusionSettings>(uint64_t a1)
{
  double result;

  result = 0.12500003;
  *(_OWORD *)a1 = xmmword_2261998E0;
  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 18) = 16843009;
  *(_WORD *)(a1 + 22) = 256;
  return result;
}

uint64_t re::introspect_RayTracedAmbientOcclusionSettings(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayTracedAmbientOcclusionSettings", (uint64_t (*)(re::internal *))re::allocInfo_RayTracedAmbientOcclusionSettings, (re::IntrospectionBase *(*)(void))re::initInfo_RayTracedAmbientOcclusionSettings, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RayTracedAmbientOcclusionSettings>, this);
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneScope>(uint64_t a1, char *__s, const char *a3)
{
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = 0x9E3779B97F4A7C17;
  v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v11);
    v8 = (v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  }
  else
  {
    v8 = 0;
  }
  v9 = strlen(a3);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)a3, v9, 0, &v11);
    v6 = ((v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11) - 0x61C8864680B583E9;
  }
  return re::RenderGraphDataStore::tryGet<re::SceneScope>(a1, ((v8 >> 2) + (v8 << 6) + v6) ^ v8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::SimplifiedMeshBufferDeformationIndex>(uint64_t a1, const char *a2)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"Deformer", 8, 0, &v13);
  v4 = (v14 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583E9) ^ v13;
  v5 = strlen(a2);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)a2, v5, 0, &v13);
    v6 = ((v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13) - 0x61C8864680B583E9;
  }
  else
  {
    v6 = 0x9E3779B97F4A7C17;
  }
  v7 = ((v4 >> 2) + (v4 << 6) + v6) ^ v4;
  v8 = (unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE";
  if (((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v13 = (v7 - 0x61C8864680B583E9 + (v8 << 6) + (v8 >> 2)) ^ v8;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v13);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::RayTracedAmbientOcclusionMutablePersistentData::~RayTracedAmbientOcclusionMutablePersistentData(re::RayTracedAmbientOcclusionMutablePersistentData *this)
{
  re::RayTracedAmbientOcclusionMutablePersistentData::~RayTracedAmbientOcclusionMutablePersistentData(this);
  JUMPOUT(0x2276933B8);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = &off_24ED85DD0;
  v2 = (void *)*((_QWORD *)this + 91);
  if (v2)
  {

    *((_QWORD *)this + 91) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 90);
  if (v3)
  {

    *((_QWORD *)this + 90) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 89);
  if (v4)
  {

    *((_QWORD *)this + 89) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 88);
  if (v5)
  {

    *((_QWORD *)this + 88) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 87);
  if (v6)
  {

    *((_QWORD *)this + 87) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 86);
  if (v7)
  {

    *((_QWORD *)this + 86) = 0;
  }
  v8 = (void *)*((_QWORD *)this + 85);
  if (v8)
  {

    *((_QWORD *)this + 85) = 0;
  }
  v9 = (void *)*((_QWORD *)this + 84);
  if (v9)
  {

    *((_QWORD *)this + 84) = 0;
  }
  v10 = (void *)*((_QWORD *)this + 83);
  if (v10)
  {

    *((_QWORD *)this + 83) = 0;
  }
  v11 = (void *)*((_QWORD *)this + 82);
  if (v11)
  {

    *((_QWORD *)this + 82) = 0;
  }
  v12 = (void *)*((_QWORD *)this + 81);
  if (v12)
  {

    *((_QWORD *)this + 81) = 0;
  }
  v13 = (void *)*((_QWORD *)this + 80);
  if (v13)
  {

    *((_QWORD *)this + 80) = 0;
  }
  v14 = (void *)*((_QWORD *)this + 79);
  if (v14)
  {

    *((_QWORD *)this + 79) = 0;
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 568));
  v15 = *((_QWORD *)this + 66);
  if (v15)
  {
    if (*((_QWORD *)this + 70))
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    *((_QWORD *)this + 70) = 0;
    *((_QWORD *)this + 67) = 0;
    *((_QWORD *)this + 68) = 0;
    *((_QWORD *)this + 66) = 0;
    ++*((_DWORD *)this + 138);
  }
  v16 = *((_QWORD *)this + 61);
  if (v16)
  {
    if (*((_QWORD *)this + 65))
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    *((_QWORD *)this + 65) = 0;
    *((_QWORD *)this + 62) = 0;
    *((_QWORD *)this + 63) = 0;
    *((_QWORD *)this + 61) = 0;
    ++*((_DWORD *)this + 128);
  }
  v17 = *((_QWORD *)this + 56);
  if (v17)
  {
    if (*((_QWORD *)this + 60))
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 57) = 0;
    *((_QWORD *)this + 58) = 0;
    *((_QWORD *)this + 56) = 0;
    ++*((_DWORD *)this + 118);
  }
  v18 = *((_QWORD *)this + 51);
  if (v18)
  {
    if (*((_QWORD *)this + 55))
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    *((_QWORD *)this + 55) = 0;
    *((_QWORD *)this + 52) = 0;
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 51) = 0;
    ++*((_DWORD *)this + 108);
  }

  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 37);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 31);

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

double re::RayTracedAmbientOcclusionNode::RayTracedAmbientOcclusionNode(re::RayTracedAmbientOcclusionNode *this, const char *a2)
{
  re::RenderGraphNode *v2;
  double result;

  v2 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *(_QWORD *)v2 = &off_24ED85ED8;
  *((_QWORD *)v2 + 32) = 0;
  *((_QWORD *)v2 + 33) = 0;
  *((_QWORD *)v2 + 34) = 1065353216;
  *((_DWORD *)v2 + 70) = 0;
  *((_QWORD *)v2 + 36) = 0;
  *((_QWORD *)v2 + 37) = 0;
  result = NAN;
  *((_QWORD *)v2 + 38) = -1;
  *((_QWORD *)v2 + 39) = 0;
  *((_QWORD *)v2 + 40) = -1;
  *((_QWORD *)v2 + 41) = 0;
  *((_QWORD *)v2 + 42) = -1;
  *((_QWORD *)v2 + 43) = 0;
  *((_QWORD *)v2 + 44) = -1;
  *((_QWORD *)v2 + 45) = 0;
  *((_QWORD *)v2 + 46) = -1;
  *((_QWORD *)v2 + 47) = 0;
  *((_QWORD *)v2 + 48) = -1;
  *((_QWORD *)v2 + 49) = 0;
  *((_QWORD *)v2 + 50) = -1;
  *((_QWORD *)v2 + 51) = 0;
  *((_QWORD *)v2 + 52) = -1;
  *((_QWORD *)v2 + 53) = 0;
  *((_QWORD *)v2 + 54) = -1;
  *((_QWORD *)v2 + 55) = 0;
  *((_QWORD *)v2 + 56) = -1;
  *((_QWORD *)v2 + 57) = 0;
  *((_QWORD *)v2 + 58) = -1;
  *((_QWORD *)v2 + 59) = 0;
  *((_QWORD *)v2 + 60) = -1;
  *((_QWORD *)v2 + 61) = 0;
  *((_QWORD *)v2 + 62) = -1;
  *((_QWORD *)v2 + 63) = 0;
  *((_QWORD *)v2 + 64) = -1;
  *((_QWORD *)v2 + 65) = 0;
  *((_QWORD *)v2 + 66) = -1;
  *((_QWORD *)v2 + 67) = 0;
  *((_QWORD *)v2 + 68) = -1;
  *((_QWORD *)v2 + 69) = 0;
  *((_QWORD *)v2 + 70) = -1;
  *((_QWORD *)v2 + 71) = 0;
  *((_QWORD *)v2 + 72) = -1;
  *((_QWORD *)v2 + 73) = 0;
  *((_QWORD *)v2 + 74) = -1;
  *((_QWORD *)v2 + 75) = 0;
  *((_QWORD *)v2 + 76) = -1;
  return result;
}

void re::RayTracedAmbientOcclusionCameraMatchingNode::~RayTracedAmbientOcclusionCameraMatchingNode(re::RayTracedAmbientOcclusionCameraMatchingNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RayTracedAmbientOcclusionCameraMatchingNode::setup(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 592) = 1;
}

void re::RayTracedAmbientOcclusionCameraMatchingNode::execute(re::RayTracedAmbientOcclusionCameraMatchingNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  re::FrameContext *v39;
  uint64_t v40;
  void *v41;
  re *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  simd_float4 v66;
  simd_float4 v67;
  simd_float4 v68;
  simd_float4 v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  simd_float4x4 v75;
  _OWORD __src[26];
  simd_float4 v77;
  simd_float4 v78;
  simd_float4 v79;
  simd_float4 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  simd_float4x4 v85;

  v4 = re::RenderGraphDataStore::get<re::CameraData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (!*(_QWORD *)(v4 + 48))
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_34;
  }
  v6 = (float32x4_t *)(v4 + 64);
  __src[2] = *(_OWORD *)(v4 + 64);
  if (!*(_QWORD *)(v4 + 128))
  {
LABEL_34:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_35;
  }
  v7 = v4 + 144;
  v8 = *(_DWORD *)(v4 + 192);
  LODWORD(__src[0]) = *(_DWORD *)(v4 + 144);
  DWORD1(__src[0]) = v8;
  *((_QWORD *)&__src[0] + 1) = *(_QWORD *)(v4 + 148);
  re::Projection::computeMatrix4x4F((re::Projection *)(v4 + 144), (uint64_t)&v75);
  *(_QWORD *)&__src[1] = __PAIR64__(v75.columns[3].u32[2], v75.columns[2].u32[2]);
  v85 = __invert_f4(v75);
  if (!*(_QWORD *)(v7 - 96))
  {
LABEL_35:
    re::internal::assertLog((re::internal *)6, v9, *(double *)v85.columns[0].i64, *(double *)v85.columns[1].i64, *(double *)v85.columns[2].i64, *(double *)v85.columns[3].i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    return;
  }
  v66 = v85.columns[1];
  v67 = v85.columns[0];
  v68 = v85.columns[3];
  v69 = v85.columns[2];
  re::RenderCamera::computeInverseTransform(v6, (uint64_t)&v71);
  v10 = 0;
  v11 = (float32x4_t)v75.columns[0];
  v12 = (float32x4_t)v75.columns[1];
  v13 = (float32x4_t)v75.columns[2];
  v14 = (float32x4_t)v75.columns[3];
  v77 = (simd_float4)v71;
  v78 = (simd_float4)v72;
  v79 = (simd_float4)v73;
  v80 = (simd_float4)v74;
  do
  {
    *(__int128 *)((char *)&v81 + v10) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(*(_OWORD *)((char *)&v77 + v10))), v12, *(float32x2_t *)&v77.f32[v10 / 4], 1), v13, *(float32x4_t *)((char *)&v77 + v10), 2), v14, *(float32x4_t *)((char *)&v77 + v10), 3);
    v10 += 16;
  }
  while (v10 != 64);
  v64 = v82;
  v65 = v81;
  v62 = v84;
  v63 = v83;
  re::RenderCamera::computeLocalTransform((re::RenderCamera *)v6, (uint64_t)&v71);
  v15 = 0;
  v16 = v71;
  v17 = v72;
  v18 = v73;
  v19 = v74;
  v77 = v67;
  v78 = v66;
  v79 = v69;
  v80 = v68;
  do
  {
    *(__int128 *)((char *)&v81 + v15) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)((char *)&v77 + v15))), v17, *(float32x2_t *)&v77.f32[v15 / 4], 1), v18, *(float32x4_t *)((char *)&v77 + v15), 2), v19, *(float32x4_t *)((char *)&v77 + v15), 3);
    v15 += 16;
  }
  while (v15 != 64);
  __src[7] = v65;
  __src[8] = v64;
  __src[9] = v63;
  __src[10] = v62;
  __src[3] = v81;
  __src[4] = v82;
  __src[5] = v83;
  __src[6] = v84;
  v20 = (_OWORD *)*((_QWORD *)this + 32);
  v21 = v20[3];
  __src[11] = v20[2];
  __src[12] = v21;
  v22 = v20[4];
  v23 = v20[5];
  v24 = v20[7];
  __src[15] = v20[6];
  __src[16] = v24;
  __src[13] = v22;
  __src[14] = v23;
  v25 = v20[8];
  v26 = v20[9];
  v27 = v20[10];
  v28 = v20[12];
  __src[20] = v20[11];
  __src[21] = v28;
  __src[18] = v26;
  __src[19] = v27;
  __src[17] = v25;
  v29 = v83;
  v20[6] = v82;
  v20[7] = v29;
  v30 = __src[10];
  v31 = __src[8];
  v20[11] = __src[9];
  v20[12] = v30;
  v32 = __src[7];
  v20[8] = __src[6];
  v20[9] = v32;
  v20[10] = v31;
  v33 = __src[1];
  v20[2] = __src[0];
  v20[3] = v33;
  v34 = __src[3];
  v20[4] = __src[2];
  v20[5] = v34;
  v35 = *((_QWORD *)this + 33);
  *(_QWORD *)&__src[24] = *(_QWORD *)v35;
  DWORD2(__src[24]) = *(_DWORD *)(v35 + 8);
  if (*(_BYTE *)(v35 + 22))
    v36 = *(_DWORD *)(v35 + 12);
  else
    v36 = 0;
  HIDWORD(__src[24]) = v36;
  v37 = *(_BYTE *)(v35 + 18);
  if (v37)
    v37 = *(_BYTE *)(v35 + 19) != 0;
  v38 = 0;
  LOBYTE(__src[25]) = v37;
  BYTE1(__src[25]) = *(_BYTE *)(*((_QWORD *)this + 32) + 29);
  DWORD1(__src[25]) = *((_DWORD *)this + 68);
  v39 = *(re::FrameContext **)a2;
  v40 = 4 * (*(_QWORD *)(*(_QWORD *)a2 + 32) & 0x3FFFFFFFLL);
  do
  {
    *((_QWORD *)&__src[22] + v38) = re::RayTracedAmbientOcclusionCameraMatchingNode::haltonSequence[((int)v40 + (int)v38) % 864];
    ++v38;
  }
  while (v38 != 4);
  re::FrameContext::perFrameAlloc(v39, 0x1A0uLL, 0x10uLL, (uint64_t)&v81);
  v41 = (void *)v82;
  v70 = *((_QWORD *)&v81 + 1);
  v42 = (re *)memcpy((void *)(v81 + DWORD2(v81)), __src, 0x1A0uLL);
  v43 = *((_QWORD *)a2 + 146);
  v44 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE" & 0x8000000000000000) != 0)
  {
    v45 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v46 = 5381;
    do
    {
      v44 = v46;
      v47 = *v45++;
      v46 = (33 * v46) ^ v47;
    }
    while (v47);
  }
  v48 = (*(_QWORD *)(*((_QWORD *)a2 + 5) + 48) + (v44 << 6) + (v44 >> 2) - 0x61C8864680B583E9) ^ v44;
  v49 = re::globalAllocators(v42);
  v50 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49[2] + 32))(v49[2], 24, 8);
  v50[1] = 0;
  v50[2] = 0;
  v51 = *(_QWORD *)(v43 + 16);
  *v50 = &off_24ED85F80;
  if (!v51
    || (v51 = v48 % *(unsigned int *)(v43 + 40),
        v52 = *(unsigned int *)(*(_QWORD *)(v43 + 24) + 4 * v51),
        (_DWORD)v52 == 0x7FFFFFFF))
  {
LABEL_20:
    v53 = *(unsigned int *)(v43 + 52);
    if ((_DWORD)v53 == 0x7FFFFFFF)
    {
      v53 = *(unsigned int *)(v43 + 48);
      v54 = v53;
      if ((_DWORD)v53 == *(_DWORD *)(v43 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v43 + 16, 2 * *(_DWORD *)(v43 + 44));
        LODWORD(v51) = v48 % *(unsigned int *)(v43 + 40);
        v54 = *(_DWORD *)(v43 + 48);
      }
      *(_DWORD *)(v43 + 48) = v54 + 1;
      v55 = *(_QWORD *)(v43 + 32);
      v56 = *(_DWORD *)(v55 + 24 * v53);
    }
    else
    {
      v55 = *(_QWORD *)(v43 + 32);
      v56 = *(_DWORD *)(v55 + 24 * v53);
      *(_DWORD *)(v43 + 52) = v56 & 0x7FFFFFFF;
    }
    v57 = 24 * v53;
    *(_DWORD *)(v55 + v57) = v56 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v43 + 32) + v57) = *(_DWORD *)(*(_QWORD *)(v43 + 32) + 24 * v53) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v43 + 24) + 4 * v51);
    *(_QWORD *)(*(_QWORD *)(v43 + 32) + 24 * v53 + 8) = v48;
    *(_QWORD *)(*(_QWORD *)(v43 + 32) + 24 * v53 + 16) = v50;
    *(_DWORD *)(*(_QWORD *)(v43 + 24) + 4 * v51) = v53;
    ++*(_DWORD *)(v43 + 44);
    ++*(_DWORD *)(v43 + 56);
    v58 = *(_QWORD *)(v43 + 32) + 24 * v53;
    goto LABEL_30;
  }
  v59 = *(_QWORD *)(v43 + 32);
  while (*(_QWORD *)(v59 + 24 * v52 + 8) != v48)
  {
    LODWORD(v52) = *(_DWORD *)(v59 + 24 * v52) & 0x7FFFFFFF;
    if ((_DWORD)v52 == 0x7FFFFFFF)
      goto LABEL_20;
  }
  v58 = v59 + 24 * v52;
LABEL_30:
  v60 = *(_QWORD *)(v58 + 16);
  *(_QWORD *)&v81 = v41;
  *((_QWORD *)&v81 + 1) = v70;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v60 + 8), (void **)&v81);
  v61 = (void *)v81;
  *(_QWORD *)(v60 + 16) = *((_QWORD *)&v81 + 1);
  if (v61)

}

void re::RayTracedAmbientOcclusionNode::~RayTracedAmbientOcclusionNode(re::RayTracedAmbientOcclusionNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED85F80;
  v2 = (void *)a1[1];
  if (v2)
  {

    a1[1] = 0;
  }
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED85F80;
  v2 = (void *)a1[1];
  if (v2)
  {

    a1[1] = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::RayTracedAmbientOcclusionAccelerationStructureNode::~RayTracedAmbientOcclusionAccelerationStructureNode(re::RayTracedAmbientOcclusionAccelerationStructureNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RayTracedAmbientOcclusionAccelerationStructureNode::setup(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 592) = 257;
}

void re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RayTracedAmbientOcclusionAccelerationStructureNode *this, re::RenderGraphContext *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  re::RenderGraphContext *v27;
  unint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  re::RayTracedAmbientOcclusionAccelerationStructureNode *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int *v50;
  uint64_t v51;
  unint64_t v52;
  _anonymous_namespace_ *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  double v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  int *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  float v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  int v85;
  int *v86;
  unint64_t v87;
  unint64_t v88;
  int *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  float32x4_t v96;
  _OWORD *v97;
  uint64_t v98;
  __int128 *v99;
  _OWORD *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  void *v105;
  void *v106;
  char v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int32x2_t v117;
  double v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  __int128 *v131;
  _OWORD *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  re::RayTracedAmbientOcclusionAccelerationStructureNode *v139;
  uint64_t v140;
  unint64_t v141;
  int *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _anonymous_namespace_ *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  unint64_t v185;
  double v186;
  unint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  re::RenderGraphContext *v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  __int128 *v203;
  _OWORD *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  re *v211;
  uint64_t v212;
  unint64_t v213;
  re *v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  std::mutex *v233;
  uint64_t v234;
  std::mutex *v235;
  re::RenderGraphContext *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  re::RenderGraphContext *v246;
  re::RenderGraphContext *v247;
  re::FrameContext **v248;
  re::RenderGraphContext *v249;
  uint64_t v250;
  float32x4_t v251;
  _QWORD v252[2];
  unint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  int v259;
  re::RenderGraphContext *v260;
  _OWORD v261[2];
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265[6];
  uint64_t *v266;
  _BYTE v267[124];
  _BYTE v268[24];
  uint64_t v269;
  _BYTE *v270;
  _BYTE v271[24];
  uint64_t v272;
  _BYTE *v273;
  int v274;
  const char *v275;
  __int16 v276;
  int v277;
  __int16 v278;
  unint64_t v279;
  __int16 v280;
  unint64_t v281;
  uint64_t v282;

  v282 = *MEMORY[0x24BDAC8D0];
  v4 = (std::mutex *)(*((_QWORD *)this + 32) + 568);
  std::mutex::lock(v4);
  v5 = re::RenderGraphDataStore::tryGet<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (!v5)
    goto LABEL_165;
  v6 = v5;
  v7 = atomic_load((unsigned __int8 *)&qword_2541205A8);
  if ((v7 & 1) == 0)
  {
    v214 = (re *)__cxa_guard_acquire(&qword_2541205A8);
    if ((_DWORD)v214)
    {
      qword_2541205A0 = re::hashString(v214, v215);
      __cxa_guard_release(&qword_2541205A8);
    }
  }
  v8 = qword_2541205A0;
  v9 = *(const char **)(v6 + 8);
  v10 = strlen(v9);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)v9, v10, 0, (unint64_t *)v267);
    v11 = ((*(_QWORD *)&v267[8] - 0x61C8864680B583E9 + (*(_QWORD *)v267 << 6) + (*(_QWORD *)v267 >> 2)) ^ *(_QWORD *)v267)
        - 0x61C8864680B583E9;
  }
  else
  {
    v11 = 0x9E3779B97F4A7C17;
  }
  v12 = ((v8 >> 2) + (v8 << 6) + v11) ^ v8;
  v13 = *((_QWORD *)a2 + 146);
  v14 = (unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE";
  if (((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x8000000000000000) != 0)
  {
    v15 = (unsigned __int8 *)((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x7FFFFFFFFFFFFFFFLL);
    v16 = 5381;
    do
    {
      v14 = v16;
      v17 = *v15++;
      v16 = (33 * v16) ^ v17;
    }
    while (v17);
  }
  *(_QWORD *)v267 = (v12 - 0x61C8864680B583E9 + (v14 << 6) + (v14 >> 2)) ^ v14;
  v18 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v13 + 64, (uint64_t *)v267);
  if (!v18 || !*(_QWORD *)v18)
    goto LABEL_165;
  v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 968);
  v21 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  v22 = *(unsigned int *)(*(_QWORD *)v18 + 8);
  v23 = atomic_load((unsigned __int8 *)&qword_2541205B0);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_2541205B0))
  {
    qword_254120688 = 0xFFFFFFFFFFFFFFFLL;
    xmmword_254120690 = 0u;
    unk_2541206A0 = 0u;
    xmmword_2541206B0 = 0u;
    unk_2541206C0 = 0u;
    xmmword_2541206D0 = 0u;
    unk_2541206E0 = 0u;
    xmmword_2541206F0 = 0u;
    __cxa_guard_release(&qword_2541205B0);
  }
  if (*(_QWORD *)(v20 + 40 * (v21 & 7) + 24) <= v22)
    v24 = 0;
  else
    v24 = *(_QWORD *)(v20 + 40 * (v21 & 7) + 40) + 120 * v22;
  if (v24)
    v25 = (uint64_t *)v24;
  else
    v25 = &qword_254120688;
  v26 = v25[6];
  v27 = (re::RenderGraphContext *)(v26 - 1);
  if ((int)v27 < 1)
  {
    v29 = 0;
  }
  else
  {
    v28 = v25[10];
    if (v28 <= (v26 - 2))
      goto LABEL_281;
    LODWORD(v29) = 0;
    v30 = (int *)(v25[9] + 8);
    v31 = (v26 - 1);
    do
    {
      v32 = *v30;
      v30 += 4;
      v29 = (v29 + v32);
      --v31;
    }
    while (v31);
  }
  v33 = (unint64_t)this;
  v34 = *((_QWORD *)this + 32);
  v35 = *(_QWORD *)(v34 + 400);
  if (v35)
  {
    v35 = objc_msgSend((id)v35, "status");
    v34 = *((_QWORD *)this + 32);
    if (v35 == 1)
    {
      objc_storeStrong((id *)(v34 + 392), *(id *)(v34 + 400));
      v36 = *((_QWORD *)this + 32);
      v37 = *(void **)(v36 + 400);
      *(_QWORD *)(v36 + 400) = 0;

      v38 = *((_QWORD *)this + 32);
      v39 = v38 + 344;
      *(_DWORD *)&v267[40] = 0;
      *(_OWORD *)v267 = *(_OWORD *)(v38 + 296);
      *(_OWORD *)(v38 + 296) = 0u;
      *(_QWORD *)&v267[16] = *(_QWORD *)(v38 + 312);
      *(_QWORD *)(v38 + 312) = 0;
      *(_OWORD *)&v267[24] = *(_OWORD *)(v38 + 320);
      *(_OWORD *)(v38 + 320) = xmmword_2260F5A80;
      re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v38 + 296, (uint64_t *)(v38 + 344));
      re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v39, (uint64_t *)v267);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v267);
      re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(*((_QWORD *)this + 32) + 344);
      v40 = *((_QWORD *)this + 32);
      v41 = v40 + 448;
      *(_QWORD *)v267 = *(_QWORD *)(v40 + 408);
      *(_QWORD *)(v40 + 408) = 0;
      *(_OWORD *)&v267[8] = *(_OWORD *)(v40 + 416);
      *(_OWORD *)(v40 + 416) = 0u;
      *(_QWORD *)&v267[32] = *(_QWORD *)(v40 + 440);
      *(_QWORD *)(v40 + 440) = 0;
      ++*(_DWORD *)(v40 + 432);
      v20 = 1;
      *(_DWORD *)&v267[24] = 1;
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v40 + 408, v40 + 448);
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v41, (uint64_t)v267);
      if (*(_QWORD *)v267 && *(_QWORD *)&v267[32])
        (*(void (**)(void))(**(_QWORD **)v267 + 40))();
      v42 = *((_QWORD *)this + 32);
      v21 = v42 + 528;
      *(_QWORD *)v267 = *(_QWORD *)(v42 + 488);
      *(_OWORD *)&v267[8] = *(_OWORD *)(v42 + 496);
      *(_QWORD *)(v42 + 488) = 0;
      *(_QWORD *)(v42 + 496) = 0;
      *(_QWORD *)(v42 + 504) = 0;
      *(_QWORD *)&v267[32] = *(_QWORD *)(v42 + 520);
      *(_QWORD *)(v42 + 520) = 0;
      ++*(_DWORD *)(v42 + 512);
      *(_DWORD *)&v267[24] = 1;
      re::DynamicArray<re::RigComponentConstraint>::operator=(v42 + 488, v42 + 528);
      re::DynamicArray<re::RigComponentConstraint>::operator=(v21, (uint64_t)v267);
      v35 = *(_QWORD *)v267;
      if (*(_QWORD *)v267)
      {
        v19 = *(_QWORD *)&v267[32];
        if (*(_QWORD *)&v267[32])
          v35 = (*(uint64_t (**)(void))(**(_QWORD **)v267 + 40))();
      }
      v34 = *((_QWORD *)this + 32);
      *(_QWORD *)(v34 + 464) = 0;
      ++*(_DWORD *)(v34 + 472);
      *(_QWORD *)(v34 + 544) = 0;
      ++*(_DWORD *)(v34 + 552);
    }
  }
  v249 = v27;
  if (*(_QWORD *)(v34 + 400))
    goto LABEL_34;
  v35 = *(_QWORD *)(v34 + 392);
  if (v35)
  {
    v35 = objc_msgSend((id)v35, "instanceCount");
    if (v35 == (int)v29)
    {
      if ((int)v27 < 1)
        goto LABEL_34;
      v107 = 0;
      v108 = 0;
      v109 = 0;
      v110 = v25[10];
      v111 = v25[14];
      do
      {
        v112 = v109;
        if (v110 <= v109)
          goto LABEL_259;
        if (v111 <= v109)
          goto LABEL_260;
        v113 = *(_DWORD *)(v25[9] + 16 * v109 + 8);
        if (v113 >= 1)
        {
          v114 = *((_QWORD *)this + 32);
          v20 = *(_QWORD *)(v114 + 424);
          v35 = v108;
          if (v20 <= v108)
            v33 = v108;
          else
            v33 = *(_QWORD *)(v114 + 424);
          v108 += v113;
          while (1)
          {
            if (v33 == v35)
              goto LABEL_244;
            v19 = *(_QWORD *)(*(_QWORD *)(v114 + 440) + 8 * v35);
            if (*(_QWORD *)(v25[13] + 8 * v109) != v19)
              break;
            ++v35;
            if (!--v113)
              goto LABEL_114;
          }
          v107 = 1;
          v108 = v35;
          v109 = (int)v27;
        }
LABEL_114:
        ++v109;
      }
      while (v109 < (int)v27);
      if ((v107 & 1) == 0)
        goto LABEL_34;
    }
    v34 = *((_QWORD *)this + 32);
    if ((int)v29 < 1)
    {
      v33 = *(_QWORD *)(v34 + 392);
      *(_QWORD *)(v34 + 392) = 0;
      goto LABEL_225;
    }
  }
  else if ((int)v29 <= 0)
  {
    goto LABEL_34;
  }
  v248 = (re::FrameContext **)a2;
  v235 = v4;
  v149 = *(_QWORD *)(v34 + 248);
  v34 += 248;
  if (!v149)
  {
    v151 = *((_QWORD *)this + 32);
    if (!*(_QWORD *)(v151 + 248))
    {
      v21 = v151 + 344;
    }
  }
  *(_DWORD *)v267 = 0;
  if ((int)v27 >= 1)
  {
    v152 = 0;
    v33 = 0x24BDDE000uLL;
    a2 = (re::RenderGraphContext *)&off_24ED86050;
    while (1)
    {
      v153 = v152;
      v154 = v25[14];
      if (v154 <= v152)
        break;
      v155 = *((_QWORD *)this + 32);
      if (!*(_QWORD *)(v155 + 248)
        || (v156 = *(_QWORD *)(v25[13] + 8 * v152),
            v157 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v156 ^ (v156 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v156 ^ (v156 >> 30))) >> 27)),
            v158 = *(unsigned int *)(*(_QWORD *)(v155 + 256)
                                   + 4 * ((v157 ^ (v157 >> 31)) % *(unsigned int *)(v155 + 272))),
            (_DWORD)v158 == 0x7FFFFFFF))
      {
LABEL_178:
        v160 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE500]), "initWithGroup:", *(_QWORD *)(*((_QWORD *)this + 32) + 224));
        v162 = *(int *)v267;
        v163 = v25[8];
        v164 = *(int *)v267 + 1;
        if (v164 >= v163)
          goto LABEL_252;
        if (v163 <= *(int *)v267)
          goto LABEL_253;
        v21 = (unint64_t)v160;
        v34 = (*(_DWORD *)(v25[7] + 4 * v164) - *(_DWORD *)(v25[7] + 4 * *(int *)v267)) / 0xCuLL;
        objc_msgSend(v160, "setVertexStride:", 12);
        objc_msgSend((id)v21, "setIndexType:", 32);
        objc_msgSend((id)v21, "setTriangleCount:", v34);
        v166 = *(int *)v267;
        v167 = v25[12];
        if (v167 <= *(int *)v267)
          goto LABEL_254;
        if (*(_BYTE *)(v25[11] + *(int *)v267))
          objc_msgSend((id)v21, "setUsage:", 1);
        objc_msgSend((id)v21, "setVertexBuffer:", v25[1]);
        v169 = *(int *)v267;
        v170 = v25[6];
        if (v170 <= *(int *)v267)
          goto LABEL_255;
        objc_msgSend((id)v21, "setVertexBufferOffset:", *(unsigned int *)(v25[5] + 4 * *(int *)v267) + (unint64_t)*((unsigned int *)v25 + 4));
        objc_msgSend((id)v21, "setIndexBuffer:", v25[3]);
        v172 = *(int *)v267;
        v173 = v25[8];
        if (v173 <= *(int *)v267)
          goto LABEL_256;
        objc_msgSend((id)v21, "setIndexBufferOffset:", *(unsigned int *)(v25[7] + 4 * *(int *)v267) + (unint64_t)*((unsigned int *)v25 + 8));
        objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 240), "addObject:", v21);
        LODWORD(v265[0]) = 0;
        LODWORD(v265[0]) = objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 240), "count") - 1;
        v175 = *(int *)v267;
        v176 = v25[14];
        if (v176 <= *(int *)v267)
          goto LABEL_257;
        re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int &>(*((_QWORD *)this + 32) + 248, (uint64_t *)(v25[13] + 8 * *(int *)v267), v265);
        v178 = *(int *)v267;
        v179 = v25[14];
        if (v179 <= *(int *)v267)
          goto LABEL_258;
        re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int &>(*((_QWORD *)this + 32) + 344, (uint64_t *)(v25[13] + 8 * *(int *)v267), v267);
        v34 = (unint64_t)*v248 + 64;
        v21 = (unint64_t)(id)v21;
        v20 = LODWORD(v265[0]);
        v272 = re::globalAllocators((re *)v21)[2];
        v273 = 0;
        v180 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v272 + 32))(v272, 32, 0);
        *(_QWORD *)v180 = &off_24ED86050;
        *(_QWORD *)(v180 + 8) = this;
        *(_QWORD *)(v180 + 16) = v21;
        *(_DWORD *)(v180 + 24) = v20;
        v273 = (_BYTE *)v180;
        re::mtl::CommandBuffer::addCompletionHandler((void **)v34, (uint64_t)v271);
        if (v273)
        {
          (**(void (***)(_BYTE *))v273)(v273);
          if (v273 != v271)
            (*(void (**)(uint64_t))(*(_QWORD *)v272 + 40))(v272);
          v273 = 0;
        }

        v152 = *(_DWORD *)v267;
      }
      else
      {
        v159 = *(_QWORD *)(v155 + 264);
        while (*(_QWORD *)(v159 + 32 * v158 + 16) != v156)
        {
          v158 = *(_DWORD *)(v159 + 32 * v158 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v158 == 0x7FFFFFFF)
            goto LABEL_178;
        }
      }
      *(_DWORD *)v267 = ++v152;
      if (v152 >= (int)v27)
        goto LABEL_193;
    }
LABEL_248:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v153, v154);
    _os_crash();
    __break(1u);
LABEL_249:
    re::internal::assertLog((re::internal *)6, v143, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v29, v144);
    _os_crash();
    __break(1u);
LABEL_250:
    re::internal::assertLog((re::internal *)6, v145, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v29, v146);
    _os_crash();
    __break(1u);
LABEL_251:
    re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v29, v148);
    _os_crash();
    __break(1u);
LABEL_252:
    re::internal::assertLog((re::internal *)6, v161, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v164, v163);
    _os_crash();
    __break(1u);
LABEL_253:
    re::internal::assertLog((re::internal *)6, v161, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v162, v163);
    _os_crash();
    __break(1u);
LABEL_254:
    re::internal::assertLog((re::internal *)6, v165, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v166, v167);
    _os_crash();
    __break(1u);
LABEL_255:
    re::internal::assertLog((re::internal *)6, v168, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v169, v170);
    _os_crash();
    __break(1u);
LABEL_256:
    re::internal::assertLog((re::internal *)6, v171, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v172, v173);
    _os_crash();
    __break(1u);
LABEL_257:
    re::internal::assertLog((re::internal *)6, v174, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v175, v176);
    _os_crash();
    __break(1u);
LABEL_258:
    re::internal::assertLog((re::internal *)6, v177, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v178, v179);
    _os_crash();
    __break(1u);
LABEL_259:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v112, v110);
    _os_crash();
    __break(1u);
LABEL_260:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v112, v111);
    _os_crash();
    __break(1u);
LABEL_261:
    re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v51, v52);
    _os_crash();
    __break(1u);
LABEL_262:
    v251.i64[0] = 0;
    memset(v267, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v274 = 136315906;
    v275 = "operator[]";
    v276 = 1024;
    v277 = 789;
    v278 = 2048;
    v279 = v21;
    v280 = 2048;
    v281 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_263:
    v264 = 0;
    memset(v267, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v274 = 136315906;
    v275 = "operator[]";
    v276 = 1024;
    v277 = 789;
    v278 = 2048;
    v279 = v21;
    v280 = 2048;
    v281 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_264;
  }
LABEL_193:
  v181 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE430]), "initWithGroup:", *(_QWORD *)(*((_QWORD *)this + 32) + 224));
  v182 = *((_QWORD *)this + 32);
  v183 = *(void **)(v182 + 400);
  *(_QWORD *)(v182 + 400) = v181;

  objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 400), "setUsage:", 1);
  re::DynamicArray<double>::resize(*((_QWORD *)this + 32) + 448, v29);
  re::DynamicArray<re::Vector3<float>>::resize(*((_QWORD *)this + 32) + 528, v29);
  v21 = 4 * v29;
  re::FrameContext::perFrameAlloc(*v248, v21, 4uLL, (uint64_t)v267);
  v184 = *(_QWORD *)v267;
  v232 = *(unsigned int *)&v267[8];
  v245 = *(unsigned int *)&v267[12];
  v221 = *(_QWORD *)&v267[16];
  re::FrameContext::perFrameAlloc(*v248, (unint64_t)v29 << 6, 0x10uLL, (uint64_t)v267);
  v241 = *(_QWORD *)v267;
  v229 = *(unsigned int *)&v267[8];
  v185 = *(unsigned int *)&v267[12];
  v218 = *(_QWORD *)&v267[16];
  *(int32x2_t *)&v186 = re::FrameContext::perFrameAlloc(*v248, v21, 4uLL, (uint64_t)v267);
  v20 = *(_QWORD *)v267;
  v226 = *(unsigned int *)&v267[8];
  v187 = *(unsigned int *)&v267[12];
  v216 = *(_QWORD *)&v267[16];
  objc_msgSend(MEMORY[0x24BDBCEB8], "array", v186);
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  if ((int)v27 < 1)
    goto LABEL_218;
  v21 = 0;
  v190 = v184;
  v34 = 0;
  v191 = v245 >> 2;
  v244 = v187 >> 2;
  v245 = v185 >> 6;
  v33 = v191;
  v243 = v20 + v226;
  v242 = v241 + v229;
  v238 = v190 + v232;
  do
  {
    v192 = v25[10];
    if (v192 <= v21)
      goto LABEL_266;
    v193 = (re::RenderGraphContext *)*(unsigned int *)(v25[9] + 16 * v21 + 8);
    v256 = 0;
    v194 = v25[14];
    if (v194 <= v21)
    {
LABEL_267:
      re::internal::assertLog((re::internal *)6, v188, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v21, v194);
      _os_crash();
      __break(1u);
LABEL_268:
      re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v74, v75);
      _os_crash();
      __break(1u);
LABEL_269:
      re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v21, v33);
      _os_crash();
      __break(1u);
LABEL_270:
      re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v98, v77);
      _os_crash();
      __break(1u);
LABEL_271:
      re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v21, v245);
      _os_crash();
      __break(1u);
LABEL_272:
      re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v21, v243);
      _os_crash();
      __break(1u);
LABEL_273:
      re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v74, v104);
      _os_crash();
      __break(1u);
LABEL_274:
      v264 = 0;
      memset(v267, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v274 = 136315906;
      v275 = "operator[]";
      v276 = 1024;
      v277 = 789;
      v278 = 2048;
      v279 = v20;
      v280 = 2048;
      v281 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_275:
      re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v87);
      _os_crash();
      __break(1u);
LABEL_276:
      re::internal::assertLog((re::internal *)6, v90, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v91);
      _os_crash();
      __break(1u);
LABEL_277:
      re::internal::assertLog((re::internal *)6, v90, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v33, v93);
      _os_crash();
      __break(1u);
LABEL_278:
      re::internal::assertLog((re::internal *)6, v90, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v21, v33);
      _os_crash();
      __break(1u);
LABEL_279:
      re::internal::assertLog((re::internal *)6, v90, *(double *)v96.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v21, v245);
      _os_crash();
      __break(1u);
LABEL_280:
      re::internal::assertLog((re::internal *)6, v90, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v21, v243);
      _os_crash();
      __break(1u);
LABEL_281:
      re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v28, v28);
      _os_crash();
      __break(1u);
    }
    v256 = *(uint64_t **)(v25[13] + 8 * v21);
    if ((int)v193 < 1)
      goto LABEL_217;
    v195 = 0;
    a2 = 0;
    LODWORD(v196) = v33 - v34;
    if (v33 >= v34)
      v196 = v196;
    else
      v196 = 0;
    LODWORD(v197) = v245 - v34;
    if (v245 >= v34)
      v197 = v197;
    else
      v197 = 0;
    LODWORD(v198) = v244 - v34;
    if (v244 >= v34)
      v198 = v198;
    else
      v198 = 0;
    v199 = v242 + ((uint64_t)(int)v34 << 6);
    do
    {
      if ((re::RenderGraphContext *)v196 == a2)
        goto LABEL_237;
      *(_DWORD *)(v238 + 4 * (int)v34 + 4 * (_QWORD)a2) = v21;
      v200 = v25[10];
      if (v200 <= v21)
      {
LABEL_238:
        re::internal::assertLog((re::internal *)6, v200, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v21, v200);
        _os_crash();
        __break(1u);
LABEL_239:
        re::internal::assertLog((re::internal *)6, v201, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v202);
        _os_crash();
        __break(1u);
LABEL_240:
        re::internal::assertLog((re::internal *)6, v201, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, (char *)a2 + (int)v34, v245);
        _os_crash();
        __break(1u);
LABEL_241:
        re::internal::assertLog((re::internal *)6, (uint64_t)v203, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, (char *)a2 + (int)v34, v244);
        _os_crash();
        __break(1u);
LABEL_242:
        *(_QWORD *)&v261[0] = 0;
        memset(v267, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v265[0]) = 136315906;
        *(uint64_t *)((char *)v265 + 4) = (uint64_t)"operator[]";
        WORD2(v265[1]) = 1024;
        *(_DWORD *)((char *)&v265[1] + 6) = 789;
        WORD1(v265[2]) = 2048;
        *(uint64_t *)((char *)&v265[2] + 4) = (uint64_t)a2 + (int)v34;
        WORD2(v265[3]) = 2048;
        *(uint64_t *)((char *)&v265[3] + 6) = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_243:
        *(_QWORD *)&v261[0] = 0;
        memset(v267, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v265[0]) = 136315906;
        *(uint64_t *)((char *)v265 + 4) = (uint64_t)"operator[]";
        WORD2(v265[1]) = 1024;
        *(_DWORD *)((char *)&v265[1] + 6) = 789;
        WORD1(v265[2]) = 2048;
        *(uint64_t *)((char *)&v265[2] + 4) = (uint64_t)a2 + (int)v34;
        WORD2(v265[3]) = 2048;
        *(uint64_t *)((char *)&v265[3] + 6) = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_244:
        *(_QWORD *)&v261[0] = 0;
        memset(v267, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v265[0]) = 136315906;
        *(uint64_t *)((char *)v265 + 4) = (uint64_t)"operator[]";
        WORD2(v265[1]) = 1024;
        *(_DWORD *)((char *)&v265[1] + 6) = 789;
        WORD1(v265[2]) = 2048;
        *(uint64_t *)((char *)&v265[2] + 4) = v33;
        WORD2(v265[3]) = 2048;
        *(uint64_t *)((char *)&v265[3] + 6) = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_245:
        re::internal::assertLog((re::internal *)6, v140, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v29, v141);
        _os_crash();
        __break(1u);
LABEL_246:
        re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v47, v48);
        _os_crash();
        __break(1u);
LABEL_247:
        re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v47, v49);
        _os_crash();
        __break(1u);
        goto LABEL_248;
      }
      v201 = v25[9];
      v202 = *(_QWORD *)(v201 + 16 * v21 + 8);
      if (v202 <= (unint64_t)a2)
        goto LABEL_239;
      if ((re::RenderGraphContext *)v197 == a2)
        goto LABEL_240;
      v203 = (__int128 *)(*(_QWORD *)(v201 + 16 * v21) + v195);
      v204 = (_OWORD *)(v199 + v195);
      v205 = *v203;
      v206 = v203[1];
      v207 = v203[3];
      v204[2] = v203[2];
      v204[3] = v207;
      *v204 = v205;
      v204[1] = v206;
      if ((re::RenderGraphContext *)v198 == a2)
        goto LABEL_241;
      *(_DWORD *)(v243 + 4 * (int)v34 + 4 * (_QWORD)a2) = 1;
      v208 = (_QWORD *)*((_QWORD *)this + 32);
      v20 = v208[58];
      if (v20 <= (unint64_t)a2 + (int)v34)
        goto LABEL_242;
      *(_QWORD *)(v208[60] + 8 * (int)v34 + 8 * (_QWORD)a2) = v256;
      v20 = v208[68];
      if (v20 <= (unint64_t)a2 + (int)v34)
        goto LABEL_243;
      v188 = v208[70] + 16 * (int)v34;
      *(_OWORD *)(v188 + 16 * (_QWORD)a2) = *(_OWORD *)(v199 + v195 + 48);
      a2 = (re::RenderGraphContext *)((char *)a2 + 1);
      v195 += 64;
    }
    while (v193 != a2);
    v34 = (v34 + (_DWORD)a2);
LABEL_217:
    objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 240), "objectAtIndexedSubscript:", *(int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((_QWORD *)this + 32) + 248, (uint64_t *)&v256));
    v209 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v189, "addObject:", v209);

    ++v21;
  }
  while ((re::RenderGraphContext *)v21 != v27);
LABEL_218:
  v33 = (unint64_t)v189;
  v210 = (void *)objc_msgSend(v189, "copy");
  objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 400), "setAccelerationStructures:", v210);
  objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 400), "setInstanceBuffer:", v221);
  objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 400), "setInstanceBufferOffset:", v232);
  objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 400), "setTransformBuffer:", v218);
  objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 400), "setTransformBufferOffset:", v229);
  objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 400), "setMaskBuffer:", v216);
  objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 400), "setMaskBufferOffset:", v226);
  v211 = (re *)objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 400), "setInstanceCount:", v29);
  v34 = (unint64_t)*v248 + 64;
  *(_OWORD *)&v267[68] = *((_OWORD *)v25 + 4);
  *(_OWORD *)&v267[84] = *((_OWORD *)v25 + 5);
  *(_OWORD *)&v267[100] = *((_OWORD *)v25 + 6);
  *(_QWORD *)&v267[116] = v25[14];
  *(_OWORD *)&v267[4] = *(_OWORD *)v25;
  *(_OWORD *)&v267[20] = *((_OWORD *)v25 + 1);
  *(_OWORD *)&v267[36] = *((_OWORD *)v25 + 2);
  *(_OWORD *)&v267[52] = *((_OWORD *)v25 + 3);
  v212 = re::globalAllocators(v211)[2];
  v269 = v212;
  v270 = 0;
  if (v212)
    v212 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v212 + 32))(v212, 144, 0);
  *(_QWORD *)v212 = &off_24ED860A8;
  *(_QWORD *)(v212 + 8) = this;
  *(_DWORD *)(v212 + 16) = (_DWORD)v27;
  *(_OWORD *)(v212 + 20) = *(_OWORD *)v267;
  *(_OWORD *)(v212 + 36) = *(_OWORD *)&v267[16];
  *(_OWORD *)(v212 + 84) = *(_OWORD *)&v267[64];
  *(_OWORD *)(v212 + 100) = *(_OWORD *)&v267[80];
  *(_OWORD *)(v212 + 116) = *(_OWORD *)&v267[96];
  *(_OWORD *)(v212 + 128) = *(_OWORD *)&v267[108];
  *(_OWORD *)(v212 + 52) = *(_OWORD *)&v267[32];
  *(_OWORD *)(v212 + 68) = *(_OWORD *)&v267[48];
  v270 = (_BYTE *)v212;
  v20 = (unint64_t)v268;
  re::mtl::CommandBuffer::addCompletionHandler((void **)v34, (uint64_t)v268);
  if (v270)
  {
    (**(void (***)(_BYTE *))v270)(v270);
    if (v270 != v268)
      (*(void (**)(uint64_t))(*(_QWORD *)v269 + 40))(v269);
    v270 = 0;
  }

  v4 = v235;
  a2 = (re::RenderGraphContext *)v248;
LABEL_225:

LABEL_34:
  v43 = this;
  v44 = *((_QWORD *)this + 32);
  if (*(_QWORD *)(v44 + 392))
  {
    if (*(_QWORD *)(v44 + 400))
    {
      v262 = 0;
      memset(v261, 0, sizeof(v261));
      v263 = 0x7FFFFFFFLL;
      v260 = 0;
      v257 = 0;
      v258 = 0;
      v255 = 0;
      v256 = 0;
      v259 = 0;
      v252[1] = 0;
      v253 = 0;
      v252[0] = 0;
      v254 = 0;
      v274 = 0;
      if ((int)v27 <= 0)
        goto LABEL_143;
      v246 = a2;
      v233 = v4;
      a2 = 0;
      v34 = 0;
      v46 = 0;
      v29 = 0x100000000;
      do
      {
        v47 = v46;
        v48 = v25[10];
        if (v48 <= v46)
          goto LABEL_246;
        v49 = v25[14];
        if (v49 <= v47)
          goto LABEL_247;
        v20 = *(_QWORD *)(v25[9] + 16 * v47 + 8);
        v21 = (unint64_t)this;
        v50 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((_QWORD *)this + 32) + 248, (uint64_t *)(v25[13] + 8 * v47));
        if (v50)
        {
          v33 = *v50;
          if (objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 232), "count") > v33)
          {
            v265[0] = 0;
            v51 = v274;
            v52 = v25[14];
            if (v52 <= v274)
              goto LABEL_261;
            v265[0] = *(_QWORD *)(v25[13] + 8 * v274);
            v53 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int &>((uint64_t)v261, v265, &v274);
            if ((int)v20 >= 1)
            {
              v54 = 0;
              v21 = 0;
              v20 = v20;
              v33 = 48;
              while (1)
              {
                v55 = v274;
                if (v34 >= v257)
                {
                  v57 = v34 + 1;
                  if (v257 < v57)
                  {
                    if (v256)
                    {
                      v58 = 8;
                      if (v257)
                        v58 = 2 * v257;
                      if (v58 <= v57)
                        v59 = v57;
                      else
                        v59 = v58;
                      re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(&v256, v59);
                    }
                    else
                    {
                      re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(&v256, v57);
                      ++v259;
                    }
                  }
                  v34 = v258;
                  a2 = v260;
                  v56 = v274;
                }
                else
                {
                  v56 = v274;
                }
                *((_QWORD *)a2 + v34) = v54 + v55;
                v34 = ++v258;
                ++v259;
                v60 = v56;
                v61 = v25[10];
                if (v61 <= v56)
                  break;
                v62 = v25[9];
                v63 = *(_QWORD *)(v62 + 16 * v60 + 8);
                if (v63 <= v21)
                  goto LABEL_227;
                *(_OWORD *)v267 = *(_OWORD *)(*(_QWORD *)(v62 + 16 * v60) + v33);
                re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v252, (__n128 *)v267);
                ++v21;
                v54 += 0x100000000;
                v33 += 64;
                if (v20 == v21)
                  goto LABEL_60;
              }
              re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v56, v61);
              _os_crash();
              __break(1u);
LABEL_227:
              re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v21, v63);
              _os_crash();
              __break(1u);
LABEL_228:
              re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v34 + (int)v55, v245);
              _os_crash();
              __break(1u);
              goto LABEL_229;
            }
LABEL_60:
            v27 = v249;
          }
        }
        v46 = v274 + 1;
        v274 = v46;
      }
      while (v46 < (int)v27);
      v4 = v233;
      a2 = v246;
      if (v253)
      {
        v266 = 0;
        memset(v265, 0, 44);
        re::internal::GeomKDTree<re::Vector3<float>>::build((uint64_t)v265, v253, v255);
        v64 = objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "instanceCount");
        re::FrameContext::perFrameAlloc(*(re::FrameContext **)v246, 4 * v64, 4uLL, (uint64_t)v267);
        v65 = *(_QWORD *)v267;
        v230 = *(unsigned int *)&v267[8];
        v245 = *(unsigned int *)&v267[12];
        v222 = *(_QWORD *)&v267[16];
        re::FrameContext::perFrameAlloc(*(re::FrameContext **)v246, (uint64_t)v64 << 6, 0x10uLL, (uint64_t)v267);
        v33 = *(_QWORD *)v267;
        v227 = *(unsigned int *)&v267[8];
        v66 = *(unsigned int *)&v267[12];
        v219 = *(_QWORD *)&v267[16];
        *(int32x2_t *)&v67 = re::FrameContext::perFrameAlloc(*(re::FrameContext **)v246, 4 * v64, 4uLL, (uint64_t)v267);
        v68 = *(_QWORD *)v267;
        v224 = *(unsigned int *)&v267[8];
        v20 = *(unsigned int *)&v267[12];
        v217 = *(_QWORD *)&v267[16];
        objc_msgSend(MEMORY[0x24BDBCEB8], "array", v67);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        if (v64 >= 1)
        {
          v70 = v65;
          v21 = 0;
          v244 = v70 + v230;
          v239 = v33 + v227;
          v33 = v245 >> 2;
          v245 = v66 >> 6;
          a2 = (re::RenderGraphContext *)(v68 + v224);
          v243 = v20 >> 2;
          v29 = v64;
          v236 = v260;
          do
          {
            v71 = (_QWORD *)*((_QWORD *)this + 32);
            v20 = v71[63];
            if (v20 <= v21)
              goto LABEL_262;
            v251 = *(float32x4_t *)(v71[65] + 16 * v21);
            v250 = 0;
            v20 = v71[53];
            if (v20 <= v21)
              goto LABEL_263;
            v250 = *(_QWORD *)(v71[55] + 8 * v21);
            v72 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v261, &v250);
            if (v72)
            {
              v74 = *v72;
              v75 = v25[10];
              if (v75 <= v74)
                goto LABEL_268;
              v76 = (_QWORD *)(v25[9] + 16 * v74);
              v77 = v76[1];
              if ((int)v77 >= 1)
              {
                v78 = 0;
                v79 = -1;
                v80 = 3.4028e38;
                v81 = 48;
                while (v77 != v78)
                {
                  v82 = vsubq_f32(*(float32x4_t *)(*v76 + v81), v251);
                  v83 = vmulq_f32(v82, v82);
                  v84 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).f32[0];
                  if (v84 < v80)
                  {
                    v80 = v84;
                    v79 = v78;
                  }
                  ++v78;
                  v81 += 64;
                  if (v76[1] == v78)
                    goto LABEL_87;
                }
LABEL_234:
                v213 = (v77 - 1);
                if (v77 < v213)
                  v213 = v77;
                re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v213, v77);
                _os_crash();
                __break(1u);
LABEL_237:
                re::internal::assertLog((re::internal *)6, v188, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, (char *)a2 + (int)v34, v33);
                _os_crash();
                __break(1u);
                goto LABEL_238;
              }
              v79 = -1;
LABEL_87:
              if (v21 >= v33)
                goto LABEL_269;
              *(_DWORD *)(v244 + 4 * v21) = v21;
              v98 = v79;
              if (v77 <= v79)
                goto LABEL_270;
              if (v21 >= v245)
                goto LABEL_271;
              v99 = (__int128 *)(*v76 + ((uint64_t)v79 << 6));
              v100 = (_OWORD *)(v239 + (v21 << 6));
              v101 = *v99;
              v102 = v99[1];
              v103 = v99[3];
              v100[2] = v99[2];
              v100[3] = v103;
              *v100 = v101;
              v100[1] = v102;
              if (v21 >= v243)
                goto LABEL_272;
              *((_DWORD *)a2 + v21) = 1;
              v104 = v25[14];
              if (v104 <= v74)
                goto LABEL_273;
              v94 = *(_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((_QWORD *)this + 32) + 248, (uint64_t *)(v25[13] + 8 * v74));
            }
            else
            {
              v85 = -1;
              v274 = -1;
              if (v265[4])
              {
                *(_QWORD *)v267 = 0x7FF0000000000000;
                re::internal::GeomKDTree<re::Vector3<float>>::findClosestHelper((uint64_t)v265, v266, &v251, (double *)v267, &v274);
                v85 = v274;
              }
              v20 = v85;
              if (v34 <= v85)
                goto LABEL_274;
              v86 = (int *)((char *)v236 + 8 * v85);
              v20 = *v86;
              v87 = v25[14];
              if (v87 <= v20)
                goto LABEL_275;
              v88 = v33;
              v33 = v86[1];
              v89 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((_QWORD *)this + 32) + 248, (uint64_t *)(v25[13] + 8 * v20));
              v91 = v25[10];
              if (v91 <= v20)
                goto LABEL_276;
              v92 = v25[9];
              v93 = *(_QWORD *)(v92 + 16 * v20 + 8);
              if (v93 <= v33)
                goto LABEL_277;
              v94 = *v89;
              v95 = *(_QWORD *)(v92 + 16 * v20) + (v33 << 6);
              *(_OWORD *)v267 = *(_OWORD *)v95;
              *(_OWORD *)&v267[16] = *(_OWORD *)(v95 + 16);
              *(_OWORD *)&v267[32] = *(_OWORD *)(v95 + 32);
              v33 = v88;
              if (v21 >= v88)
                goto LABEL_278;
              v96 = v251;
              v96.i32[3] = *(_DWORD *)(v95 + 60);
              *(_DWORD *)(v244 + 4 * v21) = v21;
              if (v21 >= v245)
                goto LABEL_279;
              v97 = (_OWORD *)(v239 + (v21 << 6));
              *v97 = *(_OWORD *)v267;
              v97[1] = *(_OWORD *)&v267[16];
              v97[2] = *(_OWORD *)&v267[32];
              v97[3] = v96;
              if (v21 >= v243)
                goto LABEL_280;
              *((_DWORD *)a2 + v21) = 0;
            }
            objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 232), "objectAtIndexedSubscript:", v94);
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v69, "addObject:", v105);

            ++v21;
          }
          while (v21 != v29);
        }
        v106 = (void *)objc_msgSend(v69, "copy");
        objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setAccelerationStructures:", v106);
        objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setInstanceBuffer:", v222);
        objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setInstanceBufferOffset:", v230);
        objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setTransformBuffer:", v219);
        objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setTransformBufferOffset:", v227);
        objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setMaskBuffer:", v217);
        objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setMaskBufferOffset:", v224);

        if (v265[2] && v266)
          (*(void (**)(void))(*(_QWORD *)v265[2] + 40))();
        v4 = v233;
        a2 = v246;
        v27 = v249;
      }
      else
      {
LABEL_143:
        v137 = *((_QWORD *)this + 32);
        v138 = *(void **)(v137 + 392);
        *(_QWORD *)(v137 + 392) = 0;

      }
      if (v252[0] && v255)
        (*(void (**)(void))(*(_QWORD *)v252[0] + 40))();
      if (v256 && v260)
        (*(void (**)(void))(*v256 + 40))();
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v261);
      v43 = this;
      goto LABEL_151;
    }
    v34 = 4 * (int)v29;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, v34, 4uLL, (uint64_t)v267);
    v20 = *(_QWORD *)v267;
    v234 = *(unsigned int *)&v267[8];
    v33 = *(unsigned int *)&v267[12];
    v225 = *(_QWORD *)&v267[16];
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, (uint64_t)(int)v29 << 6, 0x10uLL, (uint64_t)v267);
    v115 = *(_QWORD *)v267;
    v228 = *(unsigned int *)&v267[8];
    v116 = *(unsigned int *)&v267[12];
    v220 = *(_QWORD *)&v267[16];
    v247 = a2;
    *(int32x2_t *)&v118 = re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, v34, 4uLL, (uint64_t)v267);
    v231 = *(unsigned int *)&v267[8];
    v223 = *(_QWORD *)&v267[16];
    if ((int)v27 < 1)
    {
LABEL_142:
      objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setInstanceBuffer:", v225, v118);
      objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setInstanceBufferOffset:", v234);
      objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setTransformBuffer:", v220);
      objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setTransformBufferOffset:", v228);
      objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setMaskBuffer:", v223);
      objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 392), "setMaskBufferOffset:", v231);
      a2 = v247;
      v27 = v249;
      v43 = this;
      goto LABEL_151;
    }
    a2 = 0;
    LODWORD(v55) = 0;
    v244 = v116 >> 6;
    v245 = v33 >> 2;
    v240 = *(_QWORD *)v267 + *(unsigned int *)&v267[8];
    v243 = (unint64_t)*(unsigned int *)&v267[12] >> 2;
    v237 = v115 + v228;
    v29 = v20 + v234;
    v21 = 1;
    while (1)
    {
      v119 = v25[10];
      if (v119 <= (unint64_t)a2)
        break;
      v120 = v25[14];
      if (v120 <= (unint64_t)a2)
        goto LABEL_265;
      v20 = *(unsigned int *)(v25[9] + 16 * (_QWORD)a2 + 8);
      objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 232), "objectAtIndexedSubscript:", *(int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((_QWORD *)this + 32) + 248, (uint64_t *)(v25[13] + 8 * (_QWORD)a2)));
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      if ((int)v20 >= 1)
      {
        v123 = 0;
        v34 = 0;
        LODWORD(v124) = v245 - v55;
        if (v245 >= v55)
          v124 = v124;
        else
          v124 = 0;
        LODWORD(v125) = v244 - v55;
        if (v244 >= v55)
          v125 = v125;
        else
          v125 = 0;
        LODWORD(v126) = v243 - v55;
        if (v243 >= v55)
          v126 = v126;
        else
          v126 = 0;
        v127 = v237 + ((uint64_t)(int)v55 << 6);
        do
        {
          if (v124 == v34)
            goto LABEL_228;
          *(_DWORD *)(v29 + 4 * (int)v55 + 4 * v34) = (_DWORD)a2;
          v128 = v25[10];
          if (v128 <= (unint64_t)a2)
          {
LABEL_229:
            re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v128);
            _os_crash();
            __break(1u);
LABEL_230:
            re::internal::assertLog((re::internal *)6, v130, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v34, v130);
            _os_crash();
            __break(1u);
LABEL_231:
            re::internal::assertLog((re::internal *)6, v130, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v34 + (int)v55, v244);
            _os_crash();
            __break(1u);
LABEL_232:
            re::internal::assertLog((re::internal *)6, (uint64_t)v132, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v34 + (int)v55, v243);
            _os_crash();
            __break(1u);
LABEL_233:
            *(_QWORD *)&v261[0] = 0;
            memset(v267, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v265[0]) = 136315906;
            *(uint64_t *)((char *)v265 + 4) = (uint64_t)"operator[]";
            WORD2(v265[1]) = 1024;
            *(_DWORD *)((char *)&v265[1] + 6) = 789;
            WORD1(v265[2]) = 2048;
            *(uint64_t *)((char *)&v265[2] + 4) = v34 + (int)v55;
            WORD2(v265[3]) = 2048;
            *(uint64_t *)((char *)&v265[3] + 6) = v33;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_234;
          }
          v129 = v25[9];
          v130 = *(_QWORD *)(v129 + 16 * (_QWORD)a2 + 8);
          if (v130 <= v34)
            goto LABEL_230;
          if (v125 == v34)
            goto LABEL_231;
          v131 = (__int128 *)(*(_QWORD *)(v129 + 16 * (_QWORD)a2) + v123);
          v132 = (_OWORD *)(v127 + v123);
          v133 = *v131;
          v134 = v131[1];
          v135 = v131[3];
          v132[2] = v131[2];
          v132[3] = v135;
          *v132 = v133;
          v132[1] = v134;
          if (v126 == v34)
            goto LABEL_232;
          *(_DWORD *)(v240 + 4 * (int)v55 + 4 * v34) = 1;
          v136 = *((_QWORD *)this + 32);
          v33 = *(_QWORD *)(v136 + 504);
          if (v33 <= (int)v55 + v34)
            goto LABEL_233;
          v122 = v127 + v123;
          *(_OWORD *)(*(_QWORD *)(v136 + 520) + 16 * (int)v55 + 16 * v34++) = *(_OWORD *)(v127 + v123 + 48);
          v123 += 64;
        }
        while (v20 != v34);
        LODWORD(v55) = v55 + v34;
      }

      a2 = (re::RenderGraphContext *)((char *)a2 + 1);
      if (a2 == v249)
        goto LABEL_142;
    }
LABEL_264:
    re::internal::assertLog((re::internal *)6, *(_QWORD *)&v117, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v119);
    _os_crash();
    __break(1u);
LABEL_265:
    re::internal::assertLog((re::internal *)6, *(_QWORD *)&v117, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v120);
    _os_crash();
    __break(1u);
LABEL_266:
    re::internal::assertLog((re::internal *)6, v188, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v21, v192);
    _os_crash();
    __break(1u);
    goto LABEL_267;
  }
LABEL_151:
  if (*(_QWORD *)(*((_QWORD *)v43 + 32) + 392))
  {
    v139 = v43;
    v21 = (unint64_t)objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104))
                                              + 16));
    if ((int)v27 >= 1)
    {
      v29 = 0;
      do
      {
        v141 = v25[14];
        if (v141 <= v29)
          goto LABEL_245;
        v142 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*((_QWORD *)v139 + 32) + 248, (uint64_t *)(v25[13] + 8 * v29));
        if (v142)
        {
          v34 = *v142;
          if (objc_msgSend(*(id *)(*((_QWORD *)v139 + 32) + 232), "count") > v34)
          {
            objc_msgSend(*(id *)(*((_QWORD *)v139 + 32) + 232), "objectAtIndexedSubscript:", v34);
            v34 = objc_claimAutoreleasedReturnValue();
            objc_msgSend((id)v34, "setVertexBuffer:", v25[1]);
            v144 = v25[6];
            if (v144 <= v29)
              goto LABEL_249;
            objc_msgSend((id)v34, "setVertexBufferOffset:", *(unsigned int *)(v25[5] + 4 * v29) + (unint64_t)*((unsigned int *)v25 + 4));
            objc_msgSend((id)v34, "setIndexBuffer:", v25[3]);
            v146 = v25[8];
            if (v146 <= v29)
              goto LABEL_250;
            objc_msgSend((id)v34, "setIndexBufferOffset:", *(unsigned int *)(v25[7] + 4 * v29) + (unint64_t)*((unsigned int *)v25 + 8));
            v148 = v25[12];
            if (v148 <= v29)
              goto LABEL_251;
            if (*(_BYTE *)(v25[11] + v29))
            {
              re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, (id *)v267);
              re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder>(*((_QWORD **)a2 + 4), (id *)v267);

              objc_msgSend((id)v34, "encodeRefitToCommandBuffer:", v21);
            }

          }
        }
      }
      while ((re::RenderGraphContext *)++v29 != v27);
    }
    re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, (id *)v267);
    re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder>(*((_QWORD **)a2 + 4), (id *)v267);

    objc_msgSend(*(id *)(*((_QWORD *)v139 + 32) + 392), "encodeRefitToCommandBuffer:", v21);
  }
LABEL_165:
  std::mutex::unlock(v4);
}

uint64_t re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int &>(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
        return result;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder>(_QWORD *a1, id *a2)
{
  _QWORD *v3;

  if (*a2)
  {
    re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::ComputeCommandEncoder>(a1, (_QWORD **)a2);
    objc_msgSend(*a2, "endEncoding");
    v3 = *a2;
    *a2 = 0;

  }
}

uint64_t re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(_QWORD *)a1;
    v5 = *a2;
    if (*(_QWORD *)a1)
      v6 = v4 == v5;
    else
      v6 = 1;
    if (v6)
    {
      *(_QWORD *)a1 = v5;
      *a2 = v4;
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = a2[1];
      a2[1] = v7;
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = a2[2];
      a2[2] = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
      *((_DWORD *)a2 + 9) = v8;
    }
    else
    {
      re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
      if (v5)
      {
        v9 = *((_DWORD *)a2 + 7);
        if (*(_DWORD *)(a1 + 24) < v9)
          re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v9);
        v10 = *((unsigned int *)a2 + 8);
        if ((_DWORD)v10)
        {
          v11 = 0;
          for (i = 0; i < v10; ++i)
          {
            v13 = (uint64_t *)(a2[2] + v11);
            if ((v13[1] & 0x80000000) != 0)
            {
              v14 = *v13;
              v15 = *(unsigned int *)(a1 + 24);
              v16 = *v13 % v15;
              v17 = *(unsigned int *)(a1 + 36);
              if ((_DWORD)v17 == 0x7FFFFFFF)
              {
                v17 = *(unsigned int *)(a1 + 32);
                v18 = v17;
                if ((_DWORD)v17 == (_DWORD)v15)
                {
                  re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
                  v16 = v14 % *(unsigned int *)(a1 + 24);
                  v18 = *(_DWORD *)(a1 + 32);
                }
                *(_DWORD *)(a1 + 32) = v18 + 1;
                v19 = *(_QWORD *)(a1 + 16);
                v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              }
              else
              {
                v19 = *(_QWORD *)(a1 + 16);
                v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
                *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
              v21 = *(_QWORD *)(a1 + 8);
              *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v21 + 4 * v16);
              *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
              *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = v13[2];
              *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = *((_DWORD *)v13 + 6);
              *(_DWORD *)(v21 + 4 * v16) = v17;
              ++*(_DWORD *)(a1 + 28);
              v10 = *((unsigned int *)a2 + 8);
            }
            v11 += 32;
          }
        }
        ++*(_DWORD *)(a1 + 40);
      }
    }
  }
  return a1;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::~Callable(uint64_t a1)
{

  return a1;
}

void re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::~Callable(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (std::mutex *)(*(_QWORD *)(v2 + 256) + 568);
  std::mutex::lock(v3);
  objc_msgSend(*(id *)(a1 + 16), "rebuild");
  objc_msgSend(*(id *)(*(_QWORD *)(v2 + 256) + 232), "addObject:", *(_QWORD *)(a1 + 16));
  std::mutex::unlock(v3);
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)a2 = &off_24ED86050;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  return a2;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED86050;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  return a2;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#1},void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

void re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  unint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  _anonymous_namespace_ *v10;
  unint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  std::mutex *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  std::mutex *v30;
  std::mutex *v31;
  std::mutex *v32;
  id v33;
  id v34;
  _QWORD v35[2];
  unint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD v39[2];
  std::mutex *v40;
  int v41;
  uint64_t v42;
  _QWORD v43[2];
  unint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD v47[2];
  std::mutex *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  std::mutex *v57;
  __int16 v58;
  std::mutex *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (std::mutex *)(*(_QWORD *)(v2 + 256) + 568);
  std::mutex::lock(v3);
  v4 = *(int *)(a1 + 16);
  v50 = 0;
  v47[1] = 0;
  v48 = 0;
  v49 = 0;
  v6 = (_anonymous_namespace_ *)re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity(v47, v4);
  ++v49;
  v7 = *(int *)(a1 + 16);
  v46 = 0;
  v43[1] = 0;
  v44 = 0;
  v45 = 0;
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v43, v7);
  ++v45;
  v9 = *(int *)(a1 + 16);
  v42 = 0;
  v39[1] = 0;
  v40 = 0;
  v41 = 0;
  v10 = (_anonymous_namespace_ *)re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity(v39, v9);
  ++v41;
  v11 = *(int *)(a1 + 16);
  v38 = 0;
  v35[1] = 0;
  v36 = 0;
  v37 = 0;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v35, v11);
  ++v37;
  if (*(int *)(a1 + 16) >= 1)
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = *(_QWORD *)(a1 + 136);
      if (v15 <= (unint64_t)v14)
        break;
      objc_msgSend(*(id *)(*(_QWORD *)(v2 + 256) + 232), "objectAtIndexedSubscript:", *(int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*(_QWORD *)(v2 + 256) + 248, (uint64_t *)((char *)&v13->__m_.__sig + *(_QWORD *)(a1 + 128))));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "vertexBuffer");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = v17;
      re::DynamicArray<REResourceSharingClientObject * {__strong}>::add((uint64_t)v47, &v34);

      *(_QWORD *)&v60 = objc_msgSend(v16, "vertexBufferOffset");
      re::DynamicArray<unsigned long>::add(v43, &v60);
      objc_msgSend(v16, "indexBuffer");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = v18;
      re::DynamicArray<REResourceSharingClientObject * {__strong}>::add((uint64_t)v39, &v33);

      *(_QWORD *)&v60 = objc_msgSend(v16, "indexBufferOffset");
      re::DynamicArray<unsigned long>::add(v35, &v60);
      objc_msgSend(v16, "setVertexBuffer:", *(_QWORD *)(a1 + 32));
      v20 = *(_QWORD *)(a1 + 72);
      if (v20 <= (unint64_t)v14)
        goto LABEL_23;
      objc_msgSend(v16, "setVertexBufferOffset:", *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * (_QWORD)v14) + (unint64_t)*(unsigned int *)(a1 + 40));
      objc_msgSend(v16, "setIndexBuffer:", *(_QWORD *)(a1 + 48));
      v22 = *(_QWORD *)(a1 + 88);
      if (v22 <= (unint64_t)v14)
        goto LABEL_24;
      objc_msgSend(v16, "setIndexBufferOffset:", *(unsigned int *)(*(_QWORD *)(a1 + 80) + 4 * (_QWORD)v14) + (unint64_t)*(unsigned int *)(a1 + 56));

      v14 = (std::mutex *)((char *)v14 + 1);
      v13 = (std::mutex *)((char *)v13 + 8);
      if ((uint64_t)v14 >= *(int *)(a1 + 16))
        goto LABEL_7;
    }
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v15);
    _os_crash();
    __break(1u);
LABEL_23:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v20);
    _os_crash();
    __break(1u);
LABEL_24:
    re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v22);
    _os_crash();
    __break(1u);
LABEL_25:
    re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v27);
    _os_crash();
    __break(1u);
LABEL_26:
    v51 = 0;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v30 = (std::mutex *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v52 = 136315906;
    v53 = "operator[]";
    v54 = 1024;
    v55 = 789;
    v56 = 2048;
    v57 = v13;
    v58 = 2048;
    v59 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v51 = 0;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v52 = 136315906;
    v53 = "operator[]";
    v54 = 1024;
    v55 = 789;
    v56 = 2048;
    v57 = v14;
    v58 = 2048;
    v59 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    v51 = 0;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v31 = (std::mutex *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v52 = 136315906;
    v53 = "operator[]";
    v54 = 1024;
    v55 = 789;
    v56 = 2048;
    v57 = v3;
    v58 = 2048;
    v59 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    v51 = 0;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v52 = 136315906;
    v53 = "operator[]";
    v54 = 1024;
    v55 = 789;
    v56 = 2048;
    v57 = v14;
    v58 = 2048;
    v59 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  v32 = v3;
  objc_msgSend(*(id *)(*(_QWORD *)(v2 + 256) + 400), "rebuild");
  if (*(int *)(a1 + 16) >= 1)
  {
    v24 = 0;
    v14 = 0;
    v13 = v48;
    v25 = v50;
    v3 = v40;
    v26 = v42;
    do
    {
      v27 = *(_QWORD *)(a1 + 136);
      if (v27 <= (unint64_t)v14)
        goto LABEL_25;
      objc_msgSend(*(id *)(*(_QWORD *)(v2 + 256) + 232), "objectAtIndexedSubscript:", *(int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*(_QWORD *)(v2 + 256) + 248, (uint64_t *)(*(_QWORD *)(a1 + 128) + v24)));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13 == v14)
        goto LABEL_26;
      v29 = v28;
      objc_msgSend(v28, "setVertexBuffer:", *(_QWORD *)(v25 + 8 * (_QWORD)v14));
      v30 = (std::mutex *)v44;
      if (v44 <= (unint64_t)v14)
        goto LABEL_27;
      objc_msgSend(v29, "setVertexBufferOffset:", *(_QWORD *)(v46 + 8 * (_QWORD)v14));
      if (v3 == v14)
        goto LABEL_28;
      objc_msgSend(v29, "setIndexBuffer:", *(_QWORD *)(v26 + 8 * (_QWORD)v14));
      v31 = (std::mutex *)v36;
      if (v36 <= (unint64_t)v14)
        goto LABEL_29;
      objc_msgSend(v29, "setIndexBufferOffset:", *(_QWORD *)(v38 + 8 * (_QWORD)v14));

      v14 = (std::mutex *)((char *)v14 + 1);
      v24 += 8;
    }
    while ((uint64_t)v14 < *(int *)(a1 + 16));
  }
  if (v35[0] && v38)
    (*(void (**)(void))(*(_QWORD *)v35[0] + 40))();
  re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v39);
  if (v43[0] && v46)
    (*(void (**)(void))(*(_QWORD *)v43[0] + 40))();
  re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v47);
  std::mutex::unlock(v32);
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_24ED860A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_OWORD *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  v5 = *(_OWORD *)(a1 + 88);
  v6 = *(_OWORD *)(a1 + 104);
  v7 = *(_OWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v7;
  *(_OWORD *)(a2 + 104) = v6;
  *(_OWORD *)(a2 + 88) = v5;
  return a2;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_24ED860A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_OWORD *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  v5 = *(_OWORD *)(a1 + 88);
  v6 = *(_OWORD *)(a1 + 104);
  v7 = *(_OWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v7;
  *(_OWORD *)(a2 + 104) = v6;
  *(_OWORD *)(a2 + 88) = v5;
  return a2;
}

uint64_t re::internal::Callable<re::RayTracedAmbientOcclusionAccelerationStructureNode::execute(re::RenderGraphContext &)::{lambda(re::mtl::CommandBuffer const&)#2},void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 144;
}

void re::RayTracedAmbientOcclusionMaskGenerationNode::~RayTracedAmbientOcclusionMaskGenerationNode(re::RayTracedAmbientOcclusionMaskGenerationNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RayTracedAmbientOcclusionMaskGenerationNode::setup(re::RayTracedAmbientOcclusionMaskGenerationNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  re::RayTracedAmbientOcclusionMaskGenerationNode *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;
  int v10;
  int v11;
  uint64_t v12;

  v4 = this;
  v12 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 296, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 472, (uint64_t)&v6);
  v4 = (re::RayTracedAmbientOcclusionMaskGenerationNode *)((char *)v4 + 504);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v4, (uint64_t)&v6);
}

void re::RayTracedAmbientOcclusionMaskGenerationNode::execute(re::RayTracedAmbientOcclusionMaskGenerationNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;

  v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = *(id *)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 16);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 296, 0, 0, &v15);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 472, 0, 0, &v14);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v13);
  v7 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v7, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v12);
  objc_msgSend(v12, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 664));
  objc_msgSend(v12, "setBuffer:offset:atIndex:", v5, v6, 0);
  objc_msgSend(v12, "setTexture:atIndex:", v15, 0);
  objc_msgSend(v12, "setTexture:atIndex:", v14, 1);
  objc_msgSend(v12, "setTexture:atIndex:", v13, 2);
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v12, (id *)(*((_QWORD *)this + 32) + 664), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  objc_msgSend(v12, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 672));
  objc_msgSend(v12, "setTexture:atIndex:", v13, 0);
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v12, (id *)(*((_QWORD *)this + 32) + 672), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  objc_msgSend(v12, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 680));
  objc_msgSend(v12, "setTexture:atIndex:", v13, 0);
  v8 = *((_QWORD *)a2 + 1);
  v11 = v12;
  re::RenderManager::sampleComputeEncoderMTLCounterBegin(v8, &v11, 1u);

  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v12, (id *)(*((_QWORD *)this + 32) + 680), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  v9 = *((_QWORD *)a2 + 1);
  v10 = v12;
  re::RenderManager::sampleComputeEncoderMTLCounterEnd(v9, &v10, 1u);

  if (v13)
  if (v14)

  if (v15)
  if (v5)

}

uint64_t re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(void *a1, void **a2, id *a3, unsigned int a4, unsigned int a5)
{
  unsigned int v9;
  unsigned int v10;
  void *v11;
  void *v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (objc_msgSend(a1, "supportsFamily:", 1004))
  {
    v9 = objc_msgSend(*a3, sel_threadExecutionWidth);
    v10 = objc_msgSend(*a3, sel_maxTotalThreadsPerThreadgroup);
    v11 = *a2;
    v16 = a4;
    v17 = a5;
    v18 = 1;
    v14.i64[0] = v9;
    v14.i64[1] = v10 / v9;
    v15 = 1;
    return objc_msgSend(v11, "dispatchThreads:threadsPerThreadgroup:", &v16, &v14);
  }
  else
  {
    v13 = *a2;
    v16 = (a4 + 7) >> 3;
    v17 = (a5 + 7) >> 3;
    v18 = 1;
    v14 = vdupq_n_s64(8uLL);
    v15 = 1;
    return objc_msgSend(v13, "dispatchThreadgroups:threadsPerThreadgroup:", &v16, &v14);
  }
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_33RayTracedAmbientOcclusionExecDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::RayTracedAmbientOcclusionRaysNode::~RayTracedAmbientOcclusionRaysNode(re::RayTracedAmbientOcclusionRaysNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RayTracedAmbientOcclusionRaysNode::setup(re::RayTracedAmbientOcclusionRaysNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = 0x500000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write(a2, (uint64_t)this + 584, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 472, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 488, (uint64_t)&v5);
}

void re::RayTracedAmbientOcclusionRaysNode::execute(re::RayTracedAmbientOcclusionRaysNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;

  v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = *(id *)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 16);
  v7 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 584);
  v8 = *(id *)v7;
  v9 = *(unsigned int *)(v7 + 8);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v18);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 472, 0, 0, &v17);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 488, 0, 0, &v16);
  v10 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v10, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v15);
  objc_msgSend(v15, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 688));
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v5, v6, 0);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v8, v9, 1);
  objc_msgSend(v15, "setTexture:atIndex:", v18, 0);
  objc_msgSend(v15, "setTexture:atIndex:", v17, 1);
  objc_msgSend(v15, "setTexture:atIndex:", v16, 2);
  v11 = *((_QWORD *)a2 + 1);
  v14 = v15;
  re::RenderManager::sampleComputeEncoderMTLCounterBegin(v11, &v14, 1u);

  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v15, (id *)(*((_QWORD *)this + 32) + 688), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  v12 = *((_QWORD *)a2 + 1);
  v13 = v15;
  re::RenderManager::sampleComputeEncoderMTLCounterEnd(v12, &v13, 1u);

  if (v16)
  if (v17)

  if (v18)
  if (v8)

  if (v5)
}

void re::RayTracedAmbientOcclusionIntersectionsNode::~RayTracedAmbientOcclusionIntersectionsNode(re::RayTracedAmbientOcclusionIntersectionsNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RayTracedAmbientOcclusionIntersectionsNode::setup(re::RayTracedAmbientOcclusionIntersectionsNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 584, (uint64_t)&v5);
  v5 = 0x500000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write(a2, (uint64_t)this + 600, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v5);
  *((_BYTE *)a2 + 593) = 1;
}

void re::RayTracedAmbientOcclusionIntersectionsNode::execute(re::RayTracedAmbientOcclusionIntersectionsNode *this, re::RenderGraphContext *a2)
{
  std::mutex *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;

  v4 = (std::mutex *)(*((_QWORD *)this + 32) + 568);
  std::mutex::lock(v4);
  v5 = *(void **)(*((_QWORD *)this + 32) + 392);
  if (v5 && objc_msgSend(v5, "status") == 1)
  {
    v6 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1)
                                                                                             + 104))
                           + 16));
    v7 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 584);
    v8 = *(id *)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 600);
    v11 = *(id *)v10;
    v12 = *(unsigned int *)(v10 + 8);
    re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v17);
    re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder>(*((_QWORD **)a2 + 4), &v17);

    objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 216), "encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:", v6, 1, v8, v9, v11, v12, *((_QWORD *)this + 36), *(_QWORD *)(*((_QWORD *)this + 32) + 392));
    if (v11)

    if (v8)
  }
  else
  {
    v13 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 584);
    v14 = *(id *)v13;
    v15 = *(unsigned int *)(v13 + 8);
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v17);
    re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v16);
    objc_msgSend(v16, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 696));
    objc_msgSend(v16, "setBuffer:offset:atIndex:", v14, v15, 0);
    objc_msgSend(v16, "setTexture:atIndex:", v17, 0);
    re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v16, (id *)(*((_QWORD *)this + 32) + 696), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
    re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v16);

    if (v17)
    if (v14)

  }
  std::mutex::unlock(v4);
}

void re::RayTracedAmbientOcclusionTextureNode::~RayTracedAmbientOcclusionTextureNode(re::RayTracedAmbientOcclusionTextureNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RayTracedAmbientOcclusionTextureNode::setup(re::RayTracedAmbientOcclusionTextureNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 584, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 600, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 440, (uint64_t)&v6);
}

void re::RayTracedAmbientOcclusionTextureNode::execute(re::RayTracedAmbientOcclusionTextureNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;

  v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = *(id *)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 16);
  v7 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 584);
  v8 = *(id *)v7;
  v9 = *(unsigned int *)(v7 + 8);
  v10 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 600);
  v11 = *(id *)v10;
  v12 = *(unsigned int *)(v10 + 8);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v24);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 440, 0, 0, &v23);
  v13 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v13, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v21);
  v14 = v21;
  v21 = 0;
  v22 = v14;

  objc_msgSend(v14, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 704));
  objc_msgSend(v14, "setBuffer:offset:atIndex:", v5, v6, 0);
  objc_msgSend(v14, "setBuffer:offset:atIndex:", v8, v9, 1);
  objc_msgSend(v14, "setBuffer:offset:atIndex:", v11, v12, 2);
  objc_msgSend(v14, "setTexture:atIndex:", v24, 0);
  objc_msgSend(v14, "setTexture:atIndex:", v23, 1);
  v15 = *((_QWORD *)a2 + 1);
  v16 = v14;
  v20 = v16;
  re::RenderManager::sampleComputeEncoderMTLCounterBegin(v15, &v20, 1u);

  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v22, (id *)(*((_QWORD *)this + 32) + 704), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  v17 = *((_QWORD *)a2 + 1);
  v18 = v16;
  v19 = v18;
  re::RenderManager::sampleComputeEncoderMTLCounterEnd(v17, &v19, 1u);

  if (v23)
  if (v24)

  if (v11)
  if (v8)

  if (v5)
}

void re::RayTracedAmbientOcclusionGradientBlurNode::~RayTracedAmbientOcclusionGradientBlurNode(re::RayTracedAmbientOcclusionGradientBlurNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RayTracedAmbientOcclusionGradientBlurNode::setup(re::RayTracedAmbientOcclusionGradientBlurNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 360, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 376, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 440, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  result = re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 392, (uint64_t)&v6);
  *((_BYTE *)a2 + 593) = 1;
  return result;
}

void re::RayTracedAmbientOcclusionGradientBlurNode::execute(re::RayTracedAmbientOcclusionGradientBlurNode *this, re::RenderGraphContext *a2)
{
  _QWORD *v4;
  id v5;
  id v6;
  id v7;
  double v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v4 = *(_QWORD **)a2;
  v5 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104))
                         + 16));
  re::RayTracedAmbientOcclusionNode::encodeSignalMpsEvent(this, a2, 0);
  v6 = *(id *)(re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48))+ 8);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 360, 0, 0, &v19);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v18);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 440, 0, 0, &v17);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 392, 0, 0, &v16);
  v7 = objc_alloc(MEMORY[0x24BDDE3C8]);
  LODWORD(v8) = 3.5;
  v9 = (void *)objc_msgSend(v7, "initWithDevice:sigma:", *v4, v8);
  re::RayTracedAmbientOcclusionNode::encodeWaitForMpsEvent(this, a2, 0);
  v10 = v18;
  v11 = v19;
  v12 = v5;
  objc_msgSend(v9, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v12, v11, v10);

  v13 = v16;
  v14 = v17;
  v15 = v12;
  objc_msgSend(v9, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v15, v14, v13);

  re::RayTracedAmbientOcclusionNode::encodeSignalMpsEvent(this, a2, 1);
  if (v16)

  if (v17)
  if (v18)

  if (v19)
  if (v6)

}

void re::RayTracedAmbientOcclusionNode::encodeSignalMpsEvent(re::RayTracedAmbientOcclusionNode *this, re::RenderGraphContext *a2, uint64_t a3)
{
  id v6;

  v6 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104))
                         + 16));
  objc_msgSend(v6, "encodeSignalEvent:value:", *(_QWORD *)(*((_QWORD *)this + 32) + 632), 2 * (*(_QWORD *)(*(_QWORD *)a2 + 32) & 0xFFFFFFFFFFFFFFFLL) + a3);

}

void re::RayTracedAmbientOcclusionNode::encodeWaitForMpsEvent(re::RayTracedAmbientOcclusionNode *this, re::RenderGraphContext *a2, uint64_t a3)
{
  id v6;

  v6 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104))
                         + 16));
  objc_msgSend(v6, "encodeWaitForEvent:value:", *(_QWORD *)(*((_QWORD *)this + 32) + 632), 2 * (*(_QWORD *)(*(_QWORD *)a2 + 32) & 0xFFFFFFFFFFFFFFFLL) + a3);

}

void re::RayTracedAmbientOcclusionAccumulationNode::~RayTracedAmbientOcclusionAccumulationNode(re::RayTracedAmbientOcclusionAccumulationNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RayTracedAmbientOcclusionAccumulationNode::setup(re::RayTracedAmbientOcclusionAccumulationNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  re::RayTracedAmbientOcclusionAccumulationNode *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v4 = this;
  v11 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 344, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 328, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 376, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 360, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 472, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 488, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v4 + 424, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4 + 392, (uint64_t)&v6);
  v4 = (re::RayTracedAmbientOcclusionAccumulationNode *)((char *)v4 + 440);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v4, (uint64_t)&v6);
}

void re::RayTracedAmbientOcclusionAccumulationNode::execute(re::RayTracedAmbientOcclusionAccumulationNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  re::RayTracedAmbientOcclusionNode::encodeWaitForMpsEvent(this, a2, 1);
  v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = *(id *)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 16);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v20);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 344, 0, 0, &v19);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 328, 0, 0, &v18);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v17);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 360, 0, 0, &v16);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 472, 0, 0, &v15);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 488, 0, 0, &v14);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 424, 0, 0, &v13);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 392, 0, 0, &v12);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 440, 0, 0, &v11);
  v7 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v7, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v9);
  v8 = v9;
  v9 = 0;
  v10 = v8;

  objc_msgSend(v8, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 712));
  objc_msgSend(v8, "setBuffer:offset:atIndex:", v5, v6, 0);
  objc_msgSend(v8, "setTexture:atIndex:", v20, 0);
  objc_msgSend(v8, "setTexture:atIndex:", v19, 1);
  objc_msgSend(v8, "setTexture:atIndex:", v18, 2);
  objc_msgSend(v8, "setTexture:atIndex:", v17, 3);
  objc_msgSend(v8, "setTexture:atIndex:", v16, 4);
  objc_msgSend(v8, "setTexture:atIndex:", v15, 5);
  objc_msgSend(v8, "setTexture:atIndex:", v14, 6);
  objc_msgSend(v8, "setTexture:atIndex:", v13, 7);
  objc_msgSend(v8, "setTexture:atIndex:", v12, 8);
  objc_msgSend(v8, "setTexture:atIndex:", v11, 9);
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v10, (id *)(*((_QWORD *)this + 32) + 712), *((_DWORD *)this + 69), *((_DWORD *)this + 70));

  if (v11)
  if (v12)

  if (v13)
  if (v14)

  if (v15)
  if (v16)

  if (v17)
  if (v18)

  if (v19)
  if (v20)

  if (v5)
}

void re::RayTracedAmbientOcclusionDenoisingNode::~RayTracedAmbientOcclusionDenoisingNode(re::RayTracedAmbientOcclusionDenoisingNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RayTracedAmbientOcclusionDenoisingNode::setup(re::RayTracedAmbientOcclusionDenoisingNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 504, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 472, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 488, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 424, (uint64_t)&v6);
  if (*((_BYTE *)this + 619))
  {
    *(_DWORD *)((char *)&v6 + 3) = 0;
    LODWORD(v6) = 0;
    v7 = 2;
    re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 440, (uint64_t)&v6);
    v5 = (char *)this + 376;
  }
  else
  {
    *(_DWORD *)((char *)&v6 + 3) = 0;
    LODWORD(v6) = 0;
    v7 = 2;
    re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 376, (uint64_t)&v6);
    v5 = (char *)this + 440;
  }
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v5, (uint64_t)&v6);
  if (!*((_WORD *)this + 308))
  {
    *(_DWORD *)((char *)&v6 + 3) = 0;
    LODWORD(v6) = 0;
    v7 = 2;
    re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 360, (uint64_t)&v6);
  }
  *((_BYTE *)a2 + 593) = 1;
}

void re::RayTracedAmbientOcclusionDenoisingNode::execute(re::RayTracedAmbientOcclusionDenoisingNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id *v7;
  id *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  int v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = *(id *)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 16);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 504, 0, 0, &v22);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 472, 0, 0, &v21);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 488, 0, 0, &v20);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 424, 0, 0, &v19);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 440, 0, 0, &v18);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v17);
  v16 = 0;
  LOWORD(v16) = *((_WORD *)this + 308);
  BYTE2(v16) = *((_BYTE *)this + 618);
  re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v15);
  objc_msgSend(v15, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 720));
  objc_msgSend(v15, "setBytes:length:atIndex:", &v16, 4, 0);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v5, v6, 1);
  objc_msgSend(v15, "setTexture:atIndex:", v22, 0);
  objc_msgSend(v15, "setTexture:atIndex:", v21, 1);
  objc_msgSend(v15, "setTexture:atIndex:", v20, 2);
  objc_msgSend(v15, "setTexture:atIndex:", v19, 3);
  if (*((_BYTE *)this + 619))
    v7 = &v18;
  else
    v7 = &v17;
  if (*((_BYTE *)this + 619))
    v8 = &v17;
  else
    v8 = &v18;
  objc_msgSend(v15, "setTexture:atIndex:", *v7, 4);
  objc_msgSend(v15, "setTexture:atIndex:", *v8, 5);
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v15, (id *)(*((_QWORD *)this + 32) + 720), *((_DWORD *)this + 69), *((_DWORD *)this + 70));
  re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v15);
  if (*((_BYTE *)this + 618) && !*((_BYTE *)this + 619))
  {
    v9 = *(_QWORD **)a2;
    v10 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1)
                                                                                              + 104))
                            + 16));
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE3A0]), "initWithDevice:srcAlpha:destAlpha:backgroundColor:conversionInfo:", *v9, 1, 1, 0, 0);
    re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v15);
    v12 = v17;
    v13 = v18;
    v14 = v10;
    objc_msgSend(v11, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v14, v13, v12);

  }
  if (v17)

  if (v18)
  if (v19)

  if (v20)
  if (v21)

  if (v22)
  if (v5)

}

void re::RayTracedAmbientOcclusionBypassDenoisingNode::~RayTracedAmbientOcclusionBypassDenoisingNode(re::RayTracedAmbientOcclusionBypassDenoisingNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RayTracedAmbientOcclusionBypassDenoisingNode::setup(re::RayTracedAmbientOcclusionBypassDenoisingNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  _QWORD v6[2];
  __int128 v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)v6 + 3) = 0;
  LODWORD(v6[0]) = 0;
  v6[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 360, (uint64_t)v6);
  v6[0] = 0x500000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 376, (uint64_t)v6);
}

void re::RayTracedAmbientOcclusionBypassDenoisingNode::execute(re::RayTracedAmbientOcclusionBypassDenoisingNode *this, re::RenderGraphContext *a2)
{
  id *v4;
  void *v5;
  id v6;
  id v7;

  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 360, 0, 0, &v7);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v6);
  v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v5);
  objc_msgSend(v5, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 728));
  objc_msgSend(v5, "setTexture:atIndex:", v7, 0);
  objc_msgSend(v5, "setTexture:atIndex:", v6, 1);
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v5, (id *)(*((_QWORD *)this + 32) + 728), *((_DWORD *)this + 69), *((_DWORD *)this + 70));

  if (v6)
  if (v7)

}

void re::RayTracedAmbientOcclusionCompositeNode::~RayTracedAmbientOcclusionCompositeNode(re::RayTracedAmbientOcclusionCompositeNode *this)
{
  re::RayTracedAmbientOcclusionCompositeNode::~RayTracedAmbientOcclusionCompositeNode(this);
  JUMPOUT(0x2276933B8);
}

{
  *(_QWORD *)this = &off_24ED86640;
  re::AssetHandle::~AssetHandle((re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 504));
  re::AssetHandle::~AssetHandle((re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 480));
  re::AssetHandle::~AssetHandle((re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 456));
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
}

void re::RayTracedAmbientOcclusionCompositeNode::getMaterialParameterTables(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  re::MaterialParameterBlock *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  re::MaterialParameterBlock *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  re::MaterialParameterBlock *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 60));
  if (v4)
  {
    v5 = *(re::MaterialParameterBlock **)(v4 + 1672);
    if (v5)
    {
      v6 = a1[61];
      v7 = v6 ? *(_QWORD *)(v6 + 664) : 0;
      v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
      v20 = v7 ^ (v8 >> 31) ^ v8;
      re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v5, &v19);
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v20, &v19);
      if (v19)

    }
  }
  v9 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 63));
  if (v9)
  {
    v10 = *(re::MaterialParameterBlock **)(v9 + 1672);
    if (v10)
    {
      v11 = a1[64];
      v12 = v11 ? *(_QWORD *)(v11 + 664) : 0;
      v13 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
      v20 = v12 ^ (v13 >> 31) ^ v13;
      re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v10, &v19);
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v20, &v19);
      if (v19)

    }
  }
  v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 57));
  if (v14)
  {
    v15 = *(re::MaterialParameterBlock **)(v14 + 1672);
    if (v15)
    {
      v16 = a1[58];
      if (v16)
        v17 = *(_QWORD *)(v16 + 664);
      else
        v17 = 0;
      v18 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
      v20 = v17 ^ (v18 >> 31) ^ v18;
      re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v15, &v19);
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v20, &v19);
      if (v19)

    }
  }
  re::RenderGraphFullscreenNode::getMaterialParameterTables((uint64_t)a1, a2);
}

void re::RayTracedAmbientOcclusionCompositeNode::configure(re::RayTracedAmbientOcclusionCompositeNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  *((_QWORD *)this + 66) = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 456));
  if (*((_QWORD *)this + 61))
    *((_QWORD *)this + 67) = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 480));
  if (*((_QWORD *)this + 64))
    *((_QWORD *)this + 68) = re::AssetHandle::asset<re::MaterialAsset>((re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 504));
  re::RenderGraphFullscreenNode::configure(this, a2, a3, a4);
}

void re::RayTracedAmbientOcclusionCompositeNode::execute(re::RayTracedAmbientOcclusionCompositeNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  re::BufferTable *v7;
  uint64_t v8;
  const re::AssetHandle *v9;
  uint64_t v10;
  re::BufferTable *v11;
  uint64_t v12;
  _QWORD v13[7];
  id v14[2];

  v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::RayTracedAmbientOcclusionExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = *(id *)(v4 + 8);
  v6 = *(void **)(v4 + 16);
  v14[0] = v5;
  v14[1] = v6;
  v7 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
  v13[0] = 0x7A5B733119923A71;
  re::BufferTable::setBuffer(v7, (const re::WeakStringID *)v13, (uint64_t)v14);
  re::RenderGraphContext::rtInfo(a2, *((re::RenderGraphNodeBase **)a2 + 5), (uint64_t)v13);
  v8 = *((_QWORD *)this + 67);
  if (v8 && (HIDWORD(v13[0]) == 81 || HIDWORD(v13[0]) == 71))
  {
    *((_QWORD *)this + 40) = v8;
    v9 = (re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 480);
  }
  else
  {
    v10 = *((_QWORD *)this + 68);
    if (v10 && (HIDWORD(v13[0]) == 80 || HIDWORD(v13[0]) == 70))
    {
      *((_QWORD *)this + 40) = v10;
      v9 = (re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 504);
    }
    else
    {
      *((_QWORD *)this + 40) = *((_QWORD *)this + 66);
      v9 = (re::RayTracedAmbientOcclusionCompositeNode *)((char *)this + 456);
    }
  }
  re::RenderGraphFullscreenNode::executeInternal(this, a2, v9);
  v11 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
  v12 = 0x7A5B733119923A71;
  re::BufferTable::removeBuffer(v11, (const re::WeakStringID *)&v12);
  if (v14[0])

}

void re::RayTracedAmbientOcclusionDirectDisplayNode::~RayTracedAmbientOcclusionDirectDisplayNode(re::RayTracedAmbientOcclusionDirectDisplayNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED85ED8;
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RayTracedAmbientOcclusionDirectDisplayNode::setup(re::RayTracedAmbientOcclusionDirectDisplayNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  _QWORD v6[2];
  __int128 v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)v6 + 3) = 0;
  LODWORD(v6[0]) = 0;
  v6[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 376, (uint64_t)v6);
  v6[0] = 0x500000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 296, (uint64_t)v6);
}

void re::RayTracedAmbientOcclusionDirectDisplayNode::execute(re::RayTracedAmbientOcclusionDirectDisplayNode *this, re::RenderGraphContext *a2)
{
  id *v4;
  id *v5;
  unsigned int v6;
  void *v7;
  id v8;
  id v9;

  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 376, 0, 0, &v9);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 296, 0, 0, &v8);
  v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v7);
  objc_msgSend(v7, "setComputePipelineState:", *(_QWORD *)(*((_QWORD *)this + 32) + 728));
  objc_msgSend(v7, "setTexture:atIndex:", v9, 0);
  objc_msgSend(v7, "setTexture:atIndex:", v8, 1);
  v5 = (id *)(*((_QWORD *)this + 32) + 728);
  v6 = objc_msgSend(v8, sel_width);
  re::RayTracedAmbientOcclusionNode::computeEncoderDispatch(**(void ***)a2, &v7, v5, v6, objc_msgSend(v8, sel_height));

  if (v8)
  if (v9)

}

void re::StencilPtInjectionNode::execute(re::StencilPtInjectionNode *this, re::RenderGraphContext *a2)
{
  re::RenderGraphContext *v2;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t RenderGraphDataPipe;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t isBoundingBoxInsidePlanes;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  _QWORD v31[2];
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[14];
  uint64_t v37;
  _OWORD v38[19];
  float32x4_t buf;
  __int16 v40;
  uint64_t v41;

  v2 = a2;
  v41 = *MEMORY[0x24BDAC8D0];
  v4 = re::RenderGraphDataStore::tryGet<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = re::RenderGraphDataStore::get<re::CameraData>(*((_QWORD *)v2 + 146), *(_QWORD *)(*((_QWORD *)v2 + 5) + 48));
  v8 = v5;
  v30 = 256;
  if (*((_BYTE *)this + 256))
    re::buildCullingFrustum(v5 + 64, (_DWORD *)(v5 + 144), *(unsigned __int8 *)(v5 + 490), &v30, (uint64_t)v34, v6, v7);
  else
    bzero(v34, 0x230uLL);
  v9 = (float32x4_t *)v34;
  if (!v4)
    goto LABEL_34;
  v10 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 32);
  RenderGraphDataPipe = re::RenderGraphContext::tryGetRenderGraphDataPipe(v2, *(const char **)(v4 + 8));
  if (!RenderGraphDataPipe)
    goto LABEL_34;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)RenderGraphDataPipe + 840))(RenderGraphDataPipe);
  v28 = *(_QWORD *)(v12 + 40);
  v29 = v12;
  if (!v28)
    goto LABEL_34;
  v13 = 0;
  v14 = 0;
  while (1)
  {
    isBoundingBoxInsidePlanes = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v29, v14);
    v16 = *(_QWORD *)(isBoundingBoxInsidePlanes + 16);
    if (v16)
      break;
LABEL_27:
    if (++v14 == v28)
      goto LABEL_34;
  }
  v17 = *(float32x4_t **)(isBoundingBoxInsidePlanes + 32);
  v18 = 736 * v16;
  while (1)
  {
    if ((v17[28].i32[3] & *(_DWORD *)(v8 + 504)) == 0)
      goto LABEL_26;
    if (!*((_BYTE *)this + 256))
      goto LABEL_20;
    if (v34[0] == 1)
    {
      v32 = v36;
      v33 = v35[0];
      re::computeMeshSceneBoundingBox(v17 + 2, v10, &buf);
      isBoundingBoxInsidePlanes = re::isBoundingBoxInsidePlanes((uint64_t)&buf, (uint64_t)&v32, v17 + 5);
      if ((_DWORD)isBoundingBoxInsidePlanes)
        goto LABEL_20;
      goto LABEL_26;
    }
    if (v34[0] != 2)
      goto LABEL_26;
    v32 = v36;
    v33 = v35[0];
    re::computeMeshSceneBoundingBox(v17 + 2, v10, &buf);
    v9 = v17 + 5;
    isBoundingBoxInsidePlanes = re::isBoundingBoxInsidePlanes((uint64_t)&buf, (uint64_t)&v32, v17 + 5);
    if ((_DWORD)isBoundingBoxInsidePlanes)
      break;
    if (v34[0] <= 1uLL)
    {
      re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v34[0]);
      _os_crash();
      __break(1u);
      goto LABEL_42;
    }
    v31[0] = &v37;
    v31[1] = v36[12];
    re::computeMeshSceneBoundingBox(v17 + 2, v10, &buf);
    v9 = (float32x4_t *)v34;
    isBoundingBoxInsidePlanes = re::isBoundingBoxInsidePlanes((uint64_t)&buf, (uint64_t)v31, v17 + 5);
    if ((isBoundingBoxInsidePlanes & 1) != 0)
      goto LABEL_20;
LABEL_26:
    v17 += 46;
    v18 -= 736;
    if (!v18)
      goto LABEL_27;
  }
  v9 = (float32x4_t *)v34;
LABEL_20:
  if (re::PortalUserDefaults::maximumPortalCount(void)::onceToken != -1)
    dispatch_once(&re::PortalUserDefaults::maximumPortalCount(void)::onceToken, &__block_literal_global_21_0);
  if (v13 < re::PortalUserDefaults::maximumPortalCount(void)::maximumPortalCount)
  {
    ++v13;
    v20 = (char *)this + 264;
    if (!*((_QWORD *)this + 35))
      v20 = 0;
    buf.i8[0] = *((_BYTE *)this + 256);
    *(__int16 *)((char *)buf.i16 + 1) = *((unsigned __int8 *)this + 304);
    buf.i8[3] = *((_BYTE *)this + 306);
    buf.i64[1] = (uint64_t)v20;
    v40 = 0;
    isBoundingBoxInsidePlanes = re::StencilPtInjectionNode::executeForPortal((unint64_t)v17, (float32x4_t *)v2, v10, *((_QWORD *)this + 2), *((char **)this + 3), *((_QWORD *)this + 4), (uint64_t)&buf);
    goto LABEL_26;
  }
  do
    v21 = __ldaxr(re::StencilPtInjectionNode::execute(re::RenderGraphContext &)::__FILE____LINE___logged);
  while (__stlxr(1u, re::StencilPtInjectionNode::execute(re::RenderGraphContext &)::__FILE____LINE___logged));
  if ((v21 & 1) == 0)
  {
    v2 = (re::RenderGraphContext *)*re::graphicsLogObjects((re *)isBoundingBoxInsidePlanes);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
    {
      if (re::PortalUserDefaults::maximumPortalCount(void)::onceToken == -1)
      {
LABEL_33:
        v22 = re::PortalUserDefaults::maximumPortalCount(void)::maximumPortalCount;
        v9[35].i32[0] = 67109120;
        v9[35].i32[1] = v22;
        goto LABEL_34;
      }
LABEL_42:
      dispatch_once(&re::PortalUserDefaults::maximumPortalCount(void)::onceToken, &__block_literal_global_21_0);
      goto LABEL_33;
    }
  }
LABEL_34:
  v23 = v9[15].i64[0];
  if (v23)
  {
    v24 = v38;
    v25 = &v38[9 * v23];
    do
    {
      *(_QWORD *)v24 = 0;
      ++*((_DWORD *)v24 + 2);
      v24 += 9;
    }
    while (v24 != v25);
  }
  if (v34[0])
  {
    v26 = v35;
    v27 = &v35[14 * v34[0]];
    do
    {
      *v26 = 0;
      ++*((_DWORD *)v26 + 2);
      v26 += 14;
    }
    while (v26 != v27);
  }
}

uint64_t re::StencilPtInjectionNode::executeForPortal(unint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, char *__s, unint64_t a6, uint64_t a7)
{
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  unsigned __int8 v20;
  char v21;
  char v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  re::Allocator *v45;
  int v46;
  char v47;
  char v48;
  re::DrawTable *v49;
  uint64_t v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t v55;
  const char *v56;
  size_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  size_t v67;
  unsigned __int8 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  size_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unint64_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  re::Projection *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  float32x4_t v106;
  double v107;
  float32x4_t v108;
  _anonymous_namespace_ *v109;
  __n128 v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  const char *v117;
  size_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  __int128 v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  BOOL v142;
  uint64_t *v143;
  uint64_t v144;
  const char *v145;
  uint64_t result;
  const char *v147;
  const char *v148;
  re *v149;
  const char *v150;
  const char *v151;
  const char *v152;
  const char *v153;
  const char *v154;
  const char *v155;
  const char *v156;
  const char *v157;
  const char *v158;
  const char *v159;
  __int128 *v160;
  __int128 *v161;
  unint64_t v162;
  uint64_t v163;
  float32x4_t *v164;
  unint64_t v165;
  re::RenderGraphContext *i;
  re::RenderGraphContext *v168;
  uint64_t v170;
  char v171;
  int v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  re::RenderGraphContext *v178;
  __int128 v179;
  __int128 v180;
  void (**v181)(re::MeshPassInfoData *__hidden);
  uint64_t v182;
  uint64_t PipelineCompilationData;
  _QWORD *v184;
  uint64_t v185;
  uint64_t **v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  __int128 v193;
  char v194;
  _QWORD v195[2];
  __int128 v196;
  __int128 v197;
  uint64_t v198[4];
  re::RenderGraphContext *v199;
  float32x4_t *v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD v208[3];
  int v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  _QWORD v213[4];
  float32x4_t *v214;
  uint64_t v215;
  uint64_t v216;
  __int16 v217;
  char v218;
  int v219;
  char v220;
  char v221;
  unint64_t v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  int v226;
  _BYTE v227[128];
  __int128 v228;
  __int128 v229;
  _BYTE v230[26];
  BOOL v231;
  int v232;
  _BYTE v233[29];
  uint64_t v234;

  v234 = *MEMORY[0x24BDAC8D0];
  v12 = 0x9E3779B97F4A7C17;
  v13 = strlen(__s);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)__s, v13, 0, (unint64_t *)&v211);
    v14 = (*((_QWORD *)&v211 + 1) - 0x61C8864680B583E9 + ((_QWORD)v211 << 6) + ((unint64_t)v211 >> 2)) ^ v211;
  }
  else
  {
    v14 = 0;
  }
  v15 = strlen((const char *)a6);
  v16 = 0x9E3779B97F4A7C17;
  if (v15)
  {
    MurmurHash3_x64_128(a6, v15, 0, (unint64_t *)&v211);
    v16 = ((*((_QWORD *)&v211 + 1) - 0x61C8864680B583E9 + ((_QWORD)v211 << 6) + ((unint64_t)v211 >> 2)) ^ v211)
        - 0x61C8864680B583E9;
  }
  v17 = &PipelineCompilationData;
  v18 = re::RenderGraphDataStore::get<re::SceneScope>(a2[73].i64[0], ((v14 >> 2) + (v14 << 6) + v16) ^ v14);
  v164 = (float32x4_t *)v18;
  if (!*(_BYTE *)(a7 + 3))
    goto LABEL_41;
  v19 = (float32x4_t *)v18;
  v20 = atomic_load((unsigned __int8 *)&qword_254120708);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254120708))
  {
    _MergedGlobals_459 = re::hashString((re *)"StencilIncrement", v153);
    __cxa_guard_release(&qword_254120708);
  }
  *(_QWORD *)&v211 = a1;
  *((_QWORD *)&v211 + 1) = v19;
  *(_QWORD *)&v212 = a6;
  *((_QWORD *)&v212 + 1) = "StencilIncrement";
  v213[0] = _MergedGlobals_459;
  v21 = *(_BYTE *)(a7 + 16);
  v22 = *(_BYTE *)(a7 + 17);
  *(_OWORD *)&v213[1] = __const__ZN2re20FeatureStencilStates13getPortalInfoENS0_11PortalUsageEhh_kIncrementStInfo;
  LOBYTE(v213[3]) = v22 | 0x80;
  BYTE1(v213[1]) = v21;
  BYTE1(v213[2]) = v21;
  v214 = a2;
  v215 = a3;
  v199 = 0;
  memset(v198, 0, sizeof(v198));
  v197 = 0u;
  v196 = 0u;
  re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)a2, (uint64_t *)&v196);
  re::encodeMeshPassForPortal((uint64_t)&v196, (uint64_t)&v211);
  if (!*(_BYTE *)(a7 + 3))
    goto LABEL_41;
  v23 = atomic_load((unsigned __int8 *)&qword_254120718);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254120718))
  {
    qword_254120710 = re::hashString((re *)"PortalOcclusion", v156);
    __cxa_guard_release(&qword_254120718);
  }
  v24 = re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  if (!v24)
    goto LABEL_33;
  *(_QWORD *)&v211 = qword_254120710;
  v25 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(_QWORD *)(v24 + 8), (uint64_t *)&v211);
  if (!v25)
    goto LABEL_33;
  v26 = v25;
  if (a2[83].i8[4])
    goto LABEL_151;
  for (i = 0;
        ;
        i = (re::RenderGraphContext *)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)&a2[83].u32[2], "StencilPortalOcclusion", "PortalOcclusion"))
  {
    v27 = atomic_load((unsigned __int8 *)&qword_2541207C8);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_2541207C8))
    {
      qword_2541207C0 = re::hashString((re *)"RenderGraphDataPipeData", v159);
      __cxa_guard_release(&qword_2541207C8);
    }
    v28 = qword_2541207C0;
    v29 = strlen((const char *)v19->i64[1]);
    v30 = 0x9E3779B97F4A7C17;
    if (v29)
    {
      MurmurHash3_x64_128(v19->i64[1], v29, 0, (unint64_t *)&v211);
      v30 = ((*((_QWORD *)&v211 + 1) + v12 + ((_QWORD)v211 << 6) + ((unint64_t)v211 >> 2)) ^ v211) + v12;
    }
    v31 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a2[73].i64[0], ((v28 >> 2) + (v28 << 6) + v30) ^ v28);
    if (v31)
    {
      v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 8) + 984))(*(_QWORD *)(v31 + 8));
      if (v32)
      {
        if (*(_QWORD *)(v32 + 48))
        {
          v33 = *(_QWORD *)(a1 + 16);
          v34 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) >> 27));
          v35 = *(unsigned int *)(*(_QWORD *)(v32 + 56) + 4 * ((v34 ^ (v34 >> 31)) % *(unsigned int *)(v32 + 72)));
          if ((_DWORD)v35 != 0x7FFFFFFF)
          {
            v36 = *(_QWORD *)(v32 + 64);
            if (*(_QWORD *)(v36 + 40 * v35 + 16) == v33)
            {
LABEL_24:
              v37 = v36 + 40 * v35;
              v39 = *(_QWORD *)(v37 + 24);
              v38 = (uint64_t *)(v37 + 24);
              if (v39)
              {
                v40 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
                if (v40)
                {
                  v41 = re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v40 + 8, v38);
                  if (v41)
                  {
                    v42 = v41;
                    v43 = a6;
                    v44 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
                    PipelineCompilationData = v26;
                    LOBYTE(v184) = 0;
                    *(_DWORD *)((char *)v17 + 13) = 65280;
                    v192 = &PipelineCompilationData;
                    *(_QWORD *)&v193 = 1;
                    v45 = *(re::Allocator **)(a2->i64[0] + 24);
                    v214 = 0;
                    memset(v213, 0, sizeof(v213));
                    v211 = 0u;
                    v212 = 0u;
                    v215 = re::globalAllocators((re *)v44)[2];
                    v216 = 0;
                    v217 = 1;
                    v46 = *(_DWORD *)v42;
                    v47 = *(_BYTE *)(v42 + 4);
                    v48 = *(_BYTE *)(v42 + 9);
                    v218 = 1;
                    v219 = v46;
                    v220 = v47;
                    v221 = v48;
                    re::RenderGraphMeshNodeBase::sortMeshParts(&v203, 1, &PipelineCompilationData, 1, a2, i, &v211, v45);
                    v49 = (re::DrawTable *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v45 + 32))(v45, 328, 8);
                    re::DrawTable::DrawTable(v49, v45, (v205 + 127) >> 7);
                    re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts((uint64_t *)&v192, v206, v205, a2, (uint64_t)v49, *(unsigned __int8 *)(v44 + 64), v44, 0, (uint64_t)i);
                    if (*((_QWORD *)v49 + 5))
                    {
                      a2[94].i8[8] = 2;
                      re::DrawTableSlice::DrawTableSlice(&v211, (uint64_t)v49);
                      *(_QWORD *)&v196 = "StencilPortalOcclusion";
                      *((_QWORD *)&v196 + 1) = &v211;
                      v50 = *(_QWORD *)(v44 + 80);
                      *(_QWORD *)&v197 = *(_QWORD *)(v44 + 40);
                      *((_QWORD *)&v197 + 1) = v50;
                      v198[0] = 0;
                      LOBYTE(v198[1]) = *(_BYTE *)(v44 + 128);
                      *(_WORD *)((char *)v17 + 161) = 0;
                      HIDWORD(v198[1]) = -2147417856;
                      LOWORD(v198[2]) = 640;
                      *(_DWORD *)((char *)v17 + 170) = 0x10000;
                      *(_DWORD *)((char *)v17 + 174) = 41975809;
                      *(_DWORD *)((char *)v17 + 178) = 0x10000;
                      BYTE6(v198[3]) = 0x80;
                      *(_OWORD *)((char *)v17 + 183) = 0u;
                      *(_OWORD *)((char *)v17 + 199) = 0u;
                      HIBYTE(v201) = 0;
                      *(_QWORD *)&v202 = i;
                      BYTE8(v202) = 0;
                      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)a2, (uint64_t *)&v173);
                      re::RenderGraphContext::encodeDrawCalls(a2, &v173, &v196);
                      a2[94].i8[8] = 0;
                    }
                    if (v203 && v206)
                      (*(void (**)(void))(*(_QWORD *)v203 + 40))();
                    a6 = v43;
                    v19 = v164;
                    v12 = 0x9E3779B97F4A7C17;
                  }
                }
              }
            }
            else
            {
              while (1)
              {
                LODWORD(v35) = *(_DWORD *)(v36 + 40 * v35 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v35 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v36 + 40 * v35 + 16) == v33)
                  goto LABEL_24;
              }
            }
          }
        }
      }
    }
LABEL_33:
    if (*(_BYTE *)(a7 + 3))
    {
      v51 = atomic_load((unsigned __int8 *)&qword_254120728);
      if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_254120728))
      {
        qword_254120720 = re::hashString((re *)"DepthBufferClear", v157);
        __cxa_guard_release(&qword_254120728);
      }
      v52 = atomic_load((unsigned __int8 *)&qword_254120738);
      if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254120738))
      {
        qword_254120730 = re::hashString((re *)"DepthBufferClearNoColor", v158);
        __cxa_guard_release(&qword_254120738);
      }
      v53 = *(_BYTE *)(a7 + 2) == 0;
      v54 = &qword_254120730;
      if (!*(_BYTE *)(a7 + 2))
        v54 = &qword_254120720;
      v55 = *v54;
      v56 = "DepthBufferClearNoColor";
      *(_QWORD *)&v211 = a1;
      *((_QWORD *)&v211 + 1) = v19;
      if (v53)
        v56 = "DepthBufferClear";
      *(_QWORD *)&v212 = a6;
      *((_QWORD *)&v212 + 1) = v56;
      v213[0] = v55;
      *(_OWORD *)&v213[1] = __const__ZN2re20FeatureStencilStates13getPortalInfoENS0_11PortalUsageEhh_kDepthClearStInfo;
      LOBYTE(v213[3]) = 0x80;
      BYTE1(v213[1]) = 0x80;
      BYTE1(v213[2]) = 0x80;
      v214 = a2;
      v215 = a3;
      v199 = 0;
      *(_OWORD *)(v17 + 21) = 0u;
      *(_OWORD *)(v17 + 19) = 0u;
      *(_OWORD *)(v17 + 17) = 0u;
      *(_OWORD *)(v17 + 15) = 0u;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)a2, (uint64_t *)&v196);
      re::encodeMeshPassForPortal((uint64_t)&v196, (uint64_t)&v211);
    }
LABEL_41:
    re::CameraData::CameraData((re::CameraData *)&v211, *(re::Allocator **)(a2->i64[0] + 24));
    v195[0] = &off_24ED776C0;
    v192 = (uint64_t *)&off_24ED73410;
    *(_QWORD *)&v193 = 134217472;
    *((_QWORD *)&v193 + 1) = 134217472;
    v57 = strlen(*(const char **)(a1 + 8));
    v163 = a3;
    if (v57)
    {
      MurmurHash3_x64_128(*(_QWORD *)(a1 + 8), v57, 0, (unint64_t *)&v196);
      v58 = (*((_QWORD *)&v196 + 1) + v12 + ((_QWORD)v196 << 6) + ((unint64_t)v196 >> 2)) ^ v196;
    }
    else
    {
      v58 = 0;
    }
    v59 = re::RenderGraphDataStore::get<re::CameraData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
    re::DynamicString::operator=((re::DynamicString *)((char *)&v211 + 8), (re::DynamicString *)(v59 + 8));
    re::DynamicInlineArray<re::RenderCamera,2ul>::operator=(&v213[2], (uint64_t *)(v59 + 48));
    re::DynamicInlineArray<re::Projection,2ul>::operator=((uint64_t *)&v222, (uint64_t *)(v59 + 128));
    v165 = a1;
    if (&v211 != (__int128 *)v59)
    {
      v60 = *(_QWORD *)(v59 + 272);
      v61 = v225;
      if (v60 >= v225)
      {
        v62 = v59 + 288 + (v225 << 6);
        if (v225)
          memmove(v227, (const void *)(v59 + 288), v225 << 6);
        memcpy(&v227[64 * v61], (const void *)(v59 + 288 + (v61 << 6)), v59 + 288 + (v60 << 6) - v62);
      }
      else if (v60)
      {
        memmove(v227, (const void *)(v59 + 288), v60 << 6);
      }
      v225 = v60;
      ++v226;
      v12 = 0x9E3779B97F4A7C17;
    }
    v63 = *(_OWORD *)(v59 + 416);
    v64 = *(_OWORD *)(v59 + 432);
    v65 = *(_OWORD *)(v59 + 448);
    *(_OWORD *)&v230[10] = *(_OWORD *)(v59 + 458);
    v229 = v64;
    *(_OWORD *)v230 = v65;
    v228 = v63;
    if (v231 || *(_BYTE *)(v59 + 476))
    {
      if (!v231 || *(_BYTE *)(v59 + 476))
      {
        if (!v231)
          v231 = *(_BYTE *)(v59 + 476) != 0;
        v232 = *(_DWORD *)(v59 + 480);
      }
      else
      {
        v231 = 0;
      }
    }
    v66 = *(_OWORD *)(v59 + 484);
    *(_OWORD *)&v233[13] = *(_OWORD *)(v59 + 497);
    *(_OWORD *)v233 = v66;
    v67 = strlen((const char *)a6);
    *(_QWORD *)&v196 = a6;
    *((_QWORD *)&v196 + 1) = v67;
    re::DynamicString::operator=((re::DynamicString *)((char *)&v211 + 8), (uint64_t)&v196);
    v68 = atomic_load((unsigned __int8 *)&qword_254120748);
    if ((v68 & 1) == 0)
    {
LABEL_154:
      if (__cxa_guard_acquire(&qword_254120748))
      {
        qword_254120740 = re::hashString((re *)"MeshScenes", v147);
        __cxa_guard_release(&qword_254120748);
      }
    }
    v69 = v58 + v12;
    v70 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>>(a2[73].i64[0], (v58 + v12 + (qword_254120740 << 6) + ((unint64_t)qword_254120740 >> 2)) ^ qword_254120740);
    v71 = v70 + 8;
    if (!v70)
      v71 = 0;
    *((_QWORD *)&v229 + 1) = v71;
    MurmurHash3_x64_128((uint64_t)"VFXScenes", 9, 0, (unint64_t *)&v196);
    v72 = (*((_QWORD *)&v196 + 1) + v12 + ((_QWORD)v196 << 6) + ((unint64_t)v196 >> 2)) ^ v196;
    v73 = (v69 + (v72 << 6) + (v72 >> 2)) ^ v72;
    v74 = a2[73].i64[0];
    v75 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayINS_8VFXSceneEEELm4EEEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayINS_8VFXSceneEEELm4EEEEE" & 0x8000000000000000) != 0)
    {
      v76 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayIN"
                                                  "S_8VFXSceneEEELm4EEEEE" & 0x7FFFFFFFFFFFFFFFLL);
      v77 = 5381;
      do
      {
        v75 = v77;
        v78 = *v76++;
        v77 = (33 * v77) ^ v78;
      }
      while (v78);
    }
    *(_QWORD *)&v196 = (v73 + v12 + (v75 << 6) + (v75 >> 2)) ^ v75;
    v79 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v74 + 16, (uint64_t *)&v196);
    if (v79)
      v80 = *v79;
    else
      v80 = 0;
    if (v80)
      v81 = v80 + 8;
    else
      v81 = 0;
    *(_QWORD *)v230 = v81;
    v195[1] = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(a7 + 3))
    {
      *(_QWORD *)&v193 = 50364417;
      *((_QWORD *)&v193 + 1) = 50364417;
      v194 = 0x80;
    }
    else
    {
      v194 = 0;
      v193 = xmmword_22619B8C0;
    }
    v82 = atomic_load((unsigned __int8 *)&qword_254120758);
    if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_254120758))
    {
      qword_254120750 = re::hashString((re *)"SceneIndex", v148);
      __cxa_guard_release(&qword_254120758);
    }
    PipelineCompilationData = re::RenderGraphContext::tryGetPipelineCompilationData((re::RenderGraphContext *)a2, *(_QWORD *)(a2[2].i64[1] + 48));
    v184 = v195;
    v185 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>(a2[73].i64[0], (v69 + (qword_254120750 << 6) + ((unint64_t)qword_254120750 >> 2)) ^ qword_254120750);
    v186 = &v192;
    v187 = re::RenderGraphDataStore::tryGet<re::ViewportData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
    v188 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
    v189 = re::RenderGraphDataStore::tryGet<re::TintContextData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
    v190 = re::RenderGraphDataStore::tryGet<re::VRRData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
    v83 = a2[73].i64[0];
    v84 = *(_QWORD *)(a2[2].i64[1] + 48);
    if ((v85 & 1) == 0
    {
      re::introspect<re::TriangleFillModeData>(void)::info = (_UNKNOWN *)re::introspect_TriangleFillModeData(0);
    }
    v86 = strlen(*((const char **)re::introspect<re::TriangleFillModeData>(void)::info + 6));
    if (v86)
    {
      MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::TriangleFillModeData>(void)::info + 6), v86, 0, (unint64_t *)&v196);
      v87 = (*((_QWORD *)&v196 + 1) + v12 + ((_QWORD)v196 << 6) + ((unint64_t)v196 >> 2)) ^ v196;
    }
    else
    {
      v87 = 0;
    }
    *(_QWORD *)&v196 = (v84 + v12 + (v87 << 6) + (v87 >> 2)) ^ v87;
    v88 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v83 + 64, (uint64_t *)&v196);
    if (v88)
      v89 = *v88;
    else
      v89 = 0;
    v90 = 0x9E3779B97F4A7C17;
    v191 = v89;
    v181 = &off_24ED821F0;
    v182 = 0;
    re::CameraMatrices::CameraMatrices((re::CameraMatrices *)&v203, *(re::Allocator **)(a2->i64[0] + 24), v233[6]);
    v91 = atomic_load((unsigned __int8 *)&qword_254120768);
    if ((v91 & 1) == 0)
    {
      v149 = (re *)__cxa_guard_acquire(&qword_254120768);
      if ((_DWORD)v149)
      {
        qword_254120760 = re::getCombinedScopeHash(v149, v150, v151);
        __cxa_guard_release(&qword_254120768);
      }
    }
    a3 = re::RenderGraphDataStore::get<re::RendererGlobals>(a2[73].i64[0], qword_254120760);
    v92 = atomic_load((unsigned __int8 *)&qword_254120778);
    if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_254120778))
    {
      qword_254120770 = re::hashString((re *)"DynamicFunctionConstants", v152);
      __cxa_guard_release(&qword_254120778);
    }
    v93 = qword_254120770;
    v94 = strlen((const char *)a6);
    if (v94)
    {
      MurmurHash3_x64_128(a6, v94, 0, (unint64_t *)&v196);
      v90 = ((*((_QWORD *)&v196 + 1) + v12 + ((_QWORD)v196 << 6) + ((unint64_t)v196 >> 2)) ^ v196) + v12;
    }
    v162 = a6;
    v95 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a2[73].i64[0], ((v93 >> 2) + (v93 << 6) + v90) ^ v93);
    v96 = v95 ? v95 + 8 : 0;
    v26 = re::RenderGraphDataStore::get<re::MeshLodSelectInputData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
    v97 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2->i64[0] + 24) + 32))(*(_QWORD *)(a2->i64[0] + 24), 48, 8);
    v98 = *(_QWORD *)(a2->i64[0] + 24);
    *(_DWORD *)(v97 + 32) = 0;
    *(_OWORD *)v97 = 0u;
    *(_OWORD *)(v97 + 16) = 0u;
    *(_QWORD *)(v97 + 36) = 0x7FFFFFFFLL;
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(v97, v98, 3);
    v182 = v97;
    if (!v233[6])
      break;
    v12 = 0;
    v17 = v208;
    v100 = (re::Projection *)&v224;
    a6 = (unint64_t)&v204;
    v19 = (float32x4_t *)&v214;
    while (v222 > v12)
    {
      re::Projection::computeMatrix4x4F(v100, (uint64_t)&v196);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v208, (uint64_t)&v196);
      v102 = v213[2];
      if (v213[2] <= v12)
        goto LABEL_150;
      re::RenderCamera::computeInverseTransform(v19, (uint64_t)&v196);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&v204, (uint64_t)&v196);
      ++v12;
      v19 += 2;
      v100 = (re::Projection *)((char *)v100 + 64);
      if (v12 >= v233[6])
        goto LABEL_95;
    }
    re::internal::assertLog((re::internal *)6, v99, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v12, v222);
    _os_crash();
    __break(1u);
LABEL_150:
    re::internal::assertLog((re::internal *)6, v101, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v12, v102);
    _os_crash();
    __break(1u);
LABEL_151:
    ;
  }
LABEL_95:
  v103 = *(_QWORD *)(a2->i64[0] + 24);
  v173 = 0u;
  v174 = 0u;
  LODWORD(v175) = 0;
  *(_QWORD *)((char *)&v175 + 4) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v173, v103, 3);
  *(_QWORD *)&v196 = a2;
  *((_QWORD *)&v196 + 1) = &v211;
  *(_QWORD *)&v197 = &v203;
  *((_QWORD *)&v197 + 1) = v195;
  v198[0] = a3;
  v198[1] = (uint64_t)&v181;
  v198[2] = v26;
  v198[3] = (uint64_t)&v173;
  LOBYTE(v199) = *(_BYTE *)a7;
  *(_WORD *)((char *)&v199 + 1) = 0;
  BYTE4(v199) = 0;
  *(_QWORD *)&v201 = v96;
  re::RenderGraphCameraSetupNode::setupDrawCallsForCamera((uint64_t)&v196, v104, v105, v106, v107, v108);
  v110.n128_f64[0] = re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v173);
  v111 = atomic_load((unsigned __int8 *)&qword_254120780);
  if ((v111 & 1) == 0)
  {
    v109 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_254120780);
    if ((_DWORD)v109)
    {
      qword_2541207D0 = 0x4CB6D3AA6EABE92CLL;
      qword_2541207D8 = (uint64_t)"Transparent_BackCompat";
      unk_2541207E0 = 5231452;
      qword_2541207E8 = (uint64_t)"True";
      __cxa_atexit((void (*)(void *))re::TechniqueTagFilter::~TechniqueTagFilter, &qword_2541207D0, &dword_224FE9000);
      __cxa_guard_release(&qword_254120780);
    }
  }
  v112 = atomic_load((unsigned __int8 *)&qword_254120788);
  if ((v112 & 1) == 0)
  {
    v109 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_254120788);
    if ((_DWORD)v109)
    {
      re::StringID::StringID((re::StringID *)&v196, (const StringID *)&qword_2541207D0);
      re::StringID::StringID((re::StringID *)&v197, (const StringID *)&unk_2541207E0);
      qword_2541207F0 = 0;
      qword_2541207F8 = (uint64_t)&str_110;
      unk_254120800 = 0;
      qword_254120808 = (uint64_t)&str_110;
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *>((uint64_t)&v173, (uint64_t *)&v196, v198, (unint64_t *)&qword_2541207F0);
      re::StringID::destroyString((re::StringID *)&v197);
      re::StringID::destroyString((re::StringID *)&v196);
      __cxa_atexit((void (*)(void *))re::FixedInlineArray<re::TechniqueTagFilter,1ul>::~FixedInlineArray, &qword_2541207F0, &dword_224FE9000);
      __cxa_guard_release(&qword_254120788);
    }
  }
  v168 = (re::RenderGraphContext *)a2;
  v113 = *(_QWORD *)(a7 + 8);
  if (v113)
  {
    if (*(_QWORD *)(v113 + 16))
    {
      v114 = 0;
      v115 = 0;
      do
      {
        v116 = *(_QWORD *)(v113 + 32) + v114;
        if ((*(_BYTE *)(v116 + 8) & 1) != 0)
          v117 = *(const char **)(v116 + 16);
        else
          v117 = (const char *)(v116 + 9);
        re::DynamicString::operator+((re::DynamicString *)&v196, v117, (re::DynamicString *)&v173);
        if ((_QWORD)v196 && (BYTE8(v196) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v196 + 40))();
        v118 = strlen(v117);
        if (v118)
        {
          MurmurHash3_x64_128((uint64_t)v117, v118, 0, (unint64_t *)&v196);
          v119 = (*((_QWORD *)&v196 + 1) - 0x61C8864680B583E9 + ((_QWORD)v196 << 6) + ((unint64_t)v196 >> 2)) ^ v196;
        }
        else
        {
          v119 = 0;
        }
        *(_QWORD *)&v196 = v119;
        v120 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v182, (uint64_t *)&v196);
        if (v120)
        {
          v170 = v120;
          v171 = 0;
          v172 = 65280;
          *(_QWORD *)&v196 = &PipelineCompilationData;
          if ((BYTE8(v173) & 1) != 0)
            v121 = (char *)v174;
          else
            v121 = (char *)&v173 + 9;
          *((_QWORD *)&v196 + 1) = a4;
          *(_QWORD *)&v197 = v121;
          *((_QWORD *)&v197 + 1) = &v170;
          v198[1] = 0;
          v198[2] = 0;
          v198[0] = 1;
          v198[3] = (uint64_t)&v203;
          LODWORD(v199) = 2;
          WORD2(v199) = 2;
          v200 = a2;
          v201 = *(_OWORD *)(v165 + 704);
          v202 = *(_OWORD *)(v165 + 688);
          re::encodeMaterialPassForPortalScene((uint64_t)&v196);
        }
        v109 = (_anonymous_namespace_ *)v173;
        if ((_QWORD)v173 && (BYTE8(v173) & 1) != 0)
          v109 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v173 + 40))();
        ++v115;
        v113 = *(_QWORD *)(a7 + 8);
        v114 += 32;
      }
      while (*(_QWORD *)(v113 + 16) > v115);
    }
  }
  else
  {
    *(_QWORD *)&v173 = 0;
    DWORD2(v173) = 0;
    re::rendergraph_helper::getOcclusionMeshPasses((uint64_t)&v196);
    re::rendergraph_helper::populateMeshPassArray<1ul,re::FixedInlineArray<re::rendergraph_helper::RenderPass,1ul>>((uint64_t)&v181, (uint64_t *)&v173, (uint64_t)&v196);
    v122 = *(_OWORD *)(a1 + 688);
    v201 = *(_OWORD *)(a1 + 704);
    *(_QWORD *)&v196 = &PipelineCompilationData;
    *((_QWORD *)&v196 + 1) = a4;
    *(_QWORD *)&v197 = "Portal_Occlusion";
    *((_QWORD *)&v197 + 1) = &v174;
    v198[0] = v173;
    v198[1] = 0;
    v198[2] = 0;
    v198[3] = (uint64_t)&v203;
    LODWORD(v199) = 1;
    WORD2(v199) = 0;
    v200 = a2;
    v160 = (__int128 *)(a1 + 704);
    v161 = (__int128 *)(a1 + 688);
    v202 = v122;
    re::encodeMaterialPassForPortalScene((uint64_t)&v196);
    *(_QWORD *)&v173 = 0;
    DWORD2(v173) = 0;
    re::rendergraph_helper::getOpaqueMeshPasses((uint64_t)&v196);
    re::rendergraph_helper::populateMeshPassArray<1ul,re::FixedInlineArray<re::rendergraph_helper::RenderPass,1ul>>((uint64_t)&v181, (uint64_t *)&v173, (uint64_t)&v196);
    v123 = *(_OWORD *)(a1 + 688);
    v201 = *(_OWORD *)(a1 + 704);
    *(_QWORD *)&v196 = &PipelineCompilationData;
    *((_QWORD *)&v196 + 1) = a4;
    *(_QWORD *)&v197 = "Portal_Opaque";
    *((_QWORD *)&v197 + 1) = &v174;
    v198[0] = v173;
    v198[1] = 0;
    v198[2] = 0;
    v198[3] = (uint64_t)&v203;
    LODWORD(v199) = 1;
    WORD2(v199) = 2;
    v200 = a2;
    v202 = v123;
    re::encodeMaterialPassForPortalScene((uint64_t)&v196);
    *(_QWORD *)&v173 = 0;
    DWORD2(v173) = 0;
    re::rendergraph_helper::getSkyboxMeshPasses((uint64_t)&v196);
    re::rendergraph_helper::populateMeshPassArray<1ul,re::FixedInlineArray<re::rendergraph_helper::RenderPass,1ul>>((uint64_t)&v181, (uint64_t *)&v173, (uint64_t)&v196);
    v124 = *(_OWORD *)(a1 + 688);
    v201 = *(_OWORD *)(a1 + 704);
    *(_QWORD *)&v196 = &PipelineCompilationData;
    *((_QWORD *)&v196 + 1) = a4;
    *(_QWORD *)&v197 = "Portal_Skybox";
    *((_QWORD *)&v197 + 1) = &v174;
    v198[0] = v173;
    v198[1] = 0;
    v198[2] = 0;
    v198[3] = (uint64_t)&v203;
    LODWORD(v199) = 1;
    WORD2(v199) = 2;
    v200 = a2;
    v202 = v124;
    re::encodeMaterialPassForPortalScene((uint64_t)&v196);
    *(_QWORD *)&v196 = 0;
    DWORD2(v196) = 0;
    re::rendergraph_helper::getTransparentMeshPasses(&v173);
    a1 = 0;
    a6 = 0;
    a2 = (float32x4_t *)&v197;
    do
    {
      v58 = *((unsigned __int8 *)&v173 + a1 + 16);
      v125 = *((unsigned __int8 *)&v174 + a1 + 1);
      v126 = *((unsigned __int8 *)&v174 + a1 + 2);
      v127 = *(_DWORD *)((char *)&v174 + a1 + 3);
      v12 = *((unsigned __int8 *)&v174 + a1 + 7);
      v170 = *(_QWORD *)((char *)&v173 + a1 + 8);
      v128 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v182, &v170);
      if (v128)
      {
        if (a6 >= 7)
        {
          re::internal::assertLog((re::internal *)4, v129, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
          _os_crash();
          __break(1u);
LABEL_153:
          re::internal::assertLog((re::internal *)4, v137, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
          _os_crash();
          __break(1u);
          goto LABEL_154;
        }
        v130 = &v198[3 * a6 - 2];
        *v130 = v128;
        *((_BYTE *)v130 + 8) = 1;
        *(_DWORD *)((char *)v130 + 9) = v127;
        *(_DWORD *)((char *)v130 + 13) = v58 | (v125 << 8) | (v126 << 16) | ((_DWORD)v12 << 24);
        a6 = v196 + 1;
        *(_QWORD *)&v196 = v196 + 1;
        ++DWORD2(v196);
      }
      a1 += 24;
    }
    while (a1 != 168);
    *(_QWORD *)&v173 = &PipelineCompilationData;
    *((_QWORD *)&v173 + 1) = a4;
    *(_QWORD *)&v174 = "Portal_Transparent";
    *((_QWORD *)&v174 + 1) = &v197;
    *(_QWORD *)&v175 = a6;
    *((_QWORD *)&v175 + 1) = &qword_2541207F0;
    *(_QWORD *)&v176 = 1;
    *((_QWORD *)&v176 + 1) = &v203;
    LODWORD(v177) = 2;
    WORD2(v177) = 2;
    v178 = v168;
    v131 = *v161;
    v179 = *v160;
    v180 = v131;
    a2 = (float32x4_t *)&v173;
    re::encodeMaterialPassForPortalScene((uint64_t)&v173);
    *(_QWORD *)&v196 = 0;
    DWORD2(v196) = 0;
    re::rendergraph_helper::getRenderOnTopMeshPasses(&v173);
    v132 = 0;
    a1 = 0;
    a6 = (unint64_t)&v197;
    do
    {
      v133 = *((unsigned __int8 *)&v173 + v132 + 16);
      v134 = *((unsigned __int8 *)&v174 + v132 + 1);
      v135 = *((unsigned __int8 *)&v174 + v132 + 2);
      v58 = *(unsigned int *)((char *)&v174 + v132 + 3);
      v12 = *((unsigned __int8 *)&v174 + v132 + 7);
      v170 = *(_QWORD *)((char *)&v173 + v132 + 8);
      v136 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v182, &v170);
      if (v136)
      {
        if (a1 >= 8)
          goto LABEL_153;
        v138 = &v198[3 * a1 - 2];
        *v138 = v136;
        *((_BYTE *)v138 + 8) = 1;
        *(_DWORD *)((char *)v138 + 9) = v58;
        *(_DWORD *)((char *)v138 + 13) = v133 | (v134 << 8) | (v135 << 16) | ((_DWORD)v12 << 24);
        a1 = v196 + 1;
        *(_QWORD *)&v196 = v196 + 1;
        ++DWORD2(v196);
      }
      v132 += 24;
    }
    while (v132 != 192);
    *(_QWORD *)&v173 = &PipelineCompilationData;
    *((_QWORD *)&v173 + 1) = a4;
    *(_QWORD *)&v174 = "Portal_RenderOnTop";
    *((_QWORD *)&v174 + 1) = &v197;
    *(_QWORD *)&v175 = a1;
    *((_QWORD *)&v175 + 1) = &qword_2541207F0;
    *(_QWORD *)&v176 = 1;
    *((_QWORD *)&v176 + 1) = &v203;
    LODWORD(v177) = 2;
    WORD2(v177) = 2;
    v178 = v168;
    v139 = *v161;
    v179 = *v160;
    v180 = v139;
    re::encodeMaterialPassForPortalScene((uint64_t)&v173);
  }
  if (*(_BYTE *)(a7 + 3))
  {
    v140 = atomic_load((unsigned __int8 *)&qword_254120798);
    if ((v140 & 1) == 0 && __cxa_guard_acquire(&qword_254120798))
    {
      qword_254120790 = re::hashString((re *)"DepthBufferPatchAndStencilDecrement", v154);
      __cxa_guard_release(&qword_254120798);
    }
    v141 = atomic_load((unsigned __int8 *)&qword_2541207A8);
    if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_2541207A8))
    {
      qword_2541207A0 = re::hashString((re *)"DepthBufferPatchAndStencilDecrementNoFragmentFunction", v155);
      __cxa_guard_release(&qword_2541207A8);
    }
    v142 = *(_BYTE *)(a7 + 1) == 0;
    v143 = &qword_2541207A0;
    if (!*(_BYTE *)(a7 + 1))
      v143 = &qword_254120790;
    v144 = *v143;
    v145 = "DepthBufferPatchAndStencilDecrementNoFragmentFunction";
    *(_QWORD *)&v196 = v165;
    *((_QWORD *)&v196 + 1) = v164;
    if (v142)
      v145 = "DepthBufferPatchAndStencilDecrement";
    *(_QWORD *)&v197 = v162;
    *((_QWORD *)&v197 + 1) = v145;
    v198[0] = v144;
    *(_OWORD *)&v198[1] = __const__ZN2re20FeatureStencilStates13getPortalInfoENS0_11PortalUsageEhh_kDecrementStInfo;
    LOBYTE(v198[3]) = 0x80;
    BYTE1(v198[1]) = 0x80;
    BYTE1(v198[2]) = 0x80;
    v199 = v168;
    v200 = (float32x4_t *)v163;
    v177 = 0;
    v175 = 0u;
    v176 = 0u;
    v173 = 0u;
    v174 = 0u;
    re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(v168, (uint64_t *)&v173);
    re::encodeMeshPassForPortal((uint64_t)&v173, (uint64_t)&v196);
  }
  if (v208[0])
  {
    if (v210)
      (*(void (**)(__n128))(*(_QWORD *)v208[0] + 40))(v110);
    v210 = 0;
    memset(v208, 0, sizeof(v208));
    ++v209;
  }
  if (v204 && v207)
    (*(void (**)(__n128))(*(_QWORD *)v204 + 40))(v110);
  v225 = 0;
  ++v226;
  v222 = 0;
  ++v223;
  v213[2] = 0;
  ++LODWORD(v213[3]);
  result = *((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    if ((v212 & 1) != 0)
      return (*(uint64_t (**)(__n128))(**((_QWORD **)&v211 + 1) + 40))(v110);
  }
  return result;
}

void re::TechniqueTagFilter::~TechniqueTagFilter(re::TechniqueTagFilter *this)
{
  re::StringID::destroyString((re::TechniqueTagFilter *)((char *)this + 16));
  re::StringID::destroyString(this);
}

uint64_t re::FixedInlineArray<re::TechniqueTagFilter,1ul>::~FixedInlineArray(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
  return a1;
}

uint64_t *re::allocInfo_StencilPtInjectionNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541207B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541207B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120838, 0);
    *(uint64_t *)((char *)&qword_254120848 + 6) = 0;
    qword_254120848 = 0;
    qword_254120858 = 0;
    qword_254120860 = 0xFFFFFFFFLL;
    qword_254120838 = (uint64_t)&off_24ED7DAA8;
    qword_254120868 = (uint64_t)"StencilPtInjectionNode";
    dword_254120870 = 0;
    unk_254120878 = 0u;
    unk_254120888 = 0u;
    unk_254120898 = 0u;
    qword_2541208A8 = 0;
    __cxa_guard_release(&qword_2541207B0);
  }
  return &qword_254120838;
}

void re::initInfo_StencilPtInjectionNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0xF842934DFAA68D32;
  v26[1] = "StencilPtInjectionNode";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_2541207B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541207B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254120810 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "frustumCulling";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254120818 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "materialPassesOverride";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10800000005;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254120820 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_BOOL((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "depthBufferPatchAndStencilDecrementNoFragmentFunction";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x13000000006;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254120828 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_BOOL((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "shouldRenderPortalsAndStencil";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x13200000007;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254120830 = v24;
      __cxa_guard_release(&qword_2541207B8);
    }
  }
  *((_QWORD *)this + 2) = 0x13800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254120810;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::StencilPtInjectionNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::StencilPtInjectionNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::StencilPtInjectionNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::StencilPtInjectionNode>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::StencilPtInjectionNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED867A8;
  *((_BYTE *)result + 256) = 1;
  *((_QWORD *)result + 37) = 0;
  *((_QWORD *)result + 34) = 0;
  *((_QWORD *)result + 35) = 0;
  *((_QWORD *)result + 33) = 0;
  *((_DWORD *)result + 72) = 0;
  *((_WORD *)result + 152) = 0;
  *((_BYTE *)result + 306) = 1;
  return result;
}

void re::internal::defaultDestruct<re::StencilPtInjectionNode>(uint64_t a1, uint64_t a2, re::RenderGraphNode *a3)
{
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)a3 + 264);
  re::RenderGraphNode::~RenderGraphNode(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::StencilPtInjectionNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED867A8;
  *((_BYTE *)result + 256) = 1;
  *((_QWORD *)result + 37) = 0;
  *((_QWORD *)result + 34) = 0;
  *((_QWORD *)result + 35) = 0;
  *((_QWORD *)result + 33) = 0;
  *((_DWORD *)result + 72) = 0;
  *((_WORD *)result + 152) = 0;
  *((_BYTE *)result + 306) = 1;
  return result;
}

void re::internal::defaultDestructV2<re::StencilPtInjectionNode>(re::RenderGraphNode *a1)
{
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)a1 + 264);
  re::RenderGraphNode::~RenderGraphNode(a1);
}

uint64_t re::introspect_StencilPtInjectionNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StencilPtInjectionNode", (uint64_t (*)(re::internal *))re::allocInfo_StencilPtInjectionNode, (re::IntrospectionBase *(*)(void))re::initInfo_StencilPtInjectionNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::StencilPtInjectionNode>, this);
}

void re::StencilPtInjectionNode::~StencilPtInjectionNode(re::StencilPtInjectionNode *this)
{
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 264);
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 264);
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re16MeshPassInfoDataE";
  if (((unint64_t)"N2re16MeshPassInfoDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re16MeshPassInfoDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::UploadMultiSceneConstantsNode::setup(re::UploadMultiSceneConstantsNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  re::RenderGraphNode::setup(this, a2, a3);
  *((_BYTE *)a2 + 592) = 1;
}

uint64_t re::UploadMultiSceneConstantsNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  char *v24;
  size_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t *v39;
  uint64_t v40;
  re::BufferTable *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float32x4_t v49;
  unint64_t v50;
  char *v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  __int32 *v56;
  __int32 *v57;
  float32x4_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  re::BufferTable *v63;
  char *v64;
  uint64_t v65;
  id *v66;
  re::FrameContext *v67;
  unint64_t *v68;
  re::TextureTable *v69;
  uint64_t v70;
  unint64_t v71;
  re::UploadMultiSceneConstantsNode *v72;
  size_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  id *v82;
  re::VirtualEnvironmentProbeContext *v83;
  float v84;
  re::TextureTable *v85;
  _QWORD *v86;
  id v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  id *v91;
  uint64_t v92;
  re::UploadMultiSceneConstantsNode *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  re::UploadMultiSceneConstantsNode *v98;
  unint64_t v99;
  _OWORD *v100;
  unint64_t v101;
  const char *v102;
  const char *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  re::UploadMultiSceneConstantsNode *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  _OWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int v116;
  _OWORD *v117;
  re::BufferTable *v118;
  const char *v120;
  const char *v121;
  const char **v122;
  id *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  id *v128;
  uint64_t v129;
  uint32x2_t *v130;
  int v131;
  __int128 v132[3];
  _QWORD v133[2];
  float32x4_t v134;
  unint64_t v135;
  re::UploadMultiSceneConstantsNode *v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  id v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  simd_float4x4 v145;

  v144 = *MEMORY[0x24BDAC8D0];
  v4 = re::RenderGraphDataStore::tryGet<re::ProbeContext>(*((_QWORD *)a2 + 146), (int)"ProbeContext", "RenderFrame");
  v5 = (_QWORD *)re::RenderGraphDataStore::tryGet<re::Slice<re::ClippingParametersEntry>>(*((_QWORD *)a2 + 146), (int)"Clipping", "RenderFrame");
  v124 = re::RenderGraphDataStore::tryGet<re::Slice<unsigned short>>(*((_QWORD *)a2 + 146), (int)"Clipping", "RenderFrame");
  v6 = atomic_load((unsigned __int8 *)&qword_2541208B8);
  if ((v6 & 1) == 0)
  {
LABEL_117:
    if (__cxa_guard_acquire(&qword_2541208B8))
    {
      _MergedGlobals_460 = re::hashString((re *)"SceneArray", v120);
      __cxa_guard_release(&qword_2541208B8);
    }
  }
  v7 = strlen(this[4]);
  v8 = 0x9E3779B97F4A7C17;
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)this[4], v7, 0, &v135);
    v8 = (((unint64_t)v136 + 64 * v135 + (v135 >> 2) - 0x61C8864680B583E9) ^ v135) - 0x61C8864680B583E9;
  }
  v9 = *((_QWORD *)a2 + 146);
  v10 = (unint64_t)"N2re14SceneArrayDataE";
  if (((unint64_t)"N2re14SceneArrayDataE" & 0x8000000000000000) != 0)
  {
    v11 = (unsigned __int8 *)((unint64_t)"N2re14SceneArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v12 = 5381;
    do
    {
      v10 = v12;
      v13 = *v11++;
      v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  v14 = 0x7FFFFFFF;
  if (*(_QWORD *)(v9 + 64))
  {
    v15 = (((v8 + (_MergedGlobals_460 << 6) + ((unint64_t)_MergedGlobals_460 >> 2)) ^ _MergedGlobals_460)
         - 0x61C8864680B583E9
         + (v10 << 6)
         + (v10 >> 2)) ^ v10;
    v16 = *(_DWORD *)(*(_QWORD *)(v9 + 72) + 4 * (v15 % *(unsigned int *)(v9 + 88)));
    if (v16 != 0x7FFFFFFF)
    {
      v17 = *(_QWORD *)(v9 + 80);
      v14 = *(_DWORD *)(*(_QWORD *)(v9 + 72) + 4 * (v15 % *(unsigned int *)(v9 + 88)));
      if (*(_QWORD *)(v17 + 24 * v16 + 8) != v15)
      {
        while (1)
        {
          v14 = *(_DWORD *)(v17 + 24
                                * *(unsigned int *)(*(_QWORD *)(v9 + 72) + 4 * (v15 % *(unsigned int *)(v9 + 88)))) & 0x7FFFFFFF;
          if (v14 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v17 + 24 * v14 + 8) == v15)
            goto LABEL_14;
        }
        v14 = 0x7FFFFFFF;
      }
    }
  }
LABEL_14:
  v122 = this;
  v18 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + 24 * v14 + 16);
  re::MaterialManager::resizeScenes(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), *(_QWORD *)(v18 + 24));
  v19 = atomic_load((unsigned __int8 *)&qword_2541208C8);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_2541208C8))
  {
    qword_2541208C0 = re::hashString((re *)"ProjectiveMeshShadow", v121);
    __cxa_guard_release(&qword_2541208C8);
  }
  v20 = qword_2541208C0;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v135);
  v21 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowRenderingData>>(*((_QWORD *)a2 + 146), ((v20 << 6)- 0x61C8864680B583E9+ (v20 >> 2)+ (((unint64_t)v136 + 64 * v135 + (v135 >> 2) - 0x61C8864680B583E9) ^ v135)) ^ v20);
  if (*(_QWORD *)(v18 + 24))
  {
    v22 = 0;
    v23 = 0;
    v123 = (id *)(v4 + 8);
    v127 = v8;
    v128 = (id *)v4;
    v125 = v21;
    v126 = v18;
    do
    {
      v131 = v23;
      v24 = *(char **)(*(_QWORD *)(v18 + 40) + 8 * v22);
      v25 = strlen(v24);
      if (v25)
      {
        MurmurHash3_x64_128((uint64_t)v24, v25, 0, &v135);
        v26 = ((unint64_t)v136 + 64 * v135 + (v135 >> 2) - 0x61C8864680B583E9) ^ v135;
      }
      else
      {
        v26 = 0;
      }
      v27 = atomic_load((unsigned __int8 *)&qword_2541208D8);
      if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_2541208D8))
      {
        qword_2541208D0 = re::hashString((re *)"LightContext", v102);
        __cxa_guard_release(&qword_2541208D8);
      }
      v28 = v26 - 0x61C8864680B583E9;
      v130 = (uint32x2_t *)re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::LightContexts>>(*((_QWORD *)a2 + 146), (v26- 0x61C8864680B583E9+ (qword_2541208D0 << 6)+ ((unint64_t)qword_2541208D0 >> 2)) ^ qword_2541208D0);
      v29 = atomic_load((unsigned __int8 *)&qword_2541208E8);
      if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_2541208E8))
      {
        qword_2541208E0 = re::hashString((re *)"IBLContextOverride", v103);
        __cxa_guard_release(&qword_2541208E8);
      }
      v30 = *((_QWORD *)a2 + 146);
      v31 = (unint64_t)"N2re23IBLContextOverrideScopeE";
      if (((unint64_t)"N2re23IBLContextOverrideScopeE" & 0x8000000000000000) != 0)
      {
        v32 = (unsigned __int8 *)((unint64_t)"N2re23IBLContextOverrideScopeE" & 0x7FFFFFFFFFFFFFFFLL);
        v33 = 5381;
        do
        {
          v31 = v33;
          v34 = *v32++;
          v33 = (33 * v33) ^ v34;
        }
        while (v34);
      }
      v135 = (((v28 + (qword_2541208E0 << 6) + ((unint64_t)qword_2541208E0 >> 2)) ^ qword_2541208E0)
            - 0x61C8864680B583E9
            + (v31 << 6)
            + (v31 >> 2)) ^ v31;
      v35 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v30 + 64, (uint64_t *)&v135);
      if (v35)
        v4 = *v35;
      else
        v4 = 0;
      v36 = atomic_load((unsigned __int8 *)&qword_2541208F8);
      if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_2541208F8))
      {
        qword_2541208F0 = re::hashString((re *)"RenderGraphDataPipeData", v104);
        __cxa_guard_release(&qword_2541208F8);
      }
      v37 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(*((_QWORD *)a2 + 146), (v8 + (qword_2541208F0 << 6) + ((unint64_t)qword_2541208F0 >> 2)) ^ qword_2541208F0);
      if (v37)
        v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v37 + 8) + 920))(*(_QWORD *)(v37 + 8));
      if (v24 && !v37)
      {
        v38 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(*((_QWORD *)a2 + 146), (v28 + (qword_2541208F0 << 6) + ((unint64_t)qword_2541208F0 >> 2)) ^ qword_2541208F0);
        if (!v38)
          goto LABEL_37;
        v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v38 + 8) + 920))(*(_QWORD *)(v38 + 8));
      }
      if (!v37)
      {
LABEL_37:
        v134 = 0uLL;
        goto LABEL_38;
      }
      v134 = *(float32x4_t *)v37;
LABEL_38:
      v39 = (float32x4_t *)re::MaterialManager::sceneConstants(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), v22);
      *v39 = v134;
      v40 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneRenderingData>>(*((_QWORD *)a2 + 146), (v8 + (qword_2541208C0 << 6) + ((unint64_t)qword_2541208C0 >> 2)) ^ qword_2541208C0);
      if (v24 && !v40)
        v40 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneRenderingData>>(*((_QWORD *)a2 + 146), (v28 + (qword_2541208C0 << 6) + ((unint64_t)qword_2541208C0 >> 2)) ^ qword_2541208C0);
      v129 = v40;
      v41 = (re::BufferTable *)re::MaterialManager::sceneBuffers(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), v22);
      re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x18000uLL, 0x100uLL, (uint64_t)&v135);
      this = (const char **)v136;
      v42 = v137;
      if (v5)
      {
        v43 = v5[1];
        if (v43)
        {
          v44 = (char *)(v135 + v136);
          if (v43 >= 0x400)
            v45 = 1024;
          else
            v45 = v5[1];
          bzero((void *)(v135 + v136), 0x10000uLL);
          v47 = 0;
          v48 = 0;
          v49 = v134;
          do
          {
            v50 = v5[1];
            if (v50 <= v48)
            {
              re::internal::assertLog((re::internal *)6, v46, *(double *)v49.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v48, v50);
              _os_crash();
              __break(1u);
              goto LABEL_117;
            }
            v51 = &v44[v47];
            v52 = (float32x4_t *)(*v5 + v47);
            v54 = v52[2];
            v53 = v52[3];
            v55 = v52[1];
            *(float32x4_t *)v51 = *v52;
            *((float32x4_t *)v51 + 1) = v55;
            *((float32x4_t *)v51 + 2) = v54;
            *((float32x4_t *)v51 + 3) = v53;
            v53.i32[0] = *(_DWORD *)&v44[v47 + 12];
            v56 = (__int32 *)&v44[v47 + 28];
            v57 = (__int32 *)&v44[v47 + 44];
            v53.i32[1] = *v56;
            v53.i32[2] = *v57;
            v58 = vsubq_f32(v53, v49);
            *((_DWORD *)v51 + 3) = v58.i32[0];
            *v56 = v58.i32[1];
            *v57 = v58.i32[2];
            *((float16x8_t *)v51 + 3) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)&v44[v47 + 48]), (float32x4_t)0)), vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)&v44[v47 + 56]), (float32x4_t)0));
            ++v48;
            v47 += 64;
          }
          while (v45 != v48);
          if (v124)
          {
            v59 = *(_QWORD *)(v124 + 8);
            if (v59)
            {
              if (v59 >= 0x4000)
                v60 = 0x4000;
              else
                v60 = *(_QWORD *)(v124 + 8);
              v61 = v44 + 0x10000;
              bzero(v61, 0x8000uLL);
              memcpy(v61, *(const void **)v124, 2 * v60);
            }
          }
        }
      }
      v133[0] = v42;
      v133[1] = this;
      v135 = 0x29136C0FCC2;
      v62 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v41, &v135);
      re::BufferTable::setBuffer(v41, *(unsigned __int8 *)(*((_QWORD *)v41 + 1) + 16 * v62 + 8), (const BufferView *)v133);
      v63 = (re::BufferTable *)re::MaterialManager::lightBuffers(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), v22);
      if (v130)
        re::LightContexts::createConstantBuffer(v130 + 1, *(re::FrameContext **)a2, &v134, v63);
      v64 = v24;
      if (v4)
        v64 = *(char **)(v4 + 8);
      v65 = re::RenderGraphDataStore::tryGet<re::IBLContext>(*((_QWORD *)a2 + 146), (int)"IBLContext", v64);
      v135 = 0;
      v136 = 0;
      v138 = 0;
      v137 = 0;
      v139 = 0;
      v140 = 0;
      LODWORD(v141) = 0;
      if (v65)
      {
        v66 = (id *)v65;
        re::ColorManager::computeWPCMatrix((float32x4_t *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 112) + 2032), *(_QWORD *)(*((_QWORD *)a2 + 1) + 88), (uint64_t)v132);
        v67 = *(re::FrameContext **)a2;
        v68 = (unint64_t *)v66;
      }
      else
      {
        v67 = *(re::FrameContext **)a2;
        v132[0] = xmmword_2260E5F10;
        v132[1] = xmmword_2260E5F20;
        v132[2] = xmmword_2260E5F40;
        v66 = (id *)&v135;
        v68 = &v135;
      }
      re::IBLContext::createConstantBuffer((uint64_t)v68, v67, v63, v132);
      v69 = (re::TextureTable *)re::MaterialManager::sceneTextures(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), v22);
      re::IBLContext::updateSceneTextures(v66, v69);
      if (v140)
      {

        v140 = 0;
      }
      re::DynamicArray<re::IBL>::deinit((uint64_t)&v135);
      v70 = *((_QWORD *)a2 + 146);
      MurmurHash3_x64_128((uint64_t)"VirtualEnvironmentProbeContextOverride", 38, 0, &v135);
      v71 = v135;
      v72 = v136;
      v73 = strlen(v24);
      v74 = 0x9E3779B97F4A7C17;
      if (v73)
      {
        MurmurHash3_x64_128((uint64_t)v24, v73, 0, &v135);
        v74 = (((unint64_t)v136 + 64 * v135 + (v135 >> 2) - 0x61C8864680B583E9) ^ v135) - 0x61C8864680B583E9;
      }
      v75 = (unint64_t)"N2re38VirtualEnvironmentProbeContextOverrideE";
      if (((unint64_t)"N2re38VirtualEnvironmentProbeContextOverrideE" & 0x8000000000000000) != 0)
      {
        v76 = (unsigned __int8 *)((unint64_t)"N2re38VirtualEnvironmentProbeContextOverrideE" & 0x7FFFFFFFFFFFFFFFLL);
        v77 = 5381;
        do
        {
          v75 = v77;
          v78 = *v76++;
          v77 = (33 * v77) ^ v78;
        }
        while (v78);
      }
      v79 = ((unint64_t)v72 + 64 * v71 + (v71 >> 2) - 0x61C8864680B583E9) ^ v71;
      v135 = ((((v79 >> 2) + (v79 << 6) + v74) ^ v79) - 0x61C8864680B583E9 + (v75 << 6) + (v75 >> 2)) ^ v75;
      v80 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v70 + 64, (uint64_t *)&v135);
      if (v80)
      {
        v81 = *v80;
        v82 = v128;
        if (*v80)
        {
          v83 = (re::VirtualEnvironmentProbeContext *)re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(*((_QWORD *)a2 + 146), (int)"VirtualEnvironmentProbeContext", *(char **)(v81 + 8));
          v84 = *(float *)(v81 + 16) * *(float *)(v81 + 20);
          goto LABEL_74;
        }
      }
      else
      {
        v82 = v128;
      }
      v83 = (re::VirtualEnvironmentProbeContext *)re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(*((_QWORD *)a2 + 146), (int)"VirtualEnvironmentProbeContext", v24);
      v84 = 1.0;
LABEL_74:
      objc_msgSend(**(id **)a2, "supportsFamily:", 5001);
      if (v83)
      {
        v85 = (re::TextureTable *)re::MaterialManager::sceneTextures(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), v22);
        re::VirtualEnvironmentProbeContext::createConstantBuffer(v83, *(re::FrameContext **)a2, v63, v84);
        re::VirtualEnvironmentProbeContext::createTextureBuffer(v83, *(re::FrameContext **)a2, v63);
        re::VirtualEnvironmentProbeContext::updateSceneTextures(v83, v85);
      }
      else
      {
        v139 = 0;
        v136 = 0;
        v137 = 0;
        v135 = 0;
        v138 = 0;
        v141 = xmmword_2260E5F10;
        v142 = xmmword_2260E5F20;
        v143 = xmmword_2260E5F40;
        re::VirtualEnvironmentProbeContext::createConstantBuffer((re::VirtualEnvironmentProbeContext *)&v135, *(re::FrameContext **)a2, v63, v84);
        re::VirtualEnvironmentProbeContext::createTextureBuffer((re::VirtualEnvironmentProbeContext *)&v135, *(re::FrameContext **)a2, v63);
        re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)&v135);
      }
      if (v82)
      {
        v86 = (_QWORD *)re::MaterialManager::sceneTextures(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), v22);
        v87 = objc_msgSend(*v82, sel_textureType);
        if (v87 == (id)3)
        {
          v135 = 0x1AA47CB53A9AC861;
          v89 = (uint64_t *)&v135;
          v90 = v86;
          v91 = v82;
        }
        else
        {
          if (v87 != (id)5)
          {
            if (v87 == (id)6)
            {
              v135 = 0x3F800981E521C7A1;
              re::TextureTable::setTexture(v86, (uint64_t *)&v135, v82);
              v135 = 0;
              v88 = 0x150A18CBFF11727ALL;
              goto LABEL_84;
            }
LABEL_86:
            *(_QWORD *)&v132[0] = 0x7831721862C9B2CBLL;
            v135 = (unint64_t)v82[2];
            LODWORD(v136) = 0;
            HIDWORD(v136) = objc_msgSend(v82[2], sel_length);
            re::BufferTable::setBuffer(v41, (const re::WeakStringID *)v132, (uint64_t)&v135);
            if (v135)

            goto LABEL_88;
          }
          v135 = 0x24E8D221D19BF998;
          re::TextureTable::setTexture(v86, (uint64_t *)&v135, v82);
          v135 = 0;
          v88 = 0x319D4D8796A12B1FLL;
LABEL_84:
          *(_QWORD *)&v132[0] = v88;
          v89 = (uint64_t *)v132;
          v90 = v86;
          v91 = v123;
        }
        re::TextureTable::setTexture(v90, v89, v91);
        goto LABEL_86;
      }
LABEL_88:
      re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 8uLL, 4uLL, (uint64_t)&v135);
      v92 = 0;
      v93 = v136;
      v94 = v137;
      if (v125 && v129 && v135)
        v92 = *(_QWORD *)(v129 + 8);
      *(_QWORD *)(v135 + v136) = v92;
      v135 = 0x441AC0ECAF42AD04;
      v95 = *(unsigned __int8 *)(*((_QWORD *)v41 + 1)
                               + 16
                               * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v41, &v135)+ 8);
      v135 = v94;
      v136 = v93;
      re::BufferTable::setBuffer(v41, v95, (const BufferView *)&v135);
      if (v125)
        v96 = *(unsigned int *)(v125 + 20);
      else
        v96 = 0;
      if (v96 <= 1)
        v97 = 1;
      else
        v97 = v96;
      re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 96 * v97, 0x10uLL, (uint64_t)&v135);
      v98 = v136;
      v99 = v137;
      v100 = (_OWORD *)(v135 + v136);
      if (v96)
      {
        memcpy(v100, *(const void **)(v125 + 48), 96 * v96);
      }
      else
      {
        v100[4] = 0u;
        v100[5] = 0u;
        v100[2] = 0u;
        v100[3] = 0u;
        *v100 = 0u;
        v100[1] = 0u;
      }
      v135 = 0xDFC20BDF4EDA5B3;
      v101 = *(unsigned __int8 *)(*((_QWORD *)v41 + 1)
                                + 16
                                * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v41, &v135)+ 8);
      v135 = v99;
      v136 = v98;
      re::BufferTable::setBuffer(v41, v101, (const BufferView *)&v135);
      v22 = (v131 + 1);
      v18 = v126;
      v8 = v127;
      v23 = v131 + 1;
    }
    while (*(_QWORD *)(v126 + 24) > v22);
  }
  v105 = re::RenderGraphDataStore::tryGet<re::AnchorTransformData>(*((_QWORD *)a2 + 146), (int)"AnchorTransformData", (char *)v122[4]);
  if (v105)
  {
    v106 = v105;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, *(_QWORD *)(v105 + 16) << 8, 0x100uLL, (uint64_t)&v135);
    v107 = v136;
    v108 = v137;
    if (*(_QWORD *)(v106 + 16))
    {
      v109 = 0;
      v110 = 0;
      v111 = (char *)(v136 + v135 + 208);
      do
      {
        v112 = (_OWORD *)(*(_QWORD *)(v106 + 32) + v109);
        v114 = v112[2];
        v113 = v112[3];
        v115 = v112[1];
        *((_OWORD *)v111 - 9) = *v112;
        *((_OWORD *)v111 - 8) = v115;
        *((_OWORD *)v111 - 7) = v114;
        *((_OWORD *)v111 - 6) = v113;
        v145 = __invert_f4(*(simd_float4x4 *)(v111 - 144));
        *(simd_float4x4 *)(v111 - 208) = v145;
        *((_DWORD *)v111 - 6) = v145.columns[2].i32[0];
        *((_QWORD *)v111 - 4) = vzip1q_s32((int32x4_t)v145.columns[0], (int32x4_t)v145.columns[1]).u64[0];
        *((_DWORD *)v111 - 2) = v145.columns[2].i32[1];
        *((_QWORD *)v111 - 2) = vtrn2q_s32((int32x4_t)v145.columns[0], (int32x4_t)v145.columns[1]).u64[0];
        *((_DWORD *)v111 + 2) = v145.columns[2].i32[2];
        *(_QWORD *)v111 = vzip1q_s32(vdupq_laneq_s32((int32x4_t)v145.columns[0], 2), vdupq_laneq_s32((int32x4_t)v145.columns[1], 2)).u64[0];
        v145.columns[0].i64[0] = *((_QWORD *)v111 - 18);
        v145.columns[1].i32[0] = *((_DWORD *)v111 - 34);
        v145.columns[2].i64[0] = *((_QWORD *)v111 - 16);
        v145.columns[3].i64[0] = *((_QWORD *)v111 - 14);
        v116 = *((_DWORD *)v111 - 26);
        v145.columns[1].i32[1] = *((_DWORD *)v111 - 30);
        *((_DWORD *)v111 - 18) = v145.columns[3].i32[0];
        *((int32x2_t *)v111 - 10) = vzip1_s32(*(int32x2_t *)v145.columns[0].f32, *(int32x2_t *)v145.columns[2].f32);
        *((_DWORD *)v111 - 14) = v145.columns[3].i32[1];
        *((int32x2_t *)v111 - 8) = vzip2_s32(*(int32x2_t *)v145.columns[0].f32, *(int32x2_t *)v145.columns[2].f32);
        *((_DWORD *)v111 - 10) = v116;
        *((_QWORD *)v111 - 6) = v145.columns[1].i64[0];
        ++v110;
        v111 += 256;
        v109 += 64;
      }
      while (v110 < *(_QWORD *)(v106 + 16));
    }
  }
  else
  {
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x100uLL, 0x100uLL, (uint64_t)&v135);
    v107 = v136;
    v108 = v137;
    v117 = (_OWORD *)(v135 + v136);
    *v117 = xmmword_2260E5F10;
    v117[1] = xmmword_2260E5F20;
    v117[2] = xmmword_2260E5F40;
    v117[3] = xmmword_2260E5D70;
    v117[4] = xmmword_2260E5F10;
    v117[5] = xmmword_2260E5F20;
    v117[6] = xmmword_2260E5F40;
    v117[7] = xmmword_2260E5D70;
    v117[8] = xmmword_2260E5F10;
    v117[9] = xmmword_2260E5F20;
    v117[10] = xmmword_2260E5F40;
    v117[11] = xmmword_2260E5F10;
    v117[12] = xmmword_2260E5F20;
    v117[13] = xmmword_2260E5F40;
  }
  v118 = *(re::BufferTable **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 720);
  *(_QWORD *)&v132[0] = 0x478674A22C6B2A1ALL;
  v135 = v108;
  v136 = v107;
  return re::BufferTable::setBuffer(v118, (const re::WeakStringID *)v132, (const BufferView *)&v135);
}

void re::UploadTonemapConstantsNode::setup(re::UploadTonemapConstantsNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  re::RenderGraphNode::setup(this, a2, a3);
  *((_BYTE *)a2 + 592) = 1;
}

void re::UploadTonemapConstantsNode::execute(re::UploadTonemapConstantsNode *this, re::RenderGraphContext *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  re::BufferTable *v16;
  re *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = atomic_load((unsigned __int8 *)&qword_254120908);
  if ((v4 & 1) == 0)
  {
    v17 = (re *)__cxa_guard_acquire(&qword_254120908);
    if ((_DWORD)v17)
    {
      qword_254120900 = re::getCombinedScopeHash(v17, v18, v19);
      __cxa_guard_release(&qword_254120908);
    }
  }
  v5 = re::RenderGraphDataStore::tryGet<re::TonemapParametersData>(*((_QWORD *)a2 + 146), qword_254120900);
  v6 = *((_QWORD *)a2 + 2);
  v7 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 656);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 272, 0, 0, &v25);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = xmmword_22619B930;
  v30 = 1;
  objc_msgSend(v25, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v26, 0, v6 + 176, 4096);
  v24 = 0xB3E5B3C154101;
  re::TextureTable::setTexture(v7, &v24, &v25);
  v24 = 0;
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 288, 0, 0, &v23);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = xmmword_22619B930;
  v30 = 1;
  objc_msgSend(v23, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v26, 0, v6 + 4272, 4096);
  v22 = 0x645EADD8982CBD05;
  re::TextureTable::setTexture(v7, &v22, &v23);
  v22 = 0;
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 304, 0, 0, &v21);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = xmmword_22619B930;
  v30 = 1;
  objc_msgSend(v21, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v26, 0, v6 + 8368, 4096);
  v20 = 0x259D0C231F804627;
  re::TextureTable::setTexture(v7, &v20, &v21);
  v20 = 0;
  v8 = (id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 256);
  v9 = objc_msgSend(*v8, sel_contents);
  *v9 = *(_OWORD *)(v5 + 8);
  v10 = *(_OWORD *)(v5 + 40);
  v11 = *(_OWORD *)(v5 + 72);
  v12 = *(_OWORD *)(v5 + 24);
  v9[3] = *(_OWORD *)(v5 + 56);
  v9[4] = v11;
  v9[1] = v12;
  v9[2] = v10;
  v13 = *(_OWORD *)(v5 + 104);
  v14 = *(_OWORD *)(v5 + 120);
  v15 = *(_OWORD *)(v5 + 88);
  *((_DWORD *)v9 + 32) = *(_DWORD *)(v5 + 136);
  v9[6] = v13;
  v9[7] = v14;
  v9[5] = v15;
  v16 = *(re::BufferTable **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 720);
  v26 = 0x1C6D7B14F4E32CD0;
  re::BufferTable::setBuffer(v16, (const re::WeakStringID *)&v26, (uint64_t)v8);
  if (v21)

  if (v23)
  if (v25)

}

void re::UploadMultiSceneConstantsNode::~UploadMultiSceneConstantsNode(re::UploadMultiSceneConstantsNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::UploadTonemapConstantsNode::~UploadTonemapConstantsNode(re::UploadTonemapConstantsNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::LightContexts>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

_anonymous_namespace_ *re::recordSortingDebugInformation(_anonymous_namespace_ *result, _anonymous_namespace_ *a2)
{
  re::DynamicString *v2;
  uint64_t v4;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _anonymous_namespace_ *v27;
  int v28;
  int v29;
  re::DrawCallRecorder *v30;
  uint64_t v31;
  char v32;
  _anonymous_namespace_ *v33;
  re::DynamicString *v34;
  _anonymous_namespace_ *v35;

  v2 = *(re::DynamicString **)(*(_QWORD *)result + 24);
  if (v2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 && *((_QWORD *)a2 + 1) != 0)
    {
      v6 = result;
      v7 = *(unsigned int *)(v4 + 80);
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = (int *)(*(_QWORD *)(v4 + 64) + 8);
        while (1)
        {
          v10 = *v9;
          v9 += 10;
          if (v10 < 0)
            break;
          if (v7 == ++v8)
          {
            LODWORD(v8) = *(_DWORD *)(v4 + 80);
            break;
          }
        }
      }
      else
      {
        LODWORD(v8) = 0;
      }
      if ((_DWORD)v7 != (_DWORD)v8)
      {
        v11 = v8;
        do
        {
          v12 = (_QWORD *)(*(_QWORD *)(v4 + 64) + 40 * v11);
          v14 = v12[2];
          v13 = v12[3];
          v15 = v12[4];
          v33 = a2;
          v34 = v2;
          v35 = v6;
          re::recordSortingDebugInformation(re::RenderGraphContext &,re::MeshSortingContext &)::$_0::operator()((_anonymous_namespace_ *)&v33, v14, v13, "RenderPassGroup", 0);
          result = re::recordSortingDebugInformation(re::RenderGraphContext &,re::MeshSortingContext &)::$_0::operator()((_anonymous_namespace_ *)&v33, v14, v15, "FadeGroup", 1);
          if (*(_DWORD *)(v4 + 80) <= (v8 + 1))
            v16 = v8 + 1;
          else
            v16 = *(_DWORD *)(v4 + 80);
          v17 = v8;
          while (1)
          {
            v11 = (v17 + 1);
            if (v16 - 1 == v17)
              break;
            ++v17;
            LODWORD(v8) = v11;
            if ((*(_DWORD *)(*(_QWORD *)(v4 + 64) + 40 * v11 + 8) & 0x80000000) != 0)
              goto LABEL_22;
          }
          LODWORD(v8) = v16;
LABEL_22:
          ;
        }
        while ((_DWORD)v7 != (_DWORD)v8);
        v4 = *(_QWORD *)a2;
      }
      v18 = *(unsigned int *)(v4 + 32);
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = (int *)(*(_QWORD *)(v4 + 16) + 8);
        while (1)
        {
          v21 = *v20;
          v20 += 30;
          if (v21 < 0)
            break;
          if (v18 == ++v19)
          {
            LODWORD(v19) = *(_DWORD *)(v4 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
      if ((_DWORD)v18 != (_DWORD)v19)
      {
        v22 = v19;
        v30 = (_anonymous_namespace_ *)((char *)v6 + 1336);
        do
        {
          v23 = *(_QWORD *)(v4 + 16) + 120 * v22;
          v25 = *(_QWORD *)(v23 + 16);
          v24 = *(_QWORD *)(v23 + 24);
          v26 = *(unsigned int *)(v23 + 32);
          re::DynamicString::format(v2, (re::Allocator *)"%llu", (re::DynamicString *)&v31, v24);
          if (*((_BYTE *)v6 + 1332))
            re::DrawCallRecorder::savePerEntityDebugInformation(v30, v25, (const re::DynamicString *)&v33, (const re::DynamicString *)&v31);
          if (v31 && (v32 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v31 + 40))();
          v27 = v33;
          if (v33 && (v34 & 1) != 0)
            v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v33 + 40))();
          re::DynamicString::format(v2, (re::Allocator *)"%d", (re::DynamicString *)&v31, v26);
          if (*((_BYTE *)v6 + 1332))
            re::DrawCallRecorder::savePerEntityDebugInformation(v30, v25, (const re::DynamicString *)&v33, (const re::DynamicString *)&v31);
          if (v31 && (v32 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v31 + 40))();
          result = v33;
          if (v33 && (v34 & 1) != 0)
            result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v33 + 40))();
          if (*(_DWORD *)(v4 + 32) <= (v19 + 1))
            v28 = v19 + 1;
          else
            v28 = *(_DWORD *)(v4 + 32);
          while (1)
          {
            v22 = (v19 + 1);
            if (v28 - 1 == (_DWORD)v19)
              break;
            LODWORD(v19) = v19 + 1;
            v29 = v22;
            if ((*(_DWORD *)(*(_QWORD *)(v4 + 16) + 120 * v22 + 8) & 0x80000000) != 0)
              goto LABEL_56;
          }
          v29 = v28;
LABEL_56:
          LODWORD(v19) = v29;
        }
        while ((_DWORD)v18 != v29);
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::recordSortingDebugInformation(re::RenderGraphContext &,re::MeshSortingContext &)::$_0::operator()(_anonymous_namespace_ *result, unint64_t a2, unint64_t a3, const char *a4, char a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  _anonymous_namespace_ *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  char v30;
  _anonymous_namespace_ *v31;
  char v32;
  _BYTE v33[23];
  __int128 v34[4];

  v5 = **(_QWORD **)result;
  if (*(_QWORD *)(v5 + 144))
  {
    v7 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
    v8 = v7 ^ (v7 >> 31);
    v9 = *(unsigned int *)(*(_QWORD *)(v5 + 152) + 4 * (v8 % *(unsigned int *)(v5 + 168)));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v13 = result;
      v14 = *(_QWORD *)(v5 + 160);
      v15 = *(_QWORD *)(v14 + 176 * v9 + 16);
      if (v15 == a3)
      {
LABEL_7:
        v17 = *(_QWORD *)(*(_QWORD *)result + 8);
        if (*(_QWORD *)v17)
        {
          v18 = *(unsigned int *)(*(_QWORD *)(v17 + 8) + 4 * (v8 % *(unsigned int *)(v17 + 24)));
          if ((_DWORD)v18 != 0x7FFFFFFF)
          {
            v19 = *(_QWORD *)(v17 + 16);
            v20 = *(_QWORD *)(v19 + (v18 << 7) + 16);
            if (v20 == a3)
            {
LABEL_13:
              if (v15 != a3)
              {
                while (1)
                {
                  LODWORD(v9) = *(_DWORD *)(v14 + 176 * v9 + 8) & 0x7FFFFFFF;
                  if ((_DWORD)v9 == 0x7FFFFFFF)
                    break;
                  if (*(_QWORD *)(v14 + 176 * v9 + 16) == a3)
                    goto LABEL_18;
                }
                LODWORD(v9) = 0x7FFFFFFF;
              }
LABEL_18:
              v22 = v14 + 176 * v9;
              while (v20 != a3)
              {
                v18 = *(_DWORD *)(v19 + (v18 << 7) + 8) & 0x7FFFFFFF;
                if ((_DWORD)v18 == 0x7FFFFFFF)
                {
                  LODWORD(v18) = 0x7FFFFFFF;
                  break;
                }
                v20 = *(_QWORD *)(v19 + (v18 << 7) + 16);
              }
              v23 = *(float *)(v19 + ((unint64_t)v18 << 7) + 32);
              if (*(_WORD *)(v22 + 96))
              {
                v24 = (_anonymous_namespace_ *)re::DynamicString::format(*((re::DynamicString **)result + 1), (re::Allocator *)"group sort-point based on %d custom sort point(s)", (re::DynamicString *)&v31, *(unsigned __int16 *)(v22 + 96));
              }
              else
              {
              }
              v25 = *((_QWORD *)v13 + 2);
              if ((v32 & 1) != 0)
                v26 = *(_BYTE **)&v33[7];
              else
                v26 = v33;
              re::DynamicString::format(*((re::DynamicString **)v13 + 1), (re::Allocator *)"%llu with group distance %f (%s)", (re::DynamicString *)&v29, a3, v23, v26);
              if (*(_BYTE *)(v25 + 1332))
                re::DrawCallRecorder::savePerEntityDebugInformation((re::DrawCallRecorder *)(v25 + 1336), a2, (const re::DynamicString *)v34, (const re::DynamicString *)&v29);
              if (v29 && (v30 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v29 + 40))();
              if (*(_QWORD *)&v34[0] && (BYTE8(v34[0]) & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)&v34[0] + 40))();
              v27 = *((_QWORD *)v13 + 2);
              if (*(_BYTE *)(v27 + 1332))
              {
                v29 = a3;
                *(_QWORD *)&v34[0] = 0;
                BYTE8(v34[0]) = a5;
                v28 = *(_OWORD *)(v22 + 48);
                v34[1] = *(_OWORD *)(v22 + 32);
                v34[2] = v28;
                v34[3] = *(_OWORD *)(v14 + 176 * v9 + 80);
                re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v27 + 1432, (uint64_t *)&v29, v34);
              }
              result = v31;
              if (v31)
              {
                if ((v32 & 1) != 0)
                  return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v31 + 40))();
              }
            }
            else
            {
              v21 = v18;
              while (1)
              {
                v21 = *(_DWORD *)(v19 + (v21 << 7) + 8) & 0x7FFFFFFF;
                if ((_DWORD)v21 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v19 + (v21 << 7) + 16) == a3)
                  goto LABEL_13;
              }
            }
          }
        }
      }
      else
      {
        v16 = v9;
        while (1)
        {
          LODWORD(v16) = *(_DWORD *)(v14 + 176 * v16 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v16 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v14 + 176 * v16 + 16) == a3)
            goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::add<int>(uint64_t a1, float *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(unsigned int *)a2 ^ ((unint64_t)*(unsigned int *)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(unsigned int *)a2 ^ ((unint64_t)*(unsigned int *)a2 >> 30))) >> 27));
  v7 = v6 ^ (v6 >> 31);
  v8 = *a2;
  if (*(_QWORD *)a1)
  {
    v9 = v7 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (*(float *)(v11 + 24 * v10 + 12) == v8)
      {
LABEL_6:
        v12 = v11 + 24 * v10;
        return v12 + 16;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(float *)(v11 + 24 * v10 + 12) == v8)
          goto LABEL_6;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v13 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v13 == 0x7FFFFFFF)
  {
    v13 = *(unsigned int *)(a1 + 32);
    v14 = v13;
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v7 % *(unsigned int *)(a1 + 24);
      v14 = *(_DWORD *)(a1 + 32);
      v8 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v14 + 1;
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_DWORD *)(v15 + 24 * v13 + 8);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_DWORD *)(v15 + 24 * v13 + 8);
    *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v15 + 24 * v13 + 8) = v16 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v13 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v13 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v13) = v7;
  *(float *)(*(_QWORD *)(a1 + 16) + 24 * v13 + 12) = v8;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 24 * v13 + 16) = *a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v13;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 24 * v13;
  return v12 + 16;
}

void re::RenderGraphCameraSetupNode::setupDrawCallsForCamera(uint64_t a1, double a2, double a3, float32x4_t a4, double a5, float32x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  const char *v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  _OWORD *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  float32x4_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  float32x4_t *v68;
  int v69;
  int v70;
  _BYTE *v71;
  char v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint32x4_t v86;
  unsigned int v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int32x4_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t *v100;
  float32x4_t *v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  unsigned __int8 v106;
  float32x4_t v107;
  float32x4_t v108;
  float v109;
  float v110;
  float32x4_t v111;
  float v112;
  float v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  const char *v117;
  float v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unsigned int v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  uint64_t v163;
  _OWORD *v164;
  __int128 v165;
  __int128 v166;
  __int32 v167;
  __int32 v168;
  _BYTE *v169;
  char v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  size_t v174;
  unint64_t v175;
  unsigned __int8 v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t i;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t j;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _OWORD *v202;
  _OWORD *v203;
  _OWORD *v204;
  _OWORD *v205;
  signed int v206;
  const char *v207;
  const char *v208;
  const char *v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  uint64_t v227;
  uint64_t v228;
  float32x4_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  int v234;
  uint64_t v235;
  char v236;
  char v237;
  float32x4_t v238;
  float32x4_t v239;
  uint64_t v240;
  float32x4_t v241;
  _OWORD v242[2];
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  char v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  char v255;
  int v256;
  unint64_t v257;
  uint64_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  int v262;
  char v263;
  __int16 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  unint64_t v270;
  int v271;
  _OWORD v272[14];
  unint64_t v273;
  int v274;
  _OWORD v275[18];
  char v276;
  _BYTE v277[48];
  __int128 v278;
  uint64_t v279;

  v6 = a1;
  v279 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v218 = *(_QWORD *)(a1 + 24);
  v219 = *(_QWORD *)(a1 + 40);
  v220 = *(_QWORD *)(a1 + 48);
  v221 = *(_QWORD *)(a1 + 32);
  v270 = 0;
  v271 = 0;
  v273 = 0;
  v274 = 0;
  v276 = 0;
  v236 = 0;
  v9 = *(_QWORD *)(v8[1] + 88);
  if (v9)
  {
    v241.i64[0] = 0x7FA75CCDD0CC4AC6;
    v241.i64[1] = (uint64_t)"overrides:disablefrustumculling";
    re::DebugSettingsManager::getWithErrorCode<BOOL>(v9, &v241, &v236);
    re::StringID::destroyString((re::StringID *)&v241);
  }
  if (*(_BYTE *)(v6 + 64) && *(_BYTE *)(v7 + 472) && !v236)
  {
    *(_WORD *)v277 = 256;
    re::buildCullingFrustum(v7 + 64, (_DWORD *)(v7 + 144), *(unsigned __int8 *)(v7 + 490), v277, (uint64_t)&v241, a4, a6);
    re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::move(&v270, (unint64_t *)&v241);
    ++v271;
    re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::move(&v273, &v257);
    ++v274;
    v276 = v269;
    if (v257)
    {
      v10 = &v258;
      v11 = &v258 + 18 * v257;
      do
      {
        *v10 = 0;
        ++*((_DWORD *)v10 + 2);
        v10 += 18;
      }
      while (v10 != v11);
    }
    if (v241.i64[0])
    {
      v12 = v242;
      v13 = &v242[7 * v241.i64[0]];
      do
      {
        *(_QWORD *)v12 = 0;
        ++*((_DWORD *)v12 + 2);
        v12 += 7;
      }
      while (v12 != v13);
    }
  }
  v14 = *(_QWORD *)(*v8 + 24);
  v234 = 0;
  v232 = 0u;
  v233 = 0u;
  v231 = 0u;
  v235 = 0x7FFFFFFFLL;
  v217 = v14;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v232, v14, 3);
  v15 = *(_QWORD **)(v6 + 8);
  v16 = *(_QWORD **)(v6 + 16);
  v17 = *(_QWORD *)(v6 + 24);
  v227 = *(_QWORD *)(v6 + 56);
  v222 = *(_QWORD *)v6;
  v18 = *(_QWORD *)(**(_QWORD **)v6 + 24);
  v19 = atomic_load((unsigned __int8 *)&qword_254120920);
  if ((v19 & 1) == 0)
    goto LABEL_201;
  while (1)
  {
    v20 = qword_254120918;
    v21 = *(const char **)(v17 + 8);
    v22 = strlen(v21);
    v23 = 0x9E3779B97F4A7C17;
    if (v22)
    {
      MurmurHash3_x64_128((uint64_t)v21, v22, 0, (unint64_t *)&v241);
      v23 = ((v241.i64[1] - 0x61C8864680B583E9 + (v241.i64[0] << 6) + ((unint64_t)v241.i64[0] >> 2)) ^ v241.i64[0])
          - 0x61C8864680B583E9;
    }
    v24 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(*(_QWORD *)(v222 + 1168), ((v20 >> 2) + (v20 << 6) + v23) ^ v20);
    if (!v24)
      goto LABEL_153;
    v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 984))(*(_QWORD *)(v24 + 8));
    if (!v25)
      goto LABEL_153;
    v17 = v25;
    *(_QWORD *)&v231 = v25;
    if (!v15[6])
    {
      re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
LABEL_199:
      v240 = 0;
      v243 = 0u;
      v244 = 0u;
      memset(v242, 0, sizeof(v242));
      v241 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v277 = 136315906;
      *(_QWORD *)&v277[4] = "operator[]";
      *(_WORD *)&v277[12] = 1024;
      *(_DWORD *)&v277[14] = 797;
      *(_WORD *)&v277[18] = 2048;
      *(_QWORD *)&v277[20] = 0;
      *(_WORD *)&v277[28] = 2048;
      *(_QWORD *)&v277[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_200;
    }
    re::RenderCamera::computeLocalTransform((re::RenderCamera *)(v15 + 8), (uint64_t)&v241);
    v27 = (int32x4_t)vmulq_f32((float32x4_t)v242[1], (float32x4_t)v242[1]);
    v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
    v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
    v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
    v239 = vnegq_f32(vmulq_n_f32((float32x4_t)v242[1], vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]));
    v30 = v15[9];
    v238.i64[0] = v15[8];
    v238.i64[1] = v30;
    if (!v16[8])
      goto LABEL_199;
    if (v16[3])
      break;
LABEL_200:
    v240 = 0;
    v243 = 0u;
    v244 = 0u;
    memset(v242, 0, sizeof(v242));
    v241 = 0u;
    v6 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v277 = 136315906;
    *(_QWORD *)&v277[4] = "operator[]";
    *(_WORD *)&v277[12] = 1024;
    *(_DWORD *)&v277[14] = 797;
    *(_WORD *)&v277[18] = 2048;
    *(_QWORD *)&v277[20] = 0;
    *(_WORD *)&v277[28] = 2048;
    *(_QWORD *)&v277[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_201:
    if (__cxa_guard_acquire(&qword_254120920))
    {
      qword_254120918 = re::hashString((re *)"RenderGraphDataPipeData", v207);
      __cxa_guard_release(&qword_254120920);
    }
  }
  v31 = 0;
  v32 = (float32x4_t *)v16[10];
  v33 = (_OWORD *)v16[5];
  v34 = *v32;
  v35 = v32[1];
  v36 = v32[2];
  v37 = v32[3];
  v38 = v33[1];
  v39 = v33[2];
  v40 = v33[3];
  *(_OWORD *)v277 = *v33;
  *(_OWORD *)&v277[16] = v38;
  *(_OWORD *)&v277[32] = v39;
  v278 = v40;
  do
  {
    *(float32x4_t *)((char *)&v241 + v31) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)&v277[v31])), v35, *(float32x2_t *)&v277[v31], 1), v36, *(float32x4_t *)&v277[v31], 2), v37, *(float32x4_t *)&v277[v31], 3);
    v31 += 16;
  }
  while (v31 != 64);
  v215 = v8;
  v216 = v7;
  v225 = (float32x4_t)v242[0];
  v226 = v241;
  v223 = (float32x4_t)v243;
  v224 = (float32x4_t)v242[1];
  memset(v277, 0, 36);
  *(_QWORD *)&v277[36] = 0x7FFFFFFFLL;
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v277, v18, 3);
  v230 = *(unsigned int *)(v17 + 128);
  v43 = 0;
  if ((_DWORD)v230)
  {
    v44 = (int *)(*(_QWORD *)(v17 + 112) + 8);
    while (1)
    {
      v45 = *v44;
      v44 += 32;
      if (v45 < 0)
        break;
      if (v230 == ++v43)
      {
        LODWORD(v43) = *(_DWORD *)(v17 + 128);
        break;
      }
    }
  }
  v214 = v18;
  if ((_DWORD)v230 != (_DWORD)v43)
  {
    v65 = v43;
    do
    {
      v66 = *(_QWORD *)(v17 + 112);
      v67 = (__n128 *)(v66 + (v65 << 7));
      v68 = (float32x4_t *)&v67[2];
      v241 = (float32x4_t)xmmword_2260E5F10;
      v242[0] = xmmword_2260E5F20;
      v242[1] = xmmword_2260E5F40;
      v243 = xmmword_2260E5D70;
      LOBYTE(v240) = 0;
      re::RenderGraphMeshNodeBase::computeSortDistance((uint64_t)&v67[2], &v241, &v67[4], v67 + 5, (float32x2_t *)&v238, &v239, 0, (uint64_t)&v240, 0.0, 0.0, *(double *)v41.i64, v42);
      v70 = v69;
      LODWORD(v240) = v69;
      v241.i32[0] = 0;
      v71 = (_BYTE *)re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::add<int>((uint64_t)v277, (float *)&v240, &v241);
      v72 = (*v71)++;
      v75 = v67[1].n128_u64[0];
      v74 = v67 + 1;
      v73 = v75;
      *(__int32 *)((char *)&v241.i32[1] + 3) = 0;
      v241.i64[0] = 0;
      v76 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v75 ^ (v75 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v75 ^ (v75 >> 30))) >> 27));
      v77 = v76 ^ (v76 >> 31);
      if ((_QWORD)v232)
      {
        v78 = v77 % DWORD2(v233);
        v79 = *(unsigned int *)(*((_QWORD *)&v232 + 1) + 4 * v78);
        if ((_DWORD)v79 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v233 + 40 * v79 + 16) != v73)
          {
            LODWORD(v79) = *(_DWORD *)(v233 + 40 * v79 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v79 == 0x7FFFFFFF)
              goto LABEL_51;
          }
          v81 = v233 + 40 * v79;
          goto LABEL_53;
        }
      }
      else
      {
        LODWORD(v78) = 0;
      }
LABEL_51:
      v80 = re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v232, v78, v77, v74, (uint64_t *)&v241);
      ++HIDWORD(v235);
      v81 = v233 + 40 * v80;
LABEL_53:
      v82 = v81 + 24;
      *(_DWORD *)(v81 + 24) = v70;
      *(_BYTE *)(v81 + 32) = v72;
      v83 = v66 + (v65 << 7);
      *(_WORD *)(v82 + 9) = *(_WORD *)(v83 + 113);
      if (*(_BYTE *)(v83 + 112))
      {
        v84 = *v68;
        v85 = v68[1];
        v86 = (uint32x4_t)vcgtq_f32(*v68, v85);
        v86.i32[3] = v86.i32[2];
        v87 = vmaxvq_u32(v86);
        v88.i64[0] = 0;
        v88.i32[2] = 0;
        v89 = 0uLL;
        if ((v87 & 0x80000000) == 0)
        {
          v90.i64[0] = 0x3F0000003F000000;
          v90.i64[1] = 0x3F0000003F000000;
          v89 = vmulq_f32(vaddq_f32(v84, v85), v90);
          v91.i64[0] = 0x3F0000003F000000;
          v91.i64[1] = 0x3F0000003F000000;
          v88 = vmulq_f32(vaddq_f32(v84, v85), v91);
        }
        v92 = vsubq_f32(v238, v89);
        v93 = (int32x4_t)vmulq_f32(v92, v92);
        v93.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v93, 2), vadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v93.i8, 1))).u32[0];
        v94 = vrsqrte_f32((float32x2_t)v93.u32[0]);
        v95 = vmul_f32(v94, vrsqrts_f32((float32x2_t)v93.u32[0], vmul_f32(v94, v94)));
        v96 = vsubq_f32(v85, v84);
        v96.i32[3] = 0;
        v97 = vmaxnmq_f32(v96, (float32x4_t)0);
        v98 = vmulq_f32(v97, v97);
        v88.f32[3] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).f32[0])* 0.5;
        v229 = vmulq_n_f32(v92, vmul_f32(v95, vrsqrts_f32((float32x2_t)v93.u32[0], vmul_f32(v95, v95))).f32[0]);
        v99 = vaddq_f32(v88, vmulq_n_f32(v229, v88.f32[3]));
        v100 = (float32x4_t *)(v66 + (v65 << 7));
        v102 = v100[6];
        v101 = v100 + 6;
        v103 = v102;
        v104 = vmulq_f32(v103, v103);
        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1))).f32[0]) >= 1.0e-10)
        {
          v105 = v239;
          v106 = atomic_load((unsigned __int8 *)&qword_2541209B0);
          if ((v106 & 1) == 0)
          {
            v212 = v99;
            v213 = v88;
            v210 = v239;
            v211 = v103;
            v116 = __cxa_guard_acquire(&qword_2541209B0);
            v105 = v210;
            v103 = v211;
            v99 = v212;
            v88 = v213;
            if (v116)
            {
              re::Defaults::floatValue((re::Defaults *)"depthBiasGroupNormalAngleCosine", v117, (uint64_t)&v241);
              v118 = v241.f32[1];
              if (!v241.i8[0])
                v118 = 0.5;
              _MergedGlobals_461 = LODWORD(v118);
              __cxa_guard_release(&qword_2541209B0);
              v105 = v210;
              v103 = v211;
              v99 = v212;
              v88 = v213;
            }
          }
          v107 = vmulq_f32(v103, vnegq_f32(v105));
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 2), vaddq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v107.f32, 1))).f32[0] > *(float *)&_MergedGlobals_461)v99 = v88;
        }
        v108 = vaddq_f32(v223, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v226, v99.f32[0]), v225, *(float32x2_t *)v99.f32, 1), v224, v99, 2));
        v109 = 1.0;
        if (v108.f32[3] > 0.0)
        {
          v108.f32[0] = v108.f32[2] / v108.f32[3];
          if ((float)(v108.f32[2] / v108.f32[3]) > 0.9999)
            v108.f32[0] = 0.9999;
          if (v108.f32[0] >= 0.0)
            v109 = v108.f32[0];
          else
            v109 = 0.0;
        }
        v110 = nextafterf(v109, 10.0);
        v111 = vmulq_f32(v229, *v101);
        v41 = vaddq_f32(v111, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 1));
        v112 = v110 - v109;
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 2), v41).f32[0] <= 0.0)
          v113 = -256.0;
        else
          v113 = 256.0;
        *(float *)(v82 + 4) = v112 * v113;
      }
      else
      {
        *(_DWORD *)(v82 + 4) = 0;
      }
      v114 = *(_DWORD *)(v17 + 128);
      if (v114 <= (int)v43 + 1)
        v114 = v43 + 1;
      while (1)
      {
        v65 = (v43 + 1);
        if (v114 - 1 == (_DWORD)v43)
          break;
        LODWORD(v43) = v43 + 1;
        v115 = v65;
        if ((*(_DWORD *)(*(_QWORD *)(v17 + 112) + (v65 << 7) + 8) & 0x80000000) != 0)
          goto LABEL_77;
      }
      v115 = v114;
LABEL_77:
      LODWORD(v43) = v115;
    }
    while ((_DWORD)v230 != v115);
  }
  v46 = v222;
  if (!HIDWORD(v233)
    || re::RenderGraphDataStore::tryGet<re::MeshSortGroupCameraData>(*(_QWORD *)(v222 + 1168), *(_QWORD *)(*(_QWORD *)(v222 + 40) + 48)))
  {
    goto LABEL_30;
  }
  v119 = *(_QWORD *)(v222 + 1168);
  v120 = (unint64_t)"N2re23MeshSortGroupCameraDataE";
  if (((unint64_t)"N2re23MeshSortGroupCameraDataE" & 0x8000000000000000) != 0)
  {
    v121 = (unsigned __int8 *)((unint64_t)"N2re23MeshSortGroupCameraDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v122 = 5381;
    do
    {
      v120 = v122;
      v123 = *v121++;
      v122 = (33 * v122) ^ v123;
    }
    while (v123);
  }
  v124 = (*(_QWORD *)(*(_QWORD *)(v222 + 40) + 48) - 0x61C8864680B583E9 + (v120 << 6) + (v120 >> 2)) ^ v120;
  v125 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v119 + 8) + 32))(*(_QWORD *)(v119 + 8), 56, 8);
  *(_QWORD *)v125 = &off_24ED86B30;
  *(_OWORD *)(v125 + 24) = 0u;
  *(_DWORD *)(v125 + 40) = 0;
  *(_OWORD *)(v125 + 8) = 0u;
  *(_QWORD *)(v125 + 44) = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v125 + 8, v214, 3);
  v126 = *(_QWORD *)(v119 + 64);
  if (v126
    && (v126 = v124 % *(unsigned int *)(v119 + 88),
        v127 = *(unsigned int *)(*(_QWORD *)(v119 + 72) + 4 * v126),
        (_DWORD)v127 != 0x7FFFFFFF))
  {
    v134 = *(_QWORD *)(v119 + 80);
    while (*(_QWORD *)(v134 + 24 * v127 + 8) != v124)
    {
      LODWORD(v127) = *(_DWORD *)(v134 + 24 * v127) & 0x7FFFFFFF;
      if ((_DWORD)v127 == 0x7FFFFFFF)
        goto LABEL_89;
    }
    v133 = v134 + 24 * v127;
  }
  else
  {
LABEL_89:
    v128 = *(unsigned int *)(v119 + 100);
    if ((_DWORD)v128 == 0x7FFFFFFF)
    {
      v128 = *(unsigned int *)(v119 + 96);
      v129 = v128;
      if ((_DWORD)v128 == *(_DWORD *)(v119 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v119 + 64, 2 * *(_DWORD *)(v119 + 92));
        LODWORD(v126) = v124 % *(unsigned int *)(v119 + 88);
        v129 = *(_DWORD *)(v119 + 96);
      }
      *(_DWORD *)(v119 + 96) = v129 + 1;
      v130 = *(_QWORD *)(v119 + 80);
      v131 = *(_DWORD *)(v130 + 24 * v128);
    }
    else
    {
      v130 = *(_QWORD *)(v119 + 80);
      v131 = *(_DWORD *)(v130 + 24 * v128);
      *(_DWORD *)(v119 + 100) = v131 & 0x7FFFFFFF;
    }
    v132 = 24 * v128;
    *(_DWORD *)(v130 + v132) = v131 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v119 + 80) + v132) = *(_DWORD *)(*(_QWORD *)(v119 + 80) + 24 * v128) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v119 + 72) + 4 * v126);
    *(_QWORD *)(*(_QWORD *)(v119 + 80) + 24 * v128 + 8) = v124;
    *(_QWORD *)(*(_QWORD *)(v119 + 80) + 24 * v128 + 16) = v125;
    *(_DWORD *)(*(_QWORD *)(v119 + 72) + 4 * v126) = v128;
    ++*(_DWORD *)(v119 + 92);
    ++*(_DWORD *)(v119 + 104);
    v133 = *(_QWORD *)(v119 + 80) + 24 * v128;
  }
  v135 = *(_QWORD *)(v133 + 16);
  v46 = v222;
  if ((__int128 *)(v135 + 8) != &v232)
  {
    if (*(_QWORD *)(v135 + 8))
    {
      v136 = v135 + 8;
      if ((_QWORD)v232)
      {
        re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v136, (uint64_t)&v232);
        ++*(_DWORD *)(v135 + 48);
      }
      else
      {
        re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v136);
      }
    }
    else if ((_QWORD)v232)
    {
      if (HIDWORD(v233) <= 3)
        v206 = 3;
      else
        v206 = HIDWORD(v233);
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v135 + 8, v232, v206);
      re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v135 + 8, (uint64_t)&v232);
    }
  }
LABEL_30:
  v47 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>>(*(_QWORD *)(v46 + 1168), *(_QWORD *)(*(_QWORD *)(v46 + 40) + 48));
  v50 = v227;
  if (v47)
    v51 = v227 == 0;
  else
    v51 = 0;
  if (v51)
  {
    v50 = v47 + 8;
LABEL_151:
    v8 = v215;
    v7 = v216;
  }
  else
  {
    v8 = v215;
    v7 = v216;
    if (!v227)
    {
      v52 = *(_QWORD *)(v46 + 1168);
      v53 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE";
      if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE" & 0x8000000000000000) != 0)
      {
        v54 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_20MeshRenderPassGroupsEEE" & 0x7FFFFFFFFFFFFFFFLL);
        v55 = 5381;
        do
        {
          v53 = v55;
          v56 = *v54++;
          v55 = (33 * v55) ^ v56;
        }
        while (v56);
      }
      v57 = (*(_QWORD *)(*(_QWORD *)(v46 + 40) + 48) - 0x61C8864680B583E9 + (v53 << 6) + (v53 >> 2)) ^ v53;
      v58 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v52 + 8) + 32))(*(_QWORD *)(v52 + 8), 56, 8);
      v241 = 0u;
      memset(v242, 0, 20);
      *(_QWORD *)((char *)&v242[1] + 4) = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v241, v214, 3);
      *(_QWORD *)v58 = &off_24ED86AF0;
      *(_DWORD *)(v58 + 48) = 0;
      *(float32x4_t *)(v58 + 8) = v241;
      v241 = 0uLL;
      *(_QWORD *)(v58 + 24) = *(_QWORD *)&v242[0];
      *(_QWORD *)&v242[0] = 0;
      *(_QWORD *)(v58 + 32) = *((_QWORD *)&v242[0] + 1);
      *(_QWORD *)(v58 + 40) = *(_QWORD *)&v242[1];
      *(_OWORD *)((char *)v242 + 8) = xmmword_2260F5A80;
      re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v241);
      v59 = *(_QWORD *)(v52 + 64);
      if (!v59)
        goto LABEL_40;
      v59 = v57 % *(unsigned int *)(v52 + 88);
      v60 = *(unsigned int *)(*(_QWORD *)(v52 + 72) + 4 * v59);
      if ((_DWORD)v60 == 0x7FFFFFFF)
        goto LABEL_40;
      v139 = *(_QWORD *)(v52 + 80);
      if (*(_QWORD *)(v139 + 24 * v60 + 8) == v57)
      {
LABEL_108:
        v138 = v139 + 24 * v60;
      }
      else
      {
        while (1)
        {
          LODWORD(v60) = *(_DWORD *)(v139 + 24 * v60) & 0x7FFFFFFF;
          if ((_DWORD)v60 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v139 + 24 * v60 + 8) == v57)
            goto LABEL_108;
        }
LABEL_40:
        v61 = *(unsigned int *)(v52 + 100);
        if ((_DWORD)v61 == 0x7FFFFFFF)
        {
          v61 = *(unsigned int *)(v52 + 96);
          v62 = v61;
          if ((_DWORD)v61 == *(_DWORD *)(v52 + 88))
          {
            re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v52 + 64, 2 * *(_DWORD *)(v52 + 92));
            LODWORD(v59) = v57 % *(unsigned int *)(v52 + 88);
            v62 = *(_DWORD *)(v52 + 96);
          }
          *(_DWORD *)(v52 + 96) = v62 + 1;
          v63 = *(_QWORD *)(v52 + 80);
          v64 = *(_DWORD *)(v63 + 24 * v61);
        }
        else
        {
          v63 = *(_QWORD *)(v52 + 80);
          v64 = *(_DWORD *)(v63 + 24 * v61);
          *(_DWORD *)(v52 + 100) = v64 & 0x7FFFFFFF;
        }
        v137 = 24 * v61;
        *(_DWORD *)(v63 + v137) = v64 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(v52 + 80) + v137) = *(_DWORD *)(*(_QWORD *)(v52 + 80) + 24 * v61) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v52 + 72) + 4 * v59);
        *(_QWORD *)(*(_QWORD *)(v52 + 80) + 24 * v61 + 8) = v57;
        *(_QWORD *)(*(_QWORD *)(v52 + 80) + 24 * v61 + 16) = v58;
        *(_DWORD *)(*(_QWORD *)(v52 + 72) + 4 * v59) = v61;
        ++*(_DWORD *)(v52 + 92);
        ++*(_DWORD *)(v52 + 104);
        v138 = *(_QWORD *)(v52 + 80) + 24 * v61;
      }
      v50 = *(_QWORD *)(v138 + 16) + 8;
    }
    v140 = *(unsigned int *)(v17 + 176);
    if ((_DWORD)v140)
    {
      v141 = 0;
      v142 = (int *)(*(_QWORD *)(v17 + 160) + 8);
      while (1)
      {
        v143 = *v142;
        v142 += 44;
        if (v143 < 0)
          break;
        if (v140 == ++v141)
        {
          LODWORD(v141) = *(_DWORD *)(v17 + 176);
          break;
        }
      }
    }
    else
    {
      LODWORD(v141) = 0;
    }
    if ((_DWORD)v140 != (_DWORD)v141)
    {
      v144 = v141;
      v228 = v50;
      while (1)
      {
        v145 = *(_QWORD *)(v17 + 160);
        v146 = v145 + 176 * v144;
        v149 = *(_QWORD *)(v146 + 16);
        v148 = (_QWORD *)(v146 + 16);
        v147 = v149;
        LOBYTE(v242[0]) = 0;
        v241.i64[0] = 0;
        v241.i16[4] = 0;
        LOBYTE(v245) = 1;
        v150 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v149 ^ (v149 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v149 ^ (v149 >> 30))) >> 27));
        v151 = v150 ^ (v150 >> 31);
        if (*(_QWORD *)v50)
        {
          v152 = v151 % *(unsigned int *)(v50 + 24);
          v153 = *(unsigned int *)(*(_QWORD *)(v50 + 8) + 4 * v152);
          if ((_DWORD)v153 != 0x7FFFFFFF)
          {
            v154 = *(_QWORD *)(v50 + 16);
            while (*(_QWORD *)(v154 + (v153 << 7) + 16) != v147)
            {
              v153 = *(_DWORD *)(v154 + (v153 << 7) + 8) & 0x7FFFFFFF;
              if ((_DWORD)v153 == 0x7FFFFFFF)
                goto LABEL_125;
            }
            v156 = v154 + (v153 << 7);
            goto LABEL_127;
          }
        }
        else
        {
          LODWORD(v152) = 0;
        }
LABEL_125:
        v155 = re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v50, v152, v151, v148, (uint64_t *)&v241);
        ++*(_DWORD *)(v50 + 40);
        v156 = *(_QWORD *)(v50 + 16) + ((unint64_t)v155 << 7);
LABEL_127:
        v157 = v156 + 32;
        v158 = v145 + 176 * v144;
        *(_BYTE *)(v157 + 5) = *(_BYTE *)(v158 + 64);
        *(_WORD *)(v157 + 6) = *(_WORD *)(v158 + 65);
        v159 = *(unsigned __int8 *)(v158 + 112);
        if (*(_BYTE *)(v157 + 16))
          v160 = 0;
        else
          v160 = v159 == 0;
        if (!v160)
        {
          if (*(_BYTE *)(v157 + 16))
            v161 = v159 == 0;
          else
            v161 = 0;
          if (v161)
          {
            *(_BYTE *)(v157 + 16) = 0;
          }
          else
          {
            if (*(_BYTE *)(v157 + 16))
              v162 = 1;
            else
              v162 = v159 == 0;
            if (v162)
            {
              v163 = v145 + 176 * v144;
              v165 = *(_OWORD *)(v163 + 128);
              v166 = *(_OWORD *)(v163 + 144);
              *(_QWORD *)(v157 + 64) = *(_QWORD *)(v163 + 160);
            }
            else
            {
              *(_BYTE *)(v157 + 16) = 1;
              v164 = (_OWORD *)(v145 + 176 * v144);
              v165 = v164[8];
              v166 = v164[9];
              v48 = v164[10];
              *(_OWORD *)(v157 + 64) = v48;
            }
            *(_OWORD *)(v157 + 32) = v165;
            *(_OWORD *)(v157 + 48) = v166;
          }
        }
        v241 = (float32x4_t)xmmword_2260E5F10;
        v242[0] = xmmword_2260E5F20;
        v242[1] = xmmword_2260E5F40;
        v243 = xmmword_2260E5D70;
        v237 = 5;
        LOBYTE(v240) = 0;
        re::RenderGraphMeshNodeBase::computeSortDistance((uint64_t)(v148 + 2), &v241, &v237, (__n128 *)(v145 + 176 * v144 + 80), (float32x2_t *)&v238, &v239, 0, (uint64_t)&v240, 0.0, 0.0, *(double *)&v48, v49);
        v168 = v167;
        v241.i32[0] = v167;
        LODWORD(v240) = 0;
        v169 = (_BYTE *)re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::add<int>((uint64_t)v277, v241.f32, &v240);
        v170 = (*v169)++;
        *(_DWORD *)v157 = v168;
        *(_BYTE *)(v157 + 4) = v170;
        v171 = *(_DWORD *)(v17 + 176);
        if (v171 <= (int)v141 + 1)
          v171 = v141 + 1;
        v50 = v228;
        while (1)
        {
          v144 = (v141 + 1);
          if (v171 - 1 == (_DWORD)v141)
            break;
          LODWORD(v141) = v141 + 1;
          v172 = v144;
          if ((*(_DWORD *)(*(_QWORD *)(v17 + 160) + 176 * v144 + 8) & 0x80000000) != 0)
            goto LABEL_150;
        }
        v172 = v171;
LABEL_150:
        LODWORD(v141) = v172;
        if ((_DWORD)v140 == v172)
          goto LABEL_151;
      }
    }
  }
  *((_QWORD *)&v231 + 1) = v50;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v277);
LABEL_153:
  if (*(_BYTE *)(v222 + 1332))
    re::recordSortingDebugInformation((_anonymous_namespace_ *)v222, (_anonymous_namespace_ *)&v231);
  v173 = *(_QWORD *)(*(_QWORD *)(v221 + 16) + 32);
  memset(v277, 0, 36);
  *(_QWORD *)&v277[36] = 0x7FFFFFFFLL;
  re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v277, v217, 3);
  v174 = strlen(*(const char **)(v218 + 8));
  v175 = 0x9E3779B97F4A7C17;
  if (v174)
  {
    MurmurHash3_x64_128(*(_QWORD *)(v218 + 8), v174, 0, (unint64_t *)&v241);
    v175 = ((v241.i64[1] - 0x61C8864680B583E9 + (v241.i64[0] << 6) + ((unint64_t)v241.i64[0] >> 2)) ^ v241.i64[0])
         - 0x61C8864680B583E9;
  }
  v176 = atomic_load((unsigned __int8 *)&qword_254120930);
  if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_254120930))
  {
    qword_254120928 = re::hashString((re *)"DynamicFunctionConstants", v208);
    __cxa_guard_release(&qword_254120930);
  }
  v177 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(v8[146], (v175 + (qword_254120928 << 6) + ((unint64_t)qword_254120928 >> 2)) ^ qword_254120928);
  if (v177)
    v178 = v177 + 8;
  else
    v178 = 0;
  v179 = atomic_load((unsigned __int8 *)&qword_254120940);
  if ((v179 & 1) == 0 && __cxa_guard_acquire(&qword_254120940))
  {
    qword_254120938 = re::hashString((re *)"LightContext", v209);
    __cxa_guard_release(&qword_254120940);
  }
  v180 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::LightContexts>>(v8[146], (v175 + (qword_254120938 << 6) + ((unint64_t)qword_254120938 >> 2)) ^ qword_254120938);
  v181 = 0;
  v182 = *(_QWORD *)(v219 + 8);
  v183 = *(_QWORD *)(v221 + 8);
  v184 = *(_QWORD *)(v6 + 80);
  v185 = *(_BYTE *)(v6 + 66);
  v241.i64[0] = v173;
  v241.i64[1] = (uint64_t)v8;
  *((_QWORD *)&v242[0] + 1) = &v231;
  *(_QWORD *)&v242[1] = v220 + 16;
  *((_QWORD *)&v242[1] + 1) = &v270;
  v243 = 0uLL;
  do
  {
    *(_DWORD *)((char *)&v244 + v181) = -65280;
    v181 += 4;
  }
  while (v181 != 8);
  DWORD2(v244) = 0;
  if (v180)
    v186 = v180 + 8;
  else
    v186 = 0;
  BYTE12(v244) = v185;
  *(_QWORD *)&v242[0] = off_24ED78260;
  v256 = 0;
  LOBYTE(v257) = 0;
  v258 = 0;
  v245 = 0u;
  v246 = 0u;
  v247 = 0u;
  v248 = 0;
  v249 = 0u;
  v250 = 0u;
  v251 = 0u;
  v252 = 0u;
  v253 = 0u;
  v254 = 0u;
  v255 = 0;
  v259 = xmmword_226132B10;
  v260 = 0u;
  v261 = 0u;
  v262 = -1;
  v263 = 0;
  v264 = 1;
  v265 = v183;
  v266 = v182;
  v267 = v184;
  v268 = v178;
  v187 = v7;
  v188 = *(_QWORD *)(v7 + 440);
  if (v188)
  {
    v189 = *(_QWORD *)(v188 + 40);
    if (v189)
    {
      for (i = 0; i != v189; ++i)
      {
        v191 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v188, i);
        v192 = *(_QWORD *)(v191 + 16);
        if (v192)
        {
          v193 = *(_QWORD *)(v191 + 32);
          v194 = 656 * v192;
          do
          {
            v239.i32[0] = 0;
              re::mesh_traversal::traverseMeshScene((uint64_t)v242, v193, v241.i64[0], v239.i32[0]);
            v193 += 656;
            v194 -= 656;
          }
          while (v194);
        }
      }
    }
  }
  v195 = *(_QWORD *)(v187 + 448);
  if (v195)
  {
    v196 = *(_QWORD *)(v195 + 40);
    if (v196)
    {
      for (j = 0; j != v196; ++j)
      {
        v198 = re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::operator[](v195, j);
        v199 = *(_QWORD *)(v198 + 16);
        if (v199)
        {
          v200 = *(_QWORD *)(v198 + 32);
          v201 = 800 * v199;
          do
          {
            v239.i32[0] = 0;
              re::mesh_traversal::traverseVFXScene((uint64_t)v242, v200, v241.i64[1], v239.i32[0]);
            v200 += 800;
            v201 -= 800;
          }
          while (v201);
        }
      }
    }
  }
  re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v277);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)&v232);
  if (v273)
  {
    v202 = v275;
    v203 = &v275[9 * v273];
    do
    {
      *(_QWORD *)v202 = 0;
      ++*((_DWORD *)v202 + 2);
      v202 += 9;
    }
    while (v202 != v203);
  }
  if (v270)
  {
    v204 = v272;
    v205 = &v272[7 * v270];
    do
    {
      *(_QWORD *)v204 = 0;
      ++*((_DWORD *)v204 + 2);
      v204 += 7;
    }
    while (v204 != v205);
  }
}

BOOL re::`anonymous namespace'::shouldDrawMeshForCamera(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  int v5;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(a2 + 428) & *(_DWORD *)(v4 + 504)) == 0)
    return 0;
  v5 = *(unsigned __int8 *)(a1 + 65);
  if (*(_BYTE *)(a1 + 65))
  {
    if (*(_BYTE *)(v4 + 473) && *(_BYTE *)(a2 + 641) == 0)
      return 0;
  }
  if (!a3)
    return (!*(_BYTE *)(a1 + 68) || *(_DWORD *)(a1 + 72) == *(unsigned __int16 *)(a2 + 424))
        && (!v5 || *(unsigned __int8 *)(v4 + 473) | *(unsigned __int8 *)(a2 + 645));
  v7 = *(_DWORD **)(a3 + 56);
  if (v7)
  {
    v8 = *(unsigned __int16 *)(a2 + 424);
    v9 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27));
    v10 = *(unsigned int *)(*(_QWORD *)(a3 + 64) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(a3 + 80)));
    if ((_DWORD)v10 == 0x7FFFFFFF)
    {
LABEL_10:
      LODWORD(v7) = 0;
      goto LABEL_24;
    }
    v11 = *(_QWORD *)(a2 + 416);
    v12 = *(_QWORD *)(a3 + 72);
    while (*(unsigned __int16 *)(v12 + 72 * v10 + 12) != (_DWORD)v8)
    {
      LODWORD(v10) = *(_DWORD *)(v12 + 72 * v10 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v10 == 0x7FFFFFFF)
        goto LABEL_10;
    }
    v13 = v12 + 72 * v10;
    if (*(_QWORD *)(v13 + 24))
    {
      v14 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
      v15 = *(unsigned int *)(*(_QWORD *)(v12 + 72 * v10 + 32)
                            + 4 * ((v14 ^ (v14 >> 31)) % *(unsigned int *)(v12 + 72 * v10 + 48)));
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(v12 + 72 * v10 + 40);
        if (*(_QWORD *)(v16 + 32 * v15 + 16) == v11)
        {
LABEL_20:
          v7 = (_DWORD *)(v16 + 32 * v15 + 24);
          goto LABEL_21;
        }
        while (1)
        {
          v15 = *(_DWORD *)(v16 + 32 * v15 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v15 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v16 + 32 * v15 + 16) == v11)
            goto LABEL_20;
        }
      }
    }
    v7 = 0;
LABEL_21:
    if (!v7)
      v7 = (_DWORD *)(v13 + 16);
    LODWORD(v7) = *v7;
  }
LABEL_24:
  *a4 = (_DWORD)v7;
  return (!*(_BYTE *)(a1 + 68) || *(_DWORD *)(a1 + 72) == *(unsigned __int16 *)(a2 + 424))
      && (!v5 || *(unsigned __int8 *)(v4 + 473) | *(unsigned __int8 *)(a2 + 645));
}

void re::RenderGraphCameraSetupNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_BYTE *)a2 + 592) = 1;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphCameraSetupNode::execute(const char **this, int32x4_t *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::Allocator *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  size_t v18;
  re::RenderGraphCameraSetupNode *v19;
  unint64_t v20;
  re::CameraMatrices *v21;
  _QWORD *v22;
  uint64_t v23;
  _anonymous_namespace_ *v24;
  re::Projection *v25;
  _anonymous_namespace_ *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  re::RenderGraphCameraSetupNode *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  float32x4_t v54;
  double v55;
  float32x4_t v56;
  re *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[16];
  re::CameraMatrices *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  char v76;
  int v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v64, 5034, 0);
  v4 = re::RenderGraphDataStore::get<re::CameraData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  v5 = atomic_load((unsigned __int8 *)&qword_254120950);
  v6 = &qword_254120948;
  if ((v5 & 1) == 0)
    goto LABEL_41;
  while (1)
  {
    v7 = re::RenderGraphDataStore::get<re::RendererGlobals>(a2[73].i64[0], *v6);
    v63 = re::RenderGraphDataStore::get<re::SceneScope>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
    v8 = atomic_load((unsigned __int8 *)v6 + 24);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254120960))
    {
      qword_254120958 = re::hashString((re *)"DynamicFunctionConstants", v60);
      __cxa_guard_release(&qword_254120960);
    }
    v9 = qword_254120958;
    v10 = strlen(this[4]);
    if (v10)
    {
      MurmurHash3_x64_128((uint64_t)this[4], v10, 0, &v67);
      v11 = ((v68 - 0x61C8864680B583E9 + (v67 << 6) + (v67 >> 2)) ^ v67) - 0x61C8864680B583E9;
    }
    else
    {
      v11 = 0x9E3779B97F4A7C17;
    }
    v12 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a2[73].i64[0], ((v9 >> 2) + (v9 << 6) + v11) ^ v9);
    v13 = v12 + 8;
    if (!v12)
      v13 = 0;
    v62 = v13;
    v14 = *(re::Allocator **)(*(_QWORD *)(v7 + 8) + 24);
    if (re::RenderGraphDataStore::tryGet<re::CameraMatrices>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48)))
      break;
    v15 = a2[73].i64[0];
    v16 = *(_QWORD *)(a2[2].i64[1] + 48);
    v65 = 0;
    v66 = 0;
    if ((v17 & 1) == 0
    {
      re::introspect<re::CameraMatrices>(void)::info = (_UNKNOWN *)re::introspect_CameraMatrices(0);
    }
    v61 = v7;
    v65 = (re::CameraMatrices *)re::introspect<re::CameraMatrices>(void)::info;
    v18 = strlen(*((const char **)re::introspect<re::CameraMatrices>(void)::info + 6));
    v19 = (re::RenderGraphCameraSetupNode *)this;
    if (v18)
    {
      MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraMatrices>(void)::info + 6), v18, 0, &v67);
      v20 = (v68 - 0x61C8864680B583E9 + (v67 << 6) + (v67 >> 2)) ^ v67;
    }
    else
    {
      v20 = 0;
    }
    v66 = v20;
    re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v15 + 176, &v66, &v65);
    v67 = (v16 - 0x61C8864680B583E9 + (v66 << 6) + (v66 >> 2)) ^ v66;
    v21 = (re::CameraMatrices *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 8) + 32))(*(_QWORD *)(v15 + 8), 144, 16);
    v65 = re::CameraMatrices::CameraMatrices(v21, v14, *(unsigned __int8 *)(v4 + 490));
    v22 = (_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v15 + 64, &v67, &v65);
    if (!*(_BYTE *)(v4 + 490))
    {
LABEL_18:
      v30.i64[0] = 0x7F0000007FLL;
      v30.i64[1] = 0x7F0000007FLL;
      a2[4] = vdupq_n_s32(0x7F800000u);
      a2[5] = v30;
      this = (const char **)v19;
      v7 = v61;
      break;
    }
    v6 = 0;
    v24 = (_anonymous_namespace_ *)(*v22 + 48);
    v25 = (re::Projection *)(v4 + 144);
    v26 = (_anonymous_namespace_ *)(*v22 + 8);
    this = (const char **)(v4 + 64);
    while (1)
    {
      v27 = *(_QWORD *)(v4 + 128);
      if (v27 <= (unint64_t)v6)
        break;
      re::Projection::computeMatrix4x4F(v25, (uint64_t)&v67);
      re::DynamicArray<re::Matrix4x4<float>>::add(v24, (uint64_t)&v67);
      v29 = *(_QWORD *)(v4 + 48);
      if (v29 <= (unint64_t)v6)
        goto LABEL_40;
      re::RenderCamera::computeInverseTransform((float32x4_t *)this, (uint64_t)&v67);
      re::DynamicArray<re::Matrix4x4<float>>::add(v26, (uint64_t)&v67);
      v6 = (uint64_t *)((char *)v6 + 1);
      this += 4;
      v25 = (re::Projection *)((char *)v25 + 64);
      if ((unint64_t)v6 >= *(unsigned __int8 *)(v4 + 490))
        goto LABEL_18;
    }
    re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v6, v27);
    _os_crash();
    __break(1u);
LABEL_40:
    re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v6, v29);
    _os_crash();
    __break(1u);
LABEL_41:
    v57 = (re *)__cxa_guard_acquire(&qword_254120950);
    if ((_DWORD)v57)
    {
      *v6 = re::getCombinedScopeHash(v57, v58, v59);
      __cxa_guard_release(v6 + 1);
    }
  }
  if (!re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48)))
  {
    v31 = re::RenderGraphDataStore::get<re::MeshLodSelectInputData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
    v32 = a2[73].i64[0];
    v33 = (unint64_t)"N2re16MeshPassInfoDataE";
    if (((unint64_t)"N2re16MeshPassInfoDataE" & 0x8000000000000000) != 0)
    {
      v34 = (unsigned __int8 *)((unint64_t)"N2re16MeshPassInfoDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v35 = 5381;
      do
      {
        v33 = v35;
        v36 = *v34++;
        v35 = (33 * v35) ^ v36;
      }
      while (v36);
    }
    v37 = (*(_QWORD *)(a2[2].i64[1] + 48) - 0x61C8864680B583E9 + (v33 << 6) + (v33 >> 2)) ^ v33;
    v38 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v32 + 8) + 32))(*(_QWORD *)(v32 + 8), 16, 8);
    v39 = *(_QWORD *)(v32 + 64);
    *v38 = &off_24ED821F0;
    v38[1] = 0;
    if (v39)
    {
      v39 = v37 % *(unsigned int *)(v32 + 88);
      v40 = *(unsigned int *)(*(_QWORD *)(v32 + 72) + 4 * v39);
      if ((_DWORD)v40 != 0x7FFFFFFF)
      {
        v48 = *(_QWORD *)(v32 + 80);
        if (*(_QWORD *)(v48 + 24 * v40 + 8) == v37)
        {
LABEL_34:
          v47 = (uint64_t *)(v48 + 24 * v40 + 16);
LABEL_35:
          v49 = *v47;
          v50 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, 48, 8);
          *(_OWORD *)v50 = 0u;
          *(_OWORD *)(v50 + 16) = 0u;
          *(_DWORD *)(v50 + 32) = 0;
          *(_QWORD *)(v50 + 36) = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(v50, (uint64_t)v14, 3);
          *(_QWORD *)(v49 + 8) = v50;
          v51 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
          v67 = (unint64_t)a2;
          v68 = v4;
          v69 = v51;
          v70 = v63;
          v71 = v7;
          v72 = v49;
          v73 = v31;
          v74 = 0;
          v75 = *((_WORD *)this + 128);
          v76 = 0;
          if (*(_BYTE *)(v4 + 476))
            v78 = *(_DWORD *)(v4 + 480);
          v79 = v62;
          re::RenderGraphCameraSetupNode::setupDrawCallsForCamera((uint64_t)&v67, v52, v53, v54, v55, v56);
          goto LABEL_38;
        }
        while (1)
        {
          LODWORD(v40) = *(_DWORD *)(v48 + 24 * v40) & 0x7FFFFFFF;
          if ((_DWORD)v40 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v48 + 24 * v40 + 8) == v37)
            goto LABEL_34;
        }
      }
    }
    v41 = (re::RenderGraphCameraSetupNode *)this;
    v42 = *(unsigned int *)(v32 + 100);
    if ((_DWORD)v42 == 0x7FFFFFFF)
    {
      v42 = *(unsigned int *)(v32 + 96);
      v43 = v42;
      if ((_DWORD)v42 == *(_DWORD *)(v32 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v32 + 64, 2 * *(_DWORD *)(v32 + 92));
        LODWORD(v39) = v37 % *(unsigned int *)(v32 + 88);
        v43 = *(_DWORD *)(v32 + 96);
      }
      *(_DWORD *)(v32 + 96) = v43 + 1;
      v44 = *(_QWORD *)(v32 + 80);
      v45 = *(_DWORD *)(v44 + 24 * v42);
    }
    else
    {
      v44 = *(_QWORD *)(v32 + 80);
      v45 = *(_DWORD *)(v44 + 24 * v42);
      *(_DWORD *)(v32 + 100) = v45 & 0x7FFFFFFF;
    }
    v46 = 24 * v42;
    *(_DWORD *)(v44 + v46) = v45 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v32 + 80) + v46) = *(_DWORD *)(*(_QWORD *)(v32 + 80) + 24 * v42) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v32 + 72) + 4 * v39);
    *(_QWORD *)(*(_QWORD *)(v32 + 80) + 24 * v42 + 8) = v37;
    *(_QWORD *)(*(_QWORD *)(v32 + 80) + 24 * v42 + 16) = v38;
    *(_DWORD *)(*(_QWORD *)(v32 + 72) + 4 * v39) = v42;
    ++*(_DWORD *)(v32 + 92);
    ++*(_DWORD *)(v32 + 104);
    v47 = (uint64_t *)(*(_QWORD *)(v32 + 80) + 24 * v42 + 16);
    this = (const char **)v41;
    goto LABEL_35;
  }
LABEL_38:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v64);
}

void re::RenderGraphMultiViewCameraSetupNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_BYTE *)a2 + 592) = 1;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphMultiViewCameraSetupNode::execute(const char **this, re::RenderGraphContext *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  float32x4_t *v54;
  re::Projection *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  float32x4_t v99;
  double v100;
  float32x4_t v101;
  re *v102;
  const char *v103;
  const char *v104;
  const char *v105;
  _anonymous_namespace_ *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  re::RenderGraphContext *v111;
  uint64_t v112;
  unint64_t v113;
  re::Allocator *v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[16];
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unsigned __int8 v125;
  __int128 v126;
  char v127;
  _BYTE v128[12];
  __int16 v129;
  int v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  _DWORD v135[12];
  __int128 v136;
  __int128 v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v117, 5034, 0);
  v3 = re::RenderGraphDataStore::get<re::CameraArrayData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v111 = a2;
  v4 = *((_QWORD *)a2 + 146);
  v5 = (unint64_t)"N2re27MeshLodSelectInputArrayDataE";
  if (((unint64_t)"N2re27MeshLodSelectInputArrayDataE" & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)((unint64_t)"N2re27MeshLodSelectInputArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  v9 = 0x9E3779B97F4A7C17;
  v10 = 0x7FFFFFFF;
  if (*(_QWORD *)(v4 + 64))
  {
    v11 = (*(_QWORD *)(*((_QWORD *)a2 + 5) + 48) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
    v12 = *(_DWORD *)(*(_QWORD *)(v4 + 72) + 4 * (v11 % *(unsigned int *)(v4 + 88)));
    if (v12 != 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)(v4 + 80);
      v10 = *(_DWORD *)(*(_QWORD *)(v4 + 72) + 4 * (v11 % *(unsigned int *)(v4 + 88)));
      if (*(_QWORD *)(v13 + 24 * v12 + 8) != v11)
      {
        while (1)
        {
          v10 = *(_DWORD *)(v13 + 24
                                * *(unsigned int *)(*(_QWORD *)(v4 + 72) + 4 * (v11 % *(unsigned int *)(v4 + 88)))) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v13 + 24 * v10 + 8) == v11)
            goto LABEL_11;
        }
        v10 = 0x7FFFFFFF;
      }
    }
  }
LABEL_11:
  v112 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 24 * v10 + 16);
  v14 = atomic_load((unsigned __int8 *)&qword_254120970);
  v15 = (unint64_t)&qword_254120968;
  if ((v14 & 1) == 0)
    goto LABEL_104;
  while (1)
  {
    v109 = re::RenderGraphDataStore::get<re::RendererGlobals>(*((_QWORD *)v111 + 146), *(_QWORD *)v15);
    v108 = re::RenderGraphDataStore::get<re::SceneScope>(*((_QWORD *)v111 + 146), *(_QWORD *)(*((_QWORD *)v111 + 5) + 48));
    v16 = atomic_load((unsigned __int8 *)(v15 + 0x18));
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254120980))
    {
      qword_254120978 = re::hashString((re *)"DynamicFunctionConstants", v105);
      __cxa_guard_release(&qword_254120980);
    }
    v17 = qword_254120978;
    v18 = strlen(this[4]);
    if (v18)
    {
      MurmurHash3_x64_128((uint64_t)this[4], v18, 0, (unint64_t *)&v119);
      v19 = ((*((_QWORD *)&v119 + 1) + v9 + ((_QWORD)v119 << 6) + ((unint64_t)v119 >> 2)) ^ v119) + v9;
    }
    else
    {
      v19 = 0x9E3779B97F4A7C17;
    }
    v20 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(*((_QWORD *)v111 + 146), ((v17 >> 2) + (v17 << 6) + v19) ^ v17);
    v21 = v20 + 8;
    if (!v20)
      v21 = 0;
    v107 = v21;
    v114 = *(re::Allocator **)(*(_QWORD *)(v109 + 8) + 24);
    v22 = *((_QWORD *)v111 + 146);
    v23 = (unint64_t)"N2re19CameraMatricesArrayE";
    v24 = (unint64_t)"N2re19CameraMatricesArrayE";
    if (((unint64_t)"N2re19CameraMatricesArrayE" & 0x8000000000000000) != 0)
    {
      v25 = (unsigned __int8 *)((unint64_t)"N2re19CameraMatricesArrayE" & 0x7FFFFFFFFFFFFFFFLL);
      v26 = 5381;
      do
      {
        v24 = v26;
        v27 = *v25++;
        v26 = (33 * v26) ^ v27;
      }
      while (v27);
    }
    *(_QWORD *)&v119 = (*(_QWORD *)(*((_QWORD *)v111 + 5) + 48) + v9 + (v24 << 6) + (v24 >> 2)) ^ v24;
    v28 = (_QWORD *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v22 + 64, (uint64_t *)&v119);
    v113 = v3;
    if (v28 && *v28)
      goto LABEL_66;
    v29 = *(_QWORD *)(v3 + 16);
    v30 = *((_QWORD *)v111 + 146);
    if (((unint64_t)"N2re19CameraMatricesArrayE" & 0x8000000000000000) != 0)
    {
      v31 = (unsigned __int8 *)((unint64_t)"N2re19CameraMatricesArrayE" & 0x7FFFFFFFFFFFFFFFLL);
      v32 = 5381;
      do
      {
        v23 = v32;
        v33 = *v31++;
        v32 = (33 * v32) ^ v33;
      }
      while (v33);
    }
    v34 = (*(_QWORD *)(*((_QWORD *)v111 + 5) + 48) - 0x61C8864680B583E9 + (v23 << 6) + (v23 >> 2)) ^ v23;
    v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v30 + 8) + 32))(*(_QWORD *)(v30 + 8), 48, 8);
    *(_QWORD *)v35 = &off_24ED86B70;
    *(_QWORD *)(v35 + 40) = 0;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    *(_DWORD *)(v35 + 32) = 0;
    *(_QWORD *)(v35 + 8) = v114;
    re::DynamicArray<re::CameraMatrices>::setCapacity((_QWORD *)(v35 + 8), v29);
    v36 = *(_QWORD *)(v30 + 64);
    ++*(_DWORD *)(v35 + 32);
    if (v36)
    {
      v36 = v34 % *(unsigned int *)(v30 + 88);
      v37 = *(unsigned int *)(*(_QWORD *)(v30 + 72) + 4 * v36);
      if ((_DWORD)v37 != 0x7FFFFFFF)
      {
        v44 = *(_QWORD *)(v30 + 80);
        if (*(_QWORD *)(v44 + 24 * v37 + 8) == v34)
        {
LABEL_37:
          v43 = v44 + 24 * v37;
          goto LABEL_38;
        }
        while (1)
        {
          LODWORD(v37) = *(_DWORD *)(v44 + 24 * v37) & 0x7FFFFFFF;
          if ((_DWORD)v37 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v44 + 24 * v37 + 8) == v34)
            goto LABEL_37;
        }
      }
    }
    v38 = *(unsigned int *)(v30 + 100);
    if ((_DWORD)v38 == 0x7FFFFFFF)
    {
      v38 = *(unsigned int *)(v30 + 96);
      v39 = v38;
      if ((_DWORD)v38 == *(_DWORD *)(v30 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v30 + 64, 2 * *(_DWORD *)(v30 + 92));
        LODWORD(v36) = v34 % *(unsigned int *)(v30 + 88);
        v39 = *(_DWORD *)(v30 + 96);
      }
      *(_DWORD *)(v30 + 96) = v39 + 1;
      v40 = *(_QWORD *)(v30 + 80);
      v41 = *(_DWORD *)(v40 + 24 * v38);
    }
    else
    {
      v40 = *(_QWORD *)(v30 + 80);
      v41 = *(_DWORD *)(v40 + 24 * v38);
      *(_DWORD *)(v30 + 100) = v41 & 0x7FFFFFFF;
    }
    v42 = 24 * v38;
    *(_DWORD *)(v40 + v42) = v41 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v30 + 80) + v42) = *(_DWORD *)(*(_QWORD *)(v30 + 80) + 24 * v38) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v30 + 72) + 4 * v36);
    *(_QWORD *)(*(_QWORD *)(v30 + 80) + 24 * v38 + 8) = v34;
    *(_QWORD *)(*(_QWORD *)(v30 + 80) + 24 * v38 + 16) = v35;
    *(_DWORD *)(*(_QWORD *)(v30 + 72) + 4 * v36) = v38;
    ++*(_DWORD *)(v30 + 92);
    ++*(_DWORD *)(v30 + 104);
    v43 = *(_QWORD *)(v30 + 80) + 24 * v38;
LABEL_38:
    v45 = (_QWORD *)(v43 + 16);
    if (*(_QWORD *)(v3 + 16))
    {
      v46 = 0;
      v47 = *v45;
      v106 = (_anonymous_namespace_ *)(*v45 + 8);
      v116 = 64;
      v115 = 144;
      while (1)
      {
        v48 = *(_QWORD *)(v3 + 24);
        v49 = v48 + 528 * v46;
        re::CameraMatrices::CameraMatrices((re::CameraMatrices *)&v119, v114, *(unsigned __int8 *)(v49 + 490));
        if (*(_BYTE *)(v49 + 490))
          break;
LABEL_45:
        v59 = *(_QWORD *)(v47 + 16);
        v58 = *(_QWORD *)(v47 + 24);
        if (v58 >= v59)
        {
          v60 = v58 + 1;
          if (v59 < v58 + 1)
          {
            if (*(_QWORD *)v106)
            {
              v61 = 2 * v59;
              if (!v59)
                v61 = 8;
              if (v61 <= v60)
                v62 = v60;
              else
                v62 = v61;
              re::DynamicArray<re::CameraMatrices>::setCapacity(v106, v62);
            }
            else
            {
              re::DynamicArray<re::CameraMatrices>::setCapacity(v106, v60);
              ++*(_DWORD *)(v47 + 32);
            }
          }
          v58 = *(_QWORD *)(v47 + 24);
        }
        v63 = *(_QWORD *)(v47 + 40);
        v64 = v63 + 144 * v58;
        *(_QWORD *)(v64 + 40) = 0;
        *(_QWORD *)v64 = &off_24ED73630;
        *(_QWORD *)(v64 + 8) = 0;
        *(_QWORD *)(v64 + 16) = 0;
        *(_QWORD *)(v64 + 24) = 0;
        *(_DWORD *)(v64 + 32) = 0;
        *(_QWORD *)(v64 + 8) = *((_QWORD *)&v119 + 1);
        *((_QWORD *)&v119 + 1) = 0;
        *(_QWORD *)(v64 + 16) = v120;
        *(_QWORD *)&v120 = 0;
        v65 = *(_QWORD *)(v64 + 24);
        *(_QWORD *)(v64 + 24) = *((_QWORD *)&v120 + 1);
        *((_QWORD *)&v120 + 1) = v65;
        v66 = *(_QWORD *)(v64 + 40);
        *(_QWORD *)(v64 + 40) = *((_QWORD *)&v121 + 1);
        *((_QWORD *)&v121 + 1) = v66;
        LODWORD(v121) = v121 + 1;
        ++*(_DWORD *)(v64 + 32);
        *(_QWORD *)(v64 + 80) = 0;
        *(_QWORD *)(v64 + 56) = 0;
        *(_QWORD *)(v64 + 64) = 0;
        *(_QWORD *)(v64 + 48) = 0;
        *(_DWORD *)(v64 + 72) = 0;
        *(_QWORD *)(v64 + 48) = v122;
        *(_QWORD *)&v122 = 0;
        *(_QWORD *)(v64 + 56) = *((_QWORD *)&v122 + 1);
        *((_QWORD *)&v122 + 1) = 0;
        v67 = *(_QWORD *)(v64 + 64);
        *(_QWORD *)(v64 + 64) = v123;
        *(_QWORD *)&v123 = v67;
        v68 = *(_QWORD *)(v64 + 80);
        *(_QWORD *)(v64 + 80) = v124;
        v124 = v68;
        ++DWORD2(v123);
        ++*(_DWORD *)(v64 + 72);
        LODWORD(v68) = v125;
        *(_BYTE *)(v64 + 96) = v125;
        if ((_DWORD)v68)
          *(_OWORD *)(v63 + 144 * v58 + 112) = v126;
        *(_BYTE *)(v63 + 144 * v58 + 128) = v127;
        ++*(_QWORD *)(v47 + 24);
        ++*(_DWORD *)(v47 + 32);
        v3 = v113;
        if ((_QWORD)v122)
        {
          if (v124)
            (*(void (**)(void))(*(_QWORD *)v122 + 40))();
          v124 = 0;
          *(_QWORD *)&v123 = 0;
          v122 = 0uLL;
          ++DWORD2(v123);
        }
        if (*((_QWORD *)&v119 + 1) && *((_QWORD *)&v121 + 1))
          (*(void (**)(void))(**((_QWORD **)&v119 + 1) + 40))();
        ++v46;
        v115 += 528;
        v116 += 528;
        if (*(_QWORD *)(v113 + 16) <= v46)
          goto LABEL_66;
      }
      v3 = 0;
      v9 = v49 + 490;
      v51 = v48 + 528 * v46;
      v52 = (unint64_t *)(v51 + 128);
      v53 = (unint64_t *)(v51 + 48);
      v54 = (float32x4_t *)(v48 + v116);
      v55 = (re::Projection *)(v48 + v115);
      while (*v52 > v3)
      {
        re::Projection::computeMatrix4x4F(v55, (uint64_t)v135);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&v122, (uint64_t)v135);
        v57 = *v53;
        if (*v53 <= v3)
          goto LABEL_98;
        re::RenderCamera::computeInverseTransform(v54, (uint64_t)v135);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)((char *)&v119 + 8), (uint64_t)v135);
        ++v3;
        v54 += 2;
        v55 = (re::Projection *)((char *)v55 + 64);
        if (v3 >= *(unsigned __int8 *)v9)
          goto LABEL_45;
      }
      re::internal::assertLog((re::internal *)6, v50, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, *v52);
      _os_crash();
      __break(1u);
LABEL_98:
      re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v57);
      _os_crash();
      __break(1u);
      goto LABEL_99;
    }
LABEL_66:
    if (re::RenderGraphDataStore::tryGet<re::MeshPassInfoArrayData>(*((_QWORD *)v111 + 146), *(_QWORD *)(*((_QWORD *)v111 + 5) + 48)))
    {
      goto LABEL_96;
    }
    v9 = *(_QWORD *)(v3 + 16);
    v69 = *((_QWORD *)v111 + 146);
    v15 = (unint64_t)"N2re21MeshPassInfoArrayDataE";
    if (((unint64_t)"N2re21MeshPassInfoArrayDataE" & 0x8000000000000000) != 0)
    {
      v70 = (unsigned __int8 *)((unint64_t)"N2re21MeshPassInfoArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v71 = 5381;
      do
      {
        v15 = v71;
        v72 = *v70++;
        v71 = (33 * v71) ^ v72;
      }
      while (v72);
    }
    v73 = *(_QWORD *)(*((_QWORD *)v111 + 5) + 48);
    v75 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v69 + 8) + 32))(*(_QWORD *)(v69 + 8), 32, 8);
    *v75 = &off_24ED86BB0;
    v75[1] = v114;
    v75[2] = v9;
    v75[3] = 0;
    if (!v9)
      goto LABEL_76;
    if (v9 >> 60)
      goto LABEL_102;
    v76 = (_QWORD *)(*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(_QWORD *)v114 + 32))(v114, 16 * v9, 8);
    v75[3] = v76;
    if (v76)
      break;
LABEL_103:
    re::internal::assertLog((re::internal *)4, v77, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_104:
    v102 = (re *)__cxa_guard_acquire(&qword_254120970);
    if ((_DWORD)v102)
    {
      *(_QWORD *)v15 = re::getCombinedScopeHash(v102, v103, v104);
      __cxa_guard_release((__guard *)(v15 + 8));
    }
  }
  v78 = v9 - 1;
  if (v9 != 1)
  {
    do
    {
      *v76 = &off_24ED821F0;
      v76[1] = 0;
      v76 += 2;
      --v78;
    }
    while (v78);
  }
  *v76 = &off_24ED821F0;
  v76[1] = 0;
LABEL_76:
  v79 = (v73 - 0x61C8864680B583E9 + (v15 << 6) + (v15 >> 2)) ^ v15;
  v80 = *(_QWORD *)(v69 + 64);
  if (v80
    && (v80 = v79 % *(unsigned int *)(v69 + 88),
        v81 = *(unsigned int *)(*(_QWORD *)(v69 + 72) + 4 * v80),
        (_DWORD)v81 != 0x7FFFFFFF))
  {
    v87 = *(_QWORD *)(v69 + 80);
    while (*(_QWORD *)(v87 + 24 * v81 + 8) != v79)
    {
      LODWORD(v81) = *(_DWORD *)(v87 + 24 * v81) & 0x7FFFFFFF;
      if ((_DWORD)v81 == 0x7FFFFFFF)
        goto LABEL_78;
    }
    v86 = v87 + 24 * v81;
  }
  else
  {
LABEL_78:
    v9 = *(unsigned int *)(v69 + 100);
    if ((_DWORD)v9 == 0x7FFFFFFF)
    {
      v9 = *(unsigned int *)(v69 + 96);
      v82 = v9;
      if ((_DWORD)v9 == *(_DWORD *)(v69 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v69 + 64, 2 * *(_DWORD *)(v69 + 92));
        LODWORD(v80) = v79 % *(unsigned int *)(v69 + 88);
        v82 = *(_DWORD *)(v69 + 96);
      }
      *(_DWORD *)(v69 + 96) = v82 + 1;
      v83 = *(_QWORD *)(v69 + 80);
      v84 = *(_DWORD *)(v83 + 24 * v9);
    }
    else
    {
      v83 = *(_QWORD *)(v69 + 80);
      v84 = *(_DWORD *)(v83 + 24 * v9);
      *(_DWORD *)(v69 + 100) = v84 & 0x7FFFFFFF;
    }
    v85 = 24 * v9;
    *(_DWORD *)(v83 + v85) = v84 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v69 + 80) + v85) = *(_DWORD *)(*(_QWORD *)(v69 + 80) + 24 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v69 + 72) + 4 * v80);
    *(_QWORD *)(*(_QWORD *)(v69 + 80) + 24 * v9 + 8) = v79;
    *(_QWORD *)(*(_QWORD *)(v69 + 80) + 24 * v9 + 16) = v75;
    *(_DWORD *)(*(_QWORD *)(v69 + 72) + 4 * v80) = v9;
    ++*(_DWORD *)(v69 + 92);
    ++*(_DWORD *)(v69 + 104);
    v86 = *(_QWORD *)(v69 + 80) + 24 * v9;
  }
  v88 = (unint64_t *)(v86 + 16);
  if (*(_QWORD *)(v3 + 16))
  {
    v89 = 0;
    v46 = 0;
    v90 = *v88;
    v91 = 8;
    v92 = 476;
    while (1)
    {
      v55 = *(re::Projection **)(v112 + 16);
      if ((unint64_t)v55 <= v46)
        break;
      v55 = *(re::Projection **)(v90 + 16);
      if ((unint64_t)v55 <= v46)
        goto LABEL_100;
      v3 = *(_QWORD *)(v3 + 24);
      v93 = *(_QWORD *)(v112 + 24);
      v9 = v90;
      v94 = *(_QWORD *)(v90 + 24);
      v95 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v114 + 32))(v114, 48, 8);
      *(_OWORD *)v95 = 0u;
      *(_OWORD *)(v95 + 16) = 0u;
      *(_DWORD *)(v95 + 32) = 0;
      *(_QWORD *)(v95 + 36) = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(v95, (uint64_t)v114, 3);
      *(_QWORD *)(v94 + v91) = v95;
      v96 = re::RenderGraphDataStore::get<re::CameraMatricesArray>(*((_QWORD *)v111 + 146), *(_QWORD *)(*((_QWORD *)v111 + 5) + 48));
      *(_QWORD *)&v119 = v111;
      *((_QWORD *)&v119 + 1) = v3 + v92 - 476;
      if (!*(_QWORD *)(v96 + 24))
        goto LABEL_101;
      *(_QWORD *)&v120 = *(_QWORD *)(v96 + 40);
      *((_QWORD *)&v120 + 1) = v108;
      *(_QWORD *)&v121 = v109;
      *((_QWORD *)&v121 + 1) = v94 + v91 - 8;
      v122 = (unint64_t)(v93 + v89);
      LOWORD(v123) = *((_WORD *)this + 128);
      BYTE2(v123) = 0;
      BYTE4(v123) = *(_BYTE *)(v3 + v92);
      if (BYTE4(v123))
        DWORD2(v123) = *(_DWORD *)(v3 + v92 + 4);
      v124 = v107;
      re::RenderGraphCameraSetupNode::setupDrawCallsForCamera((uint64_t)&v119, v97, v98, v99, v100, v101);
      ++v46;
      v3 = v113;
      v91 += 16;
      v92 += 528;
      v89 += 160;
      v90 = v9;
      if (*(_QWORD *)(v113 + 16) <= v46)
        goto LABEL_96;
    }
LABEL_99:
    *(_QWORD *)v128 = 0;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v119 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135[0] = 136315906;
    *(_QWORD *)&v135[1] = "operator[]";
    LOWORD(v135[3]) = 1024;
    *(_DWORD *)((char *)&v135[3] + 2) = 476;
    HIWORD(v135[4]) = 2048;
    *(_QWORD *)&v135[5] = v46;
    LOWORD(v135[7]) = 2048;
    *(_QWORD *)((char *)&v135[7] + 2) = v55;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_100:
    *(_QWORD *)v128 = 0;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v119 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135[0] = 136315906;
    *(_QWORD *)&v135[1] = "operator[]";
    LOWORD(v135[3]) = 1024;
    *(_DWORD *)((char *)&v135[3] + 2) = 468;
    HIWORD(v135[4]) = 2048;
    *(_QWORD *)&v135[5] = v46;
    LOWORD(v135[7]) = 2048;
    *(_QWORD *)((char *)&v135[7] + 2) = v55;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_101:
    v118 = 0;
    v136 = 0u;
    v137 = 0u;
    memset(v135, 0, sizeof(v135));
    v15 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v128 = 136315906;
    *(_QWORD *)&v128[4] = "operator[]";
    v129 = 1024;
    v130 = 797;
    v131 = 2048;
    v132 = 0;
    v133 = 2048;
    v134 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_102:
    re::internal::assertLog((re::internal *)6, v74, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, v9);
    _os_crash();
    __break(1u);
    goto LABEL_103;
  }
LABEL_96:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v117);
}

uint64_t *re::allocInfo_RenderGraphCameraSetupNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254120988);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254120988))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541209D0, 0);
    *(uint64_t *)((char *)&qword_2541209E0 + 6) = 0;
    qword_2541209E0 = 0;
    qword_2541209F0 = 0;
    qword_2541209F8 = 0xFFFFFFFFLL;
    qword_2541209D0 = (uint64_t)&off_24ED7DAA8;
    qword_254120A00 = (uint64_t)"RenderGraphCameraSetupNode";
    dword_254120A08 = 0;
    *(_OWORD *)&algn_254120A0C[4] = 0u;
    *(_OWORD *)&algn_254120A0C[20] = 0u;
    *(_OWORD *)&algn_254120A0C[36] = 0u;
    qword_254120A40 = 0;
    __cxa_guard_release(&qword_254120988);
  }
  return &qword_2541209D0;
}

void re::initInfo_RenderGraphCameraSetupNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0xC7B124D2A1079044;
  v18[1] = "RenderGraphCameraSetupNode";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_254120990);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120990);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541209B8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "frustumCulling";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541209C0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "isForShadowMap";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10100000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541209C8 = v16;
      __cxa_guard_release(&qword_254120990);
    }
  }
  *((_QWORD *)this + 2) = 0x11800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541209B8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphCameraSetupNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphCameraSetupNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphCameraSetupNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphCameraSetupNode>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

double re::internal::defaultConstruct<re::RenderGraphCameraSetupNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED86988;
  *((_WORD *)v3 + 128) = 0;
  *((_QWORD *)v3 + 33) = 0;
  result = NAN;
  *((_QWORD *)v3 + 34) = -1;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphCameraSetupNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphCameraSetupNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED86988;
  *((_WORD *)v1 + 128) = 0;
  *((_QWORD *)v1 + 33) = 0;
  result = NAN;
  *((_QWORD *)v1 + 34) = -1;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphCameraSetupNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphCameraSetupNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphCameraSetupNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphCameraSetupNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphCameraSetupNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphCameraSetupNode>, this);
}

uint64_t *re::allocInfo_RenderGraphMultiViewCameraSetupNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254120998);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254120998))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120A48, 0);
    *(uint64_t *)((char *)&qword_254120A58 + 6) = 0;
    qword_254120A58 = 0;
    qword_254120A68 = 0;
    qword_254120A70 = 0xFFFFFFFFLL;
    qword_254120A48 = (uint64_t)&off_24ED7DAA8;
    qword_254120A78 = (uint64_t)"RenderGraphMultiViewCameraSetupNode";
    dword_254120A80 = 0;
    xmmword_254120A88 = 0u;
    unk_254120A98 = 0u;
    xmmword_254120AA8 = 0u;
    qword_254120AB8 = 0;
    __cxa_guard_release(&qword_254120998);
  }
  return &qword_254120A48;
}

void re::initInfo_RenderGraphMultiViewCameraSetupNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xAEB515AB82B4F4E8;
  v12[1] = "RenderGraphMultiViewCameraSetupNode";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2541209A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541209A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::RenderGraphCameraSetupNode>;
      if (!re::internal::introspectionInfoStorage<re::RenderGraphCameraSetupNode>)
      {
        v8 = re::allocInfo_RenderGraphCameraSetupNode((re *)v6);
        re::internal::introspectionInfoStorage<re::RenderGraphCameraSetupNode> = (uint64_t)v8;
        re::initInfo_RenderGraphCameraSetupNode((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "RenderGraphCameraSetupNode";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541209A0 = v10;
      __cxa_guard_release(&qword_2541209A8);
    }
  }
  *((_QWORD *)this + 2) = 0x11800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541209A0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMultiViewCameraSetupNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMultiViewCameraSetupNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMultiViewCameraSetupNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMultiViewCameraSetupNode>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::RenderGraphMultiViewCameraSetupNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *((_WORD *)v3 + 128) = 0;
  *((_QWORD *)v3 + 33) = 0;
  result = NAN;
  *((_QWORD *)v3 + 34) = -1;
  *(_QWORD *)v3 = &off_24ED86A18;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphMultiViewCameraSetupNode>(int a1, int a2, re::RenderGraphNode *this)
{
  *(_QWORD *)this = &off_24ED86988;
  re::RenderGraphNode::~RenderGraphNode(this);
}

double re::internal::defaultConstructV2<re::RenderGraphMultiViewCameraSetupNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *((_WORD *)v1 + 128) = 0;
  *((_QWORD *)v1 + 33) = 0;
  result = NAN;
  *((_QWORD *)v1 + 34) = -1;
  *(_QWORD *)v1 = &off_24ED86A18;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphMultiViewCameraSetupNode>(re::RenderGraphNode *a1)
{
  *(_QWORD *)a1 = &off_24ED86988;
  re::RenderGraphNode::~RenderGraphNode(a1);
}

uint64_t re::introspect_RenderGraphMultiViewCameraSetupNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMultiViewCameraSetupNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMultiViewCameraSetupNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMultiViewCameraSetupNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMultiViewCameraSetupNode>, this);
}

void re::RenderGraphCameraSetupNode::~RenderGraphCameraSetupNode(re::RenderGraphCameraSetupNode *this)
{
  *(_QWORD *)this = &off_24ED86988;
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  *(_QWORD *)this = &off_24ED86988;
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphMultiViewCameraSetupNode::~RenderGraphMultiViewCameraSetupNode(re::RenderGraphMultiViewCameraSetupNode *this)
{
  *(_QWORD *)this = &off_24ED86988;
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  *(_QWORD *)this = &off_24ED86988;
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED86AF0;
  re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1 + 1);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::MeshRenderPassGroups>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED86AF0;
  re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_BYTE *)(v6 + 16);
        do
        {
          if ((*((_DWORD *)v13 - 2) & 0x80000000) != 0)
          {
            v14 = *((_QWORD *)v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<float,unsigned char,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17) = v14;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 12) = *((_DWORD *)v13 - 1);
            *(_BYTE *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 16) = *v13;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 24;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 16) + 40 * v9;
  v14 = *a5;
  *(_DWORD *)(v13 + 32) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v13 + 24) = v14;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0)
            re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v11 - 16), v11, v11 + 8);
          v11 += 40;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::RenderGraphDataStore::tryGet<re::MeshSortGroupCameraData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re23MeshSortGroupCameraDataE";
  if (((unint64_t)"N2re23MeshSortGroupCameraDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re23MeshSortGroupCameraDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::MeshSortGroupCameraData::~MeshSortGroupCameraData(re::MeshSortGroupCameraData *this)
{
  *(_QWORD *)this = &off_24ED86B30;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24ED86B30;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x2276933B8);
}

void re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = (uint64_t *)(*(_QWORD *)(a2 + 16) + v6);
      if ((v8[1] & 0x80000000) != 0)
      {
        v9 = *v8;
        v10 = *(unsigned int *)(a1 + 24);
        v11 = *v8 % v10;
        v12 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v12 == 0x7FFFFFFF)
        {
          v12 = *(unsigned int *)(a1 + 32);
          v13 = v12;
          if ((_DWORD)v12 == (_DWORD)v10)
          {
            re::HashTable<unsigned long long,re::MeshSortingContext::MeshSortGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v11 = v9 % *(unsigned int *)(a1 + 24);
            v13 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v13 + 1;
          v14 = *(_QWORD *)(a1 + 16);
          v15 = *(_DWORD *)(v14 + 40 * v12 + 8);
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 16);
          v15 = *(_DWORD *)(v14 + 40 * v12 + 8);
          *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v14 + 40 * v12 + 8) = v15 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v12 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v11);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v12) = v9;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v12 + 16) = v8[2];
        v16 = *(_QWORD *)(a1 + 16) + 40 * v12;
        v17 = v8[3];
        *(_DWORD *)(v16 + 32) = *((_DWORD *)v8 + 8);
        *(_QWORD *)(v16 + 24) = v17;
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v11) = v12;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 40;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v30[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v30, v13, v12);
          v15 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v30[16];
          *(_QWORD *)&v30[16] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v16;
          v18 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v17 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v18;
          v19 = v17;
          if (v17)
          {
            v20 = 0;
            v21 = 0;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)&v30[16] + v20 + 8) & 0x80000000) != 0)
              {
                re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v30[16] + v20) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v30[16] + v20), *(_QWORD *)&v30[16] + v20 + 16, *(_QWORD *)&v30[16] + v20 + 32);
                v19 = *(_DWORD *)&v30[32];
              }
              ++v21;
              v20 += 128;
            }
            while (v21 < v19);
          }
          re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 7) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 7) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 7) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 7) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 7) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 7)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 7) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 7);
  v26 = *a5;
  *(_WORD *)(v25 + 40) = *((_WORD *)a5 + 4);
  *(_QWORD *)(v25 + 32) = v26;
  LODWORD(v26) = *((unsigned __int8 *)a5 + 16);
  *(_BYTE *)(v25 + 48) = v26;
  if ((_DWORD)v26)
  {
    v27 = *((_OWORD *)a5 + 2);
    v28 = *((_OWORD *)a5 + 4);
    *(_OWORD *)(v25 + 80) = *((_OWORD *)a5 + 3);
    *(_OWORD *)(v25 + 96) = v28;
    *(_OWORD *)(v25 + 64) = v27;
  }
  *(_BYTE *)(v25 + 112) = *((_BYTE *)a5 + 80);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::RenderGraphDataStore::get<re::CameraArrayData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = (unint64_t)"N2re15CameraArrayDataE";
  if (((unint64_t)"N2re15CameraArrayDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re15CameraArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v6 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(a1 + 80);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 24 * v6 + 8) == v7)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
        }
        v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
}

void re::CameraMatricesArray::~CameraMatricesArray(re::CameraMatricesArray *this)
{
  re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8);
}

{
  re::DynamicArray<re::CameraMatrices>::deinit((uint64_t)this + 8);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::CameraMatrices>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::CameraMatrices>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_26;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_26:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 144 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v12[5] = 0;
          *v12 = &off_24ED73630;
          v12[1] = 0;
          v12[2] = 0;
          v12[3] = 0;
          *((_DWORD *)v12 + 8) = 0;
          v14 = (_QWORD *)(v8 + v10 + 8);
          v15 = *(_QWORD *)(v8 + v10 + 16);
          v12[1] = *v14;
          *v14 = 0;
          v12[2] = v15;
          *(_QWORD *)(v13 + 16) = 0;
          v16 = v7[v10 / 8 + 3];
          v12[3] = *(_QWORD *)(v8 + v10 + 24);
          *(_QWORD *)(v13 + 24) = v16;
          v17 = v7[v10 / 8 + 5];
          v12[5] = *(_QWORD *)(v8 + v10 + 40);
          *(_QWORD *)(v13 + 40) = v17;
          *(_DWORD *)(v13 + 32) = *(_DWORD *)(v8 + v10 + 32) + 1;
          *((_DWORD *)v12 + 8) = LODWORD(v7[v10 / 8 + 4]) + 1;
          v12[10] = 0;
          v12[7] = 0;
          v12[8] = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 18) = 0;
          v18 = (_QWORD *)(v8 + v10 + 48);
          v19 = *(_QWORD *)(v8 + v10 + 56);
          v12[6] = *v18;
          *v18 = 0;
          v12[7] = v19;
          *(_QWORD *)(v13 + 56) = 0;
          v20 = v7[v10 / 8 + 8];
          v12[8] = *(_QWORD *)(v8 + v10 + 64);
          *(_QWORD *)(v13 + 64) = v20;
          v21 = v7[v10 / 8 + 10];
          v12[10] = *(_QWORD *)(v8 + v10 + 80);
          *(_QWORD *)(v13 + 80) = v21;
          *(_DWORD *)(v13 + 72) = *(_DWORD *)(v8 + v10 + 72) + 1;
          *((_DWORD *)v12 + 18) = LODWORD(v7[v10 / 8 + 9]) + 1;
          LODWORD(v21) = *(unsigned __int8 *)(v8 + v10 + 96);
          *((_BYTE *)v12 + 96) = v21;
          if ((_DWORD)v21)
            *((_OWORD *)v12 + 7) = *(_OWORD *)(v13 + 112);
          *((_BYTE *)v12 + 128) = *(_BYTE *)(v13 + 128);
          if (*v18)
          {
            if (*(_QWORD *)(v13 + 80))
              (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 40))(*v18);
            *(_QWORD *)(v13 + 80) = 0;
            *(_QWORD *)(v8 + v10 + 56) = 0;
            *(_QWORD *)(v8 + v10 + 64) = 0;
            *v18 = 0;
            ++*(_DWORD *)(v13 + 72);
          }
          if (*v14)
          {
            if (*(_QWORD *)(v13 + 40))
              (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 40))(*v14);
            *(_QWORD *)(v13 + 40) = 0;
            *(_QWORD *)(v8 + v10 + 16) = 0;
            *(_QWORD *)(v8 + v10 + 24) = 0;
            *v14 = 0;
            ++*(_DWORD *)(v13 + 32);
          }
          v10 += 144;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::CameraMatrices>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 144 * v4;
        v6 = v3 + 40;
        do
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            if (*(_QWORD *)(v6 + 40))
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            *(_QWORD *)(v6 + 8) = 0;
            ++*(_DWORD *)(v6 + 32);
          }
          v8 = *(_QWORD *)(v6 - 32);
          if (v8)
          {
            if (*(_QWORD *)v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
            *(_QWORD *)v6 = 0;
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 32) = 0;
            ++*(_DWORD *)(v6 - 8);
          }
          v6 += 144;
          v5 -= 144;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::MeshPassInfoArrayData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re21MeshPassInfoArrayDataE";
  if (((unint64_t)"N2re21MeshPassInfoArrayDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re21MeshPassInfoArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::MeshPassInfoArrayData::~MeshPassInfoArrayData(re::MeshPassInfoArrayData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::get<re::CameraMatricesArray>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = (unint64_t)"N2re19CameraMatricesArrayE";
  if (((unint64_t)"N2re19CameraMatricesArrayE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re19CameraMatricesArrayE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v6 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(a1 + 80);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 24 * v6 + 8) == v7)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
        }
        v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
}

void re::RayTracedAmbientOcclusionMutablePersistentData::createPersistentTextures(void **this, int a2, int a3, id *a4)
{
  id v8;
  id v9;

  v8 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v8, sel_setStorageMode_, 2);
  objc_msgSend(v8, sel_setWidth_, a2);
  objc_msgSend(v8, sel_setHeight_, a3);
  objc_msgSend(v8, sel_setUsage_, 3);
  objc_msgSend(v8, sel_setPixelFormat_, 13);
  re::mtl::Device::makeTexture(v8, a4, &v9);
  NS::SharedPtr<MTL::Texture>::operator=(this + 80, &v9);
  if (v9)

  objc_msgSend(v8, sel_setPixelFormat_, 252);
  re::mtl::Device::makeTexture(v8, a4, &v9);
  NS::SharedPtr<MTL::Texture>::operator=(this + 81, &v9);
  if (v9)

  objc_msgSend(v8, sel_setPixelFormat_, 25);
  re::mtl::Device::makeTexture(v8, a4, &v9);
  NS::SharedPtr<MTL::Texture>::operator=(this + 82, &v9);
  if (v9)

  if (v8)
}

void re::RayTracedAmbientOcclusionMutablePersistentData::createRayTracer(re::RayTracedAmbientOcclusionMutablePersistentData *this, id *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v4 = objc_alloc(MEMORY[0x24BDDE4F0]);
  v5 = a2[23];
  v6 = objc_msgSend(v4, "initWithDevice:", v5);
  v7 = (void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v6;

  objc_msgSend(*((id *)this + 27), "setRayDataType:", 3);
  objc_msgSend(*((id *)this + 27), "setRayStride:", 24);
  objc_msgSend(*((id *)this + 27), "setRayMaskOptions:", 2);
  objc_msgSend(*((id *)this + 27), "setIntersectionDataType:", 0);
  objc_msgSend(*((id *)this + 27), "setCullMode:", 0);
  v8 = objc_alloc(MEMORY[0x24BDDE228]);
  v9 = a2[23];
  v10 = objc_msgSend(v8, "initWithDevice:", v9);
  v11 = (void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v10;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = v12;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = v14;

}

void re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, const char *a5)
{
  id v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  void **ComputePipelineState;
  char v26[8];
  uint64_t v27;
  char v28;
  _QWORD v29[4];
  uint64_t v30[3];
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  uint64_t v71[4];
  int v72;
  uint64_t v73[3];
  _DWORD v74[10];
  uint64_t v75[3];
  _DWORD v76[10];
  uint64_t v77[3];
  _DWORD v78[10];
  _QWORD v79[5];

  v79[3] = *MEMORY[0x24BDAC8D0];
  v8 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
  objc_msgSend(v8, sel_setConstantValue_type_atIndex_, a3 + 16, 37, 0);
  objc_msgSend(v8, sel_setConstantValue_type_atIndex_, a3 + 20, 53, 1);
  v70 = objc_msgSend(*(id *)(a2 + 184), "supportsFamily:", 1004);
  objc_msgSend(v8, sel_setConstantValue_type_atIndex_, &v70, 53, 2);
  v69 = 1;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v61, 0);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v65 = 37;
  v10 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v61, *(__int16 *)(a3 + 16));
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v53, 0);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v57 = 65589;
  v12 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v53, *(unsigned __int8 *)(a3 + 20));
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v13 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v45, 0);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v49 = 131125;
  v14 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v45, v70);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v37, 0);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v41 = 196661;
  v16 = (_anonymous_namespace_ *)re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v37, v69);
  v26[0] = 0;
  re::DynamicString::DynamicString((re::DynamicString *)v71, (const re::DynamicString *)&v61);
  v72 = v65;
  re::FixedArray<unsigned char>::FixedArray(v73, &v66);
  re::DynamicString::DynamicString((re::DynamicString *)v74, (const re::DynamicString *)&v53);
  v74[8] = v57;
  re::FixedArray<unsigned char>::FixedArray(v75, &v58);
  re::DynamicString::DynamicString((re::DynamicString *)v76, (const re::DynamicString *)&v45);
  v76[8] = v49;
  re::FixedArray<unsigned char>::FixedArray(v77, &v50);
  re::DynamicString::DynamicString((re::DynamicString *)v78, (const re::DynamicString *)&v37);
  v78[8] = v41;
  v17 = (_anonymous_namespace_ *)re::FixedArray<unsigned char>::FixedArray(v79, &v42);
  v32 = 0;
  memset(v30, 0, sizeof(v30));
  v31 = 0;
  re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v30, 4uLL);
  ++v31;
  re::DynamicArray<re::TechniqueFunctionConstant>::copy(v30, 0, v71, 4);
  v18 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 1;
  do
  {
    v19 = &v71[v18 / 2];
    v20 = v79[v18 / 2];
    if (v20)
    {
      if (v19[30])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 40))(v20, v79[v18 / 2 + 2]);
        v19[30] = 0;
        v19[31] = 0;
      }
      v19[29] = 0;
    }
    v23 = v19[24];
    v22 = v19 + 24;
    v21 = v23;
    if (v23)
    {
      if ((v78[v18 + 2] & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 40))(v21, *(_QWORD *)&v78[v18 + 4]);
      *v22 = 0u;
      v22[1] = 0u;
    }
    v18 -= 16;
  }
  while (v18 != 0x3FFFFFFFFFFFFFC0);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(a2, (uint64_t)v26);
  NS::SharedPtr<MTL::Texture>::operator=(a4, ComputePipelineState);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v30);
  if (v29[0])
  {
    if ((v29[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v29[0] + 40))();
    memset(v29, 0, sizeof(v29));
  }
  if (v26[0] && v27 && (v28 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v27 + 40))();
  if (v42)
  {
    if (v43)
    {
      (*(void (**)(void))(*(_QWORD *)v42 + 40))();
      v43 = 0;
      v44 = 0;
    }
    v42 = 0;
  }
  if (v37 && (v38 & 1) != 0)
    (*(void (**)(void))(*v37 + 40))();
  if (v50)
  {
    if (v51)
    {
      (*(void (**)(void))(*(_QWORD *)v50 + 40))();
      v51 = 0;
      v52 = 0;
    }
    v50 = 0;
  }
  if (v45 && (v46 & 1) != 0)
    (*(void (**)(void))(*v45 + 40))();
  if (v58)
  {
    if (v59)
    {
      (*(void (**)(void))(*(_QWORD *)v58 + 40))();
      v59 = 0;
      v60 = 0;
    }
    v58 = 0;
  }
  if (v53 && (v54 & 1) != 0)
    (*(void (**)(void))(*v53 + 40))();
  if (v66)
  {
    if (v67)
    {
      (*(void (**)(void))(*(_QWORD *)v66 + 40))();
      v67 = 0;
      v68 = 0;
    }
    v66 = 0;
  }
  if (v61 && (v62 & 1) != 0)
    (*(void (**)(void))(*v61 + 40))();
  if (v8)

}

void re::RayTracedAmbientOcclusionMutablePersistentData::compileShaderFunctions(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState((uint64_t)a1, a2, a3, a1 + 83, "rayTracedAmbientOcclusionMaskKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v6, a2, a3, a1 + 84, "rayTracedAmbientOcclusionMaskDilationHorizontalKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v7, a2, a3, a1 + 85, "rayTracedAmbientOcclusionMaskDilationVerticalKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v8, a2, a3, a1 + 86, "rayTracedAmbientOcclusionRaysKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v9, a2, a3, a1 + 87, "rayTracedAmbientOcclusionRaysInvalidationKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v10, a2, a3, a1 + 88, "rayTracedAmbientOcclusionTextureKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v11, a2, a3, a1 + 89, "rayTracedAmbientOcclusionAccumulationKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v12, a2, a3, a1 + 90, "rayTracedAmbientOcclusionATrousDenoisingKernel");
  re::RayTracedAmbientOcclusionMutablePersistentData::setUpComputePipelineState(v13, a2, a3, a1 + 91, "testRayTracedAmbientOcclusionCopyKernel");
}

void re::RenderGraphEmitterRegistry::~RenderGraphEmitterRegistry(re::RenderGraphEmitterRegistry *this)
{
  re::RenderGraphEmitterRegistry *v1;
  unsigned __int8 v2;
  _QWORD *v3;
  _DWORD *v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v1 = this;
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)this)
    {
      re::introspect<re::RenderGraphEmitterBase>(void)::info = (_UNKNOWN *)re::introspect_RenderGraphEmitterBase(0);
    }
  }
  v3 = (_QWORD *)*((_QWORD *)re::introspect<re::RenderGraphEmitterBase>(void)::info + 8);
  v4 = (_DWORD *)*v3;
  if (*(_DWORD *)*v3 != 2)
  {
    v5 = (_DWORD **)(v3 + 1);
    v6 = *((unsigned int *)re::introspect<re::RenderGraphEmitterBase>(void)::info + 14) - 1;
    do
    {
      v7 = *v5++;
      v4 = v7;
      --v6;
    }
    while (*v7 != 2);
  }
  *((_QWORD *)v4 + 1) = 0;
  v8 = *((_QWORD *)v1 + 2);
  if (v8)
  {
    v9 = (uint64_t *)*((_QWORD *)v1 + 4);
    v10 = 40 * v8;
    do
    {
      v11 = *v9;
      if (*v9)
      {
        v12 = re::globalAllocators(this);
        this = (re::RenderGraphEmitterRegistry *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12[2] + 40))(v12[2], v11);
      }
      *v9 = 0;
      v9 += 5;
      v10 -= 40;
    }
    while (v10);
  }
  re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)v1);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v1 + 5);
  re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)v1);
}

uint64_t re::RenderGraphEmitterRegistry::init(re::RenderGraphEmitterRegistry *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v1 = re::globalAllocators(this);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 112, 8);
  result = re::RenderGraphEmitterRegistry::RenderGraphEmitterRegistry(v2);
  re::RenderGraphEmitterRegistry::m_instance = result;
  return result;
}

re *re::internal::destroyPersistent<re::RenderGraphEmitterRegistry>(re *result, uint64_t a2, re::RenderGraphEmitterRegistry *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::RenderGraphEmitterRegistry::~RenderGraphEmitterRegistry(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::RenderGraphEmitterRegistry *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::RenderGraphEmitterRegistry::registerEmitter(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  int v6;
  char *v7;
  re *v8;
  size_t v9;
  uint64_t *v10;
  void *v11;
  size_t v12;
  unint64_t v13;
  re *v14;
  _OWORD *v15;
  uint64_t v16;
  std::__shared_mutex_base *v17;
  uint64_t v18;
  char v19;
  unsigned __int8 *v20;
  int v21;
  re *v22;
  std::__shared_mutex_base *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  StringID v33;
  __int128 v34;
  _QWORD *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v5 = (**(uint64_t (***)(uint64_t))a2)(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  v7 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v8 = (re *)strlen(v7);
  v9 = (size_t)v8 + 1;
  v10 = re::globalAllocators(v8);
  v11 = (void *)(*(uint64_t (**)(uint64_t, size_t, _QWORD))(*(_QWORD *)v10[2] + 32))(v10[2], v9, 0);
  memcpy(v11, v7, v9);
  v12 = strlen((const char *)v11);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)v11, v12, 0, (unint64_t *)&v34);
    v13 = (*((_QWORD *)&v34 + 1) + ((_QWORD)v34 << 6) + ((unint64_t)v34 >> 2) - 0x61C8864680B583E9) ^ v34;
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)&v34 = v11;
  *((_QWORD *)&v34 + 1) = v5;
  v35 = 0;
  v36 = v13;
  v37 = v6;
  v14 = (re *)re::DynamicArray<re::IntrospectionPolymorphicType>::add((_QWORD *)a1, (uint64_t)&v34);
  *((_QWORD *)&v34 + 1) = 0;
  v15 = v35;
  if (v35)
  {
    v16 = *v35;
    if (*v35)
    {
      if ((v35[1] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v16 + 40))(*v35, v35[2]);
      *v15 = 0u;
      v15[1] = 0u;
    }
    v14 = (re *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 40))(v16, v15);
  }
  *(_DWORD *)(a1 + 88) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 32);
  v17 = re::introspectionSharedMutex(v14);
  std::__shared_mutex_base::lock(v17);
  v34 = *(_OWORD *)(v5 + 32);
  if (v7)
  {
    v18 = *v7;
    if (*v7)
    {
      v19 = v7[1];
      if (v19)
      {
        v20 = (unsigned __int8 *)(v7 + 2);
        do
        {
          v18 = 31 * v18 + v19;
          v21 = *v20++;
          v19 = v21;
        }
        while (v21);
      }
    }
  }
  else
  {
    v18 = 0;
  }
  *(_QWORD *)&v33.var0 = 2 * v18;
  v33.var1 = v7;
  re::StringID::destroyString((re::StringID *)&v33);
  v23 = re::introspectionSharedMutex(v22);
  std::__shared_mutex_base::unlock(v23);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  v26 = v25 ^ (v25 >> 31);
  if (v24)
  {
    v24 = v26 % *(unsigned int *)(a1 + 64);
    v27 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * v24);
    if ((_DWORD)v27 != 0x7FFFFFFF)
    {
      v32 = *(_QWORD *)(a1 + 56);
      if (*(_QWORD *)(v32 + 32 * v27 + 16) == v13)
        goto LABEL_25;
      while (1)
      {
        v27 = *(_DWORD *)(v32 + 32 * v27 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v27 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v32 + 32 * v27 + 16) == v13)
          goto LABEL_25;
      }
    }
  }
  v28 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v28 == 0x7FFFFFFF)
  {
    v28 = *(unsigned int *)(a1 + 72);
    v29 = v28;
    if ((_DWORD)v28 == *(_DWORD *)(a1 + 64))
    {
      re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1 + 40, 2 * *(_DWORD *)(a1 + 68));
      LODWORD(v24) = v26 % *(unsigned int *)(a1 + 64);
      v29 = *(_DWORD *)(a1 + 72);
    }
    *(_DWORD *)(a1 + 72) = v29 + 1;
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(_DWORD *)(v30 + 32 * v28 + 8);
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(_DWORD *)(v30 + 32 * v28 + 8);
    *(_DWORD *)(a1 + 76) = v31 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v30 + 32 * v28 + 8) = v31 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + 32 * v28 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 32 * v28 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v24);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32 * v28) = v26;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32 * v28 + 16) = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32 * v28 + 24) = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v24) = v28;
  ++*(_DWORD *)(a1 + 68);
  ++*(_DWORD *)(a1 + 80);
LABEL_25:
  os_unfair_lock_unlock(v4);
}

void re::RenderGraphEmitterRegistry::registryItem(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  os_unfair_lock_s *v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;

  v8 = a2;
  v5 = this + 26;
  os_unfair_lock_lock(this + 26);
  v6 = (_QWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&this[10], &v8);
  if (v6)
  {
    *(_QWORD *)(a3 + 8) = *v6;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)a3 = v7;
  os_unfair_lock_unlock(v5);
}

uint64_t re::RenderGraphEmitterRegistry::RenderGraphEmitterRegistry(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 60) = 0u;
  *(_QWORD *)(this + 76) = 0x7FFFFFFFLL;
  *(_DWORD *)(this + 88) = 0;
  v1 = this + 88;
  *(_QWORD *)(this + 96) = 0;
  *(_DWORD *)(this + 104) = 0;
  v3 = &unk_255825000;
  if ((v2 & 1) == 0)
  {
    v12 = this + 88;
    v13 = this;
    v3 = (_QWORD *)&unk_255825000;
    v11 = v10;
    v1 = v12;
    this = v13;
    if (v11)
    {
      re::introspect<re::RenderGraphEmitterBase>(void)::info = (_UNKNOWN *)re::introspect_RenderGraphEmitterBase(0);
      v3 = (_QWORD *)&unk_255825000;
      v1 = v12;
      this = v13;
    }
  }
  v4 = v3[305];
  v5 = *(_QWORD **)(v4 + 64);
  v6 = (_DWORD *)*v5;
  if (*(_DWORD *)*v5 != 2)
  {
    v7 = (_DWORD **)(v5 + 1);
    v8 = *(unsigned int *)(v4 + 56) - 1;
    do
    {
      v9 = *v7++;
      v6 = v9;
      --v8;
    }
    while (*v9 != 2);
  }
  *((_QWORD *)v6 + 1) = v1;
  return this;
}

void re::DepthPatchNode::configure(re::DepthPatchNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  if (*((_QWORD *)this + 34))
    re::AssetHandle::loadAsync((re::DepthPatchNode *)((char *)this + 264));
}

void re::DepthPatchNode::execute(const char **this, re::RenderGraphContext *a2)
{
  __n128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  re::Allocator *v13;
  uint64_t v14;
  unsigned __int8 v20;
  int *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int32 v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  const char **v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  _BYTE v62[12];
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  char v81[18];
  int32x2_t v82[5];
  int v83;
  re::MaterialParameterTableLayers *v84;
  uint64_t v85[9];
  _BYTE v86[79];
  __int128 v87;
  char v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (re::GraphicsFeatureFlags::enableDepthPatch(void)::onceToken != -1)
    goto LABEL_28;
  while (1)
  {
    if (!re::GraphicsFeatureFlags::enableDepthPatch(void)::gEnableDepthPatch)
      return;
    v5 = re::RenderGraphDataStore::tryGet<re::DepthPatchData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    if (!v5)
      return;
    v6 = v5;
    if (!*(_QWORD *)(v5 + 24))
      return;
    v7 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(this + 33));
    if (!v7)
      return;
    v8 = *(_QWORD *)(v7 + 1664);
    v9 = atomic_load((unsigned __int8 *)&qword_254120AC8);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254120AC8))
    {
      _MergedGlobals_462 = re::hashString((re *)"DepthPatchStencilMask", v53);
      __cxa_guard_release(&qword_254120AC8);
    }
    re::RenderGraphContext::makeFullscreenDrawCall(a2, v8, 0, 0, 0, 0, v82);
    v10 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices(v84, _MergedGlobals_462);
    if (!v11)
    {
      re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_30:
      v12 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), this[2], "DepthPatchStencilMask");
      goto LABEL_10;
    }
    v2 = &v63;
    v83 = *v10;
    v55 = this;
    if (*((_BYTE *)a2 + 1332))
      goto LABEL_30;
    v12 = 0;
LABEL_10:
    v81[0] = 1;
    *(__n128 *)((char *)&v2[14] + 15) = (__n128)__const__ZN2re20FeatureStencilStates17getDepthPatchInfoENS0_15DepthPatchUsageE_kWriteStInfo;
    v81[17] = 0x80;
    re::encodeFullscreenDrawCall((re::DrawCall *)v82, (uint64_t)"DepthPatchStencilMask", a2, v12, 0, v81, 0);
    v13 = *(re::Allocator **)(*(_QWORD *)a2 + 24);
    v14 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, 224, 16);
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 144) = 0u;
    *(_OWORD *)(v14 + 160) = 0u;
    *(_OWORD *)(v14 + 176) = 0u;
    *(_OWORD *)(v14 + 192) = 0u;
    *(_OWORD *)(v14 + 208) = 0u;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v14 + 152) = _D0;
    *(_DWORD *)(v14 + 160) = 1065353216;
    *(_QWORD *)(v14 + 40) = v8;
    v20 = atomic_load((unsigned __int8 *)&qword_254120AD8);
    if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254120AD8))
    {
      qword_254120AD0 = re::hashString((re *)"DepthPatch", v54);
      __cxa_guard_release(&qword_254120AD8);
    }
    v21 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v14, qword_254120AD0);
    if (!v22)
    {
      re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_32:
      v51 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), *(const char **)(v6 + 16), "DepthPatchPass");
LABEL_25:
      v89 = v51;
      v90 = 0;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a2, v85);
      re::RenderGraphContext::encodeDrawCalls(a2, v85, v86);
      return;
    }
    v23 = *v21;
    v63 = 0uLL;
    v64 = *((_QWORD *)a2 + 188);
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = v14;
    v69 = 0xFFFF010000000000;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = v23;
    *(unint64_t *)((char *)v2[9].n128_u64 + 4) = 0;
    *(unsigned __int32 *)((char *)&v2[9].n128_u32[2] + 3) = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    *(unint64_t *)((char *)v2[11].n128_u64 + 4) = 25172350;
    *(unint64_t *)((char *)&v2[11].n128_u64[1] + 4) = 0x7FFFFFFFLL;
    *(unint64_t *)((char *)v2[12].n128_u64 + 4) = 0xFFFFFFFFLL;
    v79 = 0;
    v80 = 0;
    v24 = (_QWORD *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, 328, 8);
    re::DrawTable::DrawTable((re::DrawTable *)v24, v13);
    v25 = re::RenderGraphDataStore::get<re::CameraMatrices>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    v26 = *(_QWORD *)a2;
    v27 = *(unsigned __int8 *)(v25 + 128);
    v28 = *(_DWORD *)(v6 + 24);
    v62[0] = 0;
    v62[8] = 0;
    re::addInstancedDrawCall((re::DrawTable *)v24, &v63, v26, v27, v28, (uint64_t)v62);
    if (!*(_QWORD *)(v6 + 24))
      break;
    v29 = 0;
    v30 = 0;
    v2 = (__n128 *)(v24 + 7);
    while (1)
    {
      v31 = *(_QWORD *)(v6 + 40) + 32 * v29;
      v33 = *(float32x4_t *)v31;
      v32 = *(float32x4_t *)(v31 + 16);
      v34 = vcgtq_f32(*(float32x4_t *)v31, v32);
      v35.i32[3] = v34.i32[2];
      LODWORD(v31) = vmaxvq_u32(v35);
      v35.i64[0] = 0;
      v35.i32[2] = 0;
      if ((v31 & 0x80000000) == 0)
      {
        v36.i64[0] = 0x3F0000003F000000;
        v36.i64[1] = 0x3F0000003F000000;
        v35 = (uint32x4_t)vmulq_f32(vaddq_f32(v32, v33), v36);
      }
      this = *(const char ***)(v6 + 64);
      if ((unint64_t)this <= v29)
        break;
      v37 = 0;
      v38 = vsubq_f32(v32, v33);
      v38.i32[3] = 0;
      v39.i64[0] = 0x3F0000003F000000;
      v39.i64[1] = 0x3F0000003F000000;
      v40 = vmulq_f32(vmaxnmq_f32(v38, (float32x4_t)0), v39);
      v41 = vdupq_lane_s32(0, 0);
      v42 = v41;
      v42.i32[0] = v40.i32[0];
      v43 = v41;
      v43.i32[1] = v40.i32[1];
      v41.i32[2] = v40.i32[2];
      v44 = (float32x4_t *)(*(_QWORD *)(v6 + 80) + (v29 << 6));
      v45 = *v44;
      v46 = v44[1];
      v47 = v44[2];
      v48 = v44[3];
      v35.i32[3] = 1.0;
      *(int32x4_t *)v86 = v42;
      *(int32x4_t *)&v86[16] = v43;
      *(int32x4_t *)&v86[32] = v41;
      *(uint32x4_t *)&v86[48] = v35;
      do
      {
        *(__int128 *)((char *)&v91 + v37) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)&v86[v37])), v46, *(float32x2_t *)&v86[v37], 1), v47, *(float32x4_t *)&v86[v37], 2), v48, *(float32x4_t *)&v86[v37], 3);
        v37 += 16;
      }
      while (v37 != 64);
      v58 = v92;
      v59 = v91;
      v56 = v94;
      v57 = v93;
      v49 = (_OWORD *)re::BucketArray<re::Matrix4x4<float>,128ul>::operator[]((uint64_t)(v24 + 7), v29);
      *v49 = v59;
      v49[1] = v58;
      v49[2] = v57;
      v49[3] = v56;
      v29 = ++v30;
      if (*(_QWORD *)(v6 + 24) <= (unint64_t)v30)
        goto LABEL_20;
    }
    v85[0] = 0;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v91 = 0u;
    a2 = (re::RenderGraphContext *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v86 = 136315906;
    *(_QWORD *)&v86[4] = "operator[]";
    *(_WORD *)&v86[12] = 1024;
    *(_DWORD *)&v86[14] = 797;
    *(_WORD *)&v86[18] = 2048;
    *(_QWORD *)&v86[20] = v29;
    *(_WORD *)&v86[28] = 2048;
    *(_QWORD *)&v86[30] = this;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    dispatch_once(&re::GraphicsFeatureFlags::enableDepthPatch(void)::onceToken, &__block_literal_global_8_2);
  }
LABEL_20:
  v6 = (uint64_t)v55;
  if (*((_BYTE *)v55 + 260))
    v50 = &__const__ZN2re20FeatureStencilStates17getDepthPatchInfoENS0_15DepthPatchUsageE_kReadForImmersiveEnvironmentStInfo;
  else
    v50 = &__const__ZN2re20FeatureStencilStates17getDepthPatchInfoENS0_15DepthPatchUsageE_kReadStInfo;
  v60 = *v50;
  v61 = *((_BYTE *)v50 + 16);
  if (v24[5])
  {
    re::DrawTableSlice::DrawTableSlice(&v91, (uint64_t)v24);
    v51 = 0;
    *(_QWORD *)v86 = "DepthPatchPass";
    *(_QWORD *)&v86[8] = &v91;
    v52 = *(_QWORD *)(v25 + 80);
    *(_QWORD *)&v86[16] = *(_QWORD *)(v25 + 40);
    *(_QWORD *)&v86[24] = v52;
    *(_QWORD *)&v86[32] = 0;
    v86[40] = *(_BYTE *)(v25 + 128);
    *(_WORD *)&v86[41] = 0;
    *(_WORD *)&v86[44] = 256;
    *(_OWORD *)&v86[46] = v60;
    v86[62] = v61;
    *(_OWORD *)&v86[63] = 0u;
    v87 = 0u;
    v88 = 0;
    if (*((_BYTE *)a2 + 1332))
      goto LABEL_32;
    goto LABEL_25;
  }
}

uint64_t *re::allocInfo_DepthPatchNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254120AE0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254120AE0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120B08, 0);
    *(uint64_t *)((char *)&qword_254120B18 + 6) = 0;
    qword_254120B18 = 0;
    qword_254120B28 = 0;
    qword_254120B30 = 0xFFFFFFFFLL;
    qword_254120B08 = (uint64_t)&off_24ED7DAA8;
    qword_254120B38 = (uint64_t)"DepthPatchNode";
    dword_254120B40 = 0;
    unk_254120B48 = 0u;
    unk_254120B58 = 0u;
    unk_254120B68 = 0u;
    qword_254120B78 = 0;
    __cxa_guard_release(&qword_254120AE0);
  }
  return &qword_254120B08;
}

void re::initInfo_DepthPatchNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0xF6EF85110940D60ELL;
  v18[1] = "DepthPatchNode";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_254120AE8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120AE8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254120AF0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "renderToSeparateTarget";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10400000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254120AF8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "depthPatchMaterial";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254120B00 = v16;
      __cxa_guard_release(&qword_254120AE8);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254120AF0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DepthPatchNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DepthPatchNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DepthPatchNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DepthPatchNode>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::DepthPatchNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)result + 64) = 1;
  *(_QWORD *)result = &off_24ED86BD8;
  *((_BYTE *)result + 260) = 0;
  *((_QWORD *)result + 34) = 0;
  *((_QWORD *)result + 35) = 0;
  *((_QWORD *)result + 33) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::DepthPatchNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::DepthPatchNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)result + 64) = 1;
  *(_QWORD *)result = &off_24ED86BD8;
  *((_BYTE *)result + 260) = 0;
  *((_QWORD *)result + 34) = 0;
  *((_QWORD *)result + 35) = 0;
  *((_QWORD *)result + 33) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::DepthPatchNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_DepthPatchNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DepthPatchNode", (uint64_t (*)(re::internal *))re::allocInfo_DepthPatchNode, (re::IntrospectionBase *(*)(void))re::initInfo_DepthPatchNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DepthPatchNode>, this);
}

void re::DepthPatchNode::~DepthPatchNode(re::DepthPatchNode *this)
{
  *(_QWORD *)this = &off_24ED86BD8;
  re::AssetHandle::~AssetHandle((re::DepthPatchNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  *(_QWORD *)this = &off_24ED86BD8;
  re::AssetHandle::~AssetHandle((re::DepthPatchNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

__n128 re::RenderGraphEmitterBase::initRuntimeSettings@<Q0>(re::RenderGraphEmitterBase *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re *v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t (***v11)(_QWORD);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  re::RenderGraphEmitterRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphEmitterRegistry::m_instance, a2, (uint64_t)v10);
  if (v10[0])
  {
    v6 = (re *)(**v11)(v11);
    re::makeBindNode(v6, this, (uint64_t)&v12);
    if ((__n128 *)((char *)this + 16) != &v12)
      re::BindNode::move((re::RenderGraphEmitterBase *)((char *)this + 16), (re::BindNode *)&v12);
    result.n128_f64[0] = re::BindNode::deinit((re::BindNode *)&v12);
    *(_BYTE *)a3 = 1;
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Unregistered RenderGraphEmitter with typeHash %lu.", (re::DynamicString *)&v12, a2);
    result = v12;
    v8 = v13;
    v9 = v14;
    *(_BYTE *)a3 = 0;
    *(__n128 *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = v8;
    *(_QWORD *)(a3 + 32) = v9;
  }
  return result;
}

void re::RenderGraphEmitterBase::execute(re::RenderGraphEmitterBase *this, re::RenderManager *a2)
{
  re::RenderGraphEmitterBase *v3;
  uint64_t v4;
  re::RenderGraphEmitterBase *v5;
  unint64_t v6;
  NSObject *v7;
  uint8_t v8[16];

  v3 = this;
  v4 = *((_QWORD *)a2 + 13);
  if (v4)
  {
    this = (re::RenderGraphEmitterBase *)re::RenderFrameBox::get(v4 + 344, 0xFFFFFFFFFFFFFFFuLL);
    v5 = this;
  }
  else
  {
    v5 = 0;
  }
  v6 = *((_QWORD *)v5 + 496);
  if (v6 >= 2)
  {
    v7 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "Only one workload per frame is currently supported. Only the last workload will be executed.", v8, 2u);
    }
    v6 = *((_QWORD *)v5 + 496);
  }
  if (v6)
    (*(void (**)(re::RenderGraphEmitterBase *, re::RenderManager *, _QWORD))(*(_QWORD *)v3 + 40))(v3, a2, *(_QWORD *)(*((_QWORD *)v5 + 498) + 8 * v6 - 8));
}

uint64_t re::RenderGraphEmitterBase::execute(re::RenderGraphEmitterBase *this, re::RenderManager *a2, re::RenderFrameWorkload *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *((_QWORD *)a2 + 13);
  if (v5)
    v6 = re::RenderFrameBox::get(v5 + 344, *((_QWORD *)a3 + 5));
  else
    v6 = 0;
  re::RenderFrameWorkload::beforeEmit(a3);
  return (*(uint64_t (**)(re::RenderGraphEmitterBase *, uint64_t))(*(_QWORD *)this + 48))(this, v6);
}

uint64_t re::RenderGraphEmitterBase::setRuntimeSetting(re::BindNode **this, const re::IntrospectionBase *a2, const char *a3, char *a4)
{
  unsigned int *v8;
  re *v9;
  uint64_t v10;
  NSObject *v11;
  unint64_t v12;
  re::BindNode *v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v19[2];
  StringID v20;
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  re::BindNode *v27;
  uint8_t v28[16];
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v20.var0 = 0;
  v20.var1 = (char *)&str_110;
  v8 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(this + 11), &v20);
  if (!v8)
  {
    *(_QWORD *)&v28[8] = 0;
    v29 = 0uLL;
    LODWORD(v30) = 0;
    *((_QWORD *)&v30 + 1) = 0;
    *(_QWORD *)&v31[0] = 0;
    *((_QWORD *)&v31[0] + 1) = &str_110;
    v19[0] = (uint64_t)a3;
    v19[1] = strlen(a3);
    re::BindNode::bindPoint(this + 2, (uint64_t)a2, v19, (uint64_t)buf);
    *(_QWORD *)v28 = *(_QWORD *)buf;
    re::DynamicArray<re::RigDataValue>::operator=((uint64_t)&v28[8], (uint64_t)&buf[8]);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
    v9 = (re *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
    v10 = *((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      re::StringID::operator=((unint64_t *)v31, (uint64_t *)&v20);
      re::DynamicArray<re::BindPointAndPath>::add((_anonymous_namespace_ *)(this + 6), (uint64_t *)v28);
      *(_DWORD *)buf = *((_DWORD *)this + 16) - 1;
      v8 = (unsigned int *)re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(this + 11), &v20, buf);
    }
    else
    {
      v11 = *re::graphicsLogObjects(v9);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = a3;
        _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Failed to find binding path [%s].", buf, 0xCu);
      }
      v8 = 0;
    }
    re::StringID::destroyString((re::StringID *)v31);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v28[8]);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v28[8]);
    if (!v10)
      goto LABEL_13;
  }
  v12 = *v8;
  v13 = this[8];
  if ((unint64_t)v13 <= v12)
  {
    v19[0] = 0;
    memset(v31, 0, sizeof(v31));
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = v12;
    v26 = 2048;
    v27 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = (_anonymous_namespace_ *)re::BindPoint::valueUntyped((re::BindNode *)((char *)this[10] + 64 * v12));
  *(_QWORD *)&v28[8] = 0;
  *(_QWORD *)&v29 = 0;
  if ((v15 & 1) == 0)
  {
    v17 = *re::graphicsLogObjects((re *)v15);
    v16 = 0;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    *(_DWORD *)v28 = 136315138;
    *(_QWORD *)&v28[4] = a3;
    _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Failed to perform deep copy into binding path [%s].", v28, 0xCu);
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  v16 = 1;
LABEL_14:
  re::StringID::destroyString((re::StringID *)&v20);
  return v16;
}

uint64_t *re::allocInfo_RenderGraphEmitterBase(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_463);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_463))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120B98, 0);
    *(uint64_t *)((char *)&qword_254120BA8 + 6) = 0;
    qword_254120BA8 = 0;
    qword_254120BB8 = 0;
    qword_254120BC0 = 0xFFFFFFFFLL;
    qword_254120B98 = (uint64_t)&off_24ED7DAA8;
    qword_254120BC8 = (uint64_t)"RenderGraphEmitterBase";
    dword_254120BD0 = 0;
    unk_254120BD8 = 0u;
    unk_254120BE8 = 0u;
    unk_254120BF8 = 0u;
    qword_254120C08 = 0;
    __cxa_guard_release(&_MergedGlobals_463);
  }
  return &qword_254120B98;
}

void re::initInfo_RenderGraphEmitterBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;

  v9[0] = 0xB2BF4B7174817E0ELL;
  v9[1] = "RenderGraphEmitterBase";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  v4 = atomic_load((unsigned __int8 *)&qword_254120B90);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120B90);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 16, 8);
      *(_DWORD *)v7 = 2;
      *(_QWORD *)(v7 + 8) = 0;
      qword_254120B88 = v7;
      __cxa_guard_release(&qword_254120B90);
    }
  }
  *((_QWORD *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254120B88;
  re::IntrospectionRegistry::add(this, v3);
  v8 = v10;
}

uint64_t re::introspect_RenderGraphEmitterBase(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphEmitterBase", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphEmitterBase, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphEmitterBase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphEmitterBase>, this);
}

void re::guided_filter_occlusion::encodeGuidedFilterOcclusionCommands(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64x2_t v7;
  float64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64x2_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64x2_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  id v79;
  id v80;
  id v81;
  uint64x2_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  id v96;
  uint64x2_t v97;
  float64x2_t v98;
  id v99;
  id v100;
  id v101;
  id v102;
  int v103;
  __int128 v104;
  uint64_t v105;
  uint64x2_t v106;
  uint64_t v107;
  float v108;
  id v109[2];

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), &v102);
  v2 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v102, "setTexture:atIndex:", *(_QWORD *)v2, 0);
  objc_msgSend(v102, "setTexture:atIndex:", *(_QWORD *)(v2 + 8), 1);
  objc_msgSend(v102, "setTexture:atIndex:", *(_QWORD *)(v2 + 32), 2);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 88);
  v4 = v102;
  objc_msgSend(v4, "setComputePipelineState:", v3);

  v5 = objc_msgSend(*(id *)(v2 + 32), sel_width);
  v6 = objc_msgSend(*(id *)(v2 + 32), sel_height);
  v7.i64[0] = (uint64_t)v5;
  v7.i64[1] = (uint64_t)v6;
  v8 = (float64x2_t)vdupq_n_s64(0x3FB0000000000000uLL);
  v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v7), v8)));
  v107 = 1;
  v105 = 1;
  v98 = v8;
  v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  objc_msgSend(v102, "dispatchThreadgroups:threadsPerThreadgroup:", &v106, &v104);
  v9 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v102, "setTexture:atIndex:", *(_QWORD *)(v9 + 16), 0);
  objc_msgSend(v102, "setTexture:atIndex:", *(_QWORD *)(v9 + 48), 1);
  LODWORD(v109[0]) = *(_DWORD *)(*(_QWORD *)(re::RenderGraphDataStore::get<re::CameraMatrices>(*(_QWORD *)(*(_QWORD *)a1 + 1168), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 48))+ 80)+ 56);
  objc_msgSend(v102, "setBytes:length:atIndex:", v109, 4, 2);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 104);
  v11 = v102;
  objc_msgSend(v11, "setComputePipelineState:", v10);

  v12 = objc_msgSend(*(id *)(v9 + 56), sel_width);
  v13 = objc_msgSend(*(id *)(v9 + 56), (SEL)&selRef_setTileTextures_withRange_);
  v14.i64[0] = (uint64_t)v12;
  v14.i64[1] = (uint64_t)v13;
  v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v14), v98)));
  v107 = 1;
  v105 = 1;
  v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  objc_msgSend(v102, "dispatchThreadgroups:threadsPerThreadgroup:", &v106, &v104);
  objc_msgSend(v102, "endEncoding");
  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v15 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v16 = *(void **)(a1 + 8);
  v17 = *(_QWORD *)(v9 + 56);
  v18 = *(id *)(v9 + 48);
  v19 = v16;
  v20 = v15;
  objc_msgSend(v20, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v19, v18, v17);

  v22 = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 48);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), v109);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), 0);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24), 1);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v21 + 88), 2);
  objc_msgSend(v109[0], "setBytes:length:atIndex:", *(_QWORD *)(a1 + 24) + 48, 64, 3);
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80);
  v24 = v109[0];
  objc_msgSend(v24, "setComputePipelineState:", v23);

  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 160);
  v26.i64[0] = v25;
  v26.i64[1] = HIDWORD(v25);
  v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v26), v98)));
  v107 = 1;
  v105 = 1;
  v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  objc_msgSend(v109[0], "dispatchThreadgroups:threadsPerThreadgroup:", &v106, &v104);
  objc_msgSend(v109[0], "endEncoding");
  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v27 = *(void **)(a1 + 8);
  v28 = *(_QWORD *)(v21 + 80);
  v29 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v30 = *(id *)(v21 + 88);
  v31 = v27;
  v32 = v29;
  objc_msgSend(v32, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v31, v30, v28);

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v33 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v34 = *(void **)(a1 + 8);
  v35 = *(_QWORD *)(v22 + 24);
  v36 = *(id *)(v21 + 80);
  v37 = v34;
  v38 = v33;
  objc_msgSend(v38, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v37, v36, v35);

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v39 = *(_QWORD *)(a1 + 48);
  v40 = objc_alloc(MEMORY[0x24BDDE378]);
  v41 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 112);
  v42 = (void *)objc_msgSend(v40, "initWithDevice:kernelWidth:kernelHeight:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 184), v41, v41);
  v43 = *(void **)(a1 + 8);
  v44 = *(void **)(v39 + 32);
  v45 = *(_QWORD *)(v39 + 40);
  v46 = v44;
  v47 = v43;
  objc_msgSend(v42, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v47, v46, v45);

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v48 = *(_QWORD *)(a1 + 48);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), v109);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v48 + 32), 0);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v48 + 40), 1);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v48 + 16), 2);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v48 + 24), 3);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v48 + 56), 4);
  LODWORD(v101) = *(_DWORD *)(*(_QWORD *)(re::RenderGraphDataStore::get<re::CameraMatrices>(*(_QWORD *)(*(_QWORD *)a1 + 1168), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 48))+ 80)+ 56);
  objc_msgSend(v109[0], "setBytes:length:atIndex:", &v101, 4, 0);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v48 + 64), 5);
  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 96);
  v50 = v109[0];
  objc_msgSend(v50, "setComputePipelineState:", v49);

  v51 = objc_msgSend(*(id *)(v48 + 64), sel_width);
  v52 = objc_msgSend(*(id *)(v48 + 64), sel_height);
  v53.i64[0] = (uint64_t)v51;
  v53.i64[1] = (uint64_t)v52;
  v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v53), v98)));
  v107 = 1;
  v105 = 1;
  v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  objc_msgSend(v109[0], "dispatchThreadgroups:threadsPerThreadgroup:", &v106, &v104);
  objc_msgSend(v109[0], "endEncoding");

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v101 = *(id *)(*(_QWORD *)(a1 + 40) + 8);
  v100 = *(id *)(*(_QWORD *)(a1 + 40) + 32);
  if (*(unsigned __int8 *)(a1 + 65) | *(unsigned __int8 *)(a1 + 64))
  {
    NS::SharedPtr<MTL::Texture>::operator=(&v101, *(void ***)(a1 + 40));
    NS::SharedPtr<MTL::Texture>::operator=(&v100, (void **)(*(_QWORD *)(a1 + 40) + 24));
  }
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), &v99);
  v54 = *(_QWORD *)(a1 + 48);
  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 176);
  objc_msgSend(v99, "setTexture:atIndex:", *(_QWORD *)(v54 + 64), 0);
  objc_msgSend(v99, "setTexture:atIndex:", *(_QWORD *)(v54 + 96), 1);
  v56 = *(_QWORD *)(a1 + 24);
  LOWORD(v109[0]) = *(_DWORD *)(v56 + 128);
  HIDWORD(v109[0]) = *(_DWORD *)(v56 + 152);
  objc_msgSend(v99, "setBytes:length:atIndex:", v109, 8, 0);
  v57 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 64);
  v58 = v99;
  objc_msgSend(v58, "setComputePipelineState:", v57);

  v59.i64[0] = v55;
  v59.i64[1] = HIDWORD(v55);
  v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v59), v98)));
  v107 = 1;
  v105 = 1;
  v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  objc_msgSend(v99, "dispatchThreadgroups:threadsPerThreadgroup:", &v106, &v104);
  v60 = *(_QWORD *)(a1 + 48);
  v61 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 176);
  objc_msgSend(v99, "setTexture:atIndex:", *(_QWORD *)(v60 + 64), 0);
  objc_msgSend(v99, "setTexture:atIndex:", *(_QWORD *)(v60 + 104), 1);
  v62 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 72);
  v63 = v99;
  objc_msgSend(v63, "setComputePipelineState:", v62);

  v59.i64[0] = v61;
  v59.i64[1] = HIDWORD(v61);
  v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v59), v98)));
  v107 = 1;
  v105 = 1;
  v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  objc_msgSend(v99, "dispatchThreadgroups:threadsPerThreadgroup:", &v106, &v104);
  objc_msgSend(v99, "endEncoding");
  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v64 = *(uint64_t **)(a1 + 40);
  v65 = *(void **)(a1 + 8);
  v66 = (void *)v64[3];
  v67 = *(void **)(*(_QWORD *)(a1 + 48) + 104);
  v68 = *v64;
  v69 = **(void ***)(a1 + 32);
  v70 = *(id *)(*(_QWORD *)(a1 + 48) + 96);
  v71 = v66;
  v72 = v67;
  v73 = v65;
  v74 = v69;
  objc_msgSend(v74, "encodeRegressionToCommandBuffer:sourceTexture:guidanceTexture:weightsTexture:destinationCoefficientsTexture:", v73, v72, v71, v70, v68);

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v75 = *(_QWORD *)(a1 + 40);
  v76 = *(_QWORD *)(a1 + 24);
  v77 = *(float *)(v76 + 136);
  LODWORD(v61) = *(_DWORD *)(v76 + 140);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), v109);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v75 + 24), 0);
  objc_msgSend(v109[0], "setTexture:atIndex:", v100, 1);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)v75, 2);
  objc_msgSend(v109[0], "setTexture:atIndex:", v101, 3);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v75 + 16), 6);
  v108 = v77;
  objc_msgSend(v109[0], "setBytes:length:atIndex:", &v108, 4, 7);
  v103 = v61;
  objc_msgSend(v109[0], "setBytes:length:atIndex:", &v103, 4, 8);
  v78 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 56);
  v79 = v109[0];
  objc_msgSend(v79, "setComputePipelineState:", v78);

  v80 = objc_msgSend(*(id *)(v75 + 16), sel_width);
  v81 = objc_msgSend(*(id *)(v75 + 16), sel_height);
  v82.i64[0] = (uint64_t)v80;
  v82.i64[1] = (uint64_t)v81;
  v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v82), v98)));
  v107 = 1;
  v105 = 1;
  v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  objc_msgSend(v109[0], "dispatchThreadgroups:threadsPerThreadgroup:", &v106, &v104);
  objc_msgSend(v109[0], "endEncoding");

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v83 = *(_QWORD *)(a1 + 48);
  v84 = *(void **)(a1 + 8);
  v85 = *(void **)(v83 + 80);
  v86 = *(_QWORD *)(v83 + 112);
  v87 = **(void ***)(a1 + 32);
  v88 = *(id *)(*(_QWORD *)(a1 + 40) + 16);
  v89 = v85;
  v90 = v84;
  v91 = v87;
  objc_msgSend(v91, "encodeReconstructionToCommandBuffer:guidanceTexture:coefficientsTexture:destinationTexture:", v90, v89, v88, v86);

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  v92 = *(_QWORD *)(a1 + 48);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(a1 + 8), v109);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v92 + 112), 0);
  objc_msgSend(v109[0], "setTexture:atIndex:", *(_QWORD *)(v92 + 120), 1);
  v108 = (float)(*(float *)(*(_QWORD *)(a1 + 24) + 156) * 5.0) + 1.0;
  objc_msgSend(v109[0], "setBytes:length:atIndex:", &v108, 4, 2);
  v93 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 48);
  v94 = v109[0];
  objc_msgSend(v94, "setComputePipelineState:", v93);

  v95 = objc_msgSend(*(id *)(v92 + 120), sel_width);
  v96 = objc_msgSend(*(id *)(v92 + 120), sel_height);
  v97.i64[0] = (uint64_t)v95;
  v97.i64[1] = (uint64_t)v96;
  v106 = vcvtq_u64_f64(vrndpq_f64(vmulq_f64(vcvtq_f64_u64(v97), v98)));
  v107 = 1;
  v105 = 1;
  v104 = re::guided_filter_occlusion::kDefaulThreadsPerGroup;
  objc_msgSend(v109[0], "dispatchThreadgroups:threadsPerThreadgroup:", &v106, &v104);
  objc_msgSend(v109[0], "endEncoding");

  re::SyncMechanism::sync(*(re::SyncMechanism **)(a1 + 16));
  if (v100)

  if (v101)
}

void re::RenderGraphTonemapNode::execute(re::RenderGraphTonemapNode *this, re::RenderGraphContext *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  re::BufferTable *v16;
  uint64_t *v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  re::BufferTable *v22;
  NSObject *v23;
  re *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  _BYTE v37[16];
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v37, 5060, 0);
  if (!*((_BYTE *)this + 516))
  {
    re::TonemapUserParameters::computeRenderParameters((re::RenderGraphTonemapNode *)((char *)this + 456), (uint64_t)buf);
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x84uLL, 4uLL, (uint64_t)&v38);
    v19 = v40;
    v20 = v39 | ((unint64_t)HIDWORD(v39) << 32);
    v21 = v38 + v39;
    *(_OWORD *)(v21 + 80) = v33;
    *(_OWORD *)(v21 + 96) = v34;
    *(_OWORD *)(v21 + 112) = v35;
    *(_DWORD *)(v21 + 128) = v36;
    *(_OWORD *)(v21 + 16) = v29;
    *(_OWORD *)(v21 + 32) = v30;
    *(_OWORD *)(v21 + 48) = v31;
    *(_OWORD *)(v21 + 64) = v32;
    *(_OWORD *)v21 = *(_OWORD *)buf;
    v16 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
    v27 = 0x1C6D7B14F4E32CD0;
    v38 = v19;
    v39 = v20;
    v17 = &v27;
    v18 = (uint8_t *)&v38;
    goto LABEL_6;
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254120C18);
  if ((v4 & 1) == 0)
  {
    v24 = (re *)__cxa_guard_acquire(&qword_254120C18);
    if ((_DWORD)v24)
    {
      _MergedGlobals_464 = re::getCombinedScopeHash(v24, v25, v26);
      __cxa_guard_release(&qword_254120C18);
    }
  }
  v5 = re::RenderGraphDataStore::tryGet<re::TonemapParametersData>(*((_QWORD *)a2 + 146), _MergedGlobals_464);
  if (v5)
  {
    v6 = v5;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x84uLL, 4uLL, (uint64_t)buf);
    v7 = v29;
    v8 = *(unsigned int *)&buf[8] | ((unint64_t)*(unsigned int *)&buf[12] << 32);
    v9 = *(_QWORD *)buf + *(unsigned int *)&buf[8];
    *(_OWORD *)v9 = *(_OWORD *)(v6 + 8);
    v10 = *(_OWORD *)(v6 + 24);
    v11 = *(_OWORD *)(v6 + 40);
    v12 = *(_OWORD *)(v6 + 72);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(v6 + 56);
    *(_OWORD *)(v9 + 64) = v12;
    *(_OWORD *)(v9 + 16) = v10;
    *(_OWORD *)(v9 + 32) = v11;
    v13 = *(_OWORD *)(v6 + 88);
    v14 = *(_OWORD *)(v6 + 104);
    v15 = *(_OWORD *)(v6 + 120);
    *(_DWORD *)(v9 + 128) = *(_DWORD *)(v6 + 136);
    *(_OWORD *)(v9 + 96) = v14;
    *(_OWORD *)(v9 + 112) = v15;
    *(_OWORD *)(v9 + 80) = v13;
    v16 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
    v38 = 0x1C6D7B14F4E32CD0;
    *(_QWORD *)buf = v7;
    *(_QWORD *)&buf[8] = v8;
    v17 = &v38;
    v18 = buf;
LABEL_6:
    re::BufferTable::setBuffer(v16, (const re::WeakStringID *)v17, (const BufferView *)v18);
    re::RenderGraphFullscreenNode::executeInternal(this, a2, (re::RenderGraphTonemapNode *)((char *)this + 264));
    v22 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
    *(_QWORD *)buf = 0x1C6D7B14F4E32CD0;
    re::BufferTable::removeBuffer(v22, (const re::WeakStringID *)buf);
    goto LABEL_7;
  }
  v23 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEFAULT, "RenderGraphTonemapNode expects TonemapParametersData from the render graph data store but there isn't any. Will skip the execution.", buf, 2u);
  }
LABEL_7:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v37);
}

uint64_t *re::allocInfo_RenderGraphTonemapNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254120C20);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254120C20))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120C48, 0);
    *(uint64_t *)((char *)&qword_254120C58 + 6) = 0;
    qword_254120C58 = 0;
    qword_254120C68 = 0;
    qword_254120C70 = 0xFFFFFFFFLL;
    qword_254120C48 = (uint64_t)&off_24ED7DAA8;
    qword_254120C78 = (uint64_t)"RenderGraphTonemapNode";
    dword_254120C80 = 0;
    unk_254120C88 = 0u;
    unk_254120C98 = 0u;
    unk_254120CA8 = 0u;
    qword_254120CB8 = 0;
    __cxa_guard_release(&qword_254120C20);
  }
  return &qword_254120C48;
}

void re::initInfo_RenderGraphTonemapNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0xB3170E0D645236E8;
  v17[1] = "RenderGraphTonemapNode";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_254120C28);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120C28);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphFullscreenNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphFullscreenNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254120C30 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_TonemapUserParameters((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "tonemapUserParameters";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1C800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254120C38 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_BOOL((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "tonemappingSharedParamsEnabled";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x20400000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254120C40 = v15;
      __cxa_guard_release(&qword_254120C28);
    }
  }
  *((_QWORD *)this + 2) = 0x20800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254120C30;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphTonemapNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphTonemapNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphTonemapNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphTonemapNode>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

double re::internal::defaultConstruct<re::RenderGraphTonemapNode>(int a1, int a2, re::RenderGraphTonemapNode *this)
{
  return re::RenderGraphTonemapNode::RenderGraphTonemapNode(this);
}

void re::internal::defaultDestruct<re::RenderGraphTonemapNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
}

uint64_t re::introspect_RenderGraphTonemapNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphTonemapNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphTonemapNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphTonemapNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphTonemapNode>, this);
}

void re::RenderGraphTonemapNode::~RenderGraphTonemapNode(re::RenderGraphTonemapNode *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
  JUMPOUT(0x2276933B8);
}

double re::RenderGraphTonemapNode::RenderGraphTonemapNode(re::RenderGraphTonemapNode *this)
{
  char *v1;
  re::RenderGraphFullscreenNode *v2;
  double result;

  *((_QWORD *)this + 56) = 0;
  v1 = (char *)this + 456;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(this);
  *(_QWORD *)v2 = &off_24ED86CD8;
  result = 0.00000175476111;
  *(_OWORD *)v1 = xmmword_2260F4F30;
  *((_OWORD *)v1 + 1) = xmmword_2260EDC60;
  *((_BYTE *)v2 + 488) = 0;
  *(_QWORD *)(v1 + 36) = 0x3F8000003F800000;
  *((_BYTE *)v2 + 500) = 0;
  *((_QWORD *)v2 + 63) = 0x3F80000000000000;
  *((_BYTE *)v2 + 512) = 0;
  *((_BYTE *)v2 + 516) = 0;
  return result;
}

uint64_t re::encodeMeshPassForPortal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  __int128 v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  unsigned __int8 v60;
  char v61;
  char v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned __int32 v68;
  const char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  const char *v74;
  uint64_t i;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  re::DrawTable *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  _BYTE v96[79];
  __int128 v97;
  char v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _DWORD v112[7];
  __int16 v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v2 = a2;
  v121 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 64);
  if (*(_BYTE *)(v3 + 1332))
    goto LABEL_89;
  for (i = 0;
        ;
        i = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(v3 + 1336), *(const char **)(*(_QWORD *)(v2 + 8) + 8), "encodeMeshPassForPortal"))
  {
    v4 = 0x9E3779B97F4A7C17;
    v5 = *(_QWORD *)v2;
    v6 = strlen(*(const char **)(*(_QWORD *)(v2 + 8) + 8));
    v7 = 0x9E3779B97F4A7C17;
    if (v6)
    {
      MurmurHash3_x64_128(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8), v6, 0, (unint64_t *)&v101);
      v7 = ((*((_QWORD *)&v101 + 1) - 0x61C8864680B583E9 + ((_QWORD)v101 << 6) + ((unint64_t)v101 >> 2)) ^ v101)
         - 0x61C8864680B583E9;
    }
    v8 = atomic_load((unsigned __int8 *)&qword_254120CD0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254120CD0))
    {
      qword_254120CC8 = re::hashString((re *)"DynamicFunctionConstants", v73);
      __cxa_guard_release(&qword_254120CD0);
    }
    v9 = *(_QWORD *)(v2 + 64);
    v10 = v2;
    v11 = qword_254120CC8;
    v88 = v10;
    v12 = *(const char **)(v10 + 16);
    v13 = strlen(v12);
    if (v13)
    {
      MurmurHash3_x64_128((uint64_t)v12, v13, 0, (unint64_t *)&v101);
      v4 = ((*((_QWORD *)&v101 + 1) - 0x61C8864680B583E9 + ((_QWORD)v101 << 6) + ((unint64_t)v101 >> 2)) ^ v101)
         - 0x61C8864680B583E9;
    }
    v14 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(*(_QWORD *)(v9 + 1168), ((v11 >> 2) + (v11 << 6) + v4) ^ v11);
    v15 = v14 + 8;
    if (!v14)
      v15 = 0;
    v87 = v15;
    v16 = atomic_load((unsigned __int8 *)&qword_254120CE0);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254120CE0))
    {
      qword_254120CD8 = re::hashString((re *)"RenderGraphDataPipeData", v74);
      __cxa_guard_release(&qword_254120CE0);
    }
    v2 = v88;
    v17 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(*(_QWORD *)(*(_QWORD *)(v88 + 64) + 1168), (v7 + (qword_254120CD8 << 6) + ((unint64_t)qword_254120CD8 >> 2)) ^ qword_254120CD8);
    v18 = v17 ? (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 8) + 984))(*(_QWORD *)(v17 + 8)) : 0;
    v78 = re::RenderGraphDataStore::tryGet<re::MeshSortGroupCameraData>(*(_QWORD *)(*(_QWORD *)(v88 + 64) + 1168), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 64) + 40) + 48));
    v19 = *(_QWORD *)(**(_QWORD **)(v88 + 64) + 24);
    v81 = (re::DrawTable *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 328, 8);
    re::DrawTable::DrawTable(v81, *(re::Allocator **)(**(_QWORD **)(v88 + 64) + 24));
    result = re::RenderGraphDataStore::get<re::CameraData>(*(_QWORD *)(*(_QWORD *)(v88 + 64) + 1168), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 64) + 40) + 48));
    v80 = result;
    if (!*(_QWORD *)(v5 + 40))
      break;
    v21 = 0;
    v91 = (uint64_t *)(v5 + 448);
    v86 = v18;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      v26 = re::DataArray<re::MeshInstance>::get(*(_QWORD *)(v2 + 72) + 72, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * v21));
      result = re::DataArray<re::MeshModel>::get(*(_QWORD *)(v2 + 72) + 8, *(_QWORD *)(v26 + 16));
      v27 = 0;
      v28 = *(float32x4_t *)(v5 + 80);
      v29 = *(float32x4_t *)(v5 + 96);
      v30 = *(float32x4_t *)(v5 + 112);
      v31 = *(float32x4_t *)(v5 + 128);
      v32 = *(_OWORD *)(v26 + 48);
      v33 = *(_OWORD *)(v26 + 64);
      v34 = *(_OWORD *)(v26 + 80);
      *(_OWORD *)v96 = *(_OWORD *)(v26 + 32);
      *(_OWORD *)&v96[16] = v32;
      *(_OWORD *)&v96[32] = v33;
      *(_OWORD *)&v96[48] = v34;
      do
      {
        *(__int128 *)((char *)&v101 + v27) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, COERCE_FLOAT(*(_OWORD *)&v96[v27])), v29, *(float32x2_t *)&v96[v27], 1), v30, *(float32x4_t *)&v96[v27], 2), v31, *(float32x4_t *)&v96[v27], 3);
        v27 += 16;
      }
      while (v27 != 64);
      v84 = v102;
      v85 = v101;
      v82 = v104;
      v83 = v103;
      v35 = *(_QWORD *)(v5 + 48);
      v77 = v21;
      if (v35 && (v36 = *(_QWORD *)(v35 + 96)) != 0)
      {
        v37 = *(_QWORD *)(v36 + 8);
        if (v37 <= v21)
          goto LABEL_88;
        v79 = *(_QWORD *)(*(_QWORD *)(v36 + 16) + 24 * v21 + 16);
        v90 = *(_QWORD *)(*(_QWORD *)(v36 + 16) + 24 * v21 + 8);
      }
      else
      {
        v90 = 0;
        v79 = 0;
      }
      if (*(_QWORD *)(result + 56))
        break;
LABEL_82:
      v21 = v77 + 1;
      if (v77 + 1 >= *(_QWORD *)(v5 + 40))
        goto LABEL_83;
    }
    v38 = 0;
    v89 = result;
    while (1)
    {
      if (v38 >= v90)
        v39 = 0;
      else
        v39 = *(_QWORD *)(v79 + 8 * v38);
      v21 = *(_QWORD *)(result + 64);
      v40 = *(_QWORD *)(**(_QWORD **)(v2 + 64) + 24);
      v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 32))(v40, 224, 16);
      v43 = v41;
      *(_OWORD *)(v41 + 128) = 0u;
      *(_OWORD *)(v41 + 144) = 0u;
      *(_OWORD *)(v41 + 160) = 0u;
      *(_OWORD *)(v41 + 176) = 0u;
      *(_OWORD *)(v41 + 192) = 0u;
      *(_OWORD *)(v41 + 208) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_OWORD *)(v41 + 112) = 0u;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 32) = 0u;
      *(_OWORD *)(v41 + 48) = 0u;
      *(_OWORD *)v41 = 0u;
      *(_OWORD *)(v41 + 16) = 0u;
      *(_QWORD *)(v41 + 152) = _D8;
      *(_DWORD *)(v41 + 160) = 1065353216;
      v44 = *(unsigned __int16 *)(v21 + 560 * v38 + 474);
      if (*(_QWORD *)(v5 + 152) > v44)
        *(_QWORD *)(v41 + 40) = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 8 * v44);
      if (*(_QWORD *)(v5 + 240) > v44)
        *(_QWORD *)(v41 + 48) = *(_QWORD *)(*(_QWORD *)(v5 + 232) + 8 * v44);
      if (*(_QWORD *)(v5 + 224) > v44)
        *(_QWORD *)(v41 + 56) = *(_QWORD *)(*(_QWORD *)(v5 + 216) + 8 * v44);
      if (*(_QWORD *)(v5 + 272) > v44)
        *(_QWORD *)(v41 + 64) = *(_QWORD *)(*(_QWORD *)(v5 + 264) + 8 * v44);
      *(_QWORD *)(v41 + 72) = *(_QWORD *)(v5 + 280);
      *(_DWORD *)(v41 + 120) = *(_DWORD *)(v5 + 352);
      *(_DWORD *)(v41 + 156) = *(_DWORD *)(v5 + 412);
      v45 = 0;
      if (v18
        && (v46 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v18, v91)) != 0)
      {
        v47 = *(_DWORD *)(v46 + 8);
        if (v78)
        {
          if (*(_QWORD *)(v78 + 8))
          {
            v48 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v46 ^ (*(_QWORD *)v46 >> 30));
            v49 = *(unsigned int *)(*(_QWORD *)(v78 + 16)
                                  + 4
                                  * (((0x94D049BB133111EBLL * (v48 ^ (v48 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                     * (v48 ^ (v48 >> 27))) >> 31))
                                   % *(unsigned int *)(v78 + 32)));
            if ((_DWORD)v49 != 0x7FFFFFFF)
            {
              v50 = *(_QWORD *)(v78 + 24);
              while (*(_QWORD *)(v50 + 40 * v49 + 16) != *(_QWORD *)v46)
              {
                LODWORD(v49) = *(_DWORD *)(v50 + 40 * v49 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v49 == 0x7FFFFFFF)
                  goto LABEL_46;
              }
              v45 = *(_DWORD *)(v50 + 40 * v49 + 28);
            }
          }
        }
      }
      else
      {
        v47 = 0;
      }
LABEL_46:
      v51 = *(float *)(v5 + 408);
      *(float *)(v43 + 152) = v51;
      if (*(_BYTE *)(v43 + 176))
        _ZF = 0;
      else
        _ZF = *(_BYTE *)(v5 + 528) == 0;
      if (!_ZF)
      {
        if (!*(_BYTE *)(v43 + 176) || *(_BYTE *)(v5 + 528))
        {
          if (!*(_BYTE *)(v43 + 176) && *(_BYTE *)(v5 + 528))
            *(_BYTE *)(v43 + 176) = 1;
          v53 = *(_OWORD *)(v5 + 560);
          *(_OWORD *)(v43 + 192) = *(_OWORD *)(v5 + 544);
          *(_OWORD *)(v43 + 208) = v53;
        }
        else
        {
          *(_BYTE *)(v43 + 176) = 0;
        }
      }
      v2 = *(_WORD *)(v5 + 354) != 0;
      v37 = v51 != 1.0 || (unint64_t)(*(_WORD *)(v5 + 354) != 0);
      v54 = (*(_DWORD *)(v21 + 560 * v38 + 544) ^ *(_DWORD *)(*(_QWORD *)(v43 + 40) + 216)) & ~*(_DWORD *)(*(_QWORD *)(v43 + 40) + 220) | *(_DWORD *)(*(_QWORD *)(v43 + 40) + 220) & *(_DWORD *)(*(_QWORD *)(v43 + 40) + 216);
      v55 = *(_QWORD *)(v5 + 432);
      v92 = v47;
      if (v55)
      {
        if (v55 <= v38)
          goto LABEL_87;
        v56 = v39;
        v57 = re::MaterialRenderFlags::flattenToOverrideFlags((re::MaterialRenderFlags *)(*(_QWORD *)(v5 + 424)
                                                                                        + 18 * v38));
        v54 = (v54 ^ v57) & ~HIDWORD(v57) | HIDWORD(v57) & v57;
      }
      else
      {
        v56 = v39;
      }
      v58 = *(_DWORD *)(v5 + 444);
      v59 = *(_DWORD *)(v5 + 440);
      v60 = atomic_load((unsigned __int8 *)&qword_254120CE8);
      if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_254120CE8))
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableDitherForStencilPortals", v69, (char *)&v101);
        if ((_BYTE)v101)
          v70 = BYTE1(v101);
        else
          v70 = 1;
        _MergedGlobals_465 = v70;
        __cxa_guard_release(&qword_254120CE8);
      }
      v61 = _MergedGlobals_465 ? v37 : 0;
      v62 = (2 * v2) | v61;
      v63 = *(_QWORD *)(v5 + 312) ? v5 + 288 : 0;
      v2 = v88;
      *(_QWORD *)(v43 + 88) = v63;
      *(_QWORD *)(v43 + 96) = v87;
      *(_QWORD *)(v43 + 104) = 0;
      *(_BYTE *)(v43 + 112) = v62;
      v64 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v43, *(_QWORD *)(v88 + 32));
      if (!v65)
        break;
      v66 = *v64;
      if (*v64 != -1)
      {
        v101 = (unint64_t)*v91;
        *(_QWORD *)&v102 = v21 + 560 * v38;
        *((_QWORD *)&v102 + 1) = v102 + 432;
        *(_QWORD *)&v103 = v102 + 432;
        *((_QWORD *)&v103 + 1) = v56;
        *(_QWORD *)&v104 = v43;
        *((_QWORD *)&v104 + 1) = 0xFFFF010000000000;
        v105 = v85;
        v106 = v84;
        v107 = v83;
        v108 = v82;
        v110 = 0;
        v109 = 0;
        *(_QWORD *)v112 = 0;
        *(_DWORD *)((char *)&v112[1] + 3) = 0;
        *(_QWORD *)&v112[3] = 0;
        *(_QWORD *)&v112[5] = 0;
        v113 = 0;
        v111 = v66;
        v114 = (v59 ^ v54) & ~v58 | v59 & v58;
        v115 = v92;
        v116 = 0x7FFFFFFF;
        v117 = v45;
        v118 = 0xFFFFFFFFLL;
        v119 = 0;
        v120 = 0;
        v67 = **(_QWORD **)(v88 + 64);
        v68 = *(unsigned __int8 *)(v80 + 490);
        v93 = 0;
        v94 = 0;
        re::addDrawCall((uint64_t)v81, (uint64_t)&v101, v67, v68, (uint64_t)&v93);
      }
      ++v38;
      result = v89;
      v18 = v86;
      if (v38 >= *(_QWORD *)(v89 + 56))
        goto LABEL_82;
    }
    re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_87:
    re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v38, v55);
    _os_crash();
    __break(1u);
LABEL_88:
    v95 = 0;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v101 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    *(_WORD *)&v96[12] = 1024;
    *(_DWORD *)&v96[14] = 468;
    *(_WORD *)&v96[18] = 2048;
    *(_QWORD *)&v96[20] = v21;
    *(_WORD *)&v96[28] = 2048;
    *(_QWORD *)&v96[30] = v37;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    ;
  }
LABEL_83:
  if (*((_QWORD *)v81 + 5))
  {
    v71 = re::RenderGraphDataStore::get<re::CameraMatrices>(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 1168), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 40) + 48));
    re::DrawTableSlice::DrawTableSlice(&v101, (uint64_t)v81);
    *(_QWORD *)v96 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)&v96[8] = &v101;
    v72 = *(_QWORD *)(v71 + 80);
    *(_QWORD *)&v96[16] = *(_QWORD *)(v71 + 40);
    *(_QWORD *)&v96[24] = v72;
    *(_QWORD *)&v96[32] = 0;
    v96[40] = *(_BYTE *)(v71 + 128);
    *(_WORD *)&v96[41] = 2;
    *(_WORD *)&v96[44] = 256;
    *(_OWORD *)&v96[46] = *(_OWORD *)(v2 + 40);
    v96[62] = *(_BYTE *)(v2 + 56);
    *(_OWORD *)&v96[63] = 0u;
    v97 = 0u;
    v98 = 0;
    v99 = i;
    v100 = 0;
    return re::RenderGraphContext::encodeDrawCalls(*(_QWORD *)(v2 + 64), a1, v96);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 120 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 120 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 120 * v4 + 16) == v2)
        return v6 + 120 * v4 + 24;
    }
    return 0;
  }
  return v6 + 120 * v4 + 24;
}

uint64_t re::encodeMaterialPassForPortalScene(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  re::DrawTable *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[5];
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = result;
    v3 = (uint64_t *)(result + 24);
    v4 = *(_QWORD *)(result + 72);
    if (*(_BYTE *)(v4 + 1332))
    {
      result = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(v4 + 1336), *(const char **)(result + 8), *(const char **)(result + 16));
      v5 = result;
      v1 = *(_QWORD *)(v2 + 32);
      v4 = *(_QWORD *)(v2 + 72);
    }
    else
    {
      v5 = 0;
    }
    v6 = *(unsigned int *)(v2 + 64);
    v7 = *(_QWORD *)(v2 + 24);
    memset(v28, 0, sizeof(v28));
    v29 = *(_OWORD *)(v2 + 40);
    v30 = 0u;
    v31 = 0u;
    v8 = re::globalAllocators((re *)result);
    v32 = v8[2];
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v9 = *(_QWORD *)(**(_QWORD **)(v2 + 72) + 24);
    v10 = (re::DrawTable *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 328, 8);
    re::DrawTable::DrawTable(v10, *(re::Allocator **)(**(_QWORD **)(v2 + 72) + 24), (v26 + 127) >> 7);
    re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(v3, v27, v26, *(float32x4_t **)(v2 + 72), (uint64_t)v10, *(unsigned __int8 *)(*(_QWORD *)(v2 + 56) + 64), *(_QWORD *)(v2 + 56), 0, v5);
    *(_BYTE *)(*(_QWORD *)(v2 + 72) + 1512) = 4;
    re::DrawTableSlice::DrawTableSlice(v28, (uint64_t)v10);
    v14[0] = *(_QWORD *)(v2 + 16);
    v14[1] = v28;
    v11 = *(_QWORD *)(v2 + 56);
    v12 = *(_QWORD *)(v11 + 80);
    v14[2] = *(_QWORD *)(v11 + 40);
    v14[3] = v12;
    v14[4] = 0;
    v15 = *(_BYTE *)(v11 + 128);
    v16 = *(_BYTE *)(v2 + 68);
    v17 = 0;
    v18 = *(_BYTE *)(v2 + 69);
    v19 = 0;
    v20 = 0;
    v13 = *(_OWORD *)(v2 + 96);
    v21 = *(_OWORD *)(v2 + 80);
    v22 = v13;
    v23 = v5;
    v24 = 0;
    re::RenderGraphContext::encodeDrawCalls(*(_QWORD *)(v2 + 72), *(_QWORD *)v2, v14);
    *(_BYTE *)(*(_QWORD *)(v2 + 72) + 1512) = 0;
    result = v25;
    if (v25)
    {
      if (v27)
        return (*(uint64_t (**)(void))(*(_QWORD *)v25 + 40))();
    }
  }
  return result;
}

float32x4_t *re::computeMeshSceneBoundingBox@<X0>(float32x4_t *result@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  unint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4.i64[0] = 0x7F0000007FLL;
  v4.i64[1] = 0x7F0000007FLL;
  v19 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  *a3 = v19;
  a3[1] = v4;
  v5.i64[0] = 0x7F0000007FLL;
  v5.i64[1] = 0x7F0000007FLL;
  v18 = v5;
  v6 = result[1].i64[1];
  v20 = *(_OWORD *)v6;
  if (result->i64[1])
  {
    v7 = (uint64_t *)result;
    v8 = 0;
    v9 = a2 + 72;
    v10 = a2 + 8;
    do
    {
      result = (float32x4_t *)re::DataArray<re::MeshInstance>::tryGet(v9, *(_QWORD *)(*v7 + 8 * v8));
      if (result)
      {
        v11 = result;
        result = (float32x4_t *)re::DataArray<re::MeshModel>::tryGet(v10, result[1].i64[0]);
        if (result)
        {
          v12 = *(_QWORD *)(v6 + 24);
          if (v12 <= v8)
          {
            v32 = 0u;
            v33 = 0u;
            v30 = 0u;
            v31 = 0u;
            v29 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v21 = 136315906;
            v22 = "operator[]";
            v23 = 1024;
            v24 = 866;
            v25 = 2048;
            v26 = v8;
            v27 = 2048;
            v28 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v13 = v6 + 40;
          if ((*(_BYTE *)(v6 + 32) & 1) == 0)
            v13 = *(_QWORD *)(v6 + 48);
          result = re::AABB::transform((float32x4_t *)(*(_QWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF7 | (8* (*(_DWORD *)(v13 + 4 * v8) & 1)))+ ((16 * *(unsigned int *)(v13 + 4 * v8)) & 0xFFFFFFFE0)), v11 + 2, (uint64_t)&v29);
          v15 = v18;
          v14 = v19;
          v14.i32[3] = 0;
          v16 = v29;
          v17 = v30;
          v16.i32[3] = 0;
          v15.i32[3] = 0;
          v17.i32[3] = 0;
          v18 = vmaxnmq_f32(v15, v17);
          v19 = vminnmq_f32(v14, v16);
          *a3 = v19;
          a3[1] = v18;
        }
      }
      ++v8;
    }
    while (v8 < v7[1]);
  }
  return result;
}

void re::RenderGraphMPSNodeBase::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_BYTE *)a2 + 593) = 1;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphMPSNodeBase::getCommandBufferWithProtectionOptions@<X0>(re::RenderGraphMPSNodeBase *this@<X0>, re::RenderGraphContext *a2@<X1>, _QWORD *a3@<X8>)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  id v16;

  v6 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104))
                         + 16));
  *a3 = v6;
  v7 = *((_QWORD *)this + 29);
  v8 = 0;
  if (v7)
  {
    v9 = *((_QWORD *)this + 31);
    v10 = v7 << 6;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, v9, 0, 0, &v16);
      v11 = (unint64_t)objc_msgSend(v16, sel_protectionOptions);
      if (v16)

      v8 |= v11;
      v9 += 64;
      v10 -= 64;
    }
    while (v10);
  }
  v12 = *((_QWORD *)this + 19);
  if (v12)
  {
    v13 = *((_QWORD *)this + 21);
    v14 = v12 << 6;
    do
    {
      v8 |= (unint64_t)objc_msgSend(*(id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, v13), sel_protectionOptions);
      v13 += 64;
      v14 -= 64;
    }
    while (v14);
  }
  result = objc_msgSend(v6, "protectionOptions");
  if (result != v8)
    return objc_msgSend(v6, "setProtectionOptions:", v8);
  return result;
}

uint64_t re::RenderGraphMPSNodeBase::getViewports@<X0>(re::RenderGraphContext *a1@<X1>, const unint64_t *a2@<X2>, const unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float *v16;
  uint64_t result;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v10 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)a1 + 146), *(_QWORD *)(*((_QWORD *)a1 + 5) + 48));
  if (v10)
    v11 = *(unsigned __int8 *)(v10 + 64);
  else
    v11 = 1;
  re::FixedArray<re::mtl::Viewport>::init<>(a4, v9, v11);
  re::FixedArray<re::Vector4<float>>::init<>(&v19, v9, v11);
  v12 = re::RenderGraphDataStore::tryGet<re::ViewportData>(*((_QWORD *)a1 + 146), *(_QWORD *)(*((_QWORD *)a1 + 5) + 48));
  re::RenderGraphContext::selectViewport((unint64_t)a1, v12, (uint64_t)a4, (_anonymous_namespace_ *)&v19, 0);
  v13 = a4[1];
  if (v13)
  {
    v14 = (float)*a2;
    v15 = (float)*a3;
    v16 = (float *)(a4[2] + 12);
    do
    {
      if (*(v16 - 1) == 0.0 && *v16 == 0.0)
      {
        *(v16 - 1) = v14;
        *v16 = v15;
      }
      v16 += 6;
      --v13;
    }
    while (v13);
  }
  result = v19;
  if (v19)
    v18 = v20 == 0;
  else
    v18 = 1;
  if (!v18)
    return (*(uint64_t (**)(void))(*(_QWORD *)v19 + 40))();
  return result;
}

uint64_t *re::allocInfo_DefaultDepthFormatData(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_466);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_466))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120D50, 0);
    *(uint64_t *)((char *)&qword_254120D60 + 6) = 0;
    qword_254120D60 = 0;
    qword_254120D70 = 0;
    qword_254120D78 = 0xFFFFFFFFLL;
    qword_254120D50 = (uint64_t)&off_24ED7DAA8;
    qword_254120D80 = (uint64_t)"DefaultDepthFormatData";
    dword_254120D88 = 0;
    xmmword_254120D90 = 0u;
    unk_254120DA0 = 0u;
    xmmword_254120DB0 = 0u;
    qword_254120DC0 = 0;
    __cxa_guard_release(&_MergedGlobals_466);
  }
  return &qword_254120D50;
}

void re::initInfo_DefaultDepthFormatData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xDE1393FAFE3F606;
  v14[1] = "DefaultDepthFormatData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254120CF8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120CF8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254120D20 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::mtl::introspect_PixelFormat((re::mtl *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "format";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254120D28 = v12;
      __cxa_guard_release(&qword_254120CF8);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254120D20;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DefaultDepthFormatData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DefaultDepthFormatData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DefaultDepthFormatData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DefaultDepthFormatData>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::DefaultDepthFormatData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED83F38;
}

_QWORD *re::internal::defaultConstructV2<re::DefaultDepthFormatData>(_QWORD *result)
{
  *result = &off_24ED83F38;
  return result;
}

uint64_t re::introspect_DefaultDepthFormatData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DefaultDepthFormatData", (uint64_t (*)(re::internal *))re::allocInfo_DefaultDepthFormatData, (re::IntrospectionBase *(*)(void))re::initInfo_DefaultDepthFormatData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DefaultDepthFormatData>, this);
}

uint64_t *re::allocInfo_DefaultStencilFormatData(re *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254120D00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254120D00))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120DC8, 0);
    *(uint64_t *)((char *)&qword_254120DD8 + 6) = 0;
    qword_254120DD8 = 0;
    qword_254120DE8 = 0;
    qword_254120DF0 = 0xFFFFFFFFLL;
    qword_254120DC8 = (uint64_t)&off_24ED7DAA8;
    qword_254120DF8 = (uint64_t)"DefaultStencilFormatData";
    dword_254120E00 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_254120E38 = 0;
    __cxa_guard_release(&qword_254120D00);
  }
  return &qword_254120DC8;
}

void re::initInfo_DefaultStencilFormatData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x5D8C4433CA9F5DF8;
  v14[1] = "DefaultStencilFormatData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254120D08);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120D08);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254120D30 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::mtl::introspect_PixelFormat((re::mtl *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "format";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254120D38 = v12;
      __cxa_guard_release(&qword_254120D08);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254120D30;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DefaultStencilFormatData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DefaultStencilFormatData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DefaultStencilFormatData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DefaultStencilFormatData>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::DefaultStencilFormatData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED83F78;
}

_QWORD *re::internal::defaultConstructV2<re::DefaultStencilFormatData>(_QWORD *result)
{
  *result = &off_24ED83F78;
  return result;
}

uint64_t re::introspect_DefaultStencilFormatData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DefaultStencilFormatData", (uint64_t (*)(re::internal *))re::allocInfo_DefaultStencilFormatData, (re::IntrospectionBase *(*)(void))re::initInfo_DefaultStencilFormatData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DefaultStencilFormatData>, this);
}

uint64_t *re::allocInfo_ForceClearData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254120D10);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254120D10))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120E40, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254120E50 = 0;
    qword_254120E60 = 0;
    qword_254120E68 = 0xFFFFFFFFLL;
    qword_254120E40 = (uint64_t)&off_24ED7DAA8;
    qword_254120E70 = (uint64_t)"ForceClearData";
    dword_254120E78 = 0;
    xmmword_254120E80 = 0u;
    unk_254120E90 = 0u;
    xmmword_254120EA0 = 0u;
    qword_254120EB0 = 0;
    __cxa_guard_release(&qword_254120D10);
  }
  return &qword_254120E40;
}

void re::initInfo_ForceClearData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x1E05F5F3774B4A18;
  v14[1] = "ForceClearData";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254120D18);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120D18);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254120D40 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "forceClear";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254120D48 = v12;
      __cxa_guard_release(&qword_254120D18);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254120D40;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ForceClearData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ForceClearData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ForceClearData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ForceClearData>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ForceClearData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED83FB8;
}

_QWORD *re::internal::defaultConstructV2<re::ForceClearData>(_QWORD *result)
{
  *result = &off_24ED83FB8;
  return result;
}

uint64_t re::introspect_ForceClearData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ForceClearData", (uint64_t (*)(re::internal *))re::allocInfo_ForceClearData, (re::IntrospectionBase *(*)(void))re::initInfo_ForceClearData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ForceClearData>, this);
}

void *re::introspect_MPSImageEdgeModeType(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  re::IntrospectionBasic *v16;
  uint64_t v17[2];
  __int128 v18;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Zero";
      re::introspect_MPSImageEdgeModeType(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = 1;
      *(_QWORD *)(v15 + 16) = "Clamp";
      qword_25582AEA0 = v15;
    }
  }
  {
    v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_MPSImageEdgeModeType(BOOL)::info, "MPSImageEdgeModeType", 1, 1, 1, 1);
    *(_QWORD *)v16 = &off_24ED7D9E8;
    *((_QWORD *)v16 + 8) = &re::introspect_MPSImageEdgeModeType(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_MPSImageEdgeModeType(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_MPSImageEdgeModeType(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    v5 = re::introspect_MPSImageEdgeModeType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if ((v5 & 1) != 0)
      return &re::introspect_MPSImageEdgeModeType(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_MPSImageEdgeModeType(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_MPSImageEdgeModeType(BOOL)::info;
    }
  }
  re::introspect_MPSImageEdgeModeType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_MPSImageEdgeModeType(BOOL)::info, a2);
  v17[0] = 0xD4663F6F4305B84ALL;
  v17[1] = (uint64_t)"MPSImageEdgeModeType";
  xmmword_25582AED0 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_MPSImageEdgeModeType(BOOL)::info;
}

void re::RenderGraphResolveNode::configure(re::RenderGraphResolveNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v8;
  unint64_t v9;

  if (*((_QWORD *)this + 29))
  {
    v8 = 0;
    v9 = 0;
    while (*(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)a4 + 3448), (uint64_t *)(*((_QWORD *)this + 31) + v8))+ 80) == -1)
    {
      ++v9;
      v8 += 64;
      if (*((_QWORD *)this + 29) <= v9)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    *((_BYTE *)this + 64) = 0;
  }
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

uint64_t *re::allocInfo_RenderGraphResolveNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_467);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_467))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120ED0, 0);
    *(uint64_t *)((char *)&qword_254120EE0 + 6) = 0;
    qword_254120EE0 = 0;
    qword_254120EF0 = 0;
    qword_254120EF8 = 0xFFFFFFFFLL;
    qword_254120ED0 = (uint64_t)&off_24ED7DAA8;
    qword_254120F00 = (uint64_t)"RenderGraphResolveNode";
    dword_254120F08 = 0;
    *(_OWORD *)&algn_254120F0C[4] = 0u;
    *(_OWORD *)&algn_254120F0C[20] = 0u;
    *(_OWORD *)&algn_254120F0C[36] = 0u;
    qword_254120F40 = 0;
    __cxa_guard_release(&_MergedGlobals_467);
  }
  return &qword_254120ED0;
}

void re::initInfo_RenderGraphResolveNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xB3098F95BFEF7B6CLL;
  v10[1] = "RenderGraphResolveNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254120EC8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120EC8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254120EC0 = v8;
      __cxa_guard_release(&qword_254120EC8);
    }
  }
  *((_QWORD *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254120EC0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphResolveNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphResolveNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphResolveNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphResolveNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphResolveNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED86D98;
  *((_BYTE *)result + 66) = 1;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphResolveNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphResolveNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED86D98;
  *((_BYTE *)result + 66) = 1;
  return result;
}

uint64_t re::introspect_RenderGraphResolveNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphResolveNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphResolveNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphResolveNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphResolveNode>, this);
}

void re::RenderGraphResolveNode::~RenderGraphResolveNode(re::RenderGraphResolveNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::ARSegmentationExecuteData::~ARSegmentationExecuteData(re::ARSegmentationExecuteData *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {

    *((_QWORD *)this + 4) = 0;
  }

}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {

    *((_QWORD *)this + 4) = 0;
  }

  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE";
  if (((unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphAREmitter::fillDataStoreAndEmitGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, char *a7)
{
  unsigned __int8 v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unsigned __int8 v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  int v46;
  unint64_t v47;
  int v48;
  size_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  unsigned __int8 v67;
  unint64_t v68;
  const char *v69;
  size_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  unint64_t v76;
  const char *v77;
  size_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  const char *v88;
  re *v89;
  const char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE v103[8];
  __int128 v104;
  __int128 v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v13 = atomic_load((unsigned __int8 *)&qword_254120F78);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254120F78))
  {
    qword_254120F70 = re::hashString((re *)"ARSegmentationData", v88);
    __cxa_guard_release(&qword_254120F78);
  }
  v14 = qword_254120F70;
  v15 = strlen(*(const char **)(a5 + 56));
  v16 = 0x9E3779B97F4A7C17;
  if (v15)
  {
    MurmurHash3_x64_128(*(_QWORD *)(a5 + 56), v15, 0, (unint64_t *)&v110);
    v16 = ((*((_QWORD *)&v110 + 1) - 0x61C8864680B583E9 + ((_QWORD)v110 << 6) + ((unint64_t)v110 >> 2)) ^ v110)
        - 0x61C8864680B583E9;
  }
  v17 = re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(a3 + 32, ((v14 >> 2) + (v14 << 6) + v16) ^ v14);
  re::createARSegmentationGenerateGuideData(a3, a5, (uint64_t)v103);
  if (v17)
    re::ARSegmentationEmitterCache::applyCachedDataToGraph(*(void ***)(a1 + 1824), (const re::ARSegmentationConnectionData *)v103, (id **)a3, a6);
  v18 = strlen(a6);
  if (v18)
  {
    MurmurHash3_x64_128((uint64_t)a6, v18, 0, (unint64_t *)&v110);
    v19 = (*((_QWORD *)&v110 + 1) - 0x61C8864680B583E9 + ((_QWORD)v110 << 6) + ((unint64_t)v110 >> 2)) ^ v110;
  }
  else
  {
    v19 = 0;
  }
  v20 = strlen(a7);
  if (v20)
  {
    MurmurHash3_x64_128((uint64_t)a7, v20, 0, (unint64_t *)&v110);
    v21 = (*((_QWORD *)&v110 + 1) - 0x61C8864680B583E9 + ((_QWORD)v110 << 6) + ((unint64_t)v110 >> 2)) ^ v110;
  }
  else
  {
    v21 = 0;
  }
  v22 = v19 - 0x61C8864680B583E9;
  v107 = 0;
  v108 = 0;
  v23 = atomic_load((unsigned __int8 *)&qword_254121058);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254121058))
  {
    qword_254121050 = re::introspect_ARSegmentationConnectionData(0);
    __cxa_guard_release(&qword_254121058);
  }
  v107 = qword_254121050;
  v24 = strlen(*(const char **)(qword_254121050 + 48));
  if (v24)
  {
    MurmurHash3_x64_128(*(_QWORD *)(qword_254121050 + 48), v24, 0, (unint64_t *)&v110);
    v25 = (*((_QWORD *)&v110 + 1) - 0x61C8864680B583E9 + ((_QWORD)v110 << 6) + ((unint64_t)v110 >> 2)) ^ v110;
  }
  else
  {
    v25 = 0;
  }
  v108 = v25;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a4 + 176, &v108, &v107);
  v100 = (v22 + (v21 << 6) + (v21 >> 2)) ^ v21;
  v26 = (v100 - 0x61C8864680B583E9 + (v108 << 6) + (v108 >> 2)) ^ v108;
  v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 48, 8);
  *(_DWORD *)(v27 + 40) = v106;
  *(_OWORD *)(v27 + 24) = v105;
  *(_OWORD *)(v27 + 8) = v104;
  v28 = *(_QWORD *)(a4 + 64);
  v99 = a4 + 64;
  *(_QWORD *)v27 = &off_24ED82988;
  if (v28)
  {
    v28 = v26 % *(unsigned int *)(a4 + 88);
    v29 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v28);
    if ((_DWORD)v29 != 0x7FFFFFFF)
    {
      v51 = *(_QWORD *)(a4 + 80);
      if (*(_QWORD *)(v51 + 24 * v29 + 8) == v26)
        goto LABEL_24;
      while (1)
      {
        LODWORD(v29) = *(_DWORD *)(v51 + 24 * v29) & 0x7FFFFFFF;
        if ((_DWORD)v29 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v51 + 24 * v29 + 8) == v26)
          goto LABEL_24;
      }
    }
  }
  v30 = *(unsigned int *)(a4 + 100);
  if ((_DWORD)v30 == 0x7FFFFFFF)
  {
    v30 = *(unsigned int *)(a4 + 96);
    v31 = v30;
    if ((_DWORD)v30 == *(_DWORD *)(a4 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v99, 2 * *(_DWORD *)(a4 + 92));
      LODWORD(v28) = v26 % *(unsigned int *)(a4 + 88);
      v31 = *(_DWORD *)(a4 + 96);
    }
    *(_DWORD *)(a4 + 96) = v31 + 1;
    v32 = *(_QWORD *)(a4 + 80);
    v33 = *(_DWORD *)(v32 + 24 * v30);
  }
  else
  {
    v32 = *(_QWORD *)(a4 + 80);
    v33 = *(_DWORD *)(v32 + 24 * v30);
    *(_DWORD *)(a4 + 100) = v33 & 0x7FFFFFFF;
  }
  v34 = 24 * v30;
  *(_DWORD *)(v32 + v34) = v33 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a4 + 80) + v34) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v30) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v28);
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v30 + 8) = v26;
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v30 + 16) = v27;
  *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v28) = v30;
  ++*(_DWORD *)(a4 + 92);
  ++*(_DWORD *)(a4 + 104);
LABEL_24:
  v35 = atomic_load((unsigned __int8 *)&qword_254120F88);
  if ((v35 & 1) == 0)
  {
    v89 = (re *)__cxa_guard_acquire(&qword_254120F88);
    if ((_DWORD)v89)
    {
      qword_254120F80 = re::getCombinedScopeHash(v89, v90, v91);
      __cxa_guard_release(&qword_254120F88);
    }
  }
  v101 = a5;
  v36 = re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(a4, qword_254120F80);
  if (!v36)
  {
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    *(_QWORD *)(a1 + 1664) = 0;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1672), (void **)&v110 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1680), (void **)&v111);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1688), (void **)&v111 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1696), (void **)&v112);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1704), (void **)&v112 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1712), (void **)&v113);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1720), (void **)&v113 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1728), (void **)&v114);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1736), (void **)&v114 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1744), (void **)&v115);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1752), (void **)&v115 + 1);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1760), (void **)&v116);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1768), (void **)&v116 + 1);
    re::ObjCObject::operator=((id *)(a1 + 1776), (id *)&v117);
    re::ObjCObject::operator=((id *)(a1 + 1784), (id *)&v117 + 1);
    re::ObjCObject::operator=((id *)(a1 + 1792), (id *)&v118);
    re::ObjCObject::operator=((id *)(a1 + 1800), (id *)&v118 + 1);
    re::ObjCObject::operator=((id *)(a1 + 1808), (id *)&v119);
    re::ObjCObject::operator=((id *)(a1 + 1816), (id *)&v119 + 1);
    re::GuidedFilterOcclusionStateData::~GuidedFilterOcclusionStateData((id *)&v110);
    goto LABEL_49;
  }
  v37 = v36;
  v97 = a7;
  v98 = a3;
  v38 = a6;
  v39 = atomic_load((unsigned __int8 *)&qword_254120F98);
  if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254120F98))
  {
    qword_254120F90 = re::hashString((re *)"GuidedFilterOcclusion", v93);
    __cxa_guard_release(&qword_254120F98);
  }
  v40 = *(_QWORD *)(v37 + 168);
  v41 = *(_DWORD *)(v37 + 116);
  v42 = *(_QWORD *)(v37 + 176);
  v96 = *(_QWORD *)(v37 + 176);
  v43 = qword_254120F90;
  v95 = *(_QWORD *)(v37 + 160);
  v44 = v22 + (v43 << 6) + (v43 >> 2);
  v107 = 0;
  v108 = 0;
  v45 = atomic_load((unsigned __int8 *)&qword_254121068);
  if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254121068))
  {
    qword_254121060 = re::introspect_SceneUnderstandingGuidedFilterOcclusionConnectionData(0);
    __cxa_guard_release(&qword_254121068);
  }
  v46 = v42 / v41;
  v47 = v44 ^ v43;
  v107 = qword_254121060;
  v48 = HIDWORD(v96) / v41;
  v49 = strlen(*(const char **)(qword_254121060 + 48));
  if (v49)
  {
    MurmurHash3_x64_128(*(_QWORD *)(qword_254121060 + 48), v49, 0, (unint64_t *)&v110);
    v50 = (*((_QWORD *)&v110 + 1) - 0x61C8864680B583E9 + ((_QWORD)v110 << 6) + ((unint64_t)v110 >> 2)) ^ v110;
  }
  else
  {
    v50 = 0;
  }
  a6 = v38;
  a7 = v97;
  v108 = v50;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a4 + 176, &v108, &v107);
  v52 = (v47 - 0x61C8864680B583E9 + (v108 << 6) + (v108 >> 2)) ^ v108;
  v53 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 40, 8);
  *(_QWORD *)&v54 = v96;
  *((_QWORD *)&v54 + 1) = v95;
  *(_QWORD *)v53 = &off_24ED86F78;
  *(_OWORD *)(v53 + 8) = v54;
  *(_QWORD *)(v53 + 24) = v40;
  *(_DWORD *)(v53 + 32) = v46;
  *(_DWORD *)(v53 + 36) = v48;
  v55 = *(_QWORD *)(a4 + 64);
  if (v55)
  {
    v55 = v52 % *(unsigned int *)(a4 + 88);
    v56 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v55);
    a3 = v98;
    if ((_DWORD)v56 != 0x7FFFFFFF)
    {
      v57 = *(_QWORD *)(a4 + 80);
      if (*(_QWORD *)(v57 + 24 * v56 + 8) == v52)
        goto LABEL_49;
      while (1)
      {
        LODWORD(v56) = *(_DWORD *)(v57 + 24 * v56) & 0x7FFFFFFF;
        if ((_DWORD)v56 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v57 + 24 * v56 + 8) == v52)
          goto LABEL_49;
      }
    }
  }
  else
  {
    a3 = v98;
  }
  v58 = *(unsigned int *)(a4 + 100);
  if ((_DWORD)v58 == 0x7FFFFFFF)
  {
    v58 = *(unsigned int *)(a4 + 96);
    v59 = v58;
    if ((_DWORD)v58 == *(_DWORD *)(a4 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v99, 2 * *(_DWORD *)(a4 + 92));
      LODWORD(v55) = v52 % *(unsigned int *)(a4 + 88);
      v59 = *(_DWORD *)(a4 + 96);
    }
    *(_DWORD *)(a4 + 96) = v59 + 1;
    v60 = *(_QWORD *)(a4 + 80);
    v61 = *(_DWORD *)(v60 + 24 * v58);
  }
  else
  {
    v60 = *(_QWORD *)(a4 + 80);
    v61 = *(_DWORD *)(v60 + 24 * v58);
    *(_DWORD *)(a4 + 100) = v61 & 0x7FFFFFFF;
  }
  v62 = 24 * v58;
  *(_DWORD *)(v60 + v62) = v61 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a4 + 80) + v62) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v58) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v55);
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v58 + 8) = v52;
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v58 + 16) = v53;
  *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v55) = v58;
  ++*(_DWORD *)(a4 + 92);
  ++*(_DWORD *)(a4 + 104);
LABEL_49:
  *(_QWORD *)&v110 = &off_24ED83F38;
  DWORD2(v110) = *(_DWORD *)(a1 + 1136);
  re::RenderGraphDataStore::add<re::DefaultDepthFormatData,re::DefaultDepthFormatData&>(a4, v100, (uint64_t)&v110);
  *(_QWORD *)&v110 = &off_24ED83F78;
  DWORD2(v110) = *(_DWORD *)(a1 + 1140);
  re::RenderGraphDataStore::add<re::DefaultStencilFormatData,re::DefaultStencilFormatData&>(a4, v100, (uint64_t)&v110);
  *(_QWORD *)&v112 = 0;
  *(_QWORD *)&v111 = 0;
  v110 = 0uLL;
  DWORD2(v111) = 0;
  if (!*(_BYTE *)(a3 + 424))
  {
    re::CameraView::registerFileProviders(a7, a2, *(re::RenderGraphManager **)a3, v101, (uint64_t)&v108);
    re::DynamicArray<re::ProviderHandle>::operator=((uint64_t)&v110, (uint64_t)&v108);
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v108);
  }
  v63 = *(_QWORD *)(a1 + 1648);
  if (v63)
  {
    *(_BYTE *)(v63 + 40) = *(_BYTE *)(a1 + 1164);
    v64 = *(_OWORD *)(a1 + 1176);
    *(_QWORD *)(v63 + 60) = *(_QWORD *)(a1 + 1192);
    *(_OWORD *)(v63 + 44) = v64;
    v65 = *(_QWORD *)(a1 + 1648);
    *(_DWORD *)(v65 + 68) = *(_DWORD *)(a1 + 1200);
    re::AssetHandle::operator=((uint64_t *)(v65 + 72), (uint64_t *)(a1 + 1064));
    re::AssetHandle::operator=((uint64_t *)(*(_QWORD *)(a1 + 1648) + 96), (uint64_t *)(a1 + 1088));
    re::AssetHandle::operator=((uint64_t *)(*(_QWORD *)(a1 + 1648) + 120), (uint64_t *)(a1 + 1112));
  }
  v66 = *(unsigned __int8 *)(a2 + 350);
  v67 = atomic_load((unsigned __int8 *)&qword_254120FA8);
  if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_254120FA8))
  {
    qword_254120FA0 = re::hashString((re *)"DynamicFunctionConstants", v92);
    __cxa_guard_release(&qword_254120FA8);
  }
  if (v66)
  {
    v68 = qword_254120FA0;
    if ((*(_QWORD *)(a2 + 8) & 1) != 0)
      v69 = *(const char **)(a2 + 16);
    else
      v69 = (const char *)(a2 + 9);
    v70 = strlen(v69);
    v71 = 0x9E3779B97F4A7C17;
    if (v70)
    {
      MurmurHash3_x64_128((uint64_t)v69, v70, 0, &v108);
      v71 = ((v109 - 0x61C8864680B583E9 + (v108 << 6) + (v108 >> 2)) ^ v108) - 0x61C8864680B583E9;
    }
    v72 = ((v68 >> 2) + (v68 << 6) + v71) ^ v68;
    v73 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a4, v72);
    if (!v73)
    {
      v108 = *(_QWORD *)(a3 + 376);
      LODWORD(v107) = 7;
      v73 = re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(a4, v72, (uint64_t *)&v108, (int *)&v107);
    }
    if (*(_BYTE *)(a2 + 350))
    {
      v74 = atomic_load((unsigned __int8 *)&qword_254120FB8);
      if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_254120FB8))
      {
        qword_254120FB0 = re::hashString((re *)"EnableUserEnvironment", v94);
        __cxa_guard_release(&qword_254120FB8);
      }
      LODWORD(v108) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v73 + 8), &qword_254120FB0, (int *)&v108);
    }
  }
  v75 = *(_QWORD *)(v101 + 320);
  if (v75 && *(_QWORD *)(v75 + 40))
  {
    v76 = qword_254120FA0;
    if ((*(_QWORD *)(a2 + 8) & 1) != 0)
      v77 = *(const char **)(a2 + 16);
    else
      v77 = (const char *)(a2 + 9);
    v78 = strlen(v77);
    v79 = 0x9E3779B97F4A7C17;
    if (v78)
    {
      MurmurHash3_x64_128((uint64_t)v77, v78, 0, &v108);
      v79 = ((v109 - 0x61C8864680B583E9 + (v108 << 6) + (v108 >> 2)) ^ v108) - 0x61C8864680B583E9;
    }
    v80 = ((v76 >> 2) + (v76 << 6) + v79) ^ v76;
    if (!re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a4, v80))
    {
      v81 = *(_QWORD *)(a3 + 376);
      v82 = (unint64_t)"N2re28DynamicFunctionConstantsDataE";
      if (((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x8000000000000000) != 0)
      {
        v83 = (unsigned __int8 *)((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x7FFFFFFFFFFFFFFFLL);
        v84 = 5381;
        do
        {
          v82 = v84;
          v85 = *v83++;
          v84 = (33 * v84) ^ v85;
        }
        while (v85);
      }
      v108 = (v80 - 0x61C8864680B583E9 + (v82 << 6) + (v82 >> 2)) ^ v82;
      v86 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 72, 8);
      *(_QWORD *)v86 = &off_24ED83E30;
      *(_OWORD *)(v86 + 8) = 0u;
      *(_OWORD *)(v86 + 24) = 0u;
      *(_OWORD *)(v86 + 40) = 0u;
      *(_QWORD *)(v86 + 56) = 0;
      *(_QWORD *)(v86 + 64) = v81;
      v107 = v86;
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v99, &v108, &v107);
    }
  }
  re::RenderFrame::emitGraph((re::RenderFrame *)a3, a7, a6);
  re::CameraView::unregisterFileProviders(*(_QWORD *)a3, (uint64_t)&v110);
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v110);
}

void re::RenderGraphAREmitter::~RenderGraphAREmitter(re::RenderGraphAREmitter *this)
{
  void *v2;
  uint64_t v3;

  re::RenderGraphAREmitter::unregisterProviders(this, *((re::RenderGraphManager **)this + 151));
  v2 = (void *)*((_QWORD *)this + 230);
  if (v2)
  {

    *((_QWORD *)this + 230) = 0;
  }

  v3 = *((_QWORD *)this + 228);
  if (v3)
  {

    *((_QWORD *)this + 228) = 0;
  }
  re::GuidedFilterOcclusionStateData::~GuidedFilterOcclusionStateData((id *)this + 208);
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1624));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1600));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1576));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1552));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1528));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1504));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1480));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1456));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1432));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1408));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1384));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1360));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1336));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1312));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1288));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1264));
  re::StringID::destroyString((re::RenderGraphAREmitter *)((char *)this + 1240));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1216));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1112));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1088));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1064));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1032));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 1008));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 984));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 960));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 936));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 912));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 888));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 864));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 840));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 816));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 792));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 768));
  re::AssetHandle::~AssetHandle((re::RenderGraphAREmitter *)((char *)this + 744));
  re::RealityEmitterBase::~RealityEmitterBase(this);
}

{
  re::RenderGraphAREmitter::~RenderGraphAREmitter(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphAREmitter::unregisterProviders(re::RenderGraphAREmitter *this, re::RenderGraphManager *a2)
{
  void *v4;
  _QWORD v5[3];
  _BYTE v6[16];
  uint64_t v7;
  _BYTE v8[16];
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;

  re::RealityEmitterBase::unregisterCommonProviders(this, a2);
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1240)))
  {
    re::StringID::StringID((re::StringID *)v30, (const StringID *)((char *)this + 1240));
    v31 = *((_QWORD *)this + 157);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v30);
    re::StringID::destroyString((re::StringID *)v30);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1240));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1408)))
  {
    re::StringID::StringID((re::StringID *)v28, (const StringID *)this + 88);
    v29 = *((_QWORD *)this + 178);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v28);
    re::StringID::destroyString((re::StringID *)v28);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1408));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1432)))
  {
    re::StringID::StringID((re::StringID *)v26, (const StringID *)((char *)this + 1432));
    v27 = *((_QWORD *)this + 181);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v26);
    re::StringID::destroyString((re::StringID *)v26);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1432));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1288)))
  {
    re::StringID::StringID((re::StringID *)v24, (const StringID *)((char *)this + 1288));
    v25 = *((_QWORD *)this + 163);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v24);
    re::StringID::destroyString((re::StringID *)v24);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1288));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1312)))
  {
    re::StringID::StringID((re::StringID *)v22, (const StringID *)this + 82);
    v23 = *((_QWORD *)this + 166);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v22);
    re::StringID::destroyString((re::StringID *)v22);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1312));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1336)))
  {
    re::StringID::StringID((re::StringID *)v20, (const StringID *)((char *)this + 1336));
    v21 = *((_QWORD *)this + 169);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v20);
    re::StringID::destroyString((re::StringID *)v20);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1336));
  }
  v4 = (void *)*((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;

  *((_OWORD *)this + 115) = 0u;
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1504)))
  {
    re::StringID::StringID((re::StringID *)v18, (const StringID *)this + 94);
    v19 = *((_QWORD *)this + 190);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v18);
    re::StringID::destroyString((re::StringID *)v18);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1504));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1528)))
  {
    re::StringID::StringID((re::StringID *)v16, (const StringID *)((char *)this + 1528));
    v17 = *((_QWORD *)this + 193);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v16);
    re::StringID::destroyString((re::StringID *)v16);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1528));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1456)))
  {
    re::StringID::StringID((re::StringID *)v14, (const StringID *)this + 91);
    v15 = *((_QWORD *)this + 184);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v14);
    re::StringID::destroyString((re::StringID *)v14);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1456));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1480)))
  {
    re::StringID::StringID((re::StringID *)v12, (const StringID *)((char *)this + 1480));
    v13 = *((_QWORD *)this + 187);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v12);
    re::StringID::destroyString((re::StringID *)v12);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1480));
  }
  if (*((_BYTE *)this + 1204) && re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1552)))
  {
    re::StringID::StringID((re::StringID *)v10, (const StringID *)this + 97);
    v11 = *((_QWORD *)this + 196);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v10);
    re::StringID::destroyString((re::StringID *)v10);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1552));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1360)))
  {
    re::StringID::StringID((re::StringID *)v8, (const StringID *)this + 85);
    v9 = *((_QWORD *)this + 172);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v8);
    re::StringID::destroyString((re::StringID *)v8);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1360));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1384)))
  {
    re::StringID::StringID((re::StringID *)v6, (const StringID *)((char *)this + 1384));
    v7 = *((_QWORD *)this + 175);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v6);
    re::StringID::destroyString((re::StringID *)v6);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1384));
  }
  if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1624)))
  {
    re::StringID::StringID((re::StringID *)v5, (const StringID *)((char *)this + 1624));
    v5[2] = *((_QWORD *)this + 205);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v5);
    re::StringID::destroyString((re::StringID *)v5);
    re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1624));
  }
  *((_QWORD *)this + 206) = 0;
  re::ARSegmentationEmitterCache::unregisterRenderGraphProvider(*((re::ARSegmentationEmitterCache **)this + 228), a2);
}

re::RenderGraphAREmitter *re::RenderGraphAREmitter::RenderGraphAREmitter(re::RenderGraphAREmitter *this)
{
  char *v2;
  re::RealityEmitterBase *v3;
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (char *)this + 1165;
  v3 = re::RealityEmitterBase::RealityEmitterBase(this);
  *(_QWORD *)v3 = &off_24ED86E40;
  *(_OWORD *)((char *)v3 + 744) = 0u;
  *(_OWORD *)((char *)v3 + 760) = 0u;
  *(_OWORD *)((char *)v3 + 776) = 0u;
  *(_OWORD *)((char *)v3 + 792) = 0u;
  *(_OWORD *)((char *)v3 + 808) = 0u;
  *(_OWORD *)((char *)v3 + 824) = 0u;
  *(_OWORD *)((char *)v3 + 840) = 0u;
  *(_OWORD *)((char *)v3 + 856) = 0u;
  *(_OWORD *)((char *)v3 + 872) = 0u;
  *(_OWORD *)((char *)v3 + 888) = 0u;
  *(_OWORD *)((char *)v3 + 904) = 0u;
  *(_OWORD *)((char *)v3 + 920) = 0u;
  *(_OWORD *)((char *)v3 + 936) = 0u;
  *(_OWORD *)((char *)v3 + 952) = 0u;
  *(_OWORD *)((char *)v3 + 968) = 0u;
  *(_OWORD *)((char *)v3 + 984) = 0u;
  *(_OWORD *)((char *)v3 + 1000) = 0u;
  *(_OWORD *)((char *)v3 + 1016) = 0u;
  *(_OWORD *)((char *)v3 + 1032) = 0u;
  *((_QWORD *)v3 + 131) = 0;
  *((_DWORD *)v3 + 264) = 1;
  *(_OWORD *)((char *)v3 + 1064) = 0u;
  *(_OWORD *)((char *)v3 + 1080) = 0u;
  *(_OWORD *)((char *)v3 + 1096) = 0u;
  *(_OWORD *)((char *)v3 + 1112) = 0u;
  *((_QWORD *)v3 + 141) = 0;
  *((_OWORD *)v3 + 71) = xmmword_22619BB40;
  *((_QWORD *)v3 + 144) = 0x4280000000000008;
  *((_DWORD *)v3 + 290) = 32;
  *((_BYTE *)v3 + 1164) = 0;
  *(_DWORD *)v2 = 16843009;
  *((_DWORD *)v2 + 1) = 0x1000000;
  *(_OWORD *)(v2 + 11) = xmmword_2261998E0;
  *((_WORD *)v3 + 596) = 0;
  *(_DWORD *)(v2 + 29) = 16843009;
  *((_WORD *)v3 + 599) = 256;
  *((_DWORD *)v3 + 300) = 1065353216;
  *((_BYTE *)v3 + 1204) = 1;
  *((_QWORD *)v3 + 154) = 0;
  *((_OWORD *)v3 + 76) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)v3 + 1240));
  *((_QWORD *)this + 157) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1264));
  *((_QWORD *)this + 160) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1288));
  *((_QWORD *)this + 163) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1312));
  *((_QWORD *)this + 166) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1336));
  *((_QWORD *)this + 169) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1360));
  *((_QWORD *)this + 172) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1384));
  *((_QWORD *)this + 175) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1408));
  *((_QWORD *)this + 178) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1432));
  *((_QWORD *)this + 181) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1456));
  *((_QWORD *)this + 184) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1480));
  *((_QWORD *)this + 187) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1504));
  *((_QWORD *)this + 190) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1528));
  *((_QWORD *)this + 193) = 0;
  re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1552));
  *((_QWORD *)this + 202) = 0;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 98) = 0u;
  v4 = re::StringID::invalid((re::RenderGraphAREmitter *)((char *)this + 1624));
  *((_QWORD *)this + 206) = 0;
  *((_QWORD *)this + 205) = 0;
  *((_BYTE *)this + 1656) = *((_BYTE *)this + 1172);
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *((_OWORD *)this + 110) = 0u;
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 112) = 0u;
  *((_OWORD *)this + 113) = 0u;
  *((_OWORD *)this + 114) = 0u;
  *((_OWORD *)this + 115) = 0u;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 88, 8);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v6, 0);
  *(_QWORD *)v6 = &off_24ED86F30;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_QWORD *)(v6 + 56) = 0;
  re::StringID::invalid((re::StringID *)(v6 + 64));
  *(_QWORD *)(v6 + 80) = 0;
  v7 = *((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = v6;
  if (v7)

  return this;
}

void re::RenderGraphAREmitter::afterPrepareSceneContextHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  unsigned __int8 v10;
  unint64_t v11;
  re *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void **v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  _BYTE *v52;
  int v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unsigned __int8 v61;
  char v62;
  char v63;
  unsigned __int8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  re::RenderGraphFile *v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  id v72;
  id v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unsigned __int8 v78;
  uint64_t v79;
  unint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int16 v89;
  __int128 v90;
  __int128 v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE v101[48];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int16 v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD **)(a4 + 328);
  if (v9)
  {
    v10 = atomic_load((unsigned __int8 *)&qword_254120F58);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254120F58))
    {
      MurmurHash3_x64_128((uint64_t)"ARSegmentationData", 18, 0, (unint64_t *)v101);
      qword_254120F50 = (*(_QWORD *)&v101[8] - 0x61C8864680B583E9 + (*(_QWORD *)v101 << 6) + (*(_QWORD *)v101 >> 2)) ^ *(_QWORD *)v101;
      __cxa_guard_release(&qword_254120F58);
    }
    v11 = qword_254120F50;
    v12 = (re *)strlen(*(const char **)(a4 + 56));
    if (v12)
    {
      v12 = (re *)MurmurHash3_x64_128(*(_QWORD *)(a4 + 56), (int)v12, 0, (unint64_t *)v101);
      v13 = ((*(_QWORD *)&v101[8] - 0x61C8864680B583E9 + (*(_QWORD *)v101 << 6) + (*(_QWORD *)v101 >> 2)) ^ *(_QWORD *)v101)
          - 0x61C8864680B583E9;
    }
    else
    {
      v13 = 0x9E3779B97F4A7C17;
    }
    v14 = ((v11 >> 2) + (v11 << 6) + v13) ^ v11;
    v15 = (unint64_t)"N2re23ARSegmentationInputDataE";
    if (((unint64_t)"N2re23ARSegmentationInputDataE" & 0x8000000000000000) != 0)
    {
      v16 = (unsigned __int8 *)((unint64_t)"N2re23ARSegmentationInputDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v17 = 5381;
      do
      {
        v15 = v17;
        v18 = *v16++;
        v17 = (33 * v17) ^ v18;
      }
      while (v18);
    }
    v19 = v14 - 0x61C8864680B583E9;
    v20 = (v14 - 0x61C8864680B583E9 + (v15 << 6) + (v15 >> 2)) ^ v15;
    v21 = re::globalAllocators(v12);
    v22 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 40, 8);
    v24 = (unint64_t *)(a5 + 16);
    v23 = *(_QWORD *)(a5 + 16);
    *v22 = &off_24ED5F058;
    v22[1] = v9[1];
    v9[1] = 0;
    v22[2] = v9[2];
    v9[2] = 0;
    v22[3] = v9[3];
    v9[3] = 0;
    v22[4] = v9[4];
    v9[4] = 0;
    if (v23)
    {
      v23 = v20 % *(unsigned int *)(a5 + 40);
      v25 = *(unsigned int *)(*(_QWORD *)(a5 + 24) + 4 * v23);
      if ((_DWORD)v25 != 0x7FFFFFFF)
      {
        v47 = *(_QWORD *)(a5 + 32);
        if (*(_QWORD *)(v47 + 24 * v25 + 8) == v20)
          goto LABEL_17;
        while (1)
        {
          LODWORD(v25) = *(_DWORD *)(v47 + 24 * v25) & 0x7FFFFFFF;
          if ((_DWORD)v25 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v47 + 24 * v25 + 8) == v20)
            goto LABEL_17;
        }
      }
    }
    v26 = *(unsigned int *)(a5 + 52);
    if ((_DWORD)v26 == 0x7FFFFFFF)
    {
      v26 = *(unsigned int *)(a5 + 48);
      v27 = v26;
      if ((_DWORD)v26 == *(_DWORD *)(a5 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a5 + 16, 2 * *(_DWORD *)(a5 + 44));
        LODWORD(v23) = v20 % *(unsigned int *)(a5 + 40);
        v27 = *(_DWORD *)(a5 + 48);
      }
      *(_DWORD *)(a5 + 48) = v27 + 1;
      v28 = *(_QWORD *)(a5 + 32);
      v29 = *(_DWORD *)(v28 + 24 * v26);
    }
    else
    {
      v28 = *(_QWORD *)(a5 + 32);
      v29 = *(_DWORD *)(v28 + 24 * v26);
      *(_DWORD *)(a5 + 52) = v29 & 0x7FFFFFFF;
    }
    v30 = 24 * v26;
    *(_DWORD *)(v28 + v30) = v29 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a5 + 32) + v30) = *(_DWORD *)(*(_QWORD *)(a5 + 32) + 24 * v26) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v23);
    *(_QWORD *)(*(_QWORD *)(a5 + 32) + 24 * v26 + 8) = v20;
    *(_QWORD *)(*(_QWORD *)(a5 + 32) + 24 * v26 + 16) = v22;
    *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v23) = v26;
    ++*(_DWORD *)(a5 + 44);
    ++*(_DWORD *)(a5 + 56);
LABEL_17:
    *(_QWORD *)v101 = &off_24ED86EF0;
    *(_QWORD *)&v101[32] = 0;
    *(_DWORD *)&v101[8] = 3;
    *(_OWORD *)&v101[16] = 0x3F800000uLL;
    re::ObjCObject::operator=((id *)&v101[24], (id *)(a1 + 1832));
    v31 = NS::SharedPtr<MTL::Texture>::operator=((void **)&v101[32], (void **)(a1 + 1840));
    *(_QWORD *)&v101[40] = a1 + 1848;
    v32 = (unint64_t)"N2re25ARSegmentationExecuteDataE";
    if (((unint64_t)"N2re25ARSegmentationExecuteDataE" & 0x8000000000000000) != 0)
    {
      v33 = (unsigned __int8 *)((unint64_t)"N2re25ARSegmentationExecuteDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v34 = 5381;
      do
      {
        v32 = v34;
        v35 = *v33++;
        v34 = (33 * v34) ^ v35;
      }
      while (v35);
    }
    v36 = (v19 + (v32 << 6) + (v32 >> 2)) ^ v32;
    v37 = re::globalAllocators((re *)v31);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37[2] + 32))(v37[2], 48, 8);
    *(_QWORD *)v38 = &off_24ED86EF0;
    *(_OWORD *)(v38 + 8) = *(_OWORD *)&v101[8];
    v39 = *(_OWORD *)&v101[24];
    *(_QWORD *)&v101[24] = 0;
    *(_OWORD *)(v38 + 24) = v39;
    *(_QWORD *)&v101[32] = 0;
    *(_QWORD *)(v38 + 40) = *(_QWORD *)&v101[40];
    v40 = *v24;
    if (*v24)
    {
      v40 = v36 % *(unsigned int *)(a5 + 40);
      v41 = *(unsigned int *)(*(_QWORD *)(a5 + 24) + 4 * v40);
      if ((_DWORD)v41 != 0x7FFFFFFF)
      {
        v48 = *(_QWORD *)(a5 + 32);
        if (*(_QWORD *)(v48 + 24 * v41 + 8) == v36)
        {
LABEL_36:

          goto LABEL_37;
        }
        while (1)
        {
          LODWORD(v41) = *(_DWORD *)(v48 + 24 * v41) & 0x7FFFFFFF;
          if ((_DWORD)v41 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v48 + 24 * v41 + 8) == v36)
            goto LABEL_36;
        }
      }
    }
    v42 = *(unsigned int *)(a5 + 52);
    if ((_DWORD)v42 == 0x7FFFFFFF)
    {
      v42 = *(unsigned int *)(a5 + 48);
      v43 = v42;
      if ((_DWORD)v42 == *(_DWORD *)(a5 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a5 + 16, 2 * *(_DWORD *)(a5 + 44));
        LODWORD(v40) = v36 % *(unsigned int *)(a5 + 40);
        v43 = *(_DWORD *)(a5 + 48);
      }
      *(_DWORD *)(a5 + 48) = v43 + 1;
      v44 = *(_QWORD *)(a5 + 32);
      v45 = *(_DWORD *)(v44 + 24 * v42);
    }
    else
    {
      v44 = *(_QWORD *)(a5 + 32);
      v45 = *(_DWORD *)(v44 + 24 * v42);
      *(_DWORD *)(a5 + 52) = v45 & 0x7FFFFFFF;
    }
    v46 = 24 * v42;
    *(_DWORD *)(v44 + v46) = v45 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a5 + 32) + v46) = *(_DWORD *)(*(_QWORD *)(a5 + 32) + 24 * v42) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v40);
    *(_QWORD *)(*(_QWORD *)(a5 + 32) + 24 * v42 + 8) = v36;
    *(_QWORD *)(*(_QWORD *)(a5 + 32) + 24 * v42 + 16) = v38;
    *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v40) = v42;
    ++*(_DWORD *)(a5 + 44);
    ++*(_DWORD *)(a5 + 56);
    if (*(_QWORD *)&v101[32])
    {

      *(_QWORD *)&v101[32] = 0;
    }
    goto LABEL_36;
  }
LABEL_37:
  if (re::ecs2::ShadowHelper::enableShadowTechniqueLogs(void)::onceToken != -1)
    dispatch_once(&re::ecs2::ShadowHelper::enableShadowTechniqueLogs(void)::onceToken, &__block_literal_global_3);
  if (re::ecs2::ShadowHelper::enableShadowTechniqueLogs(void)::g_enableShadowTechniqueLogs)
  {
    if (*(_BYTE *)(a1 + 1164))
    {
      v49 = *re::graphicsLogObjects((re *)a1);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v101 = 0;
        v50 = "Grounding shadow technique used : Raytraced";
LABEL_50:
        _os_log_impl(&dword_224FE9000, v49, OS_LOG_TYPE_DEFAULT, v50, v101, 2u);
      }
    }
    else
    {
      v51 = *(_QWORD *)(a4 + 336);
      if (!v51 || !*(_BYTE *)(v51 + 6))
      {
        if (re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken != -1)
          dispatch_once(&re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken, &__block_literal_global_15);
        if (!re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows)
        {
          if (!*(_BYTE *)(a1 + 1165))
            goto LABEL_51;
          v49 = *re::graphicsLogObjects((re *)a1);
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            goto LABEL_51;
          *(_WORD *)v101 = 0;
          v50 = "Grounding shadow technique used : Planar Projective";
          goto LABEL_50;
        }
      }
      v49 = *re::graphicsLogObjects((re *)a1);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v101 = 0;
        v50 = "Grounding shadow technique used : Projective Mesh";
        goto LABEL_50;
      }
    }
  }
LABEL_51:
  v52 = *(_BYTE **)(a4 + 336);
  if (v52)
  {
    *(_BYTE *)(a1 + 1169) = v52[2];
    v53 = v52[3];
    *(_BYTE *)(a1 + 1170) = v53;
    v54 = !v53 || v52[4] == 0;
    v55 = !v54;
    *(_BYTE *)(a1 + 1171) = v55;
    v56 = *(_QWORD *)(a1 + 800);
    if (v56)
    {
      re::AssetHandle::loadNow(v56, 0);
      if (!*v52)
      {
        LOBYTE(v57) = v52[6];
        if (!(_BYTE)v57)
          goto LABEL_66;
      }
      v57 = *(unsigned __int8 *)(a1 + 1171);
      if (*(_BYTE *)(a1 + 1171))
        v57 = 4 * (v52[1] == 0);
      if (*v52 || v52[6])
      {
        v58 = v57 == 0;
        v59 = v57;
      }
      else
      {
LABEL_66:
        v58 = 0;
        v59 = v57;
        v57 &= 4u;
      }
      v60 = v59 & 4;
      if (v57)
      {
        if (*(_BYTE *)(a1 + 1166))
          v61 = 8;
        else
          v61 = 8 * *(_BYTE *)(a1 + 1167);
      }
      else
      {
        v61 = 0;
      }
      v62 = v60 | v61 | v58;
      v63 = v52[6];
      if (v63)
        v63 = 2 * v52[5];
      v64 = v63 | (16 * v52[1]) | v62;
      if (((v64 ^ *(_BYTE *)(a3 + 120)) & 0x3F) != 0)
      {
        v65 = *(_QWORD *)(a1 + 800);
        if (v65)
        {
          v66 = atomic_load((unsigned int *)(v65 + 704));
          if (v66 == 2)
          {
            ++*(_DWORD *)(*(_QWORD *)(a1 + 800) + 260);
            v67 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)(a1 + 792));
            if (v67)
            {
              v68 = (re::RenderGraphFile *)(v67 + 8);
              if (v52[3])
              {
                *(_QWORD *)v101 = 0xA347EFBC0FB083E8;
                *(_QWORD *)&v101[8] = "ForceClearSceneUnderstandingMeshShadowSingleChannel";
                v69 = v60 >> 2;
                LOBYTE(v109) = v69;
                re::RenderGraphFile::setRuntimeNodeSetting<BOOL>((re::RenderGraphFile *)(v67 + 8), (const re::StringID *)v101, "Enabled", (char *)&v109);
                re::StringID::destroyString((re::StringID *)v101);
                *(_QWORD *)v101 = 0x2A295CF77075A36CLL;
                *(_QWORD *)&v101[8] = "CompositeSceneUnderstandingShadowsNode";
                LOBYTE(v109) = v69;
                re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v68, (const re::StringID *)v101, "Enabled", (char *)&v109);
                re::StringID::destroyString((re::StringID *)v101);
                *(_QWORD *)v101 = 0x696F5EF842740C56;
                *(_QWORD *)&v101[8] = "CompositedMeshShadowProjectedPatchReceiverNode";
                LOBYTE(v109) = (v64 & 6) == 6;
                re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v68, (const re::StringID *)v101, "Enabled", (char *)&v109);
                re::StringID::destroyString((re::StringID *)v101);
                *(_QWORD *)v101 = 0x378766A6B9EC9AELL;
                *(_QWORD *)&v101[8] = "CompositedSceneUnderstandingShadowNode";
                LOBYTE(v109) = (v64 & 6) == 4;
                re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v68, (const re::StringID *)v101, "Enabled", (char *)&v109);
                re::StringID::destroyString((re::StringID *)v101);
              }
              *(_QWORD *)v101 = 0x9AB5F11FB4FA0048;
              *(_QWORD *)&v101[8] = "SceneUnderstandingOcclusionAndShadowNode";
              LOBYTE(v109) = (v64 & 3) == 1;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v68, (const re::StringID *)v101, "Enabled", (char *)&v109);
              re::StringID::destroyString((re::StringID *)v101);
              *(_QWORD *)v101 = 0xF5A2D353F87D6B9CLL;
              *(_QWORD *)&v101[8] = "MeshShadowProjectedPatchReceiverNode";
              LOBYTE(v109) = (v64 & 3) == 3;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v68, (const re::StringID *)v101, "Enabled", (char *)&v109);
              re::StringID::destroyString((re::StringID *)v101);
              *(_QWORD *)v101 = 0xF7F248B7F1C26F4;
              *(_QWORD *)&v101[8] = "PatchShadowReceiverDepthOnlyNode";
              LOBYTE(v109) = (v64 & 3) == 3;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v68, (const re::StringID *)v101, "Enabled", (char *)&v109);
              re::StringID::destroyString((re::StringID *)v101);
              *(_QWORD *)v101 = 0x95DF29AA01C3F5E4;
              *(_QWORD *)&v101[8] = "SceneUnderstandingWireframeNode";
              LOBYTE(v109) = v64 >> 4;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v68, (const re::StringID *)v101, "Enabled", (char *)&v109);
              re::StringID::destroyString((re::StringID *)v101);
              *(_QWORD *)v101 = 0x2B2EFFC92CCF4F14;
              *(_QWORD *)&v101[8] = "SceneUnderstandingShadowsDepthNode";
              LOBYTE(v109) = v61 >> 3;
              re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v68, (const re::StringID *)v101, "Enabled", (char *)&v109);
              re::StringID::destroyString((re::StringID *)v101);
            }
          }
        }
      }
      *(_BYTE *)(a3 + 120) = v64;
    }
  }
  v70 = *(_QWORD *)(a4 + 344);
  if (v70)
  {
    v71 = *(_BYTE *)(v70 + 8);
    v72 = *(id *)(v70 + 16);
    v73 = *(id *)(v70 + 24);
    v74 = *(_OWORD *)(v70 + 152);
    v105 = *(_OWORD *)(v70 + 136);
    v106 = v74;
    v107 = *(_OWORD *)(v70 + 168);
    v108 = *(_WORD *)(v70 + 184);
    v75 = *(_OWORD *)(v70 + 88);
    *(_OWORD *)&v101[32] = *(_OWORD *)(v70 + 72);
    v102 = v75;
    v76 = *(_OWORD *)(v70 + 120);
    v103 = *(_OWORD *)(v70 + 104);
    v104 = v76;
    v77 = *(_OWORD *)(v70 + 56);
    *(_OWORD *)v101 = *(_OWORD *)(v70 + 40);
    *(_OWORD *)&v101[16] = v77;
    v78 = atomic_load((unsigned __int8 *)&qword_254120F68);
    if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_254120F68))
    {
      MurmurHash3_x64_128((uint64_t)"GuidedFilterOcclusionData", 25, 0, &v109);
      v100 = (v110 + (v109 << 6) + (v109 >> 2) - 0x61C8864680B583E9) ^ v109;
      MurmurHash3_x64_128((uint64_t)"GuidedFilterOcclusion", 21, 0, &v109);
      qword_254120F60 = ((v100 << 6)
                       + (v100 >> 2)
                       + ((v110 + (v109 << 6) + (v109 >> 2) - 0x61C8864680B583E9) ^ v109)
                       - 0x61C8864680B583E9) ^ v100;
      __cxa_guard_release(&qword_254120F68);
    }
    if (re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(a5, qword_254120F60))
    {
      if (v73)

      if (v72)
    }
    else
    {
      v79 = a1 + 1664;
      v80 = (unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE";
      if (((unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE" & 0x8000000000000000) != 0)
      {
        v81 = (unsigned __int8 *)((unint64_t)"N2re43SceneUnderstandingGuidedFilterOcclusionDataE" & 0x7FFFFFFFFFFFFFFFLL);
        v82 = 5381;
        do
        {
          v80 = v82;
          v83 = *v81++;
          v82 = (33 * v82) ^ v83;
        }
        while (v83);
      }
      v84 = (qword_254120F60 + (v80 << 6) + (v80 >> 2) - 0x61C8864680B583E9) ^ v80;
      v85 = re::globalAllocators(0);
      v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85[2] + 32))(v85[2], 192, 16);
      *(_QWORD *)v86 = &off_24ED68B88;
      *(_BYTE *)(v86 + 8) = v71;
      *(_QWORD *)(v86 + 16) = v72;
      *(_QWORD *)(v86 + 24) = v73;
      *(_QWORD *)(v86 + 32) = v79;
      v87 = v103;
      *(_OWORD *)(v86 + 120) = v104;
      *(_OWORD *)(v86 + 104) = v87;
      v88 = *(_OWORD *)&v101[32];
      *(_OWORD *)(v86 + 88) = v102;
      *(_OWORD *)(v86 + 72) = v88;
      v89 = v108;
      *(_OWORD *)(v86 + 168) = v107;
      v90 = v105;
      *(_OWORD *)(v86 + 152) = v106;
      *(_OWORD *)(v86 + 136) = v90;
      v91 = *(_OWORD *)&v101[16];
      *(_OWORD *)(v86 + 40) = *(_OWORD *)v101;
      *(_WORD *)(v86 + 184) = v89;
      *(_OWORD *)(v86 + 56) = v91;
      v92 = *(_QWORD *)(a5 + 16);
      if (v92)
      {
        v92 = v84 % *(unsigned int *)(a5 + 40);
        v93 = *(unsigned int *)(*(_QWORD *)(a5 + 24) + 4 * v92);
        if ((_DWORD)v93 != 0x7FFFFFFF)
        {
          v99 = *(_QWORD *)(a5 + 32);
          if (*(_QWORD *)(v99 + 24 * v93 + 8) == v84)
            return;
          while (1)
          {
            LODWORD(v93) = *(_DWORD *)(v99 + 24 * v93) & 0x7FFFFFFF;
            if ((_DWORD)v93 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v99 + 24 * v93 + 8) == v84)
              return;
          }
        }
      }
      v94 = *(unsigned int *)(a5 + 52);
      if ((_DWORD)v94 == 0x7FFFFFFF)
      {
        v94 = *(unsigned int *)(a5 + 48);
        v95 = v94;
        if ((_DWORD)v94 == *(_DWORD *)(a5 + 40))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a5 + 16, 2 * *(_DWORD *)(a5 + 44));
          LODWORD(v92) = v84 % *(unsigned int *)(a5 + 40);
          v95 = *(_DWORD *)(a5 + 48);
        }
        *(_DWORD *)(a5 + 48) = v95 + 1;
        v96 = *(_QWORD *)(a5 + 32);
        v97 = *(_DWORD *)(v96 + 24 * v94);
      }
      else
      {
        v96 = *(_QWORD *)(a5 + 32);
        v97 = *(_DWORD *)(v96 + 24 * v94);
        *(_DWORD *)(a5 + 52) = v97 & 0x7FFFFFFF;
      }
      v98 = 24 * v94;
      *(_DWORD *)(v96 + v98) = v97 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(a5 + 32) + v98) = *(_DWORD *)(*(_QWORD *)(a5 + 32) + 24 * v94) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v92);
      *(_QWORD *)(*(_QWORD *)(a5 + 32) + 24 * v94 + 8) = v84;
      *(_QWORD *)(*(_QWORD *)(a5 + 32) + 24 * v94 + 16) = v86;
      *(_DWORD *)(*(_QWORD *)(a5 + 24) + 4 * v92) = v94;
      ++*(_DWORD *)(a5 + 44);
      ++*(_DWORD *)(a5 + 56);
    }
  }
}

uint64_t re::RenderGraphAREmitter::emitFrameContext(re::RealityEmitterBase *a1, _QWORD *a2, re::RenderFrame *this, re *a4)
{
  double v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::Allocator **v15;
  uint64_t v16;
  uint64_t v17;
  re::Allocator **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;

  re::RenderFrame::emitGraph(this, "UploadMultiSceneConstants", "RenderFrame");
  v9 = a2[2];
  if (v9)
  {
    v10 = (_QWORD *)a2[3];
    v11 = 464 * v9;
    do
    {
      re::RealityEmitterBase::emitDeformerGraph((uint64_t)a1, (uint64_t)v10, this, (uint64_t)a4);
      re::RealityEmitterBase::emitVFXSimulationGraph((uint64_t)a1, v10, this, (uint64_t)a4);
      v10 += 58;
      v11 -= 464;
    }
    while (v11);
  }
  v12 = a2[12];
  if (v12 && *(_QWORD *)(v12 + 16))
    re::RenderFrame::emitGraph(this, "MipmapGenerationContext", "RenderFrame");
  v13 = a2[13];
  if (v13 && *(_QWORD *)(v13 + 16))
    re::RenderFrame::emitGraph(this, "BlurGenerationContext", "RenderFrame");
  re::RealityEmitterBase::emitProbeWriteGraph(a1, this, v8);
  re::RenderFrame::emitGraph(this, "ProjectiveMeshShadow", "RenderFrame");
  if (*((_BYTE *)a1 + 1165))
    re::RealityEmitterBase::emitPlanarProjectiveShadowGraph((uint64_t)a1, a2, this, (uint64_t)a4);
  v28 = 0;
  v14 = a2[2];
  if (v14)
  {
    v15 = (re::Allocator **)a2[3];
    v16 = 464 * v14;
    do
    {
      re::RealityEmitterBase::emitSingleGraphShadows((uint64_t)a1, v15, (uint64_t)this, (uint64_t)a4, &v28);
      v15 += 58;
      v16 -= 464;
    }
    while (v16);
    v17 = a2[2];
    if (v17)
    {
      v18 = (re::Allocator **)a2[3];
      v19 = 464 * v17;
      do
      {
        re::RealityEmitterBase::emitFilterMapGraph((uint64_t)a1, v18, (uint64_t)this, (uint64_t)a4);
        v18 += 58;
        v19 -= 464;
      }
      while (v19);
      v20 = a2[2];
      if (v20)
      {
        v21 = a2[3];
        v22 = 464 * v20;
        do
        {
          re::RealityEmitterBase::emitVisualProxyHighFidelityGraph((uint64_t)a1, v21, this, a4);
          v21 += 464;
          v22 -= 464;
        }
        while (v22);
        v24 = a2[2];
        if (v24)
        {
          v25 = a2[3];
          v26 = 464 * v24;
          do
          {
            re::RealityEmitterBase::emitCameraGraphs(a1, a2, v25, (uint64_t)this, (uint64_t)a4, 0, v23);
            v25 += 464;
            v26 -= 464;
          }
          while (v26);
        }
      }
    }
  }
  return re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(a1, this, a4);
}

uint64_t re::RenderGraphAREmitter::afterCameraViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const char *v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  unsigned __int8 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  uint64_t result;
  unsigned __int8 v39;
  unsigned __int8 v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  re *v45;
  const char *v46;
  const char *v47;
  void (**v48)(re::MeshLodSelectInputData *__hidden);
  char v49;
  char v50;
  char v51;
  char v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[10];
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a7 + 8) & 1) != 0)
    v12 = *(const char **)(a7 + 16);
  else
    v12 = (const char *)(a7 + 9);
  v13 = strlen(v12);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)v12, v13, 0, &v63);
    v14 = (v64 - 0x61C8864680B583E9 + (v63 << 6) + (v63 >> 2)) ^ v63;
  }
  else
  {
    v14 = 0;
  }
  re::CameraView::makeCameraData(a7, a4[1], a3, (uint64_t)&v63);
  v48 = &off_24ED77680;
  v50 = 0;
  v52 = 0;
  v49 = *(_BYTE *)(a7 + 400);
  if (*(_BYTE *)(a7 + 401))
  {
    v50 = 1;
    v51 = *(_BYTE *)(a7 + 402);
  }
  if (*(_BYTE *)(a7 + 404))
  {
    v52 = 1;
    v53 = *(_DWORD *)(a7 + 408);
  }
  v16 = *(_OWORD *)(a7 + 496);
  v58 = *(_OWORD *)(a7 + 480);
  v59 = v16;
  v17 = *(_OWORD *)(a7 + 528);
  v60 = *(_OWORD *)(a7 + 512);
  v61 = v17;
  v18 = *(_OWORD *)(a7 + 432);
  v54 = *(_OWORD *)(a7 + 416);
  v55 = v18;
  v19 = *(_OWORD *)(a7 + 464);
  v56 = *(_OWORD *)(a7 + 448);
  v57 = v19;
  if (*(_BYTE *)(a1 + 1169))
  {
    v20 = &qword_254120FC0;
    v21 = atomic_load(algn_254120FC8);
    if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)algn_254120FC8))
    {
      v22 = "DepthFeathering";
LABEL_49:
      *v20 = re::hashString((re *)v22, v41);
      __cxa_guard_release(v20 + 1);
      goto LABEL_14;
    }
    v22 = "DepthFeathering";
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 1170) && *(_BYTE *)(a1 + 1171))
  {
    v39 = atomic_load((unsigned __int8 *)&qword_254120FD8);
    if ((v39 & 1) == 0)
    {
      v45 = (re *)__cxa_guard_acquire(&qword_254120FD8);
      if ((_DWORD)v45)
      {
        qword_254120FD0 = re::getCombinedScopeHash(v45, v46, v47);
        __cxa_guard_release(&qword_254120FD8);
      }
    }
    if (re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(a5, qword_254120FD0))
    {
      v20 = &qword_254120FE0;
      v40 = atomic_load(algn_254120FE8);
      if ((v40 & 1) == 0 && __cxa_guard_acquire((__guard *)algn_254120FE8))
      {
        v22 = "GuidedFilterOcclusion";
        goto LABEL_49;
      }
      v22 = "GuidedFilterOcclusion";
LABEL_14:
      v23 = (v14 - 0x61C8864680B583E9 + (*v20 << 6) + ((unint64_t)*v20 >> 2)) ^ *v20;
      re::RenderGraphDataStore::add<re::CameraData,re::CameraData&>(a5, v23, (uint64_t)&v63);
      re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData&>(a5, v23, (uint64_t)&v48);
      re::RealityEmitterBase::addSceneDataToDataStore(a1, a3, v23, a5);
      re::RenderFrame::emitGraph((re::RenderFrame *)a4, v22, v12);
    }
  }
  v24 = *(_QWORD *)(a1 + 872);
  if (v24)
  {
    v25 = atomic_load((unsigned int *)(v24 + 704));
    if (v25 == 2)
      re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>((_QWORD *)(a1 + 864), a7);
  }
  v26 = *(_QWORD *)(a1 + 920);
  if (v26)
  {
    v27 = atomic_load((unsigned int *)(v26 + 704));
    if (v27 == 2)
      re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>((_QWORD *)(a1 + 912), a7);
  }
  v28 = *(_QWORD *)(a1 + 1016);
  if (v28)
  {
    v29 = atomic_load((unsigned int *)(v28 + 704));
    if (v29 == 2)
      re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>((_QWORD *)(a1 + 1008), a7);
  }
  v30 = *(_QWORD *)(a1 + 1040);
  if (v30)
  {
    v31 = atomic_load((unsigned int *)(v30 + 704));
    if (v31 == 2)
      re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>((_QWORD *)(a1 + 1032), a7);
  }
  if (!*(_BYTE *)(a7 + 348))
  {
    re::CameraView::makeViewportPercentData((re::CameraView *)a7, v15, (uint64_t)v62);
    if (*(_BYTE *)(a1 + 1166))
    {
      v32 = atomic_load((unsigned __int8 *)&qword_254120FF8);
      if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254120FF8))
      {
        qword_254120FF0 = re::hashString((re *)"DepthOfField", v42);
        __cxa_guard_release(&qword_254120FF8);
      }
      v33 = (v14 - 0x61C8864680B583E9 + (qword_254120FF0 << 6) + ((unint64_t)qword_254120FF0 >> 2)) ^ qword_254120FF0;
      re::RenderGraphDataStore::add<re::CameraData,re::CameraData&>(a5, v33, (uint64_t)&v63);
      re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData&>(a5, v33, v62);
      re::RealityEmitterBase::addSceneDataToDataStore(a1, a3, v33, a5);
      re::RenderFrame::emitGraph((re::RenderFrame *)a4, "DepthOfField", v12);
    }
    if (*(_BYTE *)(a1 + 1167))
    {
      v34 = atomic_load((unsigned __int8 *)&qword_254121008);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254121008))
      {
        qword_254121000 = re::hashString((re *)"MotionBlur", v43);
        __cxa_guard_release(&qword_254121008);
      }
      v35 = (v14 - 0x61C8864680B583E9 + (qword_254121000 << 6) + ((unint64_t)qword_254121000 >> 2)) ^ qword_254121000;
      re::RenderGraphDataStore::add<re::CameraData,re::CameraData&>(a5, v35, (uint64_t)&v63);
      re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData&>(a5, v35, v62);
      re::RealityEmitterBase::addSceneDataToDataStore(a1, a3, v35, a5);
      re::RenderFrame::emitGraph((re::RenderFrame *)a4, "MotionBlur", v12);
    }
    if (*(_BYTE *)(a1 + 1168))
    {
      v36 = atomic_load((unsigned __int8 *)&qword_254121018);
      if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254121018))
      {
        qword_254121010 = re::hashString((re *)"PostProcessCombined", v44);
        __cxa_guard_release(&qword_254121018);
      }
      v37 = (v14 - 0x61C8864680B583E9 + (qword_254121010 << 6) + ((unint64_t)qword_254121010 >> 2)) ^ qword_254121010;
      re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData&>(a5, v37, v62);
      re::RealityEmitterBase::addSceneDataToDataStore(a1, a3, v37, a5);
      re::RenderFrame::emitGraph((re::RenderFrame *)a4, "PostProcessCombined", v12);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4[1] + 104) + 1648) + 16) = 0;
    }
  }
  re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(a1, a3, (uint64_t)a4, (_QWORD *)a7);
  v70 = 0;
  ++v71;
  v68 = 0;
  ++v69;
  v66 = 0;
  ++v67;
  result = v64;
  if (v64)
  {
    if ((v65 & 1) != 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
  }
  return result;
}

uint64_t re::RenderGraphDataStore::add<re::CameraData,re::CameraData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 v17;
  void *v19;
  unint64_t v20;
  unint64_t v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = 0;
  if ((v6 & 1) == 0
  {
    re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
  }
  v19 = re::introspect<re::CameraData>(void)::info;
  v7 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
  if (v7)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraData>(void)::info + 6), v7, 0, v21);
    v8 = (v21[1] - 0x61C8864680B583E9 + (v21[0] << 6) + (v21[0] >> 2)) ^ v21[0];
  }
  else
  {
    v8 = 0;
  }
  v20 = v8;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v20, &v19);
  v21[0] = (a2 - 0x61C8864680B583E9 + (v20 << 6) + (v20 >> 2)) ^ v20;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 528, 16);
  *(_QWORD *)v9 = off_24ED735F0;
  re::DynamicString::DynamicString((re::DynamicString *)(v9 + 8), (const re::DynamicString *)(a3 + 8));
  *(_QWORD *)(v9 + 48) = 0;
  *(_DWORD *)(v9 + 56) = 0;
  v10 = *(_QWORD *)(a3 + 48);
  memcpy((void *)(v9 + 64), (const void *)(a3 + 64), 32 * v10);
  *(_QWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 128) = 0;
  *(_DWORD *)(v9 + 136) = 0;
  v11 = *(_QWORD *)(a3 + 128);
  memcpy((void *)(v9 + 144), (const void *)(a3 + 144), v11 << 6);
  *(_QWORD *)(v9 + 128) = v11;
  *(_QWORD *)(v9 + 272) = 0;
  *(_DWORD *)(v9 + 280) = 0;
  v12 = *(_QWORD *)(a3 + 272);
  memcpy((void *)(v9 + 288), (const void *)(a3 + 288), v12 << 6);
  *(_QWORD *)(v9 + 272) = v12;
  v14 = *(_OWORD *)(a3 + 432);
  v13 = *(_OWORD *)(a3 + 448);
  v15 = *(_OWORD *)(a3 + 416);
  *(_OWORD *)(v9 + 458) = *(_OWORD *)(a3 + 458);
  *(_OWORD *)(v9 + 432) = v14;
  *(_OWORD *)(v9 + 448) = v13;
  *(_OWORD *)(v9 + 416) = v15;
  v16 = *(unsigned __int8 *)(a3 + 476);
  *(_BYTE *)(v9 + 476) = v16;
  if (v16)
    *(_DWORD *)(v9 + 480) = *(_DWORD *)(a3 + 480);
  v17 = *(_OWORD *)(a3 + 484);
  *(_OWORD *)(v9 + 497) = *(_OWORD *)(a3 + 497);
  *(_OWORD *)(v9 + 484) = v17;
  v19 = (void *)v9;
  return re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, v21, &v19);
}

_QWORD *re::AssetHandle::internalUpdateImmutableAsset<re::RenderGraphAsset,re::RenderGraphAREmitter::afterCameraViewHandler(re::RenderFrameContext &,re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &,char const*,re::CameraView const&)::$_0>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  re::RenderGraphFile *v5;
  const char *v6;
  _QWORD v7[2];
  _QWORD *v8;
  char v9;

  v2 = result[1];
  if (v2)
  {
    v3 = atomic_load((unsigned int *)(v2 + 704));
    if (v3 == 2)
    {
      ++*(_DWORD *)(result[1] + 260);
      result = (_QWORD *)re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)result);
      if (result)
      {
        v5 = (re::RenderGraphFile *)(result + 1);
        if (*(_BYTE *)(a2 + 349))
          v6 = "arKitPassthroughDisabledTechnique";
        else
          v6 = "arKitPassthroughTechnique";
        v7[0] = 0xBEC9DE826D75EA6;
        v7[1] = "Fullscreen_ARKitPassthrough";
        re::RenderGraphFile::setRuntimeNodeSetting<re::DynamicString>(v5, (const re::StringID *)v7, "techniqueName", (char *)&v8);
        re::StringID::destroyString((re::StringID *)v7);
        result = v8;
        if (v8)
        {
          if ((v9 & 1) != 0)
            return (_QWORD *)(*(uint64_t (**)(void))(*v8 + 40))();
        }
      }
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData&>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = (unint64_t)"N2re19ViewportPercentDataE";
  if (((unint64_t)"N2re19ViewportPercentDataE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re19ViewportPercentDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v13 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v8 = a1 + 64;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 80, 16);
  *(_QWORD *)v9 = &off_24ED77600;
  *(_QWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  v10 = a3[2];
  memcpy((void *)(v9 + 32), a3 + 4, 16 * v10);
  *(_QWORD *)(v9 + 16) = v10;
  *(_QWORD *)(v9 + 64) = a3[8];
  v12 = v9;
  return re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v13, &v12);
}

void re::RenderGraphAREmitter::afterCameraMultiViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a7 + 348))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254121028);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254121028))
    {
      qword_254121020 = re::hashString((re *)"PostProcessMultiView", v18);
      __cxa_guard_release(&qword_254121028);
    }
    v12 = 0x9E3779B97F4A7C17;
    if ((*(_QWORD *)(a7 + 8) & 1) != 0)
      v13 = *(const char **)(a7 + 16);
    else
      v13 = (const char *)(a7 + 9);
    v14 = qword_254121020;
    v15 = strlen(v13);
    if (v15)
    {
      MurmurHash3_x64_128((uint64_t)v13, v15, 0, &v19);
      v12 = ((v20 - 0x61C8864680B583E9 + (v19 << 6) + (v19 >> 2)) ^ v19) - 0x61C8864680B583E9;
    }
    v16 = ((v14 >> 2) + (v14 << 6) + v12) ^ v14;
    re::CameraMultiView::makeCameraDataInstancedMode((_OWORD *)a7, a4[1], a3, (uint64_t)&v19);
    re::RenderGraphDataStore::add<re::CameraData,re::CameraData>(a5, v16, (uint64_t)&v19);
    v26 = 0;
    ++v27;
    v24 = 0;
    ++v25;
    v22 = 0;
    ++v23;
    if (v20)
    {
      if ((v21 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v20 + 40))();
    }
    re::CameraMultiView::makeViewportPercentDataInstancedMode((re::CameraMultiView *)a7, v17, (uint64_t)&v19);
    re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a5, v16, (uint64_t)&v19);
    re::RenderFrame::emitGraph((re::RenderFrame *)a4, "PostProcessMultiView", v13);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4[1] + 104) + 1648) + 16) = 0;
  }
}

uint64_t re::RenderGraphAREmitter::cameraViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char *a6, uint64_t a7)
{
  const char *v13;

  re::CameraView::prepareEmitDefault(a7, a4, a5, a2, a3, a6);
  if ((*(_QWORD *)(a7 + 8) & 1) != 0)
    v13 = *(const char **)(a7 + 16);
  else
    v13 = (const char *)(a7 + 9);
  return re::RenderGraphAREmitter::fillDataStoreAndEmitGraph(a1, a7, (uint64_t)a4, a5, a3, v13, a6);
}

uint64_t re::RenderGraphAREmitter::cameraMultiViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char *a6, uint64_t a7)
{
  const char *v13;

  re::CameraMultiView::prepareEmitDefaultInstancedMode(a7, a4, a5, a2, a3, a6);
  if ((*(_QWORD *)(a7 + 8) & 1) != 0)
    v13 = *(const char **)(a7 + 16);
  else
    v13 = (const char *)(a7 + 9);
  return re::RenderGraphAREmitter::fillDataStoreAndEmitGraph(a1, a7, (uint64_t)a4, a5, a3, v13, a6);
}

void re::RenderGraphAREmitter::registerProviders(re::RenderGraphAREmitter *this, re::RenderManager **a2, AssetService *a3)
{
  __int128 v6;
  uint64_t v7;
  re::ProviderHandle *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _BOOL8 isValid;
  uint64_t *v104;
  _anonymous_namespace_ *v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _BOOL8 v110;
  uint64_t *v111;
  _QWORD *v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _BOOL8 v121;
  uint64_t *v122;
  uint64_t *v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t *v129;
  _anonymous_namespace_ *v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _BOOL8 v135;
  uint64_t *v136;
  _anonymous_namespace_ *v137;
  __int128 v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _OWORD v142[2];
  _OWORD v143[2];
  _OWORD v144[2];
  _OWORD v145[2];
  _OWORD v146[2];
  AssetService v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;

  re::RealityEmitterBase::registerCommonProviders(this, a2, a3);
  (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v148, a3, "engine:BuiltinRenderGraphResources/Common/depthClear.rematerial");
  v6 = *((_OWORD *)this + 11);
  *((_OWORD *)this + 11) = v148;
  v148 = v6;
  v7 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v149;
  v149 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v148);
  re::AssetHandle::loadAsync((re::RenderGraphAREmitter *)((char *)this + 176));
  (*((void (**)(AssetService *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v147, a3, "engine:default.metallib");
  re::AssetHandle::loadAsync((re::AssetHandle *)&v147);
  v9 = *((_QWORD *)this + 100);
  if (v9)
  {
    v10 = atomic_load((unsigned int *)(v9 + 704));
    if (v10 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 100), 0);
    v11 = *((_QWORD *)this + 100);
    if (v11)
    {
      v12 = atomic_load((unsigned int *)(v11 + 704));
      if (v12 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1240)))
      {
        v13 = *((_QWORD *)this + 100);
        if (v13)
        {
          v14 = atomic_load((unsigned int *)(v13 + 704));
          if (v14 == 2)
          {
            ++*(_DWORD *)(*((_QWORD *)this + 100) + 260);
            v15 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 792));
            if (v15)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)(v15 + 8), 0, 0, (uint64_t)&v148);
              v16 = v148;
              *(_QWORD *)&v148 = 0;
              *((_QWORD *)&v148 + 1) = &str_110;
              v17 = *((_QWORD *)this + 155);
              *((_QWORD *)this + 155) = v16;
              v18 = v16 & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
              v19 = *((_QWORD *)this + 156);
              *((_QWORD *)this + 156) = *((_QWORD *)&v16 + 1);
              v150 = v18;
              v151 = v19;
              re::StringID::destroyString((re::StringID *)&v150);
              *((_QWORD *)this + 157) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  v20 = *((_QWORD *)this + 103);
  if (v20)
  {
    v21 = atomic_load((unsigned int *)(v20 + 704));
    if (v21 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 103), 0);
    v22 = *((_QWORD *)this + 103);
    if (v22)
    {
      v23 = atomic_load((unsigned int *)(v22 + 704));
      if (v23 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1408)))
      {
        v24 = *((_QWORD *)this + 103);
        if (v24)
        {
          v25 = atomic_load((unsigned int *)(v24 + 704));
          if (v25 == 2)
          {
            ++*(_DWORD *)(*((_QWORD *)this + 103) + 260);
            v26 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 816));
            if (v26)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "SingleGraphShadows", (const re::RenderGraphProviderBase *)(v26 + 8), 0, 0, (uint64_t)&v148);
              v27 = v148;
              *(_QWORD *)&v148 = 0;
              *((_QWORD *)&v148 + 1) = &str_110;
              v28 = *((_QWORD *)this + 176);
              *((_QWORD *)this + 176) = v27;
              v29 = v27 & 0xFFFFFFFFFFFFFFFELL | v28 & 1;
              v30 = *((_QWORD *)this + 177);
              *((_QWORD *)this + 177) = *((_QWORD *)&v27 + 1);
              v150 = v29;
              v151 = v30;
              re::StringID::destroyString((re::StringID *)&v150);
              *((_QWORD *)this + 178) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  v31 = *((_QWORD *)this + 153);
  if (!v31 || (v32 = atomic_load((unsigned int *)(v31 + 704)), v32 != 2))
  {
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v148, a3, "engine:BuiltinRenderGraphResources/Common/filter.rerendergraph");
    v33 = *((_OWORD *)this + 76);
    *((_OWORD *)this + 76) = v148;
    v148 = v33;
    v34 = *((_QWORD *)this + 154);
    *((_QWORD *)this + 154) = v149;
    v149 = v34;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v148);
    re::AssetHandle::loadNow(*((_QWORD *)this + 153), 0);
  }
  v35 = *((_QWORD *)this + 153);
  if (v35)
  {
    v36 = atomic_load((unsigned int *)(v35 + 704));
    if (v36 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1432)))
    {
      v37 = *((_QWORD *)this + 153);
      if (v37)
      {
        v38 = atomic_load((unsigned int *)(v37 + 704));
        if (v38 == 2)
        {
          ++*(_DWORD *)(*((_QWORD *)this + 153) + 260);
          v39 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 1216));
          if (v39)
          {
            re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Filter", (const re::RenderGraphProviderBase *)(v39 + 8), 0, 0, (uint64_t)&v148);
            v40 = v148;
            *(_QWORD *)&v148 = 0;
            *((_QWORD *)&v148 + 1) = &str_110;
            v41 = *((_QWORD *)this + 179);
            *((_QWORD *)this + 179) = v40;
            v42 = v40 & 0xFFFFFFFFFFFFFFFELL | v41 & 1;
            v43 = *((_QWORD *)this + 180);
            *((_QWORD *)this + 180) = *((_QWORD *)&v40 + 1);
            v150 = v42;
            v151 = v43;
            re::StringID::destroyString((re::StringID *)&v150);
            *((_QWORD *)this + 181) = v149;
            re::StringID::destroyString((re::StringID *)&v148);
          }
        }
      }
    }
  }
  v44 = *((_QWORD *)this + 121);
  if (v44)
  {
    v45 = atomic_load((unsigned int *)(v44 + 704));
    if (v45 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 121), 0);
    v46 = *((_QWORD *)this + 121);
    if (v46)
    {
      v47 = atomic_load((unsigned int *)(v46 + 704));
      if (v47 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1288)))
      {
        v48 = *((_QWORD *)this + 121);
        if (v48)
        {
          v49 = atomic_load((unsigned int *)(v48 + 704));
          if (v49 == 2)
          {
            ++*(_DWORD *)(*((_QWORD *)this + 121) + 260);
            v50 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 960));
            if (v50)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "DepthOfField", (const re::RenderGraphProviderBase *)(v50 + 8), 0, 0, (uint64_t)&v148);
              v51 = v148;
              *(_QWORD *)&v148 = 0;
              *((_QWORD *)&v148 + 1) = &str_110;
              v52 = *((_QWORD *)this + 161);
              *((_QWORD *)this + 161) = v51;
              v53 = v51 & 0xFFFFFFFFFFFFFFFELL | v52 & 1;
              v54 = *((_QWORD *)this + 162);
              *((_QWORD *)this + 162) = *((_QWORD *)&v51 + 1);
              v150 = v53;
              v151 = v54;
              re::StringID::destroyString((re::StringID *)&v150);
              *((_QWORD *)this + 163) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  v55 = *((_QWORD *)this + 124);
  if (v55)
  {
    v56 = atomic_load((unsigned int *)(v55 + 704));
    if (v56 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 124), 0);
    v57 = *((_QWORD *)this + 124);
    if (v57)
    {
      v58 = atomic_load((unsigned int *)(v57 + 704));
      if (v58 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1312)))
      {
        v59 = *((_QWORD *)this + 124);
        if (v59)
        {
          v60 = atomic_load((unsigned int *)(v59 + 704));
          if (v60 == 2)
          {
            ++*(_DWORD *)(*((_QWORD *)this + 124) + 260);
            v61 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 984));
            if (v61)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "MotionBlur", (const re::RenderGraphProviderBase *)(v61 + 8), 0, 0, (uint64_t)&v148);
              v62 = v148;
              *(_QWORD *)&v148 = 0;
              *((_QWORD *)&v148 + 1) = &str_110;
              v63 = *((_QWORD *)this + 164);
              *((_QWORD *)this + 164) = v62;
              v64 = v62 & 0xFFFFFFFFFFFFFFFELL | v63 & 1;
              v65 = *((_QWORD *)this + 165);
              *((_QWORD *)this + 165) = *((_QWORD *)&v62 + 1);
              v150 = v64;
              v151 = v65;
              re::StringID::destroyString((re::StringID *)&v150);
              *((_QWORD *)this + 166) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  v66 = *((_QWORD *)this + 127);
  if (v66)
  {
    v67 = atomic_load((unsigned int *)(v66 + 704));
    if (v67 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 127), 0);
  }
  v68 = *((_QWORD *)this + 130);
  if (v68)
  {
    v69 = atomic_load((unsigned int *)(v68 + 704));
    if (v69 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 130), 0);
  }
  v70 = *((_QWORD *)this + 118);
  if (v70)
  {
    v71 = atomic_load((unsigned int *)(v70 + 704));
    if (v71 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 118), 0);
    v72 = *((_QWORD *)this + 118);
    if (v72)
    {
      v73 = atomic_load((unsigned int *)(v72 + 704));
      if (v73 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1264)))
      {
        v74 = *((_QWORD *)this + 118);
        if (v74)
        {
          v75 = atomic_load((unsigned int *)(v74 + 704));
          if (v75 == 2)
          {
            ++*(_DWORD *)(*((_QWORD *)this + 118) + 260);
            v76 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 936));
            if (v76)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "PostProcessMultiView", (const re::RenderGraphProviderBase *)(v76 + 8), 0, 0, (uint64_t)&v148);
              v77 = v148;
              *(_QWORD *)&v148 = 0;
              *((_QWORD *)&v148 + 1) = &str_110;
              v78 = *((_QWORD *)this + 158);
              *((_QWORD *)this + 158) = v77;
              v79 = v77 & 0xFFFFFFFFFFFFFFFELL | v78 & 1;
              v80 = *((_QWORD *)this + 159);
              *((_QWORD *)this + 159) = *((_QWORD *)&v77 + 1);
              v150 = v79;
              v151 = v80;
              re::StringID::destroyString((re::StringID *)&v150);
              *((_QWORD *)this + 160) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  v81 = *((_QWORD *)this + 94);
  if (v81)
  {
    v82 = atomic_load((unsigned int *)(v81 + 704));
    if (v82 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 94), 0);
    v83 = *((_QWORD *)this + 94);
    if (v83)
    {
      v84 = atomic_load((unsigned int *)(v83 + 704));
      if (v84 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1360)))
      {
        v85 = *((_QWORD *)this + 94);
        if (v85)
        {
          v86 = atomic_load((unsigned int *)(v85 + 704));
          if (v86 == 2)
          {
            ++*(_DWORD *)(*((_QWORD *)this + 94) + 260);
            v87 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 744));
            if (v87)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "DepthFeathering", (const re::RenderGraphProviderBase *)(v87 + 8), 0, 0, (uint64_t)&v148);
              v88 = v148;
              *(_QWORD *)&v148 = 0;
              *((_QWORD *)&v148 + 1) = &str_110;
              v89 = *((_QWORD *)this + 170);
              *((_QWORD *)this + 170) = v88;
              v90 = v88 & 0xFFFFFFFFFFFFFFFELL | v89 & 1;
              v91 = *((_QWORD *)this + 171);
              *((_QWORD *)this + 171) = *((_QWORD *)&v88 + 1);
              v150 = v90;
              v151 = v91;
              re::StringID::destroyString((re::StringID *)&v150);
              *((_QWORD *)this + 172) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  v92 = *((_QWORD *)this + 97);
  if (v92)
  {
    v93 = atomic_load((unsigned int *)(v92 + 704));
    if (v93 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 97), 0);
    v94 = *((_QWORD *)this + 97);
    if (v94)
    {
      v95 = atomic_load((unsigned int *)(v94 + 704));
      if (v95 == 2 && !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1384)))
      {
        v96 = *((_QWORD *)this + 97);
        if (v96)
        {
          v97 = atomic_load((unsigned int *)(v96 + 704));
          if (v97 == 2)
          {
            ++*(_DWORD *)(*((_QWORD *)this + 97) + 260);
            v98 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAREmitter *)((char *)this + 768));
            if (v98)
            {
              re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "GuidedFilterOcclusion", (const re::RenderGraphProviderBase *)(v98 + 8), 0, 0, (uint64_t)&v148);
              v99 = v148;
              *(_QWORD *)&v148 = 0;
              *((_QWORD *)&v148 + 1) = &str_110;
              v100 = *((_QWORD *)this + 173);
              *((_QWORD *)this + 173) = v99;
              v101 = v99 & 0xFFFFFFFFFFFFFFFELL | v100 & 1;
              v102 = *((_QWORD *)this + 174);
              *((_QWORD *)this + 174) = *((_QWORD *)&v99 + 1);
              v150 = v101;
              v151 = v102;
              re::StringID::destroyString((re::StringID *)&v150);
              *((_QWORD *)this + 175) = v149;
              re::StringID::destroyString((re::StringID *)&v148);
            }
          }
        }
      }
    }
  }
  if (*((_BYTE *)this + 1204))
    re::SFBSystemShellBlurProvider::registerProviderCommon((re::SFBSystemShellBlurProvider *)a2, (re::RenderGraphManager *)a3, &v147, (re::RenderGraphAREmitter *)((char *)this + 1576), (re::RenderGraphAREmitter *)((char *)this + 1600), (re::RenderGraphAREmitter *)((char *)this + 1552), v8);
  isValid = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1504));
  if (!isValid)
  {
    v104 = re::globalAllocators((re *)isValid);
    v105 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v104[2] + 32))(v104[2], 88, 8);
    re::DepthStencilCombinerProvider::DepthStencilCombinerProvider(v105, (const re::DynamicString *)v146);
    if (*(_QWORD *)&v146[0])
    {
      if ((BYTE8(v146[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v146[0] + 40))();
      memset(v146, 0, sizeof(v146));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", v105, -10, 1, (uint64_t)&v148);
    v106 = v148;
    *(_QWORD *)&v148 = 0;
    *((_QWORD *)&v148 + 1) = &str_110;
    v107 = *((_QWORD *)this + 188);
    *((_QWORD *)this + 188) = v106;
    v108 = v106 & 0xFFFFFFFFFFFFFFFELL | v107 & 1;
    v109 = *((_QWORD *)this + 189);
    *((_QWORD *)this + 189) = *((_QWORD *)&v106 + 1);
    v150 = v108;
    v151 = v109;
    re::StringID::destroyString((re::StringID *)&v150);
    *((_QWORD *)this + 190) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  v110 = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1528));
  if (!v110)
  {
    v111 = re::globalAllocators((re *)v110);
    v112 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v111[2] + 32))(v111[2], 136, 8);
    re::DepthStencilSplitterProvider::DepthStencilSplitterProvider((uint64_t)v112, (const re::DynamicString *)v145);
    if (*(_QWORD *)&v145[0])
    {
      if ((BYTE8(v145[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v145[0] + 40))();
      memset(v145, 0, sizeof(v145));
    }
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v148, a3, "engine:BuiltinRenderGraphResources/Common/separateDepth.rematerial");
    v113 = *(_OWORD *)(v112 + 11);
    *(_OWORD *)(v112 + 11) = v148;
    v148 = v113;
    v114 = v112[13];
    v112[13] = v149;
    v149 = v114;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v148);
    re::AssetHandle::loadAsync((re::AssetHandle *)(v112 + 11));
    re::AssetHandle::operator=((uint64_t *)this + 28, v112 + 11);
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v148, a3, "engine:BuiltinRenderGraphResources/Common/separateStencil.rematerial");
    v115 = *((_OWORD *)v112 + 7);
    *((_OWORD *)v112 + 7) = v148;
    v148 = v115;
    v116 = v112[16];
    v112[16] = v149;
    v149 = v116;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v148);
    re::AssetHandle::loadAsync((re::AssetHandle *)(v112 + 14));
    re::AssetHandle::operator=((uint64_t *)this + 25, v112 + 14);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)v112, 10, 1, (uint64_t)&v148);
    v117 = v148;
    *(_QWORD *)&v148 = 0;
    *((_QWORD *)&v148 + 1) = &str_110;
    v118 = *((_QWORD *)this + 191);
    *((_QWORD *)this + 191) = v117;
    v119 = v117 & 0xFFFFFFFFFFFFFFFELL | v118 & 1;
    v120 = *((_QWORD *)this + 192);
    *((_QWORD *)this + 192) = *((_QWORD *)&v117 + 1);
    v150 = v119;
    v151 = v120;
    re::StringID::destroyString((re::StringID *)&v150);
    *((_QWORD *)this + 193) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  v121 = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1456));
  if (!v121)
  {
    v122 = re::globalAllocators((re *)v121);
    v123 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v122[2] + 32))(v122[2], 112, 8);
    re::VRRUnwarpProvider::VRRUnwarpProvider(v123, (const re::DynamicString *)v144);
    if (*(_QWORD *)&v144[0])
    {
      if ((BYTE8(v144[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v144[0] + 40))();
      memset(v144, 0, sizeof(v144));
    }
    re::AssetHandle::operator=(v123 + 5, (uint64_t *)&v147);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)v123, 50, 1, (uint64_t)&v148);
    v124 = v148;
    *(_QWORD *)&v148 = 0;
    *((_QWORD *)&v148 + 1) = &str_110;
    v125 = *((_QWORD *)this + 182);
    *((_QWORD *)this + 182) = v124;
    v126 = v124 & 0xFFFFFFFFFFFFFFFELL | v125 & 1;
    v127 = *((_QWORD *)this + 183);
    *((_QWORD *)this + 183) = *((_QWORD *)&v124 + 1);
    v150 = v126;
    v151 = v127;
    re::StringID::destroyString((re::StringID *)&v150);
    *((_QWORD *)this + 184) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  v128 = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1480));
  if (!v128)
  {
    v129 = re::globalAllocators((re *)v128);
    v130 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v129[2] + 32))(v129[2], 48, 8);
    re::VFXRenderGraphProvider::VFXRenderGraphProvider((uint64_t)v130, (const re::DynamicString *)v143);
    if (*(_QWORD *)&v143[0])
    {
      if ((BYTE8(v143[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v143[0] + 40))();
      memset(v143, 0, sizeof(v143));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "VFXSimulation", v130, 0, 1, (uint64_t)&v148);
    v131 = v148;
    *(_QWORD *)&v148 = 0;
    *((_QWORD *)&v148 + 1) = &str_110;
    v132 = *((_QWORD *)this + 185);
    *((_QWORD *)this + 185) = v131;
    v133 = v131 & 0xFFFFFFFFFFFFFFFELL | v132 & 1;
    v134 = *((_QWORD *)this + 186);
    *((_QWORD *)this + 186) = *((_QWORD *)&v131 + 1);
    v150 = v133;
    v151 = v134;
    re::StringID::destroyString((re::StringID *)&v150);
    *((_QWORD *)this + 187) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  v135 = re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1624));
  if (!v135)
  {
    v136 = re::globalAllocators((re *)v135);
    v137 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v136[2] + 32))(v136[2], 192, 8);
    re::RayTracedAmbientOcclusionProvider::RayTracedAmbientOcclusionProvider((uint64_t)v137, (const re::DynamicString *)v142);
    *((_QWORD *)this + 206) = v137;
    if (*(_QWORD *)&v142[0])
    {
      if ((BYTE8(v142[0]) & 1) != 0)
      {
        (*(void (**)(void))(**(_QWORD **)&v142[0] + 40))();
        v137 = (_anonymous_namespace_ *)*((_QWORD *)this + 206);
      }
      memset(v142, 0, sizeof(v142));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", v137, 20, 1, (uint64_t)&v148);
    v138 = v148;
    *(_QWORD *)&v148 = 0;
    *((_QWORD *)&v148 + 1) = &str_110;
    v139 = *((_QWORD *)this + 203);
    *((_QWORD *)this + 203) = v138;
    v140 = v138 & 0xFFFFFFFFFFFFFFFELL | v139 & 1;
    v141 = *((_QWORD *)this + 204);
    *((_QWORD *)this + 204) = *((_QWORD *)&v138 + 1);
    v150 = v140;
    v151 = v141;
    re::StringID::destroyString((re::StringID *)&v150);
    *((_QWORD *)this + 205) = v149;
    re::StringID::destroyString((re::StringID *)&v148);
  }
  re::ARSegmentationEmitterCache::registerRenderGraphProvider(*((re::ARSegmentationEmitterCache **)this + 228), (re::RenderGraphManager *)a2);
  *((_QWORD *)this + 151) = a2;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v147);
}

void re::RenderGraphAREmitter::frameSetup(re::RenderGraphAREmitter *this, re::RenderManager *a2)
{
  uint64_t v4;
  uint64_t v5;
  const re::AssetHandle *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphManager *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  re::ar::DualGuidedFilter *v17;
  id v18;
  void *v19;
  _BYTE v20[8];
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[2];

  if (*((unsigned __int8 *)this + 1656) != *((unsigned __int8 *)this + 1172)
    || !re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1336)))
  {
    if (re::FontID::isValid((re::RenderGraphAREmitter *)((char *)this + 1336)))
    {
      v4 = *((_QWORD *)a2 + 13);
      if (v4)
        v5 = *(_QWORD *)(v4 + 296);
      else
        v5 = 0;
      re::StringID::StringID((re::StringID *)v22, (const StringID *)((char *)this + 1336));
      v23 = *((_QWORD *)this + 169);
      re::RenderGraphManager::removeProvider(v5, (uint64_t)v22);
      re::StringID::destroyString((re::StringID *)v22);
      re::ProviderHandle::invalidate((re::RenderGraphAREmitter *)((char *)this + 1336));
    }
    if (*((_BYTE *)this + 1172))
      v6 = (re::RenderGraphAREmitter *)((char *)this + 1032);
    else
      v6 = (re::RenderGraphAREmitter *)((char *)this + 1008);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v20, v6);
    if (v21)
    {
      re::AssetHandle::loadNow(v21, 0);
      if (v21)
      {
        v7 = atomic_load((unsigned int *)(v21 + 704));
        if (v7 == 2)
        {
          ++*(_DWORD *)(v21 + 260);
          v8 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>((re::RenderGraphAsset *)v20);
          if (v8)
          {
            v9 = *((_QWORD *)a2 + 13);
            if (v9)
              v10 = *(re::RenderGraphManager **)(v9 + 296);
            else
              v10 = 0;
            re::RenderGraphManager::addProviderInternal(v10, "PostProcessCombined", (const re::RenderGraphProviderBase *)(v8 + 8), 0, 0, (uint64_t)&v24);
            v11 = (unint64_t)v24;
            v12 = v25;
            v24 = 0;
            v25 = &str_110;
            v13 = *((_QWORD *)this + 167);
            *((_QWORD *)this + 167) = v11;
            v14 = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
            v15 = *((_QWORD *)this + 168);
            *((_QWORD *)this + 168) = v12;
            v27[0] = v14;
            v27[1] = v15;
            re::StringID::destroyString((re::StringID *)v27);
            *((_QWORD *)this + 169) = v26;
            re::StringID::destroyString((re::StringID *)&v24);
          }
        }
      }
    }
    *((_BYTE *)this + 1656) = *((_BYTE *)this + 1172);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
  }
  if (!*((_QWORD *)this + 229))
  {
    v16 = (void **)((char *)this + 1832);
    v17 = (re::RenderManager *)((char *)a2 + 184);
    re::ar::DualGuidedFilter::create(v17, 0, &v24);
    if ((id *)((char *)this + 1832) != &v24)
    {
      v18 = v24;
      v24 = 0;
      v19 = *v16;
      *v16 = v18;

    }
    v24 = objc_msgSend(*(id *)v17, sel_newEvent);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 230, &v24);
    if (v24)

    objc_msgSend(*((id *)this + 230), sel_setLabel_, CFSTR("DualGuidedFilterCoefficientsEvent"));
    *((_QWORD *)this + 231) = 0;
  }
}

void re::introspect_RenderGraphAREmitterPostProcessOption(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  StringID v42;
  _QWORD v43[2];
  _QWORD v44[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254121030);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254121030);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Fastest";
      qword_254121070 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Standard";
      qword_254121078 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "High";
      qword_254121080 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "Best";
      qword_254121088 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "MultiView";
      qword_254121090 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = 5;
      *(_QWORD *)(v38 + 16) = "Low";
      qword_254121098 = v38;
      __cxa_guard_release(&qword_254121030);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254121038);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254121038))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541210A0, "RenderGraphAREmitterPostProcessOption", 4, 4, 1, 1);
    qword_2541210A0 = (uint64_t)&off_24ED7D9E8;
    qword_2541210E0 = (uint64_t)&re::introspect_RenderGraphAREmitterPostProcessOption(BOOL)::enumTable;
    dword_2541210B0 = 9;
    __cxa_guard_release(&qword_254121038);
  }
  if ((_MergedGlobals_468 & 1) == 0)
  {
    _MergedGlobals_468 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541210A0, a2);
    v40 = 0x495BDF4BE72D0B7ELL;
    v41 = "RenderGraphAREmitterPostProcessOption";
    v44[0] = 0x607DD0F01DCLL;
    v44[1] = "uint32_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v44);
      v6 = (unsigned int *)qword_2541210E0;
      v43[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v44, &v40, 1, 1, (uint64_t)v43);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v42.var0 = 2 * v12;
            v42.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v16, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v42.var0 = 2 * v20;
              v42.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v24, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v25);
      xmmword_2541210C0 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v44);
      re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderGraphAREmitterPostProcessOption", v40, v41);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::allocInfo_RenderGraphAREmitter(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254121040);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254121040))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541210E8, 0);
    *(uint64_t *)((char *)&qword_2541210F8 + 6) = 0;
    qword_2541210F8 = 0;
    qword_254121108 = 0;
    qword_254121110 = 0xFFFFFFFFLL;
    qword_2541210E8 = (uint64_t)&off_24ED7DAA8;
    qword_254121118 = (uint64_t)"RenderGraphAREmitter";
    dword_254121120 = 0;
    unk_254121128 = 0u;
    unk_254121138 = 0u;
    xmmword_254121148 = 0u;
    qword_254121158 = 0;
    __cxa_guard_release(&qword_254121040);
  }
  return &qword_2541210E8;
}

void re::initInfo_RenderGraphAREmitter(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  uint64_t v47;
  uint64_t *v48;
  const re::IntrospectionBase *v49;
  void *v50;
  uint64_t v51;
  uint64_t *v52;
  const re::IntrospectionBase *v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  const re::IntrospectionBase *v57;
  void *v58;
  uint64_t v59;
  uint64_t *v60;
  const re::IntrospectionBase *v61;
  void *v62;
  uint64_t v63;
  uint64_t *v64;
  const re::IntrospectionBase *v65;
  void *v66;
  uint64_t v67;
  uint64_t *v68;
  const re::IntrospectionBase *v69;
  void *v70;
  uint64_t v71;
  uint64_t *v72;
  const re::IntrospectionBase *v73;
  void *v74;
  uint64_t v75;
  uint64_t *v76;
  const re::IntrospectionBase *v77;
  void *v78;
  uint64_t v79;
  uint64_t *v80;
  const re::IntrospectionBase *v81;
  void *v82;
  uint64_t v83;
  uint64_t *v84;
  const re::IntrospectionBase *v85;
  void *v86;
  uint64_t v87;
  uint64_t *v88;
  const re::IntrospectionBase *v89;
  void *v90;
  uint64_t v91;
  uint64_t *v92;
  const re::IntrospectionBase *v93;
  void *v94;
  uint64_t v95;
  uint64_t *v96;
  const re::IntrospectionBase *v97;
  void *v98;
  uint64_t v99;
  uint64_t *v100;
  const re::IntrospectionBase *v101;
  void *v102;
  uint64_t v103;
  uint64_t *v104;
  const re::IntrospectionBase *v105;
  void *v106;
  uint64_t v107;
  uint64_t *v108;
  const re::IntrospectionBase *v109;
  void *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  const re::IntrospectionBase *v116;
  void *v117;
  uint64_t v118;
  uint64_t *v119;
  const re::IntrospectionBase *v120;
  void *v121;
  uint64_t v122;
  uint64_t *v123;
  const re::IntrospectionBase *v124;
  void *v125;
  uint64_t v126;
  uint64_t *v127;
  const re::IntrospectionBase *v128;
  void *v129;
  uint64_t v130;
  uint64_t *v131;
  const re::IntrospectionBase *v132;
  void *v133;
  uint64_t v134;
  __int128 v135;
  _QWORD v136[2];
  __int128 v137;

  v136[0] = 0x228CD2A2CBEEF78ALL;
  v136[1] = "RenderGraphAREmitter";
  re::StringID::destroyString((re::StringID *)v136);
  *((_OWORD *)this + 2) = v137;
  v4 = atomic_load((unsigned __int8 *)&qword_254121048);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121048);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RealityEmitterBase((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RealityEmitterBase";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121160 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "shadowMapGraph";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x33000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254121168 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "depthFeatheringGraph";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2E800000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254121170 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_AssetHandle((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "guidedFilterOcclusionGraph";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x30000000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254121178 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_AssetHandle((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "cameraGraph";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x31800000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254121180 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_AssetHandle((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "postProcessGraphFastest";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x34800000008;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254121188 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_AssetHandle((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "postProcessGraphStandard";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x36000000009;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254121190 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_AssetHandle((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "postProcessGraphHigh";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x3780000000ALL;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254121198 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_AssetHandle((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "postProcessGraphBest";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x3900000000BLL;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_2541211A0 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v43 = re::introspect_AssetHandle((re *)1, v42);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "postProcessGraphMultiView";
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x3A80000000CLL;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_2541211A8 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      re::introspect_RenderGraphAREmitterPostProcessOption((re *)v45, v46);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "postProcessOption";
      *(_QWORD *)(v47 + 16) = &qword_2541210A0;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0x4200000000DLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_2541211B0 = v47;
      v48 = re::introspectionAllocator((re *)v47);
      v50 = re::introspect_AssetHandle((re *)1, v49);
      v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 72, 8);
      *(_DWORD *)v51 = 1;
      *(_QWORD *)(v51 + 8) = "postProcessGraphDepthOfField";
      *(_QWORD *)(v51 + 16) = v50;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0x3C00000000ELL;
      *(_DWORD *)(v51 + 40) = 0;
      *(_QWORD *)(v51 + 48) = 0;
      *(_QWORD *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_2541211B8 = v51;
      v52 = re::introspectionAllocator((re *)v51);
      v54 = re::introspect_AssetHandle((re *)1, v53);
      v55 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
      *(_DWORD *)v55 = 1;
      *(_QWORD *)(v55 + 8) = "postProcessGraphMotionBlur";
      *(_QWORD *)(v55 + 16) = v54;
      *(_QWORD *)(v55 + 24) = 0;
      *(_QWORD *)(v55 + 32) = 0x3D80000000FLL;
      *(_DWORD *)(v55 + 40) = 0;
      *(_QWORD *)(v55 + 48) = 0;
      *(_QWORD *)(v55 + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_2541211C0 = v55;
      v56 = re::introspectionAllocator((re *)v55);
      v58 = re::introspect_AssetHandle((re *)1, v57);
      v59 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 72, 8);
      *(_DWORD *)v59 = 1;
      *(_QWORD *)(v59 + 8) = "postProcessGraphCombined";
      *(_QWORD *)(v59 + 16) = v58;
      *(_QWORD *)(v59 + 24) = 0;
      *(_QWORD *)(v59 + 32) = 0x3F000000010;
      *(_DWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 56) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_2541211C8 = v59;
      v60 = re::introspectionAllocator((re *)v59);
      v62 = re::introspect_AssetHandle((re *)1, v61);
      v63 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 72, 8);
      *(_DWORD *)v63 = 1;
      *(_QWORD *)(v63 + 8) = "postProcessGraphCombinedHDR";
      *(_QWORD *)(v63 + 16) = v62;
      *(_QWORD *)(v63 + 24) = 0;
      *(_QWORD *)(v63 + 32) = 0x40800000011;
      *(_DWORD *)(v63 + 40) = 0;
      *(_QWORD *)(v63 + 48) = 0;
      *(_QWORD *)(v63 + 56) = 0;
      *(_DWORD *)(v63 + 64) = 0;
      qword_2541211D0 = v63;
      v64 = re::introspectionAllocator((re *)v63);
      v66 = re::introspect_uint32_t((re *)1, v65);
      v67 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 72, 8);
      *(_DWORD *)v67 = 1;
      *(_QWORD *)(v67 + 8) = "clusterHorizontalSlices";
      *(_QWORD *)(v67 + 16) = v66;
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0x47800000012;
      *(_DWORD *)(v67 + 40) = 0;
      *(_QWORD *)(v67 + 48) = 0;
      *(_QWORD *)(v67 + 56) = 0;
      *(_DWORD *)(v67 + 64) = 0;
      qword_2541211D8 = v67;
      v68 = re::introspectionAllocator((re *)v67);
      v70 = re::introspect_uint32_t((re *)1, v69);
      v71 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v68 + 32))(v68, 72, 8);
      *(_DWORD *)v71 = 1;
      *(_QWORD *)(v71 + 8) = "clusterVerticalSlices";
      *(_QWORD *)(v71 + 16) = v70;
      *(_QWORD *)(v71 + 24) = 0;
      *(_QWORD *)(v71 + 32) = 0x47C00000013;
      *(_DWORD *)(v71 + 40) = 0;
      *(_QWORD *)(v71 + 48) = 0;
      *(_QWORD *)(v71 + 56) = 0;
      *(_DWORD *)(v71 + 64) = 0;
      qword_2541211E0 = v71;
      v72 = re::introspectionAllocator((re *)v71);
      v74 = re::introspect_uint32_t((re *)1, v73);
      v75 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v72 + 32))(v72, 72, 8);
      *(_DWORD *)v75 = 1;
      *(_QWORD *)(v75 + 8) = "clusterDepthSlices";
      *(_QWORD *)(v75 + 16) = v74;
      *(_QWORD *)(v75 + 24) = 0;
      *(_QWORD *)(v75 + 32) = 0x48000000014;
      *(_DWORD *)(v75 + 40) = 0;
      *(_QWORD *)(v75 + 48) = 0;
      *(_QWORD *)(v75 + 56) = 0;
      *(_DWORD *)(v75 + 64) = 0;
      qword_2541211E8 = v75;
      v76 = re::introspectionAllocator((re *)v75);
      v78 = re::introspect_float((re *)1, v77);
      v79 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v76 + 32))(v76, 72, 8);
      *(_DWORD *)v79 = 1;
      *(_QWORD *)(v79 + 8) = "clusterMaxDepthRange";
      *(_QWORD *)(v79 + 16) = v78;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0x48400000015;
      *(_DWORD *)(v79 + 40) = 0;
      *(_QWORD *)(v79 + 48) = 0;
      *(_QWORD *)(v79 + 56) = 0;
      *(_DWORD *)(v79 + 64) = 0;
      qword_2541211F0 = v79;
      v80 = re::introspectionAllocator((re *)v79);
      v82 = re::introspect_uint32_t((re *)1, v81);
      v83 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v80 + 32))(v80, 72, 8);
      *(_DWORD *)v83 = 1;
      *(_QWORD *)(v83 + 8) = "clusterMaxIntersectionFactor";
      *(_QWORD *)(v83 + 16) = v82;
      *(_QWORD *)(v83 + 24) = 0;
      *(_QWORD *)(v83 + 32) = 0x48800000016;
      *(_DWORD *)(v83 + 40) = 0;
      *(_QWORD *)(v83 + 48) = 0;
      *(_QWORD *)(v83 + 56) = 0;
      *(_DWORD *)(v83 + 64) = 0;
      qword_2541211F8 = v83;
      v84 = re::introspectionAllocator((re *)v83);
      v86 = re::introspect_BOOL((re *)1, v85);
      v87 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v84 + 32))(v84, 72, 8);
      *(_DWORD *)v87 = 1;
      *(_QWORD *)(v87 + 8) = "enableRayTracedAmbientOcclusion";
      *(_QWORD *)(v87 + 16) = v86;
      *(_QWORD *)(v87 + 24) = 0;
      *(_QWORD *)(v87 + 32) = 0x48C00000017;
      *(_DWORD *)(v87 + 40) = 0;
      *(_QWORD *)(v87 + 48) = 0;
      *(_QWORD *)(v87 + 56) = 0;
      *(_DWORD *)(v87 + 64) = 0;
      qword_254121200 = v87;
      v88 = re::introspectionAllocator((re *)v87);
      v90 = re::introspect_BOOL((re *)1, v89);
      v91 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v88 + 32))(v88, 72, 8);
      *(_DWORD *)v91 = 1;
      *(_QWORD *)(v91 + 8) = "enableProjectiveShadow";
      *(_QWORD *)(v91 + 16) = v90;
      *(_QWORD *)(v91 + 24) = 0;
      *(_QWORD *)(v91 + 32) = 0x48D00000018;
      *(_DWORD *)(v91 + 40) = 0;
      *(_QWORD *)(v91 + 48) = 0;
      *(_QWORD *)(v91 + 56) = 0;
      *(_DWORD *)(v91 + 64) = 0;
      qword_254121208 = v91;
      v92 = re::introspectionAllocator((re *)v91);
      v94 = re::introspect_BOOL((re *)1, v93);
      v95 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v92 + 32))(v92, 72, 8);
      *(_DWORD *)v95 = 1;
      *(_QWORD *)(v95 + 8) = "enableDepthOfField";
      *(_QWORD *)(v95 + 16) = v94;
      *(_QWORD *)(v95 + 24) = 0;
      *(_QWORD *)(v95 + 32) = 0x48E00000019;
      *(_DWORD *)(v95 + 40) = 0;
      *(_QWORD *)(v95 + 48) = 0;
      *(_QWORD *)(v95 + 56) = 0;
      *(_DWORD *)(v95 + 64) = 0;
      qword_254121210 = v95;
      v96 = re::introspectionAllocator((re *)v95);
      v98 = re::introspect_BOOL((re *)1, v97);
      v99 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v96 + 32))(v96, 72, 8);
      *(_DWORD *)v99 = 1;
      *(_QWORD *)(v99 + 8) = "enableMotionBlur";
      *(_QWORD *)(v99 + 16) = v98;
      *(_QWORD *)(v99 + 24) = 0;
      *(_QWORD *)(v99 + 32) = 0x48F0000001ALL;
      *(_DWORD *)(v99 + 40) = 0;
      *(_QWORD *)(v99 + 48) = 0;
      *(_QWORD *)(v99 + 56) = 0;
      *(_DWORD *)(v99 + 64) = 0;
      qword_254121218 = v99;
      v100 = re::introspectionAllocator((re *)v99);
      v102 = re::introspect_BOOL((re *)1, v101);
      v103 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v100 + 32))(v100, 72, 8);
      *(_DWORD *)v103 = 1;
      *(_QWORD *)(v103 + 8) = "enablePostProcessCombined";
      *(_QWORD *)(v103 + 16) = v102;
      *(_QWORD *)(v103 + 24) = 0;
      *(_QWORD *)(v103 + 32) = 0x4900000001BLL;
      *(_DWORD *)(v103 + 40) = 0;
      *(_QWORD *)(v103 + 48) = 0;
      *(_QWORD *)(v103 + 56) = 0;
      *(_DWORD *)(v103 + 64) = 0;
      qword_254121220 = v103;
      v104 = re::introspectionAllocator((re *)v103);
      v106 = re::introspect_BOOL((re *)1, v105);
      v107 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v104 + 32))(v104, 72, 8);
      *(_DWORD *)v107 = 1;
      *(_QWORD *)(v107 + 8) = "enableDepthFeathering";
      *(_QWORD *)(v107 + 16) = v106;
      *(_QWORD *)(v107 + 24) = 0;
      *(_QWORD *)(v107 + 32) = 0x4910000001CLL;
      *(_DWORD *)(v107 + 40) = 0;
      *(_QWORD *)(v107 + 48) = 0;
      *(_QWORD *)(v107 + 56) = 0;
      *(_DWORD *)(v107 + 64) = 0;
      qword_254121228 = v107;
      v108 = re::introspectionAllocator((re *)v107);
      v110 = re::introspect_BOOL((re *)1, v109);
      v111 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v108 + 32))(v108, 72, 8);
      *(_DWORD *)v111 = 1;
      *(_QWORD *)(v111 + 8) = "enableHDR";
      *(_QWORD *)(v111 + 16) = v110;
      *(_QWORD *)(v111 + 24) = 0;
      *(_QWORD *)(v111 + 32) = 0x4940000001DLL;
      *(_DWORD *)(v111 + 40) = 0;
      *(_QWORD *)(v111 + 48) = 0;
      *(_QWORD *)(v111 + 56) = 0;
      *(_DWORD *)(v111 + 64) = 0;
      qword_254121230 = v111;
      v112 = re::introspectionAllocator((re *)v111);
      v113 = re::introspect_RayTracedAmbientOcclusionSettings((re::IntrospectionBase **)1);
      v114 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v112 + 32))(v112, 72, 8);
      *(_DWORD *)v114 = 1;
      *(_QWORD *)(v114 + 8) = "rayTracedAmbientOcclusionSettings";
      *(_QWORD *)(v114 + 16) = v113;
      *(_QWORD *)(v114 + 24) = 0;
      *(_QWORD *)(v114 + 32) = 0x4980000001ELL;
      *(_DWORD *)(v114 + 40) = 0;
      *(_QWORD *)(v114 + 48) = 0;
      *(_QWORD *)(v114 + 56) = 0;
      *(_DWORD *)(v114 + 64) = 0;
      qword_254121238 = v114;
      v115 = re::introspectionAllocator((re *)v114);
      v117 = re::introspect_float((re *)1, v116);
      v118 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v115 + 32))(v115, 72, 8);
      *(_DWORD *)v118 = 1;
      *(_QWORD *)(v118 + 8) = "rayTracedShadowIntensity";
      *(_QWORD *)(v118 + 16) = v117;
      *(_QWORD *)(v118 + 24) = 0;
      *(_QWORD *)(v118 + 32) = 0x4B00000001FLL;
      *(_DWORD *)(v118 + 40) = 0;
      *(_QWORD *)(v118 + 48) = 0;
      *(_QWORD *)(v118 + 56) = 0;
      *(_DWORD *)(v118 + 64) = 0;
      qword_254121240 = v118;
      v119 = re::introspectionAllocator((re *)v118);
      v121 = re::introspect_AssetHandle((re *)1, v120);
      v122 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v119 + 32))(v119, 72, 8);
      *(_DWORD *)v122 = 1;
      *(_QWORD *)(v122 + 8) = "rayTracedAmbientOcclusionCompositingMaterial";
      *(_QWORD *)(v122 + 16) = v121;
      *(_QWORD *)(v122 + 24) = 0;
      *(_QWORD *)(v122 + 32) = 0x42800000020;
      *(_DWORD *)(v122 + 40) = 0;
      *(_QWORD *)(v122 + 48) = 0;
      *(_QWORD *)(v122 + 56) = 0;
      *(_DWORD *)(v122 + 64) = 0;
      qword_254121248 = v122;
      v123 = re::introspectionAllocator((re *)v122);
      v125 = re::introspect_AssetHandle((re *)1, v124);
      v126 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v123 + 32))(v123, 72, 8);
      *(_DWORD *)v126 = 1;
      *(_QWORD *)(v126 + 8) = "rayTracedAmbientOcclusionCompositingMaterialDitherSRGB";
      *(_QWORD *)(v126 + 16) = v125;
      *(_QWORD *)(v126 + 24) = 0;
      *(_QWORD *)(v126 + 32) = 0x44000000021;
      *(_DWORD *)(v126 + 40) = 0;
      *(_QWORD *)(v126 + 48) = 0;
      *(_QWORD *)(v126 + 56) = 0;
      *(_DWORD *)(v126 + 64) = 0;
      qword_254121250 = v126;
      v127 = re::introspectionAllocator((re *)v126);
      v129 = re::introspect_AssetHandle((re *)1, v128);
      v130 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v127 + 32))(v127, 72, 8);
      *(_DWORD *)v130 = 1;
      *(_QWORD *)(v130 + 8) = "rayTracedAmbientOcclusionCompositingMaterialDitherLinear";
      *(_QWORD *)(v130 + 16) = v129;
      *(_QWORD *)(v130 + 24) = 0;
      *(_QWORD *)(v130 + 32) = 0x45800000022;
      *(_DWORD *)(v130 + 40) = 0;
      *(_QWORD *)(v130 + 48) = 0;
      *(_QWORD *)(v130 + 56) = 0;
      *(_DWORD *)(v130 + 64) = 0;
      qword_254121258 = v130;
      v131 = re::introspectionAllocator((re *)v130);
      v133 = re::introspect_BOOL((re *)1, v132);
      v134 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v131 + 32))(v131, 72, 8);
      *(_DWORD *)v134 = 1;
      *(_QWORD *)(v134 + 8) = "enableBlurProvider";
      *(_QWORD *)(v134 + 16) = v133;
      *(_QWORD *)(v134 + 24) = 0;
      *(_QWORD *)(v134 + 32) = 0x4B400000024;
      *(_DWORD *)(v134 + 40) = 0;
      *(_QWORD *)(v134 + 48) = 0;
      *(_QWORD *)(v134 + 56) = 0;
      *(_DWORD *)(v134 + 64) = 0;
      qword_254121260 = v134;
      __cxa_guard_release(&qword_254121048);
    }
  }
  *((_QWORD *)this + 2) = 0x74000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 33;
  *((_QWORD *)this + 8) = &qword_254121160;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphAREmitter>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphAREmitter>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphAREmitter>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphAREmitter>;
  re::IntrospectionRegistry::add(this, v3);
  v135 = v137;
}

re::RenderGraphAREmitter *re::internal::defaultConstruct<re::RenderGraphAREmitter>(int a1, int a2, re::RenderGraphAREmitter *this)
{
  return re::RenderGraphAREmitter::RenderGraphAREmitter(this);
}

void re::internal::defaultDestruct<re::RenderGraphAREmitter>(int a1, int a2, re::RenderGraphAREmitter *this)
{
  re::RenderGraphAREmitter::~RenderGraphAREmitter(this);
}

uint64_t re::introspect_RenderGraphAREmitter(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphAREmitter", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphAREmitter, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphAREmitter, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphAREmitter>, this);
}

void re::GuidedFilterOcclusionStateData::~GuidedFilterOcclusionStateData(id *this)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v2 = this[13];
  if (v2)
  {

    this[13] = 0;
  }
  v3 = this[12];
  if (v3)
  {

    this[12] = 0;
  }
  v4 = this[11];
  if (v4)
  {

    this[11] = 0;
  }
  v5 = this[10];
  if (v5)
  {

    this[10] = 0;
  }
  v6 = this[9];
  if (v6)
  {

    this[9] = 0;
  }
  v7 = this[8];
  if (v7)
  {

    this[8] = 0;
  }
  v8 = this[7];
  if (v8)
  {

    this[7] = 0;
  }
  v9 = this[6];
  if (v9)
  {

    this[6] = 0;
  }
  v10 = this[5];
  if (v10)
  {

    this[5] = 0;
  }
  v11 = this[4];
  if (v11)
  {

    this[4] = 0;
  }
  v12 = this[3];
  if (v12)
  {

    this[3] = 0;
  }
  v13 = this[2];
  if (v13)
  {

    this[2] = 0;
  }
  v14 = this[1];
  if (v14)
  {

    this[1] = 0;
  }
}

void re::SceneUnderstandingGuidedFilterOcclusionConnectionData::~SceneUnderstandingGuidedFilterOcclusionConnectionData(re::SceneUnderstandingGuidedFilterOcclusionConnectionData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::ARSegmentationEmitterCache::~ARSegmentationEmitterCache(re::ARSegmentationEmitterCache *this)
{
  void *v2;
  void *v3;
  void *v4;

  re::StringID::destroyString((re::ARSegmentationEmitterCache *)((char *)this + 64));
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {

    *((_QWORD *)this + 5) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {

    *((_QWORD *)this + 4) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {

    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;
  void *v3;
  void *v4;

  re::StringID::destroyString((re::ARSegmentationEmitterCache *)((char *)this + 64));
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {

    *((_QWORD *)this + 5) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {

    *((_QWORD *)this + 4) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {

    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphFile::setRuntimeNodeSetting<re::DynamicString>(re::RenderGraphFile *a1, const re::StringID *a2, char *a3, char *a4)
{
  const char *v5;
  unsigned __int8 v6;
  __guard *v7;
  int v9;
  int v10;
  const re::IntrospectionBase *v11;
  char *v13;
  re::RenderGraphFile *v14;

  v5 = a3;
  if ((v6 & 1) == 0)
  {
    v14 = a1;
    v13 = a4;
    v11 = a2;
    a2 = v11;
    v5 = a3;
    a4 = v13;
    v10 = v9;
    a1 = v14;
    if (v10)
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v11);
      a1 = v14;
      a2 = v11;
      v5 = a3;
      a4 = v13;
    }
  }
  return re::RenderGraphFile::setRuntimeNodeSetting(a1, a2, (const re::IntrospectionBase *)v7[42], v5, a4);
}

uint64_t re::supportedColorPixelFormat(id *this, const re::mtl::Device *a2)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_254121280);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254121280))
  {
    _MergedGlobals_469 = objc_msgSend(*this, "supportsFamily:", 1002);
    __cxa_guard_release(&qword_254121280);
  }
  if (_MergedGlobals_469)
    return 81;
  else
    return 115;
}

uint64_t re::RenderGraphSFBSystemShellBlurProvider::prepareVCABlur(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  float32x4_t *v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t p_buf;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  float32x4_t *v21;
  const float *v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t *v68;
  _QWORD *v69;
  float32x4_t v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t *v80;
  char isBoundingBoxInsidePlanesArray;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t v84;
  uint32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  float32x4_t v92;
  uint64_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  simd_float4 v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  unint64_t v108;
  float32x4_t v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int32x4_t v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x4_t v139;
  int32x4_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x4_t v143;
  int32x4_t v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x4_t v154;
  int8x16_t v155;
  unsigned int v156;
  float32x4_t v157;
  float32x4_t v158;
  int8x16_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  uint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  simd_float4x4 v174;
  float32x4_t v175;
  float32x4_t v176;
  uint64_t v177;
  BOOL v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float v183;
  float v184;
  float v185;
  float v186;
  int8x16_t v187;
  float *v188;
  uint64_t v189;
  float v190;
  uint64_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  uint32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float v250;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float v261;
  _BOOL4 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  _anonymous_namespace_ *v275;
  uint64_t v276;
  int v277;
  float32x4_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  unsigned int v295;
  uint64_t v296;
  int isBoundingBoxInsidePlanes;
  char *v298;
  _BYTE *v299;
  int v300;
  uint64_t v301;
  float32x4_t *v302;
  float32x4_t *v303;
  float32x4_t *v304;
  float32x4_t *v305;
  uint64_t *v306;
  int *v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  float32x4_t *v311;
  simd_float4 *v312;
  float32x4_t *v313;
  float32x4_t *v314;
  uint64_t *v315;
  int *v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  float32x4_t *v320;
  unsigned int v321;
  uint64_t v322;
  unsigned int *v323;
  __int128 *v325;
  _OWORD *v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  _QWORD *v332;
  _QWORD *v333;
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  unint64_t v339;
  unsigned __int8 *v340;
  uint64_t v341;
  unsigned int v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  __int128 *v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  unint64_t v370;
  unsigned __int8 *v371;
  uint64_t v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  re *v377;
  unint64_t v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  __int128 v384;
  __int128 v385;
  re *v386;
  uint64_t v387;
  simd_float4 v388;
  simd_float4 v389;
  simd_float4 v390;
  __int128 v391;
  __int128 v392;
  unint64_t v393;
  simd_float4 v394;
  simd_float4 v395;
  simd_float4 v396;
  uint64_t v397;
  uint64_t v398;
  unsigned __int8 v399;
  NSObject *v400;
  const char *v401;
  unsigned __int8 v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  double v411;
  re *v413;
  const char *v414;
  float32x4_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  int v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  float32x4_t *v423;
  _anonymous_namespace_ *v424;
  uint64_t *v425;
  unint64_t v426;
  float v428;
  float v429;
  float v430;
  _QWORD *v431;
  float32x4_t v432;
  __int8 *v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  uint64_t *v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t *v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  _BYTE *v447;
  float32x4_t v448;
  float32x4_t v449;
  uint64_t v450;
  float32x4_t v451;
  float32x4_t v452;
  unsigned __int32 v453;
  float32x4_t v454;
  void (**v455)(re::VCARenderData *__hidden);
  uint64_t *v456;
  __int128 v457;
  int v458;
  _BYTE v459[52];
  uint64_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  simd_float4 v464;
  unint64_t v465;
  unint64_t v466;
  int v467;
  uint64_t v468;
  uint64_t *v469;
  unint64_t v470;
  unint64_t v471;
  int v472;
  uint64_t v473;
  uint64_t *v474;
  float32x4_t v475;
  _QWORD v476[2];
  float32x4_t v477;
  __int16 v478;
  _QWORD v479[2];
  unint64_t v480;
  int v481;
  float32x4_t *v482;
  uint64_t v483;
  simd_float4x4 buf;
  __int128 v485;
  _BYTE v486[48];
  simd_float4 v487;
  uint64_t v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  _OWORD v504[19];
  void (**v505)(re::CameraProjFrustums *__hidden);
  uint64_t v506;
  int v507;
  _OWORD v508[2];
  float32x4_t v509[3];
  simd_float4 v510;
  __int128 v511;
  uint64_t v512;
  simd_float4x4 v513;
  simd_float4x4 v514;

  LODWORD(v4) = a3;
  v512 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 376);
  v7 = a2 + 32;
  v8 = (float32x4_t *)re::RenderGraphDataStore::tryGet<re::CameraData>(a2 + 32, a1);
  v422 = a1;
  v9 = re::RenderGraphDataStore::tryGet<re::SceneScope>(v7, a1);
  v10 = atomic_load((unsigned __int8 *)&qword_254121278);
  if ((v10 & 1) == 0)
    goto LABEL_331;
  while (1)
  {
    v11 = qword_254121270;
    v12 = re::RigEvaluation::HashString::operator()((int)&v488, *(char **)(v9 + 8));
    v13 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(v7, ((v11 << 6) + (v11 >> 2) + v12 - 0x61C8864680B583E9) ^ v11);
    if (v13)
      v424 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 8) + 984))(*(_QWORD *)(v13 + 8));
    else
      v424 = 0;
    v457 = 0uLL;
    v458 = 0;
    p_buf = (uint64_t)&v459[8];
    memset(v459, 0, 44);
    *(_QWORD *)&v459[44] = 0x7FFFFFFFLL;
    v455 = &off_24ED87090;
    v456 = (uint64_t *)v6;
    re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(&v456, 0);
    ++v458;
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v459[8], v6, 3);
    v16 = a4;
    v17 = a2;
    if (!v8)
      goto LABEL_257;
    v9 = (unint64_t)&v8[9];
    if (v8[9].i32[0] == 1)
      goto LABEL_257;
    v418 = v6;
    v419 = v4;
    v18 = *(_DWORD *)(a4 + 20);
    p_buf = *(unsigned int *)(a4 + 24);
    v19 = *(float *)(a4 + 28);
    v505 = &off_24ED870D0;
    v506 = 0;
    v507 = 0;
    v20 = v8[8].i64[0];
    if (v20)
    {
      v4 = 0;
      v21 = (float32x4_t *)((char *)v8 + 156);
      while (v4 < 2)
      {
        v22 = &v21[-1].f32[2];
        v23 = vld1q_dup_f32(v22);
        v24 = *v21;
        v21 += 4;
        v508[v4] = vdivq_f32(v24, v23);
        v4 = ++v506;
        ++v507;
        if (!--v20)
          goto LABEL_13;
      }
      goto LABEL_330;
    }
    v4 = 0;
LABEL_13:
    v25 = (unint64_t)"N2re18CameraProjFrustumsE";
    if (((unint64_t)"N2re18CameraProjFrustumsE" & 0x8000000000000000) != 0)
    {
      v26 = (unsigned __int8 *)((unint64_t)"N2re18CameraProjFrustumsE" & 0x7FFFFFFFFFFFFFFFLL);
      v27 = 5381;
      do
      {
        v25 = v27;
        v28 = *v26++;
        v27 = (33 * v27) ^ v28;
      }
      while (v28);
    }
    v6 = (v422 - 0x61C8864680B583E9 + (v25 << 6) + (v25 >> 2)) ^ v25;
    v29 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 40) + 32))(*(_QWORD *)(a2 + 40), 64, 16);
    *(_QWORD *)v29 = &off_24ED870D0;
    *(_DWORD *)(v29 + 24) = 0;
    memcpy((void *)(v29 + 32), v508, 16 * v4);
    v17 = a2;
    v30 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(v29 + 16) = v4;
    if (v30)
    {
      v30 = v6 % *(unsigned int *)(a2 + 120);
      v31 = *(unsigned int *)(*(_QWORD *)(a2 + 104) + 4 * v30);
      v32 = v418;
      if ((_DWORD)v31 != 0x7FFFFFFF)
      {
        v33 = *(_QWORD *)(a2 + 112);
        LODWORD(v4) = v419;
        if (*(_QWORD *)(v33 + 24 * v31 + 8) == v6)
          goto LABEL_29;
        while (1)
        {
          LODWORD(v31) = *(_DWORD *)(v33 + 24 * v31) & 0x7FFFFFFF;
          if ((_DWORD)v31 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v33 + 24 * v31 + 8) == v6)
            goto LABEL_29;
        }
      }
    }
    else
    {
      v32 = v418;
    }
    v4 = *(unsigned int *)(a2 + 132);
    if ((_DWORD)v4 == 0x7FFFFFFF)
    {
      v4 = *(unsigned int *)(a2 + 128);
      v34 = v4;
      if ((_DWORD)v4 == *(_DWORD *)(a2 + 120))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a2 + 96, 2 * *(_DWORD *)(a2 + 124));
        v17 = a2;
        LODWORD(v30) = v6 % *(unsigned int *)(a2 + 120);
        v34 = *(_DWORD *)(a2 + 128);
      }
      *(_DWORD *)(v17 + 128) = v34 + 1;
      v35 = *(_QWORD *)(v17 + 112);
      v36 = *(_DWORD *)(v35 + 24 * v4);
    }
    else
    {
      v35 = *(_QWORD *)(a2 + 112);
      v36 = *(_DWORD *)(v35 + 24 * v4);
      *(_DWORD *)(a2 + 132) = v36 & 0x7FFFFFFF;
    }
    v37 = 24 * v4;
    *(_DWORD *)(v35 + v37) = v36 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v17 + 112) + v37) = *(_DWORD *)(*(_QWORD *)(v17 + 112) + 24 * v4) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v17 + 104) + 4 * v30);
    *(_QWORD *)(*(_QWORD *)(v17 + 112) + 24 * v4 + 8) = v6;
    *(_QWORD *)(*(_QWORD *)(v17 + 112) + 24 * v4 + 16) = v29;
    *(_DWORD *)(*(_QWORD *)(v17 + 104) + 4 * v30) = v4;
    ++*(_DWORD *)(v17 + 124);
    ++*(_DWORD *)(v17 + 136);
    LODWORD(v4) = v419;
LABEL_29:
    if ((v4 & 1) != 0)
      goto LABEL_256;
    *(_WORD *)a4 = 0;
    v38 = re::RenderGraphDataStore::tryGet<re::SceneScope>(v7, v422);
    v17 = a2;
    if (!v38)
      goto LABEL_256;
    v39 = re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>(v7, (int)"BlurPlanesRenderFrameData", *(char **)(v38 + 8));
    v17 = a2;
    if (!v39 || !*(_BYTE *)(v39 + 81) && !*(_BYTE *)(v39 + 80))
      goto LABEL_256;
    v40 = *(_QWORD *)(v39 + 16);
    v431 = (_QWORD *)v39;
    if ((unint64_t)v457 < v40)
    {
      v41 = v39;
      re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(&v456, v40);
      v40 = *(_QWORD *)(v41 + 16);
    }
    v482 = 0;
    v480 = 0;
    v481 = 0;
    v479[1] = 0;
    v479[0] = v32;
    re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v479, v40);
    ++v481;
    v478 = 256;
    v441 = v8 + 4;
    re::buildCullingFrustum((uint64_t)&v8[4], (float32x4_t *)v8[9].i32, v8[30].u8[10], &v478, (uint64_t)&v488, v42, v43);
    v475.i64[0] = 0;
    v475.i32[2] = 0;
    re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v475, &v488);
    if (!v475.i64[0])
      goto LABEL_327;
    if (!v476[0])
      goto LABEL_328;
    if (v8[3].i64[0])
      break;
LABEL_329:
    re::internal::assertLog((re::internal *)6, v44, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_330:
    re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    _os_crash();
    __break(1u);
LABEL_331:
    v413 = (re *)__cxa_guard_acquire(&qword_254121278);
    if ((_DWORD)v413)
    {
      qword_254121270 = re::hashString(v413, v414);
      __cxa_guard_release(&qword_254121278);
    }
  }
  v4 = (unint64_t)v509;
  v432 = v8[4];
  v434 = v477;
  v45 = v8[8].u64[0];
  v472 = 1;
  v474 = 0;
  v473 = 0;
  v471 = 0;
  v470 = v32;
  re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity(&v470, v45);
  v472 += 2;
  v46 = v8[8].u64[0];
  v467 = 1;
  v7 = (unint64_t)&v465;
  v469 = 0;
  v468 = 0;
  v466 = 0;
  v465 = v32;
  re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity(&v465, v46);
  v467 += 2;
  if (v8[8].i64[0])
  {
    v47 = 0;
    LODWORD(v48) = 0;
    *((float *)&v48 + 1) = (float)p_buf;
    v448 = (float32x4_t)COERCE_UNSIGNED_INT((float)v18);
    v451 = (float32x4_t)v48;
    v49 = (unint64_t)v509;
    p_buf = (uint64_t)&buf;
    while (1)
    {
      re::Projection::computeMatrix4x4F((re::Projection *)(v9 + (v47 << 6)), (uint64_t)v486);
      v51 = v8[3].u64[0];
      if (v51 <= v47)
        goto LABEL_320;
      re::RenderCamera::computeInverseTransform(&v441[2 * v47], (uint64_t)&v461);
      v52 = 0;
      v509[0] = (float32x4_t)xmmword_22610BB90;
      v509[1] = (float32x4_t)xmmword_226102C50;
      v509[2] = (float32x4_t)xmmword_2260E5F40;
      v510 = (simd_float4)xmmword_2260E5D70;
      do
      {
        buf.columns[v52] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v448, COERCE_FLOAT(*(_OWORD *)&v509[v52])), v451, *(float32x2_t *)v509[v52].f32, 1), (float32x4_t)xmmword_2260E5F40, v509[v52], 2), (float32x4_t)xmmword_2260E5D70, v509[v52], 3);
        ++v52;
      }
      while (v52 != 4);
      v53 = 0;
      v54 = (float32x4_t)buf.columns[0];
      v55 = (float32x4_t)buf.columns[1];
      v56 = (float32x4_t)buf.columns[2];
      v57 = (float32x4_t)buf.columns[3];
      v509[0] = (float32x4_t)xmmword_2260E5F10;
      v509[1] = (float32x4_t)xmmword_2260E5F20;
      v509[2] = (float32x4_t)xmmword_2260E5F40;
      v510 = (simd_float4)xmmword_226132B10;
      do
      {
        buf.columns[v53] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, COERCE_FLOAT(*(_OWORD *)&v509[v53])), v55, *(float32x2_t *)v509[v53].f32, 1), v56, v509[v53], 2), v57, v509[v53], 3);
        ++v53;
      }
      while (v53 != 4);
      v58 = 0;
      v59 = (float32x4_t)buf.columns[0];
      v60 = (float32x4_t)buf.columns[1];
      v61 = (float32x4_t)buf.columns[2];
      v62 = (float32x4_t)buf.columns[3];
      v509[0] = *(float32x4_t *)v486;
      v509[1] = *(float32x4_t *)&v486[16];
      v509[2] = *(float32x4_t *)&v486[32];
      v510 = v487;
      do
      {
        buf.columns[v58] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v59, COERCE_FLOAT(*(_OWORD *)&v509[v58])), v60, *(float32x2_t *)v509[v58].f32, 1), v61, v509[v58], 2), v62, v509[v58], 3);
        ++v58;
      }
      while (v58 != 4);
      v63 = 0;
      v64 = (float32x4_t)buf.columns[0];
      v65 = (float32x4_t)buf.columns[1];
      v66 = (float32x4_t)buf.columns[2];
      v67 = (float32x4_t)buf.columns[3];
      v509[0] = v461;
      v509[1] = v462;
      v509[2] = v463;
      v510 = v464;
      do
      {
        buf.columns[v63] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v64, COERCE_FLOAT(*(_OWORD *)&v509[v63])), v65, *(float32x2_t *)v509[v63].f32, 1), v66, v509[v63], 2), v67, v509[v63], 3);
        ++v63;
      }
      while (v63 != 4);
      re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::add((uint64_t)&v470, (uint64_t)&buf);
      v6 = v471;
      if (v471 <= v47)
        break;
      if ((v472 & 1) != 0)
        v68 = &v473;
      else
        v68 = v474;
      buf = __invert_f4(*(simd_float4x4 *)&v68[8 * v47]);
      re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::add((uint64_t)&v465, (uint64_t)&buf);
      if (v8[8].i64[0] <= ++v47)
        goto LABEL_55;
    }
LABEL_321:
    v483 = 0;
    v485 = 0u;
    memset(&buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v509[0].i32[0] = 136315906;
    *(_QWORD *)(v4 + 4) = "operator[]";
    v509[0].i16[6] = 1024;
    *(_DWORD *)(v4 + 14) = 858;
    v509[1].i16[1] = 2048;
    *(_QWORD *)(v4 + 20) = v47;
    v509[1].i16[6] = 2048;
    *(_QWORD *)(v4 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_322:
    v461.i64[0] = 0;
    v510 = 0u;
    v511 = 0u;
    memset(v509, 0, sizeof(v509));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v486 = 136315906;
    *(_QWORD *)&v486[4] = "operator[]";
    *(_WORD *)&v486[12] = 1024;
    *(_DWORD *)&v486[14] = 789;
    *(_WORD *)&v486[18] = 2048;
    *(_QWORD *)&v486[20] = v47;
    *(_WORD *)&v486[28] = 2048;
    *(_QWORD *)&v486[30] = p_buf;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_323:
    re::internal::assertLog((re::internal *)6, v375, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_324:
    v461.i64[0] = 0;
    v510 = 0u;
    v511 = 0u;
    memset(v509, 0, sizeof(v509));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v486 = 136315906;
    *(_QWORD *)&v486[4] = "operator[]";
    *(_WORD *)&v486[12] = 1024;
    *(_DWORD *)&v486[14] = 789;
    *(_WORD *)&v486[18] = 2048;
    *(_QWORD *)&v486[20] = v49;
    *(_WORD *)&v486[28] = 2048;
    *(_QWORD *)&v486[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_325:
    v461.i64[0] = 0;
    v510 = 0u;
    v511 = 0u;
    memset(v509, 0, sizeof(v509));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v486 = 136315906;
    *(_QWORD *)&v486[4] = "operator[]";
    *(_WORD *)&v486[12] = 1024;
    *(_DWORD *)&v486[14] = 789;
    *(_WORD *)&v486[18] = 2048;
    *(_QWORD *)&v486[20] = p_buf;
    *(_WORD *)&v486[28] = 2048;
    *(_QWORD *)&v486[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_326;
  }
LABEL_55:
  v69 = v431;
  if (v431[2])
  {
    v49 = 0;
    v70 = vmulq_f32(v434, v434);
    v70.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).u32[0];
    v71 = sqrtf(v70.f32[0]);
    v72 = vrsqrte_f32((float32x2_t)v70.u32[0]);
    v73 = vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72)));
    v74 = vmulq_n_f32(v434, vmul_f32(v73, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v73, v73))).f32[0]);
    v75 = vmulq_f32(v434, v432);
    v6 = 1;
    v4 = (unint64_t)&buf;
    v449 = vsubq_f32(v432, vmulq_n_f32(v74, (float)(v434.f32[3]+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1))).f32[0])/ v71));
    v452 = vnegq_f32(v74);
    __asm { FMOV            V0.4S, #1.0 }
    v415 = _Q0;
    p_buf = (uint64_t)v509;
    v80 = &v454;
    do
    {
      v421 = v69[4];
      v47 = v421 + 144 * v49;
      v9 = v47 + 64;
      isBoundingBoxInsidePlanesArray = re::isBoundingBoxInsidePlanesArray(v47 + 64, &v475, (float32x4_t *)v47);
      WORD2(v460) = 0;
      if (((isBoundingBoxInsidePlanesArray & 1) != 0 || !v8[29].i8[8])
        && (*(_BYTE *)a4 = 1, *(_BYTE *)(v421 + 144 * v49 + 128)))
      {
        v82 = (float32x4_t *)(v421 + 144 * v49);
        v83 = v82[5];
        v7 = (unint64_t)&v82[5];
        v84 = v83;
        v85 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v9, v83);
        v85.i32[3] = v85.i32[2];
        if ((vmaxvq_u32(v85) & 0x80000000) != 0)
        {
          v416 = 0;
          v417 = 0;
        }
        else
        {
          v86.i64[0] = 0x3F0000003F000000;
          v86.i64[1] = 0x3F0000003F000000;
          v87 = vmulq_f32(vaddq_f32(*(float32x4_t *)v9, v84), v86);
          v416 = v87.i64[1];
          v417 = v87.i64[0];
        }
        v420 = v49;
        if (v8[8].i64[0])
        {
          v6 = 0;
          v88 = (float32x4_t *)(v421 + 144 * v49);
          v433 = &v88[6].i8[8];
          v423 = v88 + 7;
          v89 = v471;
          v90 = v474;
          if ((v472 & 1) != 0)
            v90 = &v473;
          v438 = v90;
          v91 = v469;
          if ((v467 & 1) != 0)
            v91 = &v468;
          v425 = v91;
          v426 = v466;
          v435 = 0u;
          v436 = 0u;
          v439 = 0u;
          v440 = 0u;
          v92 = 0uLL;
          v442 = v415;
          while (1)
          {
            if (v6 == v89)
            {
              *(_QWORD *)v486 = 0;
              v485 = 0u;
              memset(&buf, 0, sizeof(buf));
              v9 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v509[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v509[0].i64 + 4) = (uint64_t)"operator[]";
              v509[0].i16[6] = 1024;
              *(__int32 *)((char *)&v509[0].i32[3] + 2) = 858;
              v509[1].i16[1] = 2048;
              *(uint64_t *)((char *)v509[1].i64 + 4) = v89;
              v509[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v509[1].i64[1] + 6) = v89;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_316:
              re::internal::assertLog((re::internal *)6, v101, v105, v103, v104, v106, v107, v102, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v6, v108);
              _os_crash();
              __break(1u);
LABEL_317:
              v461.i64[0] = 0;
              v510 = 0u;
              v511 = 0u;
              memset(v509, 0, sizeof(v509));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v486 = 136315906;
              *(_QWORD *)&v486[4] = "operator[]";
              *(_WORD *)&v486[12] = 1024;
              *(_DWORD *)&v486[14] = 797;
              *(_WORD *)&v486[18] = 2048;
              *(_QWORD *)&v486[20] = v47;
              *(_WORD *)&v486[28] = 2048;
              *(_QWORD *)&v486[30] = v80;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_318:
              v483 = 0;
              v485 = 0u;
              memset(&buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v486 = 136315906;
              *(_QWORD *)&v486[4] = "operator[]";
              *(_WORD *)&v486[12] = 1024;
              *(_DWORD *)&v486[14] = 858;
              *(_WORD *)&v486[18] = 2048;
              *(_QWORD *)&v486[20] = v6;
              *(_WORD *)&v486[28] = 2048;
              *(_QWORD *)&v486[30] = v426;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_319:
              re::internal::assertLog((re::internal *)6, v167, *(double *)v174.columns[0].i64, *(double *)v174.columns[1].i64, *(double *)v174.columns[2].i64, *(double *)v174.columns[3].i64, *(double *)v170.i64, *(double *)v171.i64, *(double *)v169.i64, *(double *)v168.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
              _os_crash();
              __break(1u);
LABEL_320:
              re::internal::assertLog((re::internal *)6, v50, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v47, v51);
              _os_crash();
              __break(1u);
              goto LABEL_321;
            }
            v443 = v92;
            v93 = 0;
            v49 = (unint64_t)&v438[8 * v6];
            v94 = *(float32x4_t *)v49;
            v95 = *(float32x4_t *)(v49 + 16);
            v96 = *(float32x4_t *)(v49 + 32);
            v97 = *(float32x4_t *)(v49 + 48);
            v98 = *(float32x4_t *)(v47 + 16);
            v99 = *(float32x4_t *)(v47 + 32);
            v100 = *(simd_float4 *)(v47 + 48);
            v509[0] = *(float32x4_t *)v47;
            v509[1] = v98;
            v509[2] = v99;
            v510 = v100;
            do
            {
              buf.columns[v93] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v94, COERCE_FLOAT(*(_OWORD *)&v509[v93])), v95, *(float32x2_t *)v509[v93].f32, 1), v96, v509[v93], 2), v97, v509[v93], 3);
              ++v93;
            }
            while (v93 != 4);
            v509[0] = (float32x4_t)buf.columns[0];
            v509[1] = (float32x4_t)buf.columns[1];
            v509[2] = (float32x4_t)buf.columns[2];
            v510 = buf.columns[3];
            re::AABB::transform((float32x4_t *)(v47 + 64), v509, (uint64_t)&v461);
            LODWORD(v104) = v461.i32[1];
            LODWORD(v103) = v461.i32[0];
            LODWORD(v105) = v461.i32[2];
            LODWORD(v107) = v462.i32[1];
            LODWORD(v106) = v462.i32[0];
            if (v6 || v461.f32[2] >= 0.0 || (LODWORD(v102) = v462.i32[2], v462.f32[2] <= 0.0))
            {
              v108 = v8[3].u64[0];
              v92 = v443;
              if (v108 <= v6)
                goto LABEL_316;
              if (v426 <= v6)
                goto LABEL_318;
              v109 = v441[2 * v6];
              v110 = (float32x4_t *)&v425[8 * v6];
              v111 = v110[1];
              v112 = v110[2];
              v113 = v110[3];
              v114 = vmulq_n_f32(*v110, v19 + v462.f32[0]);
              v115 = vaddq_f32(v113, vmlaq_n_f32(vmlaq_n_f32(v114, v111, v461.f32[1] - v19), v112, v461.f32[2]));
              v116 = vdivq_f32(v115, (float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 3));
              v117 = vmulq_n_f32(*v110, v461.f32[0] - v19);
              v118 = vaddq_f32(v113, vmlaq_n_f32(vmlaq_n_f32(v117, v111, v461.f32[1] - v19), v112, v461.f32[2]));
              v119 = vdivq_f32(v118, (float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 3));
              v120 = vaddq_f32(v113, vmlaq_n_f32(vmlaq_n_f32(v114, v111, v19 + v462.f32[1]), v112, v461.f32[2]));
              v121 = vdivq_f32(v120, (float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 3));
              v122 = vaddq_f32(v113, vmlaq_n_f32(vmlaq_n_f32(v117, v111, v19 + v462.f32[1]), v112, v461.f32[2]));
              v123 = vdivq_f32(v122, (float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 3));
              v124 = vsubq_f32(v116, v109);
              v125 = vsubq_f32(v121, v116);
              v126 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v125, (int32x4_t)v125), (int8x16_t)v125, 0xCuLL), vnegq_f32(v124)), v125, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v124, (int32x4_t)v124), (int8x16_t)v124, 0xCuLL));
              v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), v126, 0xCuLL);
              v128 = vmulq_f32(v109, v127);
              v125.f32[0] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 2), vaddq_f32(v128, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 1))).f32[0];
              v129 = v127;
              v129.i32[3] = v125.i32[0];
              v130 = vsubq_f32(v123, v109);
              v131 = vsubq_f32(v119, v123);
              v132 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), (int8x16_t)v131, 0xCuLL), vnegq_f32(v130)), v131, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v130, (int32x4_t)v130), (int8x16_t)v130, 0xCuLL));
              v133 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v132, (int32x4_t)v132), v132, 0xCuLL);
              v134 = vmulq_f32(v109, v133);
              v112.f32[0] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), vaddq_f32(v134, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1))).f32[0];
              v135 = v133;
              v135.i32[3] = v112.i32[0];
              if (v6)
              {
                v136 = (int32x4_t)vmulq_f32(v443, v443);
                v136.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v136, 2), vadd_f32(*(float32x2_t *)v136.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v136.i8, 1))).u32[0];
                v137 = vrsqrte_f32((float32x2_t)v136.u32[0]);
                v138 = vmul_f32(v137, vrsqrts_f32((float32x2_t)v136.u32[0], vmul_f32(v137, v137)));
                v139 = vmulq_n_f32(v443, vmul_f32(v138, vrsqrts_f32((float32x2_t)v136.u32[0], vmul_f32(v138, v138))).f32[0]);
                v140 = (int32x4_t)vmulq_f32(v439, v439);
                v140.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v140, 2), vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v140.i8, 1))).u32[0];
                v141 = vrsqrte_f32((float32x2_t)v140.u32[0]);
                v142 = vmul_f32(v141, vrsqrts_f32((float32x2_t)v140.u32[0], vmul_f32(v141, v141)));
                v143 = vmulq_f32(v139, vmulq_n_f32(v439, vmul_f32(v142, vrsqrts_f32((float32x2_t)v140.u32[0], vmul_f32(v142, v142))).f32[0]));
                v144 = (int32x4_t)vmulq_f32(v135, v135);
                v144.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v144, 2), vadd_f32(*(float32x2_t *)v144.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v144.i8, 1))).u32[0];
                v145 = vrsqrte_f32((float32x2_t)v144.u32[0]);
                v146 = vmul_f32(v145, vrsqrts_f32((float32x2_t)v144.u32[0], vmul_f32(v145, v145)));
                v147 = vmulq_f32(v139, vmulq_n_f32(v133, vmul_f32(v146, vrsqrts_f32((float32x2_t)v144.u32[0], vmul_f32(v146, v146))).f32[0]));
                v148 = vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v147, 2), vaddq_f32(v147, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2), vaddq_f32(v143, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1))))), 0)), 0x1FuLL);
                v149 = (int32x4_t)vmulq_f32(v440, v440);
                v149.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v149, 2), vadd_f32(*(float32x2_t *)v149.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v149.i8, 1))).u32[0];
                *(float32x2_t *)v144.i8 = vrsqrte_f32((float32x2_t)v149.u32[0]);
                *(float32x2_t *)v144.i8 = vmul_f32(*(float32x2_t *)v144.i8, vrsqrts_f32((float32x2_t)v149.u32[0], vmul_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8)));
                v150 = vmulq_f32(v139, vmulq_n_f32(v440, vmul_f32(*(float32x2_t *)v144.i8, vrsqrts_f32((float32x2_t)v149.u32[0], vmul_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8))).f32[0]));
                v151 = (int32x4_t)vmulq_f32(v129, v129);
                v151.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v151, 2), vadd_f32(*(float32x2_t *)v151.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v151.i8, 1))).u32[0];
                v152 = vrsqrte_f32((float32x2_t)v151.u32[0]);
                v153 = vmul_f32(v152, vrsqrts_f32((float32x2_t)v151.u32[0], vmul_f32(v152, v152)));
                v154 = vmulq_f32(v139, vmulq_n_f32(v127, vmul_f32(v153, vrsqrts_f32((float32x2_t)v151.u32[0], vmul_f32(v153, v153))).f32[0]));
                v155 = vbslq_s8((int8x16_t)vcltzq_s32(v148), (int8x16_t)v135, (int8x16_t)v439);
                if ((vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 2), vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v150, 2), vaddq_f32(v150, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v150.f32, 1))))).u8[0] & 1) != 0)v156 = -1;
                else
                  v156 = 0;
                v439 = (float32x4_t)v155;
                v440 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v156), (int8x16_t)v129, (int8x16_t)v440);
                goto LABEL_111;
              }
              v157 = vsubq_f32(v121, v109);
              v158 = vsubq_f32(v123, v121);
              v159 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v158, (int32x4_t)v158), (int8x16_t)v158, 0xCuLL), vnegq_f32(v157)), v158, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v157, (int32x4_t)v157), (int8x16_t)v157, 0xCuLL));
              v160 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v159, (int32x4_t)v159), v159, 0xCuLL);
              v161 = vmulq_f32(v109, v160);
              v160.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v161, 2), vaddq_f32(v161, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v161.f32, 1))).f32[0];
              v162 = vsubq_f32(v119, v109);
              v163 = vsubq_f32(v116, v119);
              v164 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v163, (int32x4_t)v163), (int8x16_t)v163, 0xCuLL), vnegq_f32(v162)), v163, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v162, (int32x4_t)v162), (int8x16_t)v162, 0xCuLL));
              v165 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v164, (int32x4_t)v164), v164, 0xCuLL);
              v444 = *v441;
              v166 = vmulq_f32(v109, v165);
              v165.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v166, 2), vaddq_f32(v166, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v166.f32, 1))).f32[0];
              v435 = v165;
              v436 = v160;
              v439 = v135;
              v440 = v129;
            }
            else
            {
              *(_BYTE *)(a4 + 1) = 1;
              v108 = v8[3].u64[0];
              if (!v108)
                goto LABEL_316;
              v444 = *v441;
              v439 = 0u;
              v440 = 0u;
              v435 = 0u;
              v436 = 0u;
            }
            v513 = __invert_f4(*(simd_float4x4 *)v47);
            v168 = (float32x4_t)v513.columns[0];
            v169 = (float32x4_t)v513.columns[1];
            v170 = (float32x4_t)v513.columns[2];
            v171 = (float32x4_t)v513.columns[3];
            v513.columns[0] = *(simd_float4 *)v7;
            v513.columns[1] = *(simd_float4 *)v9;
            v172 = vsubq_f32(*(float32x4_t *)v7, *(float32x4_t *)v9);
            buf.columns[0] = (simd_float4)v172;
            v513.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v513.columns[0], (float32x4_t)v513.columns[1]);
            v513.columns[1].i64[0] = 0x3F0000003F000000;
            v513.columns[1].i64[1] = 0x3F0000003F000000;
            v173 = vmulq_f32((float32x4_t)v513.columns[0], (float32x4_t)v513.columns[1]);
            v174 = *(simd_float4x4 *)v47;
            if (*v433 == 5)
            {
              v175 = *v423;
            }
            else
            {
              v176 = vaddq_f32((float32x4_t)v174.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v174.columns[0], v173.f32[0]), (float32x4_t)v174.columns[1], *(float32x2_t *)v173.f32, 1), (float32x4_t)v174.columns[2], v173, 2));
              v175 = vdivq_f32(v176, (float32x4_t)vdupq_laneq_s32((int32x4_t)v176, 3));
            }
            v177 = 2;
            if (v172.f32[1] <= v172.f32[2])
              v177 = 1;
            v178 = v172.f32[0] > v172.f32[2] || v172.f32[0] > v172.f32[1];
            if (!v178)
              v177 = 0;
            if (*(float *)((unint64_t)&buf | (4 * v177)) >= 0.03)
            {
              if (!v8[3].i64[0])
                goto LABEL_319;
              v183 = v8[5].f32[0];
              v184 = v8[5].f32[1];
              v185 = v8[5].f32[2];
              v168.i32[0] = v8[5].i32[3];
              v186 = (float)(v183 + v183) * v168.f32[0];
              v168.f32[0] = (float)((float)(v183 + v183) * v185) + (float)((float)(v184 + v184) * v168.f32[0]);
              v428 = v168.f32[0];
              v429 = (float)((float)(v184 + v184) * v185) - v186;
              v430 = 1.0 - (float)((float)((float)(v183 + v183) * v183) + (float)((float)(v184 + v184) * v184));
              v168.f32[1] = v429;
              v168.f32[2] = v430;
              v445 = v168;
              v514 = __invert_f4(v174);
              v92 = v445;
              v187 = (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v514.columns[0], v428), (float32x4_t)v514.columns[1], v429), (float32x4_t)v514.columns[2], v430);
              if (*(float *)v187.i32 >= 0.0)
                v188 = (float *)v7;
              else
                v188 = (float *)(v47 + 64);
              v187.i32[0] = vextq_s8(v187, v187, 8uLL).u32[0];
              *(int32x2_t *)v187.i8 = vcltz_f32(*(float32x2_t *)v187.i8);
              v189 = 84;
              if ((v187.i8[4] & 1) != 0)
                v189 = 68;
              v190 = *v188;
              v191 = 88;
              if ((v187.i8[0] & 1) != 0)
                v191 = 72;
              v192 = vaddq_f32(*(float32x4_t *)(v47 + 48), vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v47, v190), *(float32x4_t *)(v47 + 16), *(float *)(v47 + v189)), *(float32x4_t *)(v47 + 32), *(float *)(v47 + v191)));
              v182 = vmulq_f32(v445, vdivq_f32(v192, (float32x4_t)vdupq_laneq_s32((int32x4_t)v192, 3)));
            }
            else
            {
              v155.i32[1] = v444.i32[1];
              v179 = vaddq_f32(v171, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v168, v444.f32[0]), v169, *(float32x2_t *)v444.f32, 1), v170, v444, 2));
              v180 = xmmword_22619BDF0[v177];
              v181 = vmulq_f32(vsubq_f32(vdivq_f32(v179, (float32x4_t)vdupq_laneq_s32((int32x4_t)v179, 3)), v173), v180);
              if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v181, 2), vaddq_f32(v181, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v181.f32, 1))).f32[0] >= 0.0)v174.columns[3].f32[0] = 1.0;
              else
                v174.columns[3].f32[0] = -1.0;
              v174.columns[3] = (simd_float4)vmulq_n_f32(v180, v174.columns[3].f32[0]);
              v92 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v174.columns[0], v174.columns[3].f32[0]), (float32x4_t)v174.columns[1], *(float32x2_t *)v174.columns[3].f32, 1), (float32x4_t)v174.columns[2], (float32x4_t)v174.columns[3], 2);
              v182 = vmulq_f32(v175, v92);
            }
            v92.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v182, 2), vaddq_f32(v182, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v182.f32, 1))).f32[0];
LABEL_111:
            v193 = *(float32x4_t *)v9;
            v194 = *(float32x4_t *)v7;
            v195 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v9, *(float32x4_t *)v7);
            v195.i32[3] = v195.i32[2];
            if ((vmaxvq_u32(v195) & 0x80000000) != 0)
            {
              v198 = 0.0;
              v197.i64[0] = 0;
            }
            else
            {
              v196.i64[0] = 0x3F0000003F000000;
              v196.i64[1] = 0x3F0000003F000000;
              v197 = vmulq_f32(vaddq_f32(v193, v194), v196);
              v198 = v197.f32[2];
            }
            v199 = *(float32x4_t *)(v47 + 16);
            v200 = *(float32x4_t *)(v47 + 32);
            v201 = *(float32x4_t *)(v47 + 48);
            v202 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v197.f32, 1);
            *(float *)v155.i32 = v198;
            v203 = vaddq_f32(v201, vmlaq_n_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)v47, v193.f32[0]), v202, v199), v200, v198));
            v204 = vdivq_f32(v203, (float32x4_t)vdupq_laneq_s32((int32x4_t)v203, 3));
            v205 = vaddq_f32(v201, vmlaq_n_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)v47, v194.f32[0]), v202, v199), v200, v198));
            v206 = vdivq_f32(v205, (float32x4_t)vdupq_laneq_s32((int32x4_t)v205, 3));
            v207 = vmulq_f32(vsubq_f32(v204, v449), v452);
            v208 = vmulq_f32(vsubq_f32(v206, v449), v452);
            v209 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v207, 2), vaddq_f32(v207, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v207.f32, 1)));
            v210 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v208, 2), vaddq_f32(v208, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v208.f32, 1)));
            if (v209.f32[0] < 0.0 || v210.f32[0] < 0.0)
            {
              if (v209.f32[0] >= 0.0 || (v211 = 0uLL, _NF = v210.f32[0] < 0.0, v210 = 0uLL, !_NF))
              {
                v210.i32[0] = 0;
                v210 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgeq_f32(v209, v210), 0), (int8x16_t)v204, (int8x16_t)v206);
                v212 = vsubq_f32(v206, v204);
                v213 = vmulq_f32(v434, v204);
                v214 = vmulq_f32(v434, v212);
                v211 = vaddq_f32(v204, vmulq_n_f32(v212, (float)-(float)(v434.f32[3]+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v213, 2), vaddq_f32(v213, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v213.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v214, 2), vaddq_f32(v214, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v214.f32, 1))).f32[0]));
              }
            }
            else
            {
              v211 = v206;
              v210 = v204;
            }
            v215 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v155.i8, 0);
            v216 = vmulq_n_f32(*(float32x4_t *)v47, v197.f32[0]);
            v217 = vaddq_f32(v201, vmlaq_f32(vmlaq_lane_f32(v216, v199, *(float32x2_t *)v193.f32, 1), v215, v200));
            v218 = vdivq_f32(v217, (float32x4_t)vdupq_laneq_s32((int32x4_t)v217, 3));
            v219 = vaddq_f32(v201, vmlaq_f32(vmlaq_lane_f32(v216, v199, *(float32x2_t *)v194.f32, 1), v215, v200));
            v220 = vdivq_f32(v219, (float32x4_t)vdupq_laneq_s32((int32x4_t)v219, 3));
            v221 = vmulq_f32(vsubq_f32(v218, v449), v452);
            v222 = vmulq_f32(vsubq_f32(v220, v449), v452);
            v223 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v221, 2), vaddq_f32(v221, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v221.f32, 1)));
            v224 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v222, 2), vaddq_f32(v222, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.f32, 1)));
            if (v223.f32[0] < 0.0 || v224.f32[0] < 0.0)
            {
              if (v223.f32[0] >= 0.0 || (v225 = 0uLL, _NF = v224.f32[0] < 0.0, v224 = 0uLL, !_NF))
              {
                v224.i32[0] = 0;
                v224 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgeq_f32(v223, v224), 0), (int8x16_t)v218, (int8x16_t)v220);
                v226 = vsubq_f32(v220, v218);
                v227 = vmulq_f32(v434, v218);
                v228 = vmulq_f32(v434, v226);
                v225 = vaddq_f32(v218, vmulq_n_f32(v226, (float)-(float)(v434.f32[3]+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v227, 2), vaddq_f32(v227, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v227.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v228, 2), vaddq_f32(v228, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v228.f32, 1))).f32[0]));
              }
            }
            else
            {
              v225 = v220;
              v224 = v218;
            }
            v229 = vmlaq_f32(v216, v202, v199);
            v230 = vaddq_f32(v201, vmlaq_laneq_f32(v229, v200, v193, 2));
            v231 = vdivq_f32(v230, (float32x4_t)vdupq_laneq_s32((int32x4_t)v230, 3));
            v232 = vaddq_f32(v201, vmlaq_laneq_f32(v229, v200, v194, 2));
            v233 = vdivq_f32(v232, (float32x4_t)vdupq_laneq_s32((int32x4_t)v232, 3));
            v234 = vmulq_f32(vsubq_f32(v231, v449), v452);
            v235 = vmulq_f32(vsubq_f32(v233, v449), v452);
            v236 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v234, 2), vaddq_f32(v234, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v234.f32, 1)));
            v237 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v235, 2), vaddq_f32(v235, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v235.f32, 1)));
            if (v236.f32[0] < 0.0 || v237.f32[0] < 0.0)
            {
              if (v236.f32[0] >= 0.0 || (v238 = 0uLL, _NF = v237.f32[0] < 0.0, v237 = 0uLL, !_NF))
              {
                v237.i32[0] = 0;
                v237 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgeq_f32(v236, v237), 0), (int8x16_t)v231, (int8x16_t)v233);
                v239 = vsubq_f32(v233, v231);
                v240 = vmulq_f32(v434, v231);
                v241 = vmulq_f32(v434, v239);
                v238 = vaddq_f32(v231, vmulq_n_f32(v239, (float)-(float)(v434.f32[3]+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v240, 2), vaddq_f32(v240, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v240.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v241, 2), vaddq_f32(v241, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v241.f32, 1))).f32[0]));
              }
            }
            else
            {
              v238 = v233;
              v237 = v231;
            }
            v243 = *(float32x4_t *)v49;
            v242 = *(float32x4_t *)(v49 + 16);
            v244 = *(float32x4_t *)(v49 + 32);
            v245 = *(float32x4_t *)(v49 + 48);
            v246 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v49, v210.f32[0]), v242, *(float32x2_t *)v210.f32, 1), v244, v210, 2));
            v247 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v49, v211.f32[0]), v242, *(float32x2_t *)v211.f32, 1), v244, v211, 2));
            v248 = vsubq_f32(vdivq_f32(v247, (float32x4_t)vdupq_laneq_s32((int32x4_t)v247, 3)), vdivq_f32(v246, (float32x4_t)vdupq_laneq_s32((int32x4_t)v246, 3)));
            v249 = vmulq_f32(v248, v248);
            v250 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v249, 2), vaddq_f32(v249, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v249.f32, 1))).f32[0]);
            if (v250 <= 0.1)
            {
              __asm { FMOV            V0.4S, #1.0 }
            }
            else
            {
              __asm { FMOV            V0.4S, #1.0 }
              _Q0.f32[0] = (float)(v250 + (float)(v19 * 2.0)) / v250;
            }
            v252 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v243, v224.f32[0]), v242, *(float32x2_t *)v224.f32, 1), v244, v224, 2));
            v253 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v243, v225.f32[0]), v242, *(float32x2_t *)v225.f32, 1), v244, v225, 2));
            v254 = vsubq_f32(vdivq_f32(v253, (float32x4_t)vdupq_laneq_s32((int32x4_t)v253, 3)), vdivq_f32(v252, (float32x4_t)vdupq_laneq_s32((int32x4_t)v252, 3)));
            v255 = vmulq_f32(v254, v254);
            v256 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v255, 2), vaddq_f32(v255, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v255.f32, 1))).f32[0]);
            if (v256 > 0.1)
              _Q0.f32[1] = (float)(v256 + (float)(v19 * 2.0)) / v256;
            v257 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v243, v237.f32[0]), v242, *(float32x2_t *)v237.f32, 1), v244, v237, 2));
            v258 = vaddq_f32(v245, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v243, v238.f32[0]), v242, *(float32x2_t *)v238.f32, 1), v244, v238, 2));
            v259 = vsubq_f32(vdivq_f32(v258, (float32x4_t)vdupq_laneq_s32((int32x4_t)v258, 3)), vdivq_f32(v257, (float32x4_t)vdupq_laneq_s32((int32x4_t)v257, 3)));
            v260 = vmulq_f32(v259, v259);
            v261 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v260, 2), vaddq_f32(v260, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.f32, 1))).f32[0]);
            if (v261 > 0.1)
              _Q0.f32[2] = (float)(v261 + (float)(v19 * 2.0)) / v261;
            v262 = v256 < v261;
            if (v250 >= v256 || v250 >= v261)
            {
              if (v256 >= v261)
              {
                v265 = 0;
                v262 = v256 < v250;
                v264 = 1;
                v263 = 2;
              }
              else
              {
                v264 = 0;
                v265 = 2;
                v262 = v250 < v261;
                v263 = 1;
              }
            }
            else
            {
              v263 = 0;
              v264 = 1;
              v265 = 2;
            }
            v454 = _Q0;
            v266 = *(_DWORD *)((unint64_t)&v454 | (4 * v264));
            if (!v262)
              v266 = *(_DWORD *)((unint64_t)&v454 | (4 * v265));
            *(_DWORD *)((unint64_t)&v454 | (4 * v263)) = v266;
            v267 = v454;
            v267.i32[3] = 0;
            v268 = vminnmq_f32(v267, (float32x4_t)xmmword_22619BCF0);
            v269 = v442;
            v269.i32[3] = 0;
            v268.i32[3] = 0;
            v442 = vmaxnmq_f32(v269, v268);
            if (v8[8].i64[0] <= ++v6)
              goto LABEL_150;
          }
        }
        v435 = 0u;
        v436 = 0u;
        v439 = 0u;
        v440 = 0u;
        v442 = v415;
        v92 = 0uLL;
LABEL_150:
        v446 = v92;
        v270 = *((_QWORD *)&v457 + 1);
        LODWORD(v460) = DWORD2(v457);
        re::DynamicArray<re::BlurPlaneTypeData>::add((_anonymous_namespace_ *)v479, &v460);
        v271 = v421 + 144 * v420;
        v274 = *(_QWORD *)(v271 + 96);
        v273 = (uint64_t *)(v271 + 96);
        v272 = v274;
        v275 = v424;
        if (v424
          && (v275 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v424, v273)) != 0)
        {
          v276 = *(_QWORD *)v275;
          v277 = *((_DWORD *)v275 + 2);
        }
        else
        {
          v277 = 0;
          v276 = 0;
        }
        v278 = v446;
        if (v270 >= (unint64_t)v457)
        {
          if ((unint64_t)v457 < v270 + 1)
          {
            if (v456)
            {
              v279 = 8;
              if ((_QWORD)v457)
                v279 = 2 * v457;
              if (v279 <= v270 + 1)
                v280 = v270 + 1;
              else
                v280 = v279;
              re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(&v456, v280);
            }
            else
            {
              re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(&v456, v270 + 1);
              ++v458;
            }
            v278 = v446;
          }
          v270 = *((_QWORD *)&v457 + 1);
        }
        v281 = *(_QWORD *)&v459[8];
        v282 = *(_QWORD *)v459 + 112 * v270;
        *(_QWORD *)v282 = v272;
        *(_QWORD *)(v282 + 8) = v276;
        *(_DWORD *)(v282 + 16) = v277;
        *(float32x4_t *)(v282 + 32) = v439;
        *(float32x4_t *)(v282 + 48) = v440;
        *(float32x4_t *)(v282 + 64) = v435;
        *(float32x4_t *)(v282 + 80) = v436;
        *(float32x4_t *)(v282 + 96) = v278;
        *((_QWORD *)&v457 + 1) = v270 + 1;
        ++v458;
        buf.columns[0] = (simd_float4)v442;
        buf.columns[1].i64[1] = v416;
        buf.columns[1].i64[0] = v417;
        v283 = 0xBF58476D1CE4E5B9 * (*v273 ^ ((unint64_t)*v273 >> 30));
        v284 = (0x94D049BB133111EBLL * (v283 ^ (v283 >> 27))) ^ ((0x94D049BB133111EBLL * (v283 ^ (v283 >> 27))) >> 31);
        if (v281)
        {
          v285 = v284 % *(unsigned int *)&v459[32];
          v286 = *(unsigned int *)(*(_QWORD *)&v459[16] + 4 * v285);
          v49 = v420;
          v6 = 1;
          if ((_DWORD)v286 != 0x7FFFFFFF)
          {
            while (*(_QWORD *)(*(_QWORD *)&v459[24] + (v286 << 6) + 16) != *v273)
            {
              v286 = *(_DWORD *)(*(_QWORD *)&v459[24] + (v286 << 6) + 8) & 0x7FFFFFFF;
              if ((_DWORD)v286 == 0x7FFFFFFF)
                goto LABEL_172;
            }
            goto LABEL_173;
          }
        }
        else
        {
          LODWORD(v285) = 0;
          v49 = v420;
          v6 = 1;
        }
LABEL_172:
        re::HashTable<unsigned long long,re::TintContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v459[8], v285, v284, v273, (uint64_t)&buf);
        ++*(_DWORD *)&v459[48];
      }
      else
      {
        BYTE5(v460) = 1;
        re::DynamicArray<re::BlurPlaneTypeData>::add((_anonymous_namespace_ *)v479, &v460);
      }
LABEL_173:
      ++v49;
      v69 = v431;
    }
    while (v431[2] > v49);
  }
  buf.columns[1].i32[0] = 1;
  buf.columns[2] = 0uLL;
  buf.columns[0] = (simd_float4)v418;
  re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(&buf, 0);
  buf.columns[1].i32[0] += 2;
  v288 = v8[28].i64[0];
  if (v288)
  {
    v289 = *(_QWORD *)(v288 + 40);
    if (v289)
    {
      v290 = 0;
      p_buf = 800;
      do
      {
        v291 = re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::operator[](v288, v290);
        v292 = *(_QWORD *)(v291 + 16);
        if (v292)
        {
          v6 = 800 * v292;
          v293 = *(_QWORD *)(v291 + 32) + 448;
          do
          {
            re::DynamicOverflowArray<re::AABB,8ul>::add((uint64_t)&buf, v293);
            v293 += 800;
            v6 -= 800;
          }
          while (v6);
        }
        ++v290;
      }
      while (v290 != v289);
    }
  }
  v9 = v480;
  if (v480)
  {
    v7 = 0;
    v6 = 0;
    v4 = 144;
    v294 = v431;
    do
    {
      v49 = (unint64_t)v482;
      if (!v482->i8[8 * v7 + 5])
      {
        v47 = v482->u32[2 * v7];
        p_buf = *((_QWORD *)&v457 + 1);
        if (*((_QWORD *)&v457 + 1) <= v47)
          goto LABEL_322;
        v47 = 0;
        v295 = 0;
        v453 = v482->u32[2 * v7];
        v450 = *(_QWORD *)v459;
        p_buf = *(_QWORD *)v459 + 112 * v453 + 32;
        while (1)
        {
          if ((_DWORD)v6 != v295)
          {
            v80 = (float32x4_t *)v294[2];
            if ((unint64_t)v80 <= v47)
              goto LABEL_317;
            v296 = v294[4];
            if (*(_BYTE *)(v296 + 144 * v47 + 129))
            {
              v509[0].i64[0] = p_buf;
              v509[0].i64[1] = 5;
              isBoundingBoxInsidePlanes = re::isBoundingBoxInsidePlanes(v296 + 144 * v47 + 64, (uint64_t)v509, (float32x4_t *)(v296 + 144 * v47));
              v294 = v431;
              if (isBoundingBoxInsidePlanes)
                break;
            }
          }
          v47 = ++v295;
          if (v9 <= v295)
            goto LABEL_193;
        }
        *(_BYTE *)(v49 + 8 * v7 + 4) = 1;
        *(_BYTE *)(a4 + 1) = 1;
LABEL_193:
        v298 = (char *)(v49 + 8 * v7);
        v300 = v298[4];
        v299 = v298 + 4;
        if (!v300)
        {
          v447 = v299;
          v301 = v294[7];
          if (v301)
          {
            v302 = (float32x4_t *)v294[9];
            v303 = &v302[9 * v301];
            v304 = (float32x4_t *)(v450 + 112 * v453);
            v305 = v304 + 6;
            v306 = &v304->i64[1];
            v307 = (int *)&v304[1];
            while (1)
            {
              if (v424
                && (v308 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v424, (uint64_t *)&v302[8])) != 0)
              {
                v309 = *(_QWORD *)v308;
                v310 = *(_DWORD *)(v308 + 8);
              }
              else
              {
                v309 = 0;
                v310 = 0;
              }
              v311 = v302 + 7;
              if (re::isBoundingBoxInsideVCAPlanes((uint64_t)v302, v302 + 2, v309, v310, &v302[6], v302 + 7, v305, v287, (float32x4_t *)p_buf, 4, *v306, *v307))break;
              v302 += 9;
              v294 = v431;
              if (&v311[2] == v303)
                goto LABEL_204;
            }
            *v447 = 1;
            *(_BYTE *)(a4 + 1) = 1;
            v294 = v431;
          }
LABEL_204:
          if (!*v447)
          {
            v509[0] = (float32x4_t)xmmword_2260E5F10;
            v509[1] = (float32x4_t)xmmword_2260E5F20;
            v509[2] = (float32x4_t)xmmword_2260E5F40;
            v510 = (simd_float4)xmmword_2260E5D70;
            if ((buf.columns[1].i8[0] & 1) != 0)
              v312 = &buf.columns[2];
            else
              v312 = (simd_float4 *)buf.columns[2].i64[1];
            if (buf.columns[0].i64[1])
            {
              v313 = (float32x4_t *)(v450 + 112 * v453);
              v314 = v313 + 6;
              v315 = &v313->i64[1];
              v316 = (int *)&v313[1];
              v317 = 32 * buf.columns[0].i64[1];
              while (1)
              {
                v461.i8[0] = 0;
                *(_OWORD *)v486 = 0u;
                if (re::isBoundingBoxInsideVCAPlanes((uint64_t)v312, v509, 0, 0, &v461, (float32x4_t *)v486, v314, v287, (float32x4_t *)p_buf, 4, *v315, *v316))break;
                v312 += 2;
                v317 -= 32;
                if (!v317)
                  goto LABEL_214;
              }
              *v447 = 1;
              *(_BYTE *)(a4 + 1) = 1;
            }
LABEL_214:
            v294 = v431;
          }
        }
      }
      v7 = (v6 + 1);
      v9 = v480;
      v6 = v7;
    }
    while (v480 > v7);
    if (v480)
    {
      v318 = 0;
      v319 = 0;
      v320 = v482;
      v321 = 1;
      v7 = *((_QWORD *)&v457 + 1);
      v322 = *(_QWORD *)v459;
      v16 = a4;
      LODWORD(v4) = v419;
      while (1)
      {
        v323 = (unsigned int *)v320 + 2 * v318;
        if (*((_BYTE *)v323 + 5))
          _ZF = 1;
        else
          _ZF = *((_BYTE *)v323 + 4) == 0;
        if (!_ZF)
        {
          if (v321 - 1 != v319)
          {
            v49 = *v323;
            if (v7 <= v49)
              goto LABEL_324;
            p_buf = v319;
            if (v7 <= v319)
              goto LABEL_325;
            v325 = (__int128 *)(v322 + 112 * v49);
            v326 = (_OWORD *)(v322 + 112 * v319);
            v327 = *v325;
            v328 = v325[2];
            v326[1] = v325[1];
            v326[2] = v328;
            *v326 = v327;
            v329 = v325[3];
            v330 = v325[4];
            v331 = v325[6];
            v326[5] = v325[5];
            v326[6] = v331;
            v326[3] = v329;
            v326[4] = v330;
          }
          ++v319;
        }
        v318 = v321;
        v178 = v9 > v321++;
        if (!v178)
          goto LABEL_232;
      }
    }
    v319 = 0;
    v16 = a4;
  }
  else
  {
    v319 = 0;
    v16 = a4;
  }
  LODWORD(v4) = v419;
LABEL_232:
  if (*((_QWORD *)&v457 + 1) > (unint64_t)v319)
    re::DynamicArray<re::VCARenderData::FrustumId>::resize((uint64_t)&v456, v319);
  if (buf.columns[0].i64[0] && (buf.columns[1].i8[0] & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)buf.columns[0].i64[0] + 40))();
  if (v465 && (v467 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v465 + 40))();
  if (v470 && (v472 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v470 + 40))();
  if (v475.i64[0])
  {
    v332 = v476;
    v333 = &v476[14 * v475.i64[0]];
    do
    {
      *v332 = 0;
      ++*((_DWORD *)v332 + 2);
      v332 += 14;
    }
    while (v332 != v333);
  }
  if (*((_QWORD *)&v503 + 1))
  {
    v334 = (char *)v504 + 8;
    v335 = (char *)&v504[9 * *((_QWORD *)&v503 + 1)] + 8;
    do
    {
      *(_QWORD *)v334 = 0;
      ++*((_DWORD *)v334 + 2);
      v334 += 144;
    }
    while (v334 != v335);
  }
  if (v488)
  {
    v336 = (char *)&v489 + 8;
    v337 = (char *)&v489 + 112 * v488 + 8;
    do
    {
      *(_QWORD *)v336 = 0;
      ++*((_DWORD *)v336 + 2);
      v336 += 112;
    }
    while (v336 != v337);
  }
  if (v479[0] && v482)
    (*(void (**)(void))(*(_QWORD *)v479[0] + 40))();
  v17 = a2;
LABEL_256:
  p_buf = (uint64_t)&v459[8];
LABEL_257:
  if (!*(_WORD *)v16)
  {
    v338 = 2512009519;
    goto LABEL_311;
  }
  if (*(_BYTE *)(v16 + 1))
  {
    v339 = (unint64_t)"N2re13VCARenderDataE";
    if (((unint64_t)"N2re13VCARenderDataE" & 0x8000000000000000) != 0)
    {
      v340 = (unsigned __int8 *)((unint64_t)"N2re13VCARenderDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v341 = 5381;
      do
      {
        v339 = v341;
        v342 = *v340++;
        v341 = (33 * v341) ^ v342;
      }
      while (v342);
    }
    v343 = (v422 - 0x61C8864680B583E9 + (v339 << 6) + (v339 >> 2)) ^ v339;
    v344 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 40) + 32))(*(_QWORD *)(v17 + 40), 96, 8);
    v17 = a2;
    v345 = v344;
    *(_QWORD *)(v344 + 8) = v456;
    *(_OWORD *)(v344 + 40) = *(_OWORD *)v459;
    v346 = *(_QWORD *)&v459[24];
    *(_QWORD *)(v344 + 56) = *(_QWORD *)&v459[16];
    *(_QWORD *)(v344 + 64) = v346;
    v347 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)v344 = &off_24ED87090;
    v456 = 0;
    *(_OWORD *)(v344 + 16) = v457;
    v457 = 0u;
    ++v458;
    *(_DWORD *)(v344 + 32) = 1;
    *(_DWORD *)(v344 + 88) = 0;
    memset(v459, 0, 32);
    *(_OWORD *)(v344 + 72) = *(_OWORD *)&v459[32];
    *(_OWORD *)&v459[32] = xmmword_2260F5A80;
    if (!v347)
      goto LABEL_265;
    v347 = v343 % *(unsigned int *)(a2 + 120);
    v348 = *(unsigned int *)(*(_QWORD *)(a2 + 104) + 4 * v347);
    if ((_DWORD)v348 == 0x7FFFFFFF)
      goto LABEL_265;
    v398 = *(_QWORD *)(a2 + 112);
    if (*(_QWORD *)(v398 + 24 * v348 + 8) != v343)
    {
      while (1)
      {
        LODWORD(v348) = *(_DWORD *)(v398 + 24 * v348) & 0x7FFFFFFF;
        if ((_DWORD)v348 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v398 + 24 * v348 + 8) == v343)
          goto LABEL_271;
      }
LABEL_265:
      v349 = *(unsigned int *)(a2 + 132);
      if ((_DWORD)v349 == 0x7FFFFFFF)
      {
        v349 = *(unsigned int *)(a2 + 128);
        v350 = v349;
        if ((_DWORD)v349 == *(_DWORD *)(a2 + 120))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a2 + 96, 2 * *(_DWORD *)(a2 + 124));
          v17 = a2;
          LODWORD(v347) = v343 % *(unsigned int *)(a2 + 120);
          v350 = *(_DWORD *)(a2 + 128);
        }
        *(_DWORD *)(v17 + 128) = v350 + 1;
        v351 = *(_QWORD *)(v17 + 112);
        v352 = *(_DWORD *)(v351 + 24 * v349);
      }
      else
      {
        v351 = *(_QWORD *)(a2 + 112);
        v352 = *(_DWORD *)(v351 + 24 * v349);
        *(_DWORD *)(a2 + 132) = v352 & 0x7FFFFFFF;
      }
      v353 = 24 * v349;
      *(_DWORD *)(v351 + v353) = v352 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(v17 + 112) + v353) = *(_DWORD *)(*(_QWORD *)(v17 + 112) + 24 * v349) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v17 + 104) + 4 * v347);
      *(_QWORD *)(*(_QWORD *)(v17 + 112) + 24 * v349 + 8) = v343;
      *(_QWORD *)(*(_QWORD *)(v17 + 112) + 24 * v349 + 16) = v345;
      *(_DWORD *)(*(_QWORD *)(v17 + 104) + 4 * v347) = v349;
      ++*(_DWORD *)(v17 + 124);
      ++*(_DWORD *)(v17 + 136);
    }
  }
LABEL_271:
  v354 = *(__int128 **)(*(_QWORD *)(v17 + 8) + 120);
  if (*((_QWORD *)v354 + 16))
  {
    v355 = *v354;
    v356 = v354[1];
    v357 = v354[3];
    *(_OWORD *)(v16 + 80) = v354[2];
    *(_OWORD *)(v16 + 96) = v357;
    *(_OWORD *)(v16 + 48) = v355;
    *(_OWORD *)(v16 + 64) = v356;
    v358 = v354[4];
    v359 = v354[5];
    v360 = v354[7];
    *(_OWORD *)(v16 + 144) = v354[6];
    *(_OWORD *)(v16 + 160) = v360;
    *(_OWORD *)(v16 + 112) = v358;
    *(_OWORD *)(v16 + 128) = v359;
    *((_QWORD *)v354 + 16) = 0;
  }
  v49 = (unint64_t)&v489;
  v361 = *(_OWORD *)(v16 + 64);
  v489 = *(_OWORD *)(v16 + 48);
  v490 = v361;
  v362 = *(_OWORD *)(v16 + 96);
  v491 = *(_OWORD *)(v16 + 80);
  v492 = v362;
  v363 = *(_OWORD *)(v16 + 128);
  v493 = *(_OWORD *)(v16 + 112);
  v494 = v363;
  v364 = *(_OWORD *)(v16 + 160);
  v495 = *(_OWORD *)(v16 + 144);
  v496 = v364;
  v365 = *(_OWORD *)(v16 + 176);
  v366 = *(_OWORD *)(v16 + 192);
  v367 = *(_OWORD *)(v16 + 208);
  v500 = *(_OWORD *)(v16 + 224);
  v499 = v367;
  v498 = v366;
  v497 = v365;
  v368 = *(_OWORD *)(v16 + 272);
  v504[0] = *(_OWORD *)(v16 + 288);
  v503 = v368;
  v369 = *(_OWORD *)(v16 + 240);
  v502 = *(_OWORD *)(v16 + 256);
  v370 = (unint64_t)"N2re20WorldToViewCacheDataE";
  v501 = v369;
  if (((unint64_t)"N2re20WorldToViewCacheDataE" & 0x8000000000000000) != 0)
  {
    v371 = (unsigned __int8 *)((unint64_t)"N2re20WorldToViewCacheDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v372 = 5381;
    do
    {
      v370 = v372;
      v373 = *v371++;
      v372 = (33 * v372) ^ v373;
    }
    while (v373);
  }
  v7 = (v422 - 0x61C8864680B583E9 + (v370 << 6) + (v370 >> 2)) ^ v370;
  v374 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 40) + 32))(*(_QWORD *)(v17 + 40), 272, 16);
  v376 = a2;
  v9 = v374;
  *(_QWORD *)v374 = &off_24ED87110;
  *(_OWORD *)(v374 + 208) = v501;
  *(_OWORD *)(v374 + 224) = v502;
  *(_OWORD *)(v374 + 240) = v503;
  *(_OWORD *)(v374 + 256) = v504[0];
  *(_OWORD *)(v374 + 144) = v497;
  *(_OWORD *)(v374 + 160) = v498;
  *(_OWORD *)(v374 + 176) = v499;
  *(_OWORD *)(v374 + 192) = v500;
  *(_OWORD *)(v374 + 80) = v493;
  *(_OWORD *)(v374 + 96) = v494;
  *(_OWORD *)(v374 + 112) = v495;
  *(_OWORD *)(v374 + 128) = v496;
  *(_OWORD *)(v374 + 16) = v489;
  *(_OWORD *)(v374 + 32) = v490;
  *(_OWORD *)(v374 + 48) = v491;
  *(_OWORD *)(v374 + 64) = v492;
  v377 = (re *)(a2 + 96);
  v378 = *(_QWORD *)(a2 + 96);
  if (v378
    && (v378 = v7 % *(unsigned int *)(a2 + 120),
        v379 = *(unsigned int *)(*(_QWORD *)(a2 + 104) + 4 * v378),
        (_DWORD)v379 != 0x7FFFFFFF))
  {
    v397 = *(_QWORD *)(a2 + 112);
    while (*(_QWORD *)(v397 + 24 * v379 + 8) != v7)
    {
      LODWORD(v379) = *(_DWORD *)(v397 + 24 * v379) & 0x7FFFFFFF;
      if ((_DWORD)v379 == 0x7FFFFFFF)
        goto LABEL_278;
    }
  }
  else
  {
LABEL_278:
    v49 = *(unsigned int *)(a2 + 132);
    if ((_DWORD)v49 == 0x7FFFFFFF)
    {
      v49 = *(unsigned int *)(a2 + 128);
      v380 = v49;
      if ((_DWORD)v49 == *(_DWORD *)(a2 + 120))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v377, 2 * *(_DWORD *)(a2 + 124));
        v376 = a2;
        LODWORD(v378) = v7 % *(unsigned int *)(a2 + 120);
        v380 = *(_DWORD *)(a2 + 128);
      }
      *(_DWORD *)(v376 + 128) = v380 + 1;
      v381 = *(_QWORD *)(v376 + 112);
      v382 = *(_DWORD *)(v381 + 24 * v49);
    }
    else
    {
      v381 = *(_QWORD *)(a2 + 112);
      v382 = *(_DWORD *)(v381 + 24 * v49);
      *(_DWORD *)(a2 + 132) = v382 & 0x7FFFFFFF;
    }
    v383 = 24 * v49;
    *(_DWORD *)(v381 + v383) = v382 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v376 + 112) + v383) = *(_DWORD *)(*(_QWORD *)(v376 + 112) + 24 * v49) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v376 + 104) + 4 * v378);
    *(_QWORD *)(*(_QWORD *)(v376 + 112) + 24 * v49 + 8) = v7;
    *(_QWORD *)(*(_QWORD *)(v376 + 112) + 24 * v49 + 16) = v9;
    *(_DWORD *)(*(_QWORD *)(v376 + 104) + 4 * v378) = v49;
    ++*(_DWORD *)(v376 + 124);
    ++*(_DWORD *)(v376 + 136);
  }
  if (!v8 || (v4 & 1) != 0)
    goto LABEL_308;
  if (v8[3].i64[0])
  {
    v384 = *(_OWORD *)(v16 + 64);
    *(_OWORD *)(v16 + 176) = *(_OWORD *)(v16 + 48);
    *(_OWORD *)(v16 + 192) = v384;
    v385 = *(_OWORD *)(v16 + 96);
    *(_OWORD *)(v16 + 208) = *(_OWORD *)(v16 + 80);
    *(_OWORD *)(v16 + 224) = v385;
    if (!v8[3].i64[0])
      goto LABEL_323;
    re::RenderCamera::computeInverseTransform(v8 + 4, (uint64_t)&buf);
    v388 = buf.columns[1];
    v389 = buf.columns[2];
    v390 = buf.columns[3];
    *(simd_float4 *)(v16 + 48) = buf.columns[0];
    *(simd_float4 *)(v16 + 64) = v388;
    *(simd_float4 *)(v16 + 80) = v389;
    *(simd_float4 *)(v16 + 96) = v390;
    if (v8[3].i64[0] <= 1uLL)
    {
      do
        v402 = __ldaxr((unsigned __int8 *)&unk_254121269);
      while (__stlxr(1u, (unsigned __int8 *)&unk_254121269));
      if ((v402 & 1) == 0)
      {
        v400 = *re::graphicsLogObjects(v386);
        if (os_log_type_enabled(v400, OS_LOG_TYPE_DEFAULT))
        {
          buf.columns[0].i16[0] = 0;
          v401 = "Blur: Caching WorldToView matrix: Right Camera data not available";
LABEL_307:
          _os_log_impl(&dword_224FE9000, v400, OS_LOG_TYPE_DEFAULT, v401, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_308;
    }
    v391 = *(_OWORD *)(v16 + 128);
    *(_OWORD *)(v16 + 240) = *(_OWORD *)(v16 + 112);
    *(_OWORD *)(v16 + 256) = v391;
    v392 = *(_OWORD *)(v16 + 160);
    *(_OWORD *)(v16 + 272) = *(_OWORD *)(v16 + 144);
    *(_OWORD *)(v16 + 288) = v392;
    v393 = v8[3].u64[0];
    if (v393 > 1)
    {
      re::RenderCamera::computeInverseTransform(v8 + 6, (uint64_t)&buf);
      v394 = buf.columns[1];
      v395 = buf.columns[2];
      v396 = buf.columns[3];
      *(simd_float4 *)(v16 + 112) = buf.columns[0];
      *(simd_float4 *)(v16 + 128) = v394;
      *(simd_float4 *)(v16 + 144) = v395;
      *(simd_float4 *)(v16 + 160) = v396;
      goto LABEL_308;
    }
LABEL_326:
    re::internal::assertLog((re::internal *)6, v387, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v393);
    _os_crash();
    __break(1u);
LABEL_327:
    re::internal::assertLog((re::internal *)6, v44, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_328:
    re::internal::assertLog((re::internal *)6, v44, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_329;
  }
  do
    v399 = __ldaxr(byte_25412126A);
  while (__stlxr(1u, byte_25412126A));
  if ((v399 & 1) == 0)
  {
    v400 = *re::graphicsLogObjects(v377);
    if (os_log_type_enabled(v400, OS_LOG_TYPE_DEFAULT))
    {
      buf.columns[0].i16[0] = 0;
      v401 = "Blur: Caching WorldToView matrix: Left Camera data not available";
      goto LABEL_307;
    }
  }
LABEL_308:
  v403 = 0xDFC926A60E076268;
  if (!*(_BYTE *)(v16 + 1))
    v403 = 0x7B9CDD2A1D56B4CCLL;
  v404 = 0xBF58476D1CE4E5B9 * (*(int *)(v16 + 12) ^ ((unint64_t)*(int *)(v16 + 12) >> 30));
  v405 = ((v403 << 6)
        - 0x61C8864680B583E9
        + (v403 >> 2)
        + ((0x94D049BB133111EBLL * (v404 ^ (v404 >> 27))) ^ ((0x94D049BB133111EBLL * (v404 ^ (v404 >> 27))) >> 31))) ^ v403;
  v406 = 0xBF58476D1CE4E5B9 * (*(int *)(v16 + 16) ^ ((unint64_t)*(int *)(v16 + 16) >> 30));
  v407 = (((0x94D049BB133111EBLL * (v406 ^ (v406 >> 27))) ^ ((0x94D049BB133111EBLL * (v406 ^ (v406 >> 27))) >> 31))
        - 0x61C8864680B583E9
        + (v405 << 6)
        + (v405 >> 2)) ^ v405;
  v408 = 0xBF58476D1CE4E5B9 * (*(int *)(v16 + 20) ^ ((unint64_t)*(int *)(v16 + 20) >> 30));
  v409 = (((0x94D049BB133111EBLL * (v408 ^ (v408 >> 27))) ^ ((0x94D049BB133111EBLL * (v408 ^ (v408 >> 27))) >> 31))
        - 0x61C8864680B583E9
        + (v407 << 6)
        + (v407 >> 2)) ^ v407;
  v410 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*(int *)(v16 + 24) ^ ((unint64_t)*(int *)(v16 + 24) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(int *)(v16 + 24) ^ ((unint64_t)*(int *)(v16 + 24) >> 30))) >> 27));
  v338 = ((v410 ^ (v410 >> 31)) - 0x61C8864680B583E9 + (v409 << 6) + (v409 >> 2)) ^ v409;
LABEL_311:
  v411 = re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)&v459[8]);
  if (v456 && *(_QWORD *)v459)
    (*(void (**)(double))(*v456 + 40))(v411);
  return v338;
}

void re::VCARenderData::~VCARenderData(re::VCARenderData *this)
{
  double v2;
  uint64_t v3;

  v2 = re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

{
  double v2;
  uint64_t v3;

  v2 = re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 6);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
  JUMPOUT(0x2276933B8);
}

void `anonymous namespace'::createRenderGraphTarget(double *a1, __int128 **a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  re::RenderFrame *v14;
  re::RenderFrame *v15;
  __int128 *v16;
  int v17;
  uint64_t v18[2];
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;

  v4 = *a2;
  v6 = (*a2)[1];
  v5 = (*a2)[2];
  v20 = **a2;
  v21 = v6;
  v22 = v5;
  v7 = v4[6];
  v9 = v4[3];
  v8 = v4[4];
  v25 = v4[5];
  v26 = v7;
  v23 = v9;
  v24 = v8;
  if (*((_BYTE *)a2 + 72))
  {
    v10 = (uint64_t *)a2[2];
    v12 = *v10;
    v11 = v10[1];
    v13 = a2[10];
    v27 = 2 * v12;
    v28 = v11;
    *(_QWORD *)&v26 = ((unint64_t)&v13[4 * v12 - 0x61C8864680B583ELL] + ((v12 & 0x7FFFFFFFFFFFFFFFuLL) >> 2) - 9) ^ v12 & 0x7FFFFFFFFFFFFFFFLL;
    re::StringID::destroyString((re::StringID *)&v27);
  }
  re::RenderFrame::createTarget((re::RenderFrame *)a2[1], (const re::RenderGraphTargetDescription *)&v20, *((const char **)a2[2] + 1), a1);
  if (*((_BYTE *)a2 + 24))
  {
    v14 = (re::RenderFrame *)a2[1];
    v27 = (unint64_t)a2[4] & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::inheritLaneProperties(v14, (uint64_t *)&v27, a1, 0);
  }
  if (*((_BYTE *)a2 + 48))
  {
    DWORD1(v21) = 4;
    LODWORD(v20) = 0;
    re::RenderFrame::createTarget((re::RenderFrame *)a2[1], (const re::RenderGraphTargetDescription *)&v20, (const char *)a2[8], &v27);
    if (*((_BYTE *)a2 + 24))
    {
      v15 = (re::RenderFrame *)a2[1];
      v19 = (unint64_t)a2[4] & 0x7FFFFFFFFFFFFFFFLL;
      re::RenderFrame::inheritLaneProperties(v15, (uint64_t *)&v19, (double *)&v27, 0);
    }
    v16 = a2[1];
    v18[0] = *(uint64_t *)a1;
    v18[1] = (uint64_t)a1[1];
    v17 = v28;
    *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re *)((char *)v16 + 3448), v18) + 80) = v17;
  }
}

re::RenderGraphNode *re::RenderGraph::addNode<re::SFBSystemShellCreateTextureAliasNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 272, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED81DF8;
  *((_BYTE *)v6 + 256) = 0;
  *((_QWORD *)v6 + 33) = 0;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

re::AssetHandle *re::BlurManager::getBackdropMaterial(re::AssetHandle *this, uint64_t a2)
{
  re::AssetHandle *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, void *, void *);
  const re::AssetHandle *v6;

  v2 = this;
  v5 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 160);
  v3 = a2 + 160;
  v4 = v5;
  if (v5)
  {
    if (!v6)
      std::__throw_bad_any_cast[abi:nn180100]();
    return re::AssetHandle::AssetHandle(v2, v6);
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  return this;
}

re::RenderGraphComputeNodeBase *re::RenderGraph::addNode<re::SFBSystemShellComputeNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphComputeNodeBase *v5;
  re::RenderGraphComputeNodeBase *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphComputeNodeBase *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphComputeNodeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 480, 16);
  v6 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(v5, a2);
  *(_QWORD *)v6 = &off_24ED81990;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

re::RenderGraphComputeNodeBase *re::RenderGraph::addNode<re::SFBSystemShellBlurTAANode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphComputeNodeBase *v5;
  re::RenderGraphComputeNodeBase *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphComputeNodeBase *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphComputeNodeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 496, 16);
  v6 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(v5, a2);
  *(_QWORD *)v6 = &off_24ED81A50;
  *((_BYTE *)v6 + 480) = 0;
  *(_QWORD *)((char *)v6 + 484) = 0;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

re::RenderGraphComputeNodeBase *re::RenderGraph::addNode<re::SFBSystemShellReprojectNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphComputeNodeBase *v5;
  re::RenderGraphComputeNodeBase *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphComputeNodeBase *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphComputeNodeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 496, 16);
  v6 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(v5, a2);
  *(_QWORD *)v6 = &off_24ED81D38;
  *((_QWORD *)v6 + 60) = 0;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

unint64_t re::RenderGraphSFBSystemShellBlurProvider::prepareFrame(re::RenderGraphSFBSystemShellBlurProvider *this, const char *__s, const char *a3, re::RenderFrame *a4)
{
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  char *v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  float v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  double v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  const re::mtl::Device *v63;
  uint64_t v64;
  char v65;
  const char *v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  re::RenderGraphPersistentResourceManager *v73;
  const re::mtl::Device *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL4 v80;
  int v81;
  _BOOL4 v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _BOOL4 v87;
  int v88;
  int v89;
  BOOL v90;
  _BOOL4 v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  __int32 v106;
  int8x16_t v107;
  int8x16_t v108;
  unsigned int v109;
  int32x4_t v110;
  unint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __n128 v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  int v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  float v133;
  int v134;
  float v135;
  float v136;
  int v137;
  int v138;
  int v139;
  unint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  unsigned int v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  __int32 v156;
  int32x4_t v157;
  int32x4_t v158;
  const float *v159;
  int8x16_t v160;
  int32x4_t v161;
  int8x16_t v162;
  int32x4_t v163;
  int8x16_t v164;
  int32x4_t v165;
  const float *v166;
  float32x4_t v167;
  int v168;
  int8x16_t v169;
  int8x16_t v170;
  int v171;
  int8x16_t v172;
  int v173;
  int8x16_t v174;
  int v175;
  int8x16_t v176;
  int v177;
  int8x16_t v178;
  int v179;
  int8x16_t v180;
  int v181;
  int8x16_t v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  uint64_t v198;
  int *v199;
  int v200;
  int32x4_t v201;
  int32x2_t v202;
  int32x2_t v203;
  int v204;
  __int128 v205;
  int8x16_t v206;
  __int128 v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  re::RenderGraphSFBSystemShellBlurProvider *v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  char *v220;
  int8x16_t v221;
  int32x4_t v222;
  int8x16_t v223;
  int8x16_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE v229[32];
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  BOOL v243;
  _BYTE __src[48];
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;

  v263 = *MEMORY[0x24BDAC8D0];
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, (unint64_t *)__src);
    v9 = (*(_QWORD *)&__src[8] - 0x61C8864680B583E9 + (*(_QWORD *)__src << 6) + (*(_QWORD *)__src >> 2)) ^ *(_QWORD *)__src;
  }
  else
  {
    v9 = 0;
  }
  v10 = strlen(a3);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)a3, v10, 0, (unint64_t *)__src);
    v11 = ((*(_QWORD *)&__src[8] - 0x61C8864680B583E9 + (*(_QWORD *)__src << 6) + (*(_QWORD *)__src >> 2)) ^ *(_QWORD *)__src)
        - 0x61C8864680B583E9;
  }
  else
  {
    v11 = 0x9E3779B97F4A7C17;
  }
  if (!*((_BYTE *)this + 112))
    return 0;
  v12 = ((v9 >> 2) + (v9 << 6) + v11) ^ v9;
  if (!*(_BYTE *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)a4 + 32, v12) + 462))
    return 0;
  *(_QWORD *)&v236 = v12;
  v15 = *((_DWORD *)this + 383);
  __asm { FMOV            V8.2S, #1.0 }
  if (v15)
  {
    v21 = (char *)this + 1504;
    v22 = (char *)re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)this + 1504, v12);
    if (v22)
      goto LABEL_41;
    v23 = *((unsigned int *)this + 384);
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = (_DWORD *)*((_QWORD *)this + 190);
      while ((*v25 & 0x80000000) == 0)
      {
        v25 += 84;
        if (v23 == ++v24)
        {
          LODWORD(v24) = *((_DWORD *)this + 384);
          break;
        }
      }
      LODWORD(v14) = v24;
    }
    else
    {
      LODWORD(v14) = 0;
    }
    v27 = (char *)this + 1504;
  }
  else
  {
    v21 = (char *)this + 160;
    v23 = *((_QWORD *)this + 18);
    v27 = (char *)this + 336 * v23 + 160;
    if (v23)
    {
      v22 = (char *)this + 176;
      v23 *= 336;
      do
      {
        v14 = *((_QWORD *)v22 - 2);
        if (v14 == v12)
          goto LABEL_41;
        v22 += 336;
        v23 -= 336;
      }
      while (v23);
    }
  }
  v28 = v21 == v27;
  if (v15)
    v28 = (_DWORD)v23 == (_DWORD)v14;
  if (v28)
    goto LABEL_40;
  v29 = *((_QWORD *)a4 + 46) & 0xFFFFFFFFFFFFFFFLL;
  while (v15)
  {
    v30 = *((_QWORD *)v21 + 2);
    if (*(_QWORD *)(v30 + 336 * v14 + 56) + 4 < v29)
    {
      v184 = *(_QWORD *)(v30 + 336 * v14 + 8);
      if (v184)
      {
        if (*((_QWORD *)this + 188))
        {
          v185 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v184 ^ (v184 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v184 ^ (v184 >> 30))) >> 27));
          v186 = (v185 ^ (v185 >> 31)) % *((unsigned int *)this + 382);
          v187 = *((_QWORD *)this + 189);
          v188 = *(unsigned int *)(v187 + 4 * v186);
          if ((_DWORD)v188 != 0x7FFFFFFF)
          {
            v189 = *((_QWORD *)this + 190);
            if (*(_QWORD *)(v189 + 336 * v188 + 8) == v184)
            {
              *(_DWORD *)(v187 + 4 * v186) = *(_DWORD *)(v189 + 336 * v188) & 0x7FFFFFFF;
LABEL_217:
              v198 = *((_QWORD *)this + 190);
              v199 = (int *)(v198 + 336 * v188);
              v200 = *v199;
              if (*v199 < 0)
              {
                *v199 = v200 & 0x7FFFFFFF;
                v198 = *((_QWORD *)this + 190);
                v200 = *(_DWORD *)(v198 + 336 * v188);
              }
              *(_DWORD *)(v198 + 336 * v188) = *((_DWORD *)this + 385) | v200 & 0x80000000;
              *((_DWORD *)this + 385) = v188;
              --*((_DWORD *)this + 383);
              v196 = (char *)this + 1544;
LABEL_220:
              ++*(_DWORD *)v196;
            }
            else
            {
              while (1)
              {
                v197 = v188;
                LODWORD(v188) = *(_DWORD *)(v189 + 336 * v188) & 0x7FFFFFFF;
                if ((_DWORD)v188 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v189 + 336 * v188 + 8) == v184)
                {
                  *(_DWORD *)(v189 + 336 * v197) = *(_DWORD *)(v189 + 336 * v197) & 0x80000000 | *(_DWORD *)(v189 + 336 * v188) & 0x7FFFFFFF;
                  goto LABEL_217;
                }
              }
            }
          }
        }
      }
      goto LABEL_40;
    }
    v31 = v14 + 1;
    do
    {
      LODWORD(v14) = v31;
      if (v31 >= *((_DWORD *)v21 + 8))
        break;
      ++v31;
    }
    while ((*(_DWORD *)(v30 + 336 * v14) & 0x80000000) == 0);
LABEL_37:
    v32 = v21 == v27;
    if (v15)
      v32 = (_DWORD)v23 == (_DWORD)v14;
    if (v32)
      goto LABEL_40;
  }
  if (*((_QWORD *)v21 + 7) + 4 >= v29)
  {
    v21 += 336;
    goto LABEL_37;
  }
  v190 = *(_QWORD *)v21;
  if (*(_QWORD *)v21)
  {
    v191 = *((_QWORD *)this + 18);
    if (v191)
    {
      if (*((_QWORD *)this + 20) == v190)
      {
        v192 = 0;
        goto LABEL_211;
      }
      v192 = 0;
      v193 = (uint64_t *)((char *)this + 496);
      do
      {
        if (v191 - 1 == v192)
          goto LABEL_40;
        v194 = *v193;
        v193 += 42;
        ++v192;
      }
      while (v194 != v190);
      if (v192 < v191)
      {
LABEL_211:
        v195 = v191 - 1;
        if (v191 - 1 > v192)
        {
          memcpy((char *)this + 336 * v192 + 160, (char *)this + 336 * v191 - 176, 0x150uLL);
          v195 = *((_QWORD *)this + 18) - 1;
        }
        *((_QWORD *)this + 18) = v195;
        v196 = (char *)this + 152;
        goto LABEL_220;
      }
LABEL_222:
      re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 527, v192, v191);
      _os_crash();
      __break(1u);
    }
  }
LABEL_40:
  *(_DWORD *)__src = 0x1000000;
  *(_QWORD *)&__src[4] = _D8;
  *(_OWORD *)&__src[12] = xmmword_22619BD00;
  *(_DWORD *)&__src[28] = 1077516698;
  *(_OWORD *)&__src[32] = 0uLL;
  v33 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v245 = *MEMORY[0x24BDAEE00];
  v246 = v33;
  v34 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v36 = *MEMORY[0x24BDAEE00];
  v35 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v247 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v248 = v34;
  v37 = *MEMORY[0x24BDAEE00];
  v38 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v39 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v251 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v252 = v39;
  v249 = v37;
  v250 = v38;
  v40 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v255 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v256 = v40;
  v41 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v253 = *MEMORY[0x24BDAEE00];
  v254 = v41;
  v42 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v259 = v251;
  v260 = v42;
  v257 = v36;
  v258 = v35;
  v262 = 0;
  v261 = 0;
  v22 = (char *)re::SmallHashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,4ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add((uint64_t)this + 128, (uint64_t *)&v236, __src, 1u);
LABEL_41:
  *((_QWORD *)v22 + 5) = *((_QWORD *)a4 + 46) & 0xFFFFFFFFFFFFFFFLL;
  v43 = re::RenderGraphDataStore::tryGet<re::SFBSystemShellBlurContext>((uint64_t)a4 + 32, (int)"SFBSystemShellBlurContext", "RenderFrame");
  v225 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 88);
  v226 = v43;
  v44 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>((uint64_t)a4 + 32, v12);
  v212 = this;
  v220 = (char *)a4 + 32;
  if (v44)
  {
    if (*(_BYTE *)(v44 + 64) == 2)
    {
      v46 = *(_QWORD *)(v44 + 16);
      if (v46 <= 1)
      {
        re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v46);
        _os_crash();
        __break(1u);
        goto LABEL_222;
      }
      v47 = *(float *)(v44 + 52);
      v48 = *(float *)(v44 + 36);
      v49 = v47 >= (float)(v48 + *(float *)(v44 + 44)) || v48 >= (float)(v47 + *(float *)(v44 + 60));
    }
    else
    {
      v49 = 0;
    }
  }
  else
  {
    v49 = 0;
  }
  v22[2] = v49;
  v50 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 88);
  if (v50)
  {
    LODWORD(v236) = 0;
    *(_QWORD *)__src = 0x1389125D3C064618;
    *(_QWORD *)&__src[8] = "blur:passthroughTextureWidth";
    v51 = re::DebugSettingsManager::getWithErrorCode<int>(v50, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v51)
    {
      v52 = v236;
      *((_DWORD *)v22 + 3) = v236;
      *((_DWORD *)v22 + 4) = v52;
    }
    *(_QWORD *)__src = 0x441AC35BB1E33358;
    *(_QWORD *)&__src[8] = "blur:VCATextureWidth";
    v53 = re::DebugSettingsManager::getWithErrorCode<int>(v50, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v53)
    {
      v54 = v236;
      *((_DWORD *)v22 + 5) = v236;
      *((_DWORD *)v22 + 6) = v54;
    }
    *(_DWORD *)v229 = 0;
    *(_QWORD *)__src = 0xBA9708B410B41FEELL;
    *(_QWORD *)&__src[8] = "blur:VCABlurExpansion";
    v55 = re::DebugSettingsManager::getWithErrorCode<float>(v50, __src, v229);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v55)
      *((_DWORD *)v22 + 7) = *(_DWORD *)v229;
    v49 = v22[2];
  }
  v56 = *((_DWORD *)v22 + 4);
  v57 = (double)*((int *)v22 + 3) * 1.5;
  if (v49)
  {
    if (v57 > (double)v56)
      *((_DWORD *)v22 + 4) = 2 * v56;
    v58 = *((_DWORD *)v22 + 6);
    if ((double)*((int *)v22 + 5) * 1.5 > (double)v58)
    {
      v59 = 2 * v58;
      goto LABEL_69;
    }
  }
  else
  {
    if (v57 > (double)v56)
    {
      if (v56 >= 0)
        v60 = *((_DWORD *)v22 + 4);
      else
        v60 = v56 + 1;
      *((_DWORD *)v22 + 4) = v60 >> 1;
    }
    v61 = *((_DWORD *)v22 + 6);
    if ((double)*((int *)v22 + 5) * 1.5 <= (double)v61)
    {
      v59 = v61 / 2;
LABEL_69:
      *((_DWORD *)v22 + 6) = v59;
    }
  }
  v62 = *((_QWORD *)a4 + 52);
  *(_QWORD *)__src = 65290051;
  *((_QWORD *)v22 + 38) = (unint64_t)re::RenderFrame::getScopeProtectionOptions((uint64_t)a4, a3, (uint64_t *)__src) & v62;
  if (a3)
  {
    v64 = *a3;
    if (*a3)
    {
      v65 = a3[1];
      if (v65)
      {
        v66 = a3 + 2;
        do
        {
          v64 = 31 * v64 + v65;
          v67 = *(unsigned __int8 *)v66++;
          v65 = v67;
        }
        while (v67);
      }
      v64 &= ~0x8000000000000000;
    }
  }
  else
  {
    v64 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v227 = v64;
  v68 = re::supportedColorPixelFormat((id *)(*((_QWORD *)a4 + 1) + 184), v63);
  v69 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v68) ^ ((0xBF58476D1CE4E5B9 * v68) >> 27));
  v70 = ((((v12 + 0x292D39BBB76173E7) ^ 0x6DBE18E721BE9D42) << 6)
       - 0x61C8864680B583E9
       + (((v12 + 0x292D39BBB76173E7) ^ 0x6DBE18E721BE9D42) >> 2)
       + (v69 ^ (v69 >> 31))) ^ (v12 + 0x292D39BBB76173E7) ^ 0x6DBE18E721BE9D42;
  v71 = ((v70 << 6) - 0x61C8864680B583E9 + (v70 >> 2)) ^ v70;
  v72 = *((_QWORD *)a4 + 1);
  v73 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
  v243 = 0;
  v75 = re::supportedColorPixelFormat((id *)(v72 + 184), v74);
  v76 = *((_QWORD *)v22 + 38);
  *(_QWORD *)&__src[40] = _D8;
  LODWORD(v247) = -1;
  *(_QWORD *)&v248 = 0;
  BYTE8(v248) = 0;
  *(_DWORD *)&__src[8] = 3;
  v77 = *(_QWORD *)(v22 + 12);
  v245 = xmmword_226135530;
  v246 = xmmword_22619BD10;
  *(_QWORD *)&__src[12] = v77;
  __src[36] = 1;
  *(_OWORD *)&__src[20] = xmmword_22619BD20;
  *((_QWORD *)&v247 + 1) = v76;
  *(_DWORD *)&__src[4] = v75;
  *(_DWORD *)__src = 2;
  v240 = xmmword_22619BD10;
  v241 = v247;
  v242 = v248;
  v236 = *(_OWORD *)__src;
  v237 = *(_OWORD *)&__src[16];
  v238 = *(_OWORD *)&__src[32];
  v239 = xmmword_226135530;
  DWORD1(v236) = 115;
  if (v22[3])
    v78 = 0x41835D6541233CC6;
  else
    v78 = 0x6EE84F42E390DAAFLL;
  if (v22[3])
    v79 = 0x6EE84F42E390DAAFLL;
  else
    v79 = 0x41835D6541233CC6;
  *(_QWORD *)v229 = v78;
  v235 = 0x224DEC6372A17064;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v73, (const re::WeakStringID *)&v227, (const re::WeakStringID *)v229, (const re::WeakStringID *)&v235, a4, (const re::RenderGraphTargetDescription *)__src, &v243);
  v80 = v243;
  *(_QWORD *)v229 = v79;
  v235 = 0x224DEC6372A17065;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v73, (const re::WeakStringID *)&v227, (const re::WeakStringID *)v229, (const re::WeakStringID *)&v235, a4, (const re::RenderGraphTargetDescription *)__src, &v243);
  v81 = v243 || v80;
  *(_QWORD *)v229 = 0x23D59F1355F7D636;
  v235 = 0x500524C6A54C98FCLL;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v73, (const re::WeakStringID *)&v227, (const re::WeakStringID *)v229, (const re::WeakStringID *)&v235, a4, (const re::RenderGraphTargetDescription *)__src, &v243);
  v82 = v243;
  *(_QWORD *)v229 = 0x72FE99054D3CC2B0;
  v235 = 0x4BC26B238B46B276;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v73, (const re::WeakStringID *)&v227, (const re::WeakStringID *)v229, (const re::WeakStringID *)&v235, a4, (const re::RenderGraphTargetDescription *)&v236, &v243);
  v83 = v81 | (v82 || v243);
  if (v22[3])
    v84 = 0x2E4F6D8BCDEF172CLL;
  else
    v84 = 0x1B9E43EDF0404D09;
  if (v22[3])
    v85 = 0x1B9E43EDF0404D09;
  else
    v85 = 0x2E4F6D8BCDEF172CLL;
  v86 = *((_DWORD *)v22 + 6);
  *(_DWORD *)&__src[12] = *((_DWORD *)v22 + 5);
  *(_DWORD *)&__src[16] = v86;
  HIDWORD(v236) = *(_DWORD *)&__src[12];
  LODWORD(v237) = v86;
  *(_QWORD *)v229 = v84;
  v235 = 0x29CB6A1F26966DCALL;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v73, (const re::WeakStringID *)&v227, (const re::WeakStringID *)v229, (const re::WeakStringID *)&v235, a4, (const re::RenderGraphTargetDescription *)__src, &v243);
  v87 = v243;
  *(_QWORD *)v229 = v85;
  v235 = 0x29CB6A1F26966DCBLL;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v73, (const re::WeakStringID *)&v227, (const re::WeakStringID *)v229, (const re::WeakStringID *)&v235, a4, (const re::RenderGraphTargetDescription *)__src, &v243);
  v88 = v87 || v243;
  *(_QWORD *)v229 = 0x60DF09E0AF8AD07;
  v235 = 0x245EA3C951D4BAF2;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v73, (const re::WeakStringID *)&v227, (const re::WeakStringID *)v229, (const re::WeakStringID *)&v235, a4, (const re::RenderGraphTargetDescription *)&v236, &v243);
  v89 = v83 | v88 | v243;
  v90 = v89 != 0;
  if (!*(_BYTE *)(*((_QWORD *)a4 + 1) + 303))
  {
    v91 = v89 != 0;
    *(_OWORD *)v229 = *(_OWORD *)__src;
    *(_OWORD *)&v229[16] = *(_OWORD *)&__src[16];
    v232 = v246;
    v233 = v247;
    v234 = v248;
    v230 = *(_OWORD *)&__src[32];
    v231 = v245;
    *(int32x2_t *)&v229[12] = vshl_n_s32(*(int32x2_t *)&v229[12], 2uLL);
    v235 = 0x7AC65E6EBC1A6022;
    v228 = 0x2F5AA33D1CD8F884;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v73, (const re::WeakStringID *)&v227, (const re::WeakStringID *)&v235, (const re::WeakStringID *)&v228, a4, (const re::RenderGraphTargetDescription *)v229, &v243);
    v90 = v243 || v91;
  }
  *(_QWORD *)v229 = 0x365702DE80DBD47FLL;
  v235 = 0x5E987FCC43D26868;
  re::RenderGraphPersistentResourceManager::registerPersistentTexture(v73, (const re::WeakStringID *)&v227, (const re::WeakStringID *)v229, (const re::WeakStringID *)&v235, a4, (const re::RenderGraphTargetDescription *)__src, &v243);
  v92 = v243 || v90;
  v93 = *((_QWORD *)v22 + 39);
  v94 = re::RenderGraphDataStore::tryGet<re::SceneScope>((uint64_t)v220, v12);
  if (v94
    && (v95 = re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>((uint64_t)v220, (int)"BlurPlanesRenderFrameData", *(char **)(v94 + 8))) != 0)
  {
    v96 = *(_QWORD *)(v95 + 16);
    v97 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v96 ^ (v96 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v96 ^ (v96 >> 30))) >> 27));
    v98 = v97 ^ (v97 >> 31);
    if (v96)
    {
      v99 = (unint64_t *)(*(_QWORD *)(v95 + 32) + 96);
      do
      {
        v100 = *v99;
        v99 += 18;
        v101 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v100 ^ (v100 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v100 ^ (v100 >> 30))) >> 27));
        v98 ^= (v101 >> 31) ^ v101;
        --v96;
      }
      while (v96);
    }
  }
  else
  {
    v98 = 0;
  }
  *((_QWORD *)v22 + 39) = v98;
  v102 = 2;
  if (v92 || v98 != v93)
  {
LABEL_102:
    *((_DWORD *)v22 + 8) = v102;
  }
  else
  {
    v102 = *((_DWORD *)v22 + 8);
    if (v102 >= 1)
    {
      --v102;
      goto LABEL_102;
    }
  }
  if (v226 && v102 <= 0 && *(_BYTE *)v226)
  {
    v104 = 1;
  }
  else
  {
    v104 = 0;
    v22[3] ^= 1u;
  }
  v204 = v104;
  v105 = _AXSEnhanceBackgroundContrastEnabled();
  v106 = _AXDarkenSystemColors();
  if (v105)
  {
    v107.i32[0] = 0;
    v108.i32[0] = v106;
    v221 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v108, v107), 0), (int8x16_t)vdupq_n_s32(0x3EE66666u), (int8x16_t)vdupq_n_s32(0x3E19999Au));
    v213 = 0u;
    v216 = 0u;
    v218 = 0u;
    goto LABEL_114;
  }
  if (v106)
  {
    v218 = (int8x16_t)xmmword_22619BD30;
    v216 = (int8x16_t)xmmword_22619BD40;
    v213 = (int8x16_t)xmmword_22619BD50;
    v109 = 1036831949;
    goto LABEL_112;
  }
  v109 = 1041865114;
  if (v225)
  {
    LODWORD(v236) = 0;
    *(_QWORD *)__src = 0xE45FCCF0FB75A4E6;
    *(_QWORD *)&__src[8] = "blur:filter.v00";
    v156 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    v157.i32[0] = 0;
    v158.i32[0] = v156;
    v219 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v158, v157), 0);
    v222 = v157;
    re::StringID::destroyString((re::StringID *)__src);
    v159 = (const float *)&unk_22619BDA0;
    v160 = (int8x16_t)vld1q_dup_f32(v159);
    v160.i32[0] = v236;
    v218 = vbslq_s8(v219, v160, (int8x16_t)xmmword_22619BD60);
    *(_QWORD *)__src = 0xE45FCCF0FB75A4E8;
    *(_QWORD *)&__src[8] = "blur:filter.v01";
    v161.i32[0] = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    v217 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v161, v222), 0);
    re::StringID::destroyString((re::StringID *)__src);
    v162.i64[0] = v236 | 0x3F3C28F600000000;
    v162.i32[2] = -1098404332;
    v208 = v162;
    *(_QWORD *)__src = 0xE45FCCF0FB75A4EALL;
    *(_QWORD *)&__src[8] = "blur:filter.v02";
    v163.i32[0] = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    v203 = (int32x2_t)vceqq_s32(v163, v222).u64[0];
    re::StringID::destroyString((re::StringID *)__src);
    v164.i64[0] = v236 | 0xBCDD2F1B00000000;
    v214 = v164;
    *(_QWORD *)__src = 0xE45FCCF0FB75A4EELL;
    *(_QWORD *)&__src[8] = "blur:filter.v04";
    v165.i32[0] = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    v201 = v165;
    re::StringID::destroyString((re::StringID *)__src);
    v166 = (const float *)&dword_226102BEC;
    v167 = vld1q_dup_f32(v166);
    v167.i32[0] = v236;
    v211 = (int8x16_t)v167;
    *(_QWORD *)__src = 0xE45FCCF0FB75A524;
    *(_QWORD *)&__src[8] = "blur:filter.v10";
    v168 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v168)
    {
      v169 = v218;
      v169.i32[1] = v236;
      v218 = v169;
    }
    v202 = (int32x2_t)vceqq_s32(v201, v222).u64[0];
    v223 = (int8x16_t)vdupq_lane_s32(v203, 0);
    v170 = v214;
    v170.i32[2] = 1064900231;
    v215 = v170;
    v216 = vbslq_s8(v217, v208, (int8x16_t)xmmword_22619BD70);
    *(_QWORD *)__src = 0xE45FCCF0FB75A526;
    *(_QWORD *)&__src[8] = "blur:filter.v11";
    v171 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v171)
    {
      v172 = v216;
      v172.i32[1] = v236;
      v216 = v172;
    }
    v206 = (int8x16_t)vdupq_n_s32(0x3E19999Au);
    v209 = (int8x16_t)vdupq_lane_s32(v202, 0);
    v213 = vbslq_s8(v223, v215, (int8x16_t)xmmword_22619BD80);
    *(_QWORD *)__src = 0xE45FCCF0FB75A528;
    *(_QWORD *)&__src[8] = "blur:filter.v12";
    v173 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v173)
    {
      v174 = v213;
      v174.i32[1] = v236;
      v213 = v174;
    }
    v224 = vbslq_s8(v209, v211, v206);
    *(_QWORD *)__src = 0xE45FCCF0FB75A52CLL;
    *(_QWORD *)&__src[8] = "blur:filter.v14";
    v175 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v175)
    {
      v176 = v224;
      v176.i32[1] = v236;
      v224 = v176;
    }
    *(_QWORD *)__src = 0xE45FCCF0FB75A562;
    *(_QWORD *)&__src[8] = "blur:filter.v20";
    v177 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v177)
    {
      v178 = v218;
      v178.i32[2] = v236;
      v218 = v178;
    }
    *(_QWORD *)__src = 0xE45FCCF0FB75A564;
    *(_QWORD *)&__src[8] = "blur:filter.v21";
    v179 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v179)
    {
      v180 = v216;
      v180.i32[2] = v236;
      v216 = v180;
    }
    *(_QWORD *)__src = 0xE45FCCF0FB75A566;
    *(_QWORD *)&__src[8] = "blur:filter.v22";
    v181 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (!v181)
    {
      v182 = v213;
      v182.i32[2] = v236;
      v213 = v182;
    }
    *(_QWORD *)__src = 0xE45FCCF0FB75A56ALL;
    *(_QWORD *)&__src[8] = "blur:filter.v24";
    v183 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    v110 = (int32x4_t)v224;
    if (!v183)
      v110.i32[2] = v236;
  }
  else
  {
    v218 = (int8x16_t)xmmword_22619BD60;
    v216 = (int8x16_t)xmmword_22619BD70;
    v213 = (int8x16_t)xmmword_22619BD80;
LABEL_112:
    v110 = vdupq_n_s32(v109);
  }
  v221 = (int8x16_t)v110;
LABEL_114:
  re::ColorHelpers::computeGamutTransformMatrix(1, 0, (uint64_t)__src);
  v205 = *(_OWORD *)__src;
  v207 = *(_OWORD *)&__src[16];
  v111 = (unint64_t)"N2re24ColorFilterConstantsDataE";
  v210 = *(int8x16_t *)&__src[32];
  if (((unint64_t)"N2re24ColorFilterConstantsDataE" & 0x8000000000000000) != 0)
  {
    v112 = (unsigned __int8 *)((unint64_t)"N2re24ColorFilterConstantsDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v113 = 5381;
    do
    {
      v111 = v113;
      v114 = *v112++;
      v113 = (33 * v113) ^ v114;
    }
    while (v114);
  }
  v103 = ((v71 << 6) + (v71 >> 2) - 0xB36702970AA7E04) ^ v71;
  v115 = ((v103 << 6) - 0x61C8864680B583E9 + (v103 >> 2)) ^ v103;
  v116 = (v12 - 0x61C8864680B583E9 + (v111 << 6) + (v111 >> 2)) ^ v111;
  v117 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a4 + 5) + 32))(*((_QWORD *)a4 + 5), 128, 16);
  *(int8x16_t *)(v117 + 16) = v218;
  *(int8x16_t *)(v117 + 32) = v216;
  *(int8x16_t *)(v117 + 48) = v213;
  *(int8x16_t *)(v117 + 64) = v221;
  *(_QWORD *)(v117 + 80) = v205;
  *(_DWORD *)(v117 + 88) = DWORD2(v205);
  *(_QWORD *)(v117 + 96) = v207;
  *(_DWORD *)(v117 + 104) = DWORD2(v207);
  v118 = (__n128)v210;
  *(_QWORD *)(v117 + 112) = v210.i64[0];
  *(_DWORD *)(v117 + 120) = v210.i32[2];
  v119 = *((_QWORD *)a4 + 12);
  *(_QWORD *)v117 = &off_24ED87160;
  if (v119
    && (v119 = v116 % *((unsigned int *)a4 + 30),
        v120 = *(unsigned int *)(*((_QWORD *)a4 + 13) + 4 * v119),
        (_DWORD)v120 != 0x7FFFFFFF))
  {
    v154 = *((_QWORD *)a4 + 14);
    while (*(_QWORD *)(v154 + 24 * v120 + 8) != v116)
    {
      LODWORD(v120) = *(_DWORD *)(v154 + 24 * v120) & 0x7FFFFFFF;
      if ((_DWORD)v120 == 0x7FFFFFFF)
        goto LABEL_119;
    }
  }
  else
  {
LABEL_119:
    v121 = *((unsigned int *)a4 + 33);
    if ((_DWORD)v121 == 0x7FFFFFFF)
    {
      v121 = *((unsigned int *)a4 + 32);
      v122 = v121;
      if ((_DWORD)v121 == *((_DWORD *)a4 + 30))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)a4 + 96, 2 * *((_DWORD *)a4 + 31));
        LODWORD(v119) = v116 % *((unsigned int *)a4 + 30);
        v122 = *((_DWORD *)a4 + 32);
      }
      *((_DWORD *)a4 + 32) = v122 + 1;
      v123 = *((_QWORD *)a4 + 14);
      v124 = *(_DWORD *)(v123 + 24 * v121);
    }
    else
    {
      v123 = *((_QWORD *)a4 + 14);
      v124 = *(_DWORD *)(v123 + 24 * v121);
      *((_DWORD *)a4 + 33) = v124 & 0x7FFFFFFF;
    }
    v125 = 24 * v121;
    *(_DWORD *)(v123 + v125) = v124 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)a4 + 14) + v125) = *(_DWORD *)(*((_QWORD *)a4 + 14) + 24 * v121) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * v119);
    *(_QWORD *)(*((_QWORD *)a4 + 14) + 24 * v121 + 8) = v116;
    *(_QWORD *)(*((_QWORD *)a4 + 14) + 24 * v121 + 16) = v117;
    *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * v119) = v121;
    ++*((_DWORD *)a4 + 31);
    ++*((_DWORD *)a4 + 34);
  }
  v26 = 2512009519;
  v126 = *((unsigned __int8 *)v212 + 112);
  if ((v126 - 1) >= 2)
    v127 = v115;
  else
    v127 = 2512009519;
  if (v126 == 4)
  {
    v128 = v204;
    v131 = (v127 << 6)
         - 0x61C8864680B583E9
         + (v127 >> 2)
         + re::RenderGraphSFBSystemShellBlurProvider::prepareVCABlur(v12, (uint64_t)a4, v204, (uint64_t)v22);
    goto LABEL_134;
  }
  v128 = v204;
  if (v126 == 3)
  {
    re::RenderGraphSFBSystemShellBlurProvider::prepareVCABlur(v12, (uint64_t)a4, v204, (uint64_t)v22);
    v129 = *v22 | v22[1];
    *v22 = v129;
    v22[1] = 0;
    if (v129)
    {
      v130 = 0xBF58476D1CE4E5B9 * (*((int *)v22 + 3) ^ ((unint64_t)*((int *)v22 + 3) >> 30));
      v26 = (((0x94D049BB133111EBLL * (v130 ^ (v130 >> 27))) ^ ((0x94D049BB133111EBLL * (v130 ^ (v130 >> 27))) >> 31))
           - 0x59ECBDB75CFBBFDFLL) ^ 0x23FB73AE8E00E62ALL;
    }
    v131 = (v127 << 6) - 0x61C8864680B583E9 + (v127 >> 2) + v26;
LABEL_134:
    v26 = v131 ^ v127;
  }
  if (v225)
  {
    LODWORD(v236) = 0;
    *(_QWORD *)__src = 0x55CC0F1AC1A278;
    *(_QWORD *)&__src[8] = "blur:taaMixValue.passthrough";
    v132 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    if (v132)
      v133 = 0.65;
    else
      v133 = *(float *)&v236;
    *(_QWORD *)__src = 0x70F94BFC4F683DF8;
    *(_QWORD *)&__src[8] = "blur:taaMixValue.vca";
    v134 = re::DebugSettingsManager::getWithErrorCode<float>(v225, __src, &v236);
    re::StringID::destroyString((re::StringID *)__src);
    v118.n128_u32[0] = v236;
    if (v134)
      v118.n128_f32[0] = 0.65;
  }
  else
  {
    v133 = 0.65;
    v118.n128_u32[0] = 1059481190;
  }
  v135 = 1.0;
  if (v102 <= 0)
  {
    v136 = v118.n128_f32[0];
  }
  else
  {
    v133 = 1.0;
    v136 = 1.0;
  }
  if (v128)
  {
    v137 = *((_DWORD *)v22 + 9) + 1;
    v118.n128_f32[0] = (float)v137 + 1.0;
  }
  else
  {
    v137 = 0;
    v118.n128_u32[0] = 1.0;
  }
  *((_DWORD *)v22 + 9) = v137;
  if (v226 && v102 <= 0)
  {
    v118.n128_f32[0] = v118.n128_f32[0] / (float)(*(_DWORD *)(v226 + 4) + 1);
    if (v118.n128_f32[0] > 1.0)
      v118.n128_f32[0] = 1.0;
    if (v118.n128_f32[0] >= 0.0)
      v135 = v118.n128_f32[0];
    else
      v135 = 0.0;
  }
  if (v225)
  {
    LOBYTE(v236) = 0;
    *(_QWORD *)__src = 0x13A98A684FC91826;
    *(_QWORD *)&__src[8] = "blur:enableReprojectionLerping";
    v138 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v225, __src, &v236);
    v139 = v138 | v236;
    re::StringID::destroyString((re::StringID *)__src);
    v118.n128_u32[0] = 1.0;
    if (!v139)
      v135 = 1.0;
  }
  v140 = (unint64_t)"N2re21BlurReprojectionStateE";
  if (((unint64_t)"N2re21BlurReprojectionStateE" & 0x8000000000000000) != 0)
  {
    v141 = (unsigned __int8 *)((unint64_t)"N2re21BlurReprojectionStateE" & 0x7FFFFFFFFFFFFFFFLL);
    v142 = 5381;
    do
    {
      v140 = v142;
      v143 = *v141++;
      v142 = (33 * v142) ^ v143;
    }
    while (v143);
  }
  v144 = (v12 - 0x61C8864680B583E9 + (v140 << 6) + (v140 >> 2)) ^ v140;
  v145 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128))(**((_QWORD **)a4 + 5) + 32))(*((_QWORD *)a4 + 5), 24, 8, v118);
  *(_QWORD *)v145 = &off_24ED871A0;
  *(_BYTE *)(v145 + 8) = v128;
  *(float *)(v145 + 12) = v133;
  *(float *)(v145 + 16) = v136;
  *(float *)(v145 + 20) = v135;
  v146 = *((_QWORD *)a4 + 12);
  if (v146
    && (v146 = v144 % *((unsigned int *)a4 + 30),
        v147 = *(unsigned int *)(*((_QWORD *)a4 + 13) + 4 * v146),
        (_DWORD)v147 != 0x7FFFFFFF))
  {
    v155 = *((_QWORD *)a4 + 14);
    if (*(_QWORD *)(v155 + 24 * v147 + 8) != v144)
    {
      while (1)
      {
        LODWORD(v147) = *(_DWORD *)(v155 + 24 * v147) & 0x7FFFFFFF;
        if ((_DWORD)v147 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v155 + 24 * v147 + 8) == v144)
          return v26;
      }
      goto LABEL_164;
    }
  }
  else
  {
LABEL_164:
    v148 = *((unsigned int *)a4 + 33);
    if ((_DWORD)v148 == 0x7FFFFFFF)
    {
      v148 = *((unsigned int *)a4 + 32);
      v149 = v148;
      if ((_DWORD)v148 == *((_DWORD *)a4 + 30))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)a4 + 96, 2 * *((_DWORD *)a4 + 31));
        LODWORD(v146) = v144 % *((unsigned int *)a4 + 30);
        v149 = *((_DWORD *)a4 + 32);
      }
      *((_DWORD *)a4 + 32) = v149 + 1;
      v150 = *((_QWORD *)a4 + 14);
      v151 = *(_DWORD *)(v150 + 24 * v148);
    }
    else
    {
      v150 = *((_QWORD *)a4 + 14);
      v151 = *(_DWORD *)(v150 + 24 * v148);
      *((_DWORD *)a4 + 33) = v151 & 0x7FFFFFFF;
    }
    v152 = 24 * v148;
    *(_DWORD *)(v150 + v152) = v151 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)a4 + 14) + v152) = *(_DWORD *)(*((_QWORD *)a4 + 14) + 24 * v148) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * v146);
    *(_QWORD *)(*((_QWORD *)a4 + 14) + 24 * v148 + 8) = v144;
    *(_QWORD *)(*((_QWORD *)a4 + 14) + 24 * v148 + 16) = v145;
    *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * v146) = v148;
    ++*((_DWORD *)a4 + 31);
    ++*((_DWORD *)a4 + 34);
  }
  return v26;
}

void re::RenderGraphSFBSystemShellBlurProvider::provide(re::RenderGraphSFBSystemShellBlurProvider *this, char *__s, char *a3, re::RenderFrame *a4)
{
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  int v41;
  const re::mtl::Device *v42;
  unsigned int v43;
  uint64_t v45;
  char v46;
  const char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  re::RenderGraphNode *v52;
  re *v53;
  re::RenderGraphNode *TextureAlias;
  re::RenderGraphNode *v55;
  int v56;
  _anonymous_namespace_ *v57;
  uint64_t *v58;
  char **__ptr32 *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  re *v63;
  uint64_t *v64;
  uint64_t v65;
  re::RenderGraphNode *v66;
  re *v67;
  uint64_t *v68;
  uint64_t v69;
  re::RenderGraphMRCNode *v70;
  __n128 v71;
  uint64_t v72;
  re::RenderGraphFullscreenNode *v73;
  double v74;
  re::RenderGraphComputeNodeBase *v75;
  int v76;
  int v77;
  int v78;
  __n128 v79;
  const char *v80;
  re *v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  re::RenderGraphComputeNodeBase *v85;
  uint64_t *v86;
  uint64_t v87;
  re::RenderGraphComputeNodeBase *v88;
  re::RenderGraphComputeNodeBase *v89;
  int v90;
  re::RenderGraphComputeNodeBase *v91;
  re::RenderGraphComputeNodeBase *v92;
  __n128 v93;
  re::RenderGraphComputeNodeBase *v94;
  int v95;
  re::RenderGraphComputeNodeBase *v96;
  re::RenderGraphNode *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  BOOL v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t *v121;
  _anonymous_namespace_ *RenderGraph;
  char *v123;
  int v124;
  __int128 v125;
  unint64_t v128;
  __int128 v129;
  double v130[2];
  uint64_t v131[2];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  __int128 v137;
  char v138;
  __int16 v139;
  char v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  int v144;
  __int128 v145;
  char v146;
  _BYTE v147[48];
  __int128 v148;
  __int128 v149;
  _BYTE v150[25];
  _BYTE v151[48];
  __int128 v152;
  __int128 v153;
  _BYTE v154[25];
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  _BYTE v168[32];
  __int128 v169;
  __int128 v170;
  _BYTE v171[32];
  __int16 v172;
  char v173;
  _BYTE __src[40];
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  _BYTE v178[32];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE v193[32];
  __int128 v194;
  __int16 v195;
  int v196;
  int v197;
  char v198;
  _BYTE v199[64];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  _OWORD v203[2];
  _OWORD v204[2];
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 112))
    return;
  v6 = 0x9E3779B97F4A7C17;
  v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, (unint64_t *)__src);
    v8 = (*(_QWORD *)&__src[8] - 0x61C8864680B583E9 + (*(_QWORD *)__src << 6) + (*(_QWORD *)__src >> 2)) ^ *(_QWORD *)__src;
  }
  else
  {
    v8 = 0;
  }
  v9 = strlen(a3);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)a3, v9, 0, (unint64_t *)__src);
    v6 = ((*(_QWORD *)&__src[8] - 0x61C8864680B583E9 + (*(_QWORD *)__src << 6) + (*(_QWORD *)__src >> 2)) ^ *(_QWORD *)__src)
       - 0x61C8864680B583E9;
  }
  v10 = ((v8 >> 2) + (v8 << 6) + v6) ^ v8;
  v128 = v10;
  if (!*((_DWORD *)this + 383))
  {
    v28 = *((_QWORD *)this + 18);
    if (v28)
    {
      v11 = (unsigned __int8 *)this + 176;
      v29 = 336 * v28;
      while (*((_QWORD *)v11 - 2) != v10)
      {
        v11 += 336;
        v29 -= 336;
        if (!v29)
          goto LABEL_14;
      }
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)__src = 0x1000000;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&__src[4] = _D0;
    *(_OWORD *)&__src[12] = xmmword_22619BD00;
    *(_DWORD *)&__src[28] = 1077516698;
    v175 = 0;
    *(_QWORD *)&__src[32] = 0;
    v31 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v176 = *MEMORY[0x24BDAEE00];
    v32 = *MEMORY[0x24BDAEE00];
    v177 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v33 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    *(_OWORD *)v178 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v34 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    *(_OWORD *)&v178[16] = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v35 = *MEMORY[0x24BDAEE00];
    v36 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v181 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v182 = v36;
    v179 = v35;
    v180 = v33;
    v37 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v185 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v186 = v37;
    v38 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v183 = *MEMORY[0x24BDAEE00];
    v184 = v38;
    v39 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v189 = v34;
    v190 = v39;
    v187 = v32;
    v188 = v31;
    v192 = 0;
    v191 = 0;
    v27 = (uint64_t)re::SmallHashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,4ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add((uint64_t)this + 128, (uint64_t *)&v128, __src, 0);
    goto LABEL_15;
  }
  v11 = (unsigned __int8 *)re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)this + 1504, v10);
  if (!v11)
  {
    *(_DWORD *)__src = 0x1000000;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&__src[4] = _D0;
    *(_OWORD *)&__src[12] = xmmword_22619BD00;
    *(_DWORD *)&__src[28] = 1077516698;
    v175 = 0;
    *(_QWORD *)&__src[32] = 0;
    v17 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v176 = *MEMORY[0x24BDAEE00];
    v177 = v17;
    v18 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v20 = *MEMORY[0x24BDAEE00];
    v19 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    *(_OWORD *)v178 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    *(_OWORD *)&v178[16] = v18;
    v21 = *MEMORY[0x24BDAEE00];
    v22 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v23 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v181 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v182 = v23;
    v179 = v21;
    v180 = v22;
    v24 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v185 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v186 = v24;
    v25 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v183 = *MEMORY[0x24BDAEE00];
    v184 = v25;
    v26 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v189 = v181;
    v190 = v26;
    v187 = v20;
    v188 = v19;
    v192 = 0;
    v191 = 0;
    v27 = re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)this + 1504, (uint64_t *)&v128, __src);
LABEL_15:
    v11 = (unsigned __int8 *)v27;
  }
LABEL_16:
  if (*((unsigned __int8 *)this + 112) - 3 <= 1 && *v11 | v11[1])
  {
    re::AssetHandle::loadNow(*((_QWORD *)this + 12), 0);
    v40 = *((_DWORD *)v11 + 4);
    v120 = *((_DWORD *)v11 + 5);
    v114 = *((_DWORD *)v11 + 6);
    v41 = *((_DWORD *)v11 + 3);
    RenderGraph = (_anonymous_namespace_ *)re::RenderFrame::makeRenderGraph(a4, a3, 0);
    v43 = re::supportedColorPixelFormat((id *)(*((_QWORD *)a4 + 1) + 184), v42);
    *(_DWORD *)&__src[8] = 3;
    *(_DWORD *)&__src[12] = v41;
    *(_DWORD *)&__src[16] = v40;
    *(_OWORD *)&__src[20] = xmmword_22619BD20;
    __src[36] = 1;
    __asm { FMOV            V8.2S, #1.0 }
    v175 = _D8;
    v176 = xmmword_226135530;
    v177 = xmmword_22619BD10;
    *(_DWORD *)v178 = -1;
    *(_OWORD *)&v178[8] = xmmword_2260FF4D0;
    v178[24] = 0;
    *(_DWORD *)&__src[4] = v43;
    *(_DWORD *)__src = 2;
    LODWORD(v167) = 0;
    v116 = v43;
    *(_QWORD *)((char *)&v167 + 4) = v43 | 0x300000000;
    HIDWORD(v167) = v41;
    *(_DWORD *)v168 = v40;
    *(_OWORD *)&v168[4] = xmmword_22619BD20;
    v168[20] = 1;
    *(_QWORD *)&v168[24] = _D8;
    v169 = xmmword_226135530;
    v170 = xmmword_22619BD10;
    *(_DWORD *)v171 = -1;
    *(_OWORD *)&v171[8] = xmmword_2260FF4D0;
    v171[24] = 0;
    v109 = v40;
    if (a3)
    {
      v45 = *a3;
      if (*a3)
      {
        v46 = a3[1];
        if (v46)
        {
          v47 = a3 + 2;
          do
          {
            v45 = 31 * v45 + v46;
            v48 = *(unsigned __int8 *)v47++;
            v46 = v48;
          }
          while (v48);
        }
        v49 = v45 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v49 = 0;
      }
    }
    else
    {
      v49 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v50 = *((_QWORD *)a4 + 1);
    v119 = *(unsigned __int8 *)(v50 + 303);
    v51 = *(_QWORD *)(v50 + 120);
    v123 = __s;
    v121 = (uint64_t *)((char *)this + 88);
    if (v51)
    {
      re::BlurManager::getBackdropMaterial((re::AssetHandle *)v151, v51);
      v108 = *(_QWORD *)&v151[8] != 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v151);
    }
    else
    {
      v108 = 0;
    }
    *(_QWORD *)v151 = &v167;
    *(_QWORD *)&v151[8] = a4;
    *(_QWORD *)v147 = 0x730609FCA8E5BE4FLL;
    *(_QWORD *)&v147[8] = "PassthroughColor";
    *(_QWORD *)&v151[16] = v147;
    v151[24] = 1;
    *(_QWORD *)&v151[32] = 65290051;
    *(_QWORD *)&v151[40] = "Color";
    LOBYTE(v152) = 0;
    BYTE8(v153) = 0;
    *(_QWORD *)v151 = __src;
    *(_QWORD *)&v151[8] = a4;
    *(_QWORD *)&v151[16] = &re::kPassthroughBlurredColorRead;
    v151[24] = 0;
    LOBYTE(v152) = 0;
    BYTE8(v153) = 1;
    *(_QWORD *)v154 = v49;
    *(_QWORD *)v151 = __src;
    *(_QWORD *)&v151[8] = a4;
    *(_QWORD *)&v151[16] = &re::kPassthroughBlurredColorWrite;
    v151[24] = 0;
    LOBYTE(v152) = 0;
    BYTE8(v153) = 1;
    *(_QWORD *)v154 = v49;
    *(_QWORD *)v151 = &v167;
    *(_QWORD *)&v151[8] = a4;
    *(_QWORD *)v147 = 0x4231BC5CFFB1FB38;
    *(_QWORD *)&v147[8] = "UnprojectedBlurredColor";
    *(_QWORD *)&v151[16] = v147;
    v151[24] = 1;
    *(_QWORD *)&v151[32] = 65290051;
    *(_QWORD *)&v151[40] = "Color";
    LOBYTE(v152) = 0;
    BYTE8(v153) = 0;
    *(_QWORD *)v151 = __src;
    *(_QWORD *)&v151[8] = a4;
    *(_QWORD *)&v151[16] = &re::kOutputPassthroughBlurredColor;
    v151[24] = 0;
    LOBYTE(v152) = 0;
    BYTE8(v153) = 1;
    *(_QWORD *)v154 = v49;
    *(_QWORD *)v151 = 0x10CC0F66D471B4F0;
    re::RenderFrame::addTargetOutput(a4, (uint64_t *)v151, (double *)&v157, a3);
    *(_QWORD *)v151 = __src;
    *(_QWORD *)&v151[8] = a4;
    *(_QWORD *)&v151[16] = &re::kOutputPassthroughBlurredColorSRGB;
    v151[24] = 0;
    LOBYTE(v152) = 0;
    BYTE8(v153) = 1;
    *(_QWORD *)v154 = v49;
    *(_QWORD *)v151 = 0x23D59E48A3024D6ALL;
    re::RenderFrame::addTargetOutput(a4, (uint64_t *)v151, (double *)&v155, a3);
    v52 = re::RenderGraph::addNode<re::RenderGraphCameraSetupNode>(RenderGraph, "CameraSetup");
    *((_BYTE *)v52 + 256) = 1;
    v53 = (re *)(*(uint64_t (**)(re::RenderGraphNode *, char *, char *, re::RenderFrame *))(*(_QWORD *)v52 + 80))(v52, __s, a3, a4);
    *(_QWORD *)v151 = 3;
    *(_DWORD *)&v151[8] = 2;
    memset(&v151[12], 255, 24);
    v151[36] = 0;
    *(_QWORD *)&v151[40] = _D8;
    v152 = xmmword_226135530;
    v153 = xmmword_226135540;
    *(_DWORD *)v154 = -1;
    *(_OWORD *)&v154[8] = xmmword_2260FF4D0;
    v154[24] = 0;
    *(_QWORD *)v147 = 3;
    *(_DWORD *)&v147[8] = 2;
    memset(&v147[12], 255, 24);
    v147[36] = 0;
    *(_QWORD *)&v147[40] = _D8;
    v148 = xmmword_226135530;
    v149 = xmmword_226135540;
    *(_DWORD *)v150 = -1;
    *(_OWORD *)&v150[8] = xmmword_2260FF4D0;
    v150[24] = 0;
    v134 = 3;
    v135 = 2;
    v136 = -1;
    *(_QWORD *)&v137 = -1;
    *((_QWORD *)&v137 + 1) = -1;
    v138 = 0;
    v141 = _D8;
    v142 = xmmword_226135530;
    v143 = xmmword_226135540;
    v144 = -1;
    v145 = xmmword_2260FF4D0;
    v146 = 0;
    v132 = 0;
    v133 = -1;
    if (v11[1])
    {
      TextureAlias = re::RenderGraph::addNode<re::SFBSystemShellCreateTextureAliasNode>(RenderGraph, "SetVCAPassthroughAlias");
      *(_QWORD *)v199 = v157;
      *(_QWORD *)&v199[8] = v158;
      *(_QWORD *)&v199[16] = 0;
      *(_QWORD *)&v199[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)TextureAlias + 176), (__n128 *)v199);
      *((_QWORD *)TextureAlias + 33) = 0x23D59F1355F7D636;
      v55 = re::RenderGraph::addNode<re::SFBSystemShellCreateTextureAliasNode>(RenderGraph, "SetVCAPassthroughSRGBAlias");
      *(_QWORD *)v199 = v155;
      *(_QWORD *)&v199[8] = v156;
      *(_QWORD *)&v199[16] = 0;
      *(_QWORD *)&v199[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v55 + 176), (__n128 *)v199);
      *((_QWORD *)v55 + 33) = 0x72FE99054D3CC2B0;
      v139 = v172;
      v140 = v173;
      *(_DWORD *)&v151[8] = 3;
      *(_DWORD *)&v151[12] = v120;
      *(_DWORD *)&v151[16] = v114;
      *(_OWORD *)&v151[20] = xmmword_22619BD20;
      v151[36] = 1;
      *(_WORD *)&v151[37] = v172;
      v151[39] = v173;
      *(_QWORD *)&v151[40] = _D8;
      v152 = xmmword_226135530;
      v153 = xmmword_22619BD10;
      *(_DWORD *)v154 = -1;
      *(_OWORD *)&v154[8] = xmmword_2260FF4D0;
      v154[24] = 0;
      *(_DWORD *)&v151[4] = v116;
      *(_DWORD *)v151 = 2;
      *(_OWORD *)&v150[9] = *(_OWORD *)&v154[9];
      v149 = xmmword_22619BD10;
      *(_OWORD *)v150 = *(_OWORD *)v154;
      *(_OWORD *)&v147[32] = *(_OWORD *)&v151[32];
      v148 = xmmword_226135530;
      *(_OWORD *)v147 = *(_OWORD *)v151;
      *(_OWORD *)&v147[16] = *(_OWORD *)&v151[16];
      *(int32x2_t *)&v147[12] = vshl_n_s32(*(int32x2_t *)&v147[12], 2uLL);
      LODWORD(v134) = 0;
      HIDWORD(v134) = v116;
      v137 = xmmword_22619BD20;
      v138 = 1;
      v141 = _D8;
      v142 = xmmword_226135530;
      v143 = xmmword_22619BD90;
      v144 = -1;
      v145 = xmmword_2260FF4D0;
      v146 = 0;
      v135 = 3;
      LODWORD(v136) = 4 * v120;
      HIDWORD(v136) = 4 * v114;
      if (v119)
      {
        *(_QWORD *)v199 = &v134;
        *(_QWORD *)&v199[8] = a4;
        *(_QWORD *)&v199[16] = &re::kVCARenderTarget;
        v199[24] = 1;
        *(_QWORD *)&v199[32] = 65290051;
        *(_QWORD *)&v199[40] = "Color";
        v199[48] = 0;
        BYTE8(v200) = 0;
      }
      else
      {
        *(_QWORD *)v199 = v147;
        *(_QWORD *)&v199[8] = a4;
        *(_QWORD *)&v199[16] = &re::kVCARenderTarget;
        v199[24] = 0;
        v199[48] = 0;
        BYTE8(v200) = 1;
        *(_QWORD *)&v201 = v49;
      }
      v60 = *(_QWORD *)v193;
      v56 = *(_DWORD *)&v193[8];
      v107 = *(_DWORD *)&v193[12];
      v59 = &off_2260E5000;
      *(_QWORD *)v199 = v151;
      *(_QWORD *)&v199[8] = a4;
      *(_QWORD *)&v199[16] = &re::kVCADownsampledColor;
      v199[24] = 0;
      v199[48] = 0;
      BYTE8(v200) = 1;
      *(_QWORD *)&v201 = v49;
      v118 = *(_QWORD *)v193;
      v115 = *(_DWORD *)&v193[12];
      v117 = *(_DWORD *)&v193[8];
      *(_QWORD *)v199 = v151;
      *(_QWORD *)&v199[8] = a4;
      *(_QWORD *)&v199[16] = &re::kVCABlurredColorRead;
      v199[24] = 0;
      v199[48] = 0;
      BYTE8(v200) = 1;
      *(_QWORD *)&v201 = v49;
      v111 = *(_QWORD *)v193;
      v101 = *(_DWORD *)&v193[12];
      v110 = *(_DWORD *)&v193[8];
      *(_QWORD *)v199 = v151;
      *(_QWORD *)&v199[8] = a4;
      *(_QWORD *)&v199[16] = &re::kVCABlurredColorWrite;
      v199[24] = 0;
      v199[48] = 0;
      BYTE8(v200) = 1;
      *(_QWORD *)&v201 = v49;
      v100 = *(_QWORD *)v193;
      v61 = *(_DWORD *)&v193[8];
      v99 = *(_DWORD *)&v193[12];
      *(_QWORD *)v199 = v151;
      *(_QWORD *)&v199[8] = a4;
      *(_QWORD *)&v199[16] = &re::kOutputVCABlurredColorSRGB;
      v199[24] = 0;
      v199[48] = 0;
      BYTE8(v200) = 1;
      *(_QWORD *)&v201 = v49;
      *(_QWORD *)v199 = 0x7B9CDD367106FB41;
      re::RenderFrame::addTargetOutput(a4, (uint64_t *)v199, (double *)&v132, a3);
      v102 = v61;
      if (objc_msgSend(*(id *)(*((_QWORD *)a4 + 1) + 184), "supportsSeparateDepthStencil"))
      {
        HIDWORD(v134) = 252;
        *(_QWORD *)v199 = &v134;
        *(_QWORD *)&v199[8] = a4;
        *(_QWORD *)&v204[0] = 0x23530BF6FEFLL;
        *((_QWORD *)&v204[0] + 1) = "VCADepth";
        *(_QWORD *)&v199[16] = v204;
        v199[24] = 1;
        *(_QWORD *)&v199[32] = 65919651;
        *(_QWORD *)&v199[40] = "Depth";
        v199[48] = 0;
        BYTE8(v200) = 0;
        v113 = *(_DWORD *)&v193[12];
        v124 = *(_DWORD *)&v193[8];
        HIDWORD(v134) = 253;
        *(_QWORD *)v199 = &v134;
        *(_QWORD *)&v199[8] = a4;
        v62 = *(_QWORD *)v193;
        *(_QWORD *)&v204[0] = 0x849AF311B97E8;
        *((_QWORD *)&v204[0] + 1) = "VCAStencil";
        *(_QWORD *)&v199[16] = v204;
        v199[24] = 1;
        *(_QWORD *)&v199[32] = 0x11F25A259CLL;
        *(_QWORD *)&v199[40] = "Stencil";
        v199[48] = 0;
        BYTE8(v200) = 0;
        v105 = *(_QWORD *)v193;
        v103 = *(_DWORD *)&v193[12];
        v104 = *(_DWORD *)&v193[8];
      }
      else
      {
        HIDWORD(v134) = 260;
        *(_QWORD *)v199 = &v134;
        *(_QWORD *)&v199[8] = a4;
        *(_QWORD *)&v204[0] = 0x7C3C8EACDA68BACDLL;
        *((_QWORD *)&v204[0] + 1) = "VCADepthStencil";
        *(_QWORD *)&v199[16] = v204;
        v199[24] = 1;
        *(_QWORD *)&v199[32] = 65919651;
        *(_QWORD *)&v199[40] = "Depth";
        v199[48] = 0;
        BYTE8(v200) = 0;
        v62 = *(_QWORD *)v193;
        v105 = *(_QWORD *)v193;
        v103 = *(_DWORD *)&v193[12];
        v113 = *(_DWORD *)&v193[12];
        v104 = *(_DWORD *)&v193[8];
        v124 = *(_DWORD *)&v193[8];
      }
      v64 = re::globalAllocators(v63);
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64[2] + 32))(v64[2], 264, 8);
      v66 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v65, "StencilBlurMeshNode");
      *((_DWORD *)v66 + 64) = 1;
      *(_QWORD *)v66 = &off_24ED81B10;
      *(_QWORD *)v199 = v66;
      re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v199);
      *(_QWORD *)(v65 + 24) = *((_QWORD *)RenderGraph + 10);
      *(_QWORD *)(v65 + 32) = *((_QWORD *)RenderGraph + 12);
      *(_QWORD *)(v65 + 48) = *((_QWORD *)RenderGraph + 13);
      memset(&v193[8], 0, 18);
      *(_QWORD *)v199 = v60;
      *(_DWORD *)&v199[8] = v56;
      *(_DWORD *)&v199[12] = v107;
      *(_QWORD *)&v199[16] = 0x100000000;
      *(_OWORD *)&v199[24] = *(unint64_t *)v193;
      *(_OWORD *)&v199[34] = 0u;
      *(_QWORD *)&v199[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v65 + 216), (uint64_t)v199);
      memset((char *)v204 + 8, 0, 18);
      *(_QWORD *)v199 = v62;
      *(_DWORD *)&v199[8] = v124;
      *(_DWORD *)&v199[12] = v113;
      *(_QWORD *)&v199[16] = 0x200000000;
      *(_OWORD *)&v199[24] = *(unint64_t *)&v204[0];
      *(_OWORD *)&v199[34] = 0u;
      *(_QWORD *)&v199[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v65 + 216), (uint64_t)v199);
      memset((char *)v203 + 8, 0, 18);
      *(_QWORD *)v199 = v105;
      *(_DWORD *)&v199[8] = v104;
      *(_DWORD *)&v199[12] = v103;
      *(_QWORD *)&v199[16] = 0x300000000;
      *(_OWORD *)&v199[24] = *(unint64_t *)&v203[0];
      *(_OWORD *)&v199[34] = 0u;
      *(_QWORD *)&v199[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v65 + 216), (uint64_t)v199);
      v98 = v60;
      if (v119)
      {
        *(_QWORD *)v199 = v118;
        *(_DWORD *)&v199[8] = v117;
        *(_DWORD *)&v199[12] = v115;
        *(_QWORD *)&v199[16] = 0x500000001;
        *(_OWORD *)&v199[32] = xmmword_2260E5D70;
        *(_WORD *)&v199[48] = 0;
        *(_QWORD *)&v199[52] = 0;
        re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v65 + 216), (uint64_t)v199);
        *(_BYTE *)(v65 + 65) = 1;
        *(_BYTE *)(v65 + 80) = 3;
        re::RenderGraphNode::configure((re::RenderGraphNode *)v65, v123, a3, a4);
        v68 = re::globalAllocators(v67);
        v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[2] + 32))(v68[2], 448, 16);
        v70 = re::RenderGraphMRCNode::RenderGraphMRCNode((re::RenderGraphMRCNode *)v69, "VCATiledDownsampleNode");
        *(_QWORD *)v70 = &off_24ED81EA0;
        *(_QWORD *)v199 = v70;
        re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v199);
        *(_QWORD *)(v69 + 24) = *((_QWORD *)RenderGraph + 10);
        *(_QWORD *)(v69 + 32) = *((_QWORD *)RenderGraph + 12);
        *(_QWORD *)(v69 + 48) = *((_QWORD *)RenderGraph + 13);
        re::AssetHandle::operator=((uint64_t *)(v69 + 256), v121);
        *(_QWORD *)v199 = "kernelTiledVCADownsample4x";
        *(_QWORD *)&v199[8] = 26;
        re::DynamicString::operator=((re::DynamicString *)(v69 + 280), (uint64_t)v199);
        *(_QWORD *)v199 = v60;
        *(_DWORD *)&v199[8] = v56;
        *(_DWORD *)&v199[12] = v107;
        *(_QWORD *)&v199[16] = 0x100000000;
        *(_OWORD *)&v199[24] = *(_OWORD *)v193;
        *(_OWORD *)&v199[34] = *(_OWORD *)&v193[10];
        *(_QWORD *)&v199[52] = 0;
        re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v69 + 216), (uint64_t)v199);
        *(_QWORD *)v199 = v62;
        *(_DWORD *)&v199[8] = v124;
        *(_DWORD *)&v199[12] = v113;
        *(_QWORD *)&v199[16] = 0x200000000;
        *(_OWORD *)&v199[24] = v204[0];
        *(_OWORD *)&v199[34] = *(_OWORD *)((char *)v204 + 10);
        *(_QWORD *)&v199[52] = 0;
        re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v69 + 216), (uint64_t)v199);
        *(_QWORD *)v199 = v105;
        *(_DWORD *)&v199[8] = v104;
        *(_DWORD *)&v199[12] = v103;
        *(_QWORD *)&v199[16] = 0x300000000;
        *(_OWORD *)&v199[24] = v203[0];
        *(_OWORD *)&v199[34] = *(_OWORD *)((char *)v203 + 10);
        *(_QWORD *)&v199[52] = 0;
        re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v69 + 216), (uint64_t)v199);
        *(_QWORD *)v199 = v60;
        *(_DWORD *)&v199[8] = v56;
        *(_DWORD *)&v199[12] = v107;
        *(_QWORD *)&v199[16] = 0;
        *(_QWORD *)&v199[24] = 0xA00000002;
        re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v69 + 176), (__n128 *)v199);
        *(_QWORD *)v199 = v118;
        *(_DWORD *)&v199[8] = v117;
        *(_DWORD *)&v199[12] = v115;
        *(_QWORD *)&v199[16] = 0x500000001;
        *(_OWORD *)&v199[32] = xmmword_2260E5D70;
        *(_WORD *)&v199[48] = 0;
        *(_QWORD *)&v199[52] = 0;
        v71 = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v69 + 216), (uint64_t)v199);
        *(_BYTE *)(v69 + 80) = 3;
        *(_QWORD *)(v69 + 336) = 0x800000008;
        *(_BYTE *)(v69 + 344) = 0;
        *(_BYTE *)(v69 + 65) = 1;
        v59 = &off_2260E5000;
        v53 = (re *)(*(uint64_t (**)(uint64_t, char *, char *, re::RenderFrame *, __n128))(*(_QWORD *)v69 + 80))(v69, v123, a3, a4, v71);
      }
      else
      {
        *(_BYTE *)(v65 + 65) = 1;
        *(_BYTE *)(v65 + 80) = 3;
        re::RenderGraphNode::configure((re::RenderGraphNode *)v65, v123, a3, a4);
      }
      v112 = 2;
      v58 = (uint64_t *)((char *)this + 88);
      v57 = RenderGraph;
    }
    else
    {
      v101 = -1;
      v102 = -1;
      v100 = 0;
      v111 = 0;
      v118 = 0;
      v98 = 0;
      v99 = -1;
      v110 = -1;
      v117 = -1;
      v115 = -1;
      v56 = -1;
      v107 = -1;
      v112 = -1;
      v57 = RenderGraph;
      v58 = (uint64_t *)((char *)this + 88);
      v59 = &off_2260E5000;
    }
    v106 = v56;
    if (v108)
    {
      *(_OWORD *)v199 = v167;
      *(_OWORD *)&v199[16] = *(_OWORD *)v168;
      v200 = v170;
      v201 = *(_OWORD *)v171;
      v202 = *(_OWORD *)&v171[16];
      *(_OWORD *)&v199[32] = *(_OWORD *)&v168[16];
      *(_OWORD *)&v199[48] = v169;
      *(int32x2_t *)&v199[12] = vshl_n_s32(*(int32x2_t *)&v199[12], 2uLL);
      *(_QWORD *)v193 = v199;
      *(_QWORD *)&v193[8] = a4;
      *(_QWORD *)&v204[0] = 0x304E5AEDEAECE73ELL;
      *((_QWORD *)&v204[0] + 1) = "SyntheticColor";
      *(_QWORD *)&v193[16] = v204;
      v193[24] = 1;
      *(_QWORD *)&v194 = 65290051;
      *((_QWORD *)&v194 + 1) = "Color";
      LOBYTE(v195) = 0;
      v198 = 0;
      *(_DWORD *)&v199[4] = 252;
      *(_QWORD *)v193 = v199;
      *(_QWORD *)&v193[8] = a4;
      *(_QWORD *)&v204[0] = 0x304E5AEDEAF6829ELL;
      *((_QWORD *)&v204[0] + 1) = "SyntheticDepth";
      *(_QWORD *)&v193[16] = v204;
      v193[24] = 1;
      *(_QWORD *)&v194 = 65919651;
      *((_QWORD *)&v194 + 1) = "Depth";
      LOBYTE(v195) = 0;
      v198 = 0;
      v72 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 120);
      re::BlurManager::getBackdropMaterial((re::AssetHandle *)v204, v72);
      re::DynamicString::DynamicString((re::DynamicString *)v193, (const re::DynamicString *)(v72 + 192));
      v73 = re::RenderGraph::addNode<re::RenderGraphFullscreenNode>(v57, "BackdropPass");
      re::AssetHandle::operator=((uint64_t *)v73 + 33, (uint64_t *)v204);
      re::DynamicString::operator=((re::RenderGraphFullscreenNode *)((char *)v73 + 288), (re::DynamicString *)v193);
      *((_BYTE *)v73 + 328) = 1;
      v129 = 0uLL;
      LOBYTE(v203[0]) = 0;
      re::RenderGraphMeshNodeBase::setColorAttachment((uint64_t)v73, 0, v131, &v129, 0, (uint64_t)v203);
      LOBYTE(v203[0]) = 0;
      v74 = re::RenderGraphMeshNodeBase::setDepthOnlyAttachment((uint64_t)v73, (uint64_t *)v130, 0, (uint64_t)v203, 0.0);
      *((_BYTE *)v73 + 65) = 1;
      (*(void (**)(re::RenderGraphFullscreenNode *, char *, char *, re::RenderFrame *, double))(*(_QWORD *)v73 + 80))(v73, v123, a3, a4, v74);
      if (*(_QWORD *)v193 && (v193[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)v193 + 40))();
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v204);
      v75 = re::RenderGraph::addNode<re::SFBSystemShellComputeNode>(v57, "PassthroughDownsampleCompute");
      re::AssetHandle::operator=((uint64_t *)v75 + 32, v58);
      *(_QWORD *)v193 = "kernelSFBBilerpDownsample4x";
      *(_QWORD *)&v193[8] = 27;
      re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v75 + 280), (uint64_t)v193);
      v76 = HIDWORD(v167);
      v77 = *(_DWORD *)v168;
      v78 = *(_DWORD *)&v168[8];
      *((_DWORD *)v75 + 104) = 1;
      *((_DWORD *)v75 + 102) = v76;
      *((_DWORD *)v75 + 103) = v78;
      *((_QWORD *)v75 + 53) = 0x100000001;
      *((_DWORD *)v75 + 105) = v77;
      *(_QWORD *)v193 = v131[0];
      *(_QWORD *)&v193[8] = v131[1];
      *(_QWORD *)&v193[16] = 0;
      *(_QWORD *)&v193[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 176), (__n128 *)v193);
      *(_QWORD *)v193 = v159;
      *(_QWORD *)&v193[8] = v160;
      *(_QWORD *)&v193[16] = 0x500000001;
      v59 = &off_2260E5000;
      v194 = xmmword_2260E5D70;
      v195 = 0;
      v197 = 0;
      v196 = 0;
      v79 = re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 216), (uint64_t)v193);
      v80 = v123;
      v81 = (re *)(*(uint64_t (**)(re::RenderGraphComputeNodeBase *, char *, char *, re::RenderFrame *, __n128))(*(_QWORD *)v75 + 80))(v75, v123, a3, a4, v79);
      v82 = v109;
    }
    else
    {
      v83 = re::globalAllocators(v53);
      v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83[2] + 32))(v83[2], 496, 16);
      v85 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase((re::RenderGraphComputeNodeBase *)v84, "PassthroughDownsample");
      *(_QWORD *)v85 = &off_24ED81BB8;
      *((_BYTE *)v85 + 480) = 1;
      *(_QWORD *)v199 = v85;
      re::DynamicArray<re::TransitionCondition *>::add(v57, v199);
      *(_QWORD *)(v84 + 24) = *((_QWORD *)v57 + 10);
      *(_QWORD *)(v84 + 32) = *((_QWORD *)v57 + 12);
      *(_QWORD *)(v84 + 48) = *((_QWORD *)v57 + 13);
      re::AssetHandle::operator=((uint64_t *)(v84 + 256), v58);
      *(_QWORD *)v199 = "kernelSFBARKitPassthroughDownsample";
      *(_QWORD *)&v199[8] = 35;
      re::DynamicString::operator=((re::DynamicString *)(v84 + 280), (uint64_t)v199);
      *(_BYTE *)(v84 + 480) = 1;
      *(_DWORD *)(v84 + 408) = v41;
      *(_QWORD *)(v84 + 412) = 0x100000002;
      *(_QWORD *)(v84 + 424) = 0x100000001;
      v82 = v109;
      *(_DWORD *)(v84 + 420) = v109;
      *(_QWORD *)v199 = v159;
      *(_QWORD *)&v199[8] = v160;
      *(_QWORD *)&v199[16] = 0x500000002;
      *(_OWORD *)&v199[32] = *((_OWORD *)v59 + 215);
      *(_WORD *)&v199[48] = 0;
      *(_DWORD *)&v199[56] = 0;
      *(_DWORD *)&v199[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v84 + 216), (uint64_t)v199);
      v80 = v123;
      v81 = (re *)re::RenderGraphComputeNodeBase::configure((re::RenderGraphComputeNodeBase *)v84, v123, a3, a4);
    }
    v86 = re::globalAllocators(v81);
    v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86[2] + 32))(v86[2], 480, 16);
    v88 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase((re::RenderGraphComputeNodeBase *)v87, "PassthroughReprojectAndRectify");
    *(_QWORD *)v88 = &off_24ED81C78;
    *(_QWORD *)v199 = v88;
    re::DynamicArray<re::TransitionCondition *>::add(v57, v199);
    *(_QWORD *)(v87 + 24) = *((_QWORD *)v57 + 10);
    *(_QWORD *)(v87 + 32) = *((_QWORD *)v57 + 12);
    *(_QWORD *)(v87 + 48) = *((_QWORD *)v57 + 13);
    re::AssetHandle::operator=((uint64_t *)(v87 + 256), v58);
    *(_QWORD *)v199 = "kernelSFBNoReprojectAndNoBlend";
    *(_QWORD *)&v199[8] = 30;
    re::DynamicString::operator=((re::DynamicString *)(v87 + 280), (uint64_t)v199);
    *(_QWORD *)v199 = v165;
    *(_QWORD *)&v199[8] = v166;
    *(_QWORD *)&v199[16] = 0x500000000;
    *(_OWORD *)&v199[32] = *((_OWORD *)v59 + 215);
    v125 = *(_OWORD *)&v199[32];
    *(_WORD *)&v199[48] = 0;
    *(_QWORD *)&v199[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v87 + 216), (uint64_t)v199);
    *(_QWORD *)v199 = v159;
    *(_QWORD *)&v199[8] = v160;
    *(_DWORD *)&v199[16] = 1;
    *(_WORD *)&v199[20] = 0;
    v199[22] = 0;
    *(_QWORD *)&v199[24] = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v87 + 176), (__n128 *)v199);
    *(_DWORD *)(v87 + 408) = v41;
    *(_QWORD *)(v87 + 412) = 0x100000002;
    *(_QWORD *)(v87 + 424) = 0x100000001;
    *(_DWORD *)(v87 + 420) = v82;
    re::RenderGraphComputeNodeBase::configure((re::RenderGraphComputeNodeBase *)v87, v80, a3, a4);
    v89 = re::RenderGraph::addNode<re::SFBSystemShellBlurTAANode>(v57, "PassthroughBlurAndFilter");
    re::AssetHandle::operator=((uint64_t *)v89 + 32, v58);
    *(_QWORD *)v199 = "kernelSFBBlurAndFilter";
    *(_QWORD *)&v199[8] = 22;
    re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v89 + 280), (uint64_t)v199);
    *((_DWORD *)v89 + 102) = v41;
    *(_QWORD *)((char *)v89 + 412) = 0x100000002;
    *((_QWORD *)v89 + 53) = 0x100000001;
    *((_DWORD *)v89 + 105) = v82;
    *(_QWORD *)v199 = v165;
    *(_QWORD *)&v199[8] = v166;
    *(_QWORD *)&v199[16] = 0;
    *(_QWORD *)&v199[24] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v89 + 176), (__n128 *)v199);
    *(_QWORD *)v199 = v163;
    *(_QWORD *)&v199[8] = v164;
    *(_DWORD *)&v199[16] = 1;
    *(_WORD *)&v199[20] = 0;
    v199[22] = 0;
    *(_QWORD *)&v199[24] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v89 + 176), (__n128 *)v199);
    *(_QWORD *)v199 = v161;
    *(_QWORD *)&v199[8] = v162;
    *(_QWORD *)&v199[16] = 0x500000002;
    *(_OWORD *)&v199[32] = v125;
    *(_WORD *)&v199[48] = 0;
    *(_QWORD *)&v199[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v89 + 216), (uint64_t)v199);
    *(_QWORD *)v199 = v157;
    *(_QWORD *)&v199[8] = v158;
    *(_QWORD *)&v199[16] = 0x500000003;
    *(_OWORD *)&v199[32] = v125;
    *(_WORD *)&v199[48] = 0;
    *(_QWORD *)&v199[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v89 + 216), (uint64_t)v199);
    *(_QWORD *)v199 = v155;
    *(_QWORD *)&v199[8] = v156;
    *(_QWORD *)&v199[16] = 0x500000004;
    *(_OWORD *)&v199[32] = v125;
    *(_WORD *)&v199[48] = 0;
    *(_QWORD *)&v199[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v89 + 216), (uint64_t)v199);
    v90 = 8 * v82 + 15;
    *((_QWORD *)v89 + 9) = v90 & 0xFFFFFFF0;
    *(_DWORD *)v199 = 0;
    *(_DWORD *)&v199[4] = v90 & 0xFFFFFFF0;
    re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add((_QWORD *)v89 + 54, v199);
    (*(void (**)(re::RenderGraphComputeNodeBase *, const char *, char *, re::RenderFrame *))(*(_QWORD *)v89 + 80))(v89, v80, a3, a4);
    *((_BYTE *)v89 + 480) = 0;
    *((_DWORD *)v89 + 122) = v41;
    *((_DWORD *)v89 + 121) = v82;
    v91 = re::RenderGraph::addNode<re::SFBSystemShellReprojectNode>(v57, "reprojectFilteredBlur");
    re::AssetHandle::operator=((uint64_t *)v91 + 32, v58);
    *(_QWORD *)v199 = "kernelSFBReprojectAndSRGBCorrect";
    *(_QWORD *)&v199[8] = 32;
    re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v91 + 280), (uint64_t)v199);
    *((_DWORD *)v91 + 102) = v41;
    *(_QWORD *)((char *)v91 + 412) = 0x100000002;
    *((_QWORD *)v91 + 53) = 0x100000001;
    *((_DWORD *)v91 + 105) = v82;
    *(_QWORD *)v199 = v163;
    *(_QWORD *)&v199[8] = v164;
    *(_QWORD *)&v199[16] = 0;
    *(_QWORD *)&v199[24] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v91 + 176), (__n128 *)v199);
    *(_QWORD *)v199 = v161;
    *(_QWORD *)&v199[8] = v162;
    *(_DWORD *)&v199[16] = 1;
    *(_WORD *)&v199[20] = 0;
    v199[22] = 0;
    *(_QWORD *)&v199[24] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v91 + 176), (__n128 *)v199);
    *(_QWORD *)v199 = v157;
    *(_QWORD *)&v199[8] = v158;
    *(_QWORD *)&v199[16] = 0x500000002;
    *(_OWORD *)&v199[32] = v125;
    *(_WORD *)&v199[48] = 0;
    *(_QWORD *)&v199[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v91 + 216), (uint64_t)v199);
    *(_QWORD *)v199 = v155;
    *(_QWORD *)&v199[8] = v156;
    *(_QWORD *)&v199[16] = 0x500000003;
    *(_OWORD *)&v199[32] = v125;
    *(_WORD *)&v199[48] = 0;
    *(_QWORD *)&v199[52] = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v91 + 216), (uint64_t)v199);
    re::RenderGraphComputeNodeBase::configure(v91, v123, a3, a4);
    *((_DWORD *)v91 + 121) = v41;
    *((_DWORD *)v91 + 120) = v82;
    if (v11[1])
    {
      if (!v119)
      {
        v92 = re::RenderGraph::addNode<re::SFBSystemShellComputeNode>(v57, "VCADownsampleCompute");
        re::AssetHandle::operator=((uint64_t *)v92 + 32, v121);
        *(_QWORD *)v199 = "kernelSFBBilerpDownsample4x";
        *(_QWORD *)&v199[8] = 27;
        re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v92 + 280), (uint64_t)v199);
        *((_DWORD *)v92 + 104) = 1;
        *((_DWORD *)v92 + 102) = v120;
        *((_DWORD *)v92 + 103) = v112;
        *((_QWORD *)v92 + 53) = 0x100000001;
        *((_DWORD *)v92 + 105) = v114;
        *(_QWORD *)v199 = v98;
        *(_DWORD *)&v199[8] = v106;
        *(_DWORD *)&v199[12] = v107;
        *(_QWORD *)&v199[16] = 0;
        *(_QWORD *)&v199[24] = 2;
        re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v92 + 176), (__n128 *)v199);
        *(_QWORD *)v199 = v118;
        *(_DWORD *)&v199[8] = v117;
        *(_DWORD *)&v199[12] = v115;
        *(_QWORD *)&v199[16] = 0x500000001;
        *(_OWORD *)&v199[32] = v125;
        *(_WORD *)&v199[48] = 0;
        *(_DWORD *)&v199[56] = 0;
        *(_DWORD *)&v199[52] = 0;
        v93 = re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v92 + 216), (uint64_t)v199);
        (*(void (**)(re::RenderGraphComputeNodeBase *, char *, char *, re::RenderFrame *, __n128))(*(_QWORD *)v92 + 80))(v92, v123, a3, a4, v93);
      }
      v94 = re::RenderGraph::addNode<re::SFBSystemShellBlurTAANode>(v57, "VCABlurAndFilterAndBlendPassthrough");
      re::AssetHandle::operator=((uint64_t *)v94 + 32, v121);
      *(_QWORD *)v199 = "kernelSFBVCABlurAndFilterAndBlendPassthrough";
      *(_QWORD *)&v199[8] = 44;
      re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v94 + 280), (uint64_t)v199);
      *((_DWORD *)v94 + 104) = 1;
      *((_DWORD *)v94 + 102) = v120;
      *((_DWORD *)v94 + 103) = v112;
      *((_QWORD *)v94 + 53) = 0x100000001;
      *((_DWORD *)v94 + 105) = v114;
      *(_QWORD *)v199 = v118;
      *(_DWORD *)&v199[8] = v117;
      *(_DWORD *)&v199[12] = v115;
      *(_QWORD *)&v199[16] = 0;
      *(_QWORD *)&v199[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 176), (__n128 *)v199);
      *(_QWORD *)v199 = v155;
      *(_QWORD *)&v199[8] = v156;
      *(_DWORD *)&v199[16] = 1;
      *(_WORD *)&v199[20] = 0;
      v199[22] = 0;
      *(_QWORD *)&v199[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 176), (__n128 *)v199);
      *(_QWORD *)v199 = v111;
      *(_DWORD *)&v199[8] = v110;
      *(_DWORD *)&v199[12] = v101;
      *(_DWORD *)&v199[16] = 2;
      *(_WORD *)&v199[20] = 0;
      v199[22] = 0;
      *(_QWORD *)&v199[24] = 0x500000002;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 176), (__n128 *)v199);
      *(_QWORD *)v199 = v100;
      *(_DWORD *)&v199[8] = v102;
      *(_DWORD *)&v199[12] = v99;
      *(_QWORD *)&v199[16] = 0x500000003;
      *(_OWORD *)&v199[32] = v125;
      *(_WORD *)&v199[48] = 0;
      *(_QWORD *)&v199[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 216), (uint64_t)v199);
      *(_QWORD *)v199 = v132;
      *(_QWORD *)&v199[8] = v133;
      *(_QWORD *)&v199[16] = 0x500000004;
      *(_OWORD *)&v199[32] = v125;
      *(_WORD *)&v199[48] = 0;
      *(_QWORD *)&v199[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v94 + 216), (uint64_t)v199);
      v95 = 8 * v114 + 15;
      *((_QWORD *)v94 + 9) = v95 & 0xFFFFFFF0;
      *(_DWORD *)v199 = 0;
      *(_DWORD *)&v199[4] = v95 & 0xFFFFFFF0;
      re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add((_QWORD *)v94 + 54, v199);
      (*(void (**)(re::RenderGraphComputeNodeBase *, char *, char *, re::RenderFrame *))(*(_QWORD *)v94 + 80))(v94, v123, a3, a4);
      *((_BYTE *)v94 + 480) = 1;
      *((_DWORD *)v94 + 122) = v120;
      *((_DWORD *)v94 + 121) = v114;
      v96 = re::RenderGraph::addNode<re::SFBSystemShellReprojectNode>(RenderGraph, "reprojectVCABlur");
      re::AssetHandle::operator=((uint64_t *)v96 + 32, v121);
      *(_QWORD *)v199 = "kernelSFBReprojectAndBlendPassthrough";
      *(_QWORD *)&v199[8] = 37;
      re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v96 + 280), (uint64_t)v199);
      *((_DWORD *)v96 + 104) = 1;
      *((_DWORD *)v96 + 102) = v120;
      *((_DWORD *)v96 + 103) = v112;
      *((_QWORD *)v96 + 53) = 0x100000001;
      *((_DWORD *)v96 + 105) = v114;
      *(_QWORD *)v199 = v111;
      *(_DWORD *)&v199[8] = v110;
      *(_DWORD *)&v199[12] = v101;
      *(_QWORD *)&v199[16] = 0;
      *(_QWORD *)&v199[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v96 + 176), (__n128 *)v199);
      *(_QWORD *)v199 = v100;
      *(_DWORD *)&v199[8] = v102;
      *(_DWORD *)&v199[12] = v99;
      *(_DWORD *)&v199[16] = 1;
      *(_WORD *)&v199[20] = 0;
      v199[22] = 0;
      *(_QWORD *)&v199[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v96 + 176), (__n128 *)v199);
      *(_QWORD *)v199 = v155;
      *(_QWORD *)&v199[8] = v156;
      *(_DWORD *)&v199[16] = 4;
      *(_WORD *)&v199[20] = 0;
      v199[22] = 0;
      *(_QWORD *)&v199[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v96 + 176), (__n128 *)v199);
      *(_QWORD *)v199 = v132;
      *(_QWORD *)&v199[8] = v133;
      *(_QWORD *)&v199[16] = 0x500000002;
      *(_OWORD *)&v199[32] = v125;
      *(_WORD *)&v199[48] = 0;
      *(_QWORD *)&v199[52] = 0;
      re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v96 + 216), (uint64_t)v199);
      re::RenderGraphComputeNodeBase::configure(v96, v123, a3, a4);
      *((_DWORD *)v96 + 121) = v120;
      *((_DWORD *)v96 + 120) = v114;
    }
    else
    {
      v97 = re::RenderGraph::addNode<re::SFBSystemShellCreateTextureAliasNode>(v57, "SetVCAPassthroughSRGBAlias");
      *(_QWORD *)v199 = v155;
      *(_QWORD *)&v199[8] = v156;
      *(_QWORD *)&v199[16] = 0;
      *(_QWORD *)&v199[24] = 2;
      re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v97 + 176), (__n128 *)v199);
      *((_QWORD *)v97 + 33) = 0x60DF09E0AF8AD07;
    }
  }
}

void re::SFBSystemShellBlurProvider::registerProviderCommon(re::SFBSystemShellBlurProvider *this, re::RenderGraphManager *a2, AssetService *a3, const re::AssetHandle *a4, re::AssetHandle *a5, re::AssetHandle *a6, re::ProviderHandle *a7)
{
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[2];
  _QWORD v25[2];

  v13 = re::globalAllocators(this);
  v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 1568, 16);
  re::RenderGraphSFBSystemShellBlurProvider::RenderGraphSFBSystemShellBlurProvider((uint64_t)v14, (const re::DynamicString *)v24);
  if (*(_QWORD *)&v24[0])
  {
    if ((BYTE8(v24[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v24[0] + 40))();
    memset(v24, 0, sizeof(v24));
  }
  (*(void (**)(__int128 *__return_ptr, re::RenderGraphManager *, const char *))(*(_QWORD *)a2 + 8))(&v22, a2, "engine:BuiltinRenderGraphResources/SFBSystemShell/SFBPbrBlur.rematerial");
  v15 = *(_OWORD *)(v14 + 5);
  *(_OWORD *)(v14 + 5) = v22;
  v22 = v15;
  v16 = v14[7];
  v14[7] = v23;
  v23 = v16;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  re::AssetHandle::loadAsync((re::AssetHandle *)(v14 + 5));
  re::AssetHandle::operator=((uint64_t *)a4, v14 + 5);
  re::AssetHandle::operator=(v14 + 11, (uint64_t *)a3);
  (*(void (**)(__int128 *__return_ptr, re::RenderGraphManager *, const char *))(*(_QWORD *)a2 + 8))(&v22, a2, "engine:BuiltinRenderGraphResources/SFBSystemShell/SFBVCABlur.rematerial");
  v17 = *((_OWORD *)v14 + 4);
  *((_OWORD *)v14 + 4) = v22;
  v22 = v17;
  v18 = v14[10];
  v14[10] = v23;
  v23 = v18;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  re::AssetHandle::loadAsync((re::AssetHandle *)(v14 + 8));
  re::AssetHandle::operator=((uint64_t *)a5, v14 + 8);
  re::RenderGraphManager::addProviderInternal(this, "Camera", (const re::RenderGraphProviderBase *)v14, -60, 1, (uint64_t)&v22);
  v19 = v22;
  *(_QWORD *)&v22 = 0;
  *((_QWORD *)&v22 + 1) = &str_110;
  v20 = *(_QWORD *)a6;
  v21 = *((_QWORD *)a6 + 1);
  *(_OWORD *)a6 = v19;
  v25[0] = v19 & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
  v25[1] = v21;
  re::StringID::destroyString((re::StringID *)v25);
  *((_QWORD *)a6 + 2) = v23;
  re::StringID::destroyString((re::StringID *)&v22);
}

void re::RenderGraphSFBSystemShellBlurProvider::~RenderGraphSFBSystemShellBlurProvider(re::RenderGraphSFBSystemShellBlurProvider *this)
{
  re::RenderGraphSFBSystemShellBlurProvider::~RenderGraphSFBSystemShellBlurProvider(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t *v2;
  uint64_t v3;

  *((_QWORD *)this + 18) = 0;
  ++*((_DWORD *)this + 38);
  v2 = (uint64_t *)((char *)this + 1504);
  re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 188);
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit(v2);
  *((_QWORD *)this + 18) = 0;
  ++*((_DWORD *)this + 38);
  re::AssetHandle::~AssetHandle((re::RenderGraphSFBSystemShellBlurProvider *)((char *)this + 88));
  re::AssetHandle::~AssetHandle((re::RenderGraphSFBSystemShellBlurProvider *)((char *)this + 64));
  re::AssetHandle::~AssetHandle((re::RenderGraphSFBSystemShellBlurProvider *)((char *)this + 40));
  *(_QWORD *)this = off_24ED381E0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

_QWORD *re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 112 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

__n128 re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  if (!*(_QWORD *)a1)
  {
    v10 = *(_QWORD *)(a1 + 8) + 1;
    re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity((_QWORD *)a1, v10);
    v11 = *(_DWORD *)(a1 + 16) + 2;
    *(_DWORD *)(a1 + 16) = v11;
    if ((v11 & 1) == 0)
      goto LABEL_12;
LABEL_18:
    v12 = a1 + 32;
    goto LABEL_19;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v8 = v4 >= v6;
    v7 = v4 + 1;
    v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  v7 = v4 + 1;
  if (v7 < 3)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
    goto LABEL_18;
  }
  v9 = 4;
LABEL_14:
  if (v9 <= v7)
    v13 = v7;
  else
    v13 = v9;
  re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity((_QWORD *)a1, v13);
  if ((*(_DWORD *)(a1 + 16) & 1) != 0)
    goto LABEL_18;
LABEL_12:
  v12 = *(_QWORD *)(a1 + 40);
LABEL_19:
  v14 = v12 + (*(_QWORD *)(a1 + 8) << 6);
  result = *(__n128 *)a2;
  v16 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v14 + 48) = v17;
  *(__n128 *)v14 = result;
  *(_OWORD *)(v14 + 16) = v16;
  ++*(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::BlurPlaneTypeData>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  *(_QWORD *)(*((_QWORD *)v3 + 4) + 8 * v5) = *a2;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::CameraProjFrustums::~CameraProjFrustums(re::CameraProjFrustums *this)
{
  *((_QWORD *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
}

{
  *((_QWORD *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::Matrix4x4<float>,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[4];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 4;
        v15 = v4[5];
        if ((v7 & 1) != 0)
          v16 = v4 + 4;
        else
          v16 = (const void *)v4[5];
        memcpy(v14, v16, v9 << 6);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 58)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 64, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = a2 << 6;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, a2 << 6, 16);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 4;
          else
            v13 = (const void *)v4[5];
          result = memcpy(v10, v13, v4[1] << 6);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[5]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[4] = a2;
          v4[5] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::DynamicArray<re::VCARenderData::FrustumId>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::VCARenderData::FrustumId>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + 112 * v4);
      v6 = 112 * a2 - 112 * v4;
      if (v6 >= 1)
        bzero(v5, 112* (((((unint64_t)v6 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)- ((unint64_t)v6 > 0x6F))+ 112);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void re::WorldToViewCacheData::~WorldToViewCacheData(re::WorldToViewCacheData *this)
{
  JUMPOUT(0x2276933B8);
}

void std::__throw_bad_any_cast[abi:nn180100]()
{
  re::ColorFilterConstantsData *v0;

  std::__libcpp_verbose_abort("bad_any_cast was thrown in -fno-exceptions mode");
  re::ColorFilterConstantsData::~ColorFilterConstantsData(v0);
}

void re::ColorFilterConstantsData::~ColorFilterConstantsData(re::ColorFilterConstantsData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::BlurReprojectionState::~BlurReprojectionState(re::BlurReprojectionState *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphSFBSystemShellBlurProvider::RenderGraphSFBSystemShellBlurProvider(uint64_t a1, const re::DynamicString *a2)
{
  uint64_t v4;
  char v5;

  re::DynamicString::DynamicString((re::DynamicString *)&v4, a2);
  *(_QWORD *)a1 = off_24ED381E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 8), (const re::DynamicString *)&v4);
  if (v4 && (v5 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v4 + 40))();
  *(_QWORD *)a1 = &off_24ED87048;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_DWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1540) = 0x7FFFFFFFLL;
  *(_BYTE *)(a1 + 1552) = 0;
  return a1;
}

double re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((_DWORD *)a1 + 8);
    if (v3)
    {
      v4 = 0;
      v5 = 336 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 336;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 336 * v3 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 336 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 336 * v3 + 8) == a2)
        return v5 + 336 * v3 + 16;
    }
    return 0;
  }
  return v5 + 336 * v3 + 16;
}

uint64_t *re::SmallHashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,4ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(uint64_t a1, uint64_t *a2, void *__src, unsigned int a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  _BYTE __srca[328];
  uint64_t v25;

  v7 = a1;
  v25 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 1404);
  if (v8)
  {
    if (a4 == 1)
    {
      v9 = a1 + 1376;
      goto LABEL_34;
    }
    if (!a4)
    {
      v9 = a1 + 1376;
LABEL_37:
      v22 = a2;
      v23 = __src;
      return (uint64_t *)re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v9, v22, v23);
    }
    v10 = (unint64_t *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 16);
    v12 = (uint64_t *)(a1 + 32);
    v13 = (uint64_t *)(a1 + 32 + 336 * v11);
    if (!v11)
      goto LABEL_20;
  }
  else
  {
    v10 = (unint64_t *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 16);
    v12 = (uint64_t *)(a1 + 32);
    v13 = (uint64_t *)(a1 + 32 + 336 * v11);
    if (!v11)
      goto LABEL_21;
  }
  v14 = *a2;
  v15 = v12;
  while (*v15 != v14)
  {
    v15 += 42;
    if (v15 == v13)
      goto LABEL_15;
  }
  if (a4 < 2)
    return v15 + 2;
LABEL_15:
  if (!v8)
    v8 = v11;
  if (v8 >= 4)
  {
LABEL_25:
    if (!*(_QWORD *)(v7 + 1376))
    {
      v20 = *(uint64_t **)v7;
      if (!*(_QWORD *)v7)
      {
      }
      re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init(v7 + 1376, (uint64_t)v20, 8);
      v11 = *v10;
    }
    if (v11)
    {
      v21 = &v12[42 * v11];
      do
      {
        re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v7 + 1376, v12, v12 + 2);
        v12 += 42;
      }
      while (v12 != v21);
    }
    *(_QWORD *)(v7 + 16) = 0;
    ++*(_DWORD *)(v7 + 24);
    if (!a4)
    {
      v9 = v7 + 1376;
      goto LABEL_37;
    }
    v9 = v7 + 1376;
LABEL_34:
    v22 = a2;
    v23 = __src;
    return (uint64_t *)re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v9, v22, v23);
  }
  memcpy(&__srca[8], __src, 0x140uLL);
  if (v11 >= 4)
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    a1 = _os_crash();
    __break(1u);
LABEL_20:
    if (v8 <= 3)
    {
LABEL_21:
      v14 = *a2;
      memcpy(&__srca[8], __src, 0x140uLL);
      goto LABEL_22;
    }
    v11 = 0;
    goto LABEL_25;
  }
LABEL_22:
  *v13 = v14;
  memcpy(v13 + 1, __srca, 0x148uLL);
  v19 = *(_QWORD *)(v7 + 16);
  ++*(_DWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 16) = v19 + 1;
  if (v19 == -1)
  {
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
    _os_crash();
    __break(1u);
  }
  return &v12[42 * v19 + 2];
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2, const void *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 336 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 336 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 336 * v10) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 336 * v10;
  return v12 + 16;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, const void *a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  _BYTE v30[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init((uint64_t)v30, v14, v13);
          v16 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v30[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = (_QWORD *)(v18 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0)
              {
                v23 = 0xBF58476D1CE4E5B9 * (*v22 ^ (*v22 >> 30));
                v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22, v22 + 1);
              }
              v22 += 42;
              --v21;
            }
            while (v21);
          }
          re::HashTable<unsigned long long,re::RenderGraphSFBSystemShellBlurProvider::BlurFrameContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v13)
          v27 = 2 * v12;
        else
          v27 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 336 * v9);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 336 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  v28 = 336 * v9;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v28 + 8) = *a4;
  memcpy((void *)(*(_QWORD *)(a1 + 16) + v28 + 16), a5, 0x140uLL);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

_QWORD *re::MeshShadowProvider::MeshShadowProvider(_QWORD *a1, const re::DynamicString *a2, const re::AssetHandle *a3)
{
  _OWORD v6[2];

  re::DynamicString::DynamicString((re::DynamicString *)v6, a2);
  *a1 = off_24ED381E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 1), (const re::DynamicString *)v6);
  if (*(_QWORD *)&v6[0])
  {
    if ((BYTE8(v6[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v6[0] + 40))();
    memset(v6, 0, sizeof(v6));
  }
  *a1 = off_24ED871E0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 5), a3);
  return a1;
}

uint64_t *re::MeshShadowProvider::prepareFrame(re::MeshShadowProvider *this, const char *__s, const char *a3, re::RenderFrame *a4)
{
  size_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  const char *v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *result;
  uint64_t v21;
  re::RenderGraphPersistentResourceManager *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v32;
  re *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _OWORD v37[7];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[7];
  int v47;
  uint64_t v48;
  char v49;
  int v50;
  unint64_t v51;
  __int128 v52;
  _OWORD v53[7];
  BOOL v54;
  uint64_t v55;
  __int128 v56;
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, (unint64_t *)&v56);
    v8 = (*((_QWORD *)&v56 + 1) - 0x61C8864680B583E9 + ((_QWORD)v56 << 6) + ((unint64_t)v56 >> 2)) ^ v56;
  }
  else
  {
    v8 = 0;
  }
  v9 = strlen(a3);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)a3, v9, 0, (unint64_t *)&v56);
    v10 = ((*((_QWORD *)&v56 + 1) - 0x61C8864680B583E9 + ((_QWORD)v56 << 6) + ((unint64_t)v56 >> 2)) ^ v56)
        - 0x61C8864680B583E9;
  }
  else
  {
    v10 = 0x9E3779B97F4A7C17;
  }
  v11 = atomic_load((unsigned __int8 *)&qword_254121290);
  if ((v11 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_254121290);
    if ((_DWORD)v33)
    {
      _MergedGlobals_470 = re::getCombinedScopeHash(v33, v34, v35);
      __cxa_guard_release(&qword_254121290);
    }
  }
  if (a3)
  {
    v12 = *a3;
    if (*a3)
    {
      v13 = a3[1];
      if (v13)
      {
        v14 = a3 + 2;
        do
        {
          v12 = 31 * v12 + v13;
          v15 = *(unsigned __int8 *)v14++;
          v13 = v15;
        }
        while (v15);
      }
      v12 &= ~0x8000000000000000;
    }
  }
  else
  {
    v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v55 = v12;
  v16 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x8000000000000000) != 0)
  {
    v17 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v18 = 5381;
    do
    {
      v16 = v18;
      v19 = *v17++;
      v18 = (33 * v18) ^ v19;
    }
    while (v19);
  }
  *(_QWORD *)&v56 = (_MergedGlobals_470 - 0x61C8864680B583E9 + (v16 << 6) + (v16 >> 2)) ^ v16;
  result = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)a4 + 96, (uint64_t *)&v56);
  if (result)
  {
    v21 = *result;
    if (*result)
    {
      v22 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
      v23 = ((v8 >> 2) + (v8 << 6) + v10) ^ v8;
      v24 = *(unsigned int *)(v21 + 24) + 7;
      *(_QWORD *)&v56 = 0xA00000000;
      v25 = *(_DWORD *)(v21 + 16);
      if ((v24 & 0x1FFFFF800) != 0)
        v26 = 2048;
      else
        v26 = v24 & 0x1FFFFFFF8;
      DWORD2(v56) = 3;
      HIDWORD(v56) = v25;
      *(_DWORD *)v57 = v25;
      *(_DWORD *)&v57[4] = 1;
      *(_DWORD *)&v57[8] = v26;
      *(_QWORD *)&v57[12] = 0xFFFFFFFF00000001;
      v57[20] = 1;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)&v57[24] = _D0;
      v58 = xmmword_226135530;
      v59 = xmmword_22619BD10;
      LODWORD(v60) = -1;
      BYTE8(v61) = 0;
      *((_QWORD *)&v60 + 1) = 0;
      *(_QWORD *)&v61 = 0;
      *(_QWORD *)&v53[0] = 0x6AD7693626249265;
      *(_QWORD *)&v46[0] = 0x6AD7693626249265;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v22, (const re::WeakStringID *)&v55, (const re::WeakStringID *)v53, (const re::WeakStringID *)v46, a4, (const re::RenderGraphTargetDescription *)&v56, &v54);
      v53[4] = v59;
      v53[5] = v60;
      v53[6] = v61;
      v53[0] = v56;
      v53[1] = *(_OWORD *)v57;
      v53[2] = *(_OWORD *)&v57[16];
      v53[3] = v58;
      DWORD1(v53[0]) = 20;
      *(_QWORD *)&v46[0] = 0x2C37E112E1E92C60;
      *(_QWORD *)&v39 = 0x2C37E112E1E92C60;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v22, (const re::WeakStringID *)&v55, (const re::WeakStringID *)v46, (const re::WeakStringID *)&v39, a4, (const re::RenderGraphTargetDescription *)v53, &v54);
      v47 = 0;
      v48 = 80 * v26;
      v49 = 0;
      v50 = 1065353216;
      v51 = 0xFFFFFFFF00000020;
      v52 = xmmword_2260FF4D0;
      *(_QWORD *)&v46[0] = 0x19DF38FA543D0095;
      *(_QWORD *)&v39 = 0x19DF38FA543D0095;
      re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v22, (const re::WeakStringID *)&v55, (const re::WeakStringID *)v46, (const re::WeakStringID *)&v39, a4, (const re::RenderGraphBufferDescription *)&v47, &v54, 0);
      v46[4] = v59;
      v46[5] = v60;
      v46[6] = v61;
      v46[0] = v56;
      v46[1] = *(_OWORD *)v57;
      v46[2] = *(_OWORD *)&v57[16];
      v46[3] = v58;
      DWORD1(v46[0]) = 250;
      *(_QWORD *)&v39 = 0x6B14F36D04976B05;
      *(_QWORD *)&v37[0] = 0x6B14F36D04976B05;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v22, (const re::WeakStringID *)&v55, (const re::WeakStringID *)&v39, (const re::WeakStringID *)v37, a4, (const re::RenderGraphTargetDescription *)v46, &v54);
      v44 = v60;
      v45 = v61;
      v39 = v56;
      v40 = *(_OWORD *)v57;
      v42 = v58;
      v43 = v59;
      v41 = *(_OWORD *)&v57[16];
      HIDWORD(v40) = *(_DWORD *)(v21 + 96);
      *(_QWORD *)&v37[0] = 0x284EDEB613E4CA80;
      v38 = 0x284EDEB613E4CA80;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v22, (const re::WeakStringID *)&v55, (const re::WeakStringID *)v37, (const re::WeakStringID *)&v38, a4, (const re::RenderGraphTargetDescription *)&v39, &v54);
      v37[4] = v43;
      v37[5] = v44;
      v37[6] = v45;
      v37[0] = v39;
      v37[1] = v40;
      v37[2] = v41;
      v37[3] = v42;
      DWORD1(v37[0]) = 60;
      v38 = 0x335A34A7FEF3F24;
      v36 = 0x335A34A7FEF3F24;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v22, (const re::WeakStringID *)&v55, (const re::WeakStringID *)&v38, (const re::WeakStringID *)&v36, a4, (const re::RenderGraphTargetDescription *)v37, &v54);
      v38 = 0x59A6302C4491B15;
      v36 = 0x59A6302C4491B15;
      re::RenderGraphPersistentResourceManager::registerPersistentTexture(v22, (const re::WeakStringID *)&v55, (const re::WeakStringID *)&v38, (const re::WeakStringID *)&v36, a4, (const re::RenderGraphTargetDescription *)&v39, &v54);
      v32 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(v21 + 28)) ^ ((0xBF58476D1CE4E5B9
                                                                       * *(unsigned __int8 *)(v21 + 28)) >> 27));
      return (uint64_t *)(((((v23 - 0x3869C2019F65CC2) ^ 0x1D5BABFC9CFDFE9ELL) << 6)
                        - 0x61C8864680B583E9
                        + (((v23 - 0x3869C2019F65CC2) ^ 0x1D5BABFC9CFDFE9ELL) >> 2)
                        + (v32 ^ (v32 >> 31))) ^ (v23 - 0x3869C2019F65CC2) ^ 0x1D5BABFC9CFDFE9ELL);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void re::MeshShadowProvider::provide(re::MeshShadowProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v23;
  char v24;
  const char *v25;
  int v26;
  uint64_t v27;
  char v28;
  const char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  const char *v35;
  int v36;
  uint64_t v37;
  char v38;
  const char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  const char *v45;
  int v46;
  uint64_t v47;
  char v48;
  const char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  const char *v54;
  int v55;
  uint64_t v56;
  re *RenderGraph;
  uint64_t *v58;
  _QWORD *v59;
  re::RenderGraphNode *v60;
  unsigned __int8 v61;
  _BYTE *v62;
  _anonymous_namespace_ *v63;
  re::RenderGraphNode *ProjectiveMeshShadowMap;
  _anonymous_namespace_ *v65;
  re *v66;
  _anonymous_namespace_ *v67;
  re::RenderGraphNode *v68;
  uint64_t *v69;
  uint64_t v70;
  re::RenderGraphComputeNodeBase *v71;
  re::DynamicString *v72;
  _anonymous_namespace_ *v73;
  uint64_t *v74;
  re::RenderGraphComputeNodeBase *v75;
  re::RenderGraphComputeNodeBase *v76;
  void **v77;
  uint64_t *v78;
  uint64_t *v79;
  re::RenderGraphComputeNodeBase *v80;
  __n128 v81;
  re *v82;
  const char *v83;
  const char *v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  char v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  _BYTE v116[24];
  _BYTE v117[26];
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_2541212A0);
  if ((v8 & 1) == 0)
  {
    v82 = (re *)__cxa_guard_acquire(&qword_2541212A0);
    if ((_DWORD)v82)
    {
      qword_254121298 = re::getCombinedScopeHash(v82, v83, v84);
      __cxa_guard_release(&qword_2541212A0);
    }
  }
  v9 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x8000000000000000) != 0)
  {
    v10 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v11 = 5381;
    do
    {
      v9 = v11;
      v12 = *v10++;
      v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  v13 = 0x7FFFFFFF;
  if (*((_QWORD *)a4 + 12))
  {
    v14 = (qword_254121298 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
    v15 = *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * (v14 % *((unsigned int *)a4 + 30)));
    if (v15 != 0x7FFFFFFF)
    {
      v16 = *((_QWORD *)a4 + 14);
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * (v14 % *((unsigned int *)a4 + 30)));
      if (*(_QWORD *)(v16 + 24 * v15 + 8) != v14)
      {
        while (1)
        {
          v13 = *(_DWORD *)(v16 + 24
                                * *(unsigned int *)(*((_QWORD *)a4 + 13) + 4 * (v14 % *((unsigned int *)a4 + 30)))) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v16 + 24 * v13 + 8) == v14)
            goto LABEL_12;
        }
        v13 = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  v17 = *(_QWORD *)(*((_QWORD *)a4 + 14) + 24 * v13 + 16);
  v99 = 2;
  v100 = 2;
  v101 = -1;
  v102 = -1;
  v103 = -1;
  v104 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  v105 = _D0;
  v106 = xmmword_22619BE40;
  v107 = xmmword_226135540;
  v108 = -1;
  v109 = -1;
  v111 = 0;
  if (a3)
  {
    v23 = *a3;
    if (*a3)
    {
      v24 = a3[1];
      if (v24)
      {
        v25 = a3 + 2;
        do
        {
          v23 = 31 * v23 + v24;
          v26 = *(unsigned __int8 *)v25++;
          v24 = v26;
        }
        while (v26);
      }
      v23 &= ~0x8000000000000000;
    }
  }
  else
  {
    v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(_QWORD *)v116 = 0xD5AED26C4C4924CALL;
  *(_QWORD *)&v116[8] = "MeshShadowColorTexture";
  v110 = (v23 + 0x6EC7A19091F839F0) ^ 0x6AD7693626249265;
  re::StringID::destroyString((re::StringID *)v116);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v99, "ProjectiveMeshShadowMapTexture", &v98);
  if (a3)
  {
    v27 = *a3;
    if (*a3)
    {
      v28 = a3[1];
      if (v28)
      {
        v29 = a3 + 2;
        do
        {
          v27 = 31 * v27 + v28;
          v30 = *(unsigned __int8 *)v29++;
          v28 = v30;
        }
        while (v30);
      }
      v31 = ((v27 & 0x7FFFFFFFFFFFFFFFLL) - 0x48C249494DF020D1) ^ 0x2C37E112E1E92C60;
    }
    else
    {
      v31 = 0x9B0A57A453E6F34FLL;
    }
    *(_QWORD *)v116 = 0x586FC225C3D258C0;
    *(_QWORD *)&v116[8] = "MeshShadowDepthAsColorTexture";
    v110 = v31;
    re::StringID::destroyString((re::StringID *)v116);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v99, "TiledShadowDepthPrepassDepthAsColorTexture", &v97);
    v104 = 0;
    v33 = *a3;
    if (*a3)
    {
      v34 = a3[1];
      if (v34)
      {
        v35 = a3 + 2;
        do
        {
          v33 = 31 * v33 + v34;
          v36 = *(unsigned __int8 *)v35++;
          v34 = v36;
        }
        while (v36);
      }
      v32 = ((v33 & 0x7FFFFFFFFFFFFFFFLL) + 0x7E3991D5E64B1818) ^ 0x6B14F36D04976B05;
    }
    else
    {
      v32 = 0x152D62B8E2DC731DLL;
    }
  }
  else
  {
    *(_QWORD *)v116 = 0x586FC225C3D258C0;
    *(_QWORD *)&v116[8] = "MeshShadowDepthAsColorTexture";
    v110 = 0x1B0A57A453E6F34ELL;
    re::StringID::destroyString((re::StringID *)v116);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v99, "TiledShadowDepthPrepassDepthAsColorTexture", &v97);
    v104 = 0;
    v32 = 0x952D62B8E2DC7312;
  }
  *(_QWORD *)v116 = 0xD629E6DA092ED60ALL;
  *(_QWORD *)&v116[8] = "MeshShadowDepthTexture";
  v110 = v32;
  re::StringID::destroyString((re::StringID *)v116);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v99, "MeshShadowDepthTexture", &v96);
  if (a3)
  {
    v37 = *a3;
    if (*a3)
    {
      v38 = a3[1];
      if (v38)
      {
        v39 = a3 + 2;
        do
        {
          v37 = 31 * v37 + v38;
          v40 = *(unsigned __int8 *)v39++;
          v38 = v40;
        }
        while (v40);
      }
      v41 = ((v37 & 0x7FFFFFFFFFFFFFFFLL) - 0x43FD21140289B149) ^ 0x284EDEB613E4CA80;
    }
    else
    {
      v41 = 0x944C005DEE928437;
    }
    *(_QWORD *)v116 = 0x509DBD6C27C99500;
    *(_QWORD *)&v116[8] = "MeshShadowMippedColorTexture";
    v110 = v41;
    re::StringID::destroyString((re::StringID *)v116);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v99, "MeshShadowMippedColorTexture", &v95);
    v43 = *a3;
    if (*a3)
    {
      v44 = a3[1];
      if (v44)
      {
        v45 = a3 + 2;
        do
        {
          v43 = 31 * v43 + v44;
          v46 = *(unsigned __int8 *)v45++;
          v44 = v46;
        }
        while (v46);
      }
      v42 = ((v43 & 0x7FFFFFFFFFFFFFFFLL) + 0x636D32B42A3881CLL) ^ 0x59A6302C4491B15;
    }
    else
    {
      v42 = 0x3ACB02986EA9309;
    }
  }
  else
  {
    *(_QWORD *)v116 = 0x509DBD6C27C99500;
    *(_QWORD *)&v116[8] = "MeshShadowMippedColorTexture";
    v110 = 0x144C005DEE928436;
    re::StringID::destroyString((re::StringID *)v116);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v99, "MeshShadowMippedColorTexture", &v95);
    v42 = 0x83ACB02986EA930ELL;
  }
  *(_QWORD *)v116 = 0xB34C6058892362ALL;
  *(_QWORD *)&v116[8] = "MeshShadowIntermediateTexture";
  v110 = v42;
  re::StringID::destroyString((re::StringID *)v116);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v99, "MeshShadowIntermediateTexture", &v94);
  if (a3)
  {
    v47 = *a3;
    if (*a3)
    {
      v48 = a3[1];
      if (v48)
      {
        v49 = a3 + 2;
        do
        {
          v47 = 31 * v47 + v48;
          v50 = *(unsigned __int8 *)v49++;
          v48 = v50;
        }
        while (v50);
      }
      v51 = ((v47 & 0x7FFFFFFFFFFFFFFFLL) + 0x6C6DB52C1B1614E0) ^ 0x335A34A7FEF3F24;
    }
    else
    {
      v51 = 0x6F58166664F92BC4;
    }
  }
  else
  {
    v51 = 0xEF58166664F92BFBLL;
  }
  *(_QWORD *)v116 = 0x66B4694FFDE7E48;
  *(_QWORD *)&v116[8] = "MeshShadowMippedReceiverDepthColorTexture";
  v110 = v51;
  re::StringID::destroyString((re::StringID *)v116);
  v104 = 1;
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v99, "MeshShadowMippedReceiverDepthColorTexture", &v93);
  v86 = 2;
  v87 = -1;
  v88 = 1;
  v89 = 1065353216;
  v90 = 0xFFFFFFFF00000020;
  v91 = -1;
  if (a3)
  {
    v52 = *a3;
    if (*a3)
    {
      v53 = a3[1];
      if (v53)
      {
        v54 = a3 + 2;
        do
        {
          v52 = 31 * v52 + v53;
          v55 = *(unsigned __int8 *)v54++;
          v53 = v55;
        }
        while (v55);
      }
      v56 = ((v52 & 0x7FFFFFFFFFFFFFFFLL) + 0x1C7D868D2399E17CLL) ^ 0x19DF38FA543D0095;
    }
    else
    {
      v56 = 0x5A2BE7777A4E1E9;
    }
  }
  else
  {
    v56 = 0x85A2BE7777A4E1EELL;
  }
  *(_QWORD *)v116 = 0x33BE71F4A87A012ALL;
  *(_QWORD *)&v116[8] = "MeshShadowMipDescriptionBuffer";
  v92 = v56;
  re::StringID::destroyString((re::StringID *)v116);
  re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v86, "MeshShadowMipDescriptionBuffer", &v85);
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "MeshShadowRenderGraph", 7uLL);
  v58 = re::globalAllocators(RenderGraph);
  v59 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58[2] + 32))(v58[2], 256, 8);
  v60 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v59, "CopyShadowTextures");
  *(_QWORD *)v60 = &off_24ED803E0;
  *(_QWORD *)v116 = v60;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v116);
  v59[3] = *((_QWORD *)RenderGraph + 10);
  v59[4] = *((_QWORD *)RenderGraph + 12);
  v59[6] = *((_QWORD *)RenderGraph + 13);
  *(_OWORD *)v116 = v85;
  *(_QWORD *)&v116[16] = 0x100000000;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v59 + 17), (uint64_t)v116);
  v59 += 27;
  *(_OWORD *)v116 = v97;
  *(_QWORD *)&v116[16] = 0x100000000;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)v59, (uint64_t)v116);
  *(_OWORD *)v116 = v98;
  *(_QWORD *)&v116[16] = 0x100000000;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)v59, (uint64_t)v116);
  v61 = *(_BYTE *)(v17 + 28);
  v62 = (_BYTE *)*((_QWORD *)a4 + 1);
  if (v62[307] && *v62)
  {
    v63 = (re::RenderGraphNode *)((char *)re::RenderGraph::addNode<re::GenerateTiledShadowDepthPrepassMapNode>(RenderGraph)
                                + 216);
    *(_OWORD *)v116 = v95;
    *(_QWORD *)&v116[16] = 0x100000000;
    *(_OWORD *)&v117[8] = xmmword_2260E5F10;
    *(_WORD *)&v117[24] = v61;
    v118 = 0;
    re::DynamicArray<re::TargetWrite>::add(v63, (uint64_t)v116);
    *(_OWORD *)v116 = v93;
    *(_QWORD *)&v116[16] = 0x100000001;
    *(_OWORD *)&v117[8] = xmmword_2260E5F10;
    *(_WORD *)&v117[24] = v61;
    v118 = 0;
    re::DynamicArray<re::TargetWrite>::add(v63, (uint64_t)v116);
    *(_OWORD *)v116 = v96;
    *(_QWORD *)&v116[16] = 0x200000000;
    *(_OWORD *)&v117[8] = xmmword_2260E5D70;
    *(_WORD *)&v117[24] = 0;
    v118 = 0;
    re::DynamicArray<re::TargetWrite>::add(v63, (uint64_t)v116);
    ProjectiveMeshShadowMap = re::RenderGraph::addNode<re::GenerateProjectiveMeshShadowMapNode>(RenderGraph);
    v113 = 0;
    v114 = 0;
    v115 = 0;
    v65 = (re::RenderGraphNode *)((char *)ProjectiveMeshShadowMap + 216);
    *(_OWORD *)v116 = v95;
    *(_QWORD *)&v116[16] = 0x100000000;
    *(_OWORD *)v117 = v112;
    *(_OWORD *)&v117[10] = 0u;
    v118 = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)ProjectiveMeshShadowMap + 216), (uint64_t)v116);
    v113 = 0;
    v114 = 0;
    v115 = 0;
    *(_OWORD *)v116 = v93;
    *(_QWORD *)&v116[16] = 0xA00000001;
    *(_OWORD *)v117 = v112;
    *(_OWORD *)&v117[10] = 0u;
    v118 = 0;
    re::DynamicArray<re::TargetWrite>::add(v65, (uint64_t)v116);
    *(_OWORD *)v116 = v96;
    *(_QWORD *)&v116[16] = 0x200000000;
    *(_OWORD *)&v117[8] = xmmword_2260E5D70;
    *(_WORD *)&v117[24] = 0;
    v118 = 0;
    re::DynamicArray<re::TargetWrite>::add(v65, (uint64_t)v116);
  }
  else
  {
    v67 = (re::RenderGraphNode *)((char *)re::RenderGraph::addNode<re::GenerateTiledShadowDepthPrepassMapNode>(RenderGraph)
                                + 216);
    *(_OWORD *)v116 = v96;
    *(_QWORD *)&v116[16] = 0x200000000;
    *(_OWORD *)&v117[8] = xmmword_2260E5D70;
    *(_WORD *)&v117[24] = 0;
    v118 = 0;
    re::DynamicArray<re::TargetWrite>::add(v67, (uint64_t)v116);
    *(_OWORD *)v116 = v93;
    *(_QWORD *)&v116[16] = 0x100000001;
    *(_OWORD *)&v117[8] = xmmword_2260E5F10;
    *(_WORD *)&v117[24] = v61;
    v118 = 0;
    re::DynamicArray<re::TargetWrite>::add(v67, (uint64_t)v116);
    v68 = re::RenderGraph::addNode<re::GenerateProjectiveMeshShadowMapNode>(RenderGraph);
    *(_OWORD *)v116 = v95;
    *(_QWORD *)&v116[16] = 0x100000000;
    *(_OWORD *)&v117[8] = xmmword_2260E5F10;
    *(_WORD *)&v117[24] = v61;
    v118 = 0;
    re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v68 + 216), (uint64_t)v116);
    *(_OWORD *)v116 = v93;
    *(_QWORD *)&v116[16] = 0;
    *(_QWORD *)v117 = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v68 + 176), (__n128 *)v116);
  }
  v69 = re::globalAllocators(v66);
  v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v69[2] + 32))(v69[2], 576, 16);
  v71 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase((re::RenderGraphComputeNodeBase *)v70, "MeshShadowGenerateMips");
  *(_QWORD *)v71 = off_24ED80680;
  v72 = (re::RenderGraphComputeNodeBase *)((char *)v71 + 480);
  *((_OWORD *)v71 + 30) = 0u;
  *((_OWORD *)v71 + 31) = 0u;
  v73 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v72, 0);
  *(_OWORD *)(v70 + 512) = 0u;
  *(_OWORD *)(v70 + 528) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(v70 + 512), 0);
  *(_QWORD *)(v70 + 560) = 0;
  *(_OWORD *)(v70 + 544) = 0u;
  *(_QWORD *)v116 = v70;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v116);
  *(_QWORD *)(v70 + 24) = *((_QWORD *)RenderGraph + 10);
  *(_QWORD *)(v70 + 32) = *((_QWORD *)RenderGraph + 12);
  *(_QWORD *)(v70 + 48) = *((_QWORD *)RenderGraph + 13);
  v74 = (uint64_t *)((char *)this + 40);
  re::AssetHandle::operator=((uint64_t *)(v70 + 256), v74);
  *(_QWORD *)v116 = "meshShadowCalculateMip";
  *(_QWORD *)&v116[8] = 22;
  re::DynamicString::operator=((re::DynamicString *)(v70 + 512), (uint64_t)v116);
  *(_QWORD *)v116 = "meshShadowGenerateMip";
  *(_QWORD *)&v116[8] = 21;
  re::DynamicString::operator=(v72, (uint64_t)v116);
  *(_OWORD *)v116 = v95;
  *(_QWORD *)&v116[16] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v70 + 176), (__n128 *)v116);
  *(_OWORD *)v116 = v93;
  *(_QWORD *)&v116[16] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v70 + 176), (__n128 *)v116);
  *(_OWORD *)v116 = v95;
  *(_QWORD *)&v116[16] = 0x100000000;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v70 + 216), (uint64_t)v116);
  *(_OWORD *)v116 = v93;
  *(_QWORD *)&v116[16] = 0x100000000;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v70 + 216), (uint64_t)v116);
  *(_OWORD *)v116 = v85;
  *(_QWORD *)&v116[16] = 0x500000000;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v70 + 136), (uint64_t)v116);
  re::MeshShadowGenerateMipmapNode::configure((void **)v70, a2, a3, a4);
  v75 = re::RenderGraph::addNode<re::ProjectiveMeshShadowBlurNode>(RenderGraph, "MeshShadowBlurShadowX");
  re::AssetHandle::operator=((uint64_t *)v75 + 32, v74);
  *(_QWORD *)v116 = "projectiveMeshShadowDilateHorizontal";
  *(_QWORD *)&v116[8] = 36;
  re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v75 + 280), (uint64_t)v116);
  v116[0] = 1;
  *(_OWORD *)&v116[8] = v94;
  re::Optional<re::RenderGraphTargetHandle>::operator=((uint64_t)v75 + 312, v116);
  *(_OWORD *)v116 = v95;
  *(_QWORD *)&v116[16] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 176), (__n128 *)v116);
  *(_OWORD *)v116 = v93;
  *(_DWORD *)&v116[16] = 1;
  *(_WORD *)&v116[20] = 0;
  v116[22] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 176), (__n128 *)v116);
  *(_OWORD *)v116 = v85;
  *(_QWORD *)&v116[16] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 96), (__n128 *)v116);
  *(_OWORD *)v116 = v94;
  *(_QWORD *)&v116[16] = 0x500000002;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v75 + 216), (uint64_t)v116);
  *((_DWORD *)v75 + 120) = 0;
  re::ProjectiveMeshShadowBlurNode::configure((void **)v75, a2, a3, a4);
  v76 = re::RenderGraph::addNode<re::ProjectiveMeshShadowBlurNode>(RenderGraph, "MeshShadowBlurShadowY");
  re::AssetHandle::operator=((uint64_t *)v76 + 32, v74);
  *(_QWORD *)v116 = "projectiveMeshShadowDilateVertical";
  *(_QWORD *)&v116[8] = 34;
  re::DynamicString::operator=((re::RenderGraphComputeNodeBase *)((char *)v76 + 280), (uint64_t)v116);
  v116[0] = 1;
  *(_OWORD *)&v116[8] = v98;
  re::Optional<re::RenderGraphTargetHandle>::operator=((uint64_t)v76 + 312, v116);
  *(_OWORD *)v116 = v94;
  *(_QWORD *)&v116[16] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v76 + 176), (__n128 *)v116);
  *(_OWORD *)v116 = v93;
  *(_DWORD *)&v116[16] = 1;
  *(_WORD *)&v116[20] = 0;
  v116[22] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v76 + 176), (__n128 *)v116);
  *(_OWORD *)v116 = v85;
  *(_QWORD *)&v116[16] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((re::RenderGraphComputeNodeBase *)((char *)v76 + 96), (__n128 *)v116);
  *(_OWORD *)v116 = v95;
  *(_QWORD *)&v116[16] = 0x500000002;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  re::DynamicArray<re::TargetWrite>::add((re::RenderGraphComputeNodeBase *)((char *)v76 + 216), (uint64_t)v116);
  *((_DWORD *)v76 + 120) = 1;
  v77 = re::ProjectiveMeshShadowBlurNode::configure((void **)v76, a2, a3, a4);
  v78 = re::globalAllocators((re *)v77);
  v79 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78[2] + 32))(v78[2], 480, 16);
  v80 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase((re::RenderGraphComputeNodeBase *)v79, "MeshShadowGenerateFinalTexture");
  *(_QWORD *)v80 = &off_24ED80740;
  *(_QWORD *)v116 = v80;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v116);
  v79[3] = *((_QWORD *)RenderGraph + 10);
  v79[4] = *((_QWORD *)RenderGraph + 12);
  v79[6] = *((_QWORD *)RenderGraph + 13);
  re::AssetHandle::operator=(v79 + 32, v74);
  *(_QWORD *)v116 = "meshShadowGenerateFinalTexture";
  *(_QWORD *)&v116[8] = 30;
  re::DynamicString::operator=((re::DynamicString *)(v79 + 35), (uint64_t)v116);
  *(_OWORD *)v116 = v95;
  *(_QWORD *)&v116[16] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v79 + 22), (__n128 *)v116);
  *(_OWORD *)v116 = v93;
  *(_DWORD *)&v116[16] = 1;
  *(_WORD *)&v116[20] = 0;
  v116[22] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v79 + 22), (__n128 *)v116);
  *(_OWORD *)v116 = v85;
  *(_DWORD *)&v116[16] = 1;
  *(_WORD *)&v116[20] = 0;
  v116[22] = 0;
  *(_QWORD *)v117 = 2;
  re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v79 + 12), (__n128 *)v116);
  *(_OWORD *)v116 = v98;
  *(_QWORD *)&v116[16] = 0x100000002;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v79 + 27), (uint64_t)v116);
  *(_OWORD *)v116 = v97;
  *(_QWORD *)&v116[16] = 0x100000003;
  *(_OWORD *)&v117[8] = xmmword_2260E5D70;
  *(_WORD *)&v117[24] = 0;
  v118 = 0;
  v81 = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v79 + 27), (uint64_t)v116);
  (*(void (**)(uint64_t *, const char *, const char *, re::RenderFrame *, __n128))(*v79 + 80))(v79, a2, a3, a4, v81);
  *(_QWORD *)v116 = 0x26220881977C39BCLL;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)v116, (double *)&v98, "ProjectiveMeshShadowMapScope");
  *(_QWORD *)v116 = 0x25C1E79857068EA3;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)v116, (double *)&v97, "ProjectiveMeshShadowMapScope");
  *(_QWORD *)v116 = 0x5878D331D268CBA0;
  re::RenderFrame::addBufferOutput(a4, (uint64_t *)v116, (double *)&v85, "ProjectiveMeshShadowMapScope");
}

re::RenderGraphNode *re::RenderGraph::addNode<re::GenerateTiledShadowDepthPrepassMapNode>(re *a1)
{
  uint64_t *v2;
  re::RenderGraphNode *v3;
  re::RenderGraphNode *v4;
  uint64_t v5;
  uint64_t v6;
  re::RenderGraphNode *v8;

  v2 = re::globalAllocators(a1);
  v3 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 264, 8);
  v4 = re::RenderGraphNode::RenderGraphNode(v3, "GenerateTiledShadowDepthPrepassMap");
  *((_DWORD *)v4 + 64) = 1;
  *(_QWORD *)v4 = &off_24ED80488;
  v8 = v4;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v8);
  v5 = *((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v3 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v3 + 4) = v5;
  *((_QWORD *)v3 + 6) = v6;
  return v3;
}

re::RenderGraphNode *re::RenderGraph::addNode<re::GenerateProjectiveMeshShadowMapNode>(re *a1)
{
  uint64_t *v2;
  re::RenderGraphNode *v3;
  re::RenderGraphNode *v4;
  uint64_t v5;
  uint64_t v6;
  re::RenderGraphNode *v8;

  v2 = re::globalAllocators(a1);
  v3 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 256, 8);
  v4 = re::RenderGraphNode::RenderGraphNode(v3, "GenerateProjectiveMeshShadowMap");
  *(_QWORD *)v4 = &off_24ED80530;
  v8 = v4;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v8);
  v5 = *((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v3 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v3 + 4) = v5;
  *((_QWORD *)v3 + 6) = v6;
  return v3;
}

re::RenderGraphComputeNodeBase *re::RenderGraph::addNode<re::ProjectiveMeshShadowBlurNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphComputeNodeBase *v5;
  re::RenderGraphComputeNodeBase *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphComputeNodeBase *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphComputeNodeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 672, 16);
  v6 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(v5, a2);
  *(_QWORD *)v6 = &off_24ED80800;
  *(_OWORD *)((char *)v6 + 488) = 0u;
  *(_OWORD *)((char *)v6 + 504) = 0u;
  *(_OWORD *)((char *)v6 + 520) = 0u;
  *(_OWORD *)((char *)v6 + 536) = 0u;
  *(_OWORD *)((char *)v6 + 552) = 0u;
  *(_OWORD *)((char *)v6 + 568) = 0u;
  *(_OWORD *)((char *)v6 + 584) = 0u;
  *(_OWORD *)((char *)v6 + 600) = 0u;
  *(_OWORD *)((char *)v6 + 616) = 0u;
  *(_OWORD *)((char *)v6 + 632) = 0u;
  *(_OWORD *)((char *)v6 + 648) = 0u;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

void re::MeshShadowProvider::~MeshShadowProvider(re::MeshShadowProvider *this)
{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::MeshShadowProvider *)((char *)this + 40));
  *(_QWORD *)this = off_24ED381E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::MeshShadowProvider *)((char *)this + 40));
  *(_QWORD *)this = off_24ED381E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphGenerateMipmapsNode::execute(re::RenderGraphGenerateMipmapsNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  _BYTE v10[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10, 5062, 0);
  v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v9);
  v5 = *((_QWORD *)this + 29);
  if (v5)
  {
    v6 = *((_QWORD *)this + 31);
    v7 = v5 << 6;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, v6, 0, 0, &v8);
      objc_msgSend(v9, "generateMipmapsForTexture:", v8);
      if (v8)

      v6 += 64;
      v7 -= 64;
    }
    while (v7);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10);
}

uint64_t re::RenderGraphGenerateMipmapsNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphGenerateMipmapsNode.", (re::DynamicString *)&v4, *(_QWORD *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[19])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphGenerateMipmapsNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[24])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphGenerateMipmapsNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  return result;
}

void re::RenderGraphTargetCopyNode::setup(_BOOL8 this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  re::RenderGraphNode *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v5 = (re::RenderGraphNode *)this;
  v14 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(this + 232);
  if (v6)
  {
    v7 = *(_QWORD *)(this + 248);
    v8 = v7 + (v6 << 6);
    do
    {
      if (*(_DWORD *)(v7 + 20) != 4)
      {
        *(_DWORD *)(v7 + 20) = 4;
        do
          v9 = __ldaxr((unsigned __int8 *)&re::RenderGraphTargetCopyNode::setup(re::RenderGraphBuilder &,re::RenderGraphDataStore &)::__FILE____LINE___logged);
        while (__stlxr(1u, (unsigned __int8 *)&re::RenderGraphTargetCopyNode::setup(re::RenderGraphBuilder &,re::RenderGraphDataStore &)::__FILE____LINE___logged));
        if ((v9 & 1) == 0)
        {
          v10 = *re::graphicsLogObjects((re *)this);
          this = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          if (this)
          {
            v11 = *((_QWORD *)v5 + 2);
            *(_DWORD *)buf = 136315138;
            v13 = v11;
            _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "(%s): Defaulting target write type to kWriteBlit. Other operation types are not supported.", buf, 0xCu);
          }
        }
      }
      v7 += 64;
    }
    while (v7 != v8);
  }
  re::RenderGraphNode::setup(v5, a2, a3);
}

void re::RenderGraphTargetCopyNode::execute(re::RenderGraphTargetCopyNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  id v23;
  id v24;
  id v25;
  _BYTE v26[16];
  __int128 v27;
  uint64_t v28;
  _BYTE v29[28];
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26, 5064, 0);
  v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v25);
  if (*((_QWORD *)this + 24))
  {
    v5 = 0;
    v6 = 1;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 26) + 32 * v5, 0, 0, &v24);
      v7 = *((_QWORD *)this + 29);
      if (v7 <= v5)
      {
        *(_QWORD *)&v27 = 0;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v32 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v29 = 136315906;
        *(_QWORD *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 789;
        *(_WORD *)&v29[18] = 2048;
        *(_QWORD *)&v29[20] = v5;
        v30 = 2048;
        v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 31) + (v5 << 6), 0, 0, &v23);
      v8 = v24;
      if (*((_BYTE *)this + 360))
      {
        objc_msgSend(v25, "copyFromTexture:toTexture:", v24, v23);
      }
      else
      {
        v9 = *((_QWORD *)this + 32);
        v10 = *((_QWORD *)this + 33);
        v22 = *((_OWORD *)this + 17);
        v11 = *((_QWORD *)this + 36);
        v12 = objc_msgSend(v24, sel_width);
        if ((unint64_t)v12 >= *((_QWORD *)this + 37))
          v13 = (id)*((_QWORD *)this + 37);
        else
          v13 = v12;
        v14 = objc_msgSend(v24, sel_height);
        if ((unint64_t)v14 >= *((_QWORD *)this + 38))
          v15 = (id)*((_QWORD *)this + 38);
        else
          v15 = v14;
        v16 = objc_msgSend(v24, sel_depth);
        v17 = (id)*((_QWORD *)this + 39);
        v18 = *((_QWORD *)this + 40);
        if (v16 < v17)
          v17 = v16;
        v19 = *((_QWORD *)this + 41);
        v20 = *((_QWORD *)this + 44);
        v32 = v22;
        *(_QWORD *)&v33 = v11;
        *(_QWORD *)v29 = v13;
        *(_QWORD *)&v29[8] = v15;
        *(_QWORD *)&v29[16] = v17;
        v27 = *((_OWORD *)this + 21);
        v28 = v20;
        objc_msgSend(v25, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v8, v9, v10, &v32, v29, v23, v18, v19, &v27);
      }
      if (v23)

      if (v24)
      v5 = v6;
    }
    while (*((_QWORD *)this + 24) > (unint64_t)v6++);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26);
}

uint64_t re::RenderGraphTargetCopyNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphTargetCopyNode.", (re::DynamicString *)&v4, *(_QWORD *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[19])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphTargetCopyNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[24] != v3[29])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads must match up with the same number of target writes for RenderGraphTargetCopyNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  return result;
}

void re::RenderGraphCopyEntityAttributeBufferNode::setup(_BOOL8 this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  re::RenderGraphNode *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v5 = (re::RenderGraphNode *)this;
  v14 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(this + 152);
  if (v6)
  {
    v7 = *(_QWORD *)(this + 168);
    v8 = v7 + (v6 << 6);
    do
    {
      if (*(_DWORD *)(v7 + 20) != 4)
      {
        *(_DWORD *)(v7 + 20) = 4;
        do
          v9 = __ldaxr(re::RenderGraphCopyEntityAttributeBufferNode::setup(re::RenderGraphBuilder &,re::RenderGraphDataStore &)::__FILE____LINE___logged);
        while (__stlxr(1u, re::RenderGraphCopyEntityAttributeBufferNode::setup(re::RenderGraphBuilder &,re::RenderGraphDataStore &)::__FILE____LINE___logged));
        if ((v9 & 1) == 0)
        {
          v10 = *re::graphicsLogObjects((re *)this);
          this = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          if (this)
          {
            v11 = *((_QWORD *)v5 + 2);
            *(_DWORD *)buf = 136315138;
            v13 = v11;
            _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "(%s): Defaulting buffer write type to kWriteBlit. Other operation types are not supported.", buf, 0xCu);
          }
        }
      }
      v7 += 64;
    }
    while (v7 != v8);
  }
  re::RenderGraphNode::setup(v5, a2, a3);
}

void re::RenderGraphCopyEntityAttributeBufferNode::execute(re::RenderGraphCopyEntityAttributeBufferNode *this, re::RenderGraphContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL8 v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  re::RenderGraphContext *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  NSObject *v54;
  const char *v55;
  re::AttributeTable *v56;
  unint64_t v57;
  re::AttributeTable *v58;
  re::AttributeTable *v59;
  uint64_t v60;
  re::AttributeTable *v61;
  re::AttributeTable *v62;
  re *v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  NSObject *v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  re::RenderGraphContext *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  unsigned int v91;
  uint64_t v92;
  _BYTE v93[16];
  uint64_t v94;
  _BYTE v95[12];
  __int16 v96;
  int v97;
  __int16 v98;
  unint64_t v99;
  __int16 v100;
  unint64_t v101;
  uint8_t buf[32];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v93, 5095, 0);
  v3 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v91 = 0;
    v89 = 0u;
    v90 = 0u;
    v92 = 0x7FFFFFFFLL;
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)&v89, v5, 3);
    v75 = *(_QWORD *)(v4 + 440);
    v76 = a2;
    v74 = *(_QWORD *)(v75 + 40);
    if (v74)
    {
      v6 = 0;
      v7 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32);
      v79 = v7 + 8;
      v80 = v7 + 72;
      v8 = 0xFFFFFFFFLL;
      do
      {
        v77 = v6;
        v9 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v75, v6);
        v10 = *(_QWORD *)(v9 + 16);
        if (v10)
        {
          v11 = *(_QWORD **)(v9 + 32);
          v78 = &v11[82 * v10];
          do
          {
            if (v11[52] == *((_QWORD *)this + 32) && v11[1])
            {
              v12 = 0;
              v81 = v11;
              do
              {
                v13 = (_QWORD *)re::DataArray<re::MeshInstance>::get(v80, *(_QWORD *)(*v11 + 8 * v12));
                v14 = re::DataArray<re::MeshModel>::get(v79, v13[2]);
                v15 = v14;
                v16 = v11[2];
                if (v16 && (v17 = *(_QWORD *)(v16 + 96)) != 0)
                {
                  v18 = *(_QWORD *)(v17 + 8);
                  if (v18 <= v12)
                  {
                    v94 = 0;
                    v104 = 0u;
                    v105 = 0u;
                    v103 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v95 = 136315906;
                    *(_QWORD *)&v95[4] = "operator[]";
                    v96 = 1024;
                    v97 = 468;
                    v98 = 2048;
                    v99 = v12;
                    v100 = 2048;
                    v101 = v18;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_84:
                    re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, v64);
                    _os_crash();
                    __break(1u);
                  }
                  v86 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 24 * v12 + 16);
                  v88 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 24 * v12 + 8);
                }
                else
                {
                  v86 = 0;
                  v88 = 0;
                }
                v82 = v12;
                if (*(_QWORD *)(v14 + 56))
                {
                  v19 = 0;
                  do
                  {
                    v20 = *(_QWORD *)(v15 + 64);
                    if (v19 >= v13[13])
                      v21 = *(unsigned __int16 *)(v20 + 560 * v19 + 474);
                    else
                      v21 = *(_DWORD *)(v13[14] + 4 * v19);
                    v22 = re::HashTable<int,re::AttributeTable const*,re::Hash<int>,re::EqualTo<int>,true,false>::containsKey((uint64_t)&v89, v21);
                    if (v22)
                    {
                      v23 = *re::graphicsLogObjects((re *)v22);
                      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                      {
                        v24 = *((_QWORD *)this + 2);
                        *(_DWORD *)buf = 136315394;
                        *(_QWORD *)&buf[4] = v24;
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v21;
                        _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEFAULT, "(%s): Duplicate material indices detected: %d. Skipping.", buf, 0x12u);
                      }
                    }
                    else
                    {
                      if (v19 >= v88)
                        v25 = v20 + 560 * v19;
                      else
                        v25 = *(_QWORD *)(v86 + 8 * v19);
                      v26 = 0xBF58476D1CE4E5B9 * (v21 ^ ((unint64_t)v21 >> 30));
                      v27 = (0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31);
                      v28 = v89;
                      if (!(_QWORD)v89
                        || (v28 = v27 % DWORD2(v90),
                            v29 = *(unsigned int *)(*((_QWORD *)&v89 + 1) + 4 * v28),
                            (_DWORD)v29 == 0x7FFFFFFF))
                      {
LABEL_29:
                        v30 = v8;
                        v31 = v92;
                        if ((_DWORD)v92 == 0x7FFFFFFF)
                        {
                          v31 = v91;
                          v32 = v91;
                          if (v91 == DWORD2(v90))
                          {
                            re::HashTable<re::FrameProfilerStatisticsOptions,re::FrameStats *,re::Hash<re::FrameProfilerStatisticsOptions>,re::EqualTo<re::FrameProfilerStatisticsOptions>,true,false>::setCapacity((uint64_t)&v89, 2 * HIDWORD(v90));
                            v32 = v91;
                            v28 = v27 % DWORD2(v90);
                          }
                          v91 = v32 + 1;
                          v33 = v90;
                          v34 = *(_DWORD *)(v90 + 24 * v31 + 8);
                        }
                        else
                        {
                          v33 = v90;
                          v34 = *(_DWORD *)(v90 + 24 * v92 + 8);
                          LODWORD(v92) = v34 & 0x7FFFFFFF;
                        }
                        v35 = v33 + 24 * v31;
                        *(_DWORD *)(v35 + 8) = v34 | 0x80000000;
                        v36 = *((_QWORD *)&v89 + 1);
                        v37 = *(_DWORD *)(*((_QWORD *)&v89 + 1) + 4 * v28) | 0x80000000;
                        *(_QWORD *)v35 = v27;
                        *(_DWORD *)(v35 + 8) = v37;
                        *(_DWORD *)(v35 + 12) = v21;
                        *(_QWORD *)(v35 + 16) = v25;
                        *(_DWORD *)(v36 + 4 * v28) = v31;
                        ++HIDWORD(v90);
                        ++HIDWORD(v92);
                        LODWORD(v8) = v30;
                      }
                      else
                      {
                        while (*(_DWORD *)(v90 + 24 * v29 + 12) != v21)
                        {
                          LODWORD(v29) = *(_DWORD *)(v90 + 24 * v29 + 8) & 0x7FFFFFFF;
                          if ((_DWORD)v29 == 0x7FFFFFFF)
                            goto LABEL_29;
                        }
                      }
                      if (v21 <= (int)v8)
                        v8 = v8;
                      else
                        v8 = v21;
                    }
                    ++v19;
                  }
                  while (v19 < *(_QWORD *)(v15 + 56));
                }
                v12 = v82 + 1;
                v11 = v81;
              }
              while (v82 + 1 < v81[1]);
            }
            v11 += 82;
          }
          while (v11 != v78);
        }
        v6 = v77 + 1;
      }
      while (v77 + 1 != v74);
    }
    else
    {
      v8 = 0xFFFFFFFFLL;
    }
    v38 = a2;
    v39 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
    re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)v38, v39, *((re::RenderGraphNodeBase **)v38 + 5), 0, v95);
    v40 = *((_QWORD *)this + 19);
    if (!v40)
      goto LABEL_81;
    v41 = *((_QWORD *)this + 21);
    v83 = v41 + (v40 << 6);
    v42 = (v8 + 1);
    while (2)
    {
      v43 = re::RenderGraphContext::metalBuffer((uint64_t)v38, v41);
      v44 = *(id *)v43;
      if ((v8 & 0x80000000) != 0)
        goto LABEL_75;
      v45 = 0;
      v46 = 0;
      v87 = HIDWORD(*(_QWORD *)(v43 + 8));
      v84 = *(_QWORD *)(v43 + 8);
      while (1)
      {
        v47 = re::HashTable<int,re::AttributeTable const*,re::Hash<int>,re::EqualTo<int>,true,false>::containsKey((uint64_t)&v89, v45);
        if (v47)
          break;
        v52 = *re::graphicsLogObjects((re *)v47);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          v53 = *((_QWORD *)this + 2);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v53;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v45;
          v54 = v52;
          v55 = "(%s): Missing material index: %d";
LABEL_70:
          _os_log_impl(&dword_224FE9000, v54, OS_LOG_TYPE_DEFAULT, v55, buf, 0x12u);
        }
LABEL_74:
        if (++v45 == v42)
          goto LABEL_75;
      }
      if ((_QWORD)v89)
      {
        v48 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) >> 27));
        v49 = (v48 ^ (v48 >> 31)) % DWORD2(v90);
        v50 = v90;
        v51 = *(unsigned int *)(*((_QWORD *)&v89 + 1) + 4 * v49);
        if ((_DWORD)v51 != 0x7FFFFFFF)
        {
          while (v45 != *(_DWORD *)(v90 + 24 * v51 + 12))
          {
            v51 = *(_DWORD *)(v90 + 24 * v51 + 8) & 0x7FFFFFFF;
            if (v51 == 0x7FFFFFFF)
              goto LABEL_57;
          }
LABEL_58:
          v56 = *(re::AttributeTable **)(v50 + 24 * v51 + 16);
          if (v56)
          {
            v57 = v8;
            v94 = *((_QWORD *)this + 33) >> 1;
            v58 = v56;
            do
            {
              v59 = v58;
              v58 = (re::AttributeTable *)*((_QWORD *)v58 + 1);
            }
            while (v58 && !*((_QWORD *)v59 + 9));
            v60 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v59 + 6, &v94);
            v61 = v56;
            if (v60 == -1)
            {
              v69 = *re::graphicsLogObjects((re *)0xFFFFFFFFFFFFFFFFLL);
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
              {
                v70 = *((_QWORD *)this + 2);
                v71 = *((_QWORD *)this + 34);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v70;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v71;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v45;
                _os_log_impl(&dword_224FE9000, v69, OS_LOG_TYPE_DEFAULT, "(%s): Unable to find specified vertex buffer [ %s ] at material index %d.", buf, 0x1Cu);
              }
            }
            else
            {
              do
              {
                v62 = v61;
                v61 = (re::AttributeTable *)*((_QWORD *)v61 + 1);
              }
              while (v61 && !*((_QWORD *)v62 + 9));
              v8 = *(unsigned __int8 *)(*((_QWORD *)v62 + 7)
                                      + 16
                                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v62 + 6, &v94)+ 8);
              v63 = (re *)re::AttributeTable::buffers(v56);
              if (v64 <= v8)
                goto LABEL_84;
              v65 = (char *)v63 + 16 * v8;
              v66 = v46 + *((unsigned int *)v65 + 3);
              if (v66 > v87)
              {
                v72 = *re::graphicsLogObjects(v63);
                v8 = v57;
                if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                {
                  v73 = *((_QWORD *)this + 2);
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v73;
                  _os_log_impl(&dword_224FE9000, v72, OS_LOG_TYPE_DEFAULT, "(%s): Write buffer not large enough for data.", buf, 0xCu);
                }
LABEL_75:
                if (v44)

                v41 += 64;
                v38 = v76;
                if (v41 == v83)
                {
LABEL_81:

                  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v89);
                  goto LABEL_82;
                }
                continue;
              }
              objc_msgSend(*(id *)v95, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", *(_QWORD *)v65, *((unsigned int *)v65 + 2), v44, v46 + v84);
              v46 = v66;
            }
            v8 = v57;
          }
          else
          {
            v67 = *re::graphicsLogObjects((re *)v47);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              v68 = *((_QWORD *)this + 2);
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v68;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v45;
              v54 = v67;
              v55 = "(%s): Invalid buffer table at material index %d.";
              goto LABEL_70;
            }
          }
          goto LABEL_74;
        }
      }
      else
      {
        v50 = v90;
      }
      break;
    }
LABEL_57:
    LODWORD(v51) = 0x7FFFFFFF;
    goto LABEL_58;
  }
LABEL_82:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v93);
}

BOOL re::HashTable<int,re::AttributeTable const*,re::Hash<int>,re::EqualTo<int>,true,false>::containsKey(uint64_t a1, int a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v5 + 24 * v3 + 12) == a2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_DWORD *)(v5 + 24 * v3 + 12) != a2);
  return result;
}

uint64_t re::RenderGraphCopyEntityAttributeBufferNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 192))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphCopyEntityAttributeBufferNode.", (re::DynamicString *)&v4, *(_QWORD *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[29])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target writes not supported for RenderGraphCopyEntityAttributeBufferNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[14])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphCopyEntityAttributeBufferNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  return result;
}

void re::RenderGraphSynchronizeTargetNode::execute(re::RenderGraphSynchronizeTargetNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  _BYTE v10[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10, 5066, 0);
  v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v9);
  v5 = *((_QWORD *)this + 29);
  if (v5)
  {
    v6 = *((_QWORD *)this + 31);
    v7 = v5 << 6;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, v6, 0, 0, &v8);
      if (v8)

      v6 += 64;
      v7 -= 64;
    }
    while (v7);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10);
}

uint64_t re::RenderGraphSynchronizeTargetNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphSynchronizeTargetNode.", (re::DynamicString *)&v4, *(_QWORD *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[19])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphSynchronizeTargetNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[24])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphSynchronizeTargetNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  return result;
}

void re::RenderGraphSynchronizeBufferNode::execute(re::RenderGraphSynchronizeBufferNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _BYTE v9[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v9, 5068, 0);
  v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v8);
  v5 = *((_QWORD *)this + 19);
  if (v5)
  {
    v6 = *((_QWORD *)this + 21);
    v7 = v5 << 6;
    do
    {
      re::RenderGraphContext::metalBuffer((uint64_t)a2, v6);
      v6 += 64;
      v7 -= 64;
    }
    while (v7);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v9);
}

uint64_t re::RenderGraphSynchronizeBufferNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphSynchronizeTextureNode.", (re::DynamicString *)&v4, *(_QWORD *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[29])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphSynchronizeTextureNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[24])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphSynchronizeTextureNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  return result;
}

void re::RenderGraphFillBufferNode::execute(re::RenderGraphFillBufferNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _BYTE v10[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10, 5070, 0);
  v4 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v9);
  v5 = *((_QWORD *)this + 19);
  if (v5)
  {
    v6 = *((_QWORD *)this + 21);
    v7 = v5 << 6;
    do
    {
      v8 = re::RenderGraphContext::metalBuffer((uint64_t)a2, v6);
      objc_msgSend(v9, "fillBuffer:range:value:", *(_QWORD *)v8, *(unsigned int *)(v8 + 8), *(unsigned int *)(v8 + 12), *((unsigned __int8 *)this + 256));
      v6 += 64;
      v7 -= 64;
    }
    while (v7);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10);
}

uint64_t re::RenderGraphFillBufferNode::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 112))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer reads not supported for RenderGraphFillBufferNode.", (re::DynamicString *)&v4, *(_QWORD *)(result + 16));
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[29])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Buffer writes not supported for RenderGraphFillBufferNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  if (v3[24])
  {
    re::DynamicString::format((re::DynamicString *)"(%s): Target reads not supported for RenderGraphFillBufferNode.", (re::DynamicString *)&v4, v3[2]);
    re::RenderGraphCompiled::addError(a2, (uint64_t)&v4);
    result = v4;
    if (v4)
    {
      if ((v5 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
    }
  }
  return result;
}

uint64_t *re::allocInfo_RenderGraphGenerateMipmapsNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_471);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_471))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121358, 0);
    *(uint64_t *)((char *)&qword_254121368 + 6) = 0;
    qword_254121368 = 0;
    qword_254121378 = 0;
    qword_254121380 = 0xFFFFFFFFLL;
    qword_254121358 = (uint64_t)&off_24ED7DAA8;
    qword_254121388 = (uint64_t)"RenderGraphGenerateMipmapsNode";
    dword_254121390 = 0;
    xmmword_254121398 = 0u;
    unk_2541213A8 = 0u;
    xmmword_2541213B8 = 0u;
    qword_2541213C8 = 0;
    __cxa_guard_release(&_MergedGlobals_471);
  }
  return &qword_254121358;
}

void re::initInfo_RenderGraphGenerateMipmapsNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x60380926AD0DCD00;
  v10[1] = "RenderGraphGenerateMipmapsNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_2541212B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541212B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541212B0 = v8;
      __cxa_guard_release(&qword_2541212B8);
    }
  }
  *((_QWORD *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541212B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphGenerateMipmapsNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphGenerateMipmapsNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphGenerateMipmapsNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphGenerateMipmapsNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphGenerateMipmapsNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED87228;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphGenerateMipmapsNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphGenerateMipmapsNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED87228;
  return result;
}

uint64_t re::introspect_RenderGraphGenerateMipmapsNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphGenerateMipmapsNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphGenerateMipmapsNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphGenerateMipmapsNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphGenerateMipmapsNode>, this);
}

uint64_t *re::allocInfo_RenderGraphTargetCopyNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541212C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541212C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541213D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541213E0 = 0;
    qword_2541213F0 = 0;
    qword_2541213F8 = 0xFFFFFFFFLL;
    qword_2541213D0 = (uint64_t)&off_24ED7DAA8;
    qword_254121400 = (uint64_t)"RenderGraphTargetCopyNode";
    dword_254121408 = 0;
    xmmword_254121410 = 0u;
    unk_254121420 = 0u;
    xmmword_254121430 = 0u;
    qword_254121440 = 0;
    __cxa_guard_release(&qword_2541212C0);
  }
  return &qword_2541213D0;
}

void re::initInfo_RenderGraphTargetCopyNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  const re::IntrospectionBase *v50;
  void *v51;
  uint64_t v52;
  uint64_t *v53;
  const re::IntrospectionBase *v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  const re::IntrospectionBase *v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  const re::IntrospectionBase *v62;
  void *v63;
  uint64_t v64;
  __int128 v65;
  _QWORD v66[2];
  __int128 v67;

  v66[0] = 0xB8B72825D799A640;
  v66[1] = "RenderGraphTargetCopyNode";
  re::StringID::destroyString((re::StringID *)v66);
  *((_OWORD *)this + 2) = v67;
  v4 = atomic_load((unsigned __int8 *)&qword_2541212C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541212C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121448 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_size_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "sourceSlice";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254121450 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_size_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "sourceLevel";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254121458 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_size_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "sourceX";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x11000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254121460 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_size_t((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "sourceY";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x11800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254121468 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_size_t((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "sourceZ";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x12000000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254121470 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_size_t((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "sourceWidth";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x12800000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254121478 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_size_t((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "sourceHeight";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x13000000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254121480 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_size_t((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "sourceDepth";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x13800000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254121488 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v43 = re::introspect_size_t((re *)1, v42);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "destSlice";
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x14000000009;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_254121490 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      v47 = re::introspect_size_t((re *)1, v46);
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = "destLevel";
      *(_QWORD *)(v48 + 16) = v47;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0x1480000000ALL;
      *(_DWORD *)(v48 + 40) = 0;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_254121498 = v48;
      v49 = re::introspectionAllocator((re *)v48);
      v51 = re::introspect_size_t((re *)1, v50);
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "destX";
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0x1500000000BLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_2541214A0 = v52;
      v53 = re::introspectionAllocator((re *)v52);
      v55 = re::introspect_size_t((re *)1, v54);
      v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 72, 8);
      *(_DWORD *)v56 = 1;
      *(_QWORD *)(v56 + 8) = "destY";
      *(_QWORD *)(v56 + 16) = v55;
      *(_QWORD *)(v56 + 24) = 0;
      *(_QWORD *)(v56 + 32) = 0x1580000000CLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(_QWORD *)(v56 + 48) = 0;
      *(_QWORD *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_2541214A8 = v56;
      v57 = re::introspectionAllocator((re *)v56);
      v59 = re::introspect_size_t((re *)1, v58);
      v60 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v57 + 32))(v57, 72, 8);
      *(_DWORD *)v60 = 1;
      *(_QWORD *)(v60 + 8) = "destZ";
      *(_QWORD *)(v60 + 16) = v59;
      *(_QWORD *)(v60 + 24) = 0;
      *(_QWORD *)(v60 + 32) = 0x1600000000DLL;
      *(_DWORD *)(v60 + 40) = 0;
      *(_QWORD *)(v60 + 48) = 0;
      *(_QWORD *)(v60 + 56) = 0;
      *(_DWORD *)(v60 + 64) = 0;
      qword_2541214B0 = v60;
      v61 = re::introspectionAllocator((re *)v60);
      v63 = re::introspect_BOOL((re *)1, v62);
      v64 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v61 + 32))(v61, 72, 8);
      *(_DWORD *)v64 = 1;
      *(_QWORD *)(v64 + 8) = "copyAllSlices";
      *(_QWORD *)(v64 + 16) = v63;
      *(_QWORD *)(v64 + 24) = 0;
      *(_QWORD *)(v64 + 32) = 0x1680000000ELL;
      *(_DWORD *)(v64 + 40) = 0;
      *(_QWORD *)(v64 + 48) = 0;
      *(_QWORD *)(v64 + 56) = 0;
      *(_DWORD *)(v64 + 64) = 0;
      qword_2541214B8 = v64;
      __cxa_guard_release(&qword_2541212C8);
    }
  }
  *((_QWORD *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 15;
  *((_QWORD *)this + 8) = &qword_254121448;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphTargetCopyNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphTargetCopyNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphTargetCopyNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphTargetCopyNode>;
  re::IntrospectionRegistry::add(this, v3);
  v65 = v67;
}

double re::internal::defaultConstruct<re::RenderGraphTargetCopyNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED872B8;
  result = 0.0;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_QWORD *)v3 + 36) = 0;
  *((_QWORD *)v3 + 37) = -1;
  *((_QWORD *)v3 + 38) = -1;
  *((_QWORD *)v3 + 39) = -1;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *(_OWORD *)((char *)v3 + 345) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphTargetCopyNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphTargetCopyNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED872B8;
  result = 0.0;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_QWORD *)v1 + 36) = 0;
  *((_QWORD *)v1 + 37) = -1;
  *((_QWORD *)v1 + 38) = -1;
  *((_QWORD *)v1 + 39) = -1;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *(_OWORD *)((char *)v1 + 345) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphTargetCopyNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphTargetCopyNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphTargetCopyNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphTargetCopyNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphTargetCopyNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphTargetCopyNode>, this);
}

uint64_t *re::allocInfo_RenderGraphCopyEntityAttributeBufferNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541212D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541212D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541214C0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541214D0 = 0;
    qword_2541214E0 = 0;
    qword_2541214E8 = 0xFFFFFFFFLL;
    qword_2541214C0 = (uint64_t)&off_24ED7DAA8;
    qword_2541214F0 = (uint64_t)"RenderGraphCopyEntityAttributeBufferNode";
    dword_2541214F8 = 0;
    xmmword_254121500 = 0u;
    unk_254121510 = 0u;
    xmmword_254121520 = 0u;
    qword_254121530 = 0;
    __cxa_guard_release(&qword_2541212D0);
  }
  return &qword_2541214C0;
}

void re::initInfo_RenderGraphCopyEntityAttributeBufferNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x8896AD266CD311DCLL;
  v18[1] = "RenderGraphCopyEntityAttributeBufferNode";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_2541212D8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541212D8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121328 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint64_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "sourceEntityId";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254121330 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "attributeName";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254121338 = v16;
      __cxa_guard_release(&qword_2541212D8);
    }
  }
  *((_QWORD *)this + 2) = 0x11800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254121328;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphCopyEntityAttributeBufferNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphCopyEntityAttributeBufferNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphCopyEntityAttributeBufferNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphCopyEntityAttributeBufferNode>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphCopyEntityAttributeBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED87348;
  *((_QWORD *)result + 32) = 0;
  *((_QWORD *)result + 33) = 0;
  *((_QWORD *)result + 34) = &str_110;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphCopyEntityAttributeBufferNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 264));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphCopyEntityAttributeBufferNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED87348;
  *((_QWORD *)result + 32) = 0;
  *((_QWORD *)result + 33) = 0;
  *((_QWORD *)result + 34) = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphCopyEntityAttributeBufferNode>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 264));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a1);
}

uint64_t re::introspect_RenderGraphCopyEntityAttributeBufferNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphCopyEntityAttributeBufferNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphCopyEntityAttributeBufferNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphCopyEntityAttributeBufferNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphCopyEntityAttributeBufferNode>, this);
}

uint64_t *re::allocInfo_RenderGraphSynchronizeTargetNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541212E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541212E0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121538, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254121548 = 0;
    qword_254121558 = 0;
    qword_254121560 = 0xFFFFFFFFLL;
    qword_254121538 = (uint64_t)&off_24ED7DAA8;
    qword_254121568 = (uint64_t)"RenderGraphSynchronizeTargetNode";
    dword_254121570 = 0;
    xmmword_254121578 = 0u;
    unk_254121588 = 0u;
    xmmword_254121598 = 0u;
    qword_2541215A8 = 0;
    __cxa_guard_release(&qword_2541212E0);
  }
  return &qword_254121538;
}

void re::initInfo_RenderGraphSynchronizeTargetNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x4E5165E59E70FC96;
  v18[1] = "RenderGraphSynchronizeTargetNode";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_2541212E8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541212E8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121340 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_size_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "slice";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254121348 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_size_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "level";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254121350 = v16;
      __cxa_guard_release(&qword_2541212E8);
    }
  }
  *((_QWORD *)this + 2) = 0x11000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254121340;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSynchronizeTargetNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSynchronizeTargetNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSynchronizeTargetNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSynchronizeTargetNode>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphSynchronizeTargetNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED873D8;
  *((_QWORD *)result + 32) = 0;
  *((_QWORD *)result + 33) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphSynchronizeTargetNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphSynchronizeTargetNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED873D8;
  *((_QWORD *)result + 32) = 0;
  *((_QWORD *)result + 33) = 0;
  return result;
}

uint64_t re::introspect_RenderGraphSynchronizeTargetNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphSynchronizeTargetNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphSynchronizeTargetNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphSynchronizeTargetNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphSynchronizeTargetNode>, this);
}

uint64_t *re::allocInfo_RenderGraphSynchronizeBufferNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541212F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541212F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541215B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541215C0 = 0;
    qword_2541215D0 = 0;
    qword_2541215D8 = 0xFFFFFFFFLL;
    qword_2541215B0 = (uint64_t)&off_24ED7DAA8;
    qword_2541215E0 = (uint64_t)"RenderGraphSynchronizeBufferNode";
    dword_2541215E8 = 0;
    xmmword_2541215F0 = 0u;
    unk_254121600 = 0u;
    xmmword_254121610 = 0u;
    qword_254121620 = 0;
    __cxa_guard_release(&qword_2541212F0);
  }
  return &qword_2541215B0;
}

void re::initInfo_RenderGraphSynchronizeBufferNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x4E4E22A447AD62F4;
  v10[1] = "RenderGraphSynchronizeBufferNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254121300);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121300);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541212F8 = v8;
      __cxa_guard_release(&qword_254121300);
    }
  }
  *((_QWORD *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541212F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSynchronizeBufferNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSynchronizeBufferNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSynchronizeBufferNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSynchronizeBufferNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphSynchronizeBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED87468;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphSynchronizeBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphSynchronizeBufferNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED87468;
  return result;
}

uint64_t re::introspect_RenderGraphSynchronizeBufferNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphSynchronizeBufferNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphSynchronizeBufferNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphSynchronizeBufferNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphSynchronizeBufferNode>, this);
}

uint64_t *re::allocInfo_RenderGraphFillBufferNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254121308);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254121308))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121628, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254121638 = 0;
    qword_254121648 = 0;
    qword_254121650 = 0xFFFFFFFFLL;
    qword_254121628 = (uint64_t)&off_24ED7DAA8;
    qword_254121658 = (uint64_t)"RenderGraphFillBufferNode";
    dword_254121660 = 0;
    xmmword_254121668 = 0u;
    unk_254121678 = 0u;
    xmmword_254121688 = 0u;
    qword_254121698 = 0;
    __cxa_guard_release(&qword_254121308);
  }
  return &qword_254121628;
}

void re::initInfo_RenderGraphFillBufferNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x5358828A65A95F3ALL;
  v14[1] = "RenderGraphFillBufferNode";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254121310);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121310);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121318 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint8_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "fillValue";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254121320 = v12;
      __cxa_guard_release(&qword_254121310);
    }
  }
  *((_QWORD *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254121318;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphFillBufferNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphFillBufferNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphFillBufferNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphFillBufferNode>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphFillBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED874F8;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphFillBufferNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphFillBufferNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED874F8;
  return result;
}

uint64_t re::introspect_RenderGraphFillBufferNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFillBufferNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphFillBufferNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphFillBufferNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphFillBufferNode>, this);
}

void re::RenderGraphGenerateMipmapsNode::~RenderGraphGenerateMipmapsNode(re::RenderGraphGenerateMipmapsNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphGenerateMipmapsNode::getGraphBuildValidationCode(re::RenderGraphGenerateMipmapsNode *this)
{
  return 0x215010105886826FLL;
}

void re::RenderGraphTargetCopyNode::~RenderGraphTargetCopyNode(re::RenderGraphTargetCopyNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphTargetCopyNode::getGraphBuildValidationCode(re::RenderGraphTargetCopyNode *this)
{
  return 0x7DE3B33C6D8885D1;
}

void re::RenderGraphCopyEntityAttributeBufferNode::~RenderGraphCopyEntityAttributeBufferNode(re::RenderGraphCopyEntityAttributeBufferNode *this)
{
  re::StringID::destroyString((re::RenderGraphCopyEntityAttributeBufferNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  re::StringID::destroyString((re::RenderGraphCopyEntityAttributeBufferNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphCopyEntityAttributeBufferNode::getGraphBuildValidationCode(re::RenderGraphCopyEntityAttributeBufferNode *this)
{
  return 0x66AC48B8EE54D601;
}

void re::RenderGraphSynchronizeTargetNode::~RenderGraphSynchronizeTargetNode(re::RenderGraphSynchronizeTargetNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphSynchronizeTargetNode::getGraphBuildValidationCode(re::RenderGraphSynchronizeTargetNode *this)
{
  return 0x5CA152EF2BBAE5C4;
}

void re::RenderGraphSynchronizeBufferNode::~RenderGraphSynchronizeBufferNode(re::RenderGraphSynchronizeBufferNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphSynchronizeBufferNode::getGraphBuildValidationCode(re::RenderGraphSynchronizeBufferNode *this)
{
  return 0x294FCB85553B53F5;
}

void re::RenderGraphFillBufferNode::~RenderGraphFillBufferNode(re::RenderGraphFillBufferNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphFillBufferNode::getGraphBuildValidationCode(re::RenderGraphFillBufferNode *this)
{
  return 0x226F56FC52D0A374;
}

void re::RenderGraphVisualProxyHighFidelityNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphVisualProxyHighFidelityNode::execute(const char **this, re::RenderGraphContext *a2)
{
  unsigned __int8 v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  id *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  re::RenderGraphVisualProxyHighFidelityNode *v17;
  const char *v18;
  int v19;
  id v20;
  _QWORD v21[3];
  _QWORD v22[3];
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_2541216A8);
  if ((v3 & 1) == 0)
  {
    v17 = (re::RenderGraphVisualProxyHighFidelityNode *)this;
    v19 = __cxa_guard_acquire(&qword_2541216A8);
    this = (const char **)v17;
    if (v19)
    {
      _MergedGlobals_472 = re::hashString(v17, v18);
      __cxa_guard_release(&qword_2541216A8);
      this = (const char **)v17;
    }
  }
  v4 = 0x9E3779B97F4A7C17;
  v5 = _MergedGlobals_472;
  v6 = this[4];
  v7 = strlen(v6);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)v6, v7, 0, &v23);
    v4 = ((v24 - 0x61C8864680B583E9 + (v23 << 6) + (v23 >> 2)) ^ v23) - 0x61C8864680B583E9;
  }
  v8 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>(*((_QWORD *)a2 + 146), ((v5 >> 2) + (v5 << 6) + v4) ^ v5);
  if (v8)
  {
    v9 = v8;
    if (*(_QWORD *)(v8 + 24))
    {
      re::RenderGraphContext::makeBlitCommandEncoder(a2, 0, &v20);
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        v11 = *(id **)(v9 + 40);
        v12 = &v11[2 * v10];
        do
        {
          v13 = objc_msgSend(*v11, sel_width);
          v14 = objc_msgSend(*v11, sel_height);
          objc_msgSend(v11[1], sel_width);
          objc_msgSend(v11[1], sel_height);
          v15 = *v11;
          v16 = v11[1];
          v11 += 2;
          v24 = 0;
          v25 = 0;
          v22[2] = 1;
          v23 = 0;
          v22[0] = v13;
          v22[1] = v14;
          memset(v21, 0, sizeof(v21));
          objc_msgSend(v20, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v15, 0, 0, &v23, v22, v16, 0, 0, v21);
        }
        while (v11 != v12);
      }
      re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)a2, &v20);

    }
  }
}

void re::RenderGraphVisualProxyHighFidelityNode::~RenderGraphVisualProxyHighFidelityNode(re::RenderGraphVisualProxyHighFidelityNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

re::RenderGraphMeshNode *re::RenderGraphMeshNode::RenderGraphMeshNode(re::RenderGraphMeshNode *this, const char *a2)
{
  re::RenderGraphNode *v3;
  _QWORD *v4;

  v3 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *((_DWORD *)v3 + 64) = 1;
  *(_QWORD *)v3 = &off_24ED876C0;
  v4 = (_QWORD *)((char *)v3 + 264);
  *(_OWORD *)((char *)v3 + 264) = 0u;
  *(_OWORD *)((char *)v3 + 280) = 0u;
  re::DynamicString::setCapacity(v4, 0);
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_DWORD *)this + 80) = 0;
  *((_WORD *)this + 168) = 2;
  *((_BYTE *)this + 338) = 0;
  return this;
}

void re::RenderGraphMeshNode::setup(re::RenderGraphMeshNode *this, _anonymous_namespace_ **a2, re::RenderGraphDataStore *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v6 = *((_QWORD *)this + 34);
  if ((v6 & 1) != 0)
    v7 = v6 >> 1;
  else
    v7 = v6 >> 1;
  if (!v7)
  {
    re::DynamicString::format((re::DynamicString *)"(%s): No material pass set", (re::DynamicString *)&v8, *((_QWORD *)this + 2));
    re::RenderGraphBuilder::addError(a2[82], (uint64_t)&v8);
    if (v8)
    {
      if ((v9 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v8 + 40))();
    }
  }
  re::RenderGraphNode::setup(this, (re::RenderGraphBuilder *)a2, a3);
}

uint64_t re::RenderGraphBuilder::addError(_anonymous_namespace_ *a1, uint64_t a2)
{
  __n128 v2;
  uint64_t result;
  __n128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4.n128_u64[0] = 2000;
  v4.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
  v5 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = re::DynamicArray<re::DetailedError>::add(a1, &v4);
  result = v5;
  if (v5)
  {
    if ((v6 & 1) != 0)
      return (*(uint64_t (**)(__n128))(*(_QWORD *)v5 + 40))(v2);
  }
  return result;
}

void re::RenderGraphMeshNode::execute(re::RenderGraphMeshNode *this, float32x4_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  const char *v14;
  uint64_t v15;
  _QWORD v16[2];
  char v17;
  _BYTE v18[2];
  unint64_t v19;
  char v20;
  int v21;
  _BYTE v22[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v22, 5030, 0);
  v4 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  v5 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)this + 264);
  v6 = re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  if (v6)
  {
    v19 = v5;
    v7 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(_QWORD *)(v6 + 8), (uint64_t *)&v19);
  }
  else
  {
    v7 = 0;
  }
  v8 = re::RenderGraphDataStore::tryGet<re::MeshNodeFilterData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFF00000000;
    v10 = *(_QWORD *)(v8 + 8);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
    v10 = 0;
    v9 = 0;
    if (!v7)
      goto LABEL_12;
  }
  v19 = v7;
  v20 = 0;
  v21 = 65280;
  v11 = v9 | v10;
  v12 = *((_BYTE *)this + 336);
  v18[0] = 0;
  v13 = *((_BYTE *)this + 337);
  if ((*((_BYTE *)this + 272) & 1) != 0)
    v14 = (const char *)*((_QWORD *)this + 35);
  else
    v14 = (char *)this + 273;
  v15 = *((_QWORD *)this + 39);
  v16[0] = *((_QWORD *)this + 41);
  v16[1] = v15;
  v17 = 0;
  re::RenderGraphMeshNodeBase::sortAndDrawMeshPartsInternal(this, a2, (uint64_t)&v19, (re::DrawTable *)1, v11, 0, v4, v12, v18, v13, v14, (uint64_t)v16, 0);
LABEL_12:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v22);
}

void re::RenderGraphMultiPassMeshNode::configure(re::RenderGraphMultiPassMeshNode *this, const char *a2, const char *a3, const char **a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  int v21;
  int v22;
  int *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  const char ***v29;
  uint64_t v30;
  _BYTE *v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  const char *v39;
  unsigned int v40;
  unsigned int v41;
  const re::IntrospectionBase *v42;
  const char *v43;
  const char *v44;
  re::RenderFrame *v45;
  re::RenderGraphMultiPassMeshNode *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  re::RenderGraphMultiPassMeshNode *v52;
  _BYTE *v53;
  unsigned int *v54;

  v8 = atomic_load((unsigned __int8 *)&qword_2541217A8);
  if ((v8 & 1) == 0)
    goto LABEL_70;
  while (1)
  {
    v49 = *((unsigned int *)this + 74);
    v44 = a3;
    v45 = (re::RenderFrame *)a4;
    v43 = a2;
    v9 = 0;
    if ((_DWORD)v49)
    {
      v10 = (int *)(*((_QWORD *)this + 35) + 8);
      while (1)
      {
        v11 = *v10;
        v10 += 56;
        if (v11 < 0)
          break;
        if (v49 == ++v9)
        {
          LODWORD(v9) = *((_DWORD *)this + 74);
          break;
        }
      }
    }
    if ((_DWORD)v49 == (_DWORD)v9)
      break;
    v12 = v9;
    v46 = this;
    while (1)
    {
      v13 = *((_QWORD *)this + 35);
      v47 = (_BYTE *)(v13 + 224 * v12 + 217);
      if (!*v47)
      {
        this = (re::RenderGraphMultiPassMeshNode *)*(unsigned int *)(v13 + 224 * v12 + 200);
        if ((_DWORD)this)
        {
          v14 = 0;
          v15 = (int *)(*(_QWORD *)(v13 + 224 * v12 + 184) + 8);
          while (1)
          {
            v16 = *v15;
            v15 += 14;
            if (v16 < 0)
              break;
            if (this == (re::RenderGraphMultiPassMeshNode *)++v14)
            {
              LODWORD(v14) = *(_DWORD *)(v13 + 224 * v12 + 200);
              break;
            }
          }
        }
        else
        {
          LODWORD(v14) = 0;
        }
        if ((_DWORD)this == (_DWORD)v14)
        {
LABEL_30:
          v51 = 0;
        }
        else
        {
          v17 = v14;
          v18 = *(_QWORD *)(v13 + 224 * v12 + 184);
          while (1)
          {
            v19 = (*(_BYTE *)(v18 + 56 * v17 + 24) & 1) != 0
                ? *(const char **)(v18 + 56 * v17 + 32)
                : (const char *)(v18 + 9 + 56 * v17 + 16);
            if (!strcmp("Default", v19))
              break;
            if (this <= (int)v14 + 1)
              v20 = v14 + 1;
            else
              v20 = (int)this;
            while (1)
            {
              v17 = (v14 + 1);
              if (v20 - 1 == (_DWORD)v14)
                break;
              LODWORD(v14) = v14 + 1;
              v21 = v17;
              if ((*(_DWORD *)(v18 + 56 * v17 + 8) & 0x80000000) != 0)
                goto LABEL_29;
            }
            v21 = v20;
LABEL_29:
            LODWORD(v14) = v21;
            if ((_DWORD)this == v21)
              goto LABEL_30;
          }
          v22 = 16843009 * *(unsigned __int8 *)(v18 + 56 * v17 + 48);
          v51 = 1;
          *v47 = 1;
          *(_DWORD *)(v13 + 224 * v12 + 218) = v22;
        }
        a3 = 0;
        if ((_DWORD)this)
        {
          v23 = (int *)(*(_QWORD *)(v13 + 224 * v12 + 184) + 8);
          while (1)
          {
            v24 = *v23;
            v23 += 14;
            if (v24 < 0)
              break;
            if (this == (re::RenderGraphMultiPassMeshNode *)++a3)
            {
              a3 = (const char *)this;
              break;
            }
          }
        }
        if ((_DWORD)this != (_DWORD)a3)
          break;
      }
LABEL_61:
      this = v46;
      v40 = *((_DWORD *)v46 + 74);
      if (v40 <= (int)v9 + 1)
        v40 = v9 + 1;
      while (1)
      {
        v12 = (v9 + 1);
        if (v40 - 1 == (_DWORD)v9)
          break;
        LODWORD(v9) = v9 + 1;
        v41 = v12;
        if ((*(_DWORD *)(*((_QWORD *)v46 + 35) + 224 * v12 + 8) & 0x80000000) != 0)
          goto LABEL_67;
      }
      v41 = v40;
LABEL_67:
      LODWORD(v9) = v41;
      if ((_DWORD)v49 == v41)
        goto LABEL_68;
    }
    v25 = a3;
    v26 = v13 + 224 * v12;
    v48 = v26 + 218;
    v27 = *(_QWORD *)(v26 + 184);
    v28 = (unsigned int *)qword_254121948;
    v50 = v51;
    v52 = this;
    while (1)
    {
      a2 = (const char *)*v28;
      if ((_DWORD)a2)
        break;
LABEL_53:
      if (this <= (int)a3 + 1)
        v38 = ((_DWORD)a3 + 1);
      else
        v38 = this;
      while (1)
      {
        v25 = ((_DWORD)a3 + 1);
        if ((_DWORD)v38 - 1 == (_DWORD)a3)
          break;
        LODWORD(a3) = (_DWORD)a3 + 1;
        v39 = (const char *)v25;
        if ((*(_DWORD *)(v27 + 56 * v25 + 8) & 0x80000000) != 0)
          goto LABEL_60;
      }
      v39 = (const char *)v38;
LABEL_60:
      a3 = v39;
      if ((_DWORD)this == (_DWORD)v39)
        goto LABEL_61;
    }
    v53 = (_BYTE *)(v27 + 56 * v25 + 48);
    v54 = v28;
    v29 = (const char ***)*((_QWORD *)v28 + 1);
    v30 = 56 * v25;
    v31 = (_BYTE *)(v27 + v30 + 24);
    v32 = (const char **)(v27 + v30 + 32);
    v33 = v27 + 9 + v30 + 16;
    while (1)
    {
      a4 = *v29;
      if (*(_DWORD *)*v29 == 1)
      {
        v34 = (const char *)v33;
        if ((*v31 & 1) != 0)
          v34 = *v32;
        if (!strcmp(a4[2], v34))
          break;
      }
      ++v29;
      if (!--a2)
      {
        LODWORD(this) = (_DWORD)v52;
        v28 = v54;
        goto LABEL_53;
      }
    }
    if (v50)
    {
      v36 = v51;
      this = v52;
    }
    else
    {
      v36 = 1;
      this = v52;
      if (!v51)
        *v47 = 1;
    }
    v37 = __clz(__rbit32(*((unsigned __int8 *)a4 + 8)));
    if (v37 < 4)
    {
      *(_BYTE *)(v48 + v37) = *v53;
      v28 = (unsigned int *)qword_254121948;
      v50 = 1;
      v51 = v36;
      goto LABEL_53;
    }
    re::internal::assertLog((re::internal *)6, v35, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v37, 4, v43, v44, v45);
    _os_crash();
    __break(1u);
LABEL_70:
    if (__cxa_guard_acquire(&qword_2541217A8))
    {
      re::introspect_MeshPassFilterFlags(0, v42);
      __cxa_guard_release(&qword_2541217A8);
    }
  }
LABEL_68:
  re::RenderGraphNode::configure(this, v43, v44, v45);
}

void re::RenderGraphMultiPassMeshNode::setup(re::RenderGraphMultiPassMeshNode *this, _anonymous_namespace_ **a2, re::RenderGraphDataStore *a3)
{
  uint64_t v6;
  char v7;

  if (!*((_DWORD *)this + 73))
  {
    re::DynamicString::format((re::DynamicString *)"(%s): No material passes", (re::DynamicString *)&v6, *((_QWORD *)this + 2));
    re::RenderGraphBuilder::addError(a2[82], (uint64_t)&v6);
    if (v6)
    {
      if ((v7 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v6 + 40))();
    }
  }
  re::RenderGraphNode::setup(this, (re::RenderGraphBuilder *)a2, a3);
}

void re::RenderGraphMultiPassMeshNode::execute(re::RenderGraphMultiPassMeshNode *this, float32x4_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  size_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;
  char *v15;
  char v16;
  uint64_t v17;
  char v18;
  char *v19;
  char v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned __int8 v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  char v40;
  _anonymous_namespace_ *v41;
  _anonymous_namespace_ *v42;
  uint64_t v43;
  int v44;
  int v45;
  re::DrawTable *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  re::DrawTable *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  const char *v59;
  uint64_t v60;
  double v61;
  const char *v62;
  re::MeshSortingCollection *v63;
  uint64_t v64;
  float32x4_t *v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71[2];
  char v72;
  char v73[2];
  _BYTE v74[16];
  uint64_t *v75;
  unint64_t v76;
  re::DrawTable *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v74, 5030, 0);
  v4 = *(uint64_t **)(a2->i64[0] + 24);
  v5 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  v68 = re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  if (v68)
  {
    v6 = 0x9E3779B97F4A7C17;
    v7 = *(const char **)(re::RenderGraphDataStore::get<re::SceneScope>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48))
                        + 8);
    v8 = strlen(v7);
    if (v8)
    {
      MurmurHash3_x64_128((uint64_t)v7, v8, 0, (unint64_t *)&v75);
      v6 = ((v76 - 0x61C8864680B583E9 + ((_QWORD)v75 << 6) + ((unint64_t)v75 >> 2)) ^ (unint64_t)v75)
         - 0x61C8864680B583E9;
    }
    v9 = atomic_load((unsigned __int8 *)&qword_2541216C0);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2541216C0))
    {
      qword_2541216B8 = re::hashString((re *)"RenderGraphDataPipeData", v62);
      __cxa_guard_release(&qword_2541216C0);
    }
    v10 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a2[73].i64[0], (v6 + (qword_2541216B8 << 6) + ((unint64_t)qword_2541216B8 >> 2)) ^ qword_2541216B8);
    if (v10 && (v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 8) + 984))(*(_QWORD *)(v10 + 8))) != 0)
    {
      if (*(_BYTE *)(v10 + 192))
        v11 = 3;
      else
        v11 = 1;
      v12 = v11 | (4 * (*(_DWORD *)(v10 + 172) != 0)) | (8 * *(_BYTE *)(v10 + 193));
    }
    else
    {
      v12 = 1;
    }
    v70 = v12;
    v13 = *((_QWORD *)this + 46);
    if (v13)
    {
      v14 = 0;
      v15 = (char *)*((_QWORD *)this + 48);
      do
      {
        v16 = *v15++;
        v14 |= v16;
        --v13;
      }
      while (v13);
    }
    else
    {
      v14 = 0;
    }
    v17 = *((_QWORD *)this + 51);
    v63 = (re::MeshSortingCollection *)v10;
    v18 = 0;
    if (v17)
    {
      v19 = (char *)*((_QWORD *)this + 53);
      do
      {
        v20 = *v19++;
        v18 |= v20;
        --v17;
      }
      while (v17);
    }
    v79 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v75 = v4;
    re::DynamicArray<re::FilteredMeshPass>::setCapacity(&v75, 0);
    ++v78;
    v22 = *((unsigned int *)this + 74);
    v64 = v5;
    v65 = a2;
    v23 = 0;
    if ((_DWORD)v22)
    {
      v24 = (int *)(*((_QWORD *)this + 35) + 8);
      while (1)
      {
        v25 = *v24;
        v24 += 56;
        if (v25 < 0)
          break;
        if (v22 == ++v23)
        {
          LODWORD(v23) = *((_DWORD *)this + 74);
          break;
        }
      }
    }
    v26 = v70;
    if ((_DWORD)v22 != (_DWORD)v23)
    {
      v27 = v23;
      v28 = v14;
      v69 = *((_DWORD *)this + 74);
      do
      {
        v29 = *((_QWORD *)this + 35);
        v30 = v29 + 224 * v27;
        v31 = *(_QWORD *)(v30 + 64);
        if (v31)
          v32 = 0;
        else
          v32 = v28 == 0;
        if (v32)
        {
          v33 = -1;
        }
        else
        {
          v33 = v14;
          if (v31)
          {
            v34 = *(char **)(v30 + 80);
            v33 = v14;
            do
            {
              v35 = *v34++;
              v33 |= v35;
              --v31;
            }
            while (v31);
          }
        }
        v36 = v29 + 224 * v27;
        v37 = *(_QWORD *)(v36 + 104);
        v38 = v18;
        if (v37)
        {
          v39 = *(char **)(v36 + 120);
          v38 = v18;
          do
          {
            v40 = *v39++;
            v38 |= v40;
            --v37;
          }
          while (v37);
        }
        if ((v33 & v26) != 0 && (v14 & v70) == v14)
        {
          v71[0] = re::Hash<re::DynamicString>::operator()((uint64_t)v71, v30 + 16);
          v41 = (_anonymous_namespace_ *)re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(_QWORD *)(v68 + 8), v71);
          if (v41)
          {
            v42 = v41;
            v43 = v29 + 224 * v27;
            v44 = *(unsigned __int8 *)(v43 + 217);
            LODWORD(v22) = v69;
            if (*(_BYTE *)(v43 + 217))
              v67 = *(_DWORD *)(v29 + 224 * v27 + 218);
            v45 = *(unsigned __int8 *)(v29 + 224 * v27 + 216);
            v46 = v77;
            if ((unint64_t)v77 >= v76)
            {
              v47 = (unint64_t)v77 + 1;
              if (v76 < (unint64_t)v77 + 1)
              {
                v66 = v44;
                if (v75)
                {
                  v48 = 2 * v76;
                  if (!v76)
                    v48 = 8;
                  if (v48 <= v47)
                    v49 = (unint64_t)v77 + 1;
                  else
                    v49 = v48;
                  re::DynamicArray<re::FilteredMeshPass>::setCapacity(&v75, v49);
                }
                else
                {
                  re::DynamicArray<re::FilteredMeshPass>::setCapacity(&v75, v47);
                  ++v78;
                }
                LODWORD(v22) = v69;
                v44 = v66;
              }
              v46 = v77;
            }
            v50 = v79;
            v51 = v79 + 24 * (_QWORD)v46;
            *(_QWORD *)v51 = v42;
            *(_BYTE *)(v51 + 8) = v44;
            if (v44)
              *(_DWORD *)(v50 + 24 * (_QWORD)v46 + 9) = v67;
            v28 = v14;
            v26 = v70;
            *(_DWORD *)(v50 + 24 * (_QWORD)v46 + 13) = v14 | (unsigned __int16)(v33 << 8) | ((v38 & v70) << 16) | (v45 << 24);
            v77 = (re::DrawTable *)((char *)v46 + 1);
            ++v78;
          }
          else
          {
            v26 = v70;
            LODWORD(v22) = v69;
            v28 = v14;
          }
        }
        v52 = *((_DWORD *)this + 74);
        if (v52 <= (int)v23 + 1)
          v52 = v23 + 1;
        while (1)
        {
          v27 = (v23 + 1);
          if (v52 - 1 == (_DWORD)v23)
            break;
          LODWORD(v23) = v23 + 1;
          v53 = v27;
          if ((*(_DWORD *)(*((_QWORD *)this + 35) + 224 * v27 + 8) & 0x80000000) != 0)
            goto LABEL_66;
        }
        v53 = v52;
LABEL_66:
        LODWORD(v23) = v53;
      }
      while ((_DWORD)v22 != v53);
    }
    v54 = v77;
    if (v77)
    {
      v55 = re::RenderGraphDataStore::tryGet<re::MeshNodeFilterData>(v65[73].i64[0], *(_QWORD *)(v65[2].i64[1] + 48));
      if (v55)
        v56 = *(_QWORD *)(v55 + 8);
      else
        v56 = 0;
      v57 = *((_BYTE *)this + 432);
      v73[0] = 0;
      v58 = *((_BYTE *)this + 433);
      v59 = (const char *)*((_QWORD *)this + 2);
      v60 = *((_QWORD *)this + 41);
      v71[0] = *((_QWORD *)this + 43);
      v71[1] = v60;
      v72 = *((_BYTE *)this + 434);
      re::RenderGraphMeshNodeBase::sortAndDrawMeshPartsInternal(this, v65, v79, v54, v56, 0, v64, v57, v73, v58, v59, (uint64_t)v71, 0);
      v21.n128_f64[0] = re::RenderGraphMeshNodeBase::drawDebugSortPoints(this, (const re::RenderGraphContext *)v65, v63, v61);
    }
    if (v75 && v79)
      (*(void (**)(uint64_t *, __n128))(*v75 + 40))(v75, v21);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v74);
}

re::RenderGraphMultiViewMeshNode *re::RenderGraphMultiViewMeshNode::RenderGraphMultiViewMeshNode(re::RenderGraphMultiViewMeshNode *this, const char *a2)
{
  re::RenderGraphNode *v3;
  _QWORD *v4;

  v3 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *((_DWORD *)v3 + 64) = 1;
  *(_QWORD *)v3 = &off_24ED876C0;
  v4 = (_QWORD *)((char *)v3 + 264);
  *(_OWORD *)((char *)v3 + 264) = 0u;
  *(_OWORD *)((char *)v3 + 280) = 0u;
  re::DynamicString::setCapacity(v4, 0);
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_DWORD *)this + 80) = 0;
  *((_WORD *)this + 168) = 2;
  *((_BYTE *)this + 338) = 0;
  *(_QWORD *)this = &off_24ED877E0;
  return this;
}

void re::RenderGraphMultiViewMeshNode::setup(re::RenderGraphMultiViewMeshNode *this, _anonymous_namespace_ **a2, re::RenderGraphDataStore *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v6 = *((_QWORD *)this + 34);
  if ((v6 & 1) != 0)
    v7 = v6 >> 1;
  else
    v7 = v6 >> 1;
  if (!v7)
  {
    re::DynamicString::format((re::DynamicString *)"(%s): No material pass set", (re::DynamicString *)&v8, *((_QWORD *)this + 2));
    re::RenderGraphBuilder::addError(a2[82], (uint64_t)&v8);
    if (v8)
    {
      if ((v9 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v8 + 40))();
    }
  }
  re::RenderGraphNode::setup(this, (re::RenderGraphBuilder *)a2, a3);
}

void re::RenderGraphMultiViewMeshNode::execute(re::RenderGraphMultiViewMeshNode *this, float32x4_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  const char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t *v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  char v50;
  _BYTE v51[2];
  uint64_t v52;
  char v53;
  int v54;
  _BYTE v55[16];
  uint64_t v56;
  int v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v55, 5097, 0);
  v43 = re::RenderGraphDataStore::get<re::CameraArrayData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  v44 = a2;
  v3 = a2[73].i64[0];
  v4 = *(_QWORD *)(a2[2].i64[1] + 48);
  v5 = (unint64_t)"N2re26MultiViewCullModeArrayDataE";
  if (((unint64_t)"N2re26MultiViewCullModeArrayDataE" & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)((unint64_t)"N2re26MultiViewCullModeArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  v9 = 0x7FFFFFFF;
  if (*(_QWORD *)(v3 + 64))
  {
    v10 = (v4 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
    v11 = *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (v10 % *(unsigned int *)(v3 + 88)));
    if (v11 != 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(v3 + 80);
      v9 = *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (v10 % *(unsigned int *)(v3 + 88)));
      if (*(_QWORD *)(v12 + 24 * v11 + 8) != v10)
      {
        while (1)
        {
          v9 = *(_DWORD *)(v12 + 24 * *(unsigned int *)(*(_QWORD *)(v3 + 72) + 4 * (v10 % *(unsigned int *)(v3 + 88)))) & 0x7FFFFFFF;
          if (v9 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v12 + 24 * v9 + 8) == v10)
            goto LABEL_11;
        }
        v9 = 0x7FFFFFFF;
      }
    }
  }
LABEL_11:
  v47 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + 24 * v9 + 16);
  v48 = re::RenderGraphDataStore::get<re::CameraMatricesArray>(v3, v4);
  v13 = re::RenderGraphDataStore::tryGet<re::MeshPassInfoArrayData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  v14 = a2[73].i64[0];
  v15 = *(_QWORD *)(a2[2].i64[1] + 48);
  v16 = (unint64_t)"N2re17ViewportArrayDataE";
  if (((unint64_t)"N2re17ViewportArrayDataE" & 0x8000000000000000) != 0)
  {
    v17 = (unsigned __int8 *)((unint64_t)"N2re17ViewportArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v18 = 5381;
    do
    {
      v16 = v18;
      v19 = *v17++;
      v18 = (33 * v18) ^ v19;
    }
    while (v19);
  }
  v20 = 0x7FFFFFFF;
  if (*(_QWORD *)(v14 + 64))
  {
    v21 = (v15 - 0x61C8864680B583E9 + (v16 << 6) + (v16 >> 2)) ^ v16;
    v22 = *(_DWORD *)(*(_QWORD *)(v14 + 72) + 4 * (v21 % *(unsigned int *)(v14 + 88)));
    if (v22 != 0x7FFFFFFF)
    {
      v23 = *(_QWORD *)(v14 + 80);
      v20 = *(_DWORD *)(*(_QWORD *)(v14 + 72) + 4 * (v21 % *(unsigned int *)(v14 + 88)));
      if (*(_QWORD *)(v23 + 24 * v22 + 8) != v21)
      {
        while (1)
        {
          v20 = *(_DWORD *)(v23
                          + 24 * *(unsigned int *)(*(_QWORD *)(v14 + 72) + 4 * (v21 % *(unsigned int *)(v14 + 88)))) & 0x7FFFFFFF;
          if (v20 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v23 + 24 * v20 + 8) == v21)
            goto LABEL_21;
        }
        v20 = 0x7FFFFFFF;
      }
    }
  }
LABEL_21:
  v24 = *(_QWORD *)(*(_QWORD *)(v14 + 80) + 24 * v20 + 16);
  v25 = re::RenderGraphDataStore::tryGet<re::MeshNodeFilterData>(v14, v15);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFF00000000;
    v27 = *(_QWORD *)(v25 + 8);
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v45 = re::Hash<re::DynamicString>::operator()((uint64_t)&v65, (uint64_t)this + 264);
  if (*(_QWORD *)(v48 + 24))
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v42 = v26 | v27;
    v32 = 473;
    while (1)
    {
      v33 = *(_QWORD *)(v47 + 16);
      if (v33 <= v31)
        break;
      v33 = *(_QWORD *)(v24 + 16);
      if (v33 <= v31)
        goto LABEL_40;
      if (v13)
      {
        v33 = *(_QWORD *)(v13 + 16);
        if (v33 <= v31)
          goto LABEL_41;
        v34 = *(_QWORD *)(v48 + 40);
        v26 = *(_QWORD *)(v47 + 24);
        v35 = *(_QWORD *)(v24 + 24);
        v36 = *(_QWORD *)(v13 + 24);
        *(_QWORD *)&v65 = v45;
        v37 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(_QWORD *)(v36 + 8 * v30 + 8), (uint64_t *)&v65);
        if (v37)
        {
          v52 = v37;
          v53 = 0;
          v54 = 65280;
          v38 = *((_BYTE *)this + 336);
          v51[0] = *(_BYTE *)(v26 + v30);
          if (v51[0])
            v51[1] = *(_BYTE *)(v26 + v30 + 1);
          v39 = (char *)this + 273;
          if ((*((_BYTE *)this + 272) & 1) != 0)
            v39 = (const char *)*((_QWORD *)this + 35);
          v40 = *((_BYTE *)this + 337);
          v41 = *((_QWORD *)this + 39);
          v49[0] = *((_QWORD *)this + 41);
          v49[1] = v41;
          v50 = 0;
          v26 = *(_QWORD *)(v43 + 16);
          if (v26 <= v31)
            goto LABEL_42;
          re::RenderGraphMeshNodeBase::sortAndDrawMeshPartsInternal(this, v44, (uint64_t)&v52, (re::DrawTable *)1, v42, v35 + v29, v34 + v28, v38, v51, v40, v39, (uint64_t)v49, *(_BYTE *)(*(_QWORD *)(v43 + 24) + v32));
        }
      }
      ++v31;
      v32 += 528;
      v30 += 2;
      v29 += 32;
      v28 += 144;
      if (*(_QWORD *)(v48 + 24) <= v31)
        goto LABEL_38;
    }
    v52 = 0;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v57 = 136315906;
    v58 = "operator[]";
    v59 = 1024;
    v60 = 476;
    v61 = 2048;
    v62 = v31;
    v63 = 2048;
    v64 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_40:
    v52 = 0;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v57 = 136315906;
    v58 = "operator[]";
    v59 = 1024;
    v60 = 476;
    v61 = 2048;
    v62 = v31;
    v63 = 2048;
    v64 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_41:
    v52 = 0;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v57 = 136315906;
    v58 = "operator[]";
    v59 = 1024;
    v60 = 476;
    v61 = 2048;
    v62 = v31;
    v63 = 2048;
    v64 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    v56 = 0;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v65 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v57 = 136315906;
    v58 = "operator[]";
    v59 = 1024;
    v60 = 476;
    v61 = 2048;
    v62 = v31;
    v63 = 2048;
    v64 = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_38:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v55);
}

void re::RenderGraphTextNode::execute(re::RenderGraphTextNode *this, re::RenderGraphContext *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  const char *v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re::TextManager *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  uint64_t *v30;
  re::TextManager *v31;
  __int128 v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  __int128 v42;
  char v43;
  _QWORD v44[2];
  _BYTE v45[16];
  uint64_t v46[4];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;

  v53 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45, 5032, 0);
  v3 = re::RenderGraphDataStore::get<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v4 = atomic_load((unsigned __int8 *)&qword_2541216D0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2541216D0))
  {
    qword_2541216C8 = re::hashString((re *)"TextInfo", v33);
    __cxa_guard_release(&qword_2541216D0);
  }
  v5 = qword_2541216C8;
  v6 = *(const char **)(v3 + 8);
  v7 = strlen(v6);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)v6, v7, 0, (unint64_t *)v46);
    v8 = ((v46[1] - 0x61C8864680B583E9 + (v46[0] << 6) + ((unint64_t)v46[0] >> 2)) ^ v46[0])
       - 0x61C8864680B583E9;
  }
  else
  {
    v8 = 0x9E3779B97F4A7C17;
  }
  v9 = ((v5 >> 2) + (v5 << 6) + v8) ^ v5;
  v10 = *((_QWORD *)a2 + 146);
  v11 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE" & 0x8000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v13 = 5381;
    do
    {
      v11 = v13;
      v14 = *v12++;
      v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  v46[0] = (v9 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  v15 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v10 + 16, v46);
  if (v15)
  {
    v16 = *v15;
    if (*v15)
    {
      v17 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
      re::RenderGraphContext::acquireManagedRenderEncoder(v44, a2, v17, 0);
      v34 = re::RenderGraphDataStore::get<re::CameraMatrices>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
      v39 = re::RenderGraphDataStore::tryGet<re::StencilInfoData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
      v18 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
      if (v18)
        v19 = *(_BYTE *)(v18 + 65) != 0;
      else
        v19 = 0;
      v35 = v16;
      v37 = *(_QWORD *)(v16 + 16);
      if (v37)
      {
        v36 = *(_QWORD *)(v37 + 40);
        if (v36)
        {
          v20 = 0;
          do
          {
            v38 = v20;
            v21 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v37, v20);
            v22 = *(_QWORD *)(v21 + 16);
            if (v22)
            {
              v23 = *(_QWORD *)(v21 + 32);
              v24 = v22 << 7;
              do
              {
                v25 = *(re::TextManager **)(*((_QWORD *)a2 + 1) + 72);
                re::RenderGraphContext::rtInfo(a2, *((re::RenderGraphNodeBase **)a2 + 5), (uint64_t)v46);
                if (v39)
                {
                  v26 = *(_OWORD *)(v39 + 8);
                  v43 = *(_BYTE *)(v39 + 24);
                  v42 = v26;
                }
                else
                {
                  *(_QWORD *)&v42 = 134217472;
                  *((_QWORD *)&v42 + 1) = 134217472;
                  v43 = 0;
                }
                *(_QWORD *)&v54 = v34 + 8;
                *((_QWORD *)&v54 + 1) = v34 + 48;
                re::TextManager::render(v25, (unsigned int *)v46, (uint64_t)&v42, (uint64_t)v44, *(_QWORD *)a2, v54, (_BYTE *)(v34 + 128), v23, v19, 1u);
                v23 += 128;
                v24 -= 128;
              }
              while (v24);
            }
            v20 = v38 + 1;
          }
          while (v38 + 1 != v36);
        }
      }
      v27 = *(_QWORD *)(v35 + 8);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 40);
        if (v28)
        {
          for (i = 0; i != v28; ++i)
          {
            v30 = (uint64_t *)re::BucketArray<unsigned long,4ul>::operator[](v27, i);
            re::StringID::invalid((re::StringID *)v46);
            v46[2] = 0x3F8000003F800000;
            v46[3] = 0x3F8000003F800000;
            v47 = 0u;
            v48 = 0u;
            v50 = 0u;
            v51 = 0u;
            v49 = 0u;
            v52 = *v30;
            v31 = *(re::TextManager **)(*((_QWORD *)a2 + 1) + 72);
            re::RenderGraphContext::rtInfo(a2, *((re::RenderGraphNodeBase **)a2 + 5), (uint64_t)&v42);
            if (v39)
            {
              v32 = *(_OWORD *)(v39 + 8);
              v41 = *(_BYTE *)(v39 + 24);
              v40 = v32;
            }
            else
            {
              *(_QWORD *)&v40 = 134217472;
              *((_QWORD *)&v40 + 1) = 134217472;
              v41 = 0;
            }
            *((_QWORD *)&v55 + 1) = v34 + 48;
            *(_QWORD *)&v55 = v34 + 8;
            re::TextManager::render(v31, (unsigned int *)&v42, (uint64_t)&v40, (uint64_t)v44, *(_QWORD *)a2, v55, (_BYTE *)(v34 + 128), (uint64_t)v46, v19, 1u);
            re::StringID::destroyString((re::StringID *)v46);
          }
        }
      }
      re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v44);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45);
}

#error "225C8156C: call analysis failed (funcsize=79)"

re::RenderGraphMaterialReplaceNode *re::RenderGraphMaterialReplaceNode::RenderGraphMaterialReplaceNode(re::RenderGraphMaterialReplaceNode *this, const char *a2)
{
  re::RenderGraphNode *v3;
  _QWORD *v4;
  _anonymous_namespace_ *v5;

  v3 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *((_DWORD *)v3 + 64) = 1;
  *(_QWORD *)v3 = &off_24ED87990;
  v4 = (_QWORD *)((char *)v3 + 296);
  *(_OWORD *)((char *)v3 + 264) = 0u;
  *(_OWORD *)((char *)v3 + 280) = 0u;
  *(_OWORD *)((char *)v3 + 296) = 0u;
  *(_OWORD *)((char *)v3 + 312) = 0u;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 41, 0);
  *((_WORD *)this + 180) = 2;
  return this;
}

void re::RenderGraphMaterialReplaceNode::configure(re::RenderGraphMaterialReplaceNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v8;

  v8 = re::AssetHandle::asset<re::MaterialAsset>((re::RenderGraphMaterialReplaceNode *)((char *)this + 272));
  *((_QWORD *)this + 33) = v8;
  if (v8)
    re::RenderGraphNode::configure(this, a2, a3, a4);
}

void re::RenderGraphMaterialReplaceNode::execute(re::RenderGraphMaterialReplaceNode *this, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  re::Allocator *v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v15;
  re::RenderGraphContext *v16;
  uint64_t v17;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _DWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  re::RenderGraphMaterialReplaceNode *v36;
  re::RenderGraphContext *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40[2];
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  __int128 v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54[2];
  _BYTE v55[16];
  uint64_t *v56;
  char v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v55, 5046, 0);
  v4 = *(_QWORD *)(*((_QWORD *)this + 33) + 1664);
  v5 = re::RenderGraphDataStore::get<re::CameraMatrices>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v59, (uint64_t)this + 296);
  v7 = (uint64_t *)re::RenderGraphDataStore::tryGet<re::MeshPassInfoData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
  if (v7)
  {
    *(_QWORD *)&v59 = v6;
    v7 = (uint64_t *)re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v7[1], (uint64_t *)&v59);
    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  v38 = v5;
  if (a2[83].i8[4])
  {
LABEL_49:
    v7 = (uint64_t *)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)&a2[83].u32[2], *((const char **)this + 2), "MaterialReplace");
    v39 = (uint64_t)v7;
    if (!v8)
      goto LABEL_47;
  }
  else
  {
    v39 = 0;
    if (!v8)
      goto LABEL_47;
  }
  v9 = *(re::Allocator **)(a2->i64[0] + 24);
  v56 = v8;
  v57 = 0;
  v58 = 65280;
  v54[0] = (uint64_t)&v56;
  v54[1] = 1;
  v63 = 0;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v64 = re::globalAllocators((re *)v7)[2];
  v65 = 0;
  v66 = 0;
  v67 = 0;
  if (v41 >= 2)
  {
    *(_QWORD *)&v61 = 0;
    *(_QWORD *)&v60 = 0;
    v59 = 0uLL;
    DWORD2(v60) = 0;
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(&v59, v41);
    if (v41)
    {
      v10 = 0;
      v11 = v43;
      v12 = (uint64_t *)((char *)v43 + 12 * v41);
      do
      {
        while (1)
        {
          v13 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[]((uint64_t)v8, *(unsigned int *)v11);
          if (!*(_WORD *)(v13 + 148) || *(_BYTE *)(v13 + 150) == 0)
            break;
          v11 = (uint64_t *)((char *)v11 + 12);
          v10 = 1;
          if (v11 == v12)
            goto LABEL_19;
        }
        re::DynamicArray<re::MeshLodLevelInfo>::add(&v59, v11);
        v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v12);
      if ((v10 & 1) == 0)
        goto LABEL_26;
LABEL_19:
      if (v40[0])
      {
        if ((_QWORD)v59)
          re::DynamicArray<re::MeshLodLevelInfo>::copy(v40, (uint64_t)&v59);
        else
          v41 = 0;
        LODWORD(v42) = v42 + 1;
      }
      else
      {
        if (!(_QWORD)v59)
          goto LABEL_29;
        v40[0] = (void *)v59;
        re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v40, v60);
        LODWORD(v42) = v42 + 1;
        re::DynamicArray<re::MeshLodLevelInfo>::copy(v40, (uint64_t)&v59);
      }
    }
LABEL_26:
    if ((_QWORD)v59 && (_QWORD)v61)
      (*(void (**)(_QWORD))(*(_QWORD *)v59 + 40))(v59);
  }
LABEL_29:
  v8 = (uint64_t *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 328, 8);
  re::DrawTable::DrawTable((re::DrawTable *)v8, v9, (v41 + 127) >> 7);
  re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(v54, (uint64_t)v43, v41, a2, (uint64_t)v8, v39);
  if (v40[0] && v43)
    (*(void (**)(void))(*(_QWORD *)v40[0] + 40))();
  v15 = re::Hash<re::DynamicString>::operator()((uint64_t)&v59, (uint64_t)this + 328);
  v16 = (re::RenderGraphContext *)v8[5];
  if (v16)
  {
    v17 = v15;
    v36 = this;
    v37 = (re::RenderGraphContext *)a2;
    a2 = 0;
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      this = (re::RenderGraphMaterialReplaceNode *)re::BucketArray<re::DrawCall,128ul>::operator[]((uint64_t)v8, (unint64_t)a2);
      if (re::MaterialParameterTableLayers::getPrioritizedPassTechniqueMapping(*((re::MaterialParameterTableLayers **)this + 8), v6))
      {
        v22 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 224, 16);
        *(_OWORD *)(v22 + 144) = 0u;
        *(_OWORD *)(v22 + 192) = 0u;
        *(_OWORD *)(v22 + 208) = 0u;
        *(_OWORD *)(v22 + 160) = 0u;
        *(_OWORD *)(v22 + 176) = 0u;
        *(_OWORD *)(v22 + 112) = 0u;
        *(_OWORD *)(v22 + 128) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        *(_OWORD *)(v22 + 48) = 0u;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 16) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)v22 = 0u;
        *(_QWORD *)(v22 + 152) = _D8;
        *(_DWORD *)(v22 + 160) = 1065353216;
        v23 = (__int128 *)*((_QWORD *)this + 8);
        v24 = *v23;
        v25 = v23[1];
        v26 = v23[3];
        *(_OWORD *)(v22 + 32) = v23[2];
        *(_OWORD *)(v22 + 48) = v26;
        *(_OWORD *)v22 = v24;
        *(_OWORD *)(v22 + 16) = v25;
        v28 = v23[5];
        v27 = v23[6];
        v29 = v23[4];
        *(_OWORD *)(v22 + 108) = *(__int128 *)((char *)v23 + 108);
        *(_OWORD *)(v22 + 80) = v28;
        *(_OWORD *)(v22 + 96) = v27;
        *(_OWORD *)(v22 + 64) = v29;
        if (*((_BYTE *)v23 + 128))
        {
          *(_BYTE *)(v22 + 128) = 1;
          *(_QWORD *)(v22 + 136) = *((_QWORD *)v23 + 17);
        }
        v30 = v23[9];
        *(_QWORD *)(v22 + 157) = *(_QWORD *)((char *)v23 + 157);
        *(_OWORD *)(v22 + 144) = v30;
        if (*((_BYTE *)v23 + 176))
        {
          *(_BYTE *)(v22 + 176) = 1;
          v31 = v23[13];
          *(_OWORD *)(v22 + 192) = v23[12];
          *(_OWORD *)(v22 + 208) = v31;
        }
        *(_QWORD *)(v22 + 40) = v4;
        *((_QWORD *)this + 8) = v22;
        v32 = re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v22, v17);
        if (!v33)
        {
          re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
          _os_crash();
          __break(1u);
          goto LABEL_49;
        }
        *((_DWORD *)this + 11) = *v32;
      }
      a2 = (float32x4_t *)((char *)a2 + 1);
    }
    while (v16 != (re::RenderGraphContext *)a2);
    if (v8[5])
    {
      re::DrawTableSlice::DrawTableSlice(&v59, (uint64_t)v8);
      if ((*((_BYTE *)v36 + 336) & 1) != 0)
        v34 = (void *)*((_QWORD *)v36 + 43);
      else
        v34 = (char *)v36 + 337;
      v40[0] = v34;
      v40[1] = &v59;
      v35 = *(_QWORD *)(v38 + 80);
      v41 = *(_QWORD *)(v38 + 40);
      v42 = v35;
      v43 = 0;
      v44 = *(_BYTE *)(v38 + 128);
      v45 = *((_BYTE *)v36 + 360);
      v46 = 0;
      v47 = *((_BYTE *)v36 + 361);
      v48 = 0;
      v49 = 0u;
      v50 = 0u;
      v51 = 0;
      v52 = v39;
      v53 = 0;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(v37, (uint64_t *)&v56);
      re::RenderGraphContext::encodeDrawCalls(v37, &v56, v40);
    }
  }
LABEL_47:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v55);
}

uint64_t *re::allocInfo_RenderGraphMeshNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541216D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541216D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121A40, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254121A50 = 0;
    qword_254121A60 = 0;
    qword_254121A68 = 0xFFFFFFFFLL;
    qword_254121A40 = (uint64_t)&off_24ED7DAA8;
    qword_254121A70 = (uint64_t)"RenderGraphMeshNode";
    dword_254121A78 = 0;
    xmmword_254121A80 = 0u;
    unk_254121A90 = 0u;
    xmmword_254121AA0 = 0u;
    qword_254121AB0 = 0;
    __cxa_guard_release(&qword_2541216D8);
  }
  return &qword_254121A40;
}

void re::initInfo_RenderGraphMeshNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[2];
  __int128 v33;

  v32[0] = 0x11A172C87C45D5CELL;
  v32[1] = "RenderGraphMeshNode";
  re::StringID::destroyString((re::StringID *)v32);
  *((_OWORD *)this + 2) = v33;
  v4 = atomic_load((unsigned __int8 *)&qword_2541216E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541216E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121850 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "materialPassName";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254121858 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::DynamicArray<re::TechniqueTagFilter>>::get();
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "excludedTechniqueTags";
      *(_QWORD *)(v14 + 16) = &qword_254121888;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x12800000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254121860 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::mtl::introspect_CullMode((re::mtl *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "cullMode";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x15000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254121868 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::mtl::introspect_TriangleFillMode((re::mtl *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "fillMode";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x15100000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_254121870 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_BOOL((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "useSubFrustums";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x15200000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254121878 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_MeshSortMode((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "sortMode";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x10000000006;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254121880 = v30;
      __cxa_guard_release(&qword_2541216E0);
    }
  }
  *((_QWORD *)this + 2) = 0x15800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254121850;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMeshNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMeshNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMeshNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMeshNode>;
  re::IntrospectionRegistry::add(this, v3);
  v31 = v33;
}

void re::IntrospectionInfo<re::DynamicArray<re::TechniqueTagFilter>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24[2];
  __int128 v25;
  const char *v26;
  __int128 v27;

  v0 = atomic_load((unsigned __int8 *)&qword_2541217B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541217B0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254121888);
    qword_254121888 = (uint64_t)&off_24ED87AB0;
    __cxa_guard_release(&qword_2541217B0);
  }
  if ((byte_2541216B1 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2541217A0;
    if (qword_2541217A0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254121790);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254121790))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121E00, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254121E10 = 0;
      *(_QWORD *)&xmmword_254121E20 = 0;
      *((_QWORD *)&xmmword_254121E20 + 1) = 0xFFFFFFFFLL;
      qword_254121E00 = (uint64_t)&off_24ED7DAA8;
      qword_254121E30 = (uint64_t)"TechniqueTagFilter";
      dword_254121E38 = 0;
      xmmword_254121E40 = 0u;
      xmmword_254121E50 = 0u;
      xmmword_254121E60 = 0u;
      qword_254121E70 = 0;
      __cxa_guard_release(&qword_254121790);
    }
    qword_2541217A0 = (uint64_t)&qword_254121E00;
    *(_QWORD *)&v27 = 0x3F8C2D11870B6C4;
    *((_QWORD *)&v27 + 1) = "TechniqueTagFilter";
    re::StringID::destroyString((re::StringID *)&v27);
    xmmword_254121E20 = v25;
    v4 = atomic_load((unsigned __int8 *)&qword_254121798);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254121798);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2541217D0 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "value";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_2541217D8 = v21;
        __cxa_guard_release(&qword_254121798);
      }
    }
    qword_254121E10 = 0x2000000008;
    v1 = &qword_254121E00;
    dword_254121E18 = 8;
    word_254121E1C = 0;
    dword_254121E38 = 2;
    *(_QWORD *)&xmmword_254121E40 = &qword_2541217D0;
    *((_QWORD *)&xmmword_254121E40 + 1) = re::internal::defaultConstruct<re::TechniqueTagFilter>;
    *(_QWORD *)&xmmword_254121E50 = re::internal::defaultDestruct<re::TechniqueTagFilter>;
    *(_QWORD *)&xmmword_254121E60 = 0;
    *((_QWORD *)&xmmword_254121E50 + 1) = 0;
    *((_QWORD *)&xmmword_254121E60 + 1) = re::internal::defaultConstructV2<re::TechniqueTagFilter>;
    qword_254121E70 = (uint64_t)re::internal::defaultDestructV2<re::TechniqueTagFilter>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254121E00, v3);
    v27 = v25;
    if ((byte_2541216B1 & 1) == 0)
    {
LABEL_7:
      byte_2541216B1 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121888, 0);
      qword_254121898 = 0x2800000003;
      dword_2541218A0 = v5;
      word_2541218A4 = 0;
      *(_QWORD *)&xmmword_2541218A8 = 0;
      *((_QWORD *)&xmmword_2541218A8 + 1) = 0xFFFFFFFFLL;
      qword_2541218B8 = (uint64_t)v1;
      qword_2541218C0 = 0;
      qword_254121888 = (uint64_t)&off_24ED87AB0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254121888, (const re::IntrospectionBase *)&v25);
      if ((BYTE8(v25) & 1) != 0)
        v8 = v26;
      else
        v8 = (char *)&v25 + 9;
      if ((_QWORD)v25 && (BYTE8(v25) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
      v23 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v24);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v22 + 1) = v10;
      }
      else
      {
        v27 = v23;
        re::TypeBuilder::beginListType((uint64_t)&v25, v24, 1, 0x28uLL, 8uLL, &v27);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v25, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v25, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v11);
      }
      xmmword_2541218A8 = v22;
      re::StringID::destroyString((re::StringID *)v24);
    }
  }
}

_QWORD *re::internal::defaultConstruct<re::RenderGraphMeshNode>(int a1, int a2, re::RenderGraphNode *this)
{
  _anonymous_namespace_ *v4;
  _QWORD *result;

  v4 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)this + 64) = 1;
  *(_QWORD *)this = &off_24ED876C0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)this + 33, 0);
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_DWORD *)this + 80) = 0;
  *((_WORD *)this + 168) = 2;
  *((_BYTE *)this + 338) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphMeshNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::RenderGraphMeshNode>(uint64_t a1)
{
  re::RenderGraphNode *v2;
  _QWORD *v3;
  _QWORD *result;

  v2 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)a1);
  *((_DWORD *)v2 + 64) = 1;
  *(_QWORD *)v2 = &off_24ED876C0;
  v3 = (_QWORD *)((char *)v2 + 264);
  *(_OWORD *)((char *)v2 + 264) = 0u;
  *(_OWORD *)((char *)v2 + 280) = 0u;
  result = re::DynamicString::setCapacity(v3, 0);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_WORD *)(a1 + 336) = 2;
  *(_BYTE *)(a1 + 338) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphMeshNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphMeshNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMeshNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMeshNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMeshNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMeshNode>, this);
}

uint64_t *re::allocInfo_RenderGraphMultiPassMeshNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541216E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541216E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121AB8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254121AC8 = 0;
    qword_254121AD8 = 0;
    qword_254121AE0 = 0xFFFFFFFFLL;
    qword_254121AB8 = (uint64_t)&off_24ED7DAA8;
    qword_254121AE8 = (uint64_t)"RenderGraphMultiPassMeshNode";
    dword_254121AF0 = 0;
    xmmword_254121AF8 = 0u;
    xmmword_254121B08 = 0u;
    xmmword_254121B18 = 0u;
    qword_254121B28 = 0;
    __cxa_guard_release(&qword_2541216E8);
  }
  return &qword_254121AB8;
}

void re::initInfo_RenderGraphMultiPassMeshNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  __int128 v40;
  _QWORD v41[2];
  __int128 v42;

  v41[0] = 0x5BAAD2E756B69C82;
  v41[1] = "RenderGraphMultiPassMeshNode";
  re::StringID::destroyString((re::StringID *)v41);
  *((_OWORD *)this + 2) = v42;
  v4 = atomic_load((unsigned __int8 *)&qword_2541216F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541216F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121950 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "materialPasses";
      *(_QWORD *)(v11 + 16) = &qword_2541219A0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x10800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254121958 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::DynamicArray<re::TechniqueTagFilter>>::get();
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "excludedTechniqueTags";
      *(_QWORD *)(v13 + 16) = &qword_254121888;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x13800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254121960 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::mtl::introspect_CullMode((re::mtl *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "cullMode";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x1B000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254121968 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::mtl::introspect_TriangleFillMode((re::mtl *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "fillMode";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x1B100000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254121970 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_BOOL((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "useSubFrustums";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x1B400000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254121978 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_MeshSortMode((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "sortMode";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x10000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254121980 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_uint16_t((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "fadeGroupRenderPassOrder";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1B20000000ALL;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254121988 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v34, v35);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "globalRequiredFilters";
      *(_QWORD *)(v36 + 16) = &qword_2541218C8;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x1600000000CLL;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254121990 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "globalExcludedFilters";
      *(_QWORD *)(v39 + 16) = &qword_2541218C8;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x1880000000DLL;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_254121998 = v39;
      __cxa_guard_release(&qword_2541216F0);
    }
  }
  *((_QWORD *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((_QWORD *)this + 8) = &qword_254121950;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMultiPassMeshNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMultiPassMeshNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMultiPassMeshNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMultiPassMeshNode>;
  re::IntrospectionRegistry::add(this, v3);
  v40 = v42;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  _OWORD *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  const re::IntrospectionBase *v7;
  unsigned __int8 v8;
  int v9;
  re::IntrospectionRegistry *v10;
  const re::IntrospectionBase *v11;
  const char *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  uint64_t v22;
  re *v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t (*v39)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  const char *v49;
  _QWORD v50[2];
  __int128 v51;
  __int128 v52;
  uint64_t *v53;

  v2 = atomic_load((unsigned __int8 *)&qword_2541217B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541217B8))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2541219A0);
    qword_2541219A0 = (uint64_t)&off_24ED87B48;
    __cxa_guard_release(&qword_2541217B8);
  }
  v3 = &qword_254121000;
  if ((byte_2541216B2 & 1) == 0)
  {
    v4 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = (uint64_t *)qword_254121788;
    if (!qword_254121788)
    {
      v6 = atomic_load((unsigned __int8 *)&qword_254121778);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254121778))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121D88, 0);
        *(_QWORD *)(v22 + 22) = 0;
        qword_254121D98 = 0;
        *(_QWORD *)&xmmword_254121DA8 = 0;
        *((_QWORD *)&xmmword_254121DA8 + 1) = 0xFFFFFFFFLL;
        qword_254121D88 = (uint64_t)&off_24ED7DAA8;
        qword_254121DB8 = (uint64_t)"MeshPassFilters";
        dword_254121DC0 = 0;
        xmmword_254121DC8 = 0u;
        xmmword_254121DD8 = 0u;
        xmmword_254121DE8 = 0u;
        qword_254121DF8 = 0;
        __cxa_guard_release(&qword_254121778);
      }
      qword_254121788 = (uint64_t)&qword_254121D88;
      *(_QWORD *)&v52 = 0xBC5389F7EA012CBALL;
      *((_QWORD *)&v52 + 1) = "MeshPassFilters";
      re::StringID::destroyString((re::StringID *)&v52);
      xmmword_254121DA8 = v48;
      v8 = atomic_load((unsigned __int8 *)&qword_254121780);
      if ((v8 & 1) == 0)
      {
        v23 = (re *)__cxa_guard_acquire(&qword_254121780);
        if ((_DWORD)v23)
        {
          v24 = re::introspectionAllocator(v23);
          re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v24, v25);
          v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
          *(_DWORD *)v26 = 1;
          *(_QWORD *)(v26 + 8) = "included";
          *(_QWORD *)(v26 + 16) = &qword_2541218C8;
          *(_QWORD *)(v26 + 24) = 0;
          *(_QWORD *)(v26 + 32) = 1;
          *(_DWORD *)(v26 + 40) = 0;
          *(_QWORD *)(v26 + 48) = 0;
          *(_QWORD *)(v26 + 56) = 0;
          *(_DWORD *)(v26 + 64) = 0;
          qword_254121828 = v26;
          v27 = re::introspectionAllocator((re *)v26);
          re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v27, v28);
          v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
          *(_DWORD *)v29 = 1;
          *(_QWORD *)(v29 + 8) = "excluded";
          *(_QWORD *)(v29 + 16) = &qword_2541218C8;
          *(_QWORD *)(v29 + 24) = 0;
          *(_QWORD *)(v29 + 32) = 0x2800000002;
          *(_DWORD *)(v29 + 40) = 0;
          *(_QWORD *)(v29 + 48) = 0;
          *(_QWORD *)(v29 + 56) = 0;
          *(_DWORD *)(v29 + 64) = 0;
          qword_254121830 = v29;
          v30 = re::introspectionAllocator((re *)v29);
          re::IntrospectionInfo<re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v30, v31);
          v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
          *(_DWORD *)v32 = 1;
          *(_QWORD *)(v32 + 8) = "renderPassGroupOrder";
          *(_QWORD *)(v32 + 16) = &qword_2541219F0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = 0x7800000004;
          *(_DWORD *)(v32 + 40) = 0;
          *(_QWORD *)(v32 + 48) = 0;
          *(_QWORD *)(v32 + 56) = 0;
          *(_DWORD *)(v32 + 64) = 0;
          qword_254121838 = v32;
          v33 = re::introspectionAllocator((re *)v32);
          re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get((uint64_t)v33, v34);
          v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
          *(_DWORD *)v35 = 1;
          *(_QWORD *)(v35 + 8) = "required";
          *(_QWORD *)(v35 + 16) = &qword_2541218C8;
          *(_QWORD *)(v35 + 24) = 0;
          *(_QWORD *)(v35 + 32) = 0x5000000005;
          *(_DWORD *)(v35 + 40) = 0;
          *(_QWORD *)(v35 + 48) = 0;
          *(_QWORD *)(v35 + 56) = 0;
          *(_DWORD *)(v35 + 64) = 0;
          qword_254121840 = v35;
          v36 = re::introspectionAllocator((re *)v35);
          v38 = re::introspect_BOOL((re *)1, v37);
          v39 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32);
          v40 = v36;
          v3 = &qword_254121000;
          v41 = v39(v40, 72, 8);
          *(_DWORD *)v41 = 1;
          *(_QWORD *)(v41 + 8) = "overrideDepthBiasPriorityWithRenderPassOrder";
          *(_QWORD *)(v41 + 16) = v38;
          *(_QWORD *)(v41 + 24) = 0;
          *(_QWORD *)(v41 + 32) = 0xA800000006;
          *(_DWORD *)(v41 + 40) = 0;
          *(_QWORD *)(v41 + 48) = 0;
          *(_QWORD *)(v41 + 56) = 0;
          *(_DWORD *)(v41 + 64) = 0;
          qword_254121848 = v41;
          __cxa_guard_release(&qword_254121780);
        }
      }
      qword_254121D98 = 0xB000000008;
      v5 = &qword_254121D88;
      dword_254121DA0 = 8;
      word_254121DA4 = 0;
      dword_254121DC0 = 5;
      *(_QWORD *)&xmmword_254121DC8 = &qword_254121828;
      *((_QWORD *)&xmmword_254121DC8 + 1) = re::internal::defaultConstruct<re::MeshPassFilters>;
      *(_QWORD *)&xmmword_254121DD8 = re::internal::defaultDestruct<re::MeshPassFilters>;
      *(_QWORD *)&xmmword_254121DE8 = 0;
      *((_QWORD *)&xmmword_254121DD8 + 1) = 0;
      *((_QWORD *)&xmmword_254121DE8 + 1) = re::internal::defaultConstructV2<re::MeshPassFilters>;
      qword_254121DF8 = (uint64_t)re::internal::defaultDestructV2<re::MeshPassFilters>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254121D88, v7);
      v52 = v48;
    }
    if ((*((_BYTE *)v3 + 1714) & 1) == 0)
    {
      byte_2541216B2 = 1;
      v9 = *((_DWORD *)v5 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541219A0, 0);
      qword_2541219B0 = 0x3000000007;
      dword_2541219B8 = v9;
      word_2541219BC = 0;
      *(_QWORD *)&xmmword_2541219C0 = 0;
      *((_QWORD *)&xmmword_2541219C0 + 1) = 0xFFFFFFFFLL;
      qword_2541219D0 = (uint64_t)v4;
      qword_2541219D8 = 0;
      qword_2541219E0 = (uint64_t)v5;
      qword_2541219E8 = 0;
      qword_2541219A0 = (uint64_t)&off_24ED87B48;
      re::IntrospectionRegistry::add(v10, v11);
      re::getPrettyTypeName((re *)&qword_2541219A0, (const re::IntrospectionBase *)&v48);
      if ((BYTE8(v48) & 1) != 0)
        v12 = v49;
      else
        v12 = (char *)&v48 + 9;
      if ((_QWORD)v48 && (BYTE8(v48) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v48 + 40))();
      v13 = v4[2];
      v43 = *((_OWORD *)v5 + 2);
      v44 = v13;
      v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v45);
      if (v14)
      {
        v15 = *v14;
        *((_QWORD *)&v42 + 1) = v15;
      }
      else
      {
        *(_QWORD *)&v48 = 0x449AD97C4B77BED4;
        *((_QWORD *)&v48 + 1) = "_CompareFunc";
        v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v48);
        if (v16)
        {
          v17 = *v16;
          re::StringID::destroyString((re::StringID *)&v48);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v48);
          *(_QWORD *)&v52 = 0x449AD97C4B77BED4;
          *((_QWORD *)&v52 + 1) = "_CompareFunc";
          v17 = *((_QWORD *)&v48 + 1);
          v18 = (void *)v48;
          re::StringID::destroyString((re::StringID *)&v52);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v52, (uint64_t)&v48 + 8);
        if (!v18
          || (v19 = *v53,
              *(_QWORD *)&v48 = v17,
              *((_QWORD *)&v48 + 1) = v19,
              LODWORD(v49) = -1,
              (v20 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v52 + 768, (uint64_t *)&v48)) == 0)|| !*(_QWORD *)v20)
        {
          v51 = v44;
          v50[0] = v18;
          v50[1] = v17;
        }
        v46 = v43;
        v47 = v44;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v48, v45, 1, 0x30uLL, 8uLL, &v47, &v46);
        re::TypeBuilder::setConstructor((uint64_t)&v48, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v48, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v48, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v48, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v48, v21);
      }
      xmmword_2541219C0 = v42;
      re::StringID::destroyString((re::StringID *)v45);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshPassFilterFlags>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v2 = atomic_load((unsigned __int8 *)&qword_2541217C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541217C0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541218C8);
    qword_2541218C8 = (uint64_t)&off_24ED87BE8;
    __cxa_guard_release(&qword_2541217C0);
  }
  if ((byte_2541216B3 & 1) == 0)
  {
    re::introspect_MeshPassFilterFlags((re *)1, a2);
    if ((byte_2541216B3 & 1) == 0)
    {
      byte_2541216B3 = 1;
      v3 = dword_254121920;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541218C8, 0);
      qword_2541218D8 = 0x2800000003;
      dword_2541218E0 = v3;
      word_2541218E4 = 0;
      *(_QWORD *)&xmmword_2541218E8 = 0;
      *((_QWORD *)&xmmword_2541218E8 + 1) = 0xFFFFFFFFLL;
      qword_2541218F8 = (uint64_t)&qword_254121908;
      qword_254121900 = 0;
      qword_2541218C8 = (uint64_t)&off_24ED87BE8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2541218C8, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = xmmword_254121928;
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2541218E8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::RenderGraphMultiPassMeshNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)v3 + 64) = 1;
  *(_QWORD *)v3 = &off_24ED87750;
  result = 0.0;
  *(_OWORD *)((char *)v3 + 264) = 0u;
  *(_OWORD *)((char *)v3 + 280) = 0u;
  *((_DWORD *)v3 + 74) = 0;
  *(_QWORD *)((char *)v3 + 300) = 0x7FFFFFFFLL;
  *((_QWORD *)v3 + 40) = 0;
  *((_QWORD *)v3 + 41) = 0;
  *((_QWORD *)v3 + 39) = 0;
  *((_DWORD *)v3 + 84) = 0;
  *((_QWORD *)v3 + 53) = 0;
  *(_OWORD *)((char *)v3 + 344) = 0u;
  *(_OWORD *)((char *)v3 + 360) = 0u;
  *((_DWORD *)v3 + 94) = 0;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  *((_DWORD *)v3 + 104) = 0;
  *((_BYTE *)v3 + 432) = 2;
  *((_BYTE *)v3 + 437) = 0;
  *(_DWORD *)((char *)v3 + 433) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphMultiPassMeshNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphMultiPassMeshNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)v1 + 64) = 1;
  *(_QWORD *)v1 = &off_24ED87750;
  result = 0.0;
  *(_OWORD *)((char *)v1 + 264) = 0u;
  *(_OWORD *)((char *)v1 + 280) = 0u;
  *((_DWORD *)v1 + 74) = 0;
  *(_QWORD *)((char *)v1 + 300) = 0x7FFFFFFFLL;
  *((_QWORD *)v1 + 40) = 0;
  *((_QWORD *)v1 + 41) = 0;
  *((_QWORD *)v1 + 39) = 0;
  *((_DWORD *)v1 + 84) = 0;
  *((_QWORD *)v1 + 53) = 0;
  *(_OWORD *)((char *)v1 + 344) = 0u;
  *(_OWORD *)((char *)v1 + 360) = 0u;
  *((_DWORD *)v1 + 94) = 0;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_DWORD *)v1 + 104) = 0;
  *((_BYTE *)v1 + 432) = 2;
  *((_BYTE *)v1 + 437) = 0;
  *(_DWORD *)((char *)v1 + 433) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphMultiPassMeshNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphMultiPassMeshNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMultiPassMeshNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMultiPassMeshNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMultiPassMeshNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMultiPassMeshNode>, this);
}

uint64_t *re::allocInfo_RenderGraphMultiViewMeshNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541216F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541216F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121B30, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254121B40 = 0;
    qword_254121B50 = 0;
    qword_254121B58 = 0xFFFFFFFFLL;
    qword_254121B30 = (uint64_t)&off_24ED7DAA8;
    qword_254121B60 = (uint64_t)"RenderGraphMultiViewMeshNode";
    dword_254121B68 = 0;
    xmmword_254121B70 = 0u;
    xmmword_254121B80 = 0u;
    xmmword_254121B90 = 0u;
    qword_254121BA0 = 0;
    __cxa_guard_release(&qword_2541216F8);
  }
  return &qword_254121B30;
}

void re::initInfo_RenderGraphMultiViewMeshNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x60120976EB70A1AALL;
  v12[1] = "RenderGraphMultiViewMeshNode";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254121708);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121708);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::RenderGraphMeshNode>;
      if (!re::internal::introspectionInfoStorage<re::RenderGraphMeshNode>)
      {
        v8 = re::allocInfo_RenderGraphMeshNode((re *)v6);
        re::internal::introspectionInfoStorage<re::RenderGraphMeshNode> = (uint64_t)v8;
        re::initInfo_RenderGraphMeshNode((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "RenderGraphMeshNode";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254121700 = v10;
      __cxa_guard_release(&qword_254121708);
    }
  }
  *((_QWORD *)this + 2) = 0x15800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254121700;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMultiViewMeshNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMultiViewMeshNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMultiViewMeshNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMultiViewMeshNode>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

re::RenderGraphMultiViewMeshNode *re::internal::defaultConstruct<re::RenderGraphMultiViewMeshNode>(int a1, int a2, re::RenderGraphMultiViewMeshNode *this)
{
  return re::RenderGraphMultiViewMeshNode::RenderGraphMultiViewMeshNode(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphMultiViewMeshNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphMultiViewMeshNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphMultiViewMeshNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMultiViewMeshNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMultiViewMeshNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMultiViewMeshNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMultiViewMeshNode>, this);
}

uint64_t *re::allocInfo_RenderGraphTextNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254121710);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254121710))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121BA8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254121BB8 = 0;
    qword_254121BC8 = 0;
    qword_254121BD0 = 0xFFFFFFFFLL;
    qword_254121BA8 = (uint64_t)&off_24ED7DAA8;
    qword_254121BD8 = (uint64_t)"RenderGraphTextNode";
    dword_254121BE0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254121C18 = 0;
    __cxa_guard_release(&qword_254121710);
  }
  return &qword_254121BA8;
}

void re::initInfo_RenderGraphTextNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x11A173223CF8F44ELL;
  v10[1] = "RenderGraphTextNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254121720);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121720);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121718 = v8;
      __cxa_guard_release(&qword_254121720);
    }
  }
  *((_QWORD *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254121718;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphTextNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphTextNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphTextNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphTextNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphTextNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)result + 64) = 1;
  *(_QWORD *)result = &off_24ED87870;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphTextNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphTextNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)result + 64) = 1;
  *(_QWORD *)result = &off_24ED87870;
  return result;
}

uint64_t re::introspect_RenderGraphTextNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphTextNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphTextNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphTextNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphTextNode>, this);
}

uint64_t *re::allocInfo_RenderGraphDebugNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254121728);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254121728))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121C20, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254121C30 = 0;
    qword_254121C40 = 0;
    qword_254121C48 = 0xFFFFFFFFLL;
    qword_254121C20 = (uint64_t)&off_24ED7DAA8;
    qword_254121C50 = (uint64_t)"RenderGraphDebugNode";
    dword_254121C58 = 0;
    xmmword_254121C60 = 0u;
    xmmword_254121C70 = 0u;
    xmmword_254121C80 = 0u;
    qword_254121C90 = 0;
    __cxa_guard_release(&qword_254121728);
  }
  return &qword_254121C20;
}

void re::initInfo_RenderGraphDebugNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x228CD849C812213ALL;
  v10[1] = "RenderGraphDebugNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254121738);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121738);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121730 = v8;
      __cxa_guard_release(&qword_254121738);
    }
  }
  *((_QWORD *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254121730;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDebugNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDebugNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDebugNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDebugNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphDebugNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)result + 64) = 1;
  *(_QWORD *)result = &off_24ED87900;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphDebugNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphDebugNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)result + 64) = 1;
  *(_QWORD *)result = &off_24ED87900;
  return result;
}

uint64_t re::introspect_RenderGraphDebugNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDebugNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDebugNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDebugNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDebugNode>, this);
}

uint64_t *re::allocInfo_RenderGraphMaterialReplaceNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254121740);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254121740))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121C98, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254121CA8 = 0;
    qword_254121CB8 = 0;
    qword_254121CC0 = 0xFFFFFFFFLL;
    qword_254121C98 = (uint64_t)&off_24ED7DAA8;
    qword_254121CC8 = (uint64_t)"RenderGraphMaterialReplaceNode";
    dword_254121CD0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254121D08 = 0;
    __cxa_guard_release(&qword_254121740);
  }
  return &qword_254121C98;
}

void re::initInfo_RenderGraphMaterialReplaceNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0xAF16046478AEDAELL;
  v26[1] = "RenderGraphMaterialReplaceNode";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_254121748);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121748);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121800 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "material";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x11000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254121808 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "techniqueToReplace";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x12800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254121810 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::IntrospectionInfo<re::DynamicString>::get(1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "techniqueToUse";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x14800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254121818 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::mtl::introspect_CullMode((re::mtl *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "cullMode";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x16800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254121820 = v24;
      __cxa_guard_release(&qword_254121748);
    }
  }
  *((_QWORD *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254121800;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMaterialReplaceNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMaterialReplaceNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMaterialReplaceNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMaterialReplaceNode>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

re::RenderGraphMaterialReplaceNode *re::internal::defaultConstruct<re::RenderGraphMaterialReplaceNode>(int a1, int a2, re::RenderGraphMaterialReplaceNode *this)
{
  return re::RenderGraphMaterialReplaceNode::RenderGraphMaterialReplaceNode(this);
}

void re::internal::defaultDestruct<re::RenderGraphMaterialReplaceNode>(int a1, int a2, re::RenderGraphMaterialReplaceNode *this)
{
  re::RenderGraphMaterialReplaceNode::~RenderGraphMaterialReplaceNode(this);
}

uint64_t re::introspect_RenderGraphMaterialReplaceNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMaterialReplaceNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMaterialReplaceNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMaterialReplaceNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMaterialReplaceNode>, this);
}

uint64_t *re::allocInfo_RenderGraphDebugMaterialsNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254121750);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254121750))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121D10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254121D20 = 0;
    qword_254121D30 = 0;
    qword_254121D38 = 0xFFFFFFFFLL;
    qword_254121D10 = (uint64_t)&off_24ED7DAA8;
    qword_254121D40 = (uint64_t)"RenderGraphDebugMaterialsNode";
    dword_254121D48 = 0;
    xmmword_254121D50 = 0u;
    xmmword_254121D60 = 0u;
    xmmword_254121D70 = 0u;
    qword_254121D80 = 0;
    __cxa_guard_release(&qword_254121750);
  }
  return &qword_254121D10;
}

void re::initInfo_RenderGraphDebugMaterialsNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x86C8A26ABC359026;
  v10[1] = "RenderGraphDebugMaterialsNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254121760);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121760);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121758 = v8;
      __cxa_guard_release(&qword_254121760);
    }
  }
  *((_QWORD *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254121758;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDebugMaterialsNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDebugMaterialsNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDebugMaterialsNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDebugMaterialsNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphDebugMaterialsNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)result + 64) = 1;
  *(_QWORD *)result = &off_24ED29458;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphDebugMaterialsNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphDebugMaterialsNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *((_DWORD *)result + 64) = 1;
  *(_QWORD *)result = &off_24ED29458;
  return result;
}

uint64_t re::introspect_RenderGraphDebugMaterialsNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDebugMaterialsNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDebugMaterialsNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDebugMaterialsNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDebugMaterialsNode>, this);
}

void re::introspect_MeshPassFilterFlags(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  StringID v44;
  _QWORD v45[2];
  _QWORD v46[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_254121768);
  if ((v3 & 1) == 0)
  {
    v32 = (re *)__cxa_guard_acquire(&qword_254121768);
    if ((_DWORD)v32)
    {
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 1;
      *((_QWORD *)v34 + 2) = "Default";
      qword_2541217E0 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 2;
      *((_QWORD *)v36 + 2) = "TwoPassSortGroup";
      qword_2541217E8 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((_QWORD *)v38 + 1) = 4;
      *((_QWORD *)v38 + 2) = "RenderPassGroup";
      qword_2541217F0 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = 8;
      *(_QWORD *)(v40 + 16) = "RenderOnTop";
      qword_2541217F8 = v40;
      __cxa_guard_release(&qword_254121768);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254121770);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254121770))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254121908, "MeshPassFilterFlags", 1, 1, 1, 1);
    qword_254121908 = (uint64_t)&off_24ED7D9E8;
    qword_254121948 = (uint64_t)&re::introspect_MeshPassFilterFlags(BOOL)::enumTable;
    dword_254121918 = 9;
    __cxa_guard_release(&qword_254121770);
  }
  if (v2)
  {
    if ((_MergedGlobals_473 & 1) != 0)
      return;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    v5 = _MergedGlobals_473;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    if ((v5 & 1) != 0)
      return;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((_MergedGlobals_473 & 1) != 0)
      goto LABEL_34;
  }
  _MergedGlobals_473 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254121908, a2);
  v42 = 0xF30C980373391EA2;
  v43 = "MeshPassFilterFlags";
  v46[0] = 0x31CD534126;
  v46[1] = "uint8_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v46);
  if (!v9)
  {
    re::StringID::destroyString((re::StringID *)v46);
    re::internal::assertLog((re::internal *)5, v41, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "MeshPassFilterFlags", v42, v43);
    _os_crash();
    __break(1u);
    return;
  }
  v10 = *v9;
  re::StringID::destroyString((re::StringID *)v46);
  v11 = (unsigned int *)qword_254121948;
  v45[1] = v10;
  re::TypeBuilder::beginEnumType((uint64_t)v46, &v42, 1, 1, (uint64_t)v45);
  v13 = *v11;
  if ((_DWORD)v13)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
      if (*(_DWORD *)v15 == 1)
      {
        v16 = *(char **)(v15 + 16);
        if (v16)
        {
          v17 = *v16;
          if (*v16)
          {
            v18 = v16[1];
            if (v18)
            {
              v19 = (unsigned __int8 *)(v16 + 2);
              do
              {
                v17 = 31 * v17 + v18;
                v20 = *v19++;
                v18 = v20;
              }
              while (v20);
            }
          }
        }
        else
        {
          v17 = 0;
        }
        v21 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)&v44.var0 = 2 * v17;
        v44.var1 = v16;
        re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v46, v21, &v44);
        re::StringID::destroyString((re::StringID *)&v44);
        v13 = *v11;
      }
    }
    if (v13)
    {
      for (j = 0; j < v13; ++j)
      {
        v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
        if (*(_DWORD *)v23 == 2)
        {
          v24 = *(char **)(v23 + 16);
          if (v24)
          {
            v25 = *v24;
            if (*v24)
            {
              v26 = v24[1];
              if (v26)
              {
                v27 = (unsigned __int8 *)(v24 + 2);
                do
                {
                  v25 = 31 * v25 + v26;
                  v28 = *v27++;
                  v26 = v28;
                }
                while (v28);
              }
            }
          }
          else
          {
            v25 = 0;
          }
          v29 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)&v44.var0 = 2 * v25;
          v44.var1 = v24;
          re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v46, v29, &v44);
          re::StringID::destroyString((re::StringID *)&v44);
          v13 = *v11;
        }
      }
    }
  }
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v46, v30);
  xmmword_254121928 = (__int128)v44;
  re::StringID::destroyString((re::StringID *)&v42);
  if ((v2 & 1) == 0)
  {
LABEL_34:
    v31 = re::introspectionSharedMutex(v8);
    std::__shared_mutex_base::unlock(v31);
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_2541217C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541217C8))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2541219F0);
    qword_2541219F0 = (uint64_t)&off_24ED87C80;
    __cxa_guard_release(&qword_2541217C8);
  }
  if ((byte_2541216B4 & 1) == 0)
  {
    v3 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = re::introspect_uint16_t((re *)1, v4);
    if ((byte_2541216B4 & 1) == 0)
    {
      v6 = (uint64_t)v5;
      byte_2541216B4 = 1;
      v7 = v5[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541219F0, 0);
      qword_254121A00 = 0x3000000007;
      dword_254121A08 = v7;
      word_254121A0C = 0;
      *(_QWORD *)&xmmword_254121A10 = 0;
      *((_QWORD *)&xmmword_254121A10 + 1) = 0xFFFFFFFFLL;
      qword_254121A20 = (uint64_t)v3;
      qword_254121A28 = 0;
      qword_254121A30 = v6;
      qword_254121A38 = 0;
      qword_2541219F0 = (uint64_t)&off_24ED87C80;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_2541219F0, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *(_OWORD *)(v6 + 32);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_254121A10 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

double re::internal::defaultConstruct<re::MeshPassFilters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 140) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 156) = 0x7FFFFFFFLL;
  *(_WORD *)(a3 + 168) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshPassFilters>(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a4 + 120), a1);
  v6 = *(_QWORD *)(a4 + 80);
  if (v6)
  {
    if (*(_QWORD *)(a4 + 112))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 40))(v6, v5.n128_f64[0]);
    *(_QWORD *)(a4 + 112) = 0;
    *(_QWORD *)(a4 + 88) = 0;
    *(_QWORD *)(a4 + 96) = 0;
    *(_QWORD *)(a4 + 80) = 0;
    ++*(_DWORD *)(a4 + 104);
  }
  v7 = *(_QWORD *)(a4 + 40);
  if (v7)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v7 + 40))(v7, v5);
    *(_QWORD *)(a4 + 72) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 56) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    ++*(_DWORD *)(a4 + 64);
  }
  result = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    if (*(_QWORD *)(a4 + 32))
      result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 40))(result, v5);
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    ++*(_DWORD *)(a4 + 24);
  }
  return result;
}

double re::internal::defaultConstructV2<re::MeshPassFilters>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 156) = 0x7FFFFFFFLL;
  *(_WORD *)(a1 + 168) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshPassFilters>(uint64_t a1, double a2)
{
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 120), a2);
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v4 + 40))(v4, v3.n128_f64[0]);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 72))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v5 + 40))(v5, v3);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 64);
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 40))(result, v3);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::internal::defaultConstruct<re::TechniqueTagFilter>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[2] = 0;
  a3[3] = &str_110;
}

void re::internal::defaultDestruct<re::TechniqueTagFilter>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::TechniqueTagFilter>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[2] = 0;
  result[3] = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::TechniqueTagFilter>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void re::RenderGraphMultiPassMeshNode::~RenderGraphMultiPassMeshNode(re::RenderGraphMultiPassMeshNode *this)
{
  re::RenderGraphMultiPassMeshNode::~RenderGraphMultiPassMeshNode(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;
  double v4;

  *(_QWORD *)this = &off_24ED87750;
  v2 = *((_QWORD *)this + 49);
  if (v2)
  {
    if (*((_QWORD *)this + 53))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 49) = 0;
    ++*((_DWORD *)this + 104);
  }
  v3 = *((_QWORD *)this + 44);
  if (v3)
  {
    if (*((_QWORD *)this + 48))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 48) = 0;
    *((_QWORD *)this + 45) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 44) = 0;
    ++*((_DWORD *)this + 94);
  }
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)this + 312);
  re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 33, v4);
  re::RenderGraphNode::~RenderGraphNode(this);
}

void re::RenderGraphMultiViewMeshNode::~RenderGraphMultiViewMeshNode(re::RenderGraphMultiViewMeshNode *this)
{
  re::RenderGraphMeshNode::~RenderGraphMeshNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphTextNode::~RenderGraphTextNode(re::RenderGraphTextNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphDebugNode::~RenderGraphDebugNode(re::RenderGraphDebugNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphMaterialReplaceNode::~RenderGraphMaterialReplaceNode(re::RenderGraphMaterialReplaceNode *this)
{
  re::RenderGraphMaterialReplaceNode::~RenderGraphMaterialReplaceNode(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 41);
  if (v2)
  {
    if ((*((_BYTE *)this + 336) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 43));
    *(_OWORD *)((char *)this + 328) = 0u;
    *(_OWORD *)((char *)this + 344) = 0u;
  }
  v3 = *((_QWORD *)this + 37);
  if (v3)
  {
    if ((*((_BYTE *)this + 304) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 39));
    *(_OWORD *)((char *)this + 296) = 0u;
    *(_OWORD *)((char *)this + 312) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphMaterialReplaceNode *)((char *)this + 272));
  re::RenderGraphNode::~RenderGraphNode(this);
}

double re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a1;
  if (v3)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v4, result);
        ++v5;
        v4 += 224;
      }
      while (v5 < *((unsigned int *)a1 + 8));
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t result, double a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *(_DWORD *)(result + 8);
  if (v2 < 0)
  {
    v3 = result;
    v5 = (_OWORD *)(result + 16);
    v4 = *(_QWORD *)(result + 16);
    *((_DWORD *)v5 - 2) = v2 & 0x7FFFFFFF;
    if (v4)
    {
      if ((*(_BYTE *)(v3 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(v3 + 32));
      a2 = 0.0;
      *v5 = 0u;
      v5[1] = 0u;
    }
    v6.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v3 + 168), a2);
    v7 = *(_QWORD *)(v3 + 128);
    v8 = (uint64_t *)(v3 + 48);
    if (v7)
    {
      if (*(_QWORD *)(v3 + 160))
        (*(void (**)(uint64_t, double))(*(_QWORD *)v7 + 40))(v7, v6.n128_f64[0]);
      *(_QWORD *)(v3 + 160) = 0;
      *(_QWORD *)(v3 + 136) = 0;
      *(_QWORD *)(v3 + 144) = 0;
      *(_QWORD *)(v3 + 128) = 0;
      ++*(_DWORD *)(v3 + 152);
    }
    v9 = *(_QWORD *)(v3 + 88);
    if (v9)
    {
      if (*(_QWORD *)(v3 + 120))
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 40))(v9, v6);
      *(_QWORD *)(v3 + 120) = 0;
      *(_QWORD *)(v3 + 96) = 0;
      *(_QWORD *)(v3 + 104) = 0;
      *(_QWORD *)(v3 + 88) = 0;
      ++*(_DWORD *)(v3 + 112);
    }
    result = *v8;
    if (*v8)
    {
      if (*(_QWORD *)(v3 + 80))
        result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 40))(result, v6);
      *(_QWORD *)(v3 + 80) = 0;
      *(_QWORD *)(v3 + 56) = 0;
      *(_QWORD *)(v3 + 64) = 0;
      *v8 = 0;
      ++*(_DWORD *)(v3 + 72);
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::MeshNodeFilterData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re18MeshNodeFilterDataE";
  if (((unint64_t)"N2re18MeshNodeFilterDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re18MeshNodeFilterDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

_QWORD *re::DynamicArray<re::FilteredMeshPass>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::FilteredMeshPass>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 24 * v9;
        v11 = v7;
        do
        {
          *v11 = *(_QWORD *)v8;
          v12 = *(unsigned __int8 *)(v8 + 8);
          *((_BYTE *)v11 + 8) = v12;
          if (v12)
            *(_DWORD *)((char *)v11 + 9) = *(_DWORD *)(v8 + 9);
          *(_DWORD *)((char *)v11 + 13) = *(_DWORD *)(v8 + 13);
          v8 += 24;
          v11 += 3;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::TechniqueTagFilter>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::TechniqueTagFilter>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::TechniqueTagFilter>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::TechniqueTagFilter>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::TechniqueTagFilter>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::TechniqueTagFilter>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::TechniqueTagFilter>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  re::IntrospectionBase *v16;
  _QWORD v18[2];
  _QWORD v19[2];

  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= v8)
  {
    v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v8;
        v12 = v8 == 0;
        v13 = 8;
        if (!v12)
          v13 = v11;
        if (v13 <= v10)
          v14 = v10;
        else
          v14 = v13;
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v9 = *(_QWORD *)(a4 + 16);
  }
  v15 = (_QWORD *)(*(_QWORD *)(a4 + 32) + 32 * v9);
  *v15 = 0;
  v15[1] = &str_110;
  v18[0] = 0;
  v18[1] = &str_110;
  v15[2] = 0;
  v15[3] = &str_110;
  v19[0] = 0;
  v19[1] = &str_110;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)v18);
  v16 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 32 * *(_QWORD *)(a4 + 16) - 32);
  re::introspectionInitElement(a2, a3, a1[6], v16);
  return v16;
}

uint64_t re::IntrospectionDynamicArray<re::TechniqueTagFilter>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::TechniqueTagFilter>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 32 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 32;
        v10 -= 32;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 32 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 32;
        v14 -= 32;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 32 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TechniqueTagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(double a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
}

void re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  signed int v8;

  re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
  if (a5 <= 3)
    v8 = 3;
  else
    v8 = a5;
  re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a3, a4, v8);
}

void re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(double a1, uint64_t a2, uint64_t a3)
{
  re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a3, a1);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  double v9;
  __n128 v10;
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;

  v19 = 0u;
  v20 = 0u;
  memset(v18, 0, sizeof(v18));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  HIDWORD(v19) = 0x7FFFFFFF;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a4, a5, (uint64_t)v12);
  v10.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v18 + 1, v9);
  if ((_QWORD)v16)
  {
    if (*(_QWORD *)&v18[0])
      (*(void (**)(double))(*(_QWORD *)v16 + 40))(v10.n128_f64[0]);
    *(_QWORD *)&v18[0] = 0;
    *(_QWORD *)&v17 = 0;
    v16 = 0uLL;
    ++DWORD2(v17);
  }
  if (*((_QWORD *)&v13 + 1))
  {
    if (*((_QWORD *)&v15 + 1))
      (*(void (**)(__n128))(**((_QWORD **)&v13 + 1) + 40))(v10);
    *((_QWORD *)&v15 + 1) = 0;
    v14 = 0uLL;
    *((_QWORD *)&v13 + 1) = 0;
    LODWORD(v15) = v15 + 1;
  }
  if (*(_QWORD *)&v12[0] && (_QWORD)v13)
    (*(void (**)(__n128))(**(_QWORD **)&v12[0] + 40))(v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 56;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 224 * v10 + 16, *(_QWORD *)(a2 + 16) + 224 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 224 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = DWORD2(v8);
      if (DWORD2(v8))
      {
        v11 = v7 + 48;
        do
        {
          if ((*(_DWORD *)(v11 - 40) & 0x80000000) != 0)
            re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(v11 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v11 - 48), (re::DynamicString *)(v11 - 32));
          v11 += 224;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13, *(double *)&v8);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 224 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 224 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 224 * v9;
  *(_DWORD *)(v11 + 224 * v9 + 8) = v12 | 0x80000000;
  v14 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 224 * v9) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 224 * v9 + 16), a4);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = v15 + 224 * v9;
  *(_QWORD *)(v16 + 80) = 0;
  *(_DWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  v17 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v16 + 48) = *(_QWORD *)a5;
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v18 = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v16 + 64) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v18;
  v19 = *(_QWORD *)(v16 + 80);
  *(_QWORD *)(v16 + 80) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v19;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v16 + 72);
  *(_QWORD *)(v16 + 120) = 0;
  *(_QWORD *)(v16 + 96) = 0;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  *(_DWORD *)(v16 + 112) = 0;
  v20 = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(v16 + 88) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(v16 + 96) = v20;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  v21 = *(_QWORD *)(v16 + 104);
  *(_QWORD *)(v16 + 104) = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(a5 + 56) = v21;
  v22 = *(_QWORD *)(v16 + 120);
  *(_QWORD *)(v16 + 120) = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(a5 + 72) = v22;
  ++*(_DWORD *)(a5 + 64);
  ++*(_DWORD *)(v16 + 112);
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 136) = 0;
  *(_QWORD *)(v16 + 144) = 0;
  *(_QWORD *)(v16 + 128) = 0;
  *(_DWORD *)(v16 + 152) = 0;
  v23 = *(_QWORD *)(a5 + 88);
  *(_QWORD *)(v16 + 128) = *(_QWORD *)(a5 + 80);
  *(_QWORD *)(v16 + 136) = v23;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  v24 = *(_QWORD *)(v16 + 144);
  *(_QWORD *)(v16 + 144) = *(_QWORD *)(a5 + 96);
  *(_QWORD *)(a5 + 96) = v24;
  v25 = *(_QWORD *)(v16 + 160);
  *(_QWORD *)(v16 + 160) = *(_QWORD *)(a5 + 112);
  *(_QWORD *)(a5 + 112) = v25;
  ++*(_DWORD *)(a5 + 104);
  ++*(_DWORD *)(v16 + 152);
  *(_OWORD *)(v16 + 168) = 0u;
  v16 += 168;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_DWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v15 + 224 * v9 + 168), (uint64_t *)(a5 + 120));
  *(_BYTE *)(v15 + v13 + 216) = *(_BYTE *)(a5 + 168);
  v26 = *(unsigned __int8 *)(a5 + 169);
  *(_BYTE *)(v15 + v13 + 217) = v26;
  if (v26)
    *(_DWORD *)(v15 + 224 * v9 + 218) = *(_DWORD *)(a5 + 170);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v14) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;

  if (*(_DWORD *)(a1 + 28))
  {
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v3);
    if (*(_DWORD *)(a1 + 32))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v4, a2);
        ++v5;
        v4 += 224;
      }
      while (v5 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v6 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v6;
  }
}

uint64_t re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t *v26;
  unint64_t *v27;
  const re::DynamicString *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  _QWORD *v49;
  int *v50;
  _DWORD *v51;
  uint64_t *v52;
  unsigned int *v53;
  char v54;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v54, (uint64_t)a2);
  v7 = v6;
  if (*(_QWORD *)a1)
  {
    v8 = v6 % *(unsigned int *)(a1 + 24);
    v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(a1 + 16);
      while (!re::DynamicString::operator==(v10 + 224 * v9 + 16, (uint64_t)a2))
      {
        v9 = *(_DWORD *)(v10 + 224 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF)
          goto LABEL_8;
      }
      v14 = v10 + 224 * v9;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v14 + 48, a3);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v14 + 88, a3 + 40);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v14 + 128, a3 + 80);
      if (v14 + 48 != a3)
      {
        v15 = (uint64_t *)(a3 + 120);
        v18 = *(_QWORD *)(v14 + 168);
        v17 = (uint64_t *)(v14 + 168);
        v16 = v18;
        if (!v18 || (v19 = *v15, v16 == *v15))
        {
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v17, v15);
        }
        else
        {
          re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)v17);
          if (v19)
          {
            v53 = (unsigned int *)(v10 + 224 * v9 + 192);
            v20 = *(_DWORD *)(a3 + 148);
            if (*v53 < v20)
              re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v17, v20);
            v46 = (uint64_t)v17;
            v21 = *(unsigned int *)(a3 + 152);
            if ((_DWORD)v21)
            {
              v22 = 0;
              v23 = 0;
              v24 = v10 + 224 * v9;
              v25 = (int *)(v24 + 204);
              v26 = (uint64_t *)(v24 + 184);
              v47 = (unsigned int *)(v24 + 200);
              v48 = a3;
              v50 = (int *)(v24 + 204);
              v51 = (_DWORD *)(v24 + 196);
              v49 = (_QWORD *)(v24 + 176);
              v52 = (uint64_t *)(v24 + 184);
              do
              {
                v27 = (unint64_t *)(*(_QWORD *)(a3 + 136) + v22);
                if ((v27[1] & 0x80000000) != 0)
                {
                  v28 = (const re::DynamicString *)(v27 + 2);
                  v29 = *v27;
                  v30 = *v53;
                  v31 = *v27 % v30;
                  v32 = *v25;
                  if ((_DWORD)v32 == 0x7FFFFFFF)
                  {
                    v33 = v47;
                    v32 = *v47;
                    v34 = v32;
                    if ((_DWORD)v32 == (_DWORD)v30)
                    {
                      v35 = *v27;
                      re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(v46, 2 * *v51);
                      v29 = v35;
                      v28 = (const re::DynamicString *)(v27 + 2);
                      v33 = v47;
                      v26 = v52;
                      v31 = v35 % *v53;
                      v34 = *v47;
                    }
                    *v33 = v34 + 1;
                    v36 = *v26;
                    v37 = *(_DWORD *)(*v26 + 56 * v32 + 8);
                  }
                  else
                  {
                    v36 = *v26;
                    v37 = *(_DWORD *)(*v26 + 56 * v32 + 8);
                    *v25 = v37 & 0x7FFFFFFF;
                  }
                  *(_DWORD *)(v36 + 56 * v32 + 8) = v37 | 0x80000000;
                  *(_DWORD *)(*v26 + 56 * v32 + 8) = *(_DWORD *)(*v26 + 56 * v32 + 8) & 0x80000000 | *(_DWORD *)(*v49 + 4 * v31);
                  *(_QWORD *)(*v26 + 56 * v32) = v29;
                  re::DynamicString::DynamicString((re::DynamicString *)(*v26 + 56 * v32 + 16), v28);
                  v26 = v52;
                  *(_WORD *)(*v52 + 56 * v32 + 48) = *((_WORD *)v27 + 24);
                  *(_DWORD *)(*v49 + 4 * v31) = v32;
                  v25 = v50;
                  ++*v51;
                  a3 = v48;
                  v21 = *(unsigned int *)(v48 + 152);
                }
                ++v23;
                v22 += 56;
              }
              while (v23 < v21);
            }
            ++*(_DWORD *)(v10 + 224 * v9 + 208);
          }
        }
      }
      v38 = v10 + 224 * v9;
      v41 = *(unsigned __int8 *)(v38 + 217);
      v39 = (_BYTE *)(v38 + 217);
      v40 = v41;
      *(v39 - 1) = *(_BYTE *)(a3 + 168);
      v42 = *(unsigned __int8 *)(a3 + 169);
      if (v41)
        v43 = 0;
      else
        v43 = v42 == 0;
      if (v43)
        goto LABEL_45;
      if (v40)
        v44 = v42 == 0;
      else
        v44 = 0;
      if (v44)
      {
        *v39 = 0;
      }
      else
      {
        if (v40)
          v45 = 1;
        else
          v45 = v42 == 0;
        if (v45)
        {
          if (v39 == (_BYTE *)(a3 + 169))
            goto LABEL_45;
        }
        else
        {
          *v39 = 1;
        }
        *(_DWORD *)(v10 + 224 * v9 + 218) = *(_DWORD *)(a3 + 170);
      }
LABEL_45:
      ++*(_DWORD *)(a1 + 40);
      v12 = *(_QWORD *)(a1 + 16) + 224 * v9;
      return v12 + 48;
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
LABEL_8:
  v11 = re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 224 * v11;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1, double a2)
{
  double v3;

  v3 = re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
  return re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, v3);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, double a2, uint64_t a3, uint64_t a4)
{
  if (*a1 == a4)
  {
    re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1, a2);
  }
  else
  {
    re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
    re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a4, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 224 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 224 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 224 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 224 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 56;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 224 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 224 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MeshPassFilters,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<BOOL>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<BOOL>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<BOOL>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<BOOL>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::addElement(re::Allocator **a1, re *this, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  re::IntrospectionBase *v13;

  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<BOOL>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<BOOL>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + v8);
  *(_BYTE *)v13 = 0;
  *(_QWORD *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(this, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

unint64_t re::IntrospectionDynamicArray<re::MeshPassFilterFlags>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<BOOL>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  void **v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<BOOL>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<BOOL>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(void ***)(a1 + 32);
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, v11, a3, 0);
        v11 = (void **)((char *)v11 + 1);
        --v10;
      }
      while (v10);
    }
  }
}

unint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshPassFilterFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

re::RenderGraphMultiViewMeshNode *re::RenderGraphMultiViewMeshNode::RenderGraphMultiViewMeshNode(re::RenderGraphMultiViewMeshNode *this)
{
  re::RenderGraphNode *v2;
  _QWORD *v3;

  v2 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)v2 + 64) = 1;
  *(_QWORD *)v2 = &off_24ED876C0;
  v3 = (_QWORD *)((char *)v2 + 264);
  *(_OWORD *)((char *)v2 + 264) = 0u;
  *(_OWORD *)((char *)v2 + 280) = 0u;
  re::DynamicString::setCapacity(v3, 0);
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_DWORD *)this + 80) = 0;
  *((_WORD *)this + 168) = 2;
  *((_BYTE *)this + 338) = 0;
  *(_QWORD *)this = &off_24ED877E0;
  return this;
}

re::RenderGraphMaterialReplaceNode *re::RenderGraphMaterialReplaceNode::RenderGraphMaterialReplaceNode(re::RenderGraphMaterialReplaceNode *this)
{
  re::RenderGraphNode *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;

  v2 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)v2 + 64) = 1;
  *(_QWORD *)v2 = &off_24ED87990;
  v3 = (_QWORD *)((char *)v2 + 296);
  *(_OWORD *)((char *)v2 + 264) = 0u;
  *(_OWORD *)((char *)v2 + 280) = 0u;
  *(_OWORD *)((char *)v2 + 296) = 0u;
  *(_OWORD *)((char *)v2 + 312) = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 41, 0);
  *((_WORD *)this + 180) = 2;
  return this;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(double a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  signed int v8;

  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
  if (a5 <= 3)
    v8 = 3;
  else
    v8 = a5;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a3, a4, v8);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  __int16 v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 14;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 56 * v10 + 16, *(_QWORD *)(a2 + 16) + 56 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 56 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _WORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_WORD *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1, double a2)
{
  double v3;

  v3 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, v3);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, double a2, uint64_t a3, uint64_t a4)
{
  if (*a1 == a4)
  {
    re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a1, a4, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 56 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 14;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::ar::DualGuidedFilter::create(re::ar::DualGuidedFilter *this@<X0>, const re::mtl::Device *a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;

  v4 = (id)objc_msgSend(objc_alloc((Class)getARDualGuidedFilterClass()), "initWithDevice:useSmoothing:", *(_QWORD *)this, a2);
  *a3 = v4;

}

void re::ar::DualGuidedFilter::encodeDualCoefficients(void **a1, void **a2, void **a3, void **a4, id *a5, uint64_t *a6)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v6 = *a1;
  v7 = *a2;
  v8 = *a3;
  v9 = *a4;
  v10 = *a6;
  v11 = *a5;
  v12 = v9;
  v13 = v8;
  v14 = v7;
  v15 = v6;
  objc_msgSend(v15, "encodeDualCoefficients:guide:stencil:coefficientsTextureFG:coefficientsTextureBG:", v14, v13, v12, v11, v10);

}

Class initARDualGuidedFilter(void)
{
  Class result;

  if (LoadARKit(void)::loadPredicate != -1)
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_43);
  result = objc_getClass("ARDualGuidedFilter");
  classARDualGuidedFilter = (uint64_t)result;
  getARDualGuidedFilterClass = (uint64_t (*)(void))ARDualGuidedFilterFunction;
  return result;
}

id ARDualGuidedFilterFunction(void)
{
  return (id)classARDualGuidedFilter;
}

void ___ZL9LoadARKitv_block_invoke()
{
  LoadARKit(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary)
    NSLog(CFSTR("### Failed to Soft Link: /System/Library/Frameworks/ARKit.framework/ARKit"));
}

void re::ARGuidedFilterOcclusionNode::setup(re::ARGuidedFilterOcclusionNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *((_WORD *)a2 + 296) = 257;
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 256, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 272, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 288, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 304, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 320, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 320, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 336, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 336, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 352, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 352, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 368, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 368, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 384, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 384, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 400, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 400, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 416, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 416, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 432, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 432, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 448, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 448, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 464, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 464, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 480, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 480, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 496, (uint64_t)&v6);
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::ARGuidedFilterOcclusionNode::execute(re::ARGuidedFilterOcclusionNode *this, re::RenderGraphContext *a2)
{
  id v4;
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BOOL4 v9;
  id v10;
  char v11;
  char v12;
  char v13;
  id v14;
  re *v15;
  const char *v16;
  const char *v17;
  id v18;
  id v19;
  re::RenderGraphContext *v20;
  id v21;
  id *p_location;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  id *v26;
  _QWORD *v27;
  BOOL v28;
  char v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  id v52;
  id v53;
  __int128 v54;
  __int128 v55;
  id v56;
  uint64_t v57;
  id v58;
  char v59;
  id v60;
  id v61;
  id location;
  id v63;
  id v64;
  char v65;
  uint64_t v66;
  _BYTE v67[32];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v67, 5087, 0);
  v4 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104))
                         + 16));
  v5 = atomic_load((unsigned __int8 *)&qword_254121E80);
  if ((v5 & 1) == 0)
  {
    v15 = (re *)__cxa_guard_acquire(&qword_254121E80);
    if ((_DWORD)v15)
    {
      _MergedGlobals_474 = re::getCombinedScopeHash(v15, v16, v17);
      __cxa_guard_release(&qword_254121E80);
    }
  }
  v6 = re::RenderGraphDataStore::tryGet<re::SceneUnderstandingGuidedFilterOcclusionData>(*((_QWORD *)a2 + 146), _MergedGlobals_474);
  v7 = *(_QWORD **)(v6 + 32);
  v8 = *v7;
  v9 = *v7 == 0;
  v61 = *(id *)(*((_QWORD *)a2 + 1) + 184);
  v10 = v4;
  v60 = v10;
  v11 = *(_BYTE *)(v6 + 184);
  v63 = 0;
  v64 = 0;
  location = 0;
  v65 = v11;
  v66 = 0;
  re::ObjCObject::operator=(&v63, &v60);
  re::ObjCObject::operator=(&location, &v61);

  v53 = *(id *)(*((_QWORD *)a2 + 1) + 184);
  v54 = 0u;
  v55 = 0u;
  v57 = v6;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  re::ObjCObject::operator=(&v58, &v53);

  re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler::prepareTexturesForFrame((re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler *)&v54);
  if (v59)
    v12 = 1;
  else
    v12 = v9;
  v13 = *(_BYTE *)(v6 + 185) | v12;
  v47 = *(id *)(*((_QWORD *)a2 + 1) + 184);
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = v6;
  v52 = 0;
  re::ObjCObject::operator=(&v52, &v47);

  v46 = *(id *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 56) + 248);
  re::guided_filter_occlusion::GuidedFilterKernelRecycler::prepareKernelsForFrame((re::guided_filter_occlusion::GuidedFilterKernelRecycler *)&v48, *((const re::RenderManager **)a2 + 1), (re::mtl::Library *)&v46, v9);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 256, 0, 0, &v30);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 272, 0, 0, &v31);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 288, 0, 0, &v32);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 304, 0, 0, &v33);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 320, 0, 0, &v34);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 336, 0, 0, &v35);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 352, 0, 0, &v36);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 368, 0, 0, &v37);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 384, 0, 0, &v38);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 400, 0, 0, &v39);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 416, 0, 0, &v40);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 432, 0, 0, &v41);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 448, 0, 0, &v42);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 464, 0, 0, &v43);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 480, 0, 0, &v44);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 496, 0, 0, &v45);
  v20 = a2;
  v14 = v10;
  v21 = v14;
  p_location = &location;
  v23 = v6;
  v24 = &v48;
  v25 = &v54;
  v26 = &v30;
  v27 = v7;
  v28 = v9;
  v29 = v13;
  v19 = *((id *)&v54 + 1);
  v18 = v56;
  if (v13 || !v8)
  {
    NS::SharedPtr<MTL::Texture>::operator=(&v19, (void **)&v54);
    NS::SharedPtr<MTL::Texture>::operator=(&v18, (void **)&v55 + 1);
  }
  objc_msgSend(v14, "pushDebugGroup:", CFSTR("ARGuidedFilterOcclusionNode"));
  re::guided_filter_occlusion::encodeGuidedFilterOcclusionCommands((uint64_t)&v20);
  objc_msgSend(v14, "popDebugGroup");
  re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler::saveTexturesForNextFrame((re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler *)&v54);
  ++*v7;
  if (v18)

  if (v19)
  if (v45)
  {

    v45 = 0;
  }
  if (v44)
  {

    v44 = 0;
  }
  if (v43)
  {

    v43 = 0;
  }
  if (v42)
  {

    v42 = 0;
  }
  if (v41)
  {

    v41 = 0;
  }
  if (v40)
  {

    v40 = 0;
  }
  if (v39)
  {

    v39 = 0;
  }
  if (v38)
  {

    v38 = 0;
  }
  if (v37)
  {

    v37 = 0;
  }
  if (v36)
  {

    v36 = 0;
  }
  if (v35)
  {

    v35 = 0;
  }
  if (v34)
  {

    v34 = 0;
  }
  if (v33)
  {

    v33 = 0;
  }
  if (v32)
  {

    v32 = 0;
  }
  if (v31)
  {

    v31 = 0;
  }
  if (v30)

  if (v56)
  {

    v56 = 0;
  }
  if (*((_QWORD *)&v55 + 1))
  {

    *((_QWORD *)&v55 + 1) = 0;
  }
  if ((_QWORD)v55)
  {

    *(_QWORD *)&v55 = 0;
  }
  if (*((_QWORD *)&v54 + 1))
  {

    *((_QWORD *)&v54 + 1) = 0;
  }
  if ((_QWORD)v54)

  if (v64)
  {

    v64 = 0;
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v67);
}

uint64_t *re::allocInfo_ARGuidedFilterOcclusionNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254121E88);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254121E88))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121EF0, 0);
    *(uint64_t *)((char *)&qword_254121F00 + 6) = 0;
    qword_254121F00 = 0;
    qword_254121F10 = 0;
    qword_254121F18 = 0xFFFFFFFFLL;
    qword_254121EF0 = (uint64_t)&off_24ED7DAA8;
    qword_254121F20 = (uint64_t)"ARGuidedFilterOcclusionNode";
    dword_254121F28 = 0;
    unk_254121F30 = 0u;
    unk_254121F40 = 0u;
    unk_254121F50 = 0u;
    qword_254121F60 = 0;
    __cxa_guard_release(&qword_254121E88);
  }
  return &qword_254121EF0;
}

void re::initInfo_ARGuidedFilterOcclusionNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  const re::IntrospectionBase *v50;
  void *v51;
  uint64_t v52;
  uint64_t *v53;
  const re::IntrospectionBase *v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  const re::IntrospectionBase *v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  const re::IntrospectionBase *v62;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  const re::IntrospectionBase *v66;
  void *v67;
  uint64_t v68;
  uint64_t *v69;
  const re::IntrospectionBase *v70;
  void *v71;
  uint64_t v72;
  __int128 v73;
  _QWORD v74[2];
  __int128 v75;

  v74[0] = 0x30DAB7D54DFCD6BCLL;
  v74[1] = "ARGuidedFilterOcclusionNode";
  re::StringID::destroyString((re::StringID *)v74);
  *((_OWORD *)this + 2) = v75;
  v4 = atomic_load((unsigned __int8 *)&qword_254121E90);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121E90);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121FE0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_RenderGraphTargetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "suVirtualContentOpaqueOnlyDepth";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254121FE8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_RenderGraphTargetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "suAllVirtualContentDepth";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x11000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254121FF0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_RenderGraphTargetHandle((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "suVirtualContentDepthAsR16";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x14000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254121FF8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_RenderGraphTargetHandle((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "processedVirtualDepthAsR16";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x15000000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254122000 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_RenderGraphTargetHandle((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "suMeshDepthEdgesScratch";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x16000000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254122008 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_RenderGraphTargetHandle((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "suMeshDepthEdges";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x17000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254122010 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_RenderGraphTargetHandle((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "maskOfAllOcclusions";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x18000000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254122018 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_RenderGraphTargetHandle((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "regressionInputCameraFeed";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x19000000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254122020 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v43 = re::introspect_RenderGraphTargetHandle((re *)1, v42);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "reconstructionInputCameraFeed";
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x1A000000009;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_254122028 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      v47 = re::introspect_RenderGraphTargetHandle((re *)1, v46);
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = "cameraFeedRGBDownsampled";
      *(_QWORD *)(v48 + 16) = v47;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0x1B00000000ALL;
      *(_DWORD *)(v48 + 40) = 0;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_254122030 = v48;
      v49 = re::introspectionAllocator((re *)v48);
      v51 = re::introspect_RenderGraphTargetHandle((re *)1, v50);
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "guidedFilterInputWeights";
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0x1C00000000BLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_254122038 = v52;
      v53 = re::introspectionAllocator((re *)v52);
      v55 = re::introspect_RenderGraphTargetHandle((re *)1, v54);
      v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 72, 8);
      *(_DWORD *)v56 = 1;
      *(_QWORD *)(v56 + 8) = "guidedFilterInputMask";
      *(_QWORD *)(v56 + 16) = v55;
      *(_QWORD *)(v56 + 24) = 0;
      *(_QWORD *)(v56 + 32) = 0x1D00000000CLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(_QWORD *)(v56 + 48) = 0;
      *(_QWORD *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_254122040 = v56;
      v57 = re::introspectionAllocator((re *)v56);
      v59 = re::introspect_RenderGraphTargetHandle((re *)1, v58);
      v60 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v57 + 32))(v57, 72, 8);
      *(_DWORD *)v60 = 1;
      *(_QWORD *)(v60 + 8) = "reconstructedAlpha";
      *(_QWORD *)(v60 + 16) = v59;
      *(_QWORD *)(v60 + 24) = 0;
      *(_QWORD *)(v60 + 32) = 0x1E00000000DLL;
      *(_DWORD *)(v60 + 40) = 0;
      *(_QWORD *)(v60 + 48) = 0;
      *(_QWORD *)(v60 + 56) = 0;
      *(_DWORD *)(v60 + 64) = 0;
      qword_254122048 = v60;
      v61 = re::introspectionAllocator((re *)v60);
      v63 = re::introspect_RenderGraphTargetHandle((re *)1, v62);
      v64 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v61 + 32))(v61, 72, 8);
      *(_DWORD *)v64 = 1;
      *(_QWORD *)(v64 + 8) = "suMeshDepth";
      *(_QWORD *)(v64 + 16) = v63;
      *(_QWORD *)(v64 + 24) = 0;
      *(_QWORD *)(v64 + 32) = 0x1200000000ELL;
      *(_DWORD *)(v64 + 40) = 0;
      *(_QWORD *)(v64 + 48) = 0;
      *(_QWORD *)(v64 + 56) = 0;
      *(_DWORD *)(v64 + 64) = 0;
      qword_254122050 = v64;
      v65 = re::introspectionAllocator((re *)v64);
      v67 = re::introspect_RenderGraphTargetHandle((re *)1, v66);
      v68 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v65 + 32))(v65, 72, 8);
      *(_DWORD *)v68 = 1;
      *(_QWORD *)(v68 + 8) = "suMeshBackfacesDepth";
      *(_QWORD *)(v68 + 16) = v67;
      *(_QWORD *)(v68 + 24) = 0;
      *(_QWORD *)(v68 + 32) = 0x1300000000FLL;
      *(_DWORD *)(v68 + 40) = 0;
      *(_QWORD *)(v68 + 48) = 0;
      *(_QWORD *)(v68 + 56) = 0;
      *(_DWORD *)(v68 + 64) = 0;
      qword_254122058 = v68;
      v69 = re::introspectionAllocator((re *)v68);
      v71 = re::introspect_RenderGraphTargetHandle((re *)1, v70);
      v72 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v69 + 32))(v69, 72, 8);
      *(_DWORD *)v72 = 1;
      *(_QWORD *)(v72 + 8) = "suOcclusionMatte";
      *(_QWORD *)(v72 + 16) = v71;
      *(_QWORD *)(v72 + 24) = 0;
      *(_QWORD *)(v72 + 32) = 0x1F000000010;
      *(_DWORD *)(v72 + 40) = 0;
      *(_QWORD *)(v72 + 48) = 0;
      *(_QWORD *)(v72 + 56) = 0;
      *(_DWORD *)(v72 + 64) = 0;
      qword_254122060 = v72;
      __cxa_guard_release(&qword_254121E90);
    }
  }
  *((_QWORD *)this + 2) = 0x20000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 17;
  *((_QWORD *)this + 8) = &qword_254121FE0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ARGuidedFilterOcclusionNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ARGuidedFilterOcclusionNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ARGuidedFilterOcclusionNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ARGuidedFilterOcclusionNode>;
  re::IntrospectionRegistry::add(this, v3);
  v73 = v75;
}

double re::internal::defaultConstruct<re::ARGuidedFilterOcclusionNode>(int a1, int a2, re::ARGuidedFilterOcclusionNode *this)
{
  return re::ARGuidedFilterOcclusionNode::ARGuidedFilterOcclusionNode(this);
}

void re::internal::defaultDestruct<re::ARGuidedFilterOcclusionNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

uint64_t re::introspect_ARGuidedFilterOcclusionNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARGuidedFilterOcclusionNode", (uint64_t (*)(re::internal *))re::allocInfo_ARGuidedFilterOcclusionNode, (re::IntrospectionBase *(*)(void))re::initInfo_ARGuidedFilterOcclusionNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ARGuidedFilterOcclusionNode>, this);
}

uint64_t *re::allocInfo_SceneUnderstandingGuidedFilterOcclusionConnectionData(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254121E98);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254121E98))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254121F68, 0);
    *(uint64_t *)((char *)&qword_254121F78 + 6) = 0;
    qword_254121F78 = 0;
    qword_254121F88 = 0;
    qword_254121F90 = 0xFFFFFFFFLL;
    qword_254121F68 = (uint64_t)&off_24ED7DAA8;
    qword_254121F98 = (uint64_t)"SceneUnderstandingGuidedFilterOcclusionConnectionData";
    dword_254121FA0 = 0;
    xmmword_254121FA8 = 0u;
    unk_254121FB8 = 0u;
    xmmword_254121FC8 = 0u;
    qword_254121FD8 = 0;
    __cxa_guard_release(&qword_254121E98);
  }
  return &qword_254121F68;
}

void re::initInfo_SceneUnderstandingGuidedFilterOcclusionConnectionData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 v43;

  v42[0] = 0x4001EAA823D50D7ALL;
  v42[1] = "SceneUnderstandingGuidedFilterOcclusionConnectionData";
  re::StringID::destroyString((re::StringID *)v42);
  *((_OWORD *)this + 2) = v43;
  v4 = atomic_load((unsigned __int8 *)&qword_254121EA0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254121EA0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254121EA8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint32_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "guidedFilterResolutionX";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254121EB0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_uint32_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "guidedFilterResolutionY";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0xC00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254121EB8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint32_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "outputMatteResolutionX";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254121EC0 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_uint32_t((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "outputMatteResolutionY";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1400000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254121EC8 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_uint32_t((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "suMeshDepthEdgesResolutionX";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x2000000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254121ED0 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_uint32_t((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "suMeshDepthEdgesResolutionY";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x2400000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254121ED8 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_uint32_t((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "downsampledCameraFeedResolutionX";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x1800000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254121EE0 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_uint32_t((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "downsampledCameraFeedResolutionY";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x1C00000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254121EE8 = v40;
      __cxa_guard_release(&qword_254121EA0);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254121EA8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>;
  re::IntrospectionRegistry::add(this, v3);
  v41 = v43;
}

void re::internal::defaultConstruct<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED86F78;
}

_QWORD *re::internal::defaultConstructV2<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>(_QWORD *result)
{
  *result = &off_24ED86F78;
  return result;
}

uint64_t re::introspect_SceneUnderstandingGuidedFilterOcclusionConnectionData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingGuidedFilterOcclusionConnectionData", (uint64_t (*)(re::internal *))re::allocInfo_SceneUnderstandingGuidedFilterOcclusionConnectionData, (re::IntrospectionBase *(*)(void))re::initInfo_SceneUnderstandingGuidedFilterOcclusionConnectionData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SceneUnderstandingGuidedFilterOcclusionConnectionData>, this);
}

void re::ARGuidedFilterOcclusionNode::~ARGuidedFilterOcclusionNode(re::ARGuidedFilterOcclusionNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

double re::ARGuidedFilterOcclusionNode::ARGuidedFilterOcclusionNode(re::ARGuidedFilterOcclusionNode *this)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v1 = &off_24ED87D40;
  *((_QWORD *)v1 + 32) = 0;
  result = NAN;
  *((_QWORD *)v1 + 33) = -1;
  *((_QWORD *)v1 + 34) = 0;
  *((_QWORD *)v1 + 35) = -1;
  *((_QWORD *)v1 + 36) = 0;
  *((_QWORD *)v1 + 37) = -1;
  *((_QWORD *)v1 + 38) = 0;
  *((_QWORD *)v1 + 39) = -1;
  *((_QWORD *)v1 + 40) = 0;
  *((_QWORD *)v1 + 41) = -1;
  *((_QWORD *)v1 + 42) = 0;
  *((_QWORD *)v1 + 43) = -1;
  *((_QWORD *)v1 + 44) = 0;
  *((_QWORD *)v1 + 45) = -1;
  *((_QWORD *)v1 + 46) = 0;
  *((_QWORD *)v1 + 47) = -1;
  *((_QWORD *)v1 + 48) = 0;
  *((_QWORD *)v1 + 49) = -1;
  *((_QWORD *)v1 + 50) = 0;
  *((_QWORD *)v1 + 51) = -1;
  *((_QWORD *)v1 + 52) = 0;
  *((_QWORD *)v1 + 53) = -1;
  *((_QWORD *)v1 + 54) = 0;
  *((_QWORD *)v1 + 55) = -1;
  *((_QWORD *)v1 + 56) = 0;
  *((_QWORD *)v1 + 57) = -1;
  *((_QWORD *)v1 + 58) = 0;
  *((_QWORD *)v1 + 59) = -1;
  *((_QWORD *)v1 + 60) = 0;
  *((_QWORD *)v1 + 61) = -1;
  *((_QWORD *)v1 + 62) = 0;
  *((_QWORD *)v1 + 63) = -1;
  return result;
}

void re::RenderGraphBlurGenerationNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  _anonymous_namespace_ *v9;
  void **v10;
  _anonymous_namespace_ *v11;
  void **v12;
  _BYTE v13[8];
  _anonymous_namespace_ *v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;

  v13[0] = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v13);
  NS::SharedPtr<MTL::Texture>::operator=(this + 35, ComputePipelineState);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v18);
  v9 = (_anonymous_namespace_ *)v16;
  if ((_QWORD)v16)
  {
    if ((BYTE8(v16) & 1) != 0)
      v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = 0u;
    v17 = 0u;
  }
  if (v13[0])
  {
    v9 = v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  v13[0] = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v10 = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v13);
  NS::SharedPtr<MTL::Texture>::operator=(this + 36, v10);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v18);
  v11 = (_anonymous_namespace_ *)v16;
  if ((_QWORD)v16)
  {
    if ((BYTE8(v16) & 1) != 0)
      v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = 0u;
    v17 = 0u;
  }
  if (v13[0])
  {
    v11 = v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  v13[0] = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v12 = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v13);
  NS::SharedPtr<MTL::Texture>::operator=(this + 37, v12);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v18);
  if ((_QWORD)v16)
  {
    if ((BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = 0u;
    v17 = 0u;
  }
  if (v13[0] && v14 && (v15 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v14 + 40))();
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
}

void re::RenderGraphBlurGenerationNode::setup(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 592) = 257;
}

_QWORD *re::RenderGraphBlurGenerationNode::execute(char **this, re::RenderGraphContext *a2)
{
  _QWORD *result;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  id *v15;
  id *v16;
  id v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  char **v38;
  int v39;
  uint64_t v40;
  void **v41;
  void **v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  id **v46;
  uint64_t v47;
  id *v48;
  int v49;
  void **v50;
  id v51;
  id v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  void **v58;
  char **v59;
  int64x2_t v60;
  id v61;
  id v62;
  uint64_t v63;
  int64x2_t v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  unsigned int v69;
  uint64_t v70;
  _QWORD v71[2];
  unint64_t v72;
  int v73;
  id *v74;
  unint64_t v75;
  int64x2_t v76;

  result = (_QWORD *)re::RenderGraphDataStore::tryGet<re::BlurGenerationContext>(*((_QWORD *)a2 + 146), (int)"BlurGenerationContext", this[4]);
  if (result)
  {
    v4 = result;
    v59 = this;
    v74 = 0;
    v71[1] = 0;
    v72 = 0;
    v71[0] = 0;
    v73 = 0;
    if (*result)
    {
      v5 = result[2];
      v71[0] = *result;
      re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(v71, v5);
      ++v73;
      v6 = v4[2];
      if (v6 >= v72)
      {
        re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(v71, v4[2]);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *>((void **)v4[4], (void **)(v4[4] + 24 * v72), (uint64_t)v74);
        if (v72 != v6)
        {
          v10 = v4[4];
          v11 = v10 + 24 * v6;
          v12 = v10 + 24 * v72;
          v13 = &v74[3 * v72];
          do
          {
            *v13 = *(id *)v12;
            v13[1] = *(id *)(v12 + 8);
            *((_BYTE *)v13 + 16) = *(_BYTE *)(v12 + 16);
            v12 += 24;
            v13 += 3;
          }
          while (v12 != v11);
        }
      }
      else
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *>((void **)v4[4], (void **)(v4[4] + 24 * v6), (uint64_t)v74);
        if (v6 != v72)
        {
          v7 = 24 * v72 - 24 * v6;
          v8 = &v74[3 * v6 + 1];
          do
          {
            if (*v8)
            {

              *v8 = 0;
            }
            v9 = *(v8 - 1);
            if (v9)
            {

              *(v8 - 1) = 0;
            }
            v8 += 3;
            v7 -= 24;
          }
          while (v7);
        }
      }
      v72 = v6;
    }
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    v70 = 0x7FFFFFFFLL;
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v67, v14, 3);
    if (v72)
    {
      v15 = v74;
      v16 = &v74[3 * v72];
      do
      {
        v17 = *v15;
        v18 = (unint64_t)objc_msgSend(v17, sel_protectionOptions);
        v75 = v18;
        v19 = v15[1];
        if (v19)

        v20 = v67;
        v21 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v18 ^ (v18 >> 30))) >> 27));
        v22 = v21 ^ (v21 >> 31);
        if ((_QWORD)v67)
        {
          v23 = *(unsigned int *)(*((_QWORD *)&v67 + 1) + 4 * (v22 % DWORD2(v68)));
          if ((_DWORD)v23 != 0x7FFFFFFF)
          {
            while (*(_QWORD *)(v68 + (v23 << 6) + 16) != v18)
            {
              v23 = *(_DWORD *)(v68 + (v23 << 6) + 8) & 0x7FFFFFFF;
              if ((_DWORD)v23 == 0x7FFFFFFF)
                goto LABEL_24;
            }
            v26 = v68 + (v23 << 6) + 24;
            goto LABEL_36;
          }
LABEL_24:
          v64 = 0uLL;
          v65 = 0;
          v66 = 0;
          v63 = v14;
          re::DynamicArray<float *>::setCapacity(&v63, 0);
          ++v65;
          if (v20)
          {
            v24 = v22 % DWORD2(v68);
            v25 = *(unsigned int *)(*((_QWORD *)&v67 + 1) + 4 * v24);
            if ((_DWORD)v25 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v68 + (v25 << 6) + 16) != v18)
              {
                v25 = *(_DWORD *)(v68 + (v25 << 6) + 8) & 0x7FFFFFFF;
                if ((_DWORD)v25 == 0x7FFFFFFF)
                  goto LABEL_32;
              }
              v28 = v68 + (v25 << 6);
              goto LABEL_33;
            }
          }
          else
          {
            LODWORD(v24) = 0;
          }
        }
        else
        {
          v64 = 0uLL;
          v65 = 0;
          v66 = 0;
          v63 = v14;
          re::DynamicArray<float *>::setCapacity(&v63, 0);
          LODWORD(v24) = 0;
          ++v65;
        }
LABEL_32:
        v27 = re::HashTable<unsigned long long,re::DynamicArray<re::RenderGraphBlurGenerationData const*>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v67, v24, v22, &v75, (uint64_t)&v63);
        ++HIDWORD(v70);
        v28 = v68 + ((unint64_t)v27 << 6);
LABEL_33:
        v26 = v28 + 24;
        v19 = (id)v63;
        if (v63 && v66)
          v19 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v63 + 40))();
LABEL_36:
        v29 = *(_QWORD *)(v26 + 8);
        v30 = *(_QWORD *)(v26 + 16);
        if (v30 >= v29)
        {
          v31 = v30 + 1;
          if (v29 < v30 + 1)
          {
            if (*(_QWORD *)v26)
            {
              v32 = 2 * v29;
              v33 = v29 == 0;
              v34 = 8;
              if (!v33)
                v34 = v32;
              if (v34 <= v31)
                v35 = v31;
              else
                v35 = v34;
              re::DynamicArray<float *>::setCapacity((_QWORD *)v26, v35);
            }
            else
            {
              re::DynamicArray<float *>::setCapacity((_QWORD *)v26, v31);
              ++*(_DWORD *)(v26 + 24);
            }
          }
          v30 = *(_QWORD *)(v26 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8 * v30) = v15;
        *(_QWORD *)(v26 + 16) = v30 + 1;
        ++*(_DWORD *)(v26 + 24);
        if (v17)

        v15 += 3;
      }
      while (v15 != v16);
    }
    if (v69)
    {
      v36 = 0;
      v37 = (int *)(v68 + 8);
      v38 = v59;
      while (1)
      {
        v39 = *v37;
        v37 += 16;
        if (v39 < 0)
          break;
        if (v69 == ++v36)
        {
          LODWORD(v36) = v69;
          break;
        }
      }
    }
    else
    {
      LODWORD(v36) = 0;
      v38 = v59;
    }
    if (v69 != (_DWORD)v36)
    {
      v40 = v36;
      v58 = (void **)(v38 + 37);
      v41 = (void **)(v38 + 36);
      v42 = (void **)(v38 + 35);
      v43 = v68;
      v60 = vdupq_n_s64(1uLL);
      v56 = v69;
      while (1)
      {
        v44 = (uint64_t *)(v43 + (v40 << 6));
        re::RenderGraphContext::makeComputeCommandEncoder(a2, v44[2], &v62);
        v45 = v44[5];
        if (v45)
          break;
LABEL_71:
        re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v62);

        if (v56 <= (int)v36 + 1)
          v54 = v36 + 1;
        else
          v54 = v56;
        while (1)
        {
          v40 = (v36 + 1);
          if (v54 - 1 == (_DWORD)v36)
            break;
          LODWORD(v36) = v36 + 1;
          v55 = v40;
          if ((*(_DWORD *)(v43 + (v40 << 6) + 8) & 0x80000000) != 0)
            goto LABEL_78;
        }
        v55 = v54;
LABEL_78:
        LODWORD(v36) = v55;
        if (v56 == v55)
          goto LABEL_79;
      }
      v46 = (id **)v44[7];
      v47 = 8 * v45;
      while (1)
      {
        v48 = *v46;
        v61 = 0;
        v49 = *((unsigned __int8 *)v48 + 16);
        v50 = v42;
        if (*((_BYTE *)v48 + 16))
        {
          if (v49 == 2)
          {
            v50 = v58;
          }
          else
          {
            v51 = 0;
            v50 = v41;
            if (v49 != 1)
              goto LABEL_68;
          }
        }
        NS::SharedPtr<MTL::Texture>::operator=(&v61, v50);
        v51 = v61;
LABEL_68:
        objc_msgSend(v62, "setComputePipelineState:", v51);
        objc_msgSend(v62, "setTexture:atIndex:", *v48, 0);
        objc_msgSend(v62, "setTexture:atIndex:", v48[1], 1);
        v52 = objc_msgSend(*v48, sel_height);
        objc_msgSend(v62, "setThreadgroupMemoryLength:atIndex:", (8 * (_QWORD)v52 + 15) & 0xFFFFFFFFFFFFFFF0, 0);
        v53 = objc_msgSend(*v48, sel_height);
        LODWORD(v63) = objc_msgSend(*v48, sel_width);
        v63 = v63;
        v64 = v60;
        v75 = v53;
        v76 = v60;
        objc_msgSend(v62, "dispatchThreadgroups:threadsPerThreadgroup:", &v63, &v75);
        if (v61)

        ++v46;
        v47 -= 8;
        if (!v47)
          goto LABEL_71;
      }
    }
LABEL_79:
    re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v67);
    return (_QWORD *)re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)v71);
  }
  return result;
}

void re::RenderGraphBlurGenerationNode::~RenderGraphBlurGenerationNode(re::RenderGraphBlurGenerationNode *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {

    *((_QWORD *)this + 37) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 36);
  if (v3)
  {

    *((_QWORD *)this + 36) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 35);
  if (v4)
  {

    *((_QWORD *)this + 35) = 0;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphBlurGenerationNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {

    *((_QWORD *)this + 37) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 36);
  if (v3)
  {

    *((_QWORD *)this + 36) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 35);
  if (v4)
  {

    *((_QWORD *)this + 35) = 0;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphBlurGenerationNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *,re::RenderGraphBlurGenerationData *>(void **result, void **a2, uint64_t a3)
{
  void **v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)a3, v5);
      result = NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 8), v5 + 1);
      *(_BYTE *)(a3 + 16) = *((_BYTE *)v5 + 16);
      v5 += 3;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::RenderGraphBlurGenerationData const*>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::DynamicArray<re::RenderGraphBlurGenerationData const*>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicArray<re::ecs2::MeshSortingComponent *>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v26 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

_QWORD *re::ProjectiveShadowProvider::ProjectiveShadowProvider(_QWORD *a1, const re::DynamicString *a2, const re::AssetHandle *a3)
{
  _OWORD v6[2];

  re::DynamicString::DynamicString((re::DynamicString *)v6, a2);
  *a1 = off_24ED381E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 1), (const re::DynamicString *)v6);
  if (*(_QWORD *)&v6[0])
  {
    if ((BYTE8(v6[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v6[0] + 40))();
    memset(v6, 0, sizeof(v6));
  }
  *a1 = off_24ED87E90;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 5), a3);
  return a1;
}

unint64_t re::ProjectiveShadowProvider::prepareFrame(re::ProjectiveShadowProvider *this, const char *__s, const char *a3, re::RenderFrame *a4)
{
  size_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  re *v20;
  const char *v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v23);
    v8 = (v24 - 0x61C8864680B583E9 + (v23 << 6) + (v23 >> 2)) ^ v23;
  }
  else
  {
    v8 = 0;
  }
  v9 = strlen(a3);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)a3, v9, 0, &v23);
    v10 = ((v24 - 0x61C8864680B583E9 + (v23 << 6) + (v23 >> 2)) ^ v23) - 0x61C8864680B583E9;
  }
  else
  {
    v10 = 0x9E3779B97F4A7C17;
  }
  v11 = atomic_load((unsigned __int8 *)&qword_254122070);
  if ((v11 & 1) == 0)
  {
    v20 = (re *)__cxa_guard_acquire(&qword_254122070);
    if ((_DWORD)v20)
    {
      _MergedGlobals_475 = re::getCombinedScopeHash(v20, v21, v22);
      __cxa_guard_release(&qword_254122070);
    }
  }
  v12 = (unint64_t)"N2re28ProjectiveShadowMapDimensionE";
  if (((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x8000000000000000) != 0)
  {
    v13 = (unsigned __int8 *)((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x7FFFFFFFFFFFFFFFLL);
    v14 = 5381;
    do
    {
      v12 = v14;
      v15 = *v13++;
      v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  v23 = (_MergedGlobals_475 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)a4 + 96, (uint64_t *)&v23);
  if (result)
  {
    if (*(_QWORD *)result && (v17 = *(unsigned int *)(*(_QWORD *)result + 8), (_DWORD)v17))
    {
      v18 = ((((v8 >> 2) + (v8 << 6) + v10) ^ v8) - 0x3E565E086D0568D5) ^ 0x1875534DAAA41C50;
      v19 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
      return ((v18 << 6) - 0x61C8864680B583E9 + (v18 >> 2) + (v19 ^ (v19 >> 31))) ^ v18;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void re::ProjectiveShadowProvider::provide(re::ProjectiveShadowProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  re *RenderGraph;
  uint64_t *v24;
  _QWORD *v25;
  re::RenderGraphNode *v26;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  re::RenderGraphNode *v31;
  uint64_t *v32;
  __int128 v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  uint64_t v37;
  re::RenderGraphNode *v38;
  re::DynamicString *v39;
  __int128 v40;
  re *v41;
  const char *v42;
  const char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[48];
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_254122080);
  if ((v8 & 1) == 0)
  {
    v41 = (re *)__cxa_guard_acquire(&qword_254122080);
    if ((_DWORD)v41)
    {
      qword_254122078 = re::getCombinedScopeHash(v41, v42, v43);
      __cxa_guard_release(&qword_254122080);
    }
  }
  v9 = (unint64_t)"N2re28ProjectiveShadowMapDimensionE";
  if (((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x8000000000000000) != 0)
  {
    v10 = (unsigned __int8 *)((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x7FFFFFFFFFFFFFFFLL);
    v11 = 5381;
    do
    {
      v9 = v11;
      v12 = *v10++;
      v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  v13 = 0x7FFFFFFF;
  if (*((_QWORD *)a4 + 12))
  {
    v14 = (qword_254122078 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
    v15 = *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * (v14 % *((unsigned int *)a4 + 30)));
    if (v15 != 0x7FFFFFFF)
    {
      v16 = *((_QWORD *)a4 + 14);
      v13 = *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * (v14 % *((unsigned int *)a4 + 30)));
      if (*(_QWORD *)(v16 + 24 * v15 + 8) != v14)
      {
        while (1)
        {
          v13 = *(_DWORD *)(v16 + 24
                                * *(unsigned int *)(*((_QWORD *)a4 + 13) + 4 * (v14 % *((unsigned int *)a4 + 30)))) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v16 + 24 * v13 + 8) == v14)
            goto LABEL_12;
        }
        v13 = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  v17 = *(_QWORD *)(*((_QWORD *)a4 + 14) + 24 * v13 + 16);
  *(_QWORD *)v60 = 0xA00000000;
  *(_DWORD *)&v60[8] = 2;
  *(_QWORD *)&v60[12] = *(_QWORD *)(v17 + 8);
  *(_QWORD *)&v60[28] = -1;
  *(_QWORD *)&v60[20] = -1;
  v60[36] = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)&v60[40] = _D1;
  v61 = xmmword_226135530;
  v62 = xmmword_22619BD90;
  LODWORD(v63) = -1;
  v64 = 0;
  *(_QWORD *)&v65 = 0;
  BYTE8(v65) = 0;
  v53 = *(_OWORD *)v60;
  v54 = *(_OWORD *)&v60[16];
  v57 = xmmword_22619BD90;
  v58 = v63;
  v59 = v65;
  v55 = *(_OWORD *)&v60[32];
  v56 = xmmword_226135530;
  HIDWORD(v53) = *(_DWORD *)&v60[12] >> 1;
  LODWORD(v54) = *(_DWORD *)&v60[12] >> 1;
  LODWORD(v57) = 2;
  v47[0] = v53;
  v47[1] = v54;
  v48 = *(_OWORD *)&v60[32];
  v49 = xmmword_226135530;
  v50 = v57;
  v51 = v63;
  v52 = v65;
  BYTE4(v48) = 1;
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v60, "ProjectiveShadowMapTexture", &v46);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v53, "DownsampledShadowMapTexture", &v45);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)v47, "BlurredShadowMapTexture", &v44);
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "ProjectiveShadowRenderGraph", 3uLL);
  v24 = re::globalAllocators(RenderGraph);
  v25 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 256, 8);
  v26 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v25, "GenerateProjectiveShadowMap");
  *(_QWORD *)v26 = &off_24ED851F0;
  *(_QWORD *)&v66 = v26;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v66);
  v25[3] = *((_QWORD *)RenderGraph + 10);
  v25[4] = *((_QWORD *)RenderGraph + 12);
  v25[6] = *((_QWORD *)RenderGraph + 13);
  v66 = v46;
  v67 = 0x100000000;
  __asm { FMOV            V0.4S, #1.0 }
  v68 = _Q0;
  v69 = 0;
  v70 = 0;
  re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v25 + 27), (uint64_t)&v66);
  v29 = re::globalAllocators(v28);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29[2] + 32))(v29[2], 320, 8);
  v31 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v30, "DownsampleShadowMap");
  *(_QWORD *)v31 = &off_24ED85298;
  *((_QWORD *)v31 + 32) = 0;
  *((_QWORD *)v31 + 33) = -1;
  *((_QWORD *)v31 + 34) = 0;
  *((_QWORD *)v31 + 35) = -1;
  v32 = (uint64_t *)((char *)v31 + 288);
  *((_OWORD *)v31 + 18) = 0u;
  *((_OWORD *)v31 + 19) = 0u;
  *(_QWORD *)&v66 = v31;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v66);
  *(_QWORD *)(v30 + 24) = *((_QWORD *)RenderGraph + 10);
  *(_QWORD *)(v30 + 32) = *((_QWORD *)RenderGraph + 12);
  *(_QWORD *)(v30 + 48) = *((_QWORD *)RenderGraph + 13);
  v33 = v45;
  *(_OWORD *)(v30 + 256) = v46;
  *(_OWORD *)(v30 + 272) = v33;
  v34 = (uint64_t *)((char *)this + 40);
  re::AssetHandle::operator=(v32, v34);
  v35 = (re *)re::DownsampleShadowMapNode::configure((void **)v30, a2, a3, a4);
  v36 = re::globalAllocators(v35);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36[2] + 32))(v36[2], 352, 8);
  v38 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v37, "BlurShadowMap");
  *(_QWORD *)v38 = off_24ED85340;
  *((_QWORD *)v38 + 32) = 0;
  *((_QWORD *)v38 + 33) = -1;
  *((_QWORD *)v38 + 34) = 0;
  *((_QWORD *)v38 + 35) = -1;
  v39 = (re::RenderGraphNode *)((char *)v38 + 288);
  *((_OWORD *)v38 + 18) = 0u;
  *((_OWORD *)v38 + 19) = 0u;
  re::DynamicString::setCapacity(v39, 0);
  *(_OWORD *)(v37 + 320) = 0u;
  *(_OWORD *)(v37 + 336) = 0u;
  *(_QWORD *)&v66 = v37;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v66);
  *(_QWORD *)(v37 + 24) = *((_QWORD *)RenderGraph + 10);
  *(_QWORD *)(v37 + 32) = *((_QWORD *)RenderGraph + 12);
  *(_QWORD *)(v37 + 48) = *((_QWORD *)RenderGraph + 13);
  v40 = v45;
  *(_OWORD *)(v37 + 256) = v44;
  *(_OWORD *)(v37 + 272) = v40;
  re::AssetHandle::operator=((uint64_t *)(v37 + 320), v34);
  *(_QWORD *)&v66 = "onePassGaussianBlur9Tap";
  *((_QWORD *)&v66 + 1) = 23;
  re::DynamicString::operator=(v39, (uint64_t)&v66);
  (*(void (**)(uint64_t, const char *, const char *, re::RenderFrame *))(*(_QWORD *)v37 + 80))(v37, a2, a3, a4);
  *(_QWORD *)&v66 = 0x1C44D2C7F312E749;
  re::RenderFrame::addTargetOutput(a4, (uint64_t *)&v66, (double *)&v44, "projectiveShadowMapScope");
}

void re::ProjectiveShadowProvider::~ProjectiveShadowProvider(re::ProjectiveShadowProvider *this)
{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::ProjectiveShadowProvider *)((char *)this + 40));
  *(_QWORD *)this = off_24ED381E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::ProjectiveShadowProvider *)((char *)this + 40));
  *(_QWORD *)this = off_24ED381E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  JUMPOUT(0x2276933B8);
}

void re::GuidedFilterOcclusionManager::generatePerFrameGuidedFilterOcclusionData(re::GuidedFilterOcclusionManager *this@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  float v33;
  _BOOL4 v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  uint64_t v41;
  int32x2_t v42;
  float32x4_t v43;

  *(_QWORD *)a2 = &off_24ED68B88;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (void **)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *((_QWORD *)this + 1);
    if (v5)
    {
      NS::SharedPtr<MTL::Texture>::operator=(v4, (void **)this);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a2 + 24), (void **)this + 1);
      v6 = *((_OWORD *)this + 2);
      *(_OWORD *)(a2 + 48) = *((_OWORD *)this + 1);
      *(_OWORD *)(a2 + 64) = v6;
      v7 = *((_OWORD *)this + 3);
      v8 = *((_OWORD *)this + 4);
      *(_OWORD *)(a2 + 80) = v7;
      *(_OWORD *)(a2 + 96) = v8;
      LODWORD(v7) = *((_DWORD *)this + 54);
      *(_BYTE *)(a2 + 184) = *((_BYTE *)this + 144);
      v9 = exp2((double)(unint64_t)v7);
      *(double *)v10.i64 = simd_quaternion(*((simd_float3x3 *)this + 5));
      v43 = v10;
      *(double *)v11.i64 = simd_quaternion(*(simd_float3x3 *)((char *)this + 80));
      v12 = vmulq_f32(v43, (float32x4_t)xmmword_2261923B0);
      v13 = (int8x16_t)vnegq_f32(v11);
      v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v11, vtrn1q_s32((int32x4_t)v11, (int32x4_t)v13));
      v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v11, v13, 8uLL), *(float32x2_t *)v12.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), v12.f32[0]);
      v16 = (float32x4_t)vrev64q_s32((int32x4_t)v11);
      v16.i32[0] = v13.i32[1];
      v16.i32[3] = v13.i32[2];
      LODWORD(v17) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v11, v12, 3), v16, v12, 2), v15).i32[3];
      if (v17 > 1.0)
        v17 = 1.0;
      v18 = acosf(v17);
      v19 = (float)((float)(v18 + v18) * 180.0) / 3.14159265;
      if (*((float *)this + 48) >= v19)
      {
        v20 = *((_QWORD *)this + 38) + 1;
        v21 = v20 < 2;
      }
      else
      {
        v20 = 0;
        v21 = 1;
      }
      *((_QWORD *)this + 38) = v20;
      *(_BYTE *)(a2 + 185) = v21;
      v22 = *((_OWORD *)this + 6);
      *((_OWORD *)this + 15) = *((_OWORD *)this + 5);
      *((_OWORD *)this + 16) = v22;
      v23 = *((_OWORD *)this + 8);
      *((_OWORD *)this + 17) = *((_OWORD *)this + 7);
      *((_OWORD *)this + 18) = v23;
      v24 = objc_msgSend(*(id *)(a2 + 16), sel_width, *(_OWORD *)&v43);
      v25 = objc_msgSend(*(id *)(a2 + 16), sel_height);
      v26 = COERCE_FLOAT(*((_QWORD *)this + 28));
      v27 = COERCE_FLOAT(HIDWORD(*((_QWORD *)this + 28)));
      if (v26 <= v27)
        v28 = COERCE_FLOAT(HIDWORD(*((_QWORD *)this + 28)));
      else
        v28 = COERCE_FLOAT(*((_QWORD *)this + 28));
      if (v26 >= v27)
        v26 = COERCE_FLOAT(HIDWORD(*((_QWORD *)this + 28)));
      v30 = *((_DWORD *)this + 52);
      v29 = *((_DWORD *)this + 53);
      v31 = vcvtas_u32_f32((float)((float)v29 * (float)v26) / (float)v28);
      v32 = v30 * v25 / v24;
      v33 = round((float)(acosf(*((float *)this + 4)) * 180.0) / 3.14159265);
      v34 = v33 == 90.0;
      if (v33 == -90.0)
        v34 = 1;
      v35 = !v34;
      if (v34)
        v36 = v31;
      else
        v36 = v29;
      if (v35)
        v37 = v31;
      else
        v37 = v29;
      v38 = 16 * v9;
      LODWORD(v5) = v36 / v38 * v38;
      v39 = v37 / v38 * v38;
      *(_DWORD *)(a2 + 160) = v5;
      *(_DWORD *)(a2 + 164) = v39;
      *(_DWORD *)(a2 + 176) = v5 / v9;
      *(_DWORD *)(a2 + 180) = v39 / v9;
      *(_DWORD *)(a2 + 168) = v30;
      *(_DWORD *)(a2 + 172) = v32;
      v40 = *((_OWORD *)this + 10);
      LODWORD(v40) = HIDWORD(v40);
      HIDWORD(v40) = *((_OWORD *)this + 10);
      *(_QWORD *)(a2 + 152) = *((_QWORD *)this + 25);
      v41 = *((_QWORD *)this + 23);
      v42 = vrev64_s32(*(int32x2_t *)((char *)this + 176));
      *(_OWORD *)(a2 + 112) = v40;
      *(_DWORD *)(a2 + 144) = *((_DWORD *)this + 49);
      *(int32x2_t *)(a2 + 128) = v42;
      *(_QWORD *)(a2 + 136) = v41;
      *(_DWORD *)(a2 + 148) = *((_DWORD *)this + 48);
      LOBYTE(v5) = 1;
    }
  }
  *(_BYTE *)(a2 + 8) = v5;
}

uint64_t re::SceneUnderstandingManager::setDepthFeatheringEnabled(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 8) != a2)
    *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t re::SceneUnderstandingManager::isDepthFeatheringEnabled(re::SceneUnderstandingManager *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionSupportEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 9) = a2;
  return this;
}

uint64_t re::SceneUnderstandingManager::isGuidedFilterOcclusionSupportEnabled(re::SceneUnderstandingManager *this)
{
  return *((unsigned __int8 *)this + 9);
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 10) = a2;
  return this;
}

uint64_t re::SceneUnderstandingManager::isGuidedFilterOcclusionEnabled(re::SceneUnderstandingManager *this)
{
  return *((unsigned __int8 *)this + 10);
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionUseSingleMTLEvent(uint64_t this, char a2)
{
  *(_BYTE *)(this + 160) = a2;
  return this;
}

void **re::SceneUnderstandingManager::setGuidedFilterOcclusionCameraFeed(uint64_t a1, void **a2, void **a3)
{
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 16), a2);
  return NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 24), a3);
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionCameraFeedCorrectionMatrix(uint64_t this, simd_float4x4 a2)
{
  *(simd_float4x4 *)(this + 32) = a2;
  return this;
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionCameraWorldTransformMatrix(uint64_t this, simd_float4x4 a2)
{
  *(simd_float4x4 *)(this + 96) = a2;
  return this;
}

uint64_t re::SceneUnderstandingManager::setGuidedFilterOcclusionViewportSize(uint64_t result, double a2)
{
  *(double *)(result + 240) = a2;
  return result;
}

void re::SceneUnderstandingManager::getGuidedFilterOcclusionData(re::SceneUnderstandingManager *this@<X0>, uint64_t a2@<X8>)
{
  re::GuidedFilterOcclusionManager::generatePerFrameGuidedFilterOcclusionData((re::SceneUnderstandingManager *)((char *)this + 16), a2);
}

double re::SceneUnderstandingManager::SceneUnderstandingManager(re::SceneUnderstandingManager *this)
{
  double result;

  *(_QWORD *)this = &off_24ED87ED8;
  *((_WORD *)this + 4) = 0;
  *((_BYTE *)this + 10) = 0;
  *((_BYTE *)this + 160) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 11) = xmmword_22619C3B0;
  *((_QWORD *)this + 24) = 0x400000007;
  *((_QWORD *)this + 25) = 0x3EE147AE3F19999ALL;
  *((_QWORD *)this + 26) = 0x93F19999ALL;
  *((_QWORD *)this + 27) = 0x3E6147AE3F19999ALL;
  *((_QWORD *)this + 28) = 0x20000000200;
  *((_DWORD *)this + 58) = 1;
  *((_QWORD *)this + 30) = 0;
  *((_OWORD *)this + 16) = xmmword_2260E5F10;
  *((_OWORD *)this + 17) = xmmword_2260E5F20;
  result = 0.0;
  *((_OWORD *)this + 18) = xmmword_2260E5F40;
  *((_OWORD *)this + 19) = xmmword_2260E5D70;
  *((_QWORD *)this + 40) = 0;
  return result;
}

void re::SceneUnderstandingManager::~SceneUnderstandingManager(re::SceneUnderstandingManager *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED87ED8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {

    *((_QWORD *)this + 2) = 0;
  }
}

{
  re::SceneUnderstandingManager::~SceneUnderstandingManager(this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::allocInfo_SceneUnderstandingService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_476);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_476))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122090, 0);
    *(uint64_t *)((char *)&qword_2541220A0 + 6) = 0;
    qword_2541220A0 = 0;
    qword_2541220B0 = 0;
    qword_2541220B8 = 0xFFFFFFFFLL;
    qword_254122090 = (uint64_t)&off_24ED7DAA8;
    qword_2541220C0 = (uint64_t)"SceneUnderstandingService";
    dword_2541220C8 = 0;
    *(_OWORD *)&algn_2541220CC[4] = 0u;
    *(_OWORD *)&algn_2541220CC[20] = 0u;
    *(_OWORD *)&algn_2541220CC[36] = 0u;
    qword_254122100 = 0;
    __cxa_guard_release(&_MergedGlobals_476);
  }
  return &qword_254122090;
}

void re::initInfo_SceneUnderstandingService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x751DCB99112AFALL;
  v5[1] = "SceneUnderstandingService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_SceneUnderstandingService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_SceneUnderstandingService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingService", (uint64_t (*)(re::internal *))re::allocInfo_SceneUnderstandingService, (re::IntrospectionBase *(*)(void))re::initInfo_SceneUnderstandingService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SceneUnderstandingService>, this);
}

re::TypeRegistry *re::createTypeRegistry(uint64_t a1, re::Allocator *a2, re::Allocator *a3)
{
  re::Allocator *v4;
  re::TypeRegistry *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  re *v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t *v45;
  uint64_t v46;
  _BYTE *v47;
  re::Allocator *v48;
  re::TypeRegistry *v49;
  uint64_t v50;
  uint64_t v51;
  StringID v52;
  StringID __s;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  _QWORD v57[2];
  _OWORD v58[30];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  re::TypeRegistry *v62;
  re::TypeRegistry *v63;
  re::TypeRegistry *v64;
  re::TypeRegistry *v65;
  re::TypeRegistry *v66;
  re::TypeRegistry *v67;
  re::TypeRegistry *v68;
  re::TypeRegistry *v69;
  re::TypeRegistry *v70;
  _QWORD v71[3];
  re::TypeRegistry *v72;
  _QWORD v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint8_t buf[16];
  uint64_t v79;

  v4 = a2;
  v79 = *MEMORY[0x24BDAC8D0];
  v6 = (re::TypeRegistry *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 864, 8);
  v72 = re::TypeRegistry::TypeRegistry(v6, v4);
  v73[0] = 0;
  v73[1] = 0xFFFFFFFFLL;
  *(_QWORD *)&v74 = 0;
  *(_QWORD *)&v75 = 0;
  DWORD2(v75) = -1;
  *(_QWORD *)&v76 = 0;
  DWORD2(v76) = -1;
  *(_QWORD *)&v77 = 0;
  *((_QWORD *)&v77 + 1) = 0xFFFFFFFFLL;
  v71[0] = v4;
  v71[1] = a3;
  v71[2] = a1;
  *(_QWORD *)&v58[0] = 6059476;
  *((_QWORD *)&v58[0] + 1) = "BOOL";
  re::TypeBuilderHelper::registerBasic<BOOL>(v72, (uint64_t *)v58, &v70);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&v58[0] = 6104748;
  *((_QWORD *)&v58[0] + 1) = "char";
  re::TypeBuilderHelper::registerBasic<BOOL>(v6, (uint64_t *)v58, &v69);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&v58[0] = 0x161EEF7A2;
  *((_QWORD *)&v58[0] + 1) = "double";
  re::TypeBuilderHelper::registerBasic<double>(v6, (uint64_t *)v58, &v68);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&v58[0] = 195052728;
  *((_QWORD *)&v58[0] + 1) = "float";
  re::TypeBuilderHelper::registerBasic<float>(v6, (uint64_t *)v58, &v67);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&v58[0] = 218827000;
  *((_QWORD *)&v58[0] + 1) = "short";
  re::TypeBuilderHelper::registerBasic<short>(v6, (uint64_t *)v58, &v66);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&v58[0] = 208862;
  *((_QWORD *)&v58[0] + 1) = "int";
  re::TypeBuilderHelper::registerBasic<int>(v6, (uint64_t *)v58, &v65);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&v58[0] = 6655224;
  *((_QWORD *)&v58[0] + 1) = "long";
  re::TypeBuilderHelper::registerBasic<long>(v6, (uint64_t *)v58, &v64);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&v58[0] = 0x1947BDF6CLL;
  *((_QWORD *)&v58[0] + 1) = "size_t";
  re::TypeBuilderHelper::registerBasic<long>(v6, (uint64_t *)v58, &v63);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&v58[0] = 0x2CE93EC744;
  *((_QWORD *)&v58[0] + 1) = "int64_t";
  re::TypeBuilderHelper::registerBasic<long>(v6, (uint64_t *)v58, &v62);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&__s.var0 = 0x31CD534126;
  __s.var1 = "uint8_t";
  re::TypeBuilderHelper::registerBasic<BOOL>(v6, (uint64_t *)&__s, (re::TypeRegistry **)v58);
  v74 = v58[0];
  re::StringID::destroyString((re::StringID *)&__s);
  *(_QWORD *)&__s.var0 = 0x607DD0D4E68;
  __s.var1 = "uint16_t";
  re::TypeBuilderHelper::registerBasic<short>(v6, (uint64_t *)&__s, (re::TypeRegistry **)v58);
  v75 = v58[0];
  re::StringID::destroyString((re::StringID *)&__s);
  *(_QWORD *)&__s.var0 = 0x607DD0F01DCLL;
  __s.var1 = "uint32_t";
  re::TypeBuilderHelper::registerBasic<int>(v6, (uint64_t *)&__s, (re::TypeRegistry **)v58);
  v76 = v58[0];
  re::StringID::destroyString((re::StringID *)&__s);
  *(_QWORD *)&__s.var0 = 0x607DD11CB1ALL;
  __s.var1 = "uint64_t";
  re::TypeBuilderHelper::registerBasic<long>(v6, (uint64_t *)&__s, (re::TypeRegistry **)v58);
  v77 = v58[0];
  re::StringID::destroyString((re::StringID *)&__s);
  *(_QWORD *)&v58[0] = 218827000;
  *((_QWORD *)&v58[0] + 1) = "short";
  *(_QWORD *)&__s.var0 = 0x2CE93A4A92;
  __s.var1 = "int16_t";
  re::TypeRegistry::declareTypeAlias(v6, (const re::StringID *)v58, &__s);
  re::StringID::destroyString((re::StringID *)&__s);
  re::StringID::destroyString((re::StringID *)v58);
  *(_QWORD *)&v58[0] = 208862;
  *((_QWORD *)&v58[0] + 1) = "int";
  *(_QWORD *)&__s.var0 = 0x2CE93BFE06;
  __s.var1 = "int32_t";
  re::TypeRegistry::declareTypeAlias(v6, (const re::StringID *)v58, &__s);
  re::StringID::destroyString((re::StringID *)&__s);
  re::StringID::destroyString((re::StringID *)v58);
  re::TypeBuilderHelper::registerCString(v6, &v61);
  re::TypeBuilderHelper::registerDynamicString(v6, &v60);
  re::TypeBuilderHelper::registerStringID(v6, &v59);
  re::TypeBuilder::TypeBuilder((re::TypeBuilder *)v58, a3);
  *(_QWORD *)&__s.var0 = 0x258C98EAAF29A10ALL;
  __s.var1 = "CallbackSerializerAttribute";
  v57[0] = 0;
  v57[1] = 0xFFFFFFFFLL;
  re::TypeBuilder::beginObjectType((uint64_t)v58, (uint64_t *)&__s, 1, 1, 8uLL, 8uLL, (uint64_t)v57);
  re::StringID::destroyString((re::StringID *)&__s);
  re::TypeBuilder::commitTo((re::TypeBuilder *)v58, v6, v73);
  v8 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v11 = *v10;
      v10 += 14;
      if (v11 < 0)
        break;
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v12 = *(_DWORD *)(a1 + 32);
  if ((_DWORD)v8 != (_DWORD)v9)
  {
    v13 = v9;
    do
    {
      if (!*(_QWORD *)&__s.var0)
        goto LABEL_71;
      v12 = *(_DWORD *)(a1 + 32);
      if (v12 <= (int)v9 + 1)
        v14 = v9 + 1;
      else
        v14 = *(_DWORD *)(a1 + 32);
      while (1)
      {
        v13 = (v9 + 1);
        if (v14 - 1 == (_DWORD)v9)
          break;
        LODWORD(v9) = v9 + 1;
        v15 = v13;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v13 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      v15 = v14;
LABEL_17:
      LODWORD(v9) = v15;
    }
    while ((_DWORD)v8 != v15);
  }
  v48 = v4;
  v49 = v6;
  v16 = 0;
  if (v12)
  {
    v17 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v18 = *v17;
      v17 += 14;
      if (v18 < 0)
        break;
      if (v12 == ++v16)
      {
        LODWORD(v16) = v12;
        break;
      }
    }
  }
  if (v12 == (_DWORD)v16)
    goto LABEL_24;
  v19 = v16;
  v20 = v12;
LABEL_26:
  v21 = *(_QWORD *)(a1 + 16);
  v22 = v21 + 56 * v19;
  v23 = *(_QWORD *)(v22 + 48);
  if (*(_DWORD *)(v23 + 16) != 8)
    goto LABEL_60;
  v24 = *(unsigned int *)(v23 + 56);
  if (!(_DWORD)v24)
    goto LABEL_60;
  v25 = *(_QWORD *)(v23 + 64);
  v50 = v25 + 8 * v24;
  v26 = v21 + 56 * v19;
  v45 = (uint64_t *)(v26 + 32);
  v46 = v22 + 25;
  v47 = (_BYTE *)(v26 + 24);
  while (1)
  {
    if (**(_DWORD **)v25 == 2)
    {
      v27 = *(unsigned int **)(*(_QWORD *)v25 + 8);
      if (v27)
      {
        v28 = *v27;
        if (*v27)
          break;
      }
    }
LABEL_58:
    v25 += 8;
    if (v25 == v50)
    {
      v20 = *(_DWORD *)(a1 + 32);
LABEL_60:
      if (v20 <= (int)v16 + 1)
        v41 = v16 + 1;
      else
        v41 = v20;
      while (1)
      {
        v19 = (v16 + 1);
        if (v41 - 1 == (_DWORD)v16)
          break;
        LODWORD(v16) = v16 + 1;
        v42 = v19;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v19 + 8) & 0x80000000) != 0)
          goto LABEL_67;
      }
      v42 = v41;
LABEL_67:
      LODWORD(v16) = v42;
      if (v12 == v42)
      {
LABEL_24:
        v6 = v49;
        goto LABEL_73;
      }
      goto LABEL_26;
    }
  }
  v29 = *((_QWORD *)v27 + 1);
  v51 = v29 + 40 * v28;
  v30 = v29 + 8;
  while (1)
  {
    v31 = v30 - 8;
    *(_QWORD *)&__s.var0 = *(_QWORD *)(v30 - 8);
    v54 = 0;
    v32 = *(_QWORD *)(v30 + 8);
    if (v32)
    {
      v33 = (*(_BYTE *)(v32 + 8) & 1) != 0 ? *(const char **)(v32 + 16) : (const char *)(v32 + 9);
      v34 = re::SerializedReference<re::IntrospectionBase const*>::setString(&__s.var1, v33, *(_QWORD *)v32);
    }
    else
    {
      v34 = (re *)re::SerializedReference<re::IntrospectionBase const*>::reset(&__s.var1);
      __s.var1 = *(char **)v30;
    }
    v35 = *(_QWORD *)(v30 + 16);
    v56 = *(_DWORD *)(v30 + 24);
    v55 = v35;
    if (*(_QWORD *)&__s.var0
      && **(_BYTE **)&__s.var0
    {
      if (*(_QWORD *)buf)
      {
        re::TypeRegistry::makeStringID(v49, *(const char **)&__s.var0, (re::StringID *)&v52);
        re::TypeRegistry::overridePolymorphicObjectName((uint64_t)v49, (uint64_t)buf, &v52);
        re::StringID::destroyString((re::StringID *)&v52);
        re::TypeRegistry::overrideCustomClassID((uint64_t)v49, (uint64_t)buf, v55);
        v36 = 0;
        goto LABEL_46;
      }
    }
    else
    {
      v37 = *re::foundationSerializationLogObjects(v34);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v40 = v46;
        if ((*v47 & 1) != 0)
          v40 = *v45;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v40;
        _os_log_error_impl(&dword_224FE9000, v37, OS_LOG_TYPE_ERROR, "Invalid polymorphic table in type \"%s\"", buf, 0xCu);
      }
    }
    v36 = 4;
LABEL_46:
    __s.var1 = 0;
    v38 = v54;
    if (v54)
    {
      v39 = *v54;
      if (*v54)
      {
        if ((v54[1] & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v39 + 40))(*v54, v54[2]);
        *v38 = 0u;
        v38[1] = 0u;
      }
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v39 + 40))(v39, v38);
    }
    if (v36)
      break;
    v30 += 40;
    if (v31 + 40 == v51)
      goto LABEL_58;
  }
  v43 = v36 == 4;
  v4 = v48;
  v6 = v49;
  if (!v43)
    goto LABEL_73;
LABEL_71:
  if (v6)
  {
    re::TypeRegistry::~TypeRegistry(v6);
    (*(void (**)(re::Allocator *, re::TypeRegistry *))(*(_QWORD *)v4 + 40))(v4, v6);
    v6 = 0;
  }
LABEL_73:
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v58, v7);
  return v6;
}

void `anonymous namespace'::getTypeID(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const re::IntrospectionStructure *v19;
  unsigned int StructureVersion;
  re *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  re *v28;
  NSObject *v29;
  unint64_t TypeID;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  BOOL v39;
  unint64_t v40;
  re *v41;
  uint64_t v42;
  int v43;
  __int128 *v44;
  re *v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  char *var1;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  const char *v64;
  _DWORD *v65;
  uint64_t v66;
  const char *v67;
  uint64_t *v69;
  re *v70;
  uint64_t *v71;
  re *v72;
  char *v73;
  const char *v74;
  uint64_t *v75;
  _DWORD *v76;
  const char *v77;
  const char *v78;
  _anonymous_namespace_ *v79;
  uint64_t v80;
  re *v81;
  NSObject *v82;
  uint64_t v83;
  int v84;
  char v85;
  __int128 *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  StringID v90;
  _QWORD v91[2];
  StringID v92;
  uint64_t v93;
  __int128 v94;
  _QWORD v95[2];
  _QWORD v96[2];
  _QWORD v97[2];
  uint64_t v98;
  re *v99;
  uint64_t v100;
  re *v101;
  uint64_t v102;
  re *v103;
  uint64_t v104;
  StringID v105;
  __int128 v106;
  __int128 v107;
  _QWORD v108[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  re **v112;
  re *v113[2];
  uint64_t v114[2];
  uint64_t v115;
  char v116;
  StringID v117;
  __int128 v118;
  char v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _QWORD v123[2];
  _QWORD v124[2];
  __int128 v125;
  StringID v126;
  _QWORD v127[2];
  StringID v128;
  _QWORD v129[2];
  StringID v130;
  _QWORD v131[2];
  StringID v132;
  _QWORD v133[2];
  StringID v134;
  _QWORD v135[2];
  StringID v136;
  __int128 buf;
  unsigned int v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v8 = a4[3];
  v9 = *(char **)(a2 + 16);
  v10 = a2 + 9;
  if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    v9 = (char *)(a2 + 9);
  if (v9)
  {
    v11 = *v9;
    if (*v9)
    {
      v12 = v9[1];
      if (v12)
      {
        v13 = (unsigned __int8 *)(v9 + 2);
        do
        {
          v11 = 31 * v11 + v12;
          v14 = *v13++;
          v12 = v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  *((_QWORD *)&buf + 1) = v9;
  *(_QWORD *)&buf = 2 * v11;
  v15 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v8 + 200, &buf);
  if (v15)
  {
    v16 = *v15;
    re::StringID::destroyString((re::StringID *)&buf);
    if (v8)
    {
      *a1 = v8;
      a1[1] = v16;
      return;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&buf);
  }
  if (!a3)
  {
    v28 = (re *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4[2], a2);
    if (!v28 || (a3 = *(_QWORD *)v28) == 0)
    {
      v29 = *re::foundationSerializationLogObjects(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        if ((*(_QWORD *)(a2 + 8) & 1) != 0)
          v54 = *(_QWORD *)(a2 + 16);
        else
          v54 = v10;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v54;
        _os_log_error_impl(&dword_224FE9000, v29, OS_LOG_TYPE_ERROR, "Invalid introspection info. Type name: \"%s\"", (uint8_t *)&buf, 0xCu);
      }
      *a1 = 0;
      a1[1] = 0xFFFFFFFFLL;
      return;
    }
  }
  v17 = *(int *)(a3 + 16);
  if (v17 > 0xD)
    v18 = 0;
  else
    v18 = byte_22619C44E[v17];
  re::StringID::StringID((re::StringID *)&v90, (const re::DynamicString *)a2);
  if (*(_DWORD *)(a3 + 16) == 8)
    StructureVersion = re::introspectionFindStructureVersion((re *)a3, v19);
  else
    StructureVersion = 1;
  re::TypeRegistry::declareType(a4[3], v18, &v90, StructureVersion, 0, &buf);
  v88 = *((_QWORD *)&buf + 1);
  v89 = buf;
  v21 = (re *)a4[3];
  v23 = *(int *)(a3 + 20);
  v22 = *(int *)(a3 + 24);
  re::TypeBuilder::TypeBuilder((re::TypeBuilder *)&buf, (re::Allocator *)a4[1]);
  switch(*(_DWORD *)(a3 + 16))
  {
    case 1:
        goto LABEL_173;
      if (!*(_QWORD *)&v117.var0)
        goto LABEL_173;
      v136 = v117;
      re::TypeBuilder::beginPointerType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (uint64_t)&v136, 1);
      v26 = v88;
      v25 = v89;
      v135[0] = v89;
      v135[1] = v88;
      v27 = v135;
      goto LABEL_168;
    case 2:
        goto LABEL_173;
      if (!*(_QWORD *)&v117.var0)
        goto LABEL_173;
      v134 = v117;
      re::TypeBuilder::beginArrayType((uint64_t)&buf, (uint64_t *)&v90, (re **)&v134, *(int *)(a3 + 64));
      v26 = v88;
      v25 = v89;
      v133[0] = v89;
      v133[1] = v88;
      v27 = v133;
      goto LABEL_168;
    case 3:
        goto LABEL_173;
      if (!*(_QWORD *)&v117.var0)
        goto LABEL_173;
      v132 = v117;
      re::TypeBuilder::beginListType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (__int128 *)&v132);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      v26 = v88;
      v25 = v89;
      v131[0] = v89;
      v131[1] = v88;
      v27 = v131;
      goto LABEL_168;
    case 4:
        goto LABEL_173;
      if (!*(_QWORD *)&v117.var0)
        goto LABEL_173;
      v130 = v117;
      re::TypeBuilder::beginListType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (__int128 *)&v130);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      v26 = v88;
      v25 = v89;
      v129[0] = v89;
      v129[1] = v88;
      v27 = v129;
      goto LABEL_168;
    case 5:
        goto LABEL_173;
      if (!*(_QWORD *)&v117.var0)
        goto LABEL_173;
      v128 = v117;
      re::TypeBuilder::beginListType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (__int128 *)&v128);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      v26 = v88;
      v25 = v89;
      v127[0] = v89;
      v127[1] = v88;
      v27 = v127;
      goto LABEL_168;
    case 7:
        goto LABEL_173;
        goto LABEL_173;
      if (!*(_QWORD *)&v117.var0)
        goto LABEL_173;
      if (!(_QWORD)v118)
        goto LABEL_173;
      v126 = v117;
      v125 = v118;
      re::TypeBuilder::beginDictionaryType((uint64_t)&buf, (uint64_t *)&v90, 1, v23, v22, (__int128 *)&v126, &v125);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      v26 = v88;
      v25 = v89;
      v124[0] = v89;
      v124[1] = v88;
      v27 = v124;
      goto LABEL_168;
    case 8:
      v123[0] = 0;
      v123[1] = 0xFFFFFFFFLL;
      TypeID = re::TypeBuilder::beginObjectType((uint64_t)&buf, (uint64_t *)&v90, 1, -2, v23, v22, (uint64_t)v123);
      v31 = *(_QWORD **)(a3 + 64);
      v32 = *(unsigned int *)(a3 + 56);
      v33 = 8 * v32;
      if (!(_DWORD)v32)
      {
        v47 = 0;
        v26 = v88;
        v25 = v89;
        goto LABEL_91;
      }
      v84 = v32;
      v85 = 0;
      v87 = 0;
      v86 = (__int128 *)(a4 + 12);
      v34 = 8 * v32;
      v35 = v31;
      break;
    case 9:
      if (!*(_QWORD *)(a3 + 64))
        goto LABEL_173;
      switch(*(_DWORD *)(a3 + 20))
      {
        case 1:
          v48 = a4 + 6;
          break;
        case 2:
          v48 = a4 + 8;
          break;
        case 4:
          v48 = a4 + 10;
          break;
        case 8:
          v48 = a4 + 12;
          break;
        default:
          goto LABEL_173;
      }
      if (!*v48)
        goto LABEL_173;
      v97[0] = *v48;
      v97[1] = v48[1];
      v55 = re::TypeBuilder::beginEnumType((uint64_t)&buf, (uint64_t *)&v90, 1, -2, (uint64_t)v97);
      v56 = *(unsigned int **)(a3 + 64);
      v57 = (_QWORD *)*((_QWORD *)v56 + 1);
      v58 = *v56;
      v59 = 8 * v58;
      if ((_DWORD)v58)
      {
        v60 = 8 * v58;
        v61 = (_QWORD *)*((_QWORD *)v56 + 1);
        do
        {
          v62 = (_DWORD *)*v61;
          if (*(_DWORD *)*v61 == 1)
          {
            v63 = *((_QWORD *)v62 + 1);
            v64 = (const char *)*((_QWORD *)v62 + 2);
            *(_QWORD *)&v117.var0 = 0;
            v117.var1 = (char *)&str_110;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, v63, &v117);
            re::StringID::destroyString((re::StringID *)&v117);
          }
          ++v61;
          v60 -= 8;
        }
        while (v60);
      }
      if (*(_QWORD *)&v90.var0 >> 1 == 0x4848FE09E6F816FDLL)
      {
        if (v90.var1 == "RERotationOrder" || (v55 = strcmp(v90.var1, "RERotationOrder"), !(_DWORD)v55))
        {
          *(_QWORD *)&v117.var0 = 174834;
          v117.var1 = "XYZ";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 0, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(_QWORD *)&v117.var0 = 176814;
          v117.var1 = "YZX";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 1, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(_QWORD *)&v117.var0 = 178614;
          v117.var1 = "ZXY";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 2, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(_QWORD *)&v117.var0 = 174894;
          v117.var1 = "XZY";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 3, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(_QWORD *)&v117.var0 = 176694;
          v117.var1 = "YXZ";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 4, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(_QWORD *)&v117.var0 = 178674;
          v117.var1 = "ZYX";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 5, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(_QWORD *)&v117.var0 = 130597342;
          v117.var1 = "Count";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 6, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
          *(_QWORD *)&v117.var0 = 0x1FB01113AELL;
          v117.var1 = "Invalid";
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&buf, 7, &v117);
          re::StringID::destroyString((re::StringID *)&v117);
        }
      }
      if ((_DWORD)v58)
      {
        do
        {
          v65 = (_DWORD *)*v57;
          if (*(_DWORD *)*v57 == 2)
          {
            v66 = *((_QWORD *)v65 + 1);
            v67 = (const char *)*((_QWORD *)v65 + 2);
            *(_QWORD *)&v117.var0 = 0;
            v117.var1 = (char *)&str_110;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&buf, v66, &v117);
            re::StringID::destroyString((re::StringID *)&v117);
          }
          ++v57;
          v59 -= 8;
        }
        while (v59);
      }
      v26 = v88;
      v25 = v89;
      v96[0] = v89;
      v96[1] = v88;
      v27 = v96;
      goto LABEL_168;
    case 0xB:
      v95[0] = 0;
      v95[1] = 0xFFFFFFFFLL;
      re::TypeBuilder::beginObjectType((uint64_t)&buf, (uint64_t *)&v90, 1, -2, v23, v22, (uint64_t)v95);
      v49 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a4 + 32))(*a4, 8, 8);
      *v49 = 0;
      v94 = *((_OWORD *)a4 + 2);
      re::TypeBuilder::addAttribute(&buf, (uint64_t)&v94, (uint64_t)v49, -1, 1);
      re::TypeBuilder::setIsCallbackSerializer((uint64_t)&buf, 1);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      v26 = v88;
      v25 = v89;
      v93 = v89;
      v27 = &v93;
      goto LABEL_167;
    case 0xD:
        goto LABEL_173;
      if (!*(_QWORD *)&v117.var0)
        goto LABEL_173;
      v92 = v117;
      re::TypeBuilder::beginOptionalType((uint64_t)&buf, (uint64_t *)&v90, v23, v22, (__int128 *)&v92);
      re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
      v26 = v88;
      v25 = v89;
      v91[0] = v89;
      v91[1] = v88;
      v27 = v91;
      goto LABEL_168;
    default:
      goto LABEL_173;
  }
  while (2)
  {
    v36 = (_DWORD *)*v35;
    switch(*(_DWORD *)*v35)
    {
      case 1:
          goto LABEL_173;
        if (!(_QWORD)v122)
          goto LABEL_173;
        break;
      case 3:
          goto LABEL_173;
        v105 = v117;
        *(_QWORD *)&v118 = 0xC98E91CCDF0B5FC4;
        *((_QWORD *)&v118 + 1) = "customClassID";
        re::TypeBuilder::addObjectMemberCustomClassID((uint64_t)&buf, (uint64_t)&v105, (uint64_t *)&v118, v36[6]);
        re::StringID::destroyString((re::StringID *)&v118);
        goto LABEL_80;
      case 4:
        if (v36[1] == 1)
          TypeID = re::TypeBuilder::setHideObjectWithOneMember((uint64_t)&buf, 1);
        goto LABEL_80;
      case 6:
        v40 = *((_QWORD *)v36 + 1);
        if (v40 > v138)
          TypeID = re::TypeBuilder::setVersion((uint64_t)&buf, v40);
        goto LABEL_80;
      default:
        goto LABEL_80;
    }
    switch(v36[10])
    {
      case 0:
        v120 = v122;
        re::StringID::StringID((re::StringID *)&v117, *((const char **)v36 + 1));
        re::TypeBuilder::addObjectMember((uint64_t)&buf, 0xFFFFFFFFLL, (uint64_t)&v120, (uint64_t *)&v117, v36[9]);
        re::StringID::destroyString((re::StringID *)&v117);
        v37 = *((_QWORD *)v36 + 1);
        TypeID = strlen((const char *)v37);
        v39 = TypeID == 6 && *(_DWORD *)v37 == 1701470831 && *(_WORD *)(v37 + 4) == 29795;
        v87 |= v39;
        goto LABEL_80;
      case 1:
        re::TypeRegistry::typeInfo(v21, (re **)&v122, &v118);
        if (!(_BYTE)v118 || v119 != 9)
          goto LABEL_173;
        re::TypeBuilder::TypeBuilder((re::TypeBuilder *)&v117, (re::Allocator *)a4[1]);
        re::DynamicString::format((re::DynamicString *)"%s::%s", (re::DynamicString *)&v115, v90.var1, *((_QWORD *)v36 + 1));
        re::StringID::StringID((re::StringID *)v114, (const re::DynamicString *)&v115);
        re::TypeInfo::referencedType((re::TypeInfo *)((char *)&v118 + 8), (uint64_t)&v111);
        v41 = *v112;
        v113[0] = (re *)v111;
        v113[1] = v41;
        v110 = *v86;
        re::TypeBuilder::beginArrayType((uint64_t)&v117, v114, v113, (uint64_t)&v110, 0);
        re::StringID::destroyString((re::StringID *)v114);
        re::TypeBuilder::commitTo((re::TypeBuilder *)&v117, v21, &v111);
        if (!(_QWORD)v111)
          goto LABEL_169;
        v109 = v111;
        re::StringID::StringID((re::StringID *)v114, *((const char **)v36 + 1));
        v43 = v36[9];
        v44 = &v109;
        goto LABEL_73;
      case 2:
        re::TypeRegistry::typeInfo(v21, (re **)&v122, &v118);
        if (!(_BYTE)v118 || v119 != 9)
          goto LABEL_173;
        re::TypeBuilder::TypeBuilder((re::TypeBuilder *)&v117, (re::Allocator *)a4[1]);
        re::DynamicString::format((re::DynamicString *)"%s::%s", (re::DynamicString *)&v115, v90.var1, *((_QWORD *)v36 + 1));
        re::StringID::StringID((re::StringID *)v114, (const re::DynamicString *)&v115);
        re::TypeInfo::referencedType((re::TypeInfo *)((char *)&v118 + 8), (uint64_t)&v111);
        v45 = *v112;
        v108[0] = v111;
        v108[1] = v45;
        re::TypeBuilder::beginPointerType((uint64_t)&v117, v114, 1, 8uLL, 8uLL, (uint64_t)v108, 1);
        re::StringID::destroyString((re::StringID *)v114);
        v107 = *v86;
        re::TypeBuilder::addCustomClassIDForPointer((uint64_t)&v117, (uint64_t)&v107, 8);
        re::TypeBuilder::commitTo((re::TypeBuilder *)&v117, v21, &v111);
        if (!(_QWORD)v111)
        {
LABEL_169:
          if (v115 && (v116 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v115 + 40))();
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v117, v42);
LABEL_173:
          re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&buf, v24);
          v82 = *re::foundationSerializationLogObjects(v81);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
          {
            if ((*(_QWORD *)(a2 + 8) & 1) != 0)
              v83 = *(_QWORD *)(a2 + 16);
            else
              v83 = v10;
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v83;
            _os_log_error_impl(&dword_224FE9000, v82, OS_LOG_TYPE_ERROR, "Failed to create type info for type \"%s\".", (uint8_t *)&buf, 0xCu);
          }
          *a1 = 0;
          a1[1] = 0xFFFFFFFFLL;
          goto LABEL_175;
        }
        v106 = v111;
        re::StringID::StringID((re::StringID *)v114, *((const char **)v36 + 1));
        v43 = v36[9];
        v44 = &v106;
LABEL_73:
        re::TypeBuilder::addObjectMember((uint64_t)&buf, 0xFFFFFFFFLL, (uint64_t)v44, v114, v43);
        re::StringID::destroyString((re::StringID *)v114);
        if (v115 && (v116 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v115 + 40))();
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v117, v46);
LABEL_80:
        ++v35;
        v34 -= 8;
        if (v34)
          continue;
        v26 = v88;
        v25 = v89;
        LODWORD(v32) = v84;
        v47 = v87;
        if ((v85 & 1) != 0)
          goto LABEL_162;
LABEL_91:
        v50 = *(_QWORD *)&v90.var0;
        v51 = *(_QWORD *)&v90.var0 >> 1;
        if (*(_QWORD *)&v90.var0 >> 1 > 0x30E420B6B6B86DA7uLL)
        {
          switch(v51)
          {
            case 0x30E420B6B6B86DA8:
              var1 = v90.var1;
              if (v90.var1 == "AnchorComponent")
                goto LABEL_140;
              v53 = "AnchorComponent";
              break;
            case 0x61364BE27E2A4A64:
              var1 = v90.var1;
              if (v90.var1 == "BodyTrackingComponent")
                goto LABEL_140;
              v53 = "BodyTrackingComponent";
              break;
            case 0x6AED206A3BA9D6E9:
              var1 = v90.var1;
              if (v90.var1 == "ClusterShadowMarkerComponent")
                goto LABEL_140;
              v53 = "ClusterShadowMarkerComponent";
              break;
            default:
              goto LABEL_133;
          }
LABEL_132:
          TypeID = strcmp(var1, v53);
          if (!(_DWORD)TypeID)
            goto LABEL_140;
LABEL_133:
          if ((v47 & 1) != 0)
          {
            TypeID = strlen(v90.var1);
            if (TypeID >= 0xF
              && *(_QWORD *)v90.var1 == 0x6F436D6F74737543
              && *(_QWORD *)(v90.var1 + 7) == 0x746E656E6F706D6FLL)
            {
              goto LABEL_140;
            }
          }
          goto LABEL_144;
        }
        if (v51 == 0x10DD8B3803C67A90)
        {
          var1 = v90.var1;
          if (v90.var1 == "AnchoringComponent")
            goto LABEL_140;
          v53 = "AnchoringComponent";
          goto LABEL_132;
        }
        if (v51 == 0x1F68485107138B4BLL)
        {
          var1 = v90.var1;
          if (v90.var1 == "SimpleComponent")
            goto LABEL_140;
          v53 = "SimpleComponent";
          goto LABEL_132;
        }
        if (v51 != 0x2E6717DB96117F50)
          goto LABEL_133;
        var1 = v90.var1;
        if (v90.var1 != "PhysicsOriginComponent")
        {
          v53 = "PhysicsOriginComponent";
          goto LABEL_132;
        }
LABEL_140:
        *(_QWORD *)&v117.var0 = 0x6DAE480279BALL;
        v117.var1 = "Component";
        v69 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v21 + 200, &v117);
        if (v69)
        {
          v104 = *v69;
          v70 = v21;
        }
        else
        {
          v70 = 0;
          v104 = 0xFFFFFFFFLL;
        }
        v103 = v70;
        re::TypeBuilder::setObjectSuperClass((uint64_t)&buf, &v103);
        re::StringID::destroyString((re::StringID *)&v117);
        v50 = *(_QWORD *)&v90.var0;
LABEL_144:
        if (v50 >> 1 == 0x29AC414532D4AF9DLL)
        {
          if (v90.var1 == "RenderGraphFillBufferNode"
            || (TypeID = strcmp(v90.var1, "RenderGraphFillBufferNode"), !(_DWORD)TypeID))
          {
            *(_QWORD *)&v117.var0 = 0xA3C1F00635C716B4;
            v117.var1 = "RenderGraphNode";
            v71 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v21 + 200, &v117);
            if (v71)
            {
              v102 = *v71;
              v72 = v21;
            }
            else
            {
              v72 = 0;
              v102 = 0xFFFFFFFFLL;
            }
            v101 = v72;
            re::TypeBuilder::setObjectSuperClass((uint64_t)&buf, &v101);
            re::StringID::destroyString((re::StringID *)&v117);
            v50 = *(_QWORD *)&v90.var0;
          }
        }
        if (v50 >> 1 == 0x7FEDDCE41DFF568DLL)
        {
          v73 = v90.var1;
          if (v90.var1 != "RenderGraphSpecifyTargetOperation")
          {
            v74 = "RenderGraphSpecifyTargetOperation";
            goto LABEL_157;
          }
        }
        else
        {
          if (v50 >> 1 != 0x775B4322064CEE52)
            goto LABEL_162;
          v73 = v90.var1;
          if (v90.var1 != "RenderGraphSpecifyLaneOperation")
          {
            v74 = "RenderGraphSpecifyLaneOperation";
LABEL_157:
            TypeID = strcmp(v73, v74);
            if ((_DWORD)TypeID)
              goto LABEL_162;
          }
        }
        *(_QWORD *)&v117.var0 = 0x3AAEC69498BCCC9ELL;
        v117.var1 = "RenderGraphSpecifyOperationBase";
        v75 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v21 + 200, &v117);
        if (v75)
        {
          v100 = *v75;
        }
        else
        {
          v21 = 0;
          v100 = 0xFFFFFFFFLL;
        }
        v99 = v21;
        re::TypeBuilder::setObjectSuperClass((uint64_t)&buf, &v99);
        re::StringID::destroyString((re::StringID *)&v117);
LABEL_162:
        if ((_DWORD)v32)
        {
          do
          {
            v76 = (_DWORD *)*v31;
            if (*(_DWORD *)*v31 == 5)
            {
              v77 = (const char *)*((_QWORD *)v76 + 2);
              *(_QWORD *)&v117.var0 = 0;
              v117.var1 = (char *)&str_110;
              v78 = (const char *)*((_QWORD *)v76 + 1);
              *(_QWORD *)&v118 = 0;
              *((_QWORD *)&v118 + 1) = &str_110;
              re::TypeBuilder::addObjectMemberRenaming((re::TypeBuilder *)&buf, (const re::StringID *)&v117, (const re::StringID *)&v118);
              re::StringID::destroyString((re::StringID *)&v118);
              re::StringID::destroyString((re::StringID *)&v117);
            }
            ++v31;
            v33 -= 8;
          }
          while (v33);
        }
        re::TypeBuilder::setIsIncomplete((uint64_t)&buf, 1);
        v98 = v25;
        v27 = &v98;
LABEL_167:
        v27[1] = v26;
LABEL_168:
        re::TypeBuilder::commitTo((unsigned __int8 *)&buf, v27);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&buf, v80);
        *a1 = v25;
        a1[1] = v26;
LABEL_175:
        re::StringID::destroyString((re::StringID *)&v90);
        return;
      case 3:
        v121 = v122;
        TypeID = re::TypeBuilder::setObjectSuperClass((uint64_t)&buf, &v121);
        v85 = 1;
        goto LABEL_80;
      default:
        goto LABEL_80;
    }
  }
}

BOOL `anonymous namespace'::checkPointer(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (!a1)
  {
    v2 = *re::foundationSerializationLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "Error converting PersistedSchema to TypeRegistry. Pointers are already hooked up.", v4, 2u);
    }
  }
  return a1 != 0;
}

uint64_t re::PersistedSchema::addIntrospectionGraph(re::PersistedSchema *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  const re::IntrospectionBase *v10;
  _QWORD v11[2];
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  const re::IntrospectionBase *v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v15);
  re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew((uint64_t)this, (re::DynamicString *)&v15, &v17);
  v14 = 0;
  v11[1] = 0;
  v12 = 0;
  v11[0] = 0;
  v13 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v11, &v17);
  v18[0] = &off_24ED87F90;
  v18[1] = this;
  v18[2] = v11;
  v19 = v18;
  if ((v3 & 1) == 0
  {
    re::introspect<re::IntrospectionBase const*>(void)::info = (uint64_t)re::IntrospectionInfo<re::IntrospectionBase const*>::get(0);
  }
  v4 = v12;
  if (v12)
  {
    v5 = (_QWORD *)re::introspect<re::IntrospectionBase const*>(void)::info;
    do
    {
      v10 = 0;
      v6 = v4 - 1;
      v10 = *(const re::IntrospectionBase **)(v14 + 8 * v6);
      v12 = v6;
      ++v13;
      re::IntrospectionWalker::walk(v5, &v10, (uint64_t)v18);
      v4 = v12;
    }
    while (v12);
  }
  v7 = v19;
  if (v19 == v18)
  {
    v8 = 4;
    v7 = v18;
    goto LABEL_9;
  }
  if (v19)
  {
    v8 = 5;
LABEL_9:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  if (v11[0] && v14)
    (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
  result = v15;
  if (v15)
  {
    if ((v16 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

uint64_t re::PersistedSchema::introspectionInfo(re::PersistedSchema *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  re *v21;
  NSObject *v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  const re::IntrospectionBase *v25;
  const re::IntrospectionBase *v26;
  const re::IntrospectionBase *v27;
  const re::IntrospectionBase *v28;
  const re::IntrospectionBase *v29;
  const re::IntrospectionBase *v30;
  const re::IntrospectionBase *v31;
  const re::IntrospectionBase *v32;
  const re::IntrospectionBase *v33;
  const re::IntrospectionBase *v34;
  const re::IntrospectionBase *v35;
  const re::IntrospectionBase *v36;
  const re::IntrospectionBase *v37;
  const re::IntrospectionBase *v38;
  const re::IntrospectionBase *v39;
  int v40;
  const char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)this, (uint64_t)&v42);
  if ((_QWORD)v42 && (BYTE8(v42) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v42 + 40))();
  if (v4)
    return *(_QWORD *)v4;
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  if ((v7 & 1) == 0
  {
    re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v25);
  }
  *(_QWORD *)&v42 = re::introspect<BOOL>(void)::info;
  if ((v8 & 1) == 0
  {
    re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v26);
  }
  *((_QWORD *)&v42 + 1) = re::introspect<char>(void)::info;
  if ((v9 & 1) == 0
  {
    re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v27);
  }
  *(_QWORD *)&v43 = re::introspect<double>(void)::info;
  if ((v10 & 1) == 0
  {
    re::introspect<float>(void)::info = re::introspect_float(0, v28);
  }
  *((_QWORD *)&v43 + 1) = re::introspect<float>(void)::info;
  if ((v11 & 1) == 0
  {
    re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v29);
  }
  *(_QWORD *)&v44 = re::introspect<short>(void)::info;
  if ((v12 & 1) == 0
  {
    re::introspect<int>(void)::info = re::introspect_int(0, v30);
  }
  *((_QWORD *)&v44 + 1) = re::introspect<int>(void)::info;
  if ((v13 & 1) == 0
  {
    re::introspect<long>(void)::info = (uint64_t)re::introspect_long(0, v31);
  }
  *(_QWORD *)&v45 = re::introspect<long>(void)::info;
  if ((v14 & 1) == 0
  {
    re::introspect<unsigned long>(void)::info = (uint64_t)re::introspect_size_t(0, v32);
  }
  *((_QWORD *)&v45 + 1) = re::introspect<unsigned long>(void)::info;
  if ((v15 & 1) == 0
  {
    re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v33);
  }
  *(_QWORD *)&v46 = re::introspect<long long>(void)::info;
  if ((v16 & 1) == 0
  {
    re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v34);
  }
  *((_QWORD *)&v46 + 1) = re::introspect<unsigned char>(void)::info;
  if ((v17 & 1) == 0
  {
    re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v35);
  }
  *(_QWORD *)&v47 = re::introspect<unsigned short>(void)::info;
  if ((v18 & 1) == 0
  {
    re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v36);
  }
  *((_QWORD *)&v47 + 1) = re::introspect<unsigned int>(void)::info;
  if ((v19 & 1) == 0
  {
    re::introspect<unsigned long long>(void)::info = (uint64_t)re::introspect_uint64_t(0, v37);
  }
  v20 = 0;
  v48 = re::introspect<unsigned long long>(void)::info;
  while (1)
  {
    v5 = *(_QWORD *)((char *)&v42 + v20);
    if (!strcmp(a2, *(const char **)(v5 + 48)))
      break;
    v20 += 8;
    if (v20 == 104)
    {
      if (!strcmp(a2, "DynamicString"))
      {
        if ((v23 & 1) == 0
        {
          re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v38);
        }
        return re::introspect<re::DynamicString>(void)::info;
      }
      else
      {
        v21 = (re *)strcmp(a2, "StringID");
        if ((_DWORD)v21)
        {
          v22 = *re::foundationSerializationLogObjects(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v40 = 136315138;
            v41 = a2;
            _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "Unknown type name in PersistedSchema '%s'", (uint8_t *)&v40, 0xCu);
          }
          return 0;
        }
        else
        {
          if ((v24 & 1) == 0
          {
            re::introspect<re::StringID>(void)::info = (uint64_t)re::IntrospectionInfo<re::StringID>::get(0, v39);
          }
          return re::introspect<re::StringID>(void)::info;
        }
      }
    }
  }
  return v5;
}

__n128 `anonymous namespace'::serializePersistedSchemaInternal@<Q0>(_anonymous_namespace_ *a1@<X0>, int a2@<W1>, _anonymous_namespace_ *a3@<X2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_ *v8;
  unsigned __int8 v9;
  _BOOL8 v10;
  __n128 result;
  const char *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;

  if (!a2)
  {
    if ((v13 & 1) == 0
    {
      re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
    }
    if ((v14 & 1) == 0)
    {
      v12 = "Failed to serialized schema in binary format.";
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (a2 != 1)
  {
    v12 = "Invalid format argument.";
    goto LABEL_11;
  }
  if ((v9 & 1) == 0)
  {
    {
      re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
    }
  }
  if (v10)
  {
LABEL_8:
    *(_BYTE *)a4 = 1;
    return result;
  }
  v12 = "Failed to serialized schema as JSON.";
LABEL_11:
  result = v17;
  v15 = v18;
  v16 = v19;
  *(_BYTE *)a4 = 0;
  *(__n128 *)(a4 + 8) = result;
  *(_QWORD *)(a4 + 24) = v15;
  *(_QWORD *)(a4 + 32) = v16;
  return result;
}

__n128 `anonymous namespace'::deserializePersistedSchemaInternal@<Q0>(_anonymous_namespace_ *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  _anonymous_namespace_ *v11;
  unsigned __int8 v12;
  __n128 result;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  int v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  const char *v23;
  __n128 *v24;
  __n128 *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __n128 *v30;
  __n128 *v31;
  char v32;
  _BYTE v33[23];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a4 + 32))(a4, 48, 8);
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_DWORD *)(v10 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(v10, (uint64_t)a4, 3);
  if (!a2)
  {
    if ((v17 & 1) == 0
    {
      re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
    }
    if ((v18 & 1) == 0)
    {
      v23 = "Failed to deserialize schema from binary format.";
      goto LABEL_26;
    }
    goto LABEL_14;
  }
  if (a2 != 1)
  {
    v23 = "Invalid format argument.";
    goto LABEL_26;
  }
  if ((v12 & 1) == 0
  {
    re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
  }
  if (v29.n128_u8[0])
  {
LABEL_14:
    if (!a3)
    {
LABEL_24:
      *(_BYTE *)a5 = 1;
      *(_QWORD *)(a5 + 8) = v10;
      return result;
    }
    if ((v19 & 1) == 0
    {
      re::introspect<re::PersistedSchema>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, 0);
    }
    v26.n128_u8[0] = 1;
    v29.n128_u64[0] = (unint64_t)&off_24ED87FD8;
    v29.n128_u64[1] = v10;
    v30 = &v26;
    v31 = &v29;
    re::IntrospectionWalker::walk((_QWORD *)re::introspect<re::PersistedSchema>(void)::info, (const re::IntrospectionBase **)v10, (uint64_t)&v29);
    v20 = v26.n128_u8[0];
    v21 = (_anonymous_namespace_ *)v31;
    if (v31 == &v29)
    {
      v22 = 4;
      v21 = (_anonymous_namespace_ *)&v29;
    }
    else
    {
      if (!v31)
      {
LABEL_23:
        if (v20)
          goto LABEL_24;
        v23 = "Failed to hook up schema.";
LABEL_26:
        result = v29;
        v24 = v30;
        v25 = v31;
        *(_BYTE *)a5 = 0;
        *(__n128 *)(a5 + 8) = result;
        *(_QWORD *)(a5 + 24) = v24;
        *(_QWORD *)(a5 + 32) = v25;
        return result;
      }
      v22 = 5;
    }
    v21 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 8 * v22))();
    goto LABEL_23;
  }
  if ((v32 & 1) != 0)
    v14 = *(_BYTE **)&v33[7];
  else
    v14 = v33;
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize schema from JSON. Details: %s", (re::DynamicString *)&v26, v14);
  result = v26;
  v15 = v27;
  v16 = v28;
  *(_BYTE *)a5 = 0;
  *(__n128 *)(a5 + 8) = result;
  *(_QWORD *)(a5 + 24) = v15;
  *(_QWORD *)(a5 + 32) = v16;
  if (!v29.n128_u8[0] && v31 && (v32 & 1) != 0)
    (*(void (**)(void))(v31->n128_u64[0] + 40))();
  return result;
}

void re::introspect_IntrospectionBasePointer(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _QWORD v3[2];
  __int128 v4;

  v2 = atomic_load((unsigned __int8 *)&qword_254122118);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254122118))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254122AB0, "IntrospectionBasePointer", 16, 8, 0, 0);
    qword_254122AB0 = (uint64_t)&off_24ED7DA28;
    qword_254122AF0 = (uint64_t)re::internal::defaultConstruct<re::SerializedReference<re::IntrospectionBase const*>>;
    qword_254122B18 = 0;
    qword_254122B10 = 0;
    dword_254122AC0 = 11;
    __cxa_guard_release(&qword_254122118);
  }
  if ((_MergedGlobals_477 & 1) == 0)
  {
    _MergedGlobals_477 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254122AB0, a2);
    v3[0] = 0x2DF81B3A31597722;
    v3[1] = "IntrospectionBasePointer";
    xmmword_254122AD0 = v4;
    re::StringID::destroyString((re::StringID *)v3);
  }
}

_QWORD *re::internal::defaultConstruct<re::SerializedReference<re::IntrospectionBase const*>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  a3[1] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(a3);
}

uint64_t `anonymous namespace'::introspectionBaseSerialize(int a1, int a2, re **a3, re::DynamicString *this)
{
  const char *v6;
  uint64_t v7;

  if (*a3)
  {
    re::getPrettyTypeName(*a3, (const re::IntrospectionBase *)&v6);
    re::DynamicString::operator=(this, (re::DynamicString *)&v6);
    if (v6 && (v7 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  }
  else
  {
    v6 = "";
    v7 = 0;
    re::DynamicString::operator=(this, (uint64_t)&v6);
  }
  return 1;
}

uint64_t `anonymous namespace'::introspectionBaseDeserialize(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, const char *a5)
{
  re::SerializedReference<re::IntrospectionBase const*>::setString(a4, a5, a1);
  return 1;
}

uint64_t `anonymous namespace'::introspectionBaseDeepCopy(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  re::SerializedReference<re::IntrospectionBase const*>::operator=(a5, a4);
  return 1;
}

_QWORD *re::internal::defaultConstructV2<re::SerializedReference<re::IntrospectionBase const*>>(_QWORD *result)
{
  result[1] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(result);
}

void re::introspectionTable_IntrospectionBase(re *this)
{
  unsigned __int8 v1;
  re *v2;
  uint64_t *v3;
  re::IntrospectionBase *v4;
  uint64_t *v5;
  re::IntrospectionBase *v6;
  uint64_t *v7;
  re::IntrospectionBase *v8;
  uint64_t *v9;
  re::IntrospectionBase *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t *v13;
  re::IntrospectionBase *v14;
  uint64_t *v15;
  re::IntrospectionBase *v16;
  uint64_t *v17;
  re::IntrospectionBase *v18;
  re *v19;
  re::IntrospectionBase *v20;
  re *v21;
  re::IntrospectionBase *v22;
  re *v23;
  re::IntrospectionBase *v24;
  re *v25;
  re::IntrospectionBase *v26;
  re *v27;
  re::IntrospectionBase *v28;

  if ((byte_254122109 & 1) == 0)
  {
    byte_254122109 = 1;
    v1 = atomic_load((unsigned __int8 *)&qword_254122120);
    if ((v1 & 1) == 0)
    {
      v2 = (re *)__cxa_guard_acquire(&qword_254122120);
      if ((_DWORD)v2)
      {
        qword_2558362C0 = (uint64_t)"IntrospectionBasic";
        v3 = (uint64_t *)qword_254122148;
        if (!qword_254122148)
        {
          v3 = re::allocInfo_IntrospectionBasic(v2);
          qword_254122148 = (uint64_t)v3;
          re::initInfo_IntrospectionBasic((re *)v3, v4);
        }
        qword_2558362D0 = 0;
        unk_2558362D8 = 0;
        qword_2558362C8 = (uint64_t)v3;
        dword_2558362E0 = 0;
        qword_2558362E8 = (uint64_t)"IntrospectionPointer";
        v5 = (uint64_t *)qword_254122160;
        if (!qword_254122160)
        {
          v5 = re::allocInfo_IntrospectionPointer(v2);
          qword_254122160 = (uint64_t)v5;
          re::initInfo_IntrospectionPointer((re *)v5, v6);
        }
        qword_2558362F0 = (uint64_t)v5;
        *(_QWORD *)algn_2558362F8 = 0;
        qword_255836300 = 1;
        dword_255836308 = 0;
        qword_255836310 = (uint64_t)"IntrospectionCStyleArray";
        v7 = (uint64_t *)qword_254122178;
        if (!qword_254122178)
        {
          v7 = re::allocInfo_IntrospectionCStyleArray(v2);
          qword_254122178 = (uint64_t)v7;
          re::initInfo_IntrospectionCStyleArray((re *)v7, v8);
        }
        qword_255836318 = (uint64_t)v7;
        unk_255836320 = 0;
        qword_255836328 = 2;
        dword_255836330 = 0;
        qword_255836338 = (uint64_t)"IntrospectionDynamicArrayBase";
        v9 = (uint64_t *)qword_254122190;
        if (!qword_254122190)
        {
          v9 = re::allocInfo_IntrospectionDynamicArrayBase(v2);
          qword_254122190 = (uint64_t)v9;
          re::initInfo_IntrospectionDynamicArrayBase((re *)v9, v10);
        }
        qword_255836340 = (uint64_t)v9;
        *(_QWORD *)algn_255836348 = 0;
        qword_255836350 = 3;
        dword_255836358 = 0;
        qword_255836360 = (uint64_t)"IntrospectionFixedArrayBase";
        v11 = (uint64_t *)qword_2541221A8;
        if (!qword_2541221A8)
        {
          v11 = re::allocInfo_IntrospectionFixedArrayBase(v2);
          qword_2541221A8 = (uint64_t)v11;
          re::initInfo_IntrospectionFixedArrayBase((re *)v11, v12);
        }
        qword_255836368 = (uint64_t)v11;
        unk_255836370 = 0;
        qword_255836378 = 4;
        dword_255836380 = 0;
        qword_255836388 = (uint64_t)"IntrospectionDataArrayBase";
        v13 = (uint64_t *)qword_2541221C0;
        if (!qword_2541221C0)
        {
          v13 = re::allocInfo_IntrospectionDataArrayBase(v2);
          qword_2541221C0 = (uint64_t)v13;
          re::initInfo_IntrospectionDataArrayBase((re *)v13, v14);
        }
        qword_255836390 = (uint64_t)v13;
        *(_QWORD *)algn_255836398 = 0;
        qword_2558363A0 = 5;
        dword_2558363A8 = 0;
        qword_2558363B0 = (uint64_t)"IntrospectionDynamicString";
        v15 = (uint64_t *)qword_2541221E0;
        if (!qword_2541221E0)
        {
          v15 = re::allocInfo_IntrospectionDynamicString(v2);
          qword_2541221E0 = (uint64_t)v15;
          re::initInfo_IntrospectionDynamicString((re *)v15, v16);
        }
        qword_2558363B8 = (uint64_t)v15;
        unk_2558363C0 = 0;
        qword_2558363C8 = 6;
        dword_2558363D0 = 0;
        qword_2558363D8 = (uint64_t)"IntrospectionHashTableBase";
        v17 = (uint64_t *)qword_2541221F8;
        if (!qword_2541221F8)
        {
          v17 = re::allocInfo_IntrospectionHashTableBase(v2);
          qword_2541221F8 = (uint64_t)v17;
          re::initInfo_IntrospectionHashTableBase((re *)v17, v18);
        }
        qword_2558363E0 = (uint64_t)v17;
        *(_QWORD *)algn_2558363E8 = 0;
        qword_2558363F0 = 7;
        dword_2558363F8 = 0;
        qword_255836400 = (uint64_t)"IntrospectionStructure";
        v19 = (re *)qword_254122338;
        if (!qword_254122338)
        {
          v19 = (re *)re::allocInfo_IntrospectionStructure(v2);
          qword_254122338 = (uint64_t)v19;
          re::initInfo_IntrospectionStructure(v19, v20);
        }
        qword_255836408 = (uint64_t)v19;
        unk_255836410 = 0;
        qword_255836418 = 8;
        dword_255836420 = 0;
        qword_255836428 = (uint64_t)"IntrospectionEnum";
        v21 = (re *)qword_2541223D0;
        if (!qword_2541223D0)
        {
          v21 = (re *)re::allocInfo_IntrospectionEnum(v2);
          qword_2541223D0 = (uint64_t)v21;
          re::initInfo_IntrospectionEnum(v21, v22);
        }
        qword_255836430 = (uint64_t)v21;
        *(_QWORD *)algn_255836438 = 0;
        qword_255836440 = 9;
        dword_255836448 = 0;
        qword_255836450 = (uint64_t)"IntrospectionStringID";
        v23 = (re *)qword_2541223F0;
        if (!qword_2541223F0)
        {
          v23 = (re *)re::allocInfo_IntrospectionStringID(v2);
          qword_2541223F0 = (uint64_t)v23;
          re::initInfo_IntrospectionStringID(v23, v24);
        }
        qword_255836458 = (uint64_t)v23;
        unk_255836460 = 0;
        qword_255836468 = 10;
        dword_255836470 = 0;
        qword_255836478 = (uint64_t)"IntrospectionCallbackSerializer";
        v25 = (re *)qword_254122410;
        if (!qword_254122410)
        {
          v25 = (re *)re::allocInfo_IntrospectionCallbackSerializer(v2);
          qword_254122410 = (uint64_t)v25;
          re::initInfo_IntrospectionCallbackSerializer(v25, v26);
        }
        qword_255836480 = (uint64_t)v25;
        *(_QWORD *)algn_255836488 = 0;
        qword_255836490 = 11;
        dword_255836498 = 0;
        qword_2558364A0 = (uint64_t)"IntrospectionOptionalBase";
        v27 = (re *)qword_254122428;
        if (!qword_254122428)
        {
          v27 = (re *)re::allocInfo_IntrospectionOptionalBase(v2);
          qword_254122428 = (uint64_t)v27;
          re::initInfo_IntrospectionOptionalBase(v27, v28);
        }
        qword_2558364A8 = (uint64_t)v27;
        unk_2558364B0 = 0;
        qword_2558364B8 = 13;
        dword_2558364C0 = 0;
        __cxa_guard_release(&qword_254122120);
      }
    }
    dword_254122498 = 13;
    qword_2541224A0 = (uint64_t)&qword_2558362C0;
  }
}

uint64_t *re::allocInfo_IntrospectionBase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122128);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122128))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122B20, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254122B30 = 0;
    qword_254122B40 = 0;
    qword_254122B48 = 0xFFFFFFFFLL;
    qword_254122B20 = (uint64_t)&off_24ED7DAA8;
    qword_254122B50 = (uint64_t)"IntrospectionBase";
    dword_254122B58 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254122B90 = 0;
    __cxa_guard_release(&qword_254122128);
  }
  return &qword_254122B20;
}

void re::initInfo_IntrospectionBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  re *v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0xAF6C477EF8EF2A18;
  v16[1] = "IntrospectionBase";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_254122130);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122130);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_IntrospectionType((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 32, 8);
      *(_DWORD *)v8 = 3;
      *(_QWORD *)(v8 + 8) = &qword_2541229C0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 16;
      qword_254122588 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::introspectionTable_IntrospectionBase((re *)v9);
      v10 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 16, 8);
      *(_DWORD *)v10 = 2;
      *((_QWORD *)v10 + 1) = &dword_254122498;
      qword_254122590 = (uint64_t)v10;
      v11 = re::introspectionAllocator(v10);
      v13 = re::introspect_int((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "size";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1400000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254122598 = v14;
      __cxa_guard_release(&qword_254122130);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254122588;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionBase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionBase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionBase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionBase>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

double re::internal::defaultConstruct<re::IntrospectionBase>(int a1, int a2, ArcSharedObject *this)
{
  _QWORD *v3;
  double result;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *v3 = &off_24ED1EB58;
  v3[2] = 0;
  *(_QWORD *)((char *)v3 + 22) = 0;
  v3[4] = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  v3[5] = 0xFFFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionBase>(ArcSharedObject *a1)
{
  _QWORD *v1;
  double result;

  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *v1 = &off_24ED1EB58;
  v1[2] = 0;
  *(_QWORD *)((char *)v1 + 22) = 0;
  v1[4] = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  v1[5] = 0xFFFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionBase>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::allocInfo_IntrospectionBasic(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122138);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122138))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122B98, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254122BA8 = 0;
    qword_254122BB8 = 0;
    qword_254122BC0 = 0xFFFFFFFFLL;
    qword_254122B98 = (uint64_t)&off_24ED7DAA8;
    qword_254122BC8 = (uint64_t)"IntrospectionBasic";
    dword_254122BD0 = 0;
    xmmword_254122BD8 = 0u;
    xmmword_254122BE8 = 0u;
    xmmword_254122BF8 = 0u;
    qword_254122C08 = 0;
    __cxa_guard_release(&qword_254122138);
  }
  return &qword_254122B98;
}

void re::initInfo_IntrospectionBasic(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x3E1CA86024F61AA6;
  v15[1] = "IntrospectionBasic";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_254122140);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122140);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541224A8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<char const*>::get((uint64_t)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "name";
      *(_QWORD *)(v13 + 16) = &qword_2541226E8;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541224B0 = v13;
      __cxa_guard_release(&qword_254122140);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541224A8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionBasic>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionBasic>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionBasic>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionBasic>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void re::IntrospectionInfo<char const*>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const char *v10;
  unint64_t v11;
  char *__s1;

  v2 = atomic_load((unsigned __int8 *)&qword_254122458);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254122458))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_2541226E8);
    __cxa_guard_release(&qword_254122458);
  }
  if ((byte_254122110 & 1) == 0)
  {
    byte_254122110 = 1;
    v3 = re::introspect_char((re *)1, a2);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541226E8, 0);
    qword_2541226F8 = 0x800000001;
    dword_254122700 = 8;
    word_254122704 = 0;
    *(_QWORD *)&xmmword_254122708 = 0;
    *((_QWORD *)&xmmword_254122708 + 1) = 0xFFFFFFFFLL;
    qword_2541226E8 = (uint64_t)&off_24ED30800;
    qword_254122718 = (uint64_t)v3;
    qword_254122720 = 0;
    re::IntrospectionRegistry::add(v4, v5);
    re::getPrettyTypeName((re *)&qword_2541226E8, (const re::IntrospectionBase *)&v9);
    if ((BYTE8(v9) & 1) != 0)
      v6 = v10;
    else
      v6 = (char *)&v9 + 9;
    if ((_QWORD)v9 && (BYTE8(v9) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    if (v11 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      v7 = v9;
    }
    else
    {
      v9 = v3[2];
      v7 = v8;
    }
    xmmword_254122708 = v7;
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

double re::internal::defaultConstruct<re::IntrospectionBasic>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 22) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v3 = &off_24ED7D8E8;
  *(_QWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionBasic>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionBasic>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 22) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(v1 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v1 = &off_24ED7D8E8;
  *(_QWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionBasic>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::allocInfo_IntrospectionPointer(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122150);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122150))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122C10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254122C20 = 0;
    qword_254122C30 = 0;
    qword_254122C38 = 0xFFFFFFFFLL;
    qword_254122C10 = (uint64_t)&off_24ED7DAA8;
    qword_254122C40 = (uint64_t)"IntrospectionPointer";
    dword_254122C48 = 0;
    xmmword_254122C50 = 0u;
    xmmword_254122C60 = 0u;
    xmmword_254122C70 = 0u;
    qword_254122C80 = 0;
    __cxa_guard_release(&qword_254122150);
  }
  return &qword_254122C10;
}

void re::initInfo_IntrospectionPointer(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x299410F0B7BB8444;
  v15[1] = "IntrospectionPointer";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_254122158);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122158);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541224B8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_IntrospectionBasePointer((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "pointeeInfo";
      *(_QWORD *)(v13 + 16) = &qword_254122AB0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541224C0 = v13;
      __cxa_guard_release(&qword_254122158);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541224B8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionPointer>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionPointer>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionPointer>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionPointer>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

_QWORD *re::internal::defaultConstruct<re::IntrospectionPointer>(int a1, int a2, ArcSharedObject *this)
{
  _QWORD *v3;
  _QWORD *v4;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = 0u;
  v3 = (_QWORD *)((char *)this + 48);
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)((char *)v4 + 22) = 0;
  v4[2] = 0;
  v4[4] = 0;
  v4[5] = 0xFFFFFFFFLL;
  *v4 = &off_24ED30800;
  v4[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v3);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionPointer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::IntrospectionPointer>(_OWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  a1[3] = 0u;
  v1 = a1 + 3;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  *v2 = &off_24ED30800;
  v2[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v1);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionPointer>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::allocInfo_IntrospectionCStyleArray(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122168);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122168))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122C88, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254122C98 = 0;
    qword_254122CA8 = 0;
    qword_254122CB0 = 0xFFFFFFFFLL;
    qword_254122C88 = (uint64_t)&off_24ED7DAA8;
    qword_254122CB8 = (uint64_t)"IntrospectionCStyleArray";
    dword_254122CC0 = 0;
    xmmword_254122CC8 = 0u;
    xmmword_254122CD8 = 0u;
    xmmword_254122CE8 = 0u;
    qword_254122CF8 = 0;
    __cxa_guard_release(&qword_254122168);
  }
  return &qword_254122C88;
}

void re::initInfo_IntrospectionCStyleArray(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x2DFB4F6972AAA2A0;
  v19[1] = "IntrospectionCStyleArray";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254122170);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122170);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541225A0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_IntrospectionBasePointer((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "elementInfo";
      *(_QWORD *)(v13 + 16) = &qword_254122AB0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541225A8 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_int((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "length";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x4000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2541225B0 = v17;
      __cxa_guard_release(&qword_254122170);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541225A0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionCStyleArray>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionCStyleArray>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionCStyleArray>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionCStyleArray>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

re::IntrospectionCStyleArray *re::internal::defaultConstruct<re::IntrospectionCStyleArray>(int a1, int a2, re::IntrospectionCStyleArray *this)
{
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::IntrospectionCStyleArray::IntrospectionCStyleArray(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionCStyleArray>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::IntrospectionCStyleArray *re::internal::defaultConstructV2<re::IntrospectionCStyleArray>(re::IntrospectionCStyleArray *this)
{
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::IntrospectionCStyleArray::IntrospectionCStyleArray(this);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionCStyleArray>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::allocInfo_IntrospectionDynamicArrayBase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122180);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122180))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122D00, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254122D10 = 0;
    qword_254122D20 = 0;
    qword_254122D28 = 0xFFFFFFFFLL;
    qword_254122D00 = (uint64_t)&off_24ED7DAA8;
    qword_254122D30 = (uint64_t)"IntrospectionDynamicArrayBase";
    dword_254122D38 = 0;
    xmmword_254122D40 = 0u;
    xmmword_254122D50 = 0u;
    xmmword_254122D60 = 0u;
    qword_254122D70 = 0;
    __cxa_guard_release(&qword_254122180);
  }
  return &qword_254122D00;
}

void re::initInfo_IntrospectionDynamicArrayBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x9D159A3DE5177A0CLL;
  v15[1] = "IntrospectionDynamicArrayBase";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_254122188);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122188);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541224C8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_IntrospectionBasePointer((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "elementInfo";
      *(_QWORD *)(v13 + 16) = &qword_254122AB0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541224D0 = v13;
      __cxa_guard_release(&qword_254122188);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541224C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionDynamicArrayBase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionDynamicArrayBase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionDynamicArrayBase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionDynamicArrayBase>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

_QWORD *re::internal::defaultConstruct<re::IntrospectionDynamicArrayBase>(int a1, int a2, ArcSharedObject *this)
{
  _QWORD *v3;
  _QWORD *v4;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = 0u;
  v3 = (_QWORD *)((char *)this + 48);
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)((char *)v4 + 22) = 0;
  v4[2] = 0;
  v4[4] = 0;
  v4[5] = 0xFFFFFFFFLL;
  *v4 = &off_24ED1FA08;
  v4[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v3);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionDynamicArrayBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::IntrospectionDynamicArrayBase>(_OWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  a1[3] = 0u;
  v1 = a1 + 3;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  *v2 = &off_24ED1FA08;
  v2[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v1);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionDynamicArrayBase>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::allocInfo_IntrospectionFixedArrayBase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122198);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122198))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122D78, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254122D88 = 0;
    qword_254122D98 = 0;
    qword_254122DA0 = 0xFFFFFFFFLL;
    qword_254122D78 = (uint64_t)&off_24ED7DAA8;
    qword_254122DA8 = (uint64_t)"IntrospectionFixedArrayBase";
    dword_254122DB0 = 0;
    xmmword_254122DB8 = 0u;
    xmmword_254122DC8 = 0u;
    xmmword_254122DD8 = 0u;
    qword_254122DE8 = 0;
    __cxa_guard_release(&qword_254122198);
  }
  return &qword_254122D78;
}

void re::initInfo_IntrospectionFixedArrayBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xC4BC7EA0B7596862;
  v15[1] = "IntrospectionFixedArrayBase";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2541221A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541221A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541224D8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_IntrospectionBasePointer((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "elementInfo";
      *(_QWORD *)(v13 + 16) = &qword_254122AB0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541224E0 = v13;
      __cxa_guard_release(&qword_2541221A0);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541224D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionFixedArrayBase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionFixedArrayBase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionFixedArrayBase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionFixedArrayBase>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

_QWORD *re::internal::defaultConstruct<re::IntrospectionFixedArrayBase>(int a1, int a2, ArcSharedObject *this)
{
  _QWORD *v3;
  _QWORD *v4;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = 0u;
  v3 = (_QWORD *)((char *)this + 48);
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)((char *)v4 + 22) = 0;
  v4[2] = 0;
  v4[4] = 0;
  v4[5] = 0xFFFFFFFFLL;
  *v4 = &off_24ED20258;
  v4[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v3);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionFixedArrayBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::IntrospectionFixedArrayBase>(_OWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  a1[3] = 0u;
  v1 = a1 + 3;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  *v2 = &off_24ED20258;
  v2[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v1);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionFixedArrayBase>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::allocInfo_IntrospectionDataArrayBase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541221B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541221B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122DF0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254122E00 = 0;
    qword_254122E10 = 0;
    qword_254122E18 = 0xFFFFFFFFLL;
    qword_254122DF0 = (uint64_t)&off_24ED7DAA8;
    qword_254122E20 = (uint64_t)"IntrospectionDataArrayBase";
    dword_254122E28 = 0;
    xmmword_254122E30 = 0u;
    xmmword_254122E40 = 0u;
    xmmword_254122E50 = 0u;
    qword_254122E60 = 0;
    __cxa_guard_release(&qword_2541221B0);
  }
  return &qword_254122DF0;
}

void re::initInfo_IntrospectionDataArrayBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xBC1C8D611DE318CALL;
  v15[1] = "IntrospectionDataArrayBase";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2541221B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541221B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541224E8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_IntrospectionBasePointer((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "elementInfo";
      *(_QWORD *)(v13 + 16) = &qword_254122AB0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541224F0 = v13;
      __cxa_guard_release(&qword_2541221B8);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541224E8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionDataArrayBase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionDataArrayBase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionDataArrayBase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionDataArrayBase>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

_QWORD *re::internal::defaultConstruct<re::IntrospectionDataArrayBase>(int a1, int a2, ArcSharedObject *this)
{
  _QWORD *v3;
  _QWORD *v4;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = 0u;
  v3 = (_QWORD *)((char *)this + 48);
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)((char *)v4 + 22) = 0;
  v4[2] = 0;
  v4[4] = 0;
  v4[5] = 0xFFFFFFFFLL;
  *v4 = &off_24ED7D928;
  v4[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v3);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionDataArrayBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::IntrospectionDataArrayBase>(_OWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  a1[3] = 0u;
  v1 = a1 + 3;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  *v2 = &off_24ED7D928;
  v2[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v1);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionDataArrayBase>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::allocInfo_IntrospectionDynamicString(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541221C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541221C8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122E68, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254122E78 = 0;
    qword_254122E88 = 0;
    qword_254122E90 = 0xFFFFFFFFLL;
    qword_254122E68 = (uint64_t)&off_24ED7DAA8;
    qword_254122E98 = (uint64_t)"IntrospectionDynamicString";
    dword_254122EA0 = 0;
    xmmword_254122EA8 = 0u;
    xmmword_254122EB8 = 0u;
    xmmword_254122EC8 = 0u;
    qword_254122ED8 = 0;
    __cxa_guard_release(&qword_2541221C8);
  }
  return &qword_254122E68;
}

void re::initInfo_IntrospectionDynamicString(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xCCE6C9CCDB070AAALL;
  v12[1] = "IntrospectionDynamicString";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2541221D8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541221D8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541221D0 = v10;
      __cxa_guard_release(&qword_2541221D8);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541221D0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionDynamicString>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionDynamicString>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionDynamicString>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionDynamicString>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::IntrospectionDynamicString>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0x2000000006;
  *(_DWORD *)(v3 + 24) = 8;
  *(_WORD *)(v3 + 28) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v3 = &off_24ED7D9A8;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionDynamicString>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionDynamicString>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0x2000000006;
  *(_DWORD *)(v1 + 24) = 8;
  *(_WORD *)(v1 + 28) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(v1 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v1 = &off_24ED7D9A8;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionDynamicString>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::allocInfo_IntrospectionHashTableBase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541221E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541221E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122EE0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254122EF0 = 0;
    qword_254122F00 = 0;
    qword_254122F08 = 0xFFFFFFFFLL;
    qword_254122EE0 = (uint64_t)&off_24ED7DAA8;
    qword_254122F10 = (uint64_t)"IntrospectionHashTableBase";
    dword_254122F18 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254122F50 = 0;
    __cxa_guard_release(&qword_2541221E8);
  }
  return &qword_254122EE0;
}

void re::initInfo_IntrospectionHashTableBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x138AE0C4810624ECLL;
  v18[1] = "IntrospectionHashTableBase";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_2541221F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541221F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541225B8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_IntrospectionBasePointer((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "keyInfo";
      *(_QWORD *)(v13 + 16) = &qword_254122AB0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541225C0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      re::introspect_IntrospectionBasePointer((re *)v14, v15);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "valueInfo";
      *(_QWORD *)(v16 + 16) = &qword_254122AB0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x4000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541225C8 = v16;
      __cxa_guard_release(&qword_2541221F0);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541225B8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionHashTableBase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionHashTableBase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionHashTableBase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionHashTableBase>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

re::IntrospectionHashTableBase *re::internal::defaultConstruct<re::IntrospectionHashTableBase>(int a1, int a2, re::IntrospectionHashTableBase *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::IntrospectionHashTableBase::IntrospectionHashTableBase(this);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionHashTableBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::IntrospectionHashTableBase *re::internal::defaultConstructV2<re::IntrospectionHashTableBase>(re::IntrospectionHashTableBase *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::IntrospectionHashTableBase::IntrospectionHashTableBase(this);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionHashTableBase>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *re::internal::defaultConstruct<re::IntrospectionPolymorphicType>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a3 + 8));
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

_QWORD *re::internal::defaultDestruct<re::IntrospectionPolymorphicType>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a3 + 8));
}

_QWORD *re::internal::defaultConstructV2<re::IntrospectionPolymorphicType>(uint64_t a1)
{
  _QWORD *result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

_QWORD *re::internal::defaultDestructV2<re::IntrospectionPolymorphicType>(uint64_t a1)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a1 + 8));
}

void re::IntrospectionInfo<re::IntrospectionPolymorphicType const*>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  __int128 v8;
  uint64_t v9;
  re *v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  const char *v23;
  char *__s1[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254122460);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254122460))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_254122728);
    __cxa_guard_release(&qword_254122460);
  }
  if ((byte_254122111 & 1) == 0)
  {
    byte_254122111 = 1;
    v1 = (uint64_t *)qword_254122210;
    if (!qword_254122210)
    {
      v2 = atomic_load((unsigned __int8 *)&qword_254122200);
      if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254122200))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122F58, 0);
        *(_QWORD *)(v9 + 22) = 0;
        qword_254122F68 = 0;
        *(_QWORD *)&xmmword_254122F78 = 0;
        *((_QWORD *)&xmmword_254122F78 + 1) = 0xFFFFFFFFLL;
        qword_254122F58 = (uint64_t)&off_24ED7DAA8;
        qword_254122F88 = (uint64_t)"IntrospectionPolymorphicType";
        dword_254122F90 = 0;
        xmmword_254122F98 = 0u;
        xmmword_254122FA8 = 0u;
        xmmword_254122FB8 = 0u;
        qword_254122FC8 = 0;
        __cxa_guard_release(&qword_254122200);
      }
      qword_254122210 = (uint64_t)&qword_254122F58;
      __s1[0] = (char *)0x6B4F0BF1FB5DBC2ALL;
      __s1[1] = "IntrospectionPolymorphicType";
      re::StringID::destroyString((re::StringID *)__s1);
      xmmword_254122F78 = v22;
      v4 = atomic_load((unsigned __int8 *)&qword_254122208);
      if ((v4 & 1) == 0)
      {
        v10 = (re *)__cxa_guard_acquire(&qword_254122208);
        if ((_DWORD)v10)
        {
          v11 = re::introspectionAllocator(v10);
          re::IntrospectionInfo<char const*>::get((uint64_t)v11, v12);
          v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
          *(_DWORD *)v13 = 1;
          *(_QWORD *)(v13 + 8) = "name";
          *(_QWORD *)(v13 + 16) = &qword_2541226E8;
          *(_QWORD *)(v13 + 24) = 0;
          *(_QWORD *)(v13 + 32) = 1;
          *(_DWORD *)(v13 + 40) = 0;
          *(_QWORD *)(v13 + 48) = 0;
          *(_QWORD *)(v13 + 56) = 0;
          *(_DWORD *)(v13 + 64) = 0;
          qword_2541225D0 = v13;
          v14 = re::introspectionAllocator((re *)v13);
          re::introspect_IntrospectionBasePointer((re *)v14, v15);
          v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
          *(_DWORD *)v16 = 1;
          *(_QWORD *)(v16 + 8) = "info";
          *(_QWORD *)(v16 + 16) = &qword_254122AB0;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0x800000002;
          *(_DWORD *)(v16 + 40) = 0;
          *(_QWORD *)(v16 + 48) = 0;
          *(_QWORD *)(v16 + 56) = 0;
          *(_DWORD *)(v16 + 64) = 0;
          qword_2541225D8 = v16;
          v17 = re::introspectionAllocator((re *)v16);
          v19 = re::introspect_uint64_t((re *)1, v18);
          v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
          *(_DWORD *)v20 = 1;
          *(_QWORD *)(v20 + 8) = "typeData";
          *(_QWORD *)(v20 + 16) = v19;
          *(_QWORD *)(v20 + 24) = 0;
          *(_QWORD *)(v20 + 32) = 0x1800000003;
          *(_DWORD *)(v20 + 40) = 0;
          *(_QWORD *)(v20 + 48) = 0;
          *(_QWORD *)(v20 + 56) = 0;
          *(_DWORD *)(v20 + 64) = 0;
          qword_2541225E0 = v20;
          __cxa_guard_release(&qword_254122208);
        }
      }
      qword_254122F68 = 0x2800000008;
      v1 = &qword_254122F58;
      dword_254122F70 = 8;
      word_254122F74 = 0;
      dword_254122F90 = 3;
      *(_QWORD *)&xmmword_254122F98 = &qword_2541225D0;
      *((_QWORD *)&xmmword_254122F98 + 1) = re::internal::defaultConstruct<re::IntrospectionPolymorphicType>;
      *(_QWORD *)&xmmword_254122FA8 = re::internal::defaultDestruct<re::IntrospectionPolymorphicType>;
      *(_QWORD *)&xmmword_254122FB8 = 0;
      *((_QWORD *)&xmmword_254122FA8 + 1) = 0;
      *((_QWORD *)&xmmword_254122FB8 + 1) = re::internal::defaultConstructV2<re::IntrospectionPolymorphicType>;
      qword_254122FC8 = (uint64_t)re::internal::defaultDestructV2<re::IntrospectionPolymorphicType>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254122F58, v3);
      *(_OWORD *)__s1 = v22;
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122728, 0);
    qword_254122738 = 0x800000001;
    dword_254122740 = 8;
    word_254122744 = 0;
    *(_QWORD *)&xmmword_254122748 = 0;
    *((_QWORD *)&xmmword_254122748 + 1) = 0xFFFFFFFFLL;
    qword_254122728 = (uint64_t)&off_24ED30800;
    qword_254122758 = (uint64_t)v1;
    unk_254122760 = 0;
    re::IntrospectionRegistry::add(v5, v6);
    re::getPrettyTypeName((re *)&qword_254122728, (const re::IntrospectionBase *)&v22);
    if ((BYTE8(v22) & 1) != 0)
      v7 = v23;
    else
      v7 = (char *)&v22 + 9;
    if ((_QWORD)v22 && (BYTE8(v22) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    if ((unint64_t)__s1[0] >> 1 == 94623636 && (__s1[1] == "char*" || !strcmp(__s1[1], "char*")))
    {
      v8 = v22;
    }
    else
    {
      v22 = *((_OWORD *)v1 + 2);
      v8 = v21;
    }
    xmmword_254122748 = v8;
    re::StringID::destroyString((re::StringID *)__s1);
  }
}

void re::internal::defaultConstruct<re::IntrospectionPolymorphicTable>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionPolymorphicTable>(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void re::introspect_IntrospectionMemberType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  StringID v38;
  _QWORD v39[2];
  _QWORD v40[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254122238);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254122238);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Simple";
      qword_254122678 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "ArrayWithSize";
      qword_254122680 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "PolymorphicWithInlineType";
      qword_254122688 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = 3;
      *(_QWORD *)(v34 + 16) = "Parent";
      qword_254122690 = v34;
      __cxa_guard_release(&qword_254122238);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254122240);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254122240))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541228E8, "IntrospectionMemberType", 4, 4, 1, 1);
    qword_2541228E8 = (uint64_t)&off_24ED7D9E8;
    qword_254122928 = (uint64_t)&re::introspect_IntrospectionMemberType(BOOL)::enumTable;
    dword_2541228F8 = 9;
    __cxa_guard_release(&qword_254122240);
  }
  if ((byte_25412210A & 1) == 0)
  {
    byte_25412210A = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541228E8, a2);
    v36 = 0x859EBCF7EF0CCDDELL;
    v37 = "IntrospectionMemberType";
    v40[0] = 208862;
    v40[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v40);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v40);
      v6 = (unsigned int *)qword_254122928;
      v39[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v38.var0 = 2 * v12;
            v38.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v16, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v38.var0 = 2 * v20;
              v38.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v24, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v25);
      xmmword_254122908 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "IntrospectionMemberType", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_IntrospectionStructureAttributeType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  StringID v42;
  _QWORD v43[2];
  _QWORD v44[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254122248);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254122248);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 1;
      *((_QWORD *)v28 + 2) = "Member";
      qword_2541226B8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 2;
      *((_QWORD *)v30 + 2) = "PolymorphicTable";
      qword_2541226C0 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 3;
      *((_QWORD *)v32 + 2) = "PolymorphicType";
      qword_2541226C8 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 4;
      *((_QWORD *)v34 + 2) = "Flags";
      qword_2541226D0 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 5;
      *((_QWORD *)v36 + 2) = "RenameMember";
      qword_2541226D8 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = 6;
      *(_QWORD *)(v38 + 16) = "ComplexVersioningFunction";
      qword_2541226E0 = v38;
      __cxa_guard_release(&qword_254122248);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254122250);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254122250))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254122930, "IntrospectionStructureAttributeType", 4, 4, 1, 1);
    qword_254122930 = (uint64_t)&off_24ED7D9E8;
    qword_254122970 = (uint64_t)&re::introspect_IntrospectionStructureAttributeType(BOOL)::enumTable;
    dword_254122940 = 9;
    __cxa_guard_release(&qword_254122250);
  }
  if ((byte_25412210B & 1) == 0)
  {
    byte_25412210B = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254122930, a2);
    v40 = 0xE05DA9CA5EB8957CLL;
    v41 = "IntrospectionStructureAttributeType";
    v44[0] = 208862;
    v44[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v44);
      v6 = (unsigned int *)qword_254122970;
      v43[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v44, &v40, 1, 1, (uint64_t)v43);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v42.var0 = 2 * v12;
            v42.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v16, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v42.var0 = 2 * v20;
              v42.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v24, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v25);
      xmmword_254122950 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v44);
      re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "IntrospectionStructureAttributeType", v40, v41);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspectionTable_IntrospectionStructureAttribute(re *this)
{
  unsigned __int8 v1;
  re *v2;
  re *v3;
  re::IntrospectionBase *v4;
  re *v5;
  re::IntrospectionBase *v6;
  re *v7;
  re::IntrospectionBase *v8;
  re *v9;
  re::IntrospectionBase *v10;
  re *v11;
  re::IntrospectionBase *v12;
  re *v13;
  re::IntrospectionBase *v14;
  re *BindPointAttribute;
  re::IntrospectionBase *v16;

  if ((byte_25412210C & 1) == 0)
  {
    byte_25412210C = 1;
    v1 = atomic_load((unsigned __int8 *)&qword_254122258);
    if ((v1 & 1) == 0)
    {
      v2 = (re *)__cxa_guard_acquire(&qword_254122258);
      if ((_DWORD)v2)
      {
        qword_2558361A8 = (uint64_t)"IntrospectionMember";
        v3 = (re *)qword_254122288;
        if (!qword_254122288)
        {
          v3 = (re *)re::allocInfo_IntrospectionMember(v2);
          qword_254122288 = (uint64_t)v3;
          re::initInfo_IntrospectionMember(v3, v4);
        }
        qword_2558361B0 = (uint64_t)v3;
        *(_QWORD *)algn_2558361B8 = 0;
        qword_2558361C0 = 1;
        dword_2558361C8 = 0;
        qword_2558361D0 = (uint64_t)"IntrospectionPolymorphicTableAttribute";
        v5 = (re *)qword_2541222A0;
        if (!qword_2541222A0)
        {
          v5 = (re *)re::allocInfo_IntrospectionPolymorphicTableAttribute(v2);
          qword_2541222A0 = (uint64_t)v5;
          re::initInfo_IntrospectionPolymorphicTableAttribute(v5, v6);
        }
        qword_2558361D8 = (uint64_t)v5;
        unk_2558361E0 = 0;
        qword_2558361E8 = 2;
        dword_2558361F0 = 0;
        qword_2558361F8 = (uint64_t)"IntrospectionPolymorphicTypeAttribute";
        v7 = (re *)qword_2541222B8;
        if (!qword_2541222B8)
        {
          v7 = (re *)re::allocInfo_IntrospectionPolymorphicTypeAttribute(v2);
          qword_2541222B8 = (uint64_t)v7;
          re::initInfo_IntrospectionPolymorphicTypeAttribute(v7, v8);
        }
        qword_255836200 = (uint64_t)v7;
        *(_QWORD *)algn_255836208 = 0;
        qword_255836210 = 3;
        dword_255836218 = 0;
        qword_255836220 = (uint64_t)"IntrospectionFlagsAttribute";
        v9 = (re *)qword_2541222D0;
        if (!qword_2541222D0)
        {
          v9 = (re *)re::allocInfo_IntrospectionFlagsAttribute(v2);
          qword_2541222D0 = (uint64_t)v9;
          re::initInfo_IntrospectionFlagsAttribute(v9, v10);
        }
        qword_255836228 = (uint64_t)v9;
        unk_255836230 = 0;
        qword_255836238 = 4;
        dword_255836240 = 0;
        qword_255836248 = (uint64_t)"IntrospectionRenameMemberAttribute";
        v11 = (re *)qword_2541222E8;
        if (!qword_2541222E8)
        {
          v11 = (re *)re::allocInfo_IntrospectionRenameMemberAttribute(v2);
          qword_2541222E8 = (uint64_t)v11;
          re::initInfo_IntrospectionRenameMemberAttribute(v11, v12);
        }
        qword_255836250 = (uint64_t)v11;
        *(_QWORD *)algn_255836258 = 0;
        qword_255836260 = 5;
        dword_255836268 = 0;
        qword_255836270 = (uint64_t)"IntrospectionComplexVersioningAttribute";
        v13 = (re *)qword_254122300;
        if (!qword_254122300)
        {
          v13 = (re *)re::allocInfo_IntrospectionComplexVersioningAttribute(v2);
          qword_254122300 = (uint64_t)v13;
          re::initInfo_IntrospectionComplexVersioningAttribute(v13, v14);
        }
        qword_255836278 = (uint64_t)v13;
        unk_255836280 = 0;
        qword_255836288 = 6;
        dword_255836290 = 0;
        qword_255836298 = (uint64_t)"IntrospectionCreateBindPointAttribute";
        BindPointAttribute = (re *)qword_254122320;
        if (!qword_254122320)
        {
          BindPointAttribute = (re *)re::allocInfo_IntrospectionCreateBindPointAttribute(v2);
          qword_254122320 = (uint64_t)BindPointAttribute;
          re::initInfo_IntrospectionCreateBindPointAttribute(BindPointAttribute, v16);
        }
        qword_2558362A0 = (uint64_t)BindPointAttribute;
        *(_QWORD *)algn_2558362A8 = 0;
        qword_2558362B0 = 7;
        dword_2558362B8 = 0;
        __cxa_guard_release(&qword_254122258);
      }
    }
    dword_2541224F8 = 7;
    qword_254122500 = (uint64_t)&qword_2558361A8;
  }
}

uint64_t *re::allocInfo_IntrospectionStructureAttribute(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122260);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122260))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254123048, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254123058 = 0;
    qword_254123068 = 0;
    qword_254123070 = 0xFFFFFFFFLL;
    qword_254123048 = (uint64_t)&off_24ED7DAA8;
    qword_254123078 = (uint64_t)"IntrospectionStructureAttribute";
    dword_254123080 = 0;
    xmmword_254123088 = 0u;
    xmmword_254123098 = 0u;
    xmmword_2541230A8 = 0u;
    qword_2541230B8 = 0;
    __cxa_guard_release(&qword_254122260);
  }
  return &qword_254123048;
}

void re::initInfo_IntrospectionStructureAttribute(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x868C2D67524F32C8;
  v12[1] = "IntrospectionStructureAttribute";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254122268);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122268);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_IntrospectionStructureAttributeType((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 32, 8);
      *(_DWORD *)v8 = 3;
      *(_QWORD *)(v8 + 8) = &qword_254122930;
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      qword_254122508 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::introspectionTable_IntrospectionStructureAttribute((re *)v9);
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 16, 8);
      *(_DWORD *)v10 = 2;
      *(_QWORD *)(v10 + 8) = &dword_2541224F8;
      qword_254122510 = v10;
      __cxa_guard_release(&qword_254122268);
    }
  }
  *((_QWORD *)this + 2) = 0x400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254122508;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionStructureAttribute>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionStructureAttribute>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionStructureAttribute>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionStructureAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::internal::defaultConstruct<re::IntrospectionStructureAttribute>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
}

_DWORD *re::internal::defaultConstructV2<re::IntrospectionStructureAttribute>(_DWORD *result)
{
  *result = 0;
  return result;
}

void *re::allocInfo_IntrospectionMember(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122278);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122278))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&_MergedGlobals_233, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionMember";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254122278);
  }
  return &_MergedGlobals_233;
}

void re::initInfo_IntrospectionMember(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x857863A49FC2EC2ALL;
  v21[1] = "IntrospectionMember";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254122280);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122280);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254122270;
      if (!qword_254122270)
      {
        v8 = re::allocInfo_IntrospectionStructureAttribute((re *)v6);
        qword_254122270 = (uint64_t)v8;
        re::initInfo_IntrospectionStructureAttribute((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionStructureAttribute";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122698 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<char const*>::get((uint64_t)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "name";
      *(_QWORD *)(v13 + 16) = &qword_2541226E8;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541226A0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      re::introspect_IntrospectionBasePointer((re *)v14, v15);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "memberInfo";
      *(_QWORD *)(v16 + 16) = &qword_254122AB0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541226A8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      re::introspect_IntrospectionMemberType((re *)v17, v18);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "memberType";
      *(_QWORD *)(v19 + 16) = &qword_2541228E8;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541226B0 = v19;
      __cxa_guard_release(&qword_254122280);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254122698;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionMember>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionMember>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionMember>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionMember>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

re::IntrospectionMember *re::internal::defaultConstruct<re::IntrospectionMember>(int a1, int a2, re::IntrospectionMember *this)
{
  return re::IntrospectionMember::IntrospectionMember(this);
}

_QWORD *re::internal::defaultDestruct<re::IntrospectionMember>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a3 + 48));
  return re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a3 + 16));
}

_QWORD *re::internal::defaultDestructV2<re::IntrospectionMember>(uint64_t a1)
{
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a1 + 48));
  return re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a1 + 16));
}

void *re::allocInfo_IntrospectionPolymorphicTableAttribute(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122290);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122290))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835A28, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionPolymorphicTableAttribute";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254122290);
  }
  return &unk_255835A28;
}

void re::initInfo_IntrospectionPolymorphicTableAttribute(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x7BCA109D2D15F12;
  v14[1] = "IntrospectionPolymorphicTableAttribute";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254122298);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122298);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254122270;
      if (!qword_254122270)
      {
        v8 = re::allocInfo_IntrospectionStructureAttribute((re *)v6);
        qword_254122270 = (uint64_t)v8;
        re::initInfo_IntrospectionStructureAttribute((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionStructureAttribute";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122518 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<re::IntrospectionPolymorphicTable const*>::get();
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "polymorphicTable";
      *(_QWORD *)(v12 + 16) = &qword_254122768;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254122520 = v12;
      __cxa_guard_release(&qword_254122298);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254122518;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionPolymorphicTableAttribute>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionPolymorphicTableAttribute>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionPolymorphicTableAttribute>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionPolymorphicTableAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::IntrospectionInfo<re::IntrospectionPolymorphicTable const*>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  __int128 v8;
  uint64_t v9;
  re *v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  char *__s1[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254122468);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254122468))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_254122768);
    __cxa_guard_release(&qword_254122468);
  }
  if ((byte_254122112 & 1) == 0)
  {
    byte_254122112 = 1;
    v1 = (uint64_t *)qword_254122230;
    if (!qword_254122230)
    {
      v2 = atomic_load((unsigned __int8 *)&qword_254122218);
      if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254122218))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122FD0, 0);
        *(_QWORD *)(v9 + 22) = 0;
        qword_254122FE0 = 0;
        *(_QWORD *)&xmmword_254122FF0 = 0;
        *((_QWORD *)&xmmword_254122FF0 + 1) = 0xFFFFFFFFLL;
        qword_254122FD0 = (uint64_t)&off_24ED7DAA8;
        qword_254123000 = (uint64_t)"IntrospectionPolymorphicTable";
        dword_254123008 = 0;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        qword_254123040 = 0;
        __cxa_guard_release(&qword_254122218);
      }
      qword_254122230 = (uint64_t)&qword_254122FD0;
      __s1[0] = (char *)0xFE92724D704390A6;
      __s1[1] = "IntrospectionPolymorphicTable";
      re::StringID::destroyString((re::StringID *)__s1);
      xmmword_254122FF0 = v16;
      v4 = atomic_load((unsigned __int8 *)&qword_254122228);
      if ((v4 & 1) == 0)
      {
        v10 = (re *)__cxa_guard_acquire(&qword_254122228);
        if ((_DWORD)v10)
        {
          v11 = re::introspectionAllocator(v10);
          re::IntrospectionInfo<re::IntrospectionPolymorphicType const*>::get();
          v13 = re::introspect_uint32_t((re *)1, v12);
          v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
          *(_DWORD *)v14 = 1;
          *(_QWORD *)(v14 + 8) = "table";
          *(_QWORD *)(v14 + 16) = &qword_254122728;
          *(_QWORD *)(v14 + 24) = 0;
          *(_QWORD *)(v14 + 32) = 0x800000001;
          *(_DWORD *)(v14 + 40) = 1;
          *(_QWORD *)(v14 + 48) = v13;
          *(_QWORD *)(v14 + 56) = 0;
          *(_DWORD *)(v14 + 64) = 0;
          qword_254122220 = v14;
          __cxa_guard_release(&qword_254122228);
        }
      }
      qword_254122FE0 = 0x1000000008;
      v1 = &qword_254122FD0;
      dword_254122FE8 = 8;
      word_254122FEC = 1;
      dword_254123008 = 1;
      qword_254123010 = (uint64_t)&qword_254122220;
      qword_254123018 = (uint64_t)re::internal::defaultConstruct<re::IntrospectionPolymorphicTable>;
      qword_254123020 = (uint64_t)re::internal::defaultDestruct<re::IntrospectionPolymorphicTable>;
      qword_254123030 = 0;
      qword_254123028 = 0;
      qword_254123038 = (uint64_t)re::internal::defaultConstructV2<re::IntrospectionPolymorphicTable>;
      qword_254123040 = (uint64_t)re::internal::defaultDestructV2<re::IntrospectionPolymorphicTable>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254122FD0, v3);
      *(_OWORD *)__s1 = v16;
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122768, 0);
    qword_254122778 = 0x800000001;
    dword_254122780 = 8;
    word_254122784 = 0;
    *(_QWORD *)&xmmword_254122788 = 0;
    *((_QWORD *)&xmmword_254122788 + 1) = 0xFFFFFFFFLL;
    qword_254122768 = (uint64_t)&off_24ED30800;
    qword_254122798 = (uint64_t)v1;
    unk_2541227A0 = 0;
    re::IntrospectionRegistry::add(v5, v6);
    re::getPrettyTypeName((re *)&qword_254122768, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v7 = v17;
    else
      v7 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    if ((unint64_t)__s1[0] >> 1 == 94623636 && (__s1[1] == "char*" || !strcmp(__s1[1], "char*")))
    {
      v8 = v16;
    }
    else
    {
      v16 = *((_OWORD *)v1 + 2);
      v8 = v15;
    }
    xmmword_254122788 = v8;
    re::StringID::destroyString((re::StringID *)__s1);
  }
}

void re::internal::defaultConstruct<re::IntrospectionPolymorphicTableAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionPolymorphicTableAttribute>(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void *re::allocInfo_IntrospectionPolymorphicTypeAttribute(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541222A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541222A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835AA0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionPolymorphicTypeAttribute";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2541222A8);
  }
  return &unk_255835AA0;
}

void re::initInfo_IntrospectionPolymorphicTypeAttribute(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x8519B7F970D5E80ELL;
  v19[1] = "IntrospectionPolymorphicTypeAttribute";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_2541222B0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541222B0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254122270;
      if (!qword_254122270)
      {
        v8 = re::allocInfo_IntrospectionStructureAttribute((re *)v6);
        qword_254122270 = (uint64_t)v8;
        re::initInfo_IntrospectionStructureAttribute((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionStructureAttribute";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541225E8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_IntrospectionBasePointer((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "polymorphicInfo";
      *(_QWORD *)(v13 + 16) = &qword_254122AB0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541225F0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_int((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "polymorphicTypeOffset";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x1800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2541225F8 = v17;
      __cxa_guard_release(&qword_2541222B0);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541225E8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionPolymorphicTypeAttribute>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionPolymorphicTypeAttribute>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionPolymorphicTypeAttribute>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionPolymorphicTypeAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

_QWORD *re::internal::defaultConstruct<re::IntrospectionPolymorphicTypeAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a3 + 8));
  *(_DWORD *)(a3 + 24) = 0;
  return result;
}

_QWORD *re::internal::defaultDestruct<re::IntrospectionPolymorphicTypeAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a3 + 8));
}

_QWORD *re::internal::defaultConstructV2<re::IntrospectionPolymorphicTypeAttribute>(uint64_t a1)
{
  _QWORD *result;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

_QWORD *re::internal::defaultDestructV2<re::IntrospectionPolymorphicTypeAttribute>(uint64_t a1)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a1 + 8));
}

void *re::allocInfo_IntrospectionFlagsAttribute(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541222C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541222C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835B18, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionFlagsAttribute";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2541222C0);
  }
  return &unk_255835B18;
}

void re::initInfo_IntrospectionFlagsAttribute(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0xF628A0708C2B08A0;
  v16[1] = "IntrospectionFlagsAttribute";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2541222C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541222C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254122270;
      if (!qword_254122270)
      {
        v8 = re::allocInfo_IntrospectionStructureAttribute((re *)v6);
        qword_254122270 = (uint64_t)v8;
        re::initInfo_IntrospectionStructureAttribute((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionStructureAttribute";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122528 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_uint32_t((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "flags";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x400000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254122530 = v14;
      __cxa_guard_release(&qword_2541222C8);
    }
  }
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254122528;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionFlagsAttribute>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionFlagsAttribute>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionFlagsAttribute>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionFlagsAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

void re::internal::defaultConstruct<re::IntrospectionFlagsAttribute>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
}

_QWORD *re::internal::defaultConstructV2<re::IntrospectionFlagsAttribute>(_QWORD *result)
{
  *result = 0;
  return result;
}

void *re::allocInfo_IntrospectionRenameMemberAttribute(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541222D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541222D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835B90, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionRenameMemberAttribute";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2541222D8);
  }
  return &unk_255835B90;
}

void re::initInfo_IntrospectionRenameMemberAttribute(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x5F5C67A515547252;
  v18[1] = "IntrospectionRenameMemberAttribute";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_2541222E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541222E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254122270;
      if (!qword_254122270)
      {
        v8 = re::allocInfo_IntrospectionStructureAttribute((re *)v6);
        qword_254122270 = (uint64_t)v8;
        re::initInfo_IntrospectionStructureAttribute((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionStructureAttribute";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122600 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<char const*>::get((uint64_t)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "oldName";
      *(_QWORD *)(v13 + 16) = &qword_2541226E8;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254122608 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<char const*>::get((uint64_t)v14, v15);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "currentName";
      *(_QWORD *)(v16 + 16) = &qword_2541226E8;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254122610 = v16;
      __cxa_guard_release(&qword_2541222E0);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254122600;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionRenameMemberAttribute>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionRenameMemberAttribute>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionRenameMemberAttribute>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionRenameMemberAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::internal::defaultConstruct<re::IntrospectionRenameMemberAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionRenameMemberAttribute>(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void *re::allocInfo_IntrospectionComplexVersioningAttribute(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541222F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541222F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835C08, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionComplexVersioningAttribute";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2541222F0);
  }
  return &unk_255835C08;
}

void re::initInfo_IntrospectionComplexVersioningAttribute(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x151FCB3FE48E5DBALL;
  v19[1] = "IntrospectionComplexVersioningAttribute";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_2541222F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541222F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254122270;
      if (!qword_254122270)
      {
        v8 = re::allocInfo_IntrospectionStructureAttribute((re *)v6);
        qword_254122270 = (uint64_t)v8;
        re::initInfo_IntrospectionStructureAttribute((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionStructureAttribute";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122618 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_IntrospectionBasePointer((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "previousInfo";
      *(_QWORD *)(v13 + 16) = &qword_254122AB0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254122620 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_size_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "version";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254122628 = v17;
      __cxa_guard_release(&qword_2541222F8);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254122618;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionComplexVersioningAttribute>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionComplexVersioningAttribute>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionComplexVersioningAttribute>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionComplexVersioningAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

_QWORD *re::internal::defaultConstruct<re::IntrospectionComplexVersioningAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  result = re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a3 + 16));
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  return result;
}

_QWORD *re::internal::defaultDestruct<re::IntrospectionComplexVersioningAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a3 + 16));
}

_QWORD *re::internal::defaultConstructV2<re::IntrospectionComplexVersioningAttribute>(uint64_t a1)
{
  _QWORD *result;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  result = re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

_QWORD *re::internal::defaultDestructV2<re::IntrospectionComplexVersioningAttribute>(uint64_t a1)
{
  return re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(a1 + 16));
}

void *re::allocInfo_IntrospectionCreateBindPointAttribute(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122308);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122308))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835C80, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionCreateBindPointAttribute";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254122308);
  }
  return &unk_255835C80;
}

void re::initInfo_IntrospectionCreateBindPointAttribute(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x5F39BBB1873362C0;
  v12[1] = "IntrospectionCreateBindPointAttribute";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254122318);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122318);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254122270;
      if (!qword_254122270)
      {
        v8 = re::allocInfo_IntrospectionStructureAttribute((re *)v6);
        qword_254122270 = (uint64_t)v8;
        re::initInfo_IntrospectionStructureAttribute((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionStructureAttribute";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122310 = v10;
      __cxa_guard_release(&qword_254122318);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254122310;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionCreateBindPointAttribute>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionCreateBindPointAttribute>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionCreateBindPointAttribute>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionCreateBindPointAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::internal::defaultConstruct<re::IntrospectionCreateBindPointAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionCreateBindPointAttribute>(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void *re::allocInfo_IntrospectionStructure(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122328);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122328))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835CF8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionStructure";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254122328);
  }
  return &unk_255835CF8;
}

void re::initInfo_IntrospectionStructure(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x14D39C8D0D949830;
  v19[1] = "IntrospectionStructure";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254122330);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122330);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122630 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<char const*>::get((uint64_t)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "name";
      *(_QWORD *)(v13 + 16) = &qword_2541226E8;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254122638 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<re::IntrospectionStructureAttribute const* const*>::get((re *)v14);
      v16 = re::introspect_uint32_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "structureAttributes";
      *(_QWORD *)(v17 + 16) = &qword_2541227A8;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x4000000002;
      *(_DWORD *)(v17 + 40) = 1;
      *(_QWORD *)(v17 + 48) = v16;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 56;
      qword_254122640 = v17;
      __cxa_guard_release(&qword_254122330);
    }
  }
  *((_QWORD *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254122630;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionStructure>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionStructure>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionStructure>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionStructure>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

void re::IntrospectionInfo<re::IntrospectionStructureAttribute const* const*>::get(re *a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  uint64_t *v3;
  re::IntrospectionBase *v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  __int128 v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  __int128 v12;
  __int128 v13;
  const char *v14;
  uint64_t v15;
  char *__s1;

  v1 = atomic_load((unsigned __int8 *)&qword_254122470);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_254122470);
    if ((_DWORD)a1)
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_2541227A8);
      __cxa_guard_release(&qword_254122470);
    }
  }
  if ((byte_254122113 & 1) == 0)
  {
    byte_254122113 = 1;
    v2 = atomic_load((unsigned __int8 *)&qword_254122478);
    if ((v2 & 1) == 0)
    {
      a1 = (re *)__cxa_guard_acquire(&qword_254122478);
      if ((_DWORD)a1)
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_2541227E8);
        __cxa_guard_release(&qword_254122478);
      }
    }
    if ((byte_254122114 & 1) == 0)
    {
      byte_254122114 = 1;
      v3 = (uint64_t *)qword_254122270;
      if (!qword_254122270)
      {
        v3 = re::allocInfo_IntrospectionStructureAttribute(a1);
        qword_254122270 = (uint64_t)v3;
        re::initInfo_IntrospectionStructureAttribute((re *)v3, v4);
      }
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541227E8, 0);
      qword_2541227F8 = 0x800000001;
      dword_254122800 = 8;
      word_254122804 = 0;
      *(_QWORD *)&xmmword_254122808 = 0;
      *((_QWORD *)&xmmword_254122808 + 1) = 0xFFFFFFFFLL;
      qword_2541227E8 = (uint64_t)&off_24ED30800;
      qword_254122818 = (uint64_t)v3;
      unk_254122820 = 0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2541227E8, (const re::IntrospectionBase *)&v13);
      if ((BYTE8(v13) & 1) != 0)
        v7 = v14;
      else
        v7 = (char *)&v13 + 9;
      if ((_QWORD)v13 && (BYTE8(v13) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v13 + 40))();
      if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0xB47AF28 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        v8 = v13;
      }
      else
      {
        v13 = *((_OWORD *)v3 + 2);
        v8 = v12;
      }
      xmmword_254122808 = v8;
      re::StringID::destroyString((re::StringID *)&v15);
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541227A8, 0);
    qword_2541227B8 = 0x800000001;
    dword_2541227C0 = 8;
    word_2541227C4 = 0;
    *(_QWORD *)&xmmword_2541227C8 = 0;
    *((_QWORD *)&xmmword_2541227C8 + 1) = 0xFFFFFFFFLL;
    qword_2541227A8 = (uint64_t)&off_24ED30800;
    qword_2541227D8 = (uint64_t)&qword_2541227E8;
    unk_2541227E0 = 0;
    re::IntrospectionRegistry::add(v9, v10);
    re::getPrettyTypeName((re *)&qword_2541227A8, (const re::IntrospectionBase *)&v13);
    if ((BYTE8(v13) & 1) != 0)
      v11 = v14;
    else
      v11 = (char *)&v13 + 9;
    if ((_QWORD)v13 && (BYTE8(v13) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v13 + 40))();
    if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0xB47AF28 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      xmmword_2541227C8 = v13;
    }
    else
    {
      v13 = xmmword_254122808;
      xmmword_2541227C8 = v12;
    }
    re::StringID::destroyString((re::StringID *)&v15);
  }
}

double re::internal::defaultConstruct<re::IntrospectionStructure>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 22) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v3 = &off_24ED7DAA8;
  *(_QWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_QWORD *)(v3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionStructure>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionStructure>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 22) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v1 = &off_24ED7DAA8;
  *(_QWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionStructure>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void re::introspect_IntrospectionEnumAttributeType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  StringID v34;
  _QWORD v35[2];
  _QWORD v36[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254122340);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254122340);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 1;
      *((_QWORD *)v28 + 2) = "Value";
      qword_254122538 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 2;
      *(_QWORD *)(v30 + 16) = "ValueRename";
      qword_254122540 = v30;
      __cxa_guard_release(&qword_254122340);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254122348);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254122348))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254122978, "IntrospectionEnumAttributeType", 4, 4, 1, 1);
    qword_254122978 = (uint64_t)&off_24ED7D9E8;
    qword_2541229B8 = (uint64_t)&re::introspect_IntrospectionEnumAttributeType(BOOL)::enumTable;
    dword_254122988 = 9;
    __cxa_guard_release(&qword_254122348);
  }
  if ((byte_25412210D & 1) == 0)
  {
    byte_25412210D = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254122978, a2);
    v32 = 0xB7843CC4D7E65C34;
    v33 = "IntrospectionEnumAttributeType";
    v36[0] = 208862;
    v36[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v36);
      v6 = (unsigned int *)qword_2541229B8;
      v35[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v34.var0 = 2 * v12;
            v34.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v16, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v34.var0 = 2 * v20;
              v34.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v24, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v25);
      xmmword_254122998 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "IntrospectionEnumAttributeType", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspectionTable_IntrospectionEnumAttribute(re *this)
{
  unsigned __int8 v1;
  re *v2;
  re *v3;
  re::IntrospectionBase *v4;
  re *v5;
  re::IntrospectionBase *v6;

  if ((byte_25412210E & 1) == 0)
  {
    byte_25412210E = 1;
    v1 = atomic_load((unsigned __int8 *)&qword_254122350);
    if ((v1 & 1) == 0)
    {
      v2 = (re *)__cxa_guard_acquire(&qword_254122350);
      if ((_DWORD)v2)
      {
        qword_254122A08 = (uint64_t)"IntrospectionEnumValue";
        v3 = (re *)qword_254122380;
        if (!qword_254122380)
        {
          v3 = (re *)re::allocInfo_IntrospectionEnumValue(v2);
          qword_254122380 = (uint64_t)v3;
          re::initInfo_IntrospectionEnumValue(v3, v4);
        }
        qword_254122A10 = (uint64_t)v3;
        qword_254122A18 = 0;
        qword_254122A20 = 1;
        dword_254122A28 = 0;
        qword_254122A30 = (uint64_t)"IntrospectionEnumValueRename";
        v5 = (re *)qword_254122398;
        if (!qword_254122398)
        {
          v5 = (re *)re::allocInfo_IntrospectionEnumValueRename(v2);
          qword_254122398 = (uint64_t)v5;
          re::initInfo_IntrospectionEnumValueRename(v5, v6);
        }
        qword_254122A38 = (uint64_t)v5;
        qword_254122A40 = 0;
        qword_254122A48 = 2;
        dword_254122A50 = 0;
        __cxa_guard_release(&qword_254122350);
      }
    }
    dword_254122548 = 2;
    qword_254122550 = (uint64_t)&qword_254122A08;
  }
}

void *re::allocInfo_IntrospectionEnumAttribute(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122358);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122358))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835D70, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionEnumAttribute";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254122358);
  }
  return &unk_255835D70;
}

void re::initInfo_IntrospectionEnumAttribute(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xDB2C4E827F1D1580;
  v12[1] = "IntrospectionEnumAttribute";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254122360);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122360);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_IntrospectionEnumAttributeType((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 32, 8);
      *(_DWORD *)v8 = 3;
      *(_QWORD *)(v8 + 8) = &qword_254122978;
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      qword_254122558 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::introspectionTable_IntrospectionEnumAttribute((re *)v9);
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 16, 8);
      *(_DWORD *)v10 = 2;
      *(_QWORD *)(v10 + 8) = &dword_254122548;
      qword_254122560 = v10;
      __cxa_guard_release(&qword_254122360);
    }
  }
  *((_QWORD *)this + 2) = 0x400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254122558;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionEnumAttribute>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionEnumAttribute>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionEnumAttribute>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionEnumAttribute>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::internal::defaultConstruct<re::IntrospectionEnumAttribute>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
}

_DWORD *re::internal::defaultConstructV2<re::IntrospectionEnumAttribute>(_DWORD *result)
{
  *result = 0;
  return result;
}

void *re::allocInfo_IntrospectionEnumValue(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122370);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122370))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835DE8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionEnumValue";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254122370);
  }
  return &unk_255835DE8;
}

void re::initInfo_IntrospectionEnumValue(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x14D386891822472ALL;
  v19[1] = "IntrospectionEnumValue";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254122378);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122378);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)qword_254122368;
      if (!qword_254122368)
      {
        v8 = (re *)re::allocInfo_IntrospectionEnumAttribute((re *)v6);
        qword_254122368 = (uint64_t)v8;
        re::initInfo_IntrospectionEnumAttribute(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionEnumAttribute";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122648 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_uint64_t((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "value";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254122650 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      re::IntrospectionInfo<char const*>::get((uint64_t)v15, v16);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "name";
      *(_QWORD *)(v17 + 16) = &qword_2541226E8;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x1000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254122658 = v17;
      __cxa_guard_release(&qword_254122378);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254122648;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionEnumValue>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionEnumValue>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionEnumValue>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionEnumValue>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

void re::internal::defaultConstruct<re::IntrospectionEnumValue>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionEnumValue>(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void *re::allocInfo_IntrospectionEnumValueRename(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122388);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122388))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835E60, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionEnumValueRename";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254122388);
  }
  return &unk_255835E60;
}

void re::initInfo_IntrospectionEnumValueRename(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  re *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0xC1C966A0A2370666;
  v19[1] = "IntrospectionEnumValueRename";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254122390);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122390);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (re *)qword_254122368;
      if (!qword_254122368)
      {
        v8 = (re *)re::allocInfo_IntrospectionEnumAttribute((re *)v6);
        qword_254122368 = (uint64_t)v8;
        re::initInfo_IntrospectionEnumAttribute(v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionEnumAttribute";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122660 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_uint64_t((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "newValue";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x800000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254122668 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      re::IntrospectionInfo<char const*>::get((uint64_t)v15, v16);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "oldName";
      *(_QWORD *)(v17 + 16) = &qword_2541226E8;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x1000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254122670 = v17;
      __cxa_guard_release(&qword_254122390);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254122660;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionEnumValueRename>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionEnumValueRename>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionEnumValueRename>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionEnumValueRename>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

void re::internal::defaultConstruct<re::IntrospectionEnumValueRename>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionEnumValueRename>(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void re::IntrospectionInfo<re::IntrospectionEnumAttribute const* const*>::get(re *a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  re *v3;
  re::IntrospectionBase *v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  __int128 v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  __int128 v12;
  __int128 v13;
  const char *v14;
  uint64_t v15;
  char *__s1;

  v1 = atomic_load((unsigned __int8 *)&qword_254122480);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_254122480);
    if ((_DWORD)a1)
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_254122828);
      __cxa_guard_release(&qword_254122480);
    }
  }
  if ((byte_254122115 & 1) == 0)
  {
    byte_254122115 = 1;
    v2 = atomic_load((unsigned __int8 *)&qword_254122488);
    if ((v2 & 1) == 0)
    {
      a1 = (re *)__cxa_guard_acquire(&qword_254122488);
      if ((_DWORD)a1)
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_254122868);
        __cxa_guard_release(&qword_254122488);
      }
    }
    if ((byte_254122116 & 1) == 0)
    {
      byte_254122116 = 1;
      v3 = (re *)qword_254122368;
      if (!qword_254122368)
      {
        v3 = (re *)re::allocInfo_IntrospectionEnumAttribute(a1);
        qword_254122368 = (uint64_t)v3;
        re::initInfo_IntrospectionEnumAttribute(v3, v4);
      }
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122868, 0);
      qword_254122878 = 0x800000001;
      dword_254122880 = 8;
      word_254122884 = 0;
      *(_QWORD *)&xmmword_254122888 = 0;
      *((_QWORD *)&xmmword_254122888 + 1) = 0xFFFFFFFFLL;
      qword_254122868 = (uint64_t)&off_24ED30800;
      qword_254122898 = (uint64_t)v3;
      unk_2541228A0 = 0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_254122868, (const re::IntrospectionBase *)&v13);
      if ((BYTE8(v13) & 1) != 0)
        v7 = v14;
      else
        v7 = (char *)&v13 + 9;
      if ((_QWORD)v13 && (BYTE8(v13) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v13 + 40))();
      if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0xB47AF28 && (__s1 == "char*" || !strcmp(__s1, "char*")))
      {
        v8 = v13;
      }
      else
      {
        v13 = *((_OWORD *)v3 + 2);
        v8 = v12;
      }
      xmmword_254122888 = v8;
      re::StringID::destroyString((re::StringID *)&v15);
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254122828, 0);
    qword_254122838 = 0x800000001;
    dword_254122840 = 8;
    word_254122844 = 0;
    *(_QWORD *)&xmmword_254122848 = 0;
    *((_QWORD *)&xmmword_254122848 + 1) = 0xFFFFFFFFLL;
    qword_254122828 = (uint64_t)&off_24ED30800;
    qword_254122858 = (uint64_t)&qword_254122868;
    unk_254122860 = 0;
    re::IntrospectionRegistry::add(v9, v10);
    re::getPrettyTypeName((re *)&qword_254122828, (const re::IntrospectionBase *)&v13);
    if ((BYTE8(v13) & 1) != 0)
      v11 = v14;
    else
      v11 = (char *)&v13 + 9;
    if ((_QWORD)v13 && (BYTE8(v13) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v13 + 40))();
    if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0xB47AF28 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      xmmword_254122848 = v13;
    }
    else
    {
      v13 = xmmword_254122888;
      xmmword_254122848 = v12;
    }
    re::StringID::destroyString((re::StringID *)&v15);
  }
}

void re::internal::defaultConstruct<re::IntrospectionEnumTable>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::IntrospectionEnumTable>(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void *re::allocInfo_IntrospectionEnum(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541223C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541223C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835F50, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionEnum";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2541223C0);
  }
  return &unk_255835F50;
}

void re::initInfo_IntrospectionEnum(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xAF6C477EF8F24678;
  v14[1] = "IntrospectionEnum";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_2541223C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541223C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254122148;
      if (!qword_254122148)
      {
        v8 = re::allocInfo_IntrospectionBasic((re *)v6);
        qword_254122148 = (uint64_t)v8;
        re::initInfo_IntrospectionBasic((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBasic";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122568 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<re::IntrospectionEnumTable const*>::get();
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "enumTable";
      *(_QWORD *)(v12 + 16) = &qword_2541228A8;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x4000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254122570 = v12;
      __cxa_guard_release(&qword_2541223C8);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254122568;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionEnum>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionEnum>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionEnum>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionEnum>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::IntrospectionInfo<re::IntrospectionEnumTable const*>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  char *v2;
  unsigned __int8 v3;
  const re::IntrospectionBase *v4;
  unsigned __int8 v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  __int128 v9;
  re *v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  char *__s1[2];

  v0 = atomic_load((unsigned __int8 *)&qword_254122490);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254122490))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_2541228A8);
    __cxa_guard_release(&qword_254122490);
  }
  if ((byte_254122117 & 1) == 0)
  {
    byte_254122117 = 1;
    v1 = (uint64_t *)qword_2541223B8;
    v2 = "S_9AllocatorEJffEEEDaPT0_DpT1_EUlPvE_";
    if (!qword_2541223B8)
    {
      v3 = atomic_load((unsigned __int8 *)&qword_2541223A0);
      v1 = &qword_255835ED8;
      if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541223A0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255835ED8, 0);
        *(uint64_t *)((char *)&qword_255835EE8 + 6) = 0;
        qword_255835EE8 = 0;
        *(_QWORD *)&xmmword_255835EF8 = 0;
        *((_QWORD *)&xmmword_255835EF8 + 1) = 0xFFFFFFFFLL;
        qword_255835ED8 = (uint64_t)&off_24ED7DAA8;
        qword_255835F08 = (uint64_t)"IntrospectionEnumTable";
        dword_255835F10 = 0;
        xmmword_255835F18 = 0u;
        *(_OWORD *)&qword_255835F28 = 0u;
        xmmword_255835F38 = 0u;
        qword_255835F48 = 0;
        __cxa_guard_release(&qword_2541223A0);
      }
      qword_2541223B8 = (uint64_t)&qword_255835ED8;
      __s1[0] = (char *)0x14D3868917E99BE4;
      __s1[1] = "IntrospectionEnumTable";
      re::StringID::destroyString((re::StringID *)__s1);
      xmmword_255835EF8 = v16;
      v5 = atomic_load((unsigned __int8 *)&qword_2541223B0);
      if ((v5 & 1) == 0)
      {
        v10 = (re *)__cxa_guard_acquire(&qword_2541223B0);
        if ((_DWORD)v10)
        {
          v11 = re::introspectionAllocator(v10);
          re::IntrospectionInfo<re::IntrospectionEnumAttribute const* const*>::get((re *)v11);
          v13 = re::introspect_uint32_t((re *)1, v12);
          v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
          *(_DWORD *)v14 = 1;
          *(_QWORD *)(v14 + 8) = "enumTable";
          *(_QWORD *)(v14 + 16) = &qword_254122828;
          *(_QWORD *)(v14 + 24) = 0;
          *(_QWORD *)(v14 + 32) = 0x800000001;
          *(_DWORD *)(v14 + 40) = 1;
          *(_QWORD *)(v14 + 48) = v13;
          *(_QWORD *)(v14 + 56) = 0;
          v2 = "ZN2re8internal14makeNodeUniqueINS0_48CoreIKDoubleExponentialTransformFilterNodeHelperENS_9AllocatorEJffEE"
               "EDaPT0_DpT1_EUlPvE_"
             + 87;
          *(_DWORD *)(v14 + 64) = 0;
          qword_2541223A8 = v14;
          __cxa_guard_release(&qword_2541223B0);
        }
      }
      qword_255835EE8 = 0x1000000008;
      dword_255835EF0 = 8;
      word_255835EF4 = 1;
      dword_255835F10 = 1;
      *(_QWORD *)&xmmword_255835F18 = &qword_2541223A8;
      *((_QWORD *)&xmmword_255835F18 + 1) = re::internal::defaultConstruct<re::IntrospectionEnumTable>;
      qword_255835F28 = (uint64_t)re::internal::defaultDestruct<re::IntrospectionEnumTable>;
      unk_255835F30 = 0;
      *(_QWORD *)&xmmword_255835F38 = 0;
      *((_QWORD *)&xmmword_255835F38 + 1) = re::internal::defaultConstructV2<re::IntrospectionEnumTable>;
      qword_255835F48 = (uint64_t)re::internal::defaultDestructV2<re::IntrospectionEnumTable>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255835ED8, v4);
      *(_OWORD *)__s1 = v16;
    }
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541228A8, 0);
    qword_2541228B8 = *((_QWORD *)v2 + 192);
    dword_2541228C0 = 8;
    word_2541228C4 = 0;
    *(_QWORD *)&xmmword_2541228C8 = 0;
    *((_QWORD *)&xmmword_2541228C8 + 1) = 0xFFFFFFFFLL;
    qword_2541228A8 = (uint64_t)&off_24ED30800;
    qword_2541228D8 = (uint64_t)v1;
    unk_2541228E0 = 0;
    re::IntrospectionRegistry::add(v6, v7);
    re::getPrettyTypeName((re *)&qword_2541228A8, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v8 = v17;
    else
      v8 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    if ((unint64_t)__s1[0] >> 1 == 94623636 && (__s1[1] == "char*" || !strcmp(__s1[1], "char*")))
    {
      v9 = v16;
    }
    else
    {
      v16 = *((_OWORD *)v1 + 2);
      v9 = v15;
    }
    xmmword_2541228C8 = v9;
    re::StringID::destroyString((re::StringID *)__s1);
  }
}

void re::internal::defaultConstruct<re::IntrospectionEnum>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 22) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 40) = -1;
  *(_QWORD *)(v3 + 52) = 0;
  *(_QWORD *)(v3 + 44) = 0;
  *(_QWORD *)v3 = &off_24ED7D9E8;
  *(_QWORD *)(v3 + 64) = 0;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionEnum>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::IntrospectionEnum>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 22) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 40) = -1;
  *(_QWORD *)(v1 + 52) = 0;
  *(_QWORD *)(v1 + 44) = 0;
  *(_QWORD *)v1 = &off_24ED7D9E8;
  *(_QWORD *)(v1 + 64) = 0;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionEnum>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionStringID(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541223D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541223D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835FC8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionStringID";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2541223D8);
  }
  return &unk_255835FC8;
}

void re::initInfo_IntrospectionStringID(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x8EE0D4EDE1F434ELL;
  v12[1] = "IntrospectionStringID";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2541223E8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541223E8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541223E0 = v10;
      __cxa_guard_release(&qword_2541223E8);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541223E0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionStringID>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionStringID>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionStringID>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionStringID>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::IntrospectionStringID>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_DWORD *)(v3 + 24) = 8;
  *(_WORD *)(v3 + 28) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v3 = &off_24ED7DA68;
  *(_QWORD *)&result = 0x100000000ALL;
  *(_QWORD *)(v3 + 16) = 0x100000000ALL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionStringID>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionStringID>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_DWORD *)(v1 + 24) = 8;
  *(_WORD *)(v1 + 28) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v1 = &off_24ED7DA68;
  *(_QWORD *)&result = 0x100000000ALL;
  *(_QWORD *)(v1 + 16) = 0x100000000ALL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionStringID>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionCallbackSerializer(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541223F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541223F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255836040, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionCallbackSerializer";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_2541223F8);
  }
  return &unk_255836040;
}

void re::initInfo_IntrospectionCallbackSerializer(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xE6B7F5AA71E05564;
  v12[1] = "IntrospectionCallbackSerializer";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254122408);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122408);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122400 = v10;
      __cxa_guard_release(&qword_254122408);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254122400;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionCallbackSerializer>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionCallbackSerializer>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionCallbackSerializer>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionCallbackSerializer>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::IntrospectionCallbackSerializer>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 22) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 40) = -1;
  *(_QWORD *)(v3 + 52) = 0;
  *(_QWORD *)(v3 + 44) = 0;
  *(_QWORD *)v3 = &off_24ED7DA28;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IntrospectionCallbackSerializer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::IntrospectionCallbackSerializer>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 22) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 40) = -1;
  *(_QWORD *)(v1 + 52) = 0;
  *(_QWORD *)(v1 + 44) = 0;
  *(_QWORD *)v1 = &off_24ED7DA28;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionCallbackSerializer>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *re::allocInfo_IntrospectionOptionalBase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122418);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122418))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558360B8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "IntrospectionOptionalBase";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254122418);
  }
  return &unk_2558360B8;
}

void re::initInfo_IntrospectionOptionalBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x9A8DDE13626C7318;
  v15[1] = "IntrospectionOptionalBase";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_254122420);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122420);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
      if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
      {
        v8 = re::allocInfo_IntrospectionBase((re *)v6);
        re::internal::introspectionInfoStorage<re::IntrospectionBase> = v8;
        re::initInfo_IntrospectionBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "IntrospectionBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254122578 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::introspect_IntrospectionBasePointer((re *)v11, v12);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "valueInfo";
      *(_QWORD *)(v13 + 16) = &qword_254122AB0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254122580 = v13;
      __cxa_guard_release(&qword_254122420);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254122578;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IntrospectionOptionalBase>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IntrospectionOptionalBase>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IntrospectionOptionalBase>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IntrospectionOptionalBase>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

_QWORD *re::internal::defaultConstruct<re::IntrospectionOptionalBase>(int a1, int a2, ArcSharedObject *this)
{
  _QWORD *v3;
  _QWORD *v4;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = 0u;
  v3 = (_QWORD *)((char *)this + 48);
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)((char *)v4 + 22) = 0;
  v4[2] = 0;
  v4[4] = 0;
  v4[5] = 0xFFFFFFFFLL;
  *v4 = &off_24ED2DDF8;
  v4[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v3);
}

uint64_t re::internal::defaultDestruct<re::IntrospectionOptionalBase>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::IntrospectionOptionalBase>(_OWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  a1[3] = 0u;
  v1 = a1 + 3;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)((char *)v2 + 22) = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0xFFFFFFFFLL;
  *v2 = &off_24ED2DDF8;
  v2[7] = 0;
  return re::SerializedReference<re::IntrospectionBase const*>::reset(v1);
}

uint64_t re::internal::defaultDestructV2<re::IntrospectionOptionalBase>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void re::introspect_IntrospectionType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  re *v40;
  uint64_t *v41;
  re *v42;
  uint64_t *v43;
  re *v44;
  uint64_t *v45;
  re *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  StringID v52;
  _QWORD v53[2];
  _QWORD v54[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254122430);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254122430);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Basic";
      qword_254122A58 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Pointer";
      qword_254122A60 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "CStyleArray";
      qword_254122A68 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "DynamicArray";
      qword_254122A70 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 5;
      *((_QWORD *)v36 + 2) = "DataArray";
      qword_254122A78 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((_QWORD *)v38 + 1) = 6;
      *((_QWORD *)v38 + 2) = "DynamicString";
      qword_254122A80 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *((_QWORD *)v40 + 1) = 7;
      *((_QWORD *)v40 + 2) = "HashTable";
      qword_254122A88 = (uint64_t)v40;
      v41 = re::introspectionAllocator(v40);
      v42 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 24, 8);
      *(_DWORD *)v42 = 1;
      *((_QWORD *)v42 + 1) = 8;
      *((_QWORD *)v42 + 2) = "Structure";
      qword_254122A90 = (uint64_t)v42;
      v43 = re::introspectionAllocator(v42);
      v44 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 24, 8);
      *(_DWORD *)v44 = 1;
      *((_QWORD *)v44 + 1) = 9;
      *((_QWORD *)v44 + 2) = "Enum";
      qword_254122A98 = (uint64_t)v44;
      v45 = re::introspectionAllocator(v44);
      v46 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 24, 8);
      *(_DWORD *)v46 = 1;
      *((_QWORD *)v46 + 1) = 10;
      *((_QWORD *)v46 + 2) = "StringID";
      qword_254122AA0 = (uint64_t)v46;
      v47 = re::introspectionAllocator(v46);
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 24, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = 11;
      *(_QWORD *)(v48 + 16) = "CallbackSerializer";
      qword_254122AA8 = v48;
      __cxa_guard_release(&qword_254122430);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254122438);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254122438))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541229C0, "IntrospectionType", 4, 4, 1, 1);
    qword_2541229C0 = (uint64_t)&off_24ED7D9E8;
    qword_254122A00 = (uint64_t)&re::introspect_IntrospectionType(BOOL)::enumTable;
    dword_2541229D0 = 9;
    __cxa_guard_release(&qword_254122438);
  }
  if ((byte_25412210F & 1) == 0)
  {
    byte_25412210F = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541229C0, a2);
    v50 = 0xAF6C477EF9003AEALL;
    v51 = "IntrospectionType";
    v54[0] = 208862;
    v54[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v54);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v54);
      v6 = (unsigned int *)qword_254122A00;
      v53[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v54, &v50, 1, 1, (uint64_t)v53);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v52.var0 = 2 * v12;
            v52.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v54, v16, &v52);
            re::StringID::destroyString((re::StringID *)&v52);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v52.var0 = 2 * v20;
              v52.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v54, v24, &v52);
              re::StringID::destroyString((re::StringID *)&v52);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v54, v25);
      xmmword_2541229E0 = (__int128)v52;
      re::StringID::destroyString((re::StringID *)&v50);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v54);
      re::internal::assertLog((re::internal *)5, v49, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "IntrospectionType", v50, v51);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_PersistedSchema(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254122440);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254122440))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255836130, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "PersistedSchema";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254122440);
  }
  return &unk_255836130;
}

void re::initInfo_PersistedSchema(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0xE30C31A82622B1A8;
  v11[1] = "PersistedSchema";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_254122450);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254122450);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "types";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254122448 = v9;
      __cxa_guard_release(&qword_254122450);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254122448;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::PersistedSchema>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::PersistedSchema>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::PersistedSchema>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::PersistedSchema>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

uint64_t *re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_mutex_base *v9;
  uint64_t v11;
  int v12;
  re::IntrospectionRegistry *v13;
  const re::IntrospectionBase *v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const char *v20;
  uint64_t v21[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info);
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&off_24ED88020;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    v4 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    if (v4)
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
  v8 = re::IntrospectionInfo<re::IntrospectionBase const*>::get((re *)1);
  if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex((re *)v8);
      std::__shared_mutex_base::unlock(v9);
    }
  }
  else
  {
    v11 = (uint64_t)v8;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized = 1;
    v12 = *((_DWORD *)v8 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, 0);
    qword_255825BA0 = 0x3000000007;
    dword_255825BA8 = v12;
    word_255825BAC = 0;
    *(_QWORD *)&xmmword_255825BB0 = 0;
    *((_QWORD *)&xmmword_255825BB0 + 1) = 0xFFFFFFFFLL;
    qword_255825BC0 = (uint64_t)v7;
    unk_255825BC8 = 0;
    qword_255825BD0 = v11;
    unk_255825BD8 = 0;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&off_24ED88020;
    re::IntrospectionRegistry::add(v13, v14);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, (const re::IntrospectionBase *)&v19);
    if ((BYTE8(v19) & 1) != 0)
      v15 = v20;
    else
      v15 = (char *)&v19 + 9;
    if ((_QWORD)v19 && (BYTE8(v19) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v19 + 40))();
    v16 = v7[2];
    v18 = *(_OWORD *)(v11 + 32);
    v19 = v16;
    xmmword_255825BB0 = v17;
    re::StringID::destroyString((re::StringID *)v21);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::PersistedSchema>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 36) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestruct<re::PersistedSchema>(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4, a1);
}

double re::internal::defaultConstructV2<re::PersistedSchema>(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::introspect_PersistedSchema(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PersistedSchema", (uint64_t (*)(re::internal *))re::allocInfo_PersistedSchema, (re::IntrospectionBase *(*)(void))re::initInfo_PersistedSchema, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PersistedSchema>, this);
}

void std::__function::__func<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0,std::allocator<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0,std::allocator<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED87F90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0,std::allocator<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED87F90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0,std::allocator<re::PersistedSchema::addIntrospectionGraph(re::IntrospectionBase const*)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  if (*(_DWORD *)(a2 + 16) == 11
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 8);
    result = **a3;
    v11 = result;
    if (result)
    {
      v5 = *(_DWORD *)(result + 16);
      v6 = v5 > 0xA;
      v7 = (1 << v5) & 0x441;
      if (v6 || v7 == 0)
      {
        re::getPrettyTypeName((re *)result, (const re::IntrospectionBase *)&v9);
        if (!re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v4, (uint64_t)&v9))
        {
          re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew(v4, (re::DynamicString *)&v9, &v11);
          re::DynamicArray<re::TransitionCondition *>::add(*(_QWORD **)(v3 + 16), &v11);
        }
        result = v9;
        if (v9)
        {
          if ((v10 & 1) != 0)
            return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
        }
      }
    }
  }
  return result;
}

uint64_t *re::IntrospectionInfo<re::IntrospectionBase const*>::get(re *a1)
{
  int v1;
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  uint64_t *v6;
  re::IntrospectionBase *v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  std::__shared_mutex_base *v12;
  __int128 v14;
  __int128 v15;
  const char *v16;
  unint64_t v17;
  char *__s1;

  v1 = (int)a1;
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)a1)
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info);
    }
  }
  if (v1)
  {
    if (re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::isInitialized)
    {
LABEL_21:
      v12 = re::introspectionSharedMutex(a1);
      std::__shared_mutex_base::unlock(v12);
      return &re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::isInitialized = 1;
  v6 = (uint64_t *)re::internal::introspectionInfoStorage<re::IntrospectionBase>;
  if (!re::internal::introspectionInfoStorage<re::IntrospectionBase>)
  {
    v6 = re::allocInfo_IntrospectionBase(a1);
    re::internal::introspectionInfoStorage<re::IntrospectionBase> = v6;
    re::initInfo_IntrospectionBase((re *)v6, v7);
  }
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info, 0);
  qword_255825B00 = 0x800000001;
  dword_255825B08 = 8;
  word_255825B0C = 0;
  *(_QWORD *)&xmmword_255825B10 = 0;
  *((_QWORD *)&xmmword_255825B10 + 1) = 0xFFFFFFFFLL;
  re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info = (uint64_t)&off_24ED30800;
  qword_255825B20 = (uint64_t)v6;
  unk_255825B28 = 0;
  re::IntrospectionRegistry::add(v8, v9);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
  if ((BYTE8(v15) & 1) != 0)
    v10 = v16;
  else
    v10 = (char *)&v15 + 9;
  if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  if (v17 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
  {
    v11 = v15;
  }
  else
  {
    v15 = *((_OWORD *)v6 + 2);
    v11 = v14;
  }
  xmmword_255825B10 = v11;
  re::StringID::destroyString((re::StringID *)&v17);
  if ((v1 & 1) == 0)
    goto LABEL_21;
  return &re::IntrospectionInfo<re::IntrospectionBase const*>::get(BOOL)::info;
}

void std::__function::__func<re::PersistedSchema::hookupPointers(void)::$_0,std::allocator<re::PersistedSchema::hookupPointers(void)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::PersistedSchema::hookupPointers(void)::$_0,std::allocator<re::PersistedSchema::hookupPointers(void)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED87FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::PersistedSchema::hookupPointers(void)::$_0,std::allocator<re::PersistedSchema::hookupPointers(void)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED87FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::PersistedSchema::hookupPointers(void)::$_0,std::allocator<re::PersistedSchema::hookupPointers(void)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, uint64_t **a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  re::PersistedSchema *v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint8_t buf[4];
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (**(_BYTE **)(result + 16))
    v3 = *(_DWORD *)(a2 + 16) == 11;
  else
    v3 = 0;
  if (v3
  {
    v4 = result;
    v5 = *a3;
    v6 = *(re::PersistedSchema **)(result + 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v13, (const re::DynamicString *)(*a3)[1]);
    v7 = v14 >> 1;
    if ((v14 & 1) == 0)
      v7 = v14 >> 1;
    if (v7)
    {
      if ((v14 & 1) != 0)
        v8 = v15;
      else
        v8 = (char *)&v14 + 1;
      v9 = re::PersistedSchema::introspectionInfo(v6, v8);
      if (v9)
      {
        v10 = v9;
        re::SerializedReference<re::IntrospectionBase const*>::reset(v5);
        *v5 = v10;
      }
      else
      {
        v11 = *re::foundationSerializationLogObjects(0);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          if ((v14 & 1) != 0)
            v12 = v15;
          else
            v12 = (char *)&v14 + 1;
          *(_DWORD *)buf = 136315138;
          v17 = (char *)v12;
          _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Unknown type name '%s'", buf, 0xCu);
        }
        **(_BYTE **)(v4 + 16) = 0;
      }
    }
    else
    {
      re::SerializedReference<re::IntrospectionBase const*>::reset(v5);
      *v5 = 0;
    }
    result = v13;
    if (v13)
    {
      if ((v14 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
    }
  }
  return result;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re *a1@<X0>, uint64_t *a2@<X1>, re **a3@<X2>, __int128 *a4@<X3>, re **a5@<X8>)
{
  uint64_t v10;
  re **v11;
  re *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  _anonymous_namespace_ *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  const char *v23;
  int v24;
  _QWORD v25[2];
  __int128 v26;
  StringID v27;
  const char **v28;

  v10 = (uint64_t)a1 + 200;
  v11 = (re **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v11)
  {
    v12 = *v11;
    *a5 = a1;
    a5[1] = v12;
    return;
  }
  v22 = 0x449AD97C4B77BED4;
  v23 = "_CompareFunc";
  v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v22);
  if (v13)
  {
    v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v22);
    if (a1)
    {
      v15 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v22);
  }
  *(_QWORD *)&v27.var0 = 0x449AD97C4B77BED4;
  v27.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v27, 1u, 0, &v22);
  v15 = v22;
  v14 = (uint64_t)v23;
  re::StringID::destroyString((re::StringID *)&v27);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, a3, &v22);
  re::TypeInfo::TypeInfo((uint64_t)&v27, (uint64_t)&v23);
  if (!v15
    || (v16 = *v28,
        v22 = v14,
        v23 = v16,
        v24 = -1,
        (v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v27.var0 + 768, &v22)) == 0)|| !*(_QWORD *)v17)
  {
    v26 = *(_OWORD *)a3;
    v25[0] = v15;
    v25[1] = v14;
    v17 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v26, -1, (uint64_t)v25, (uint64_t)re::internal::less<re::DynamicString>, 0);
  }
  v18 = *(_OWORD *)a3;
  v20 = *a4;
  v21 = v18;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v22, a2, 1, 0x30uLL, 8uLL, &v21, &v20);
  re::TypeBuilder::setConstructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v22, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v22, a1, a5);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v22, v19);
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(double a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
}

void re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  signed int v8;

  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
  if (a5 <= 3)
    v8 = 3;
  else
    v8 = a5;
  re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a3, a4, v8);
}

void re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 14;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 56 * v10 + 16, *(_QWORD *)(a2 + 16) + 56 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 56 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1, double a2)
{
  double v3;

  v3 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, v3);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, double a2, uint64_t a3, uint64_t a4)
{
  if (*a1 == a4)
  {
    re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
    re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a4, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 56 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 14;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::IntrospectionBase const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_30, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 32 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 32;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

_QWORD *re::internal::SharedObjectGraph::beginObject(_QWORD *result, uint64_t a2, __int128 *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  BOOL v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;

  v12 = a2;
  if (*(_BYTE *)result)
  {
    v4 = result;
    v11 = result[9];
    v8 = -1;
    v10 = 0;
    v6 = a2;
    v7 = *a3;
    v9 = result[19] == 0;
    re::DynamicArray<re::internal::SharedObjectGraph::Entry>::add((_anonymous_namespace_ *)(result + 7), (uint64_t)&v6);
    if (a2)
      re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addNew<unsigned int &>((uint64_t)(v4 + 1), &v12, &v11);
    if (*((_BYTE *)v4 + 1))
    {
      v5 = v4[19];
      if (v5)
        re::internal::SharedObjectGraph::addChild(v4, *(_DWORD *)(v4[21] + 4 * v5 - 4), v11);
    }
    return re::DynamicArray<int>::add(v4 + 17, &v11);
  }
  return result;
}

__n128 re::DynamicArray<re::internal::SharedObjectGraph::Entry>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  _OWORD *v5;
  __n128 result;
  __int128 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::internal::SharedObjectGraph::Entry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (_OWORD *)(*((_QWORD *)this + 4) + 32 * v4);
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *v5 = *(_OWORD *)a2;
  v5[1] = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addNew<unsigned int &>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addEmplace<unsigned int &>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

_QWORD *re::internal::SharedObjectGraph::addChild(_QWORD *this, unsigned int a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (this[9] <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = this;
  v5 = this[11] + 32 * a2;
  v6 = *(unsigned int *)(v5 + 24);
  v7 = this[14];
  *(_DWORD *)(v5 + 24) = v7;
  v8 = this[13];
  if (v7 >= v8)
  {
    v9 = v7 + 1;
    if (v8 < v7 + 1)
    {
      if (this[12])
      {
        v10 = 2 * v8;
        if (!v8)
          v10 = 8;
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        this = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(this + 12, v11);
      }
      else
      {
        this = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v4 + 12, v9);
        ++*((_DWORD *)v4 + 30);
      }
    }
    v7 = v4[14];
  }
  *(_QWORD *)(v4[16] + 8 * v7) = a3 | (unint64_t)(v6 << 32);
  ++v4[14];
  ++*((_DWORD *)v4 + 30);
  return this;
}

uint64_t re::internal::SharedObjectGraph::object(re::internal::SharedObjectGraph *this, unsigned int a2)
{
  if (!*(_BYTE *)this)
    return 0;
  if (*((_QWORD *)this + 9) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 11) + 32 * a2);
}

double re::internal::SharedObjectGraph::typeID@<D0>(re::internal::SharedObjectGraph *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;

  if (*(_BYTE *)this)
  {
    if (*((_QWORD *)this + 9) <= (unint64_t)a2)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = *(_OWORD *)(*((_QWORD *)this + 11) + 32 * a2 + 8);
    *(_OWORD *)a3 = v3;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)&v3 = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 8) = 0xFFFFFFFFLL;
  }
  return *(double *)&v3;
}

_QWORD *re::internal::SharedObjectGraph::addReference(_QWORD *this, unsigned int a2)
{
  if (*(_BYTE *)this)
  {
    if (*((_BYTE *)this + 1))
      return re::internal::SharedObjectGraph::addChild(this, *(_DWORD *)(this[21] + 4 * this[19] - 4), a2);
  }
  return this;
}

re::internal::SharedObjectGraph *re::internal::SharedObjectGraph::markAndSweep(re::internal::SharedObjectGraph *this, re::Allocator *a2, void *a3)
{
  re::internal::SharedObjectGraph *v3;
  unint64_t v4;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  _BYTE v14[8];
  uint64_t v15;
  _BYTE v16[32];

  if (*(_BYTE *)this)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 9);
    if (v4)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        if (*(_BYTE *)(*((_QWORD *)v3 + 11) + 32 * v7 + 28))
        {
          this = re::internal::SharedObjectGraph::mark(v3, v8 - 1);
          v4 = *((_QWORD *)v3 + 9);
        }
        v7 = v8;
        v9 = v4 > v8++;
      }
      while (v9);
      if (v4)
      {
        v10 = 0;
        v11 = 1;
        do
        {
          v12 = *((_QWORD *)v3 + 11) + 32 * v10;
          if (*(_QWORD *)v12)
            v13 = *(_BYTE *)(v12 + 29) == 0;
          else
            v13 = 0;
          if (v13)
          {
            this = *(re::internal::SharedObjectGraph **)(v12 + 8);
            if (this)
            {
              re::TypeRegistry::typeInfo(this, (re **)(v12 + 8), v14);
              re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v15);
              re::TypeInfo::releaseInstance((re::TypeInfo *)v16, *(void **)v12, a2, a3);
              this = re::internal::SharedObjectGraph::mark(v3, v11 - 1);
              v4 = *((_QWORD *)v3 + 9);
            }
          }
          v10 = v11;
          v9 = v4 > v11++;
        }
        while (v9);
      }
    }
  }
  return this;
}

re::internal::SharedObjectGraph *re::internal::SharedObjectGraph::mark(re::internal::SharedObjectGraph *this, unsigned int a2)
{
  re::internal::SharedObjectGraph *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;

  if (*((_QWORD *)this + 9) <= (unint64_t)a2)
    goto LABEL_16;
  v2 = this;
  v3 = *((_QWORD *)this + 11);
  if (*(_QWORD *)(v3 + 32 * a2))
  {
    v4 = v3 + 32 * a2;
    if (!*(_BYTE *)(v4 + 29) || *(_BYTE *)(v4 + 30) == 0)
    {
      *(_BYTE *)(v4 + 29) = 1;
      *(_BYTE *)(v4 + 30) = 1;
      v6 = *(unsigned int *)(v4 + 24);
      if ((_DWORD)v6 != -1)
      {
        v7 = *((_QWORD *)this + 14);
        while (v7 > v6)
        {
          this = (re::internal::SharedObjectGraph *)re::internal::SharedObjectGraph::mark(v2, *(_DWORD *)(*((_QWORD *)v2 + 16) + 8 * v6));
          v7 = *((_QWORD *)v2 + 14);
          if (v7 <= v6)
            goto LABEL_15;
          v6 = *(unsigned int *)(*((_QWORD *)v2 + 16) + 8 * v6 + 4);
          if ((_DWORD)v6 == -1)
            return this;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_16:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::internal::SharedObjectGraph::Entry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::internal::SharedObjectGraph::Entry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::internal::SharedObjectGraph::Entry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::internal::SharedObjectGraph::Entry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::internal::SharedObjectGraph::Entry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 32 * v9;
        v11 = v7;
        do
        {
          v12 = *v8;
          v13 = v8[1];
          v8 += 2;
          *v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addEmplace<unsigned int &>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addEmplace<unsigned int &>(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_30, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::PropertyBagHelper::copyToIntrospectedData(id *a1, re *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9;
  char isKindOfClass;
  re *v11;
  id v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  int v16;
  re *v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  uint64_t Value;
  NSObject *v23;
  objc_object *v25;
  NSObject *v26;
  re *v27;
  char v28;
  _BYTE v29[7];
  const char *v30;
  _QWORD v31[3];
  uint8_t buf[4];
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v31[0] = a5;
  v31[1] = a6;
  v31[2] = a4;
  v9 = *a1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v12 = objc_retainAutorelease(*a1);
    objc_msgSend(v12, "objectForKey:", CFSTR("type"));
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    if (v13 && (objc_opt_class(), v13 = objc_opt_isKindOfClass(), (v13 & 1) != 0))
    {
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v27);
      if ((v28 & 1) != 0)
        v15 = v30;
      else
        v15 = v29;
      v16 = strcmp(v15, (const char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"));
      v17 = v27;
      if (v27 && (v28 & 1) != 0)
        v17 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v27 + 40))();
      if (!v16)
      {
        objc_msgSend(v12, "objectForKey:", CFSTR("value"));
        v25 = (objc_object *)objc_claimAutoreleasedReturnValue();
        if (v25)
        {
        }
        else
        {
          v26 = *re::foundationSerializationLogObjects(0);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v27) = 0;
            _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "PropertyBagReader; property bag missing value.",
              (uint8_t *)&v27,
              2u);
          }
          Value = 0;
        }

        goto LABEL_24;
      }
      v18 = *re::foundationSerializationLogObjects(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = v18;
        re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v27);
        if ((v28 & 1) != 0)
          v20 = v30;
        else
          v20 = v29;
        *(_DWORD *)buf = 136315138;
        v33 = v20;
        _os_log_error_impl(&dword_224FE9000, v19, OS_LOG_TYPE_ERROR, "PropertyBagReader; property bag is wrong type, expecting '%s'.",
          buf,
          0xCu);

        if (v27 && (v28 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v27 + 40))();
      }
    }
    else
    {
      v23 = *re::foundationSerializationLogObjects((re *)v13);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v27) = 0;
        _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing property bag type.",
          (uint8_t *)&v27,
          2u);
      }
    }
    Value = 0;
LABEL_24:

    return Value;
  }
  v21 = *re::foundationSerializationLogObjects(v11);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v27) = 0;
    _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "PropertyBagReader; expected NSDictionary.",
      (uint8_t *)&v27,
      2u);
  }
  return 0;
}

uint64_t `anonymous namespace'::PropertyBagReader::readValue(_anonymous_namespace_::PropertyBagReader *this, objc_object *a2, const re::IntrospectionBase *a3, uint64_t **a4)
{
  objc_object *v7;
  objc_object *v8;
  objc_object *v9;
  uint64_t isKindOfClass;
  objc_object *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  re *v19;
  NSObject *v20;
  char LinearArray;
  objc_object *v22;
  uint64_t v23;
  objc_object *v24;
  uint64_t v25;
  objc_object *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  re *v31;
  char *v32;
  const re::IntrospectionBase *v33;
  _anonymous_namespace_::PropertyBagReader *v34;
  NSArray *v35;
  uint64_t v36;
  re *v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  _anonymous_namespace_ *v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  re *v46;
  NSObject *v47;
  uint64_t v48;
  const char *v49;
  objc_object *v50;
  void (*v51)(const re::IntrospectionBase *, uint64_t **, uint64_t);
  const re::IntrospectionBase *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  objc_object *v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t *v62;
  re *Value;
  NSObject *v64;
  uint64_t v65;
  re *v66;
  re *v67;
  uint64_t v68;
  NSArray *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  objc_object *v73;
  objc_object *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t i;
  objc_object *v78;
  objc_object *v79;
  re *v80;
  re::Allocator *v81;
  int v82;
  re *v83;
  void *v84;
  re *v85;
  uint64_t v86;
  objc_object *v87;
  unsigned int *v88;
  const char **IntrospectionEnumValueWithVersioning;
  NSObject *v90;
  NSObject *v91;
  _BYTE *v92;
  const re::IntrospectionStructure *v93;
  unint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  int *StructureMember;
  char PointerPolymorphic;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  const char *v104;
  int v105;
  re *v106;
  NSObject *v107;
  NSObject *v108;
  NSObject *v109;
  NSObject *v110;
  _BYTE *v111;
  const char *v112;
  NSObject *v113;
  _BYTE *v114;
  NSObject *v115;
  NSObject *v116;
  _BYTE *v117;
  const char *v118;
  uint64_t v119;
  NSObject *v120;
  _BYTE *v121;
  NSObject *v122;
  _BYTE *v123;
  NSObject *v124;
  NSObject *v125;
  _BYTE *v126;
  NSObject *v127;
  uint64_t v128;
  NSObject *v129;
  NSObject *v130;
  _BYTE *v131;
  const char *v132;
  NSObject *v133;
  NSObject *v134;
  uint64_t v135;
  objc_object *v136;
  re *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  size_t v141;
  objc_object *v142;
  char v143;
  objc_object *v144;
  uint64_t v145;
  void *v146;
  objc_object *v147;
  re *v148;
  NSObject *v149;
  objc_object *v150;
  NSObject *v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  NSObject *v158;
  NSObject *v159;
  NSObject *v160;
  _BYTE *v161;
  NSObject *v162;
  _BYTE *v163;
  uint64_t v164;
  NSObject *v165;
  NSObject *v166;
  int v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  id v176;
  const re::IntrospectionStructure *v177;
  int *v178;
  uint64_t IntrospectionMemberByNameRecursive;
  re **v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  const char *v186;
  int v187;
  re *v188;
  objc_object *v189;
  int Member;
  NSObject *v191;
  _BYTE *v192;
  _BYTE *v193;
  __int16 v194;
  NSObject *v195;
  int v196;
  NSObject *v197;
  _BYTE *v198;
  void *v199;
  NSObject *v200;
  _BYTE *v201;
  uint64_t v202;
  NSObject *v203;
  _BYTE *v204;
  NSObject *v205;
  _BYTE *v206;
  NSObject *v207;
  NSObject *v208;
  NSObject *v209;
  _anonymous_namespace_::PropertyBagReader *v210;
  NSObject *v211;
  _BYTE *v212;
  NSObject *v213;
  NSObject *v214;
  id v215;
  NSObject *v216;
  uint64_t v217;
  NSObject *v218;
  NSObject *v219;
  _anonymous_namespace_::PropertyBagReader *v220;
  NSObject *v221;
  _BYTE *v222;
  NSObject *v223;
  _anonymous_namespace_::PropertyBagReader *v224;
  NSObject *v225;
  _anonymous_namespace_::PropertyBagReader *v226;
  const re::IntrospectionBase *v227;
  const re::IntrospectionBase *v228;
  const re::IntrospectionBase *v229;
  const re::IntrospectionBase *v230;
  const re::IntrospectionBase *v231;
  const re::IntrospectionBase *v232;
  const re::IntrospectionBase *v233;
  const re::IntrospectionBase *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  id obj;
  id v239;
  uint64_t v240;
  objc_object *v241;
  void *v242;
  objc_object *v243;
  id v244;
  objc_object *v245;
  objc_object *v246;
  uint64_t **v247;
  uint64_t **v248;
  uint64_t v249;
  void *v250;
  char v251[4];
  __int128 v252;
  _anonymous_namespace_::PropertyBagReader *v253;
  char *v254;
  uint8_t v255[4];
  _anonymous_namespace_::PropertyBagReader *v256;
  _BYTE __src[120];
  __int128 buf;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;

  v262 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = v7;
  switch(*((_DWORD *)a3 + 4))
  {
    case 0:
      v9 = v7;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) == 0)
      {
        v108 = *re::foundationSerializationLogObjects((re *)isKindOfClass);
        if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
        {
          v191 = v108;
          re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
          v192 = (__src[8] & 1) != 0 ? *(_BYTE **)&__src[16] : &__src[9];
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v192;
          _os_log_error_impl(&dword_224FE9000, v191, OS_LOG_TYPE_ERROR, "PropertyBagReader; expected NSNumber for '%s'.",
            (uint8_t *)&buf,
            0xCu);

          if (*(_QWORD *)__src)
          {
            if ((__src[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)__src + 40))();
          }
        }
        LinearArray = 0;
LABEL_202:

        goto LABEL_225;
      }
      v11 = v9;
      if ((v12 & 1) == 0
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v228);
      }
      if (re::introspect<BOOL>(void)::info == (_UNKNOWN *)a3)
      {
        v143 = -[objc_object BOOLValue](v11, "BOOLValue");
      }
      else
      {
        if ((v13 & 1) == 0
        {
          re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v229);
        }
        if ((const re::IntrospectionBase *)re::introspect<char>(void)::info == a3)
        {
          v143 = -[objc_object charValue](v11, "charValue");
        }
        else
        {
          if ((v14 & 1) == 0
          {
            re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v230);
          }
          if ((const re::IntrospectionBase *)re::introspect<double>(void)::info == a3)
          {
            -[objc_object doubleValue](v11, "doubleValue");
            *(_QWORD *)__src = v164;
            goto LABEL_200;
          }
          if ((v15 & 1) == 0
          {
            re::introspect<float>(void)::info = re::introspect_float(0, v231);
          }
          if (re::introspect<float>(void)::info == (_UNKNOWN *)a3)
          {
            -[objc_object floatValue](v11, "floatValue");
            *(_DWORD *)__src = v168;
            goto LABEL_200;
          }
          if ((v16 & 1) == 0
          {
            re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v232);
          }
          if ((const re::IntrospectionBase *)re::introspect<short>(void)::info == a3)
          {
            v194 = -[objc_object shortValue](v11, "shortValue");
LABEL_266:
            *(_WORD *)__src = v194;
            goto LABEL_200;
          }
          if ((v17 & 1) == 0
          {
            re::introspect<int>(void)::info = re::introspect_int(0, v233);
          }
          if (re::introspect<int>(void)::info == (_UNKNOWN *)a3)
          {
            v196 = -[objc_object intValue](v11, "intValue");
LABEL_270:
            *(_DWORD *)__src = v196;
            goto LABEL_200;
          }
          if ((v18 & 1) == 0
          {
            re::introspect<long>(void)::info = (uint64_t)re::introspect_long(0, v234);
          }
          if ((const re::IntrospectionBase *)re::introspect<long>(void)::info == a3)
          {
            v202 = -[objc_object longValue](v11, "longValue");
LABEL_294:
            *(_QWORD *)__src = v202;
            goto LABEL_200;
          }
          if ((const re::IntrospectionBase *)re::introspect<unsigned long>() == a3)
          {
LABEL_291:
            v202 = -[objc_object unsignedLongLongValue](v11, "unsignedLongLongValue");
            goto LABEL_294;
          }
          if ((const re::IntrospectionBase *)re::introspect<long long>() == a3)
          {
            v202 = -[objc_object longLongValue](v11, "longLongValue");
            goto LABEL_294;
          }
          if (re::introspect<unsigned char>() != a3)
          {
            if ((const re::IntrospectionBase *)re::introspect<unsigned short>() != a3)
            {
              if ((const re::IntrospectionBase *)re::introspect<unsigned int>() != a3)
              {
                v19 = (re *)re::introspect<unsigned long long>();
                if (v19 != a3)
                {
                  v20 = *re::foundationSerializationLogObjects(v19);
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                  {
                    v221 = v20;
                    re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
                    if ((__src[8] & 1) != 0)
                      v222 = *(_BYTE **)&__src[16];
                    else
                      v222 = &__src[9];
                    LODWORD(buf) = 136315138;
                    *(_QWORD *)((char *)&buf + 4) = v222;
                    _os_log_error_impl(&dword_224FE9000, v221, OS_LOG_TYPE_ERROR, "PropertyBagWriter; unhandled type '%s'.",
                      (uint8_t *)&buf,
                      0xCu);

                    if (*(_QWORD *)__src && (__src[8] & 1) != 0)
                      (*(void (**)(void))(**(_QWORD **)__src + 40))();
                  }
                  LinearArray = 0;
LABEL_201:

                  goto LABEL_202;
                }
                goto LABEL_291;
              }
              v196 = -[objc_object unsignedIntValue](v11, "unsignedIntValue");
              goto LABEL_270;
            }
            v194 = -[objc_object unsignedShortValue](v11, "unsignedShortValue");
            goto LABEL_266;
          }
          v143 = -[objc_object unsignedCharValue](v11, "unsignedCharValue");
        }
      }
      __src[0] = v143;
LABEL_200:
      memcpy(a4, __src, *((int *)a3 + 5));
      LinearArray = 1;
      goto LABEL_201;
    case 1:
      v22 = v7;
      v54 = *((_QWORD *)a3 + 6);
      if (*(_DWORD *)(v54 + 16) != 8)
        goto LABEL_48;
      v55 = *(unsigned int *)(v54 + 56);
      if (!(_DWORD)v55)
        goto LABEL_48;
      v56 = 0;
      v57 = *(_QWORD **)(v54 + 64);
      do
      {
        v58 = v57[v56];
        if (*(_DWORD *)v58 == 2)
        {
          if (*a4)
          {
            re::introspectionReleasePointer(*a4, *(_QWORD *)this, *((_QWORD *)this + 2), *((_QWORD *)a3 + 6));
            *a4 = 0;
            v55 = *(unsigned int *)(v54 + 56);
            v57 = *(_QWORD **)(v54 + 64);
          }
          v154 = (_DWORD *)*v57;
          if (*(_DWORD *)*v57 != 3)
          {
            v155 = (_DWORD **)(v57 + 1);
            v156 = v55 - 1;
            do
            {
              v157 = *v155++;
              v154 = v157;
              --v156;
            }
            while (*v157 != 3);
          }
LABEL_190:
          LinearArray = PointerPolymorphic;
          goto LABEL_224;
        }
        ++v56;
      }
      while (v55 != v56);
LABEL_48:
      objc_msgSend(MEMORY[0x24BDBCEF8], "null");
      v59 = (objc_object *)objc_claimAutoreleasedReturnValue();

      if (v59 == v22)
      {
        if (*a4)
        {
          re::introspectionReleasePointer(*a4, *(_QWORD *)this, *((_QWORD *)this + 2), *((_QWORD *)a3 + 6));
          *a4 = 0;
        }
        goto LABEL_171;
      }
      v60 = *((_QWORD *)a3 + 6);
      if ((v61 & 1) == 0
      {
        re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v227);
      }
      v62 = *a4;
      if (v60 != re::introspect<char>(void)::info)
      {
        if (!v62)
          v62 = (uint64_t *)re::introspectionAllocPointer(*(re **)this, *((_anonymous_namespace_ **)this + 2), *((re::Allocator **)a3 + 6));
        if ((Value & 1) == 0)
        {
          v64 = *re::foundationSerializationLogObjects(Value);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            v203 = v64;
            re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
            v204 = (__src[8] & 1) != 0 ? *(_BYTE **)&__src[16] : &__src[9];
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v204;
            _os_log_error_impl(&dword_224FE9000, v203, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read pointer target of type '%s'.",
              (uint8_t *)&buf,
              0xCu);

            if (*(_QWORD *)__src)
            {
              if ((__src[8] & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)__src + 40))();
            }
          }
          re::introspectionReleasePointer(v62, *(_QWORD *)this, *((_QWORD *)this + 2), *((_QWORD *)a3 + 6));
          goto LABEL_223;
        }
LABEL_170:
        *a4 = v62;
LABEL_171:
        LinearArray = 1;
        goto LABEL_224;
      }
      if (v62)
      {
        re::introspectionReleasePointer(v62, *(_QWORD *)this, *((_QWORD *)this + 2), *((_QWORD *)a3 + 6));
        *a4 = 0;
      }
      objc_opt_class();
      v135 = objc_opt_isKindOfClass();
      if ((v135 & 1) == 0)
      {
        v162 = *re::foundationSerializationLogObjects((re *)v135);
        if (!os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
          goto LABEL_223;
        v110 = v162;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if ((__src[8] & 1) != 0)
          v163 = *(_BYTE **)&__src[16];
        else
          v163 = &__src[9];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v163;
        v112 = "PropertyBagReader; expected NSString for pointer '%s'.";
        goto LABEL_141;
      }
      v136 = v22;
      v137 = (re *)-[objc_object lengthOfBytesUsingEncoding:](v136, "lengthOfBytesUsingEncoding:", 4);
      v138 = v137 + 1;
      v139 = v138 << 31 >> 31;
      if (v139 == v138 && (v139 & 0x8000000000000000) == 0)
      {
        v140 = *(_QWORD *)this;
        v141 = v139 & 0x1FFFFFFFFLL;
        v62 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, v139 & 0x1FFFFFFFFLL, 0);
        v142 = objc_retainAutorelease(v136);
        memcpy(v62, (const void *)-[objc_object UTF8String](v142, "UTF8String"), v141);

        goto LABEL_170;
      }
      v166 = *re::foundationSerializationLogObjects(v137);
      if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__src = 0;
        _os_log_error_impl(&dword_224FE9000, v166, OS_LOG_TYPE_ERROR, "PropertyBagReader; string length overflowed.",
          __src,
          2u);
      }

      goto LABEL_223;
    case 2:
      v22 = v7;
      objc_opt_class();
      v65 = objc_opt_isKindOfClass();
      if ((v65 & 1) != 0)
      {
        v24 = v22;
        v66 = (re *)*((int *)a3 + 16);
        v67 = (re *)-[objc_object count](v24, "count");
        if (v67 == v66)
        {
          v33 = (const re::IntrospectionBase *)*((_QWORD *)a3 + 6);
          v34 = this;
          v35 = (NSArray *)v24;
          v32 = (char *)a4;
          goto LABEL_59;
        }
        v133 = *re::foundationSerializationLogObjects(v67);
        if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
        {
          v197 = v133;
          re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
          v198 = (__src[8] & 1) != 0 ? *(_BYTE **)&__src[16] : &__src[9];
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v198;
          _os_log_error_impl(&dword_224FE9000, v197, OS_LOG_TYPE_ERROR, "PropertyBagReader; array incorrect size for '%s'.",
            (uint8_t *)&buf,
            0xCu);

          if (*(_QWORD *)__src)
          {
            if ((__src[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)__src + 40))();
          }
        }
        goto LABEL_160;
      }
      v120 = *re::foundationSerializationLogObjects((re *)v65);
      if (!os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
        goto LABEL_223;
      v110 = v120;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if ((__src[8] & 1) != 0)
        v121 = *(_BYTE **)&__src[16];
      else
        v121 = &__src[9];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v121;
      v112 = "PropertyBagReader; expected NSArray for '%s'.";
      goto LABEL_141;
    case 3:
      v22 = v7;
      objc_opt_class();
      v68 = objc_opt_isKindOfClass();
      if ((v68 & 1) != 0)
      {
        v69 = v22;
        (*(void (**)(const re::IntrospectionBase *, _QWORD, _QWORD, uint64_t **, NSUInteger))(*(_QWORD *)a3 + 72))(a3, *(_QWORD *)this, *((_QWORD *)this + 2), a4, -[NSArray count](v69, "count"));
        if (-[NSArray count](v69, "count"))
        {
          v70 = (char *)(*(uint64_t (**)(const re::IntrospectionBase *, uint64_t **, _QWORD))(*(_QWORD *)a3 + 96))(a3, a4, 0);
        }
        else
        {
          LinearArray = 1;
        }

        goto LABEL_224;
      }
      v122 = *re::foundationSerializationLogObjects((re *)v68);
      if (!os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
        goto LABEL_223;
      v110 = v122;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if ((__src[8] & 1) != 0)
        v123 = *(_BYTE **)&__src[16];
      else
        v123 = &__src[9];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v123;
      v112 = "PropertyBagReader; expected NSArray for '%s'.";
      goto LABEL_141;
    case 4:
      v22 = v7;
      objc_opt_class();
      v23 = objc_opt_isKindOfClass();
      if ((v23 & 1) == 0)
      {
        v109 = *re::foundationSerializationLogObjects((re *)v23);
        if (!os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
          goto LABEL_223;
        v110 = v109;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if ((__src[8] & 1) != 0)
          v111 = *(_BYTE **)&__src[16];
        else
          v111 = &__src[9];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v111;
        v112 = "PropertyBagReader; expected NSArray for '%s'.";
        goto LABEL_141;
      }
      v24 = v22;
      if (((*(uint64_t (**)(const re::IntrospectionBase *, uint64_t **))(*(_QWORD *)a3 + 88))(a3, a4) & 1) == 0)
      {
        v25 = *(_QWORD *)this;
        v26 = v8;
        v27 = *((_QWORD *)this + 2);
        v28 = -[objc_object count](v24, "count");
        v29 = v27;
        v8 = v26;
        (*(void (**)(const re::IntrospectionBase *, uint64_t **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(a3, a4, v25, v29, v28);
      }
      v30 = (*(uint64_t (**)(const re::IntrospectionBase *, uint64_t **))(*(_QWORD *)a3 + 80))(a3, a4);
      v31 = (re *)-[objc_object count](v24, "count");
      if ((re *)v30 == v31)
      {
        if (!-[objc_object count](v24, "count"))
          goto LABEL_183;
        v32 = (char *)(*(uint64_t (**)(const re::IntrospectionBase *, uint64_t **, _QWORD))(*(_QWORD *)a3 + 96))(a3, a4, 0);
        v33 = (const re::IntrospectionBase *)*((_QWORD *)a3 + 6);
        v34 = this;
        v35 = (NSArray *)v24;
LABEL_59:
        goto LABEL_219;
      }
      v38 = *re::foundationSerializationLogObjects(v31);
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        goto LABEL_160;
      *(_WORD *)__src = 0;
      v39 = "PropertyBagReader; cannot resize existing fixed array.";
      goto LABEL_158;
    case 5:
      v22 = v7;
      objc_opt_class();
      v36 = objc_opt_isKindOfClass();
      if ((v36 & 1) == 0)
      {
        v113 = *re::foundationSerializationLogObjects((re *)v36);
        if (!os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
          goto LABEL_223;
        v110 = v113;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if ((__src[8] & 1) != 0)
          v114 = *(_BYTE **)&__src[16];
        else
          v114 = &__src[9];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v114;
        v112 = "PropertyBagReader; expected NSArray for '%s'.";
        goto LABEL_141;
      }
      v24 = v22;
      v37 = (re *)(*(uint64_t (**)(const re::IntrospectionBase *, uint64_t **))(*(_QWORD *)a3 + 80))(a3, a4);
      if (!(_DWORD)v37)
      {
        if (!-[objc_object count](v24, "count"))
        {
LABEL_183:
          LinearArray = 1;
          goto LABEL_219;
        }
        v144 = v8;
        v145 = 0;
        while (1)
        {
          v146 = (void *)(*(uint64_t (**)(const re::IntrospectionBase *, _QWORD, _QWORD, uint64_t **))(*(_QWORD *)a3 + 72))(a3, *(_QWORD *)this, *((_QWORD *)this + 2), a4);
          -[objc_object objectAtIndex:](v24, "objectAtIndex:", v145);
          v147 = (objc_object *)objc_claimAutoreleasedReturnValue();
          if ((v148 & 1) == 0)
            break;

          if (-[objc_object count](v24, "count") <= (unint64_t)++v145)
          {
            LinearArray = 1;
LABEL_218:
            v8 = v144;
            goto LABEL_219;
          }
        }
        v165 = *re::foundationSerializationLogObjects(v148);
        if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__src = 67109120;
          *(_DWORD *)&__src[4] = v145;
          _os_log_error_impl(&dword_224FE9000, v165, OS_LOG_TYPE_ERROR, "PropertyBagReader; dynamic array failed to read [%d].",
            __src,
            8u);
        }

        LinearArray = 0;
        goto LABEL_218;
      }
      v38 = *re::foundationSerializationLogObjects(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__src = 0;
        v39 = "PropertyBagReader; cannot read into existing data array.";
LABEL_158:
        _os_log_error_impl(&dword_224FE9000, v38, OS_LOG_TYPE_ERROR, v39, __src, 2u);
      }
LABEL_160:
      LinearArray = 0;
LABEL_219:

      goto LABEL_224;
    case 6:
      objc_opt_class();
      v71 = objc_opt_isKindOfClass();
      if ((v71 & 1) != 0)
      {
        *(_QWORD *)__src = -[objc_object UTF8String](objc_retainAutorelease(v8), "UTF8String");
        *(_QWORD *)&__src[8] = strlen(*(const char **)__src);
        re::DynamicString::operator=((re::DynamicString *)a4, (uint64_t)__src);
        goto LABEL_148;
      }
      v124 = *re::foundationSerializationLogObjects((re *)v71);
      if (!os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
        goto LABEL_135;
      v116 = v124;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if ((__src[8] & 1) != 0)
        v193 = *(_BYTE **)&__src[16];
      else
        v193 = &__src[9];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v193;
      v118 = "PropertyBagReader; expected NSString for string '%s'.";
      goto LABEL_261;
    case 7:
      v22 = v7;
      objc_opt_class();
      v72 = objc_opt_isKindOfClass();
      if ((v72 & 1) != 0)
      {
        v245 = v8;
        v73 = v22;
        (*(void (**)(const re::IntrospectionBase *, uint64_t **))(*(_QWORD *)a3 + 88))(a3, a4);
        (*(void (**)(const re::IntrospectionBase *, uint64_t **, uint64_t))(*(_QWORD *)a3 + 72))(a3, a4, -[objc_object count](v73, "count"));
        *(_QWORD *)&v252 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), *(int *)(*((_QWORD *)a3 + 6) + 20), 0);
        *((_QWORD *)&v252 + 1) = &off_24ED880A8;
        v254 = (char *)&v252 + 8;
        v253 = this;
        buf = 0u;
        v259 = 0u;
        v260 = 0u;
        v261 = 0u;
        v74 = v73;
        v75 = -[objc_object countByEnumeratingWithState:objects:count:](v74, "countByEnumeratingWithState:objects:count:", &buf, __src, 16);
        if (v75)
        {
          v76 = v75;
          v247 = a4;
          v249 = *(_QWORD *)v259;
          v243 = v22;
          while (1)
          {
            for (i = 0; i != v76; ++i)
            {
              if (*(_QWORD *)v259 != v249)
                objc_enumerationMutation(v74);
              v78 = *(objc_object **)(*((_QWORD *)&buf + 1) + 8 * i);
              -[objc_object objectForKeyedSubscript:](v74, "objectForKeyedSubscript:", v78);
              v79 = (objc_object *)objc_claimAutoreleasedReturnValue();
              v80 = *(re **)this;
              v81 = (re::Allocator *)*((_QWORD *)a3 + 6);
              re::introspectionCallConstructor(*((_anonymous_namespace_ **)this + 2), (uint64_t)v81, v252);
              re::introspectionInitElement(v80, v82, v81, (re::IntrospectionBase *)v252);
              if ((v83 & 1) == 0)
              {
                v158 = *re::foundationSerializationLogObjects(v83);
                if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v255 = 0;
                  _os_log_error_impl(&dword_224FE9000, v158, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read hash table key",
                    v255,
                    2u);
                }
                (*(void (**)(const re::IntrospectionBase *, _QWORD))(*(_QWORD *)a3 + 112))(a3, v252);
LABEL_196:

                LinearArray = 0;
                v22 = v243;
LABEL_197:

                std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v252);
                v8 = v245;
                goto LABEL_224;
              }
              v84 = (void *)(*(uint64_t (**)(const re::IntrospectionBase *, _QWORD, _QWORD, uint64_t **, _QWORD))(*(_QWORD *)a3 + 96))(a3, *(_QWORD *)this, *((_QWORD *)this + 2), v247, v252);
              (*(void (**)(const re::IntrospectionBase *, _QWORD))(*(_QWORD *)a3 + 112))(a3, v252);
              if ((v85 & 1) == 0)
              {
                v159 = *re::foundationSerializationLogObjects(v85);
                if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v255 = 0;
                  _os_log_error_impl(&dword_224FE9000, v159, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read hash table value",
                    v255,
                    2u);
                }
                goto LABEL_196;
              }

            }
            v76 = -[objc_object countByEnumeratingWithState:objects:count:](v74, "countByEnumeratingWithState:objects:count:", &buf, __src, 16);
            LinearArray = 1;
            v22 = v243;
            if (!v76)
              goto LABEL_197;
          }
        }
        LinearArray = 1;
        goto LABEL_197;
      }
      v125 = *re::foundationSerializationLogObjects((re *)v72);
      if (!os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
        goto LABEL_223;
      v110 = v125;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if ((__src[8] & 1) != 0)
        v126 = *(_BYTE **)&__src[16];
      else
        v126 = &__src[9];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v126;
      v112 = "PropertyBagReader; expected NSDictionary for hash table '%s'.";
LABEL_141:
      _os_log_error_impl(&dword_224FE9000, v110, OS_LOG_TYPE_ERROR, v112, (uint8_t *)&buf, 0xCu);

      goto LABEL_142;
    case 8:
      v22 = v7;
      v94 = *((unsigned int *)a3 + 14);
      if (!(_DWORD)v94)
        goto LABEL_92;
      v95 = 0;
      v96 = 1;
      do
      {
        v97 = *(_QWORD *)(*((_QWORD *)a3 + 8) + 8 * v95);
        if (*(_DWORD *)v97 == 4 && (*(_BYTE *)(v97 + 4) & 1) != 0)
          break;
        v96 = ++v95 < v94;
      }
      while (v94 != v95);
      if (v96)
      {
        StructureMember = re::introspectionFirstStructureMember(a3, v93);
        if (StructureMember)
        {
          goto LABEL_190;
        }
        v160 = *re::foundationSerializationLogObjects(0);
        if (!os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
          goto LABEL_223;
        v130 = v160;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if ((__src[8] & 1) != 0)
          v161 = *(_BYTE **)&__src[16];
        else
          v161 = &__src[9];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v161;
        v132 = "PropertyBagReader; expected member in for struct '%s'.";
      }
      else
      {
LABEL_92:
        objc_opt_class();
        v100 = objc_opt_isKindOfClass();
        if ((v100 & 1) != 0)
        {
          v24 = v22;
          -[objc_object objectForKey:](v24, "objectForKey:", CFSTR("type"));
          v101 = objc_claimAutoreleasedReturnValue();
          v102 = (void *)v101;
          if (v101 && (objc_opt_class(), v101 = objc_opt_isKindOfClass(), (v101 & 1) != 0))
          {
            v246 = v8;
            v103 = v102;
            re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
            if ((__src[8] & 1) != 0)
              v104 = *(const char **)&__src[16];
            else
              v104 = &__src[9];
            v250 = v103;
            v105 = strcmp(v104, (const char *)objc_msgSend(objc_retainAutorelease(v103), "UTF8String"));
            v106 = *(re **)__src;
            if (*(_QWORD *)__src && (__src[8] & 1) != 0)
              v106 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)__src + 40))();
            if (v105)
            {
              v107 = *re::foundationSerializationLogObjects(v106);
              v102 = v250;
              if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
              {
                v205 = v107;
                re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
                if ((__src[8] & 1) != 0)
                  v206 = *(_BYTE **)&__src[16];
                else
                  v206 = &__src[9];
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v206;
                _os_log_error_impl(&dword_224FE9000, v205, OS_LOG_TYPE_ERROR, "PropertyBagReader; struct is wrong type '%s'.",
                  (uint8_t *)&buf,
                  0xCu);

                v8 = v246;
                if (*(_QWORD *)__src && (__src[8] & 1) != 0)
                  (*(void (**)(void))(**(_QWORD **)__src + 40))();
                LinearArray = 0;
                v102 = v250;
              }
              else
              {
                LinearArray = 0;
                v8 = v246;
              }
            }
            else
            {
              -[objc_object objectForKey:](v24, "objectForKey:", CFSTR("value"));
              v169 = objc_claimAutoreleasedReturnValue();
              v102 = v250;
              v242 = (void *)v169;
              if (v169)
              {
                v170 = (void *)v169;
                objc_opt_class();
                v169 = objc_opt_isKindOfClass();
                if ((v169 & 1) != 0)
                {
                  v260 = 0u;
                  v261 = 0u;
                  buf = 0u;
                  v259 = 0u;
                  obj = v170;
                  v236 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &buf, __src, 16);
                  if (!v236)
                  {
                    LinearArray = 1;
LABEL_305:
                    v8 = v246;
                    goto LABEL_331;
                  }
                  v237 = *(_QWORD *)v259;
                  v8 = v246;
                  v248 = a4;
                  v241 = v24;
LABEL_231:
                  v171 = 0;
                  while (1)
                  {
                    if (*(_QWORD *)v259 != v237)
                      objc_enumerationMutation(obj);
                    v172 = *(void **)(*((_QWORD *)&buf + 1) + 8 * v171);
                    objc_opt_class();
                    v173 = objc_opt_isKindOfClass();
                    if ((v173 & 1) == 0)
                    {
                      v213 = *re::foundationSerializationLogObjects((re *)v173);
                      if (!os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
                      {
                        LinearArray = 0;
                        v24 = v241;
                        goto LABEL_331;
                      }
                      v223 = v213;
                      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v252);
                      if ((BYTE8(v252) & 1) != 0)
                        v224 = v253;
                      else
                        v224 = (_anonymous_namespace_::PropertyBagReader *)((char *)&v252 + 9);
                      *(_DWORD *)v255 = 136315138;
                      v256 = v224;
                      _os_log_error_impl(&dword_224FE9000, v223, OS_LOG_TYPE_ERROR, "PropertyBagReader; expected NSDictionary for member '%s'.",
                        v255,
                        0xCu);

                      if ((_QWORD)v252 && (BYTE8(v252) & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v252 + 40))();
                      LinearArray = 0;
                      v8 = v246;
LABEL_334:
                      v24 = v241;
                      goto LABEL_330;
                    }
                    v244 = v172;
                    objc_msgSend(v244, "objectForKey:", CFSTR("name"));
                    v174 = objc_claimAutoreleasedReturnValue();
                    v175 = (void *)v174;
                    if (!v174 || (objc_opt_class(), v174 = objc_opt_isKindOfClass(), (v174 & 1) == 0))
                    {
                      v207 = *re::foundationSerializationLogObjects((re *)v174);
                      v24 = v241;
                      if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                      {
                        v219 = v207;
                        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v252);
                        if ((BYTE8(v252) & 1) != 0)
                          v220 = v253;
                        else
                          v220 = (_anonymous_namespace_::PropertyBagReader *)((char *)&v252 + 9);
                        *(_DWORD *)v255 = 136315138;
                        v256 = v220;
                        _os_log_error_impl(&dword_224FE9000, v219, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing member name '%s'.",
                          v255,
                          0xCu);

                        if ((_QWORD)v252 && (BYTE8(v252) & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v252 + 40))();
                        v24 = v241;
                        v102 = v250;
                      }

                      LinearArray = 0;
                      goto LABEL_305;
                    }
                    v240 = v171;
                    *(_DWORD *)v251 = 0;
                    v176 = objc_retainAutorelease(v175);
                    v177 = (const re::IntrospectionStructure *)objc_msgSend(v176, "UTF8String");
                    *(_DWORD *)v251 = 0;
                    IntrospectionMemberByNameRecursive = re::getIntrospectionMemberByNameRecursive(a3, v177, v251, v178);
                    v24 = v241;
                    if (!IntrospectionMemberByNameRecursive)
                      break;
                    v180 = (re **)IntrospectionMemberByNameRecursive;
                    v181 = *(int *)v251;
                    objc_msgSend(v244, "objectForKey:", CFSTR("type"));
                    v182 = objc_claimAutoreleasedReturnValue();
                    v235 = (void *)v182;
                    if (!v182
                      || (v183 = (void *)v182, objc_opt_class(), v182 = objc_opt_isKindOfClass(), (v182 & 1) == 0))
                    {
                      v208 = *re::foundationSerializationLogObjects((re *)v182);
                      if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
                      {
                        v209 = v208;
                        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v252);
                        if ((BYTE8(v252) & 1) != 0)
                          v210 = v253;
                        else
                          v210 = (_anonymous_namespace_::PropertyBagReader *)((char *)&v252 + 9);
                        *(_DWORD *)v255 = 136315138;
                        v256 = v210;
                        _os_log_error_impl(&dword_224FE9000, v209, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing member type '%s'.",
                          v255,
                          0xCu);

                        if ((_QWORD)v252 && (BYTE8(v252) & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v252 + 40))();
                        v24 = v241;
                      }
LABEL_328:

                      goto LABEL_329;
                    }
                    re::getPrettyTypeName(v180[2], (const re::IntrospectionBase *)&v252);
                    v239 = objc_retainAutorelease(v183);
                    v184 = (const char *)objc_msgSend(v239, "UTF8String");
                    v185 = BYTE8(v252) & 1;
                    if ((BYTE8(v252) & 1) != 0)
                      v186 = (const char *)v253;
                    else
                      v186 = (char *)&v252 + 9;
                    v187 = strcmp(v186, v184);
                    v188 = (re *)v252;
                    if ((_QWORD)v252 && v185)
                      v188 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v252 + 40))();
                    if (v187)
                    {
                      v218 = *re::foundationSerializationLogObjects(v188);
                      v24 = v241;
                      if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
                      {
                        v225 = v218;
                        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v252);
                        if ((BYTE8(v252) & 1) != 0)
                          v226 = v253;
                        else
                          v226 = (_anonymous_namespace_::PropertyBagReader *)((char *)&v252 + 9);
                        *(_DWORD *)v255 = 136315138;
                        v256 = v226;
                        _os_log_error_impl(&dword_224FE9000, v225, OS_LOG_TYPE_ERROR, "PropertyBagReader; member is wrong type '%s'.",
                          v255,
                          0xCu);

                        if ((_QWORD)v252 && (BYTE8(v252) & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v252 + 40))();
                        v24 = v241;
                      }
                      goto LABEL_328;
                    }
                    objc_msgSend(v244, "objectForKey:", CFSTR("value"));
                    v189 = (objc_object *)objc_claimAutoreleasedReturnValue();

                    v8 = v246;
                    if (!Member)
                    {
                      LinearArray = 0;
                      goto LABEL_334;
                    }
                    v171 = v240 + 1;
                    v24 = v241;
                    v102 = v250;
                    if (v236 == v240 + 1)
                    {
                      LinearArray = 1;
                      v236 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &buf, __src, 16);
                      if (!v236)
                      {
LABEL_331:

                        goto LABEL_332;
                      }
                      goto LABEL_231;
                    }
                  }
                  v214 = *re::foundationSerializationLogObjects(0);
                  if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
                  {
                    v215 = objc_retainAutorelease(v176);
                    v216 = v214;
                    v217 = objc_msgSend(v215, "UTF8String");
                    LODWORD(v252) = 136315138;
                    *(_QWORD *)((char *)&v252 + 4) = v217;
                    _os_log_error_impl(&dword_224FE9000, v216, OS_LOG_TYPE_ERROR, "PropertyBagReader; unknown member name '%s'.",
                      (uint8_t *)&v252,
                      0xCu);

                  }
LABEL_329:

                  LinearArray = 0;
                  v8 = v246;
LABEL_330:
                  v102 = v250;
                  goto LABEL_331;
                }
              }
              v195 = *re::foundationSerializationLogObjects((re *)v169);
              if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
              {
                v211 = v195;
                re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
                if ((__src[8] & 1) != 0)
                  v212 = *(_BYTE **)&__src[16];
                else
                  v212 = &__src[9];
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v212;
                _os_log_error_impl(&dword_224FE9000, v211, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing struct value '%s'.",
                  (uint8_t *)&buf,
                  0xCu);

                if (*(_QWORD *)__src && (__src[8] & 1) != 0)
                  (*(void (**)(void))(**(_QWORD **)__src + 40))();
                LinearArray = 0;
                v8 = v246;
                v102 = v250;
              }
              else
              {
                LinearArray = 0;
                v8 = v246;
              }
LABEL_332:

            }
          }
          else
          {
            v134 = *re::foundationSerializationLogObjects((re *)v101);
            if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
            {
              v199 = v102;
              v200 = v134;
              re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
              if ((__src[8] & 1) != 0)
                v201 = *(_BYTE **)&__src[16];
              else
                v201 = &__src[9];
              LODWORD(buf) = 136315138;
              *(_QWORD *)((char *)&buf + 4) = v201;
              _os_log_error_impl(&dword_224FE9000, v200, OS_LOG_TYPE_ERROR, "PropertyBagReader; missing struct type '%s'.",
                (uint8_t *)&buf,
                0xCu);

              if (*(_QWORD *)__src && (__src[8] & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)__src + 40))();
              LinearArray = 0;
              v102 = v199;
            }
            else
            {
              LinearArray = 0;
            }
          }

          goto LABEL_219;
        }
        v129 = *re::foundationSerializationLogObjects((re *)v100);
        if (!os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
          goto LABEL_223;
        v130 = v129;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if ((__src[8] & 1) != 0)
          v131 = *(_BYTE **)&__src[16];
        else
          v131 = &__src[9];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v131;
        v132 = "PropertyBagReader; expected NSDictionary for struct '%s'.";
      }
      _os_log_error_impl(&dword_224FE9000, v130, OS_LOG_TYPE_ERROR, v132, (uint8_t *)&buf, 0xCu);

LABEL_142:
      if (*(_QWORD *)__src && (__src[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)__src + 40))();
LABEL_223:
      LinearArray = 0;
LABEL_224:

      goto LABEL_225;
    case 9:
      v9 = v7;
      objc_opt_class();
      v86 = objc_opt_isKindOfClass();
      LinearArray = v86;
      if ((v86 & 1) != 0)
      {
        v87 = v9;
        v88 = (unsigned int *)*((_QWORD *)a3 + 8);
        v11 = objc_retainAutorelease(v87);
        IntrospectionEnumValueWithVersioning = re::getIntrospectionEnumValueWithVersioning(v88, (char *)-[objc_object UTF8String](v11, "UTF8String"), (uint64_t)&buf);
        if ((_BYTE)buf)
        {
          memcpy(a4, (char *)&buf + 8, *((int *)a3 + 5));
        }
        else
        {
          v149 = *re::foundationSerializationLogObjects((re *)IntrospectionEnumValueWithVersioning);
          if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
          {
            v150 = objc_retainAutorelease(v11);
            v151 = v149;
            v152 = -[objc_object UTF8String](v150, "UTF8String");
            v153 = *((_QWORD *)a3 + 6);
            *(_DWORD *)__src = 136315394;
            *(_QWORD *)&__src[4] = v152;
            *(_WORD *)&__src[12] = 2080;
            *(_QWORD *)&__src[14] = v153;
            _os_log_error_impl(&dword_224FE9000, v151, OS_LOG_TYPE_ERROR, "PropertyBagReader; unexpected enum '%s' type for '%s' - skipping.",
              __src,
              0x16u);

          }
        }
        goto LABEL_201;
      }
      v127 = *re::foundationSerializationLogObjects((re *)v86);
      if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      {
        v128 = *((_QWORD *)a3 + 6);
        *(_DWORD *)__src = 136315138;
        *(_QWORD *)&__src[4] = v128;
        _os_log_error_impl(&dword_224FE9000, v127, OS_LOG_TYPE_ERROR, "PropertyBagReader; expected NSString for enum '%s'.",
          __src,
          0xCu);
      }
      goto LABEL_202;
    case 0xA:
      objc_opt_class();
      v40 = objc_opt_isKindOfClass();
      if ((v40 & 1) != 0)
      {
        v41 = (_anonymous_namespace_ *)-[objc_object UTF8String](objc_retainAutorelease(v8), "UTF8String");
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &str_110;
        v42 = buf;
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &str_110;
        v43 = *a4;
        v44 = a4[1];
        *(_OWORD *)a4 = v42;
        *(_QWORD *)__src = v42 & 0xFFFFFFFFFFFFFFFELL | v43 & 1;
        *(_QWORD *)&__src[8] = v44;
        re::StringID::destroyString((re::StringID *)__src);
        re::StringID::destroyString((re::StringID *)&buf);
        goto LABEL_148;
      }
      v115 = *re::foundationSerializationLogObjects((re *)v40);
      if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
      {
        v116 = v115;
        re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
        if ((__src[8] & 1) != 0)
          v117 = *(_BYTE **)&__src[16];
        else
          v117 = &__src[9];
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v117;
        v118 = "PropertyBagReader; expected NSString for stringid '%s'.";
LABEL_261:
        _os_log_error_impl(&dword_224FE9000, v116, OS_LOG_TYPE_ERROR, v118, (uint8_t *)&buf, 0xCu);

LABEL_262:
        if (*(_QWORD *)__src && (__src[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)__src + 40))();
      }
      goto LABEL_135;
    case 0xB:
      objc_opt_class();
      v45 = objc_opt_isKindOfClass();
      if ((v45 & 1) == 0)
      {
        v47 = *re::foundationSerializationLogObjects((re *)v45);
        if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          goto LABEL_135;
        v119 = *((_QWORD *)a3 + 6);
        *(_DWORD *)__src = 136315138;
        *(_QWORD *)&__src[4] = v119;
        v49 = "PropertyBagReader; expected NSString for callback '%s'.";
        goto LABEL_123;
      }
      v46 = (re *)(*((uint64_t (**)(_QWORD, _QWORD, const re::IntrospectionBase *, uint64_t **, uint64_t))a3 + 10))(*(_QWORD *)this, *((_QWORD *)this + 2), a3, a4, -[objc_object UTF8String](objc_retainAutorelease(v8), "UTF8String"));
      if ((v46 & 1) != 0)
        goto LABEL_148;
      v47 = *re::foundationSerializationLogObjects(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v48 = *((_QWORD *)a3 + 6);
        *(_DWORD *)__src = 136315138;
        *(_QWORD *)&__src[4] = v48;
        v49 = "PropertyBagReader; failed to read type '%s' using callback.";
LABEL_123:
        _os_log_error_impl(&dword_224FE9000, v47, OS_LOG_TYPE_ERROR, v49, __src, 0xCu);
      }
LABEL_135:
      LinearArray = 0;
LABEL_225:

      return LinearArray & 1;
    case 0xD:
      objc_msgSend(MEMORY[0x24BDBCEF8], "null");
      v50 = (objc_object *)objc_claimAutoreleasedReturnValue();

      v51 = *(void (**)(const re::IntrospectionBase *, uint64_t **, uint64_t))(*(_QWORD *)a3 + 64);
      if (v50 == v8)
      {
        v51(a3, a4, 0);
LABEL_148:
        LinearArray = 1;
      }
      else
      {
        v51(a3, a4, 1);
        v52 = (const re::IntrospectionBase *)*((_QWORD *)a3 + 6);
        v53 = (void *)(*(uint64_t (**)(const re::IntrospectionBase *, uint64_t **))(*(_QWORD *)a3 + 72))(a3, a4);
      }
      goto LABEL_225;
    default:
      v90 = *re::foundationSerializationLogObjects((re *)v7);
      if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        goto LABEL_135;
      v91 = v90;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)__src);
      if ((__src[8] & 1) != 0)
        v92 = *(_BYTE **)&__src[16];
      else
        v92 = &__src[9];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v92;
      _os_log_error_impl(&dword_224FE9000, v91, OS_LOG_TYPE_ERROR, "PropertyBagReader; unhandled introspection type '%s'.",
        (uint8_t *)&buf,
        0xCu);

      goto LABEL_262;
  }
}

uint64_t re::introspect<unsigned long>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const re::IntrospectionBase *v4;

  v1 = &unk_255825000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_255825000;
    if (v3)
    {
      re::introspect<unsigned long>(void)::info = (uint64_t)re::introspect_size_t(0, v4);
      v1 = (_QWORD *)&unk_255825000;
    }
  }
  return v1[364];
}

void *re::introspect<unsigned char>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const re::IntrospectionBase *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[211];
}

uint64_t re::introspect<unsigned short>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const re::IntrospectionBase *v4;

  v1 = &unk_255825000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_255825000;
    if (v3)
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v4);
      v1 = (_QWORD *)&unk_255825000;
    }
  }
  return v1[366];
}

uint64_t re::introspect<unsigned long long>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const re::IntrospectionBase *v4;

  v1 = &unk_255825000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_255825000;
    if (v3)
    {
      re::introspect<unsigned long long>(void)::info = (uint64_t)re::introspect_uint64_t(0, v4);
      v1 = (_QWORD *)&unk_255825000;
    }
  }
  return v1[368];
}

uint64_t `anonymous namespace'::PropertyBagReader::readPointerPolymorphic(re **a1, void *a2, uint64_t **a3, _anonymous_namespace_ *a4, uint64_t *a5, int a6, uint64_t a7, int a8)
{
  re *v15;
  re *v16;
  re *v17;
  uint64_t isKindOfClass;
  uint64_t v19;
  void *v20;
  id v21;
  re *IntrospectionPolymorphicTypeByPrettyType;
  re *v23;
  re::Allocator *v24;
  re::IntrospectionBase *v25;
  re *Value;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  NSObject *v33;
  NSObject *v34;
  id v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  const char *v39;
  NSObject *v40;
  uint32_t v41;
  uint64_t *v42;
  NSObject *v43;
  re *v44;
  NSObject *v45;
  _BYTE *v46;
  objc_object *v47;
  _BYTE buf[12];
  _BYTE *v49;
  uint8_t v50[4];
  _BYTE *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  v16 = v15;
  if (!a4)
  {
    v30 = *re::foundationSerializationLogObjects(v15);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v31 = "PropertyBagReader; invalid polymorphic data.";
LABEL_23:
      _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, v31, buf, 2u);
    }
LABEL_24:
    v29 = 0;
    goto LABEL_25;
  }
  if (!a7)
  {
    v30 = *re::foundationSerializationLogObjects(v15);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v31 = "PropertyBagReader; invalid polymorphic type data.";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  v17 = (re *)objc_claimAutoreleasedReturnValue();

  if (v17 != v16)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
    {
      v47 = v16;
      -[objc_object objectForKey:](v47, "objectForKey:", CFSTR("type"));
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = (void *)v19;
      if (v19 && (objc_opt_class(), v19 = objc_opt_isKindOfClass(), (v19 & 1) != 0))
      {
        v21 = objc_retainAutorelease(v20);
        IntrospectionPolymorphicTypeByPrettyType = (re *)re::getIntrospectionPolymorphicTypeByPrettyType(a4, (const char *)objc_msgSend(v21, "UTF8String"));
        if (!IntrospectionPolymorphicTypeByPrettyType)
        {
          v34 = *re::foundationSerializationLogObjects(0);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            v35 = objc_retainAutorelease(v21);
            v36 = v34;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = objc_msgSend(v35, "UTF8String");
            _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to find polymorphic type '%s'.",
              buf,
              0xCu);

          }
          goto LABEL_27;
        }
        v23 = IntrospectionPolymorphicTypeByPrettyType;
        v24 = (re::Allocator *)*((_QWORD *)IntrospectionPolymorphicTypeByPrettyType + 1);
        if (v24)
        {
          v25 = re::introspectionAllocPointer(*a1, a1[2], v24);
          if ((Value & 1) != 0)
          {
            v27 = (uint64_t *)((char *)v25 - *((int *)v23 + 8));
            if (a8)
              v28 = a5;
            else
              v28 = v27;
            memcpy((char *)v28 + a6, (char *)v23 + 24, *(int *)(a7 + 20));
            *a3 = v27;
            v29 = 1;
            goto LABEL_28;
          }
          v42 = (uint64_t *)v25;
          v43 = *re::foundationSerializationLogObjects(Value);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            v44 = (re *)*((_QWORD *)v23 + 1);
            v45 = v43;
            re::getPrettyTypeName(v44, (const re::IntrospectionBase *)buf);
            v46 = (buf[8] & 1) != 0 ? v49 : &buf[9];
            *(_DWORD *)v50 = 136315138;
            v51 = v46;
            _os_log_error_impl(&dword_224FE9000, v45, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read polymorphic pointer target of type '%s'.",
              v50,
              0xCu);

            if (*(_QWORD *)buf)
            {
              if ((buf[8] & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)buf + 40))();
            }
          }
          re::introspectionReleasePointer(v42, (uint64_t)*a1, (uint64_t)a1[2], *((_QWORD *)v23 + 1));
LABEL_27:
          v29 = 0;
LABEL_28:

          goto LABEL_25;
        }
        v37 = *re::foundationSerializationLogObjects(IntrospectionPolymorphicTypeByPrettyType);
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        v38 = *(_QWORD *)v23;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v38;
        v39 = "PropertyBagReader; invlaid polymorphic info '%s'.";
        v40 = v37;
        v41 = 12;
      }
      else
      {
        v33 = *re::foundationSerializationLogObjects((re *)v19);
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        *(_WORD *)buf = 0;
        v39 = "PropertyBagReader; missing polymorphic type.";
        v40 = v33;
        v41 = 2;
      }
      _os_log_error_impl(&dword_224FE9000, v40, OS_LOG_TYPE_ERROR, v39, buf, v41);
      goto LABEL_27;
    }
    v30 = *re::foundationSerializationLogObjects((re *)isKindOfClass);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_WORD *)buf = 0;
    v31 = "PropertyBagReader; expected NSDictionary for polymorphic type.";
    goto LABEL_23;
  }
  if (*a3)
  {
    re::introspectionReleasePointer(*a3, (uint64_t)*a1, (uint64_t)a1[2], a7);
    *a3 = 0;
  }
  v29 = 1;
LABEL_25:

  return v29;
}

uint64_t `anonymous namespace'::PropertyBagReader::readLinearArray(_anonymous_namespace_::PropertyBagReader *this, NSArray *a2, const re::IntrospectionBase *a3, char *a4)
{
  NSArray *v7;
  uint64_t v8;
  char *v9;
  objc_object *v10;
  re *Value;
  uint64_t v12;
  NSObject *v13;
  NSObject *v15;
  _BYTE *v16;
  uint64_t v17;
  char v18;
  _BYTE v19[23];
  uint8_t buf[4];
  _BYTE *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  if (-[NSArray count](v7, "count"))
  {
    v8 = 0;
    while (1)
    {
      v9 = &a4[*((int *)a3 + 5) * (uint64_t)(int)v8];
      -[NSArray objectAtIndex:](v7, "objectAtIndex:", v8);
      v10 = (objc_object *)objc_claimAutoreleasedReturnValue();
      if ((Value & 1) == 0)
        break;

      if (-[NSArray count](v7, "count") <= ++v8)
        goto LABEL_5;
    }
    v13 = *re::foundationSerializationLogObjects(Value);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v15 = v13;
      re::getPrettyTypeName(a3, (const re::IntrospectionBase *)&v17);
      if ((v18 & 1) != 0)
        v16 = *(_BYTE **)&v19[7];
      else
        v16 = v19;
      *(_DWORD *)buf = 136315394;
      v21 = v16;
      v22 = 1024;
      v23 = v8;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read %s[%d].",
        buf,
        0x12u);

      if (v17 && (v18 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v17 + 40))();
    }

    v12 = 0;
  }
  else
  {
LABEL_5:
    v12 = 1;
  }

  return v12;
}

void std::__function::__func<`anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<`anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<`anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<`anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED880A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<`anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED880A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<`anonymous namespace'::PropertyBagReader::readHashTable(objc_object *,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *a2);
}

uint64_t `anonymous namespace'::PropertyBagReader::readMember(_anonymous_namespace_::PropertyBagReader *this, objc_object *a2, const re::IntrospectionMember *a3, uint64_t *a4)
{
  objc_object *v7;
  objc_object *v8;
  re *Value;
  uint64_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  objc_object *v16;
  _QWORD *v17;
  uint64_t isKindOfClass;
  uint64_t v19;
  objc_object *v20;
  objc_object *v21;
  uint64_t v22;
  uint64_t v23;
  _anonymous_namespace_ ***v24;
  _anonymous_namespace_ **v25;
  uint64_t v26;
  _anonymous_namespace_ ***v27;
  uint64_t v28;
  _anonymous_namespace_ **v29;
  char PointerPolymorphic;
  re *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  objc_object *v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v38;
  const char *v39;
  NSObject *v40;
  const char *v41;
  NSObject *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  re *v47;
  uint64_t v48;
  re *v49;
  re *v50;
  uint64_t v51;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[64];
  uint8_t buf[4];
  uint64_t v58;
  _BYTE __src[72];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = v7;
  switch(*((_DWORD *)a3 + 10))
  {
    case 0:
    case 3:
      if ((Value & 1) != 0)
        goto LABEL_3;
      v32 = *re::foundationSerializationLogObjects(Value);
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        goto LABEL_44;
      v33 = *((_QWORD *)a3 + 1);
      *(_DWORD *)__src = 136315138;
      *(_QWORD *)&__src[4] = v33;
      v13 = "PropertyBagReader; failed to read target for member '%s'.";
      goto LABEL_42;
    case 1:
      v16 = v7;
      v17 = (uint64_t *)((char *)a4 + *((int *)a3 + 9));
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) == 0)
      {
        objc_opt_class();
        v34 = objc_opt_isKindOfClass();
        if ((v34 & 1) == 0)
        {
          v42 = *re::foundationSerializationLogObjects((re *)v34);
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            goto LABEL_40;
          v46 = *((_QWORD *)a3 + 1);
          *(_DWORD *)__src = 136315138;
          *(_QWORD *)&__src[4] = v46;
          v44 = "PropertyBagReader; expected NSArray for array '%s'.";
          goto LABEL_33;
        }
        v35 = v16;
        v36 = -[objc_object count](v35, "count");
        if (v36 >> 31)
        {
          v37 = *re::foundationSerializationLogObjects((re *)v36);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            v38 = *((_QWORD *)a3 + 1);
            *(_DWORD *)__src = 136315138;
            *(_QWORD *)&__src[4] = v38;
            v39 = "PropertyBagReader; array too big '%s'.";
LABEL_52:
            _os_log_error_impl(&dword_224FE9000, v37, OS_LOG_TYPE_ERROR, v39, __src, 0xCu);
          }
        }
        else
        {
          v47 = (re *)-[objc_object count](v35, "count");
          *(_QWORD *)__src = v47;
          if (*((_DWORD *)a3 + 10) == 1)
          {
            v48 = *((_QWORD *)a3 + 6);
            if (v48)
            {
              memcpy((char *)a4 + *((int *)a3 + 16), __src, *(int *)(v48 + 20));
              re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)__src, *(const re::IntrospectionBase **)(*((_QWORD *)a3 + 2) + 48), -[objc_object count](v35, "count"));
              re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)v56, (const re::IntrospectionBase *)__src);
              if ((v49 & 1) != 0)
              {
                re::IntrospectionPointer::~IntrospectionPointer((re::IntrospectionPointer *)v56);
                re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)__src);

                goto LABEL_3;
              }
              v53 = *re::foundationSerializationLogObjects(v49);
              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                v55 = *((_QWORD *)a3 + 1);
                *(_DWORD *)buf = 136315138;
                v58 = v55;
                _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "PropertyBagReader; failed to read array data for member '%s'.",
                  buf,
                  0xCu);
              }
              re::IntrospectionPointer::~IntrospectionPointer((re::IntrospectionPointer *)v56);
              re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)__src);
              goto LABEL_39;
            }
          }
          v37 = *re::foundationSerializationLogObjects(v47);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            v54 = *((_QWORD *)a3 + 1);
            *(_DWORD *)__src = 136315138;
            *(_QWORD *)&__src[4] = v54;
            v39 = "PropertyBagReader; failed to set array size '%s'.";
            goto LABEL_52;
          }
        }
LABEL_39:

        goto LABEL_40;
      }
      *(_QWORD *)__src = 0;
      if (*((_DWORD *)a3 + 10) == 1)
      {
        v19 = *((_QWORD *)a3 + 6);
        if (v19)
        {
          memcpy((char *)a4 + *((int *)a3 + 16), __src, *(int *)(v19 + 20));
          *v17 = 0;

LABEL_3:
          v10 = 1;
          goto LABEL_45;
        }
      }
      v42 = *re::foundationSerializationLogObjects((re *)isKindOfClass);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        v43 = *((_QWORD *)a3 + 1);
        *(_DWORD *)__src = 136315138;
        *(_QWORD *)&__src[4] = v43;
        v44 = "PropertyBagReader; failed to set array size '%s'.";
LABEL_33:
        _os_log_error_impl(&dword_224FE9000, v42, OS_LOG_TYPE_ERROR, v44, __src, 0xCu);
      }
LABEL_40:

      v32 = *re::foundationSerializationLogObjects(v50);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v51 = *((_QWORD *)a3 + 1);
        *(_DWORD *)__src = 136315138;
        *(_QWORD *)&__src[4] = v51;
        v13 = "PropertyBagReader; failed to read polymorphic member '%s'.";
LABEL_42:
        v14 = v32;
        v15 = 12;
LABEL_43:
        _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, v13, __src, v15);
      }
LABEL_44:
      v10 = 0;
LABEL_45:

      return v10;
    case 2:
      v20 = v7;
      v21 = v20;
      v22 = *((_QWORD *)a3 + 2);
      if (*(_DWORD *)(v22 + 16) == 1)
      {
        v23 = *(_QWORD *)(v22 + 48);
        if (*(_DWORD *)(v23 + 16) == 8)
        {
          v24 = *(_anonymous_namespace_ ****)(v23 + 64);
          v25 = *v24;
          if (*(_DWORD *)*v24 != 2)
          {
            v26 = *(unsigned int *)(v23 + 56);
            v27 = v24 + 1;
            v28 = v26 - 1;
            do
            {
              v29 = *v27++;
              v25 = v29;
              --v28;
            }
            while (*(_DWORD *)v29 != 2);
          }
          v10 = 1;

          if ((PointerPolymorphic & 1) != 0)
            goto LABEL_45;
LABEL_29:
          v32 = *re::foundationSerializationLogObjects(v31);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            goto LABEL_44;
          v45 = *((_QWORD *)a3 + 1);
          *(_DWORD *)__src = 136315138;
          *(_QWORD *)&__src[4] = v45;
          v13 = "PropertyBagReader; failed to read polymorphic member '%s'.";
          goto LABEL_42;
        }
        v40 = *re::foundationSerializationLogObjects((re *)v20);
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
LABEL_28:

          goto LABEL_29;
        }
        *(_WORD *)__src = 0;
        v41 = "PropertyBagReader; polymorphic member needs to point to structure.";
      }
      else
      {
        v40 = *re::foundationSerializationLogObjects((re *)v20);
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        *(_WORD *)__src = 0;
        v41 = "PropertyBagReader; polymorphic member needs to be pointer.";
      }
      _os_log_error_impl(&dword_224FE9000, v40, OS_LOG_TYPE_ERROR, v41, __src, 2u);
      goto LABEL_28;
    default:
      v11 = *re::foundationSerializationLogObjects((re *)v7);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_44;
      v12 = *((_DWORD *)a3 + 10);
      *(_DWORD *)__src = 67109120;
      *(_DWORD *)&__src[4] = v12;
      v13 = "PropertyBagReader; unknown member type '%d'.";
      v14 = v11;
      v15 = 8;
      goto LABEL_43;
  }
}

uint64_t `anonymous namespace'::BinarySerializer::serialize(_anonymous_namespace_ *a1, const re::IntrospectionBase *a2, const re::IntrospectionBase **a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  re *v18;
  NSObject *v19;
  const char *v20;
  uint8_t v22[8];
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v23[0] = a1;
  v23[1] = a5;
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v27 = 0x7FFFFFFFLL;
  v28 = a4;
  *((_QWORD *)&v29 + 1) = 0;
  v30 = 0uLL;
  re::DynamicString::setCapacity(&v29, 0);
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::init((uint64_t)&v24, a5, 3);
  *(_QWORD *)&v29 = a5;
  re::DynamicString::setCapacity(&v29, 0);
  v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                          * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
  v9 = v10 ^ (v10 >> 31);
  LODWORD(v10) = v24;
  if ((_QWORD)v24)
  {
    v10 = v9 % DWORD2(v25);
    v11 = *(unsigned int *)(*((_QWORD *)&v24 + 1) + 4 * v10);
    if ((_DWORD)v11 != 0x7FFFFFFF)
    {
      if (*(const re::IntrospectionBase ***)(v25 + 32 * v11 + 16) == a3)
        goto LABEL_9;
      while (1)
      {
        v11 = *(_DWORD *)(v25 + 32 * v11 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v11 == 0x7FFFFFFF)
          break;
        if (*(const re::IntrospectionBase ***)(v25 + 32 * v11 + 16) == a3)
          goto LABEL_9;
      }
    }
  }
  v12 = v27;
  if ((_DWORD)v27 == 0x7FFFFFFF)
  {
    v12 = v26;
    v13 = v26;
    if (v26 == DWORD2(v25))
    {
      re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::setCapacity((uint64_t)&v24, 2 * HIDWORD(v25));
      v13 = v26;
      LODWORD(v10) = v9 % DWORD2(v25);
    }
    v26 = v13 + 1;
    v14 = v25;
    v15 = *(_DWORD *)(v25 + 32 * v12 + 8);
  }
  else
  {
    v14 = v25;
    v15 = *(_DWORD *)(v25 + 32 * v27 + 8);
    LODWORD(v27) = v15 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v14 + 32 * v12 + 8) = v15 | 0x80000000;
  *(_DWORD *)(v25 + 32 * v12 + 8) = *(_DWORD *)(v25 + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)&v24 + 1)
                                                                                             + 4 * v10);
  *(_QWORD *)(v25 + 32 * v12) = v9;
  *(_QWORD *)(v25 + 32 * v12 + 16) = a3;
  *(_DWORD *)(v25 + 32 * v12 + 24) = 0;
  *(_DWORD *)(*((_QWORD *)&v24 + 1) + 4 * v10) = v12;
  ++HIDWORD(v25);
  ++HIDWORD(v27);
LABEL_9:
  if ((v16 & 1) != 0)
  {
    v22[0] = 69;
    v17 = 1;
    v18 = (re *)(*(uint64_t (**)(_anonymous_namespace_ *, uint8_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v22, 1);
    if (v18 == (re *)1)
      goto LABEL_15;
    v19 = *re::foundationSerializationLogObjects(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v22 = 0;
      v20 = "Binary Serialization; failed to write end of file tag.";
LABEL_25:
      _os_log_error_impl(&dword_224FE9000, v19, OS_LOG_TYPE_ERROR, v20, v22, 2u);
    }
  }
  else
  {
    v19 = *re::foundationSerializationLogObjects((re *)v16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v22 = 0;
      v20 = "Binary Serialization; failed to write body serialization.";
      goto LABEL_25;
    }
  }
  v17 = 0;
LABEL_15:
  if ((_QWORD)v29)
  {
    if ((BYTE8(v29) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v29 + 40))();
    v29 = 0u;
    v30 = 0u;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v24);
  return v17;
}

uint64_t re::serializeBinaryToBuffer(const re::IntrospectionBase *a1, const re::IntrospectionBase **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  void (**v20)(re::NullStreamWriter *__hidden);
  int v21;

  v20 = &off_24ED7C150;
  v21 = 0;
  {
    v17 = 0;
    goto LABEL_6;
  }
  v14 = v21;
  *a7 = v21;
  if (!(_DWORD)v14)
  {
    v17 = 0;
    *a6 = 0;
    return v17;
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, v14, 0);
  *a6 = v15;
  v16 = *a7;
  v19[0] = &off_24ED7C6A0;
  v19[1] = v15;
  v19[2] = v16;
  v19[3] = 0;
  if ((v17 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(a4, *a6);
LABEL_6:
    *a6 = 0;
    *a7 = 0;
  }
  return v17;
}

uint64_t `anonymous namespace'::BinarySerializer::write(_anonymous_namespace_::BinarySerializer *this, const re::IntrospectionBase *a2, const re::IntrospectionBase **a3)
{
  _anonymous_namespace_::BinarySerializer *v5;
  re *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  _BOOL8 v11;
  const re::IntrospectionBase *v13;
  re *v15;
  re *v16;
  char *v17;
  re *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  const re::IntrospectionBase *v22;
  const void *v23;
  re *v24;
  uint64_t v25;
  const char *v26;
  re *v27;
  char v28;
  re *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  re *v35;
  re *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  _DWORD **v42;
  uint64_t v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  int v47;
  _OWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  re *v55;
  uint64_t v56;
  _BYTE *v57;
  NSObject *v58;
  NSObject *v59;
  const re::IntrospectionBase *v60;
  re *v61;
  const re::IntrospectionBase *v62;
  const void *v63;
  uint8_t *v64;
  size_t v65;
  re *v66;
  re *v67;
  NSObject *v68;
  re *v69;
  uint64_t v70;
  const char *v71;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  uint32_t v75;
  size_t v76;
  re *v77;
  NSObject *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  _QWORD __dst[2];
  __int128 v90;
  const re::IntrospectionBase *v91;
  re *v92;
  uint64_t v93;
  _QWORD *v94;
  uint8_t buf[16];
  uint64_t v96;
  int v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _QWORD *v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v10 = *re::foundationSerializationLogObjects(this);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return 0;
    LOWORD(v90) = 0;
    v9 = "Binary Serialization; target memory is empty (FATAL, INTERNAL).";
LABEL_107:
    v64 = (uint8_t *)&v90;
LABEL_108:
    v74 = v10;
    v75 = 2;
LABEL_109:
    _os_log_error_impl(&dword_224FE9000, v74, OS_LOG_TYPE_ERROR, v9, v64, v75);
    return 0;
  }
  v5 = this;
  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
    case 9:
      v6 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)this + 16))();
      if (v6 == (re *)*((int *)a2 + 5))
        return 1;
      v7 = *re::foundationSerializationLogObjects(v6);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        return 0;
      v8 = *((_QWORD *)a2 + 6);
      LODWORD(v90) = 136315138;
      *(_QWORD *)((char *)&v90 + 4) = v8;
      v9 = "Binary Serialization; failed to write basic type '%s'.";
      goto LABEL_104;
    case 1:
      v13 = *a3;
      re::PolymorphicData::makeWithPointer(*((_QWORD *)a2 + 6), *a3, &v90);
    case 2:
    case 3:
      LODWORD(v90) = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)a2 + 88))(a2, a3);
      v15 = (re *)(*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)v5 + 16))(*(_QWORD *)v5, &v90, 4);
      if (v15 == (re *)4)
        goto LABEL_15;
      v10 = *re::foundationSerializationLogObjects(v15);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        return 0;
      *(_WORD *)buf = 0;
      v9 = "Binary Serialization; failed to write dynamic array length.";
      goto LABEL_79;
    case 4:
      LODWORD(v90) = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)a2 + 80))(a2, a3);
      v16 = (re *)(*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)v5 + 16))(*(_QWORD *)v5, &v90, 4);
      if (v16 == (re *)4)
      {
LABEL_15:
        if (!(_DWORD)v90)
          return 1;
        v17 = (char *)(*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, _QWORD))(*(_QWORD *)a2 + 104))(a2, a3, 0);
      }
      v10 = *re::foundationSerializationLogObjects(v16);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        return 0;
      *(_WORD *)buf = 0;
      v9 = "Binary Serialization; failed to write fixed array length.";
LABEL_79:
      v64 = buf;
      goto LABEL_108;
    case 5:
      *(_DWORD *)buf = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)a2 + 80))(a2, a3);
      v18 = (re *)(*(uint64_t (**)(_QWORD, uint8_t *, uint64_t))(**(_QWORD **)v5 + 16))(*(_QWORD *)v5, buf, 4);
      if (v18 != (re *)4)
      {
        v10 = *re::foundationSerializationLogObjects(v18);
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          return 0;
        LOWORD(v90) = 0;
        v9 = "Binary Serialization; failed to write data array length.";
        goto LABEL_107;
      }
      *(_QWORD *)&v90 = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)a2 + 88))(a2, a3);
      *((_QWORD *)&v90 + 1) = v19;
      while (1)
      {
        v20 = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)a2 + 96))(a2, a3);
        if ((_QWORD)v90 == v20 && WORD4(v90) == (unsigned __int16)v21 && WORD5(v90) == HIWORD(v21))
          return 1;
        v22 = (const re::IntrospectionBase *)*((_QWORD *)a2 + 6);
        v23 = (const void *)(*(uint64_t (**)(const re::IntrospectionBase *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v90);
        if ((v24 & 1) == 0)
          break;
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v90);
      }
      v10 = *re::foundationSerializationLogObjects(v24);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        return 0;
      LOWORD(__dst[0]) = 0;
      v9 = "Binary Serialization; failed to write data array item.";
      v64 = (uint8_t *)__dst;
      goto LABEL_108;
    case 6:
      v25 = *(_QWORD *)this;
      if (((_BYTE)a3[1] & 1) != 0)
        v26 = (const char *)a3[2];
      else
        v26 = (char *)a3 + 9;
      v65 = strlen(v26);
      LODWORD(v90) = v65;
      v66 = (re *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v25 + 16))(v25, &v90, 4);
      if (v66 == (re *)4)
      {
        v67 = (re *)(*(uint64_t (**)(uint64_t, const char *, size_t))(*(_QWORD *)v25 + 16))(v25, v26, v65);
        if (v67 == (re *)v65)
          return 1;
      }
      else
      {
        v72 = *re::foundationSerializationLogObjects(v66);
        v67 = (re *)os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v67)
        {
          LOWORD(v90) = 0;
          _os_log_error_impl(&dword_224FE9000, v72, OS_LOG_TYPE_ERROR, "Binary Serialization; failed to write string length.",
            (uint8_t *)&v90,
            2u);
        }
      }
      v10 = *re::foundationSerializationLogObjects(v67);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        return 0;
      LOWORD(v90) = 0;
      v9 = "Binary Serialization; failed to write dynamic string.";
      goto LABEL_107;
    case 7:
      *(_DWORD *)buf = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)a2 + 80))(a2, a3);
      v27 = (re *)(*(uint64_t (**)(_QWORD, uint8_t *, uint64_t))(**(_QWORD **)v5 + 16))(*(_QWORD *)v5, buf, 4);
      if (v27 != (re *)4)
      {
        v10 = *re::foundationSerializationLogObjects(v27);
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          return 0;
        LOWORD(v90) = 0;
        v9 = "Binary Serialization; failed to write hash table length.";
        goto LABEL_107;
      }
      *(_QWORD *)&v90 = &off_24ED880F0;
      *((_QWORD *)&v90 + 1) = v5;
      v91 = a2;
      v92 = (re *)&v90;
      v28 = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, __int128 *))(*(_QWORD *)a2 + 104))(a2, a3, &v90);
      v29 = v92;
      if (v92 == (re *)&v90)
      {
        v30 = 4;
        v29 = (re *)&v90;
      }
      else
      {
        if (!v92)
          goto LABEL_119;
        v30 = 5;
      }
      v29 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_119:
      if ((v28 & 1) != 0)
        return 1;
      v10 = *re::foundationSerializationLogObjects(v29);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v90) = 0;
        v9 = "Binary Serialization; failed to iterate over hash table keys.";
        goto LABEL_107;
      }
      return 0;
    case 8:
      if (!*((_DWORD *)a2 + 14))
        return 1;
      v31 = 0;
      break;
    case 0xA:
      re::StringID::StringID((re::StringID *)&v90, (const StringID *)a3);
      v52 = *(_QWORD *)v5;
      v53 = *((_QWORD *)&v90 + 1);
      v54 = strlen(*((const char **)&v90 + 1));
      *(_DWORD *)buf = v54;
      v55 = (re *)(*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v52 + 16))(v52, buf, 4);
      if (v55 == (re *)4)
      {
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)v52 + 16))(v52, v53, v54) == v54;
      }
      else
      {
        v68 = *re::foundationSerializationLogObjects(v55);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v68, OS_LOG_TYPE_ERROR, "Binary Serialization; failed to write string length.",
            buf,
            2u);
        }
        v11 = 0;
      }
      re::StringID::destroyString((re::StringID *)&v90);
      return v11;
    case 0xB:
      v56 = *((_QWORD *)this + 10);
      if ((v56 & 1) != 0)
      {
        *((_QWORD *)this + 10) = 1;
        v57 = (_BYTE *)*((_QWORD *)this + 11);
      }
      else
      {
        *((_BYTE *)this + 80) = v56 & 1;
        v57 = (char *)this + 81;
      }
      *v57 = 0;
      v69 = (re *)(*((uint64_t (**)(_QWORD, const re::IntrospectionBase *, const re::IntrospectionBase **, char *))a2
                   + 9))(*((_QWORD *)this + 8), a2, a3, (char *)this + 72);
      if ((v69 & 1) == 0)
      {
        v7 = *re::foundationSerializationLogObjects(v69);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          return 0;
        v73 = *((_QWORD *)a2 + 6);
        LODWORD(v90) = 136315138;
        *(_QWORD *)((char *)&v90 + 4) = v73;
        v9 = "Binary Serialization; failed to write type '%s' using serialization callback.";
LABEL_104:
        v64 = (uint8_t *)&v90;
        v74 = v7;
        goto LABEL_105;
      }
      v70 = *(_QWORD *)v5;
      if ((*((_BYTE *)v5 + 80) & 1) != 0)
        v71 = (const char *)*((_QWORD *)v5 + 11);
      else
        v71 = (char *)v5 + 81;
      v76 = strlen(v71);
      LODWORD(v90) = v76;
      v77 = (re *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v70 + 16))(v70, &v90, 4);
      if (v77 == (re *)4)
        return (*(uint64_t (**)(uint64_t, const char *, size_t))(*(_QWORD *)v70 + 16))(v70, v71, v76) == v76;
      v10 = *re::foundationSerializationLogObjects(v77);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v90) = 0;
        v9 = "Binary Serialization; failed to write string length.";
        goto LABEL_107;
      }
      return 0;
    case 0xD:
      buf[0] = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)a2 + 56))(a2, a3);
      v61 = (re *)(*(uint64_t (**)(_QWORD, uint8_t *, uint64_t))(**(_QWORD **)v5 + 16))(*(_QWORD *)v5, buf, 1);
      if (v61 == (re *)1)
      {
        if (!buf[0])
          return 1;
        v62 = (const re::IntrospectionBase *)*((_QWORD *)a2 + 6);
        v63 = (const void *)(*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)a2 + 80))(a2, a3);
      }
      v10 = *re::foundationSerializationLogObjects(v61);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        return 0;
      LOWORD(v90) = 0;
      v9 = "Binary Serialization; failed to write optional value.";
      goto LABEL_107;
    default:
      v58 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        v59 = v58;
        re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v90);
        v60 = (BYTE8(v90) & 1) != 0 ? v91 : (const re::IntrospectionBase *)((char *)&v90 + 9);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v60;
        _os_log_error_impl(&dword_224FE9000, v59, OS_LOG_TYPE_ERROR, "Binary Serialization; unhandled introspection type '%s'.",
          buf,
          0xCu);

        if ((_QWORD)v90)
        {
          if ((BYTE8(v90) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v90 + 40))();
        }
      }
      return 0;
  }
  while (1)
  {
    v32 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v31);
    if (*(_DWORD *)v32 == 1)
      break;
LABEL_60:
    ++v31;
    v11 = 1;
    if (v31 >= *((unsigned int *)a2 + 14))
      return v11;
  }
  switch(*(_DWORD *)(v32 + 40))
  {
    case 0:
    case 3:
      if ((this & 1) != 0)
        goto LABEL_60;
      v78 = *re::foundationSerializationLogObjects(this);
      if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        return 0;
      v80 = *(_QWORD *)(v32 + 8);
      LODWORD(v90) = 136315138;
      *(_QWORD *)((char *)&v90 + 4) = v80;
      v9 = "Binary Serialization; failed to write target for member '%s'.";
      goto LABEL_135;
    case 1:
      v33 = *(_QWORD *)(v32 + 48);
      if (!v33)
      {
        v78 = *re::foundationSerializationLogObjects(this);
        if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          return 0;
        v81 = *(_QWORD *)(v32 + 8);
        LODWORD(v90) = 136315138;
        *(_QWORD *)((char *)&v90 + 4) = v81;
        v9 = "Binary Serialization; failed to get array length for member '%s'.";
        goto LABEL_135;
      }
      v34 = (char *)a3 + *(int *)(v32 + 64);
      __dst[0] = 0;
      v35 = (re *)memcpy(__dst, v34, *(int *)(v33 + 20));
      if (HIDWORD(__dst[0]))
      {
        v78 = *re::foundationSerializationLogObjects(v35);
        if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          return 0;
        v84 = *(_QWORD *)(v32 + 8);
        LODWORD(v90) = 136315138;
        *(_QWORD *)((char *)&v90 + 4) = v84;
        v9 = "Binary Serialization; array too big for member '%s'.";
        goto LABEL_135;
      }
      v88 = __dst[0];
      v36 = (re *)(*(uint64_t (**)(_QWORD, int *, uint64_t))(**(_QWORD **)v5 + 16))(*(_QWORD *)v5, &v88, 4);
      if (v36 != (re *)4)
      {
        v78 = *re::foundationSerializationLogObjects(v36);
        if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          return 0;
        v85 = *(_QWORD *)(v32 + 8);
        LODWORD(v90) = 136315138;
        *(_QWORD *)((char *)&v90 + 4) = v85;
        v9 = "Binary Serialization; failed to write member array length for member '%s'.";
LABEL_135:
        v64 = (uint8_t *)&v90;
        v74 = v78;
LABEL_105:
        v75 = 12;
        goto LABEL_109;
      }
      v37 = *(_QWORD *)(v32 + 16);
      v87 = 0;
      if (v88)
        v38 = (char *)a3 + *(int *)(v32 + 36);
      else
        v38 = (char *)&v87;
      re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&v90, *(const re::IntrospectionBase **)(v37 + 48), v88);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)buf, 0);
      v96 = 0x800000001;
      v97 = 8;
      v98 = 0;
      v99 = 0;
      v100 = 0xFFFFFFFFLL;
      *(_QWORD *)buf = &off_24ED30800;
      v101 = &v90;
      v102 = 0;
      *(_QWORD *)buf = &off_24ED30800;
      v101 = 0;
      v48 = v102;
      if (v102)
      {
        v49 = *v102;
        if (*v102)
        {
          if ((v102[1] & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v49 + 40))(*v102, v102[2]);
          *v48 = 0u;
          v48[1] = 0u;
        }
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v49 + 40))(v49, v48);
        v102 = 0;
      }
      *(_QWORD *)buf = &off_24ED426B8;
      objc_destructInstance(&buf[8]);
      *(_QWORD *)&v90 = &off_24ED23640;
      v93 = 0;
      v50 = v94;
      if (v94)
      {
        v51 = *v94;
        if (*v94)
        {
          if ((v94[1] & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(*v94, v94[2]);
          *v50 = 0u;
          v50[1] = 0u;
        }
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v51 + 40))(v51, v50);
        v94 = 0;
      }
      *(_QWORD *)&v90 = &off_24ED426B8;
      this = (_anonymous_namespace_::BinarySerializer *)objc_destructInstance((char *)&v90 + 8);
      if (v47)
        goto LABEL_60;
      v78 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        v86 = *(_QWORD *)(v32 + 8);
        LODWORD(v90) = 136315138;
        *(_QWORD *)((char *)&v90 + 4) = v86;
        v9 = "Binary Serialization; failed to write array data for member '%s'.";
        goto LABEL_135;
      }
      return 0;
    case 2:
      v39 = *(_QWORD *)(*(_QWORD *)(v32 + 16) + 48);
      v40 = *(_QWORD **)(v39 + 64);
      v41 = (_DWORD *)*v40;
      if (*(_DWORD *)*v40 != 2)
      {
        v42 = (_DWORD **)(v40 + 1);
        v43 = *(unsigned int *)(v39 + 56) - 1;
        do
        {
          v44 = *v42++;
          v41 = v44;
          --v43;
        }
        while (*v44 != 2);
      }
      v45 = *(char **)((char *)a3 + *(int *)(v32 + 36));
      v46 = *(_QWORD *)(v32 + 48);
      *(_QWORD *)&v90 = (char *)a3 + *(int *)(v32 + 64);
      *((_QWORD *)&v90 + 1) = v46;
      v91 = (const re::IntrospectionBase *)*((_QWORD *)v41 + 1);
      if ((this & 1) != 0)
        goto LABEL_60;
      v78 = *re::foundationSerializationLogObjects(this);
      if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        return 0;
      v83 = *(_QWORD *)(v32 + 8);
      LODWORD(v90) = 136315138;
      *(_QWORD *)((char *)&v90 + 4) = v83;
      v9 = "Binary Serialization; failed to find polymorphic member '%s'.";
      goto LABEL_135;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "write", 212);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225C9C6A8);
  }
}

uint64_t `anonymous namespace'::BinarySerializer::writePointer(_anonymous_namespace_::BinarySerializer *this, const re::IntrospectionBase *a2, char *a3, re::PolymorphicData *a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  re *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  re *v22;
  unsigned __int8 v23;
  unsigned int *v24;
  const void *v25;
  uint64_t v26;
  char *v27;
  re *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  re *v34;
  re *v35;
  re *v36;
  size_t v37;
  re *v38;
  re *v39;
  uint8_t *v40;
  NSObject *v41;
  uint32_t v42;
  re *v44;
  re *v45;
  NSObject *v46;
  uint64_t v47;
  const re::IntrospectionBase *v48;
  char *__s;
  _QWORD __dst[2];
  uint8_t buf[4];
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  __s = a3;
  if (a3)
  {
    v8 = (char *)this + 16;
    v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
    v10 = v9 ^ (v9 >> 31);
    if (*((_QWORD *)this + 2))
    {
      v11 = *(unsigned int *)(*((_QWORD *)this + 3) + 4 * (v10 % *((unsigned int *)this + 10)));
      if ((_DWORD)v11 != 0x7FFFFFFF)
      {
        v31 = *((_QWORD *)this + 4);
        if (*(char **)(v31 + 32 * v11 + 16) == a3)
        {
LABEL_32:
          v33 = *(_QWORD *)this;
          buf[0] = 82;
          v34 = (re *)(*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v33 + 16))(v33, buf, 1);
          if (v34 != (re *)1)
          {
            v19 = *re::foundationSerializationLogObjects(v34);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v20 = "Binary Serialization; failed to write reference tag.";
              goto LABEL_51;
            }
            return 0;
          }
          v35 = (re *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, v31 + 32 * v11 + 24, 4);
          if (v35 != (re *)4)
          {
            v19 = *re::foundationSerializationLogObjects(v35);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v20 = "Binary Serialization; failed to write reference tag index.";
              goto LABEL_51;
            }
            return 0;
          }
          return 1;
        }
        while (1)
        {
          v32 = *(_DWORD *)(v31 + 32 * v11 + 8);
          v11 = v32 & 0x7FFFFFFF;
          if ((v32 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(char **)(v31 + 32 * v11 + 16) == a3)
            goto LABEL_32;
        }
      }
      v12 = *((unsigned int *)this + 10);
      *(_DWORD *)buf = *((_DWORD *)this + 11);
      v13 = v10 % v12;
      v14 = *(unsigned int *)(*((_QWORD *)this + 3) + 4 * (v10 % v12));
      if ((_DWORD)v14 != 0x7FFFFFFF)
      {
        v15 = *((_QWORD *)this + 4);
        if (*(char **)(v15 + 32 * v14 + 16) == a3)
        {
LABEL_14:
          v21 = *(_QWORD *)this;
          buf[0] = 73;
          v22 = (re *)(*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v21 + 16))(v21, buf, 1);
          if (v22 != (re *)1)
          {
            v19 = *re::foundationSerializationLogObjects(v22);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v20 = "Binary Serialization; failed to write inline object tag.";
              goto LABEL_51;
            }
            return 0;
          }
          if ((v23 & 1) == 0)
          {
            if ((_DWORD)v22)
            {
              re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v48);
            }
          }
          if ((const re::IntrospectionBase *)re::introspect<char>(void)::info == a2)
          {
            v37 = strlen(__s);
            if (HIDWORD(v37))
            {
              v19 = *re::foundationSerializationLogObjects((re *)v37);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                v20 = "Binary Serialization; string too long.";
                goto LABEL_51;
              }
              return 0;
            }
            *(_DWORD *)buf = v37;
            v38 = (re *)(*(uint64_t (**)(_QWORD, uint8_t *, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, buf, 4);
            if (v38 == (re *)4)
            {
              v39 = (re *)(*(uint64_t (**)(_QWORD, char *, _QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this, __s, *(unsigned int *)buf);
              if (v39 == (re *)*(unsigned int *)buf)
                return 1;
              v19 = *re::foundationSerializationLogObjects(v39);
              if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                return 0;
              LOWORD(__dst[0]) = 0;
              v20 = "Binary Serialization; failed to write string.";
            }
            else
            {
              v19 = *re::foundationSerializationLogObjects(v38);
              if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                return 0;
              LOWORD(__dst[0]) = 0;
              v20 = "Binary Serialization; failed to write string length.";
            }
            v40 = (uint8_t *)__dst;
            goto LABEL_52;
          }
          if (a4)
          {
            v24 = (unsigned int *)*((_QWORD *)a4 + 2);
            if (v24)
            {
              v25 = *(const void **)a4;
              if (*(_QWORD *)a4 && (v26 = *((_QWORD *)a4 + 1)) != 0)
              {
                v27 = __s;
                __dst[0] = 0;
                v28 = (re *)memcpy(__dst, v25, *(int *)(v26 + 20));
                v29 = *v24;
                if ((_DWORD)v29)
                {
                  v30 = (int *)(*((_QWORD *)v24 + 1) + 32);
                  while (*((_QWORD *)v30 - 1) != __dst[0])
                  {
                    v30 += 10;
                    if (!--v29)
                      goto LABEL_25;
                  }
                  v44 = (re *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, __dst, 8);
                  if (v44 != (re *)8)
                  {
                    v46 = *re::foundationSerializationLogObjects(v44);
                    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                      return 0;
                    v47 = *((_QWORD *)v30 - 4);
                    *(_DWORD *)buf = 136315138;
                    v52 = v47;
                    v20 = "Binary Serialization; failed to write type for polymorphic type '%s'.";
                    v40 = buf;
                    v41 = v46;
                    v42 = 12;
                    goto LABEL_53;
                  }
                  if ((v45 & 1) == 0)
                  {
                    v19 = *re::foundationSerializationLogObjects(v45);
                    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                      return 0;
                    *(_WORD *)buf = 0;
                    v20 = "Binary Serialization; failed to write pointer dereferenced target.";
                    goto LABEL_51;
                  }
                  return 1;
                }
LABEL_25:
                v19 = *re::foundationSerializationLogObjects(v28);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  v20 = "Binary Serialization; failed to find polymorphic type.";
                  goto LABEL_51;
                }
              }
              else
              {
                v19 = *re::foundationSerializationLogObjects(v22);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  v20 = "Binary Serialization; invalid polymorphic data.";
                  goto LABEL_51;
                }
              }
              return 0;
            }
          }
          if ((v36 & 1) == 0)
          {
            v19 = *re::foundationSerializationLogObjects(v36);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v20 = "Binary Serialization; failed to write pointer dereferenced target.";
              goto LABEL_51;
            }
            return 0;
          }
          return 1;
        }
        while (1)
        {
          v14 = *(_DWORD *)(v15 + 32 * v14 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v14 == 0x7FFFFFFF)
            break;
          if (*(char **)(v15 + 32 * v14 + 16) == a3)
            goto LABEL_14;
        }
      }
    }
    else
    {
      LODWORD(v13) = 0;
      *(_DWORD *)buf = *((_DWORD *)this + 11);
    }
    re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::addEmplace<unsigned int &>((uint64_t)v8, v13, v10, &__s, buf);
    ++*((_DWORD *)this + 14);
    goto LABEL_14;
  }
  v16 = *(_QWORD *)this;
  buf[0] = 78;
  v17 = 1;
  v18 = (re *)(*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, re::PolymorphicData *))(*(_QWORD *)v16 + 16))(v16, buf, 1, a4);
  if (v18 != (re *)1)
  {
    v19 = *re::foundationSerializationLogObjects(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v20 = "Binary Serialization; failed to write NULL tag.";
LABEL_51:
      v40 = buf;
LABEL_52:
      v41 = v19;
      v42 = 2;
LABEL_53:
      _os_log_error_impl(&dword_224FE9000, v41, OS_LOG_TYPE_ERROR, v20, v40, v42);
    }
    return 0;
  }
  return v17;
}

BOOL `anonymous namespace'::BinarySerializer::writeLinearArray(_anonymous_namespace_::BinarySerializer *this, const re::IntrospectionBase *a2, unint64_t a3, char *a4)
{
  int v8;
  BOOL v9;
  re *v10;
  NSObject *v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v17;
  NSObject *v18;
  _BYTE *v19;
  _BYTE v20[12];
  _BYTE *v21;
  uint8_t buf[4];
  _BYTE *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v8 = *((_DWORD *)a2 + 4);
  if (v8)
    v9 = v8 == 9;
  else
    v9 = 1;
  if (v9)
  {
    v10 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)this + 16))();
    if (v10 != (re *)(*((int *)a2 + 5) * a3))
    {
      v11 = *re::foundationSerializationLogObjects(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v17 = *((_QWORD *)a2 + 6);
        *(_DWORD *)v20 = 136315138;
        *(_QWORD *)&v20[4] = v17;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Binary Serialization; failed to fast write array of basic type '%s'.",
          v20,
          0xCu);
      }
      return 0;
    }
    return 1;
  }
  if (!a3)
    return 1;
  if ((_DWORD)v13)
  {
    v14 = 0;
    while (a3 - 1 != v14)
    {
      if ((v13 & 1) == 0)
      {
        v12 = v14 >= a3;
        goto LABEL_18;
      }
    }
    return 1;
  }
  v12 = 0;
  LODWORD(v14) = 0;
LABEL_18:
  v15 = *re::foundationSerializationLogObjects((re *)v13);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v18 = v15;
    re::getPrettyTypeName(a2, (const re::IntrospectionBase *)v20);
    if ((v20[8] & 1) != 0)
      v19 = v21;
    else
      v19 = &v20[9];
    *(_DWORD *)buf = 136315394;
    v23 = v19;
    v24 = 1024;
    v25 = v14;
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Binary Serialization; failed to write %s[%d].",
      buf,
      0x12u);

    if (*(_QWORD *)v20 && (v20[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v20 + 40))();
  }
  return v12;
}

void std::__function::__func<`anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<`anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<`anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<`anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED880F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<`anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<`anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED880F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<`anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1},std::allocator<`anonymous namespace'::BinarySerializer::write(re::IntrospectionBase const&,void const*)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(uint64_t a1, const re::IntrospectionBase ***a2, const re::IntrospectionBase ***a3)
{
  const re::IntrospectionBase **v4;
  _anonymous_namespace_::BinarySerializer *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  __int16 v12;
  __int16 v13;

  v4 = *a3;
  v5 = *(_anonymous_namespace_::BinarySerializer **)(a1 + 8);
  if ((v6 & 1) == 0)
  {
    v9 = *re::foundationSerializationLogObjects((re *)v6);
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v13 = 0;
    v10 = "Binary Serialization; failed to write hash table key.";
    v11 = (uint8_t *)&v13;
LABEL_9:
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
    return 0;
  }
  if ((v7 & 1) != 0)
    return 1;
  v9 = *re::foundationSerializationLogObjects((re *)v7);
  result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v12 = 0;
    v10 = "Binary Serialization; failed to write hash table value.";
    v11 = (uint8_t *)&v12;
    goto LABEL_9;
  }
  return result;
}

uint64_t *re::foundationSerializationLogObjects(re *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    re::foundationSerializationLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Foundation.Serialization");
  }
  return &re::foundationSerializationLogObjects(void)::logObjects;
}

uint64_t re::legacyTypeRegistry(re *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  _anonymous_namespace_ *v4;

  v2 = &re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
  if ((v1 & 1) == 0)
  {
    v2 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
    if ((_DWORD)v4)
    {
      v2 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
    }
  }
  return v2[485];
}

re::internal::TypeTranslationTable **`anonymous namespace'::loadLegacyTypeRegistry(_anonymous_namespace_ *this)
{
  void *v1;
  id v2;
  _anonymous_namespace_ *File;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  re *v24;
  uint64_t v25;
  uint64_t v26;
  re::internal *v27;
  uint64_t *v28;
  re::TypeRegistry *TypeRegistry;
  re::internal::TypeTranslationTable **v30;
  NSObject *v31;
  const char *v32;
  NSObject *v33;
  NSObject *v34;
  char *v35;
  const char *v36;
  NSObject *v37;
  uint32_t v38;
  NSObject *v39;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[8];
  id v45;
  id v46;
  id v47;
  id v48;
  __int128 v49;
  __int128 v50;
  id location;
  __int128 buf;
  uint64_t v53;
  uint64_t *v54;
  _OWORD v55[2];
  int v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  re::Bundle::reResourcesFramework((uint64_t)&buf);
  if ((_BYTE)buf)
    v1 = (void *)*((_QWORD *)&buf + 1);
  else
    v1 = 0;
  v2 = v1;
  location = v2;
  if ((_BYTE)buf)
  {

    v2 = location;
  }
  v48 = v2;
  if (v48)
  {
    File = (_anonymous_namespace_ *)re::Bundle::findFile((re::Bundle *)&v48, "RealityKit-Schema-Fall2020.reschema", (re::DynamicString *)&buf);
    v4 = *((_QWORD *)&buf + 1) >> 1;
    if ((BYTE8(buf) & 1) == 0)
      v4 = BYTE8(buf) >> 1;
    if (v4)
    {
      v5 = buf;
      v6 = v53;
      *(_QWORD *)&buf = 0;
      v53 = 0;
      *(_QWORD *)&v50 = v6;
      *((_QWORD *)&v50 + 1) = v54;
      *(_QWORD *)&v49 = v5;
      *((_QWORD *)&v49 + 1) = *((_QWORD *)&buf + 1);
    }
    else
    {
      v49 = 0u;
      v50 = 0u;
      re::DynamicString::setCapacity(&v49, 0);
      if ((_QWORD)buf && (BYTE8(buf) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)buf + 40))();
    }
  }
  else
  {
    v49 = 0u;
    v50 = 0u;
    re::DynamicString::setCapacity(&v49, 0);
  }

  v8 = BYTE8(v49) & 1;
  v9 = *((_QWORD *)&v49 + 1) >> 1;
  v10 = BYTE8(v49) >> 1;
  if ((BYTE8(v49) & 1) != 0)
    v11 = *((_QWORD *)&v49 + 1) >> 1;
  else
    v11 = BYTE8(v49) >> 1;
  if (!v11)
  {
    re::Bundle::coreREFramework(&buf);
    re::ObjCObject::operator=(&location, (id *)&buf);

    v47 = location;
    if (v47)
    {
      v12 = (_anonymous_namespace_ *)re::Bundle::findFile((re::Bundle *)&v47, "RealityKit-Schema-Fall2020.reschema", (re::DynamicString *)&buf);
      v13 = *((_QWORD *)&buf + 1) >> 1;
      if ((BYTE8(buf) & 1) == 0)
        v13 = BYTE8(buf) >> 1;
      if (v13)
      {
        v14 = buf;
        v15 = v53;
        *(_QWORD *)&buf = 0;
        v53 = 0;
        *(_QWORD *)&v43 = v15;
        *((_QWORD *)&v43 + 1) = v54;
        *(_QWORD *)&v42 = v14;
        *((_QWORD *)&v42 + 1) = *((_QWORD *)&buf + 1);
      }
      else
      {
        v42 = 0u;
        v43 = 0u;
        re::DynamicString::setCapacity(&v42, 0);
        if ((_QWORD)buf && (BYTE8(buf) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)buf + 40))();
      }
    }
    else
    {
      v42 = 0u;
      v43 = 0u;
      re::DynamicString::setCapacity(&v42, 0);
    }
    re::DynamicString::operator=((re::DynamicString *)&v49, (re::DynamicString *)&v42);
    if ((_QWORD)v42)
    {
      if ((BYTE8(v42) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v42 + 40))();
      v42 = 0u;
      v43 = 0u;
    }

    v8 = BYTE8(v49) & 1;
    v9 = *((_QWORD *)&v49 + 1) >> 1;
    v10 = BYTE8(v49) >> 1;
  }
  if (v8)
    v16 = v9;
  else
    v16 = v10;
  if (!v16)
  {
    re::Bundle::reTestsDataFramework((uint64_t)&buf);
    *(_QWORD *)&v42 = 0;
    if ((_BYTE)buf)
      v17 = (id *)&buf + 1;
    else
      v17 = (id *)&v42;
    re::ObjCObject::operator=(&location, v17);

    if ((_BYTE)buf)
    v46 = location;
    if (v46)
    {
      v18 = (_anonymous_namespace_ *)re::Bundle::findFile((re::Bundle *)&v46, "RealityKit-Schema-Fall2020.reschema", (re::DynamicString *)&buf);
      v19 = *((_QWORD *)&buf + 1) >> 1;
      if ((BYTE8(buf) & 1) == 0)
        v19 = BYTE8(buf) >> 1;
      if (v19)
      {
        v20 = buf;
        v21 = v53;
        *(_QWORD *)&buf = 0;
        v53 = 0;
        *(_QWORD *)&v43 = v21;
        *((_QWORD *)&v43 + 1) = v54;
        *(_QWORD *)&v42 = v20;
        *((_QWORD *)&v42 + 1) = *((_QWORD *)&buf + 1);
      }
      else
      {
        v42 = 0u;
        v43 = 0u;
        re::DynamicString::setCapacity(&v42, 0);
        if ((_QWORD)buf && (BYTE8(buf) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)buf + 40))();
      }
    }
    else
    {
      v42 = 0u;
      v43 = 0u;
      re::DynamicString::setCapacity(&v42, 0);
    }
    re::DynamicString::operator=((re::DynamicString *)&v49, (re::DynamicString *)&v42);
    if ((_QWORD)v42)
    {
      if ((BYTE8(v42) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v42 + 40))();
      v42 = 0u;
      v43 = 0u;
    }

  }
  if (!location)
  {
    v31 = *re::foundationSerializationLogObjects(v7);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      goto LABEL_64;
    LOWORD(buf) = 0;
    v32 = "Failed to read type registry from bundle. Bundle not found.";
LABEL_92:
    _os_log_error_impl(&dword_224FE9000, v31, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&buf, 2u);
    goto LABEL_64;
  }
  v22 = *((_QWORD *)&v49 + 1) >> 1;
  if ((BYTE8(v49) & 1) == 0)
    v22 = BYTE8(v49) >> 1;
  if (v22)
  {
    if ((BYTE8(v49) & 1) != 0)
      v23 = v50;
    else
      v23 = (unint64_t)&v49 | 9;
    re::Data::makeDataWithContentsOfFile(v23, 0, (uint64_t)v44);
    if (!v44[0])
    {
      v33 = *re::foundationSerializationLogObjects(v24);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        v41 = re::WrappedError::localizedDescription(&v45);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v41;
        _os_log_error_impl(&dword_224FE9000, v33, OS_LOG_TYPE_ERROR, "Failed to read type registry from bundle. %s", (uint8_t *)&buf, 0xCu);
      }
      v30 = 0;
      goto LABEL_83;
    }
    LOBYTE(v53) = 0;
    *(_QWORD *)&buf = &off_24ED42538;
    *((_QWORD *)&buf + 1) = "PersistedSchemaAllocator";
    memset(v55, 0, sizeof(v55));
    v56 = 0;
    v57 = 0x7FFFFFFFLL;
    v25 = objc_msgSend(objc_retainAutorelease(v45), "bytes");
    v26 = objc_msgSend(v45, "length");
    *(_QWORD *)&v58 = &off_24ED7C9D0;
    *((_QWORD *)&v58 + 1) = v25;
    v59 = v26;
    v60 = 0;
    if ((_BYTE)v42)
    {
      v28 = re::internal::typeRegistryAllocator(v27);
      if (TypeRegistry)
      {
        v30 = (re::internal::TypeTranslationTable **)TypeRegistry;
        goto LABEL_81;
      }
      v39 = *re::foundationSerializationLogObjects(0);
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
LABEL_80:
        v30 = 0;
LABEL_81:
        if (!(_BYTE)v42 && *((_QWORD *)&v42 + 1) && (v43 & 1) != 0)
          (*(void (**)(void))(**((_QWORD **)&v42 + 1) + 40))();
        re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)&buf);
LABEL_83:

        goto LABEL_84;
      }
      LOWORD(v58) = 0;
      v36 = "Failed to read type registry from bundle.";
      v37 = v39;
      v38 = 2;
    }
    else
    {
      v34 = *re::foundationSerializationLogObjects(v27);
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        goto LABEL_80;
      if ((v43 & 1) != 0)
        v35 = (char *)*((_QWORD *)&v43 + 1);
      else
        v35 = (char *)&v43 + 1;
      LODWORD(v58) = 136315138;
      *(_QWORD *)((char *)&v58 + 4) = v35;
      v36 = "Failed to read type registry from bundle. %s";
      v37 = v34;
      v38 = 12;
    }
    _os_log_error_impl(&dword_224FE9000, v37, OS_LOG_TYPE_ERROR, v36, (uint8_t *)&v58, v38);
    goto LABEL_80;
  }
  v31 = *re::foundationSerializationLogObjects(v7);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    v32 = "Failed to read type registry from bundle. Schema file not found.";
    goto LABEL_92;
  }
LABEL_64:
  v30 = 0;
LABEL_84:
  if ((_QWORD)v49 && (BYTE8(v49) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v49 + 40))();

  return v30;
}

BOOL re::scanForCopy(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  __int16 v20[8];

  if (*(_QWORD *)(a1 + 8))
  {
    v5 = a1;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *a3;
      if (!*a3)
        break;
      switch(*(_DWORD *)(v8 + 16))
      {
        case 0:
        case 9:
          *a3 = 0;
          goto LABEL_13;
        case 2:
          v10 = *a2;
          v11 = -1;
          do
          {
            v10 += *(int *)(*(_QWORD *)(v8 + 48) + 20);
            *a2 = v10;
            ++v11;
          }
          while (v11 < *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v6));
          goto LABEL_11;
        case 3:
        case 4:
          a1 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 96))(*a3, *a2, *(unsigned int *)(*(_QWORD *)(v5 + 16) + 4 * v6));
          *a2 = a1;
LABEL_11:
          v12 = *(_QWORD *)(v8 + 48);
          goto LABEL_12;
        case 8:
          v13 = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v6);
          break;
        default:
          *a3 = 0;
          v9 = *re::foundationSerializationLogObjects((re *)a1);
          a1 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)a1)
          {
            v20[0] = 0;
            _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Connection source type isn't supported.", (uint8_t *)v20, 2u);
          }
          goto LABEL_13;
      }
      while (1)
      {
        v14 = *(_DWORD *)(v8 + 56);
        if (v13 < v14)
          break;
        if (v14)
        {
          v15 = *(_QWORD **)(v8 + 64);
          v16 = *(unsigned int *)(v8 + 56);
          while (1)
          {
            v17 = (_DWORD *)*v15;
            if (*(_DWORD *)*v15 == 1 && v17[10] == 3)
              break;
            ++v15;
            if (!--v16)
              goto LABEL_13;
          }
          v8 = *((_QWORD *)v17 + 2);
          v13 -= v14;
          if (v8)
            continue;
        }
        goto LABEL_13;
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * v13);
      *a2 += *(int *)(v18 + 36);
      v12 = *(_QWORD *)(v18 + 16);
LABEL_12:
      *a3 = v12;
LABEL_13:
      v6 = ++v7;
    }
    while (*(_QWORD *)(v5 + 8) > (unint64_t)v7);
  }
  return *a3 != 0;
}

uint64_t `anonymous namespace'::DeepCopier::write(_anonymous_namespace_::DeepCopier *this, const re::IntrospectionBase *a2, char *a3, const re::IntrospectionBase **a4)
{
  const re::IntrospectionBase *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  const re::IntrospectionBase *v10;
  NSObject *v11;
  NSObject *v12;
  _OWORD *v13;
  const re::IntrospectionBase *v14;
  const re::IntrospectionBase *v15;
  unint64_t v16;
  _anonymous_namespace_::DeepCopier *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  re *v24;
  NSObject *v25;
  const char *v26;
  uint8_t *p_src;
  uint64_t v28;
  re *v29;
  uint64_t v30;
  re *v31;
  uint64_t v32;
  uint64_t v33;
  void (**v34)(re::IntrospectionPointer *__hidden);
  uint64_t v35;
  uint64_t v36;
  void (**v37)(re::IntrospectionPointer *__hidden);
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  char *v41;
  re *v42;
  char v43;
  NSObject *v44;
  _OWORD *v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _DWORD *v51;
  _DWORD **v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  re *v60;
  NSObject *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  re::IntrospectionBase *v66;
  re *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  const void *v71;
  void *v72;
  re *v73;
  NSObject *v74;
  uint32_t v75;
  NSObject *v76;
  uint64_t v78;
  re *v79;
  size_t v80;
  uint64_t v81;
  _BOOL4 v83;
  NSObject *v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t __dst;
  uint8_t v90[4];
  uint64_t v91;
  _BYTE buf[12];
  uint64_t v93;
  int v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  _QWORD *v99;
  __int128 __src;
  _OWORD *v101;
  re *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;

  v6 = a2;
  v7 = (uint64_t *)this;
  v105 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v8 = *((_DWORD *)v6 + 4);
    if (v8 != 13)
      break;
    v9 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(_QWORD *)v6 + 56))(v6, a3);
    (*(void (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, uint64_t))(*(_QWORD *)v6 + 64))(v6, a4, v9);
    if (!(_DWORD)v9)
      return 1;
    v10 = (const re::IntrospectionBase *)*((_QWORD *)v6 + 6);
    a3 = (char *)(*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(_QWORD *)v6 + 80))(v6, a3);
    this = (_anonymous_namespace_::DeepCopier *)(*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)v6 + 72))(v6, a4);
    a4 = (const re::IntrospectionBase **)this;
    v6 = v10;
  }
  switch(v8)
  {
    case 0:
    case 9:
      memcpy(a4, a3, *((int *)v6 + 5));
      return 1;
    case 1:
      v14 = *(const re::IntrospectionBase **)a3;
      re::PolymorphicData::makeWithPointer(*((_QWORD *)v6 + 6), v14, &__src);
      if (v101)
      {
        if (*a4)
        {
          re::PolymorphicData::makeWithPointer(*((_QWORD *)v6 + 6), *a4, buf);
          memmove(*(void **)buf, (const void *)__src, *(int *)(*((_QWORD *)&__src + 1) + 20));
        }
        return 1;
      }
      if (!v14)
      {
        if (*a4)
        {
          re::introspectionReleasePointer((uint64_t *)*a4, *v7, v7[2], *((_QWORD *)v6 + 6));
          *a4 = 0;
        }
        return 1;
      }
      v64 = *((_QWORD *)v6 + 6);
      v65 = re::introspect<char>();
      v66 = *a4;
      if (v64 == v65)
      {
        if (v66)
        {
          re::introspectionReleasePointer((uint64_t *)*a4, *v7, v7[2], *((_QWORD *)v6 + 6));
          *a4 = 0;
        }
        v79 = (re *)strlen((const char *)v14);
        v80 = (size_t)v79 + 1;
        v81 = v79 == (re *)-1;
        v83 = v81 << 63 >> 63 != v81 || v81 << 63 >> 63 == -1;
        if (v83)
        {
          v84 = *re::foundationSerializationLogObjects(v79);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_224FE9000, v84, OS_LOG_TYPE_ERROR, "DeepCopier; string length overflowed.",
              buf,
              2u);
          }
        }
        else
        {
          v88 = (void *)(*(uint64_t (**)(uint64_t, size_t, _QWORD))(*(_QWORD *)*v7 + 32))(*v7, v80, 0);
          memcpy(v88, v14, v80);
          *a4 = (const re::IntrospectionBase *)v88;
        }
        return !v83;
      }
      if (!v66)
        v66 = re::introspectionAllocPointer((re *)*v7, (_anonymous_namespace_ *)v7[2], *((re::Allocator **)v6 + 6));
      if ((v67 & 1) != 0)
      {
        *a4 = v66;
        return 1;
      }
      v85 = *re::foundationSerializationLogObjects(v67);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v85, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write pointer dereferenced target.",
          buf,
          2u);
      }
      re::introspectionReleasePointer((uint64_t *)v66, *v7, v7[2], *((_QWORD *)v6 + 6));
      return 0;
    case 2:
      v15 = (const re::IntrospectionBase *)*((_QWORD *)v6 + 6);
      v16 = *((int *)v6 + 16);
      v17 = (_anonymous_namespace_::DeepCopier *)v7;
      v18 = a3;
      v19 = (char *)a4;
    case 3:
      v20 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(_QWORD *)v6 + 88))(v6, a3);
      (*(void (**)(const re::IntrospectionBase *, uint64_t, uint64_t, const re::IntrospectionBase **, uint64_t))(*(_QWORD *)v6 + 72))(v6, *v7, v7[2], a4, v20);
      goto LABEL_21;
    case 4:
      v20 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(_QWORD *)v6 + 80))(v6, a3);
      (*(void (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, a4, *v7, v7[2], v20);
LABEL_21:
      if (!v20)
        return 1;
      v21 = (*(uint64_t (**)(const re::IntrospectionBase *, char *, _QWORD))(*(_QWORD *)v6 + 104))(v6, a3, 0);
      v22 = (*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, _QWORD))(*(_QWORD *)v6 + 96))(v6, a4, 0);
      v15 = (const re::IntrospectionBase *)*((_QWORD *)v6 + 6);
      v19 = (char *)v22;
      v17 = (_anonymous_namespace_::DeepCopier *)v7;
      v16 = v20;
      v18 = (char *)v21;
    case 5:
      v24 = (re *)(*(uint64_t (**)(const re::IntrospectionBase *, const re::IntrospectionBase **))(*(_QWORD *)v6 + 80))(v6, a4);
      if ((_DWORD)v24)
      {
        v25 = *re::foundationSerializationLogObjects(v24);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          return 0;
        LOWORD(__src) = 0;
        v26 = "DeepCopier; cannot read into existing data array.";
        p_src = (uint8_t *)&__src;
      }
      else
      {
        *(_QWORD *)&__src = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(_QWORD *)v6 + 88))(v6, a3);
        *((_QWORD *)&__src + 1) = v68;
        while (1)
        {
          v69 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(_QWORD *)v6 + 96))(v6, a3);
          if ((_QWORD)__src == v69 && WORD4(__src) == (unsigned __int16)v70 && WORD5(__src) == HIWORD(v70))
            return 1;
          v71 = (const void *)(*(uint64_t (**)(const re::IntrospectionBase *, __int128 *))(*(_QWORD *)v6 + 104))(v6, &__src);
          v72 = (void *)(*(uint64_t (**)(const re::IntrospectionBase *, uint64_t, uint64_t, const re::IntrospectionBase **))(*(_QWORD *)v6 + 72))(v6, *v7, v7[2], a4);
          if ((v73 & 1) == 0)
            break;
          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&__src);
        }
        v25 = *re::foundationSerializationLogObjects(v73);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          return 0;
        *(_WORD *)buf = 0;
        v26 = "DeepCopier; failed to write data array item.";
        p_src = buf;
      }
      v63 = v25;
      v75 = 2;
      goto LABEL_111;
    case 6:
      re::DynamicString::operator=((re::DynamicString *)a4, (re::DynamicString *)a3);
      return 1;
    case 7:
      *(_QWORD *)buf = a4;
      v28 = (*(uint64_t (**)(const re::IntrospectionBase *, char *))(*(_QWORD *)v6 + 80))(v6, a3);
      (*(void (**)(const re::IntrospectionBase *, const re::IntrospectionBase **, uint64_t))(*(_QWORD *)v6 + 72))(v6, a4, v28);
      v29 = (re *)operator new(0x20uLL);
      *(_QWORD *)v29 = &off_24ED88138;
      *((_QWORD *)v29 + 1) = v6;
      *((_QWORD *)v29 + 2) = v7;
      *((_QWORD *)v29 + 3) = buf;
      v102 = v29;
      v30 = (*(uint64_t (**)(const re::IntrospectionBase *, char *, __int128 *))(*(_QWORD *)v6 + 104))(v6, a3, &__src);
      v31 = v102;
      if (v102 == (re *)&__src)
      {
        v32 = 4;
        v31 = (re *)&__src;
      }
      else
      {
        if (!v102)
          goto LABEL_81;
        v32 = 5;
      }
      v31 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_81:
      if ((v30 & 1) == 0)
      {
        v74 = *re::foundationSerializationLogObjects(v31);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__src) = 0;
          _os_log_error_impl(&dword_224FE9000, v74, OS_LOG_TYPE_ERROR, "DeepCopier; failed to iterate over hash table keys.",
            (uint8_t *)&__src,
            2u);
        }
      }
      return v30;
    case 8:
      if (!*((_DWORD *)v6 + 14))
        return 1;
      v33 = 0;
      v34 = &off_24ED30800;
      break;
    case 10:
      re::StringID::operator=((unint64_t *)a4, (uint64_t *)a3);
      return 1;
    case 11:
      v60 = (re *)(*((uint64_t (**)(uint64_t, uint64_t, const re::IntrospectionBase *, char *, const re::IntrospectionBase **))v6
                   + 11))(*v7, v7[2], v6, a3, a4);
      if ((v60 & 1) != 0)
        return 1;
      v61 = *re::foundationSerializationLogObjects(v60);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        return 0;
      v62 = *((_QWORD *)v6 + 6);
      LODWORD(__src) = 136315138;
      *(_QWORD *)((char *)&__src + 4) = v62;
      v26 = "DeepCopier; failed to write type '%s' using serialization callback.";
      p_src = (uint8_t *)&__src;
      v63 = v61;
      goto LABEL_110;
    default:
      v11 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = v11;
        re::getPrettyTypeName(v6, (const re::IntrospectionBase *)&__src);
        v13 = (BYTE8(__src) & 1) != 0 ? v101 : (__int128 *)((char *)&__src + 9);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v13;
        _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "DeepCopier; unhandled type '%s'.", buf, 0xCu);

        if ((_QWORD)__src)
        {
          if ((BYTE8(__src) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)__src + 40))();
        }
      }
      return 0;
  }
  while (1)
  {
    v35 = *(_QWORD *)(*((_QWORD *)v6 + 8) + 8 * v33);
    if (*(_DWORD *)v35 == 1)
      break;
LABEL_60:
    if (++v33 >= (unint64_t)*((unsigned int *)v6 + 14))
      return 1;
  }
  switch(*(_DWORD *)(v35 + 40))
  {
    case 0:
    case 3:
      if ((this & 1) != 0)
        goto LABEL_60;
      v76 = *re::foundationSerializationLogObjects(this);
      if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        return 0;
      v78 = *(_QWORD *)(v35 + 8);
      LODWORD(__src) = 136315138;
      *(_QWORD *)((char *)&__src + 4) = v78;
      v26 = "DeepCopier; failed to write target for member '%s'.";
      goto LABEL_109;
    case 1:
      v36 = *(_QWORD *)(v35 + 48);
      if (!v36)
      {
        v76 = *re::foundationSerializationLogObjects(this);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          v86 = *(_QWORD *)(v35 + 8);
          LODWORD(__src) = 136315138;
          *(_QWORD *)((char *)&__src + 4) = v86;
          v26 = "DeepCopier; failed to get array length for member '%s'.";
          goto LABEL_109;
        }
        return 0;
      }
      v37 = v34;
      v38 = *(int *)(v35 + 64);
      __dst = 0;
      v39 = *(int *)(v36 + 20);
      memcpy(&__dst, &a3[v38], v39);
      v40 = __dst;
      *(_QWORD *)&__src = __dst;
      v41 = (char *)a4 + v38;
      v34 = v37;
      memcpy(v41, &__src, v39);
      re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&__src, *(const re::IntrospectionBase **)(*(_QWORD *)(v35 + 16) + 48), v40);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)buf, 0);
      v93 = 0x800000001;
      v94 = 8;
      v95 = 0;
      v96 = 0;
      v97 = 0xFFFFFFFFLL;
      *(_QWORD *)buf = v37;
      v98 = &__src;
      v99 = 0;
      v43 = (char)v42;
      if ((v42 & 1) == 0)
      {
        v44 = *re::foundationSerializationLogObjects(v42);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v59 = *(_QWORD *)(v35 + 8);
          *(_DWORD *)v90 = 136315138;
          v91 = v59;
          _os_log_error_impl(&dword_224FE9000, v44, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write array data for member '%s'.",
            v90,
            0xCu);
        }
      }
      *(_QWORD *)buf = v37;
      v98 = 0;
      v45 = v99;
      if (v99)
      {
        v46 = *v99;
        if (*v99)
        {
          if ((v99[1] & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v46 + 40))(*v99, v99[2]);
          *v45 = 0u;
          v45[1] = 0u;
        }
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v46 + 40))(v46, v45);
        v99 = 0;
      }
      *(_QWORD *)buf = &off_24ED426B8;
      objc_destructInstance(&buf[8]);
      *(_QWORD *)&__src = &off_24ED23640;
      v103 = 0;
      v47 = v104;
      if (v104)
      {
        v48 = *v104;
        if (*v104)
        {
          if ((v104[1] & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v48 + 40))(*v104, v104[2]);
          *v47 = 0u;
          v47[1] = 0u;
        }
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v48 + 40))(v48, v47);
        v104 = 0;
      }
      *(_QWORD *)&__src = &off_24ED426B8;
      this = (_anonymous_namespace_::DeepCopier *)objc_destructInstance((char *)&__src + 8);
      if ((v43 & 1) == 0)
        return 0;
      goto LABEL_60;
    case 2:
      v49 = *(_QWORD *)(*(_QWORD *)(v35 + 16) + 48);
      v50 = *(_QWORD **)(v49 + 64);
      v51 = (_DWORD *)*v50;
      if (*(_DWORD *)*v50 != 2)
      {
        v52 = (_DWORD **)(v50 + 1);
        v53 = *(unsigned int *)(v49 + 56) - 1;
        do
        {
          v54 = *v52++;
          v51 = v54;
          --v53;
        }
        while (*v54 != 2);
      }
      v55 = *(int *)(v35 + 36);
      v56 = *(char **)&a3[v55];
      v57 = *(_QWORD *)(v35 + 48);
      *(_QWORD *)&__src = &a3[*(int *)(v35 + 64)];
      *((_QWORD *)&__src + 1) = v57;
      v101 = (_OWORD *)*((_QWORD *)v51 + 1);
      if (v58)
      {
        this = (_anonymous_namespace_::DeepCopier *)memmove((char *)a4 + *(int *)(v35 + 64), (const void *)__src, *(int *)(*((_QWORD *)&__src + 1) + 20));
        goto LABEL_60;
      }
      v76 = *re::foundationSerializationLogObjects((re *)v58);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        v87 = *(_QWORD *)(v35 + 8);
        LODWORD(__src) = 136315138;
        *(_QWORD *)((char *)&__src + 4) = v87;
        v26 = "DeepCopier; failed to find polymorphic member '%s'.";
LABEL_109:
        p_src = (uint8_t *)&__src;
        v63 = v76;
LABEL_110:
        v75 = 12;
LABEL_111:
        _os_log_error_impl(&dword_224FE9000, v63, OS_LOG_TYPE_ERROR, v26, p_src, v75);
      }
      return 0;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "writeStructure", 353);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225C9E5A0);
  }
}

BOOL `anonymous namespace'::DeepCopier::writePolymorphicPointer(_anonymous_namespace_::DeepCopier *this, re::PolymorphicData *a2, char *a3, void **a4)
{
  uint64_t v5;
  uint64_t *v9;
  const void *v10;
  uint64_t v11;
  re *v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  NSObject *v16;
  _BOOL8 result;
  const char *v18;
  uint8_t *v19;
  char *v20;
  re::IntrospectionBase *v21;
  re *v22;
  NSObject *v23;
  uint8_t v24[16];
  _QWORD __dst[2];

  v5 = *((_QWORD *)a2 + 1);
  if (!v5 || !*((_QWORD *)a2 + 2))
  {
    v16 = *re::foundationSerializationLogObjects(this);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(__dst[0]) = 0;
    v18 = "DeepCopier; invalid polymorphic data.";
LABEL_15:
    v19 = (uint8_t *)__dst;
LABEL_16:
    _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v18, v19, 2u);
    return 0;
  }
  v9 = (uint64_t *)*a4;
  if (*a4)
  {
    re::introspectionReleasePointer(v9, *(_QWORD *)this, *((_QWORD *)this + 2), v5);
    *a4 = 0;
  }
  if (!a3)
    return 1;
  v10 = *(const void **)a2;
  if (!*(_QWORD *)a2)
  {
    v16 = *re::foundationSerializationLogObjects((re *)v9);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(__dst[0]) = 0;
    v18 = "DeepCopier; invalid polymorphic data type.";
    goto LABEL_15;
  }
  v11 = *((_QWORD *)a2 + 1);
  __dst[0] = 0;
  v12 = (re *)memcpy(__dst, v10, *(int *)(v11 + 20));
  v13 = (unsigned int *)*((_QWORD *)a2 + 2);
  v14 = *v13;
  if (!(_DWORD)v14)
  {
LABEL_11:
    v16 = *re::foundationSerializationLogObjects(v12);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)v24 = 0;
    v18 = "DeepCopier; failed to find polymorphic type.";
    v19 = v24;
    goto LABEL_16;
  }
  v15 = (int *)(*((_QWORD *)v13 + 1) + 32);
  while (*((_QWORD *)v15 - 1) != __dst[0])
  {
    v15 += 10;
    if (!--v14)
      goto LABEL_11;
  }
  v20 = &a3[*v15];
  v21 = re::introspectionAllocPointer(*(re **)this, *((_anonymous_namespace_ **)this + 2), *((re::Allocator **)v15 - 3));
  if ((v22 & 1) != 0)
  {
    *a4 = (char *)v21 - *v15;
    return 1;
  }
  v23 = *re::foundationSerializationLogObjects(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v24 = 0;
    _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write pointer dereferenced target.",
      v24,
      2u);
  }
  re::introspectionReleasePointer((uint64_t *)v21, *(_QWORD *)this, *((_QWORD *)this + 2), *((_QWORD *)v15 - 3));
  return 0;
}

uint64_t re::introspect<char>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const re::IntrospectionBase *v4;

  v1 = &unk_255825000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_255825000;
    if (v3)
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v4);
      v1 = (_QWORD *)&unk_255825000;
    }
  }
  return v1[174];
}

BOOL `anonymous namespace'::DeepCopier::writeLinearArray(_anonymous_namespace_::DeepCopier *this, const re::IntrospectionBase *a2, unint64_t a3, char *a4, char *a5)
{
  int v9;
  BOOL v10;
  _BOOL8 v11;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  _BYTE v21[23];
  uint8_t buf[4];
  _BYTE *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v9 = *((_DWORD *)a2 + 4);
  if (v9)
    v10 = v9 == 9;
  else
    v10 = 1;
  if (v10)
  {
    memcpy(a5, a4, *((int *)a2 + 5) * a3);
    return 1;
  }
  if (!a3)
    return 1;
  if ((_DWORD)v14)
  {
    v15 = 0;
    while (a3 - 1 != v15)
    {
      ++v15;
      if ((v14 & 1) == 0)
      {
        v11 = v15 >= a3;
        goto LABEL_16;
      }
    }
    return 1;
  }
  v11 = 0;
  LODWORD(v15) = 0;
LABEL_16:
  v16 = *re::foundationSerializationLogObjects((re *)v14);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = v16;
    re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v19);
    if ((v20 & 1) != 0)
      v18 = *(_BYTE **)&v21[7];
    else
      v18 = v21;
    *(_DWORD *)buf = 136315394;
    v23 = v18;
    v24 = 1024;
    v25 = v15;
    _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write %s[%d].", buf, 0x12u);

    if (v19 && (v20 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  }
  return v11;
}

void std::__function::__func<`anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1},std::allocator<`anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<`anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1},std::allocator<`anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED88138;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<`anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1},std::allocator<`anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED88138;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1},std::allocator<`anonymous namespace'::DeepCopier::writeHashTable(re::IntrospectionBase const&,void const*,void *)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(uint64_t a1, _QWORD *a2, char **a3)
{
  char *v4;
  _anonymous_namespace_::DeepCopier *v5;
  const re::IntrospectionBase **v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __int16 v11[8];

  v4 = *a3;
  v5 = *(_anonymous_namespace_::DeepCopier **)(a1 + 16);
  v6 = (const re::IntrospectionBase **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), *(_QWORD *)v5, *((_QWORD *)v5 + 2), **(_QWORD **)(a1 + 24), *a2);
  v8 = v7;
  if ((v7 & 1) == 0)
  {
    v9 = *re::foundationSerializationLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11[0] = 0;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "DeepCopier; failed to write hash table value.",
        (uint8_t *)v11,
        2u);
    }
  }
  return v8;
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unint64_t v4;
  BOOL v5;
  const char *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  const char *v10;

  v3 = a1;
  switch(*(_DWORD *)(a3 + 16))
  {
    case 0:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, (_BYTE *)a2, a3);
      break;
    case 1:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write((re::snapshot::Encoder *)a1, (const char **)a2, a3);
      break;
    case 2:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write((re::snapshot::Encoder *)a1, (char *)a2, a3);
      break;
    case 3:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (_QWORD *)a3);
      break;
    case 4:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (_QWORD *)a3);
      break;
    case 5:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (_QWORD *)a3);
      break;
    case 6:
      v4 = *(_QWORD *)(a2 + 8);
      v5 = (v4 & 1) == 0;
      if ((v4 & 1) != 0)
        v6 = *(const char **)(a2 + 16);
      else
        v6 = (const char *)(a2 + 9);
      v7 = v4 >> 1;
      v8 = v4 >> 1;
      if (v5)
        v9 = v8;
      else
        v9 = v7;
      goto LABEL_18;
    case 7:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (_QWORD *)a3);
      break;
    case 8:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write((re::snapshot::Encoder *)a1, a2, a3);
      break;
    case 9:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, (char *)a2, a3);
      break;
    case 0xA:
      v10 = *(const char **)(a2 + 8);
      v9 = strlen(v10);
      a1 = v3;
      v6 = v10;
LABEL_18:
      re::snapshot::EncoderRaw::serializeString(a1, v6, v9);
      break;
    case 0xB:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write((_anonymous_namespace_ *)a1, a2, a3);
      break;
    case 0xD:
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (_QWORD *)a3);
      break;
    default:
      return;
  }
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, _BYTE *a2, uint64_t a3)
{
  size_t v3;
  unsigned int *result;
  uint64_t __src;

  switch(*(_DWORD *)(a3 + 56))
  {
    case 1:
    case 2:
    case 6:
      LOBYTE(__src) = *a2;
      v3 = 1;
      goto LABEL_11;
    case 3:
    case 7:
      LOWORD(__src) = *(_WORD *)a2;
      v3 = 2;
      goto LABEL_11;
    case 4:
    case 8:
      LODWORD(__src) = *(_DWORD *)a2;
      goto LABEL_8;
    case 5:
    case 9:
      __src = *(_QWORD *)a2;
      goto LABEL_10;
    case 0xA:
      LODWORD(__src) = *(_DWORD *)a2;
LABEL_8:
      v3 = 4;
      goto LABEL_11;
    case 0xB:
      __src = *(_QWORD *)a2;
LABEL_10:
      v3 = 8;
LABEL_11:
      result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, v3);
      break;
    default:
      result = (unsigned int *)re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer: Unexpected basic type: %s", *(const char **)(a3 + 48));
      break;
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, char *a2, uint64_t a3)
{
  __int16 *p_src;
  size_t v4;
  unsigned int *result;
  char v6;
  __int16 v7;
  int v8;
  uint64_t __src;

  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      v6 = *a2;
      p_src = (__int16 *)&v6;
      v4 = 1;
      goto LABEL_7;
    case 2:
      v7 = *(_WORD *)a2;
      p_src = &v7;
      v4 = 2;
      goto LABEL_7;
    case 4:
      v8 = *(_DWORD *)a2;
      p_src = (__int16 *)&v8;
      v4 = 4;
      goto LABEL_7;
    case 8:
      __src = *(_QWORD *)a2;
      p_src = (__int16 *)&__src;
      v4 = 8;
LABEL_7:
      result = re::snapshot::Encoder::writeRaw<true>(a1, p_src, v4);
      break;
    default:
      result = (unsigned int *)re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer: Unexpected enum size %d", *(_DWORD *)(a3 + 20));
      break;
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(re::snapshot::Encoder *this, const char **a2, uint64_t a3)
{
  unsigned __int8 v6;
  const char *v7;
  uint64_t v8;
  unsigned int *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint8_t v20[16];
  void *__src;
  uint64_t v22;
  unsigned int *v23;
  uint64_t __dst;

  v6 = atomic_load((unsigned __int8 *)&qword_2541230C8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2541230C8))
  {
    _MergedGlobals_478 = re::introspect<char>();
    __cxa_guard_release(&qword_2541230C8);
  }
  v7 = *a2;
  v8 = *(_QWORD *)(a3 + 48);
  if (v8 == _MergedGlobals_478)
  {
    if (v7)
      v16 = strlen(v7);
    else
      v16 = 0;
    return re::snapshot::EncoderRaw::serializeString((unsigned int *)this, v7, v16);
  }
  else
  {
    if (!v7)
      return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &re::snapshot::EncoderRaw::beginPointer(void const*,unsigned long long)::tags, 1uLL);
    re::PolymorphicData::makeWithPointer(v8, (const re::IntrospectionBase *)v7, &__src);
    v9 = v23;
    if (!v23 || !__src || !v22)
      goto LABEL_22;
    __dst = 0;
    v10 = (re *)memcpy(&__dst, __src, *(int *)(v22 + 20));
    v11 = *v9;
    if ((_DWORD)v11)
    {
      v12 = __dst;
      v13 = (_QWORD *)(*((_QWORD *)v9 + 1) + 24);
      while (*v13 != __dst)
      {
        v13 += 5;
        if (!--v11)
          goto LABEL_11;
      }
      v8 = *(v13 - 2);
      if (__dst)
      {
        v17 = *((unsigned int *)this + 2);
        if (v17 + 9 > (unint64_t)*((unsigned int *)this + 3))
        {
          v19 = __dst;
          if (!re::snapshot::Encoder::grow(this, v17 + 9))
            return (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(this, v7, v8);
          v17 = *((unsigned int *)this + 2);
          v12 = v19;
        }
        *(_BYTE *)(*(_QWORD *)this + v17) = 2;
        v18 = *((_DWORD *)this + 2) + 1;
        *((_DWORD *)this + 2) = v18;
        *(_QWORD *)(*(_QWORD *)this + v18) = v12;
        *((_DWORD *)this + 2) += 8;
        return (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(this, v7, v8);
      }
LABEL_22:
      re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &unk_22619C570, 1uLL);
      return (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(this, v7, v8);
    }
LABEL_11:
    v14 = *re::foundationSerializationLogObjects(v10);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Snapshot writer: failed to find polymorphic type.", v20, 2u);
    }
    return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &re::snapshot::EncoderRaw::beginPointer(void const*,unsigned long long)::tags, 1uLL);
  }
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *result;
  uint64_t v7;
  char __src;

  __src = (*(uint64_t (**)(_QWORD *))(*a3 + 56))(a3);
  result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 1uLL);
  if (__src)
  {
    v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
    return (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v7, a3[6]);
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int *result;
  void *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t __src;

  v6 = a3[6];
  v7 = (*(uint64_t (**)(_QWORD *))(*a3 + 88))(a3);
  v8 = v7;
  v9 = *(_DWORD *)(v6 + 16);
  if (v9)
    v10 = v9 == 9;
  else
    v10 = 1;
  if (v10 || *(_BYTE *)(v6 + 28))
  {
    __src = v7 * *(int *)(v6 + 20);
    result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
    if (v8)
    {
      v12 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 104))(a3, a2, 0);
      return re::snapshot::Encoder::writeRaw<true>(a1, v12, v8 * *(int *)(v6 + 20));
    }
  }
  else
  {
    __src = v7;
    result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
    if (v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 104))(a3, a2, i);
        result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v14, v6);
      }
    }
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int *result;
  void *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t __src;

  v6 = a3[6];
  v7 = (*(uint64_t (**)(_QWORD *))(*a3 + 80))(a3);
  v8 = v7;
  v9 = *(_DWORD *)(v6 + 16);
  if (v9)
    v10 = v9 == 9;
  else
    v10 = 1;
  if (v10 || *(_BYTE *)(v6 + 28))
  {
    __src = v7 * *(int *)(v6 + 20);
    result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
    if (v8)
    {
      v12 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 104))(a3, a2, 0);
      return re::snapshot::Encoder::writeRaw<true>(a1, v12, v8 * *(int *)(v6 + 20));
    }
  }
  else
  {
    __src = v7;
    result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
    if (v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 104))(a3, a2, i);
        result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v14, v6);
      }
    }
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(re::snapshot::Encoder *this, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  unsigned int *result;
  int v10;
  uint64_t __src;

  v6 = *(_QWORD *)(a3 + 48);
  v7 = *(_DWORD *)(v6 + 16);
  if (v7)
    v8 = v7 == 9;
  else
    v8 = 1;
  if (v8 || *(_BYTE *)(v6 + 28))
  {
    __src = *(int *)(v6 + 20) * (uint64_t)*(int *)(a3 + 64);
    re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &__src, 8uLL);
    return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, a2, *(int *)(v6 + 20) * (uint64_t)*(int *)(a3 + 64));
  }
  else
  {
    __src = *(int *)(a3 + 64);
    result = re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, &__src, 8uLL);
    if (*(int *)(a3 + 64) >= 1)
    {
      v10 = 0;
      do
      {
        result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(this, a2, v6);
        a2 += *(int *)(v6 + 20);
        ++v10;
      }
      while (v10 < *(_DWORD *)(a3 + 64));
    }
  }
  return result;
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a3[6];
  v11 = (*(int (**)(_QWORD *))(*a3 + 80))(a3);
  re::snapshot::Encoder::writeRaw<true>(a1, &v11, 8uLL);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 88))(a3, a2);
  v12 = v7;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 96))(a3, a2);
    if (v11 == result && (unsigned __int16)v12 == (unsigned __int16)v9 && WORD1(v12) == HIWORD(v9))
      break;
    v10 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a3 + 104))(a3, &v11);
    re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v10, v6);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
  }
  return result;
}

_QWORD *re::snapshot::Writer<re::snapshot::EncoderRaw>::write(unsigned int *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD __src[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(_QWORD *))(*a3 + 80))(a3);
  v7 = a3[6];
  v8 = a3[8];
  __src[0] = v6;
  re::snapshot::Encoder::writeRaw<true>(a1, __src, 8uLL);
  v9 = operator new(0x20uLL);
  *v9 = &off_24ED88180;
  v9[1] = a1;
  v9[2] = v7;
  v9[3] = v8;
  v13 = v9;
  (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*a3 + 104))(a3, a2, __src);
  result = v13;
  if (v13 == __src)
  {
    v11 = 4;
    result = __src;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderRaw>::write(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  const char *v7;
  size_t v8;
  uint64_t result;
  uint64_t *v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t **))(a3 + 72))(*((_QWORD *)a1 + 9), a3, a2, &v10) & 1) == 0)
  {
    if ((v11 & 1) != 0)
    {
      v11 = 1;
      v6 = v12;
    }
    else
    {
      LOBYTE(v11) = v11 & 1;
      v6 = (char *)&v11 + 1;
    }
    *v6 = 0;
  }
  if ((v11 & 1) != 0)
    v7 = v12;
  else
    v7 = (char *)&v11 + 1;
  if ((v11 & 1) != 0)
    v8 = v11 >> 1;
  else
    v8 = v11 >> 1;
  re::snapshot::EncoderRaw::serializeString((unsigned int *)a1, v7, v8);
  result = (uint64_t)v10;
  if (v10)
  {
    if ((v11 & 1) != 0)
      return (*(uint64_t (**)(void))(*v10 + 40))();
  }
  return result;
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::write(re::snapshot::Encoder *this, uint64_t a2, uint64_t a3)
{
  re::snapshot::Encoder *v5;
  unint64_t i;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t *v17;
  unsigned int *v18;
  size_t v19;
  uint64_t __dst;
  uint8_t buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a3 + 56))
  {
    v5 = this;
    for (i = 0; i < *(unsigned int *)(a3 + 56); ++i)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8 * i);
      if (*(_DWORD *)v7 == 1)
      {
        switch(*(_DWORD *)(v7 + 40))
        {
          case 0:
          case 3:
            this = (re::snapshot::Encoder *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(v5, a2 + *(int *)(v7 + 36), *(_QWORD *)(v7 + 16));
            break;
          case 1:
            v8 = *(uint8_t **)(a2 + *(int *)(v7 + 36));
            v9 = *(_QWORD *)(v7 + 16);
            if (v8)
            {
              v10 = *(_QWORD *)(v7 + 48);
              if (!v10)
              {
                re::snapshot::Encoder::error(v5, "Snapshot writer failed to get array length for member '%s' in %s.", *(const char **)(v7 + 8), *(const char **)(a3 + 48));
                *(_QWORD *)buf = 0;
                re::snapshot::Encoder::writeRaw<true>((unsigned int *)v5, buf, 8uLL);
                return;
              }
              v11 = (const void *)(a2 + *(int *)(v7 + 64));
              __dst = 0;
              memcpy(&__dst, v11, *(int *)(v10 + 20));
              v12 = *(_QWORD *)(v9 + 48);
              v13 = __dst;
              if (*(_DWORD *)(v12 + 16))
              {
                *(_QWORD *)buf = __dst;
                this = (re::snapshot::Encoder *)re::snapshot::Encoder::writeRaw<true>((unsigned int *)v5, buf, 8uLL);
                if (v13)
                {
                  v14 = *(_QWORD *)(v9 + 48);
                  do
                  {
                    this = (re::snapshot::Encoder *)re::snapshot::Writer<re::snapshot::EncoderRaw>::write(v5, v8, v14);
                    v14 = *(_QWORD *)(v9 + 48);
                    v8 += *(int *)(v14 + 20);
                    --v13;
                  }
                  while (v13);
                }
                break;
              }
              *(_QWORD *)buf = __dst * *(int *)(v12 + 20);
              re::snapshot::Encoder::writeRaw<true>((unsigned int *)v5, buf, 8uLL);
              v19 = v13 * *(int *)(*(_QWORD *)(v9 + 48) + 20);
              v18 = (unsigned int *)v5;
              v17 = v8;
            }
            else
            {
              *(_QWORD *)buf = 0;
              v17 = buf;
              v18 = (unsigned int *)v5;
              v19 = 8;
            }
            this = (re::snapshot::Encoder *)re::snapshot::Encoder::writeRaw<true>(v18, v17, v19);
            break;
          case 2:
            v15 = *re::foundationSerializationLogObjects(this);
            this = (re::snapshot::Encoder *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)this)
            {
              v16 = *(_QWORD *)(a3 + 48);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v16;
              _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Snapshot writer: polymorphic inline types currently unhandled (type = %s)", buf, 0xCu);
            }
            break;
          default:
            break;
        }
      }
    }
  }
}

uint64_t re::snapshot::Encoder::error(re::snapshot::Encoder *this, const char *__format, ...)
{
  re::DynamicString *v3;
  unint64_t v4;
  unint64_t v5;
  va_list va;

  va_start(va, __format);
  v3 = (re::snapshot::Encoder *)((char *)this + 32);
  v4 = *((_QWORD *)this + 5);
  if ((v4 & 1) != 0)
    v5 = v4 >> 1;
  else
    v5 = v4 >> 1;
  if (v5)
    re::DynamicString::append((re::snapshot::Encoder *)((char *)this + 32), "\n", 1uLL);
  return re::DynamicString::vappendf(v3, __format, va);
}

unsigned int *re::snapshot::EncoderRaw::serializeString(unsigned int *this, const char *__src, size_t __len)
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v5 = this;
  v6 = this[2];
  v7 = __len + v6 + 8;
  if (v7 > this[3])
  {
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v7);
    if (!(_DWORD)this)
      return this;
    v6 = v5[2];
  }
  *(_QWORD *)(*(_QWORD *)v5 + v6) = __len;
  v8 = v5[2] + 8;
  v5[2] = v8;
  if (__len)
  {
    this = (unsigned int *)memmove((void *)(*(_QWORD *)v5 + v8), __src, __len);
    v8 = v5[2];
  }
  v5[2] = v8 + __len;
  return this;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unint64_t v4;
  BOOL v5;
  const char *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  const char *v10;

  v3 = result;
  switch(*(_DWORD *)(a3 + 16))
  {
    case 0:
      result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, (float *)a2, a3);
      break;
    case 1:
      result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, (const char **)a2, a3);
      break;
    case 2:
      result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((re::snapshot::EncoderOPACK *)result, (char *)a2, a3);
      break;
    case 3:
      result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((uint64_t)result, a2, (_QWORD *)a3);
      break;
    case 4:
      result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((uint64_t)result, a2, (_QWORD *)a3);
      break;
    case 5:
      result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, a2, (_QWORD *)a3);
      break;
    case 6:
      v4 = *(_QWORD *)(a2 + 8);
      v5 = (v4 & 1) == 0;
      if ((v4 & 1) != 0)
        v6 = *(const char **)(a2 + 16);
      else
        v6 = (const char *)(a2 + 9);
      v7 = v4 >> 1;
      v8 = v4 >> 1;
      if (v5)
        v9 = v8;
      else
        v9 = v7;
      goto LABEL_18;
    case 7:
      result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, a2, (_QWORD *)a3);
      break;
    case 8:
      result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, a2, a3);
      break;
    case 9:
      result = re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(result, (uint64_t *)a2, a3);
      break;
    case 0xA:
      v10 = *(const char **)(a2 + 8);
      v9 = strlen(v10);
      result = v3;
      v6 = v10;
LABEL_18:
      result = re::snapshot::EncoderOPACK::serializeString(result, v6, v9);
      break;
    case 0xB:
      result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((_anonymous_namespace_ *)result, a2, a3);
      break;
    case 0xD:
      result = (unsigned int *)re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((re::snapshot::EncoderOPACK *)result, a2, (_QWORD *)a3);
      break;
    default:
      return result;
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, float *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *result;
  int v5;
  float v6;

  switch(*(_DWORD *)(a3 + 56))
  {
    case 1:
      return re::snapshot::EncoderOPACK::operator<<(a1, *(unsigned __int8 *)a2);
    case 2:
      return re::snapshot::EncoderOPACK::writeInteger(a1, *(char *)a2);
    case 3:
      v5 = *(__int16 *)a2;
      return re::snapshot::EncoderOPACK::writeInteger(a1, v5);
    case 4:
      v6 = *a2;
      goto LABEL_11;
    case 5:
    case 9:
      v3 = *(_QWORD *)a2;
      goto LABEL_13;
    case 6:
      v5 = *(unsigned __int8 *)a2;
      return re::snapshot::EncoderOPACK::writeInteger(a1, v5);
    case 7:
      LODWORD(v6) = *(unsigned __int16 *)a2;
LABEL_11:
      result = re::snapshot::EncoderOPACK::writeInteger(a1, SLODWORD(v6));
      break;
    case 8:
      v3 = *(unsigned int *)a2;
LABEL_13:
      result = re::snapshot::EncoderOPACK::writeInteger(a1, v3);
      break;
    case 0xA:
      result = re::snapshot::EncoderOPACK::operator<<(a1, *a2);
      break;
    case 0xB:
      result = re::snapshot::EncoderOPACK::operator<<(a1, *(double *)a2);
      break;
    default:
      result = (unsigned int *)re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer: Unexpected basic type: %s", *(const char **)(a3 + 48));
      break;
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int *result;
  uint64_t v4;

  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      result = re::snapshot::EncoderOPACK::writeInteger(a1, *(unsigned __int8 *)a2);
      break;
    case 2:
      result = re::snapshot::EncoderOPACK::writeInteger(a1, *(unsigned __int16 *)a2);
      break;
    case 4:
      v4 = *(unsigned int *)a2;
      goto LABEL_7;
    case 8:
      v4 = *a2;
LABEL_7:
      result = re::snapshot::EncoderOPACK::writeInteger(a1, v4);
      break;
    default:
      result = (unsigned int *)re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer: Unexpected enum size %d", *(_DWORD *)(a3 + 20));
      break;
  }
  return result;
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, const char **a2, uint64_t a3)
{
  unsigned __int8 v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  re *v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t result;
  size_t v16;
  uint8_t v17[16];
  void *__src;
  uint64_t v19;
  unsigned int *v20;
  uint64_t __dst;

  v6 = atomic_load((unsigned __int8 *)&qword_2541230D8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2541230D8))
  {
    qword_2541230D0 = re::introspect<char>();
    __cxa_guard_release(&qword_2541230D8);
  }
  v7 = *a2;
  v8 = *(_QWORD *)(a3 + 48);
  if (v8 == qword_2541230D0)
  {
    if (v7)
      v16 = strlen(v7);
    else
      v16 = 0;
    return (uint64_t)re::snapshot::EncoderOPACK::serializeString(a1, v7, v16);
  }
  else
  {
    if (v7)
    {
      re::PolymorphicData::makeWithPointer(v8, (const re::IntrospectionBase *)v7, &__src);
      v9 = 0;
      v10 = v20;
      if (v20 && __src && v19)
      {
        __dst = 0;
        v11 = (re *)memcpy(&__dst, __src, *(int *)(v19 + 20));
        v12 = *v10;
        if (!(_DWORD)v12)
        {
LABEL_11:
          v14 = *re::foundationSerializationLogObjects(v11);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v17 = 0;
            _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Snapshot writer: failed to find polymorphic type.", v17, 2u);
          }
          return re::snapshot::EncoderOPACK::beginPointer((re::snapshot::EncoderOPACK *)a1, 0, 0);
        }
        v9 = __dst;
        v13 = (_QWORD *)(*((_QWORD *)v10 + 1) + 24);
        while (*v13 != __dst)
        {
          v13 += 5;
          if (!--v12)
            goto LABEL_11;
        }
        v8 = *(v13 - 2);
      }
    }
    else
    {
      v9 = 0;
    }
    result = re::snapshot::EncoderOPACK::beginPointer((re::snapshot::EncoderOPACK *)a1, v7, v9);
    if ((_DWORD)result)
      return re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v7, v8);
  }
  return result;
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(re::snapshot::EncoderOPACK *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;

  v6 = (*(uint64_t (**)(_QWORD *))(*a3 + 56))(a3);
  v7 = v6;
  result = re::snapshot::EncoderOPACK::beginOptional(a1, v6);
  if (v7)
  {
    v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
    return re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v9, a3[6]);
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(re::snapshot::EncoderOPACK *this, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  BOOL v11;
  int v12;
  int i;

  v6 = *(_QWORD *)(a3 + 48);
  v7 = *(_DWORD *)(v6 + 16);
  if (v7)
    v8 = v7 == 9;
  else
    v8 = 1;
  if (v8
    || (*(_BYTE *)(v6 + 28) ? (v11 = *(_BYTE *)(v6 + 29) == 0) : (v11 = 1), !v11 && (*((_BYTE *)this + 64) & 4) != 0))
  {
    v9 = *(int *)(v6 + 20) * (uint64_t)*(int *)(a3 + 64);
    re::snapshot::EncoderOPACK::beginData((unsigned int *)this, v9, v9);
    return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, a2, *(int *)(v6 + 20) * (uint64_t)*(int *)(a3 + 64));
  }
  else
  {
    re::snapshot::EncoderOPACK::beginArray((unsigned int *)this, *(int *)(a3 + 64));
    v12 = *(_DWORD *)(a3 + 64);
    if (v12 >= 1)
    {
      for (i = 0; i < v12; ++i)
      {
        re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(this, a2, v6);
        a2 += *(int *)(v6 + 20);
        v12 = *(_DWORD *)(a3 + 64);
      }
    }
    return re::snapshot::EncoderOPACK::endArray((unsigned int *)this, v12);
  }
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  unsigned int *result;
  void *v12;
  BOOL v13;
  uint64_t i;
  uint64_t v15;

  v6 = a3[6];
  v7 = (*(uint64_t (**)(_QWORD *))(*a3 + 88))(a3);
  v8 = v7;
  v9 = *(_DWORD *)(v6 + 16);
  if (v9)
    v10 = v9 == 9;
  else
    v10 = 1;
  if (v10
    || (*(_BYTE *)(v6 + 28) ? (v13 = *(_BYTE *)(v6 + 29) == 0) : (v13 = 1), !v13 && (*(_BYTE *)(a1 + 64) & 4) != 0))
  {
    result = re::snapshot::EncoderOPACK::beginData((unsigned int *)a1, v7 * *(int *)(v6 + 20), v7 * *(int *)(v6 + 20));
    if (v8)
    {
      v12 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 104))(a3, a2, 0);
      return re::snapshot::Encoder::writeRaw<true>((unsigned int *)a1, v12, v8 * *(int *)(v6 + 20));
    }
  }
  else
  {
    re::snapshot::EncoderOPACK::beginArray((unsigned int *)a1, v7);
    if (v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v15 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 104))(a3, a2, i);
        re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v15, v6);
      }
    }
    return re::snapshot::EncoderOPACK::endArray((unsigned int *)a1, v8);
  }
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  unsigned int *result;
  void *v12;
  BOOL v13;
  uint64_t i;
  uint64_t v15;

  v6 = a3[6];
  v7 = (*(uint64_t (**)(_QWORD *))(*a3 + 80))(a3);
  v8 = v7;
  v9 = *(_DWORD *)(v6 + 16);
  if (v9)
    v10 = v9 == 9;
  else
    v10 = 1;
  if (v10
    || (*(_BYTE *)(v6 + 28) ? (v13 = *(_BYTE *)(v6 + 29) == 0) : (v13 = 1), !v13 && (*(_BYTE *)(a1 + 64) & 4) != 0))
  {
    result = re::snapshot::EncoderOPACK::beginData((unsigned int *)a1, v7 * *(int *)(v6 + 20), v7 * *(int *)(v6 + 20));
    if (v8)
    {
      v12 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 104))(a3, a2, 0);
      return re::snapshot::Encoder::writeRaw<true>((unsigned int *)a1, v12, v8 * *(int *)(v6 + 20));
    }
  }
  else
  {
    re::snapshot::EncoderOPACK::beginArray((unsigned int *)a1, v7);
    if (v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v15 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 104))(a3, a2, i);
        re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v15, v6);
      }
    }
    return re::snapshot::EncoderOPACK::endArray((unsigned int *)a1, v8);
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v6 = a3[6];
  v7 = (*(int (**)(_QWORD *))(*a3 + 80))(a3);
  re::snapshot::EncoderOPACK::beginArray(a1, v7);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 88))(a3, a2);
  v14 = v8;
  while (1)
  {
    v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 96))(a3, a2);
    if (v13 == v9 && (unsigned __int16)v14 == (unsigned __int16)v10 && WORD1(v14) == HIWORD(v10))
      break;
    v11 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a3 + 104))(a3, &v13);
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v11, v6);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
  }
  return re::snapshot::EncoderOPACK::endArray(a1, v7);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(_QWORD *))(*a3 + 80))(a3);
  v7 = a3[6];
  v8 = a3[8];
  re::snapshot::EncoderOPACK::beginDictionary(a1, v6);
  v9 = operator new(0x20uLL);
  *v9 = &off_24ED881C8;
  v9[1] = a1;
  v9[2] = v7;
  v9[3] = v8;
  v14 = v9;
  (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*a3 + 104))(a3, a2, v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return re::snapshot::EncoderOPACK::endArray(a1, v6);
}

uint64_t re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  const char *v7;
  size_t v8;
  uint64_t result;
  uint64_t *v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t **))(a3 + 72))(*((_QWORD *)a1 + 9), a3, a2, &v10) & 1) == 0)
  {
    if ((v11 & 1) != 0)
    {
      v11 = 1;
      v6 = v12;
    }
    else
    {
      LOBYTE(v11) = v11 & 1;
      v6 = (char *)&v11 + 1;
    }
    *v6 = 0;
  }
  if ((v11 & 1) != 0)
    v7 = v12;
  else
    v7 = (char *)&v11 + 1;
  if ((v11 & 1) != 0)
    v8 = v11 >> 1;
  else
    v8 = v11 >> 1;
  re::snapshot::EncoderOPACK::serializeString((unsigned int *)a1, v7, v8);
  result = (uint64_t)v10;
  if (v10)
  {
    if ((v11 & 1) != 0)
      return (*(uint64_t (**)(void))(*v10 + 40))();
  }
  return result;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  _BYTE __dst[24];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  re::snapshot::EncoderOPACK::beginObject(a1);
  if (!*(_DWORD *)(a3 + 56))
    return re::snapshot::EncoderOPACK::endObject(a1);
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8 * v6);
    if (*(_DWORD *)v7 == 1)
      break;
LABEL_6:
    if (++v6 >= (unint64_t)*(unsigned int *)(a3 + 56))
      return re::snapshot::EncoderOPACK::endObject(a1);
  }
  v8 = re::snapshot::EncoderOPACK::writeInteger(a1, *(_DWORD *)(v7 + 32));
  switch(*(_DWORD *)(v7 + 40))
  {
    case 0:
    case 3:
      re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, a2 + *(int *)(v7 + 36), *(_QWORD *)(v7 + 16));
      goto LABEL_6;
    case 1:
      v9 = *(char **)(a2 + *(int *)(v7 + 36));
      v10 = *(_QWORD *)(v7 + 16);
      if (!v9)
      {
        if (*(_DWORD *)(*(_QWORD *)(v10 + 48) + 16))
          re::snapshot::EncoderOPACK::beginArray(a1, 0);
        else
          re::snapshot::EncoderOPACK::beginData(a1, 0, 0);
        goto LABEL_6;
      }
      v11 = *(_QWORD *)(v7 + 48);
      if (v11)
      {
        v12 = (const void *)(a2 + *(int *)(v7 + 64));
        *(_QWORD *)__dst = 0;
        memcpy(__dst, v12, *(int *)(v11 + 20));
        v13 = *(_QWORD *)(v10 + 48);
        v14 = *(_QWORD *)__dst;
        if (*(_DWORD *)(v13 + 16))
        {
          re::snapshot::EncoderOPACK::beginArray(a1, *(unint64_t *)__dst);
          if (v14)
          {
            v15 = *(_QWORD *)(v10 + 48);
            v16 = v14;
            do
            {
              re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(a1, v9, v15);
              v15 = *(_QWORD *)(v10 + 48);
              v9 += *(int *)(v15 + 20);
              --v16;
            }
            while (v16);
          }
          re::snapshot::EncoderOPACK::endArray(a1, v14);
        }
        else
        {
          re::snapshot::EncoderOPACK::beginData(a1, *(_QWORD *)__dst * *(int *)(v13 + 20), *(_QWORD *)__dst * *(int *)(v13 + 20));
          re::snapshot::Encoder::writeRaw<true>(a1, v9, v14 * *(int *)(*(_QWORD *)(v10 + 48) + 20));
        }
        goto LABEL_6;
      }
      re::snapshot::Encoder::error((re::snapshot::Encoder *)a1, "Snapshot writer failed to get array length for member '%s' in %s.", *(const char **)(v7 + 8), *(const char **)(a3 + 48));
      return re::snapshot::EncoderOPACK::beginArray(a1, 0);
    case 2:
      v17 = *re::foundationSerializationLogObjects((re *)v8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(_QWORD *)(a3 + 48);
        *(_DWORD *)__dst = 136315138;
        *(_QWORD *)&__dst[4] = v18;
        _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Snapshot writer: polymorphic inline types currently unhandled (type = %s)", __dst, 0xCu);
      }
      goto LABEL_6;
    default:
      goto LABEL_6;
  }
}

unsigned int *re::snapshot::EncoderOPACK::operator<<(unsigned int *this, int a2)
{
  unsigned int *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = this;
  if (a2)
    v3 = 1;
  else
    v3 = 2;
  v4 = this[2];
  if (v4 < this[3])
    goto LABEL_5;
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 1);
  if ((_DWORD)this)
  {
    LODWORD(v4) = v2[2];
LABEL_5:
    v5 = *(_QWORD *)v2;
    v2[2] = v4 + 1;
    *(_BYTE *)(v5 + v4) = v3;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::operator<<(unsigned int *this, float a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this;
  v4 = this[2];
  if (v4 + 5 <= (unint64_t)this[3])
    goto LABEL_2;
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 5);
  if ((_DWORD)this)
  {
    v4 = v3[2];
LABEL_2:
    v5 = *(_QWORD *)v3;
    v3[2] = v4 + 1;
    *(_BYTE *)(v5 + v4) = 53;
    *(float *)(*(_QWORD *)v3 + v3[2]) = a2;
    v3[2] += 4;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::operator<<(unsigned int *this, double a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this;
  v4 = this[2];
  if (v4 + 9 <= (unint64_t)this[3])
    goto LABEL_2;
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 9);
  if ((_DWORD)this)
  {
    v4 = v3[2];
LABEL_2:
    v5 = *(_QWORD *)v3;
    v3[2] = v4 + 1;
    *(_BYTE *)(v5 + v4) = 54;
    *(double *)(*(_QWORD *)v3 + v3[2]) = a2;
    v3[2] += 8;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::beginArray(unsigned int *this, unint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  if (a2 >= 0xF)
  {
    v4 = this[2];
    if (v4 >= this[3])
    {
      if (!re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 1))
        return re::snapshot::EncoderOPACK::writeInteger(v3, a2);
      LODWORD(v4) = v3[2];
    }
    v5 = *(_QWORD *)v3;
    v3[2] = v4 + 1;
    *(_BYTE *)(v5 + v4) = -33;
    return re::snapshot::EncoderOPACK::writeInteger(v3, a2);
  }
  v6 = this[2];
  if (v6 < this[3])
    goto LABEL_6;
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v6 + 1);
  if ((_DWORD)this)
  {
    LODWORD(v6) = v3[2];
LABEL_6:
    v7 = *(_QWORD *)v3;
    v3[2] = v6 + 1;
    *(_BYTE *)(v7 + v6) = a2 - 48;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::endArray(unsigned int *this, unint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 >= 0xF)
  {
    v2 = this;
    v3 = this[2];
    if (v3 < this[3])
    {
LABEL_3:
      v4 = *(_QWORD *)v2;
      v2[2] = v3 + 1;
      *(_BYTE *)(v4 + v3) = 3;
      return this;
    }
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v3 + 1);
    if ((_DWORD)this)
    {
      LODWORD(v3) = v2[2];
      goto LABEL_3;
    }
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::beginDictionary(unsigned int *this, unint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  _DWORD *v4;
  char v5;
  uint64_t v6;
  char v7;

  v2 = this;
  if (a2 < 0xF)
  {
    v5 = a2 - 32;
    v3 = this[2];
    v4 = this + 2;
    if (v3 < this[3])
      goto LABEL_5;
    v7 = a2 - 32;
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v3 + 1);
    if ((_DWORD)this)
    {
LABEL_9:
      LODWORD(v3) = *v4;
      v5 = v7;
      goto LABEL_5;
    }
  }
  else
  {
    v3 = this[2];
    v4 = this + 2;
    if (v3 < this[3])
    {
      v5 = -17;
LABEL_5:
      v6 = *(_QWORD *)v2;
      v2[2] = v3 + 1;
      *(_BYTE *)(v6 + v3) = v5;
      return this;
    }
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v3 + 1);
    if ((this & 1) != 0)
    {
      v7 = -17;
      goto LABEL_9;
    }
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::serializeString(unsigned int *this, const char *__src, size_t __len)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = this;
  v6 = this[2];
  if (__len > 0x20)
  {
    if (__len > 0xFF)
    {
      v12 = this[3];
      v13 = v6 + __len;
      if (__len >> 16)
      {
        v15 = v13 + 5;
        if (v13 + 5 > v12)
        {
          this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v15);
          if (!(_DWORD)this)
            return this;
        }
        if (HIDWORD(__len))
        {
          re::internal::assertLog((re::internal *)5, v15, "assertion failure: '%s' (%s:line %i) len %zu exceeds uint32_t capacity", "!overflow", "serializeString", 92, __len);
          this = (unsigned int *)_os_crash();
          __break(1u);
          return this;
        }
        v16 = *(_QWORD *)v5;
        v17 = v5[2];
        v5[2] = v17 + 1;
        *(_BYTE *)(v16 + v17) = 99;
        *(_DWORD *)(*(_QWORD *)v5 + v5[2]) = __len;
        v11 = v5[2] + 4;
      }
      else
      {
        if (v13 + 3 > v12)
        {
          this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v13 + 3);
          if (!(_DWORD)this)
            return this;
          v6 = v5[2];
        }
        v14 = *(_QWORD *)v5;
        v5[2] = v6 + 1;
        *(_BYTE *)(v14 + v6) = 98;
        *(_WORD *)(*(_QWORD *)v5 + v5[2]) = __len;
        v11 = v5[2] + 2;
      }
    }
    else
    {
      v9 = v6 + __len + 2;
      if (v9 > this[3])
      {
        this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v9);
        if (!(_DWORD)this)
          return this;
        v6 = v5[2];
      }
      v10 = *(_QWORD *)v5;
      v5[2] = v6 + 1;
      *(_BYTE *)(v10 + v6) = 97;
      *(_BYTE *)(*(_QWORD *)v5 + v5[2]) = __len;
      v11 = v5[2] + 1;
    }
    v5[2] = v11;
    v8 = (void *)(*(_QWORD *)v5 + v11);
    goto LABEL_15;
  }
  if (v6 + __len < this[3])
  {
LABEL_3:
    v7 = *(_QWORD *)v5;
    v5[2] = v6 + 1;
    *(_BYTE *)(v7 + v6) = __len + 64;
    if (!__len)
    {
LABEL_16:
      v5[2] += __len;
      return this;
    }
    v8 = (void *)(*(_QWORD *)v5 + v5[2]);
LABEL_15:
    this = (unsigned int *)memmove(v8, __src, __len);
    goto LABEL_16;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v6 + __len + 1);
  if ((_DWORD)this)
  {
    v6 = v5[2];
    goto LABEL_3;
  }
  return this;
}

BOOL re::snapshot::EncoderOPACK::beginPointer(re::snapshot::EncoderOPACK *this, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    if (a3)
    {
      re::snapshot::EncoderOPACK::beginDictionary((unsigned int *)this, 1uLL);
      re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, a3);
    }
  }
  else
  {
    v6 = *((unsigned int *)this + 2);
    if (v6 >= *((_DWORD *)this + 3))
    {
      if (!re::snapshot::Encoder::grow(this, v6 + 1))
        return a2 != 0;
      LODWORD(v6) = *((_DWORD *)this + 2);
    }
    v7 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v6 + 1;
    *(_BYTE *)(v7 + v6) = 4;
  }
  return a2 != 0;
}

uint64_t re::snapshot::EncoderOPACK::beginOptional(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 1) == 0)
  {
    v4 = *((unsigned int *)this + 2);
    if (v4 >= *((_DWORD *)this + 3))
    {
      if (!re::snapshot::Encoder::grow(this, v4 + 1))
        return a2;
      LODWORD(v4) = *((_DWORD *)this + 2);
    }
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 4;
  }
  return a2;
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::read(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 16))
  {
    case 0:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read(a1, a2, a3);
      break;
    case 1:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, (const char **)a2, a3);
      break;
    case 2:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::Decoder *)a1, a2, a3);
      break;
    case 3:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    case 4:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    case 5:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    case 6:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, a2);
      break;
    case 7:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::Decoder *)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    case 8:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 9:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read(a1, a2, a3);
      break;
    case 0xA:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, (uint64_t *)a2);
      break;
    case 0xB:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((_anonymous_namespace_ *)a1, (uint64_t)a2, a3);
      break;
    case 0xD:
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read((re::snapshot::DecoderRaw *)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    default:
      return;
  }
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderRaw>::read(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t *result;

  switch(*(_DWORD *)(a3 + 56))
  {
    case 1:
      result = re::snapshot::DecoderRaw::operator>><BOOL>(a1, a2);
      break;
    case 2:
    case 6:
      result = re::snapshot::DecoderRaw::operator>><signed char>(a1, a2);
      break;
    case 3:
      result = re::snapshot::DecoderRaw::operator>><short>(a1, a2);
      break;
    case 4:
    case 8:
      result = re::snapshot::DecoderRaw::operator>><unsigned int>(a1, a2);
      break;
    case 5:
      result = re::snapshot::DecoderRaw::operator>><long long>(a1, a2);
      break;
    case 7:
      result = re::snapshot::DecoderRaw::operator>><unsigned short>(a1, a2);
      break;
    case 9:
      result = re::snapshot::DecoderRaw::operator>><unsigned long long>(a1, a2);
      break;
    case 0xA:
      result = re::snapshot::DecoderRaw::operator>><float>(a1, a2);
      break;
    case 0xB:
      result = re::snapshot::DecoderRaw::operator>><double>(a1, a2);
      break;
    default:
      result = re::snapshot::Decoder::error((const char **)a1, "unexpected basic type: %s", *(const char **)(a3 + 48));
      break;
  }
  return result;
}

{
  uint64_t *result;

  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      result = re::snapshot::DecoderRaw::operator>><signed char>(a1, a2);
      break;
    case 2:
      result = re::snapshot::DecoderRaw::operator>><unsigned short>(a1, a2);
      break;
    case 4:
      result = re::snapshot::DecoderRaw::operator>><unsigned int>(a1, a2);
      break;
    case 8:
      result = re::snapshot::DecoderRaw::operator>><unsigned long long>(a1, a2);
      break;
    default:
      result = re::snapshot::Decoder::error((const char **)a1, "unexpected enum size %d", *(_DWORD *)(a3 + 20));
      break;
  }
  return result;
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *this, const char **a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD **v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  _BYTE *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *__src;
  uint64_t v27;
  uint64_t v28;
  uint64_t __dst;

  v6 = atomic_load((unsigned __int8 *)&qword_2541230E8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2541230E8))
  {
    qword_2541230E0 = re::introspect<char>();
    __cxa_guard_release(&qword_2541230E8);
  }
  v7 = *(_QWORD *)(a3 + 48);
  if (v7 == qword_2541230E0)
  {
    __src = 0;
    if (!re::snapshot::DecoderRaw::beginString(this, (unint64_t *)&__src))
      return;
    v19 = (char *)*a2;
    v20 = __src;
    if (*a2)
    {
      if (__src && (void *)strlen(*a2) == __src)
        goto LABEL_26;
      (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v19);
      *a2 = 0;
    }
    if (!v20)
      return;
    v19 = (char *)(*(uint64_t (**)(_QWORD, _BYTE *, _QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v20 + 1, 0);
    *a2 = v19;
    if (!v19)
    {
      re::snapshot::Decoder::error((const char **)this, "C String of %zu bytes");
      return;
    }
LABEL_26:
    re::snapshot::Decoder::readRaw(this, v19, (size_t)v20);
    v20[(_QWORD)*a2] = 0;
    return;
  }
  v8 = (char *)*((_QWORD *)this + 2);
  v9 = (char *)*((_QWORD *)this + 3);
  if (v9 == v8)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining");
  }
  else
  {
    v10 = *v8;
    *((_QWORD *)this + 2) = v8 + 1;
    if (v10 != 1)
    {
      if (v10 != 2)
        return;
      v11 = v9 - (v8 + 1);
      if (v11 <= 7)
      {
        re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v11);
      }
      else
      {
        v12 = *(_QWORD *)(v8 + 1);
        *((_QWORD *)this + 2) = v8 + 9;
        if (*(_DWORD *)(v7 + 16) == 8 && v12 != 0)
        {
          v14 = *(unsigned int *)(v7 + 56);
          if ((_DWORD)v14)
          {
            v15 = *(_DWORD ***)(v7 + 64);
            v16 = v15;
            v17 = *(unsigned int *)(v7 + 56);
            do
            {
              v18 = (_DWORD *)*v16;
              if (*(_DWORD *)*v16 == 2)
                goto LABEL_16;
              ++v16;
              --v17;
            }
            while (v17);
            v18 = 0;
LABEL_16:
            while (**v15 != 3)
            {
              ++v15;
              if (!--v14)
                goto LABEL_30;
            }
            if (v18)
            {
              if (*a2)
              {
                re::PolymorphicData::makeWithPointer(v7, (const re::IntrospectionBase *)*a2, &__src);
                if (!v28 || !__src || !v27 || (__dst = 0, memcpy(&__dst, __src, *(int *)(v27 + 20)), v12 != __dst))
                {
                  re::introspectionReleasePointer((uint64_t *)*a2, *((_QWORD *)this + 6), *((_QWORD *)this + 5), v7);
                  *a2 = 0;
                }
              }
              v22 = *(_QWORD *)(*((_QWORD *)v18 + 1) + 8);
              if (*(_QWORD *)(v22 + 24) == v12)
              {
                v23 = 0;
              }
              else
              {
                v23 = 0;
                v24 = (uint64_t *)(v22 + 64);
                do
                {
                  ++v23;
                  v25 = *v24;
                  v24 += 5;
                }
                while (v25 != v12);
              }
              v7 = *(_QWORD *)(v22 + 40 * v23 + 8);
            }
          }
        }
      }
    }
LABEL_30:
    v21 = *a2;
    if (*a2
      || (v21 = (const char *)re::introspectionAllocPointer(*((re **)this + 6), *((_anonymous_namespace_ **)this + 5), (re::Allocator *)v7), (*a2 = v21) != 0))
    {
      re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this, v21, v7);
    }
    else
    {
      re::snapshot::Decoder::error((const char **)this, "allocation failure: %d bytes");
    }
  }
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL4 v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  uint64_t v8;

  v6 = re::snapshot::DecoderRaw::beginOptional(a1);
  v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 64);
  if (!v6)
    return v7(a3, a2, 0);
  v7(a3, a2, 1);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 72))(a3, a2);
  return re::snapshot::Reader<re::snapshot::DecoderRaw>::read(a1, v8, a3[6]);
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *a1, uint64_t *a2)
{
  _BOOL8 v4;
  size_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  _QWORD v15[2];

  v14 = 0;
  v4 = re::snapshot::DecoderRaw::beginString(a1, &v14);
  if (v4)
  {
    v5 = v14;
    v6 = (const char *)*((_QWORD *)a1 + 2);
    v7 = *((_QWORD *)a1 + 3) - (_QWORD)v6;
    if (v7 >= v14)
      v7 = v14;
    *((_QWORD *)a1 + 2) = &v6[v7];
    v12 = 0;
    v13 = &str_110;
    v8 = v12;
    v9 = (uint64_t)v13;
    v12 = 0;
    v13 = &str_110;
    v10 = *a2;
    v11 = a2[1];
    *a2 = v8;
    a2[1] = v9;
    v15[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
    v15[1] = v11;
    re::StringID::destroyString((re::StringID *)v15);
    re::StringID::destroyString((re::StringID *)&v12);
  }
}

BOOL re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *a1, _QWORD *a2)
{
  _BOOL8 result;
  size_t v5;
  void *v6;
  unint64_t v7;

  v7 = 0;
  result = re::snapshot::DecoderRaw::beginString(a1, &v7);
  if (result)
  {
    v5 = v7;
    re::DynamicString::resize(a2, v7, 0);
    if ((a2[1] & 1) != 0)
      v6 = (void *)a2[2];
    else
      v6 = (char *)a2 + 9;
    return re::snapshot::Decoder::readRaw(a1, v6, v5);
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::Decoder *this, char *__dst, uint64_t a3)
{
  char *v4;
  uint64_t v6;
  size_t *v7;
  unint64_t v8;
  size_t v9;
  int v10;
  uint64_t result;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;

  v4 = __dst;
  v6 = *(_QWORD *)(a3 + 48);
  v15 = 0;
  if (*(_BYTE *)(v6 + 28))
  {
    v7 = (size_t *)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3) - (_QWORD)v7;
    if (v8 > 7)
    {
      v9 = *v7;
      *((_QWORD *)this + 2) = v7 + 1;
      v10 = *(_DWORD *)(v6 + 20);
      if (v9 % v10)
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "C Array element size mismatch: expected multiple of %d, got %zu");
      if (v9 / v10 == *(_DWORD *)(a3 + 64))
        return re::snapshot::Decoder::readRaw(this, __dst, v9);
      return (uint64_t)re::snapshot::Decoder::error((const char **)this, "C Array size mismatch: expected %d, got %zu");
    }
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v8);
  }
  result = re::snapshot::DecoderRaw::beginArray(this, &v15);
  if ((_DWORD)result)
  {
    v12 = v15;
    if (v15 == *(_DWORD *)(a3 + 64))
    {
      v13 = 0;
      if (v15)
      {
        v14 = v15;
        do
        {
          if (v13 < *(_DWORD *)(a3 + 64))
          {
            result = re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this, v4, v6);
            v4 += *(int *)(v6 + 20);
            ++v13;
          }
          --v14;
        }
        while (v14);
      }
      if (v12 != v13)
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "size mismatch: expected %zu, got %d");
    }
    else
    {
      return (uint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected C Array size: expected %d, got %zu");
    }
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(uint64_t this, uint64_t a2, _QWORD *a3)
{
  re::snapshot::Decoder *v5;
  uint64_t v6;
  size_t *v7;
  unint64_t v8;
  _QWORD *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;

  v5 = (re::snapshot::Decoder *)this;
  v6 = a3[6];
  if (*(_BYTE *)(v6 + 28))
  {
    v7 = *(size_t **)(this + 16);
    v8 = *(_QWORD *)(this + 24) - (_QWORD)v7;
    if (v8 > 7)
    {
      v11 = *v7;
      v9 = v7 + 1;
      v10 = v11;
      *(_QWORD *)(this + 16) = v9;
      if (v11 % *(int *)(v6 + 20))
      {
        *(_QWORD *)(this + 16) = (char *)v9 + v10;
      }
      else
      {
        this = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*a3 + 72))(a3, *(_QWORD *)(this + 48), *(_QWORD *)(this + 40), a2);
        if (v10)
        {
          v17 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 96))(a3, a2, 0);
          return re::snapshot::Decoder::readRaw(v5, v17, v10);
        }
      }
      return this;
    }
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v8);
  }
  v18 = 0;
  this = re::snapshot::DecoderRaw::beginArray(v5, &v18);
  if ((_DWORD)this)
  {
    v12 = v18;
    this = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, unint64_t))(*a3 + 72))(a3, *((_QWORD *)v5 + 6), *((_QWORD *)v5 + 5), a2, v18);
    v13 = 0;
    if (v12)
    {
      v14 = v12;
      do
      {
        if (v12 > v13)
        {
          v15 = v13++;
          v16 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 96))(a3, a2, v15);
          this = re::snapshot::Reader<re::snapshot::DecoderRaw>::read(v5, v16, v6);
        }
        --v14;
      }
      while (v14);
    }
    if (v12 != v13)
      return (uint64_t)re::snapshot::Decoder::error((const char **)v5, "count mismatch: expected %zu, got %d", v12, v13);
  }
  return this;
}

unint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::DecoderRaw *this, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  size_t *v7;
  unint64_t v8;
  size_t v9;
  unint64_t result;
  unint64_t v11;
  size_t v12;
  char v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;

  v6 = a3[6];
  if (*(_BYTE *)(v6 + 28))
  {
    v7 = (size_t *)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3) - (_QWORD)v7;
    if (v8 > 7)
    {
      v9 = *v7;
      *((_QWORD *)this + 2) = v7 + 1;
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 88))(a3, a2);
      if ((result & 1) == 0)
        result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, size_t))(*a3 + 64))(a3, a2, *((_QWORD *)this + 6), *((_QWORD *)this + 5), v9 / *(int *)(v6 + 20));
      v11 = *(int *)(v6 + 20);
      v12 = v9 / v11;
      if (v9 % v11)
      {
        *((_QWORD *)this + 2) += v9;
      }
      else
      {
        result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
        if (v12 == result)
        {
          if (v9)
          {
            v19 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 96))(a3, a2, 0);
            return re::snapshot::Decoder::readRaw(this, v19, v9);
          }
        }
        else
        {
          (*(void (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
          return (unint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected data size reading FixedArray: expected %zu, got %zu");
        }
      }
      return result;
    }
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v8);
  }
  v20 = 0;
  result = re::snapshot::DecoderRaw::beginArray(this, &v20);
  if ((_DWORD)result)
  {
    v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 88))(a3, a2);
    v14 = v20;
    if ((v13 & 1) == 0)
      (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, unint64_t))(*a3 + 64))(a3, a2, *((_QWORD *)this + 6), *((_QWORD *)this + 5), v20);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
    if (result == v14)
    {
      v15 = 0;
      if (v14)
      {
        v16 = v14;
        do
        {
          result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
          if (result > v15)
          {
            v17 = v15++;
            v18 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 96))(a3, a2, v17);
            result = re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this, v18, v6);
          }
          --v16;
        }
        while (v16);
      }
      if (v14 != v15)
        return (unint64_t)re::snapshot::Decoder::error((const char **)this, "count mismatch: expected %zu, got %d");
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
      return (unint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected FixedArray size: expected %zu, got %zu");
    }
  }
  return result;
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderRaw>::read(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *result;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;

  if ((*(unsigned int (**)(_QWORD *))(*a3 + 80))(a3))
    return re::snapshot::Decoder::error((const char **)a1, "cannot read into existing DataArray");
  v7 = a3[6];
  v10 = 0;
  result = (uint64_t *)re::snapshot::DecoderRaw::beginArray((re::snapshot::DecoderRaw *)a1, &v10);
  if ((_DWORD)result)
  {
    for (i = v10; i; result = (uint64_t *)re::snapshot::Reader<re::snapshot::DecoderRaw>::read(a1, v9, v7))
    {
      --i;
      v9 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*a3 + 72))(a3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), a2);
    }
  }
  return result;
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderRaw>::read(re::snapshot::Decoder *this, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *result;
  uint64_t v13;
  re::Allocator *v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  re *v20;
  re::IntrospectionBase *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *__ptr;
  size_t __space[2];

  __space[1] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  if ((unint64_t)(v7 - (_QWORD)v6) <= 7)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v7 - (_QWORD)v6);
    v9 = 0;
    v8 = (_QWORD *)*((_QWORD *)this + 2);
    v7 = *((_QWORD *)this + 3);
  }
  else
  {
    v10 = *v6;
    v8 = v6 + 1;
    v9 = v10;
    *((_QWORD *)this + 2) = v8;
  }
  v11 = v7 - (_QWORD)v8;
  if (v11 < 2 * v9)
    return re::snapshot::Decoder::error((const char **)this, "overrun in beginDictionary: size is %zu, but only %zu bytes remaining", v9, v11);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 88))(a3, a2);
  if (v9 != -1)
    v13 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 72))(a3, a2, v9);
  v14 = (re::Allocator *)a3[6];
  v15 = a3[8];
  v16 = *((int *)v14 + 6);
  v17 = *((_DWORD *)v14 + 5) + (int)v16 - 1;
  __space[0] = v17;
  MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v24 - v18;
  bzero((char *)&v24 - v18, v17);
  __ptr = v19;
  result = (uint64_t *)std::align(v16, v17, &__ptr, __space);
  for (__ptr = result; v9; result = (uint64_t *)(*(uint64_t (**)(_QWORD *, void *))(*a3 + 112))(a3, __ptr))
  {
    --v9;
    v20 = (re *)*((_QWORD *)this + 6);
    v21 = (re::IntrospectionBase *)__ptr;
    re::introspectionCallConstructor(*((_anonymous_namespace_ **)this + 5), (uint64_t)v14, (uint64_t)__ptr);
    re::introspectionInitElement(v20, v22, v14, v21);
    re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this, __ptr, v14);
    v23 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, void *))(*a3 + 96))(a3, *((_QWORD *)this + 6), *((_QWORD *)this + 5), a2, __ptr);
    re::snapshot::Reader<re::snapshot::DecoderRaw>::read(this, v23, v15);
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderRaw>::read(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  char *v7;
  char *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  v14 = 0;
  if (re::snapshot::DecoderRaw::beginString(a1, &v14))
  {
    v6 = v14;
    re::DynamicString::resize(&v10, v14, 0);
    if ((v11 & 1) != 0)
      v7 = v12;
    else
      v7 = (char *)&v11 + 1;
    re::snapshot::Decoder::readRaw(a1, v7, v6);
  }
  if ((v11 & 1) != 0)
    v8 = v12;
  else
    v8 = (char *)&v11 + 1;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *))(a3 + 80))(*((_QWORD *)a1 + 6), *((_QWORD *)a1 + 5), a3, a2, v8);
  result = (uint64_t)v10;
  if (v10)
  {
    if ((v11 & 1) != 0)
      return (*(uint64_t (**)(void))(*v10 + 40))();
  }
  return result;
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::read(uint64_t this, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  NSObject *v16;
  uint64_t v17;
  size_t *v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 *v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  re *v40;
  re *v41;
  re::IntrospectionBase *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t __dst;
  unint64_t v55;
  _QWORD v56[3];
  re::snapshot::Decoder *v57;
  __int128 buf;
  uint64_t v59;
  __int128 *p_buf;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a3 + 56);
  if (!(_DWORD)v3)
    return;
  v4 = a3;
  v6 = this;
  v7 = 0;
  while (1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8 * v7);
    if (*(_DWORD *)v8 == 1)
      break;
LABEL_68:
    if (++v7 >= v3)
      return;
  }
  switch(*(_DWORD *)(v8 + 40))
  {
    case 0:
    case 3:
      this = re::snapshot::Reader<re::snapshot::DecoderRaw>::read(v6, a2 + *(int *)(v8 + 36), *(_QWORD *)(v8 + 16));
      goto LABEL_67;
    case 1:
      v9 = *(int *)(v8 + 36);
      v10 = *(_QWORD *)(v8 + 16);
      __dst = 0;
      v55 = 0;
      if (*(_QWORD *)(a2 + v9))
      {
        v11 = *(_QWORD *)(v8 + 48);
        if (v11)
          memcpy(&__dst, (const void *)(a2 + *(int *)(v8 + 64)), *(int *)(v11 + 20));
      }
      if (*(_DWORD *)(*(_QWORD *)(v10 + 48) + 16))
      {
        this = re::snapshot::DecoderRaw::beginArray((re::snapshot::DecoderRaw *)v6, &v55);
        if ((_DWORD)this)
        {
          v52 = v8;
          v53 = v4;
          v12 = v55;
          if (*(_QWORD *)(a2 + v9))
          {
            v13 = __dst;
            v14 = v6;
            if (__dst != v55)
            {
              v57 = 0;
              switch(*(_DWORD *)(*(_QWORD *)(v10 + 48) + 16))
              {
                case 3:
                  v15 = &off_24ED88330;
                  goto LABEL_39;
                case 4:
                  v15 = &off_24ED88378;
                  goto LABEL_39;
                case 5:
                  v15 = &off_24ED883C0;
                  goto LABEL_39;
                case 6:
                  v26 = &off_24ED882A0;
                  goto LABEL_37;
                case 7:
                  v15 = &off_24ED88408;
                  goto LABEL_39;
                case 8:
                  *(_QWORD *)&buf = &off_24ED88210;
                  *((_QWORD *)&buf + 1) = v6;
                  v59 = v10;
                  goto LABEL_40;
                case 0xA:
                  v26 = &off_24ED882E8;
LABEL_37:
                  *(_QWORD *)&buf = v26;
                  goto LABEL_40;
                case 0xD:
                  v15 = &off_24ED88258;
LABEL_39:
                  *(_QWORD *)&buf = v15;
                  *((_QWORD *)&buf + 1) = v10;
LABEL_40:
                  p_buf = &buf;
                  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](&buf, v56);
                  v27 = p_buf;
                  if (p_buf == &buf)
                  {
                    v27 = &buf;
                    v28 = 4;
                  }
                  else
                  {
                    if (!p_buf)
                      goto LABEL_45;
                    v28 = 5;
                  }
                  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_45:
                  if (v57 && v13)
                  {
                    for (i = 0; i != v13; ++i)
                    {
                      *(_QWORD *)&buf = *(_QWORD *)(a2 + v9) + *(int *)(*(_QWORD *)(v10 + 48) + 20) * (uint64_t)(int)i;
                      if (!v57)
                        std::__throw_bad_function_call[abi:nn180100]();
                      (*(void (**)(re::snapshot::Decoder *, __int128 *))(*(_QWORD *)v57 + 48))(v57, &buf);
                    }
                  }
LABEL_50:
                  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 48) + 40))(*(_QWORD *)(v6 + 48), *(_QWORD *)(a2 + v9));
                  *(_QWORD *)(a2 + v9) = 0;
                  this = (uint64_t)v57;
                  if (v57 == (re::snapshot::Decoder *)v56)
                  {
                    this = (uint64_t)v56;
                    v30 = 4;
                  }
                  else
                  {
                    if (!v57)
                      goto LABEL_55;
                    v30 = 5;
                  }
                  this = (*(uint64_t (**)(void))(*(_QWORD *)this + 8 * v30))();
                  if (!*(_QWORD *)(a2 + v9))
                    goto LABEL_55;
                  break;
                default:
                  goto LABEL_50;
              }
            }
          }
          else
          {
            v14 = v6;
LABEL_55:
            if (v12)
            {
              v31 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v14 + 48) + 32))(*(_QWORD *)(v14 + 48), v12 * *(int *)(*(_QWORD *)(v10 + 48) + 20), 0);
              *(_QWORD *)(a2 + v9) = v31;
              if (!v31)
              {
                re::snapshot::Decoder::error((const char **)v14, "allocation failure, array with size: %zu %d byte elements");
                return;
              }
              for (j = 0; j != v12; ++j)
              {
                v33 = *(_QWORD *)(a2 + v9);
                v34 = *(int **)(v10 + 48);
                v35 = v9;
                v36 = a2;
                v37 = v33 + v34[5] * (uint64_t)(int)j;
                v38 = v10;
                v39 = v12;
                v40 = *(re **)(v14 + 48);
                re::introspectionCallConstructor(*(_anonymous_namespace_ **)(v14 + 40), (uint64_t)v34, v37);
                v41 = v40;
                v12 = v39;
                v10 = v38;
                v42 = (re::IntrospectionBase *)v37;
                a2 = v36;
                v9 = v35;
                this = (uint64_t)re::introspectionInitElement(v41, v43, (re::Allocator *)v34, v42);
              }
            }
          }
          *(_QWORD *)&buf = v12;
          if (*(_DWORD *)(v52 + 40) == 1)
          {
            v44 = *(_QWORD *)(v52 + 48);
            if (v44)
              this = (uint64_t)memcpy((void *)(a2 + *(int *)(v52 + 64)), &buf, *(int *)(v44 + 20));
          }
          v45 = *(_QWORD *)(a2 + v9);
          v46 = v12 - 1;
          v55 = v12 - 1;
          v4 = v53;
          v6 = v14;
          if (v12)
          {
            v47 = 0;
            do
            {
              if (v47 < v12)
              {
                this = re::snapshot::Reader<re::snapshot::DecoderRaw>::read(v6, v45, *(_QWORD *)(v10 + 48));
                v45 += *(int *)(*(_QWORD *)(v10 + 48) + 20);
                v46 = v55;
              }
              v48 = v46--;
              v55 = v46;
              ++v47;
            }
            while (v48);
          }
        }
        goto LABEL_67;
      }
      v18 = *(size_t **)(v6 + 16);
      v19 = *(_QWORD *)(v6 + 24) - (_QWORD)v18;
      if (v19 <= 7)
      {
        this = (uint64_t)re::snapshot::Decoder::error((const char **)v6, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v19);
LABEL_67:
        *(_DWORD *)(v6 + 32) = 0;
        v3 = *(unsigned int *)(v4 + 56);
        goto LABEL_68;
      }
      v20 = v9;
      v21 = *v18;
      *(_QWORD *)(v6 + 16) = v18 + 1;
      v22 = *(_DWORD *)(*(_QWORD *)(v10 + 48) + 20);
      v23 = v21 / v22;
      if (v21 % v22)
      {
        v50 = v21;
        v51 = *(unsigned int *)(*(_QWORD *)(v10 + 48) + 20);
        v49 = "invalid array data, data size = %zu, element size = %u";
        goto LABEL_73;
      }
      v24 = *(void **)(a2 + v20);
      if (v24 && v23 != __dst)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 48) + 40))(*(_QWORD *)(v6 + 48));
        v24 = 0;
        *(_QWORD *)(a2 + v20) = 0;
      }
      if (!v21
        || v24
        || (v24 = (void *)(*(uint64_t (**)(_QWORD, size_t, _QWORD))(**(_QWORD **)(v6 + 48) + 32))(*(_QWORD *)(v6 + 48), v21, 0), (*(_QWORD *)(a2 + v20) = v24) != 0))
      {
        *(_QWORD *)&buf = v23;
        if (*(_DWORD *)(v8 + 40) == 1)
        {
          v25 = *(_QWORD *)(v8 + 48);
          if (v25)
          {
            memcpy((void *)(a2 + *(int *)(v8 + 64)), &buf, *(int *)(v25 + 20));
            v24 = *(void **)(a2 + v20);
          }
        }
        this = re::snapshot::Decoder::readRaw((re::snapshot::Decoder *)v6, v24, v21);
        goto LABEL_67;
      }
      v50 = v21;
      v49 = "allocation failure, array with size: %zu bytes";
LABEL_73:
      re::snapshot::Decoder::error((const char **)v6, v49, v50, v51);
      return;
    case 2:
      v16 = *re::foundationSerializationLogObjects((re *)this);
      this = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)this)
      {
        v17 = *(_QWORD *)(v4 + 48);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEFAULT, "Snapshot reader: polymorphic inline types currently unhandled (type = %s)", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_67;
    default:
      goto LABEL_67;
  }
}

uint64_t *re::snapshot::DecoderRaw::operator>><signed char>(uint64_t *result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = (_BYTE *)result[2];
  if ((_BYTE *)result[3] == v2)
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
  *a2 = *v2;
  ++result[2];
  return result;
}

uint64_t *re::snapshot::DecoderRaw::operator>><short>(uint64_t *result, _WORD *a2)
{
  _WORD *v2;
  unint64_t v3;

  v2 = (_WORD *)result[2];
  v3 = result[3] - (_QWORD)v2;
  if (v3 <= 1)
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 2uLL, v3);
  *a2 = *v2;
  result[2] += 2;
  return result;
}

uint64_t *re::snapshot::DecoderRaw::operator>><long long>(uint64_t *result, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = (_QWORD *)result[2];
  v3 = result[3] - (_QWORD)v2;
  if (v3 <= 7)
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v3);
  *a2 = *v2;
  result[2] += 8;
  return result;
}

uint64_t *re::snapshot::Decoder::error(const char **this, const char *a2, ...)
{
  re *v4;
  NSObject *v5;
  uint64_t *result;
  const char *v7;
  int v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  char *v19;
  uint64_t v20;
  va_list va;

  va_start(va, a2);
  v20 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  v4 = (re *)re::DynamicString::vassignf((re::DynamicString *)&v10, a2, va);
  v5 = *re::foundationSerializationLogObjects(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v7 = this[7];
    if (!v7)
      v7 = "<unknown>";
    v8 = *((_DWORD *)this + 8);
    if ((v11 & 1) != 0)
      v9 = v12;
    else
      v9 = (char *)&v11 + 1;
    *(_DWORD *)buf = 136315650;
    v15 = v7;
    v16 = 1024;
    v17 = v8;
    v18 = 2080;
    v19 = v9;
    _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Snapshot reader (%s:%d): %s", buf, 0x1Cu);
  }
  this[2] = this[3];
  *((_BYTE *)this + 36) = 1;
  result = v10;
  if (v10)
  {
    if ((v11 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v10 + 40))();
  }
  return result;
}

BOOL re::snapshot::DecoderRaw::beginArray(re::snapshot::DecoderRaw *this, unint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = (unint64_t *)*((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  if (v5 <= 7)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v5);
    v6 = *a2;
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = *v4;
    *a2 = *v4;
    v7 = *((_QWORD *)this + 2) + 8;
    *((_QWORD *)this + 2) = v7;
  }
  v8 = *((_QWORD *)this + 3) - v7;
  if (v8 < v6)
    re::snapshot::Decoder::error((const char **)this, "overrun in beginArray: size is %zu, but only %zu bytes remaining", v6, v8);
  return v8 >= v6;
}

BOOL re::snapshot::DecoderRaw::beginString(re::snapshot::DecoderRaw *this, unint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = (unint64_t *)*((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  if (v5 <= 7)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v5);
    v6 = *a2;
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = *v4;
    *a2 = *v4;
    v7 = *((_QWORD *)this + 2) + 8;
    *((_QWORD *)this + 2) = v7;
  }
  v8 = *((_QWORD *)this + 3) - v7;
  if (v8 < v6)
    re::snapshot::Decoder::error((const char **)this, "overrun in beginString: size is %zu, but only %zu bytes remaining", v6, v8);
  return v8 >= v6;
}

BOOL re::snapshot::DecoderRaw::beginOptional(re::snapshot::DecoderRaw *this)
{
  unsigned __int8 *v1;
  int v2;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if (*((unsigned __int8 **)this + 3) == v1)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
    return 0;
  }
  else
  {
    v2 = *v1;
    *((_QWORD *)this + 2) = v1 + 1;
    return v2 != 0;
  }
}

BOOL re::snapshot::Reader<re::snapshot::DecoderRaw>::apply(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;

  re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t *)a1, a2, a3);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != *(_QWORD *)(a1 + 24))
    re::snapshot::Decoder::error((const char **)a1, "failed to consume input: %zu vs %zu", v4 - *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v5 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
    re::snapshot::Decoder::logInput((re::snapshot::Decoder *)a1);
  return v5 == 0;
}

void re::snapshot::Decoder::logInput(re::snapshot::Decoder *this)
{
  NSObject *v2;
  _anonymous_namespace_ *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  re *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  NSObject *v17;
  uint8_t *v18;
  uint8_t v19[4];
  uint8_t *v20;
  uint8_t buf[16];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *re::foundationSerializationLogObjects(this);
  v3 = (_anonymous_namespace_ *)os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 1);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_224FE9000, v2, OS_LOG_TYPE_INFO, "Snapshot reader data is %zu bytes", buf, 0xCu);
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v5 >= 0x100)
        v7 = 256;
      else
        v7 = v5;
      *(_OWORD *)buf = 0u;
      v22 = 0u;
      re::DynamicString::setCapacity(buf, 0);
      v8 = (re *)re::DynamicString::resize(buf, 3 * v7, 0);
      if (v7)
      {
        v10 = 0;
        v11 = v6;
        do
        {
          v12 = *((_QWORD *)this + 1);
          if (v12 <= v11)
          {
            re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v12);
            _os_crash();
            __break(1u);
LABEL_23:
            re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v15);
            _os_crash();
            __break(1u);
          }
          v13 = re::snapshot::Decoder::logInput(void)const::chars[(unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + v11) >> 4];
          *(_BYTE *)re::DynamicString::operator[]((uint64_t)buf, v10) = v13;
          v15 = *((_QWORD *)this + 1);
          if (v15 <= v11)
            goto LABEL_23;
          v16 = re::snapshot::Decoder::logInput(void)const::chars[*(_BYTE *)(*(_QWORD *)this + v11) & 0xF];
          *(_BYTE *)re::DynamicString::operator[]((uint64_t)buf, v10 + 1) = v16;
          v8 = (re *)re::DynamicString::operator[]((uint64_t)buf, v10 + 2);
          *(_BYTE *)v8 = 32;
          v10 += 3;
          ++v11;
        }
        while (3 * v7 != v10);
      }
      v17 = *re::foundationSerializationLogObjects(v8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v18 = &buf[9];
        if ((buf[8] & 1) != 0)
          v18 = (uint8_t *)v22;
        *(_DWORD *)v19 = 136315138;
        v20 = v18;
        _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_INFO, "Snapshot reader data = %s", v19, 0xCu);
      }
      v3 = *(_anonymous_namespace_ **)buf;
      if (*(_QWORD *)buf)
      {
        if ((buf[8] & 1) != 0)
          v3 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
      }
      v6 += v7;
      v5 -= v7;
    }
    while (*((_QWORD *)this + 1) > (unint64_t)v6);
  }
}

void re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(uint64_t *a1, float *a2, uint64_t a3)
{
  switch(*(_DWORD *)(a3 + 16))
  {
    case 0:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1, a2, a3);
      break;
    case 1:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, (const char **)a2, a3);
      break;
    case 2:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((const char **)a1, (char *)a2, a3);
      break;
    case 3:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    case 4:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    case 5:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    case 6:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, a2);
      break;
    case 7:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((_anonymous_namespace_ **)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    case 8:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 9:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, a2, a3);
      break;
    case 0xA:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((re::snapshot::DecoderOPACK *)a1, (uint64_t *)a2);
      break;
    case 0xB:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((_anonymous_namespace_ *)a1, (uint64_t)a2, a3);
      break;
    case 0xD:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t)a1, (uint64_t)a2, (_QWORD *)a3);
      break;
    default:
      return;
  }
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(uint64_t *a1, float *a2, uint64_t a3)
{
  uint64_t *result;

  switch(*(_DWORD *)(a3 + 56))
  {
    case 1:
      result = re::snapshot::DecoderOPACK::operator>>(a1, a2);
      break;
    case 2:
    case 6:
      result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
      *(_BYTE *)a2 = (_BYTE)result;
      break;
    case 3:
    case 7:
      result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
      *(_WORD *)a2 = (_WORD)result;
      break;
    case 4:
    case 8:
      result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
      *(_DWORD *)a2 = (_DWORD)result;
      break;
    case 5:
    case 9:
      result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
      *(_QWORD *)a2 = result;
      break;
    case 0xA:
      result = re::snapshot::DecoderOPACK::operator>>(a1, a2);
      break;
    case 0xB:
      result = re::snapshot::DecoderOPACK::operator>>(a1, (double *)a2);
      break;
    default:
      result = re::snapshot::Decoder::error((const char **)a1, "unexpected basic type: %s", *(const char **)(a3 + 48));
      break;
  }
  return result;
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t *result;

  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger(a1, 0);
      *a2 = (_BYTE)result;
      break;
    case 2:
      result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger(a1, 0);
      *(_WORD *)a2 = (_WORD)result;
      break;
    case 4:
      result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger(a1, 0);
      *(_DWORD *)a2 = (_DWORD)result;
      break;
    case 8:
      result = (uint64_t *)re::snapshot::DecoderOPACK::readInteger(a1, 0);
      *(_QWORD *)a2 = result;
      break;
    default:
      result = re::snapshot::Decoder::error((const char **)a1, "unexpected enum size %d", *(_DWORD *)(a3 + 20));
      break;
  }
  return result;
}

void re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *this, const char **a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  char *v10;
  _BYTE *v11;
  uint64_t Integer;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  const char *v25;
  void *__src;
  uint64_t v27;
  uint64_t v28;
  uint64_t __dst;

  v6 = atomic_load((unsigned __int8 *)&qword_2541230F8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2541230F8))
  {
    qword_2541230F0 = re::introspect<char>();
    __cxa_guard_release(&qword_2541230F8);
  }
  v7 = *(_QWORD *)(a3 + 48);
  if (v7 == qword_2541230F0)
  {
    __src = 0;
    if (!re::snapshot::DecoderOPACK::beginString(this, (unint64_t *)&__src))
      return;
    v10 = (char *)*a2;
    v11 = __src;
    if (*a2)
    {
      if (__src && (void *)strlen(*a2) == __src)
        goto LABEL_14;
      (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v10);
      *a2 = 0;
    }
    if (!v11)
      return;
    v10 = (char *)(*(uint64_t (**)(_QWORD, _BYTE *, _QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v11 + 1, 0);
    *a2 = v10;
    if (!v10)
    {
      re::snapshot::Decoder::error((const char **)this, "C String of %zu bytes");
      return;
    }
LABEL_14:
    re::snapshot::Decoder::readRaw(this, v10, (size_t)v11);
    v11[(_QWORD)*a2] = 0;
    return;
  }
  v8 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if ((unint64_t)v8 < *((_QWORD *)this + 3))
  {
    v9 = *v8;
    if (v9 == 225)
    {
      *((_QWORD *)this + 2) = v8 + 1;
      Integer = re::snapshot::DecoderOPACK::readInteger(this, 0);
      if (*(_DWORD *)(v7 + 16) == 8 && Integer != 0)
      {
        v14 = *(unsigned int *)(v7 + 56);
        if ((_DWORD)v14)
        {
          v15 = Integer;
          v16 = *(_DWORD ***)(v7 + 64);
          v17 = v16;
          v18 = *(unsigned int *)(v7 + 56);
          do
          {
            v19 = (_DWORD *)*v17;
            if (*(_DWORD *)*v17 == 2)
              goto LABEL_24;
            ++v17;
            --v18;
          }
          while (v18);
          v19 = 0;
LABEL_24:
          while (**v16 != 3)
          {
            ++v16;
            if (!--v14)
              goto LABEL_41;
          }
          if (v19)
          {
            if (*a2)
            {
              re::PolymorphicData::makeWithPointer(v7, (const re::IntrospectionBase *)*a2, &__src);
              v20 = 0;
              if (v28 && __src && v27)
              {
                __dst = 0;
                memcpy(&__dst, __src, *(int *)(v27 + 20));
                v20 = __dst;
              }
              if (v15 != v20)
              {
                re::introspectionReleasePointer((uint64_t *)*a2, *((_QWORD *)this + 6), *((_QWORD *)this + 5), v7);
                *a2 = 0;
              }
            }
            v21 = *(_QWORD *)(*((_QWORD *)v19 + 1) + 8);
            if (*(_QWORD *)(v21 + 24) == v15)
            {
              v22 = 0;
            }
            else
            {
              v22 = 0;
              v23 = (uint64_t *)(v21 + 64);
              do
              {
                ++v22;
                v24 = *v23;
                v23 += 5;
              }
              while (v24 != v15);
            }
            v7 = *(_QWORD *)(v21 + 40 * v22 + 8);
          }
        }
      }
    }
    else if (v9 == 4)
    {
      *((_QWORD *)this + 2) = v8 + 1;
      return;
    }
LABEL_41:
    v25 = *a2;
    if (*a2
      || (v25 = (const char *)re::introspectionAllocPointer(*((re **)this + 6), *((_anonymous_namespace_ **)this + 5), (re::Allocator *)v7), (*a2 = v25) != 0))
    {
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(this, v25, v7);
    }
    else
    {
      re::snapshot::Decoder::error((const char **)this, "allocation failure: %d bytes");
    }
  }
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BYTE *v5;
  uint64_t v8;

  v5 = *(_BYTE **)(a1 + 16);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
    return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 64))(a3, a2, 0);
  if (*v5 == 4)
  {
    *(_QWORD *)(a1 + 16) = v5 + 1;
    return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 64))(a3, a2, 0);
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 64))(a3, a2, 1);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 72))(a3, a2);
  return re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1, v8, a3[6]);
}

void re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v4;
  size_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  _QWORD v15[2];

  v14 = 0;
  v4 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginString(a1, &v14);
  if ((_DWORD)v4)
  {
    v5 = v14;
    v6 = (const char *)*((_QWORD *)a1 + 2);
    v7 = *((_QWORD *)a1 + 3) - (_QWORD)v6;
    if (v7 >= v14)
      v7 = v14;
    *((_QWORD *)a1 + 2) = &v6[v7];
    v12 = 0;
    v13 = &str_110;
    v8 = v12;
    v9 = (uint64_t)v13;
    v12 = 0;
    v13 = &str_110;
    v10 = *a2;
    v11 = a2[1];
    *a2 = v8;
    a2[1] = v9;
    v15[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
    v15[1] = v11;
    re::StringID::destroyString((re::StringID *)v15);
    re::StringID::destroyString((re::StringID *)&v12);
  }
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *a1, _QWORD *a2)
{
  uint64_t result;
  size_t v5;
  void *v6;
  unint64_t v7;

  v7 = 0;
  result = re::snapshot::DecoderOPACK::beginString(a1, &v7);
  if ((_DWORD)result)
  {
    v5 = v7;
    re::DynamicString::resize(a2, v7, 0);
    if ((a2[1] & 1) != 0)
      v6 = (void *)a2[2];
    else
      v6 = (char *)a2 + 9;
    return re::snapshot::Decoder::readRaw(a1, v6, v5);
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(const char **this, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  size_t v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  size_t __len;

  v6 = *(_QWORD *)(a3 + 48);
  __len = 0;
  if (*(_BYTE *)(v6 + 28)
    && re::snapshot::DecoderOPACK::beginData((re::snapshot::DecoderOPACK *)this, &__len, 1))
  {
    v7 = *(_DWORD *)(v6 + 20);
    if (__len % v7)
    {
      return (uint64_t)re::snapshot::Decoder::error(this, "C Array element size mismatch: expected multiple of %d, got %zu");
    }
    else if (__len / v7 == *(_DWORD *)(a3 + 64))
    {
      return re::snapshot::Decoder::readRaw((re::snapshot::Decoder *)this, a2, __len);
    }
    else
    {
      return (uint64_t)re::snapshot::Decoder::error(this, "C Array size mismatch: expected %d, got %zu");
    }
  }
  else
  {
    result = re::snapshot::DecoderOPACK::beginArray((re::snapshot::DecoderOPACK *)this, &__len);
    if ((_DWORD)result)
    {
      v9 = __len;
      if (__len == *(_DWORD *)(a3 + 64))
      {
        result = re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)this, &__len);
        v10 = 0;
        if ((result & 1) == 0)
        {
          do
          {
            if (v10 >= *(_DWORD *)(a3 + 64))
            {
              v11 = (unsigned __int8 *)this[2];
              if (v11 >= (unsigned __int8 *)this[3])
              {
                v12 = 0;
              }
              else
              {
                this[2] = (const char *)(v11 + 1);
                v12 = *v11;
              }
              re::snapshot::DecoderOPACK::skip((uint64_t *)this, v12);
            }
            else
            {
              re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(this, a2, v6);
              a2 += *(int *)(v6 + 20);
              ++v10;
            }
            result = re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)this, &__len);
          }
          while (!(_DWORD)result);
        }
        if (v9 != v10)
          return (uint64_t)re::snapshot::Decoder::error(this, "size mismatch: expected %zu, got %d");
      }
      else
      {
        return (uint64_t)re::snapshot::Decoder::error(this, "unexpected C Array size: expected %d, got %zu");
      }
    }
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(re::snapshot::DecoderOPACK *this, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  void *v15;
  unint64_t v16;

  v6 = a3[6];
  v16 = 0;
  if (*(_BYTE *)(v6 + 28) && (result = re::snapshot::DecoderOPACK::beginData(this, &v16, 1), (_DWORD)result))
  {
    v8 = v16;
    if (v16 % *(int *)(v6 + 20))
    {
      *((_QWORD *)this + 2) += v16;
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*a3 + 72))(a3, *((_QWORD *)this + 6), *((_QWORD *)this + 5), a2);
      if (v8)
      {
        v15 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 96))(a3, a2, 0);
        return re::snapshot::Decoder::readRaw(this, v15, v8);
      }
    }
  }
  else
  {
    result = re::snapshot::DecoderOPACK::beginArray(this, &v16);
    if ((_DWORD)result)
    {
      v9 = v16;
      (*(void (**)(_QWORD *, _QWORD, _QWORD, uint64_t, unint64_t))(*a3 + 72))(a3, *((_QWORD *)this + 6), *((_QWORD *)this + 5), a2, v16);
      result = re::snapshot::DecoderOPACK::endArray(this, &v16);
      v10 = 0;
      if ((result & 1) == 0)
      {
        do
        {
          if (v9 <= v10)
          {
            v13 = (unsigned __int8 *)*((_QWORD *)this + 2);
            if ((unint64_t)v13 >= *((_QWORD *)this + 3))
            {
              v14 = 0;
            }
            else
            {
              *((_QWORD *)this + 2) = v13 + 1;
              v14 = *v13;
            }
            re::snapshot::DecoderOPACK::skip((uint64_t *)this, v14);
          }
          else
          {
            v11 = v10++;
            v12 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 96))(a3, a2, v11);
            re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(this, v12, v6);
          }
          result = re::snapshot::DecoderOPACK::endArray(this, &v16);
        }
        while (!(_DWORD)result);
      }
      if (v9 != v10)
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "count mismatch: expected %zu, got %d", v9, v10);
    }
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  size_t v8;
  unint64_t v9;
  size_t v10;
  char v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  void *v18;
  unint64_t v19;

  v6 = a3[6];
  v19 = 0;
  if (*(_BYTE *)(v6 + 28) && re::snapshot::DecoderOPACK::beginData(this, &v19, 1))
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 88))(a3, a2);
    v8 = v19;
    if ((result & 1) == 0)
      result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, unint64_t))(*a3 + 64))(a3, a2, *((_QWORD *)this + 6), *((_QWORD *)this + 5), v19 / *(int *)(v6 + 20));
    v9 = *(int *)(v6 + 20);
    v10 = v8 / v9;
    if (v8 % v9)
    {
      *((_QWORD *)this + 2) += v8;
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
      if (v10 == result)
      {
        if (v8)
        {
          v18 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a3 + 96))(a3, a2, 0);
          return re::snapshot::Decoder::readRaw(this, v18, v8);
        }
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected data size reading FixedArray: expected %zu, got %zu");
      }
    }
  }
  else
  {
    result = re::snapshot::DecoderOPACK::beginArray(this, &v19);
    if ((_DWORD)result)
    {
      v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 88))(a3, a2);
      v12 = v19;
      if ((v11 & 1) == 0)
        (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, unint64_t))(*a3 + 64))(a3, a2, *((_QWORD *)this + 6), *((_QWORD *)this + 5), v19);
      if ((*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2) == v12)
      {
        result = re::snapshot::DecoderOPACK::endArray(this, &v19);
        v13 = 0;
        if ((result & 1) == 0)
        {
          do
          {
            if ((*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2) <= (unint64_t)v13)
            {
              v16 = (unsigned __int8 *)*((_QWORD *)this + 2);
              if ((unint64_t)v16 >= *((_QWORD *)this + 3))
              {
                v17 = 0;
              }
              else
              {
                *((_QWORD *)this + 2) = v16 + 1;
                v17 = *v16;
              }
              re::snapshot::DecoderOPACK::skip((uint64_t *)this, v17);
            }
            else
            {
              v14 = v13++;
              v15 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a3 + 96))(a3, a2, v14);
              re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(this, v15, v6);
            }
            result = re::snapshot::DecoderOPACK::endArray(this, &v19);
          }
          while (!(_DWORD)result);
        }
        if (v12 != v13)
          return (uint64_t)re::snapshot::Decoder::error((const char **)this, "count mismatch: expected %zu, got %d");
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, a2);
        return (uint64_t)re::snapshot::Decoder::error((const char **)this, "unexpected FixedArray size: expected %zu, got %zu");
      }
    }
  }
  return result;
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;

  if ((*(unsigned int (**)(_QWORD *))(*a3 + 80))(a3))
    return re::snapshot::Decoder::error((const char **)a1, "cannot read into existing DataArray");
  v7 = a3[6];
  v13 = 0;
  result = (uint64_t *)re::snapshot::DecoderOPACK::beginArray((re::snapshot::DecoderOPACK *)a1, &v13);
  if ((_DWORD)result)
  {
    v8 = v13;
    result = (uint64_t *)re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, &v13);
    if ((result & 1) == 0)
    {
      v9 = 0;
      do
      {
        if (v9 >= v8)
        {
          v11 = *(unsigned __int8 **)(a1 + 16);
          if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
          {
            v12 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = v11 + 1;
            v12 = *v11;
          }
          re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v12);
        }
        else
        {
          v10 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*a3 + 72))(a3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), a2);
          re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1, v10, v7);
        }
        result = (uint64_t *)re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, &v13);
        ++v9;
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(_anonymous_namespace_ **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  re::Allocator *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  re *v14;
  re::IntrospectionBase *v15;
  int v16;
  uint64_t v17;
  void *__ptr;
  size_t __space;
  unint64_t v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v20[0] = 0;
  result = re::snapshot::DecoderOPACK::beginDictionary((re::snapshot::DecoderOPACK *)a1, v20);
  if ((_DWORD)result)
  {
    v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 88))(a3, a2);
    if (v20[0] != -1)
      v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3 + 72))(a3, a2);
    v8 = (re::Allocator *)a3[6];
    v9 = a3[8];
    v10 = *((int *)v8 + 6);
    v11 = *((_DWORD *)v8 + 5) + (int)v10 - 1;
    __space = v11;
    MEMORY[0x24BDAC7A8](v7);
    v13 = (char *)&__ptr - v12;
    bzero((char *)&__ptr - v12, v11);
    __ptr = v13;
    __ptr = std::align(v10, v11, &__ptr, &__space);
    result = re::snapshot::DecoderOPACK::endDictionary((re::snapshot::DecoderOPACK *)a1, v20);
    if ((result & 1) == 0)
    {
      do
      {
        v14 = a1[6];
        v15 = (re::IntrospectionBase *)__ptr;
        re::introspectionCallConstructor(a1[5], (uint64_t)v8, (uint64_t)__ptr);
        re::introspectionInitElement(v14, v16, v8, v15);
        re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1, __ptr, v8);
        v17 = (*(uint64_t (**)(_QWORD *, _anonymous_namespace_ *, _anonymous_namespace_ *, uint64_t, void *))(*a3 + 96))(a3, a1[6], a1[5], a2, __ptr);
        re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1, v17, v9);
        (*(void (**)(_QWORD *, void *))(*a3 + 112))(a3, __ptr);
        result = re::snapshot::DecoderOPACK::endDictionary((re::snapshot::DecoderOPACK *)a1, v20);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  char *v7;
  char *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  v14 = 0;
  if (re::snapshot::DecoderOPACK::beginString(a1, &v14))
  {
    v6 = v14;
    re::DynamicString::resize(&v10, v14, 0);
    if ((v11 & 1) != 0)
      v7 = v12;
    else
      v7 = (char *)&v11 + 1;
    re::snapshot::Decoder::readRaw(a1, v7, v6);
  }
  if ((v11 & 1) != 0)
    v8 = v12;
  else
    v8 = (char *)&v11 + 1;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *))(a3 + 80))(*((_QWORD *)a1 + 6), *((_QWORD *)a1 + 5), a3, a2, v8);
  result = (uint64_t)v10;
  if (v10)
  {
    if ((v11 & 1) != 0)
      return (*(uint64_t (**)(void))(*v10 + 40))();
  }
  return result;
}

uint64_t *re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  size_t v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  re *v44;
  re::IntrospectionBase *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  int Integer;
  size_t v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t *v55;
  _BYTE *v56;
  uint64_t v57;
  size_t v58;
  uint64_t __dst;
  size_t __len;
  char *v61;
  uint64_t v62;
  _BYTE buf[18];
  _BYTE *v64;
  uint64_t v65;

  v3 = a3;
  v65 = *MEMORY[0x24BDAC8D0];
  v61 = *(char **)(a3 + 48);
  result = (uint64_t *)re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)a1, (const char **)&v61);
  if (!(_DWORD)result)
    return result;
  if (!*(_DWORD *)(v3 + 56))
    return re::snapshot::DecoderOPACK::endObject((uint64_t *)a1, v61);
  v7 = 0;
  v8 = &dword_224FE9000;
  while (1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * v7);
    if (*(_DWORD *)v9 == 1)
      break;
LABEL_75:
    if (++v7 >= (unint64_t)*(unsigned int *)(v3 + 56))
      return re::snapshot::DecoderOPACK::endObject((uint64_t *)a1, v61);
  }
  v10 = *(_DWORD *)(v9 + 32);
  for (i = *(unsigned int *)(a1 + 32); (int)i < v10; *(_DWORD *)(a1 + 32) = i)
  {
    v12 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v12 >= *(_QWORD *)(a1 + 24))
    {
      v13 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v12 + 1;
      v13 = *v12;
    }
    re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v13);
    v14 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v14 >= *(_QWORD *)(a1 + 24) || (v15 = *v14, v15 == 3))
    {
      i = 0x7FFFFFFFLL;
      *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
      break;
    }
    if ((v15 - 7) > 0x28)
    {
      i = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v14 + 1;
      i = (v15 - 8);
    }
  }
  if ((_DWORD)i != v10)
  {
    v16 = *re::foundationSerializationLogObjects((re *)i);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v17 = *(_DWORD *)(v9 + 32);
      v18 = *(_QWORD *)(v3 + 48);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v18;
      _os_log_impl(v8, v16, OS_LOG_TYPE_INFO, "Snapshot reader: no field for tag %d in %s", buf, 0x12u);
    }
    goto LABEL_75;
  }
  switch(*(_DWORD *)(v9 + 40))
  {
    case 0:
    case 3:
      re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1, a2 + *(int *)(v9 + 36), *(_QWORD *)(v9 + 16));
      goto LABEL_71;
    case 1:
      v19 = *(int *)(v9 + 36);
      v20 = *(_QWORD *)(v9 + 16);
      __dst = 0;
      __len = 0;
      if (*(_QWORD *)(a2 + v19))
      {
        v21 = *(_QWORD *)(v9 + 48);
        if (v21)
          memcpy(&__dst, (const void *)(a2 + *(int *)(v9 + 64)), *(int *)(v21 + 20));
      }
      if (!*(_DWORD *)(*(_QWORD *)(v20 + 48) + 16))
      {
        if (re::snapshot::DecoderOPACK::beginData((re::snapshot::DecoderOPACK *)a1, &__len, 0))
        {
          v26 = v20;
          v27 = v8;
          v28 = v19;
          v29 = __len;
          LODWORD(v26) = *(_DWORD *)(*(_QWORD *)(v26 + 48) + 20);
          v30 = __len / (int)v26;
          if (__len % (int)v26)
            return re::snapshot::Decoder::error((const char **)a1, "invalid array data, data size = %zu, element size = %u");
          v31 = *(void **)(a2 + v28);
          if (v31 && v30 != __dst)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
            v31 = 0;
            *(_QWORD *)(a2 + v28) = 0;
          }
          if (v29)
          {
            if (!v31)
            {
              v31 = (void *)(*(uint64_t (**)(_QWORD, size_t, _QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v29, 0);
              *(_QWORD *)(a2 + v28) = v31;
              if (!v31)
                return re::snapshot::Decoder::error((const char **)a1, "allocation failure, array with size: %zu bytes");
            }
          }
          *(_QWORD *)buf = v30;
          if (*(_DWORD *)(v9 + 40) == 1)
          {
            v32 = *(_QWORD *)(v9 + 48);
            if (v32)
            {
              memcpy((void *)(a2 + *(int *)(v9 + 64)), buf, *(int *)(v32 + 20));
              v31 = *(void **)(a2 + v28);
            }
          }
          re::snapshot::Decoder::readRaw((re::snapshot::Decoder *)a1, v31, v29);
          v8 = v27;
        }
        goto LABEL_71;
      }
      if (!re::snapshot::DecoderOPACK::beginArray((re::snapshot::DecoderOPACK *)a1, &__len))
        goto LABEL_71;
      v57 = v3;
      v22 = *(_QWORD *)(a2 + v19);
      v58 = __len;
      if (!v22)
        goto LABEL_62;
      v23 = __dst;
      if (__dst == __len)
        goto LABEL_67;
      v64 = 0;
      switch(*(_DWORD *)(*(_QWORD *)(v20 + 48) + 16))
      {
        case 3:
          std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},void>(buf, v20);
          goto LABEL_52;
        case 4:
          std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},void>(buf, v20);
          goto LABEL_52;
        case 5:
          std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},void>(buf, v20);
          goto LABEL_52;
        case 6:
          std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},void>(buf);
          goto LABEL_52;
        case 7:
          std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},void>(buf, v20);
          goto LABEL_52;
        case 8:
          std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},void>(buf, a1, v20);
          goto LABEL_52;
        case 0xA:
          std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},void>(buf);
          goto LABEL_52;
        case 0xD:
          std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},void>(buf, v20);
LABEL_52:
          if (!v23 || !v64)
            goto LABEL_57;
          v33 = 0;
          break;
        default:
          goto LABEL_57;
      }
      do
      {
        v62 = *(_QWORD *)(a2 + v19) + *(int *)(*(_QWORD *)(v20 + 48) + 20) * (uint64_t)(int)v33;
        if (!v64)
        {
          v55 = (uint64_t *)std::__throw_bad_function_call[abi:nn180100]();
          return re::snapshot::DecoderOPACK::operator>>(v55, v56);
        }
        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v64 + 48))(v64, &v62);
        ++v33;
      }
      while (v23 != v33);
LABEL_57:
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + v19));
      *(_QWORD *)(a2 + v19) = 0;
      v34 = v64;
      if (v64 == buf)
      {
        v34 = buf;
        v35 = 4;
LABEL_61:
        (*(void (**)(void))(*v34 + 8 * v35))();
        v22 = *(_QWORD *)(a2 + v19);
LABEL_62:
        if (!v22)
          goto LABEL_63;
LABEL_67:
        *(_QWORD *)buf = v58;
        if (*(_DWORD *)(v9 + 40) == 1)
        {
          v47 = *(_QWORD *)(v9 + 48);
          if (v47)
            memcpy((void *)(a2 + *(int *)(v9 + 64)), buf, *(int *)(v47 + 20));
        }
        v48 = *(_QWORD *)(a2 + v19);
        v8 = &dword_224FE9000;
        v3 = v57;
        if (!re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, &__len))
        {
          v52 = 0;
          do
          {
            if (v52 >= v58)
            {
              v53 = *(unsigned __int8 **)(a1 + 16);
              if ((unint64_t)v53 >= *(_QWORD *)(a1 + 24))
              {
                v54 = 0;
              }
              else
              {
                *(_QWORD *)(a1 + 16) = v53 + 1;
                v54 = *v53;
              }
              re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v54);
            }
            else
            {
              re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(a1, v48, *(_QWORD *)(v20 + 48));
              v48 += *(int *)(*(_QWORD *)(v20 + 48) + 20);
            }
            ++v52;
          }
          while (!re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, &__len));
        }
LABEL_71:
        v49 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v49 >= *(_QWORD *)(a1 + 24) || (v50 = *v49, v50 == 3))
        {
          Integer = 0x7FFFFFFF;
        }
        else if ((v50 - 7) > 0x28)
        {
          Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v49 + 1;
          Integer = v50 - 8;
        }
        *(_DWORD *)(a1 + 32) = Integer;
        goto LABEL_75;
      }
      if (v64)
      {
        v35 = 5;
        goto LABEL_61;
      }
LABEL_63:
      if (!v58)
        goto LABEL_67;
      v36 = (*(uint64_t (**)(_QWORD, size_t, _QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v58 * *(int *)(*(_QWORD *)(v20 + 48) + 20), 0);
      *(_QWORD *)(a2 + v19) = v36;
      if (v36)
      {
        for (j = 0; j != v58; ++j)
        {
          v38 = *(_QWORD *)(a2 + v19);
          v39 = *(int **)(v20 + 48);
          v40 = v20;
          v41 = v19;
          v42 = a2;
          v43 = v38 + v39[5] * (uint64_t)(int)j;
          v44 = *(re **)(a1 + 48);
          re::introspectionCallConstructor(*(_anonymous_namespace_ **)(a1 + 40), (uint64_t)v39, v43);
          v45 = (re::IntrospectionBase *)v43;
          a2 = v42;
          v19 = v41;
          v20 = v40;
          re::introspectionInitElement(v44, v46, (re::Allocator *)v39, v45);
        }
        goto LABEL_67;
      }
      return re::snapshot::Decoder::error((const char **)a1, "allocation failure, array with size: %zu %d byte elements");
    case 2:
      v24 = *re::foundationSerializationLogObjects((re *)i);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *(_QWORD *)(v3 + 48);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v25;
        _os_log_impl(v8, v24, OS_LOG_TYPE_DEFAULT, "Snapshot reader: polymorphic inline types currently unhandled (type = %s)", buf, 0xCu);
      }
      goto LABEL_71;
    default:
      goto LABEL_71;
  }
}

uint64_t *re::snapshot::DecoderOPACK::operator>>(uint64_t *result, _BYTE *a2)
{
  unsigned __int8 *v2;
  int v3;

  v2 = (unsigned __int8 *)result[2];
  if ((unint64_t)v2 >= result[3])
  {
    v3 = 0;
  }
  else
  {
    result[2] = (uint64_t)(v2 + 1);
    v3 = *v2;
    if (v3 == 1)
    {
      *a2 = 1;
      return result;
    }
    if (v3 == 2)
    {
      *a2 = 0;
      return result;
    }
  }
  return re::snapshot::Decoder::error((const char **)result, "expected BOOL, found tag %x", v3);
}

uint64_t *re::snapshot::DecoderOPACK::operator>>(uint64_t *result, float *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  float *v5;
  int v6;
  unint64_t v7;
  double v8;
  float v9;

  v3 = (unsigned __int8 *)result[2];
  v2 = result[3];
  if ((unint64_t)v3 >= v2)
    return re::snapshot::Decoder::error((const char **)result, "expected float, found tag %x");
  v5 = (float *)(v3 + 1);
  result[2] = (uint64_t)(v3 + 1);
  v6 = *v3;
  if (v6 != 54)
  {
    if (v6 == 53)
    {
      if (v2 - (unint64_t)v5 <= 3)
        return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining");
      *a2 = *v5;
      result[2] += 4;
      return result;
    }
    return re::snapshot::Decoder::error((const char **)result, "expected float, found tag %x");
  }
  v7 = v2 - (_QWORD)v5;
  if (v7 <= 7)
  {
    result = re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v7);
    v9 = 0.0;
  }
  else
  {
    v8 = *(double *)(v3 + 1);
    result[2] = (uint64_t)(v3 + 9);
    v9 = v8;
  }
  *a2 = v9;
  return result;
}

uint64_t *re::snapshot::DecoderOPACK::operator>>(uint64_t *result, double *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  double *v5;
  int v6;
  unint64_t v7;
  float v8;
  double v9;

  v3 = (unsigned __int8 *)result[2];
  v2 = result[3];
  if ((unint64_t)v3 >= v2)
    return re::snapshot::Decoder::error((const char **)result, "expected double, found tag %x");
  v5 = (double *)(v3 + 1);
  result[2] = (uint64_t)(v3 + 1);
  v6 = *v3;
  if (v6 != 53)
  {
    if (v6 == 54)
    {
      if (v2 - (unint64_t)v5 <= 7)
        return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining");
      *a2 = *v5;
      result[2] += 8;
      return result;
    }
    return re::snapshot::Decoder::error((const char **)result, "expected double, found tag %x");
  }
  v7 = v2 - (_QWORD)v5;
  if (v7 <= 3)
  {
    result = re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 4uLL, v7);
    v9 = 0.0;
  }
  else
  {
    v8 = *(float *)(v3 + 1);
    result[2] = (uint64_t)(v3 + 5);
    v9 = v8;
  }
  *a2 = v9;
  return result;
}

uint64_t re::snapshot::DecoderOPACK::beginData(re::snapshot::DecoderOPACK *this, unint64_t *a2, int a3)
{
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if ((unint64_t)v4 >= v3)
  {
    if (a3)
    {
LABEL_7:
      v9 = 0;
      *((_QWORD *)this + 2) = v4 - 1;
    }
    else
    {
LABEL_28:
      re::snapshot::Decoder::error((const char **)this, "expected data, found tag %x");
      return 0;
    }
  }
  else
  {
    v6 = v4 + 1;
    *((_QWORD *)this + 2) = v4 + 1;
    v7 = *v4;
    switch(*v4)
    {
      case 0x91u:
        if ((unsigned __int8 *)v3 != v6)
        {
          v8 = v4[1];
          v6 = v4 + 2;
          goto LABEL_14;
        }
        re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
        goto LABEL_23;
      case 0x92u:
        v10 = v3 - (_QWORD)v6;
        if (v10 > 1)
        {
          v8 = *(unsigned __int16 *)(v4 + 1);
          v6 = v4 + 3;
          goto LABEL_14;
        }
        v11 = 2;
        goto LABEL_22;
      case 0x93u:
        v10 = v3 - (_QWORD)v6;
        if (v10 > 3)
        {
          v8 = *(unsigned int *)(v4 + 1);
          v6 = v4 + 5;
          goto LABEL_14;
        }
        v11 = 4;
        goto LABEL_22;
      case 0x94u:
        v10 = v3 - (_QWORD)v6;
        if (v10 > 7)
        {
          v8 = *(_QWORD *)(v4 + 1);
          v6 = v4 + 9;
LABEL_14:
          *((_QWORD *)this + 2) = v6;
          goto LABEL_15;
        }
        v11 = 8;
LABEL_22:
        re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", v11, v10);
LABEL_23:
        *a2 = 0;
        goto LABEL_24;
      default:
        if ((v7 + 111) <= 0xDEu)
        {
          ++v4;
          if (!a3)
            goto LABEL_28;
          goto LABEL_7;
        }
        v8 = (v7 - 112);
LABEL_15:
        *a2 = v8;
        if (v3 - (unint64_t)v6 < v8)
        {
          re::snapshot::Decoder::error((const char **)this, "overrun in data: size = %zu, only %zu bytes left");
          return 0;
        }
LABEL_24:
        v9 = 1;
        break;
    }
  }
  return v9;
}

uint64_t re::snapshot::DecoderOPACK::beginArray(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  unint64_t Integer;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  if ((unint64_t)v3 >= v4)
    goto LABEL_9;
  v6 = v3 + 1;
  *((_QWORD *)this + 2) = v3 + 1;
  v7 = *v3;
  if ((v7 + 48) <= 0xEu)
  {
    v8 = (v7 - 208);
    *a2 = v8;
    if (v4 - (unint64_t)v6 < v8)
      goto LABEL_7;
    return 1;
  }
  if (v7 != 223)
  {
LABEL_9:
    re::snapshot::Decoder::error((const char **)this, "expected array, found tag %x");
    return 0;
  }
  Integer = re::snapshot::DecoderOPACK::readInteger(this, -1);
  *a2 = Integer;
  if (*((_QWORD *)this + 3) - *((_QWORD *)this + 2) >= Integer + 1)
    return 1;
LABEL_7:
  re::snapshot::Decoder::error((const char **)this, "overrun in beginArray: %zu items, only %zu bytes remaining");
  return 0;
}

BOOL re::snapshot::DecoderOPACK::endArray(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  _BYTE *v2;
  unint64_t v3;

  v2 = (_BYTE *)*((_QWORD *)this + 2);
  v3 = *a2;
  if ((unint64_t)v2 >= *((_QWORD *)this + 3))
  {
    if (v3)
      re::snapshot::Decoder::error((const char **)this, "reached end of buffer but expected more array entries");
  }
  else
  {
    if (v3 <= 0xE)
    {
      *a2 = v3 - 1;
      return v3 == 0;
    }
    if (*v2 != 3)
      return 0;
    *((_QWORD *)this + 2) = v2 + 1;
  }
  return 1;
}

uint64_t re::snapshot::DecoderOPACK::beginDictionary(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if ((unint64_t)v2 >= v3)
    goto LABEL_8;
  v4 = v2 + 1;
  *((_QWORD *)this + 2) = v2 + 1;
  v5 = *v2;
  if ((v5 + 32) > 0xEu)
  {
    if (v5 == 239)
    {
      *a2 = -1;
      return 1;
    }
LABEL_8:
    re::snapshot::Decoder::error((const char **)this, "expected dictionary, found tag %x");
    return 0;
  }
  v6 = (v5 - 224);
  *a2 = v6;
  if (v3 - (unint64_t)v4 >= v6)
    return 1;
  re::snapshot::Decoder::error((const char **)this, "overrun in beginDictionary: %zu items, only %zu bytes remaining");
  return 0;
}

BOOL re::snapshot::DecoderOPACK::endDictionary(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  _BYTE *v2;
  unint64_t v3;

  v2 = (_BYTE *)*((_QWORD *)this + 2);
  v3 = *a2;
  if ((unint64_t)v2 >= *((_QWORD *)this + 3))
  {
    if (v3)
      re::snapshot::Decoder::error((const char **)this, "reached end of buffer but expected more dictionary entries");
  }
  else
  {
    if (v3 <= 0xE)
    {
      *a2 = v3 - 1;
      return v3 == 0;
    }
    if (*v2 != 3)
      return 0;
    *((_QWORD *)this + 2) = v2 + 1;
  }
  return 1;
}

uint64_t re::snapshot::DecoderOPACK::beginString(re::snapshot::DecoderOPACK *this, unint64_t *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  if ((unint64_t)v3 >= v2)
  {
LABEL_6:
    re::snapshot::Decoder::error((const char **)this, "expected string, found tag %x");
    return 0;
  }
  else
  {
    v5 = v3 + 1;
    *((_QWORD *)this + 2) = v3 + 1;
    v6 = *v3;
    switch(*v3)
    {
      case 'a':
        if ((unint64_t)v5 < v2)
        {
          v5 = v3 + 2;
          *((_QWORD *)this + 2) = v3 + 2;
          v7 = v3[1];
          goto LABEL_16;
        }
        re::snapshot::Decoder::error((const char **)this, "overrun in beginString: expected 1 byte, but 0 bytes remaining");
        return 0;
      case 'b':
        v8 = v2 - (_QWORD)v5;
        if (v8 > 1)
        {
          v7 = *(unsigned __int16 *)(v3 + 1);
          v5 = v3 + 3;
          goto LABEL_13;
        }
        v10 = 2;
        goto LABEL_22;
      case 'c':
        v8 = v2 - (_QWORD)v5;
        if (v8 > 3)
        {
          v7 = *(unsigned int *)(v3 + 1);
          v5 = v3 + 5;
          goto LABEL_13;
        }
        v10 = 4;
        goto LABEL_22;
      case 'd':
        v8 = v2 - (_QWORD)v5;
        if (v8 <= 7)
        {
          v10 = 8;
LABEL_22:
          re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", v10, v8);
          *a2 = 0;
        }
        else
        {
          v7 = *(_QWORD *)(v3 + 1);
          v5 = v3 + 9;
LABEL_13:
          *((_QWORD *)this + 2) = v5;
LABEL_16:
          *a2 = v7;
          if (v2 - (unint64_t)v5 < v7)
          {
            re::snapshot::Decoder::error((const char **)this, "overrun in beginString: size is %zu, but only %zu bytes remaining");
            return 0;
          }
        }
        result = 1;
        break;
      default:
        if ((v6 - 97) <= 0xFFFFFFDE)
          goto LABEL_6;
        v7 = (v6 - 64);
        goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::snapshot::DecoderOPACK::beginObject(re::snapshot::DecoderOPACK *this, const char **a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v8;
  int Integer;
  const char *v10;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  if ((unint64_t)v3 >= v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  v5 = v3 + 1;
  *((_QWORD *)this + 2) = v3 + 1;
  v6 = *v3;
  if (v6 != 239)
  {
LABEL_13:
    re::snapshot::Decoder::error((const char **)this, "expected object, found tag %x", v6);
    return 0;
  }
  if ((unint64_t)v5 >= v4 || (v8 = *v5, v8 == 3))
  {
    Integer = 0x7FFFFFFF;
  }
  else if ((v8 - 7) > 0x28)
  {
    Integer = re::snapshot::DecoderOPACK::readInteger(this, 0x7FFFFFFFLL);
  }
  else
  {
    *((_QWORD *)this + 2) = v3 + 2;
    Integer = v8 - 8;
  }
  *((_DWORD *)this + 8) = Integer;
  if (a2)
  {
    v10 = (const char *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = *a2;
    *a2 = v10;
  }
  return 1;
}

_QWORD *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24ED88450;
  v7[1] = a2;
  v7[2] = a3;
  v8 = v7;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](v7, a1);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

_QWORD *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24ED88498;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24ED884E0;
  v6 = v5;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24ED88528;
  v6 = v5;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24ED88570;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24ED885B8;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24ED88600;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(void *)>::operator=<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24ED88648;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t *re::snapshot::DecoderOPACK::endObject(uint64_t *this, const char *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  unint64_t i;
  int v6;

  v3 = this;
  v4 = (unsigned __int8 *)this[2];
  for (i = this[3]; (unint64_t)v4 < i; i = v3[3])
  {
    v3[2] = (uint64_t)(v4 + 1);
    v6 = *v4;
    if (v6 == 3)
      break;
    this = re::snapshot::DecoderOPACK::skip(v3, v6);
    v4 = (unsigned __int8 *)v3[2];
  }
  v3[7] = (uint64_t)a2;
  return this;
}

BOOL re::snapshot::Reader<re::snapshot::DecoderOPACK>::apply(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;

  re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t *)a1, a2, a3);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != *(_QWORD *)(a1 + 24))
    re::snapshot::Decoder::error((const char **)a1, "failed to consume input: %zu vs %zu", v4 - *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v5 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
    re::snapshot::Decoder::logInput((re::snapshot::Decoder *)a1);
  return v5 == 0;
}

uint64_t re::snapshot::Encoder::Encoder(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  re::DynamicString *v7;

  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_DWORD *)(a2 + 64);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v7 = (re::DynamicString *)(a1 + 32);
  re::DynamicString::setCapacity(v7, 0);
  *(_DWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  re::DynamicString::operator=(v7, (re::DynamicString *)(a2 + 32));
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return a1;
}

unsigned int *re::snapshot::EncoderOPACK::writeInteger(unsigned int *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;

  if (a2 == (int)a2)
    return re::snapshot::EncoderOPACK::writeInteger(this, a2);
  v2 = this[2];
  if (v2 + 9 <= (unint64_t)this[3])
    goto LABEL_4;
  v4 = this;
  v5 = a2;
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v2 + 9);
  if ((_DWORD)this)
  {
    this = v4;
    a2 = v5;
    v2 = v4[2];
LABEL_4:
    v3 = *(_QWORD *)this;
    this[2] = v2 + 1;
    *(_BYTE *)(v3 + v2) = 51;
    *(_QWORD *)(*(_QWORD *)this + this[2]) = a2;
    this[2] += 8;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::beginData(unsigned int *this, unint64_t a2, unint64_t a3)
{
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = this;
  if (a3 > 0x20)
  {
    if (a3 > 0xFF)
    {
      v12 = this[3];
      if (a3 >> 16)
      {
        v16 = this[2];
        if (HIDWORD(a3))
        {
          if (v16 + 9 > v12)
          {
            this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v16 + 9);
            if (!(_DWORD)this)
              return this;
            v16 = v4[2];
          }
          v20 = *(_QWORD *)v4;
          v4[2] = v16 + 1;
          *(_BYTE *)(v20 + v16) = -108;
          *(_QWORD *)(*(_QWORD *)v4 + v4[2]) = a2;
          v11 = v4[2] + 8;
LABEL_19:
          v4[2] = v11;
          return this;
        }
        v17 = v16 + 5;
        if (v16 + 5 <= v12)
        {
LABEL_15:
          if (HIDWORD(a2))
          {
            re::internal::assertLog((re::internal *)5, v17, "assertion failure: '%s' (%s:line %i) count %zu exceeds uint32_t capacity", "!overflow", "beginData", 163, a2);
            this = (unsigned int *)_os_crash();
            __break(1u);
            return this;
          }
          v18 = *(_QWORD *)v4;
          v19 = v4[2];
          v4[2] = v19 + 1;
          *(_BYTE *)(v18 + v19) = -109;
          *(_DWORD *)(*(_QWORD *)v4 + v4[2]) = a2;
          v11 = v4[2] + 4;
          goto LABEL_19;
        }
LABEL_30:
        this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)v4, v17);
        if (!(_DWORD)this)
          return this;
        goto LABEL_15;
      }
      v13 = this[2] + 3;
      if (v13 <= v12)
      {
LABEL_11:
        if (a2 < 0x10000)
        {
          v14 = *(_QWORD *)v4;
          v15 = v4[2];
          v4[2] = v15 + 1;
          *(_BYTE *)(v14 + v15) = -110;
          *(_WORD *)(*(_QWORD *)v4 + v4[2]) = a2;
          v11 = v4[2] + 2;
          goto LABEL_19;
        }
        re::internal::assertLog((re::internal *)5, v13, "assertion failure: '%s' (%s:line %i) count %zu exceeds uint16_t capacity", "!overflow", "beginData", 155, a2);
        _os_crash();
        __break(1u);
        goto LABEL_30;
      }
    }
    else
    {
      v8 = this[2] + 2;
      if (v8 > this[3])
      {
        this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v8);
        if (!(_DWORD)this)
          return this;
      }
      if (a2 < 0x100)
      {
        v9 = *(_QWORD *)v4;
        v10 = v4[2];
        v4[2] = v10 + 1;
        *(_BYTE *)(v9 + v10) = -111;
        *(_BYTE *)(*(_QWORD *)v4 + v4[2]) = a2;
        v11 = v4[2] + 1;
        goto LABEL_19;
      }
      re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) count %zu exceeds uint8_t capacity", "!overflow", "beginData", 147, a2);
      _os_crash();
      __break(1u);
    }
    this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)v4, v13);
    if (!(_DWORD)this)
      return this;
    goto LABEL_11;
  }
  v5 = a2 + 112;
  if (a2 + 112 >= 0x100)
  {
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) tag %zu exceeds uint8_t capacity", "!overflow", "beginData", 141, v5);
    _os_crash();
    __break(1u);
  }
  else
  {
    v6 = this[2];
    if (v6 < this[3])
    {
LABEL_4:
      v7 = *(_QWORD *)v4;
      v4[2] = v6 + 1;
      *(_BYTE *)(v7 + v6) = v5;
      return this;
    }
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)v4, v6 + 1);
  if ((_DWORD)this)
  {
    LODWORD(v6) = v4[2];
    goto LABEL_4;
  }
  return this;
}

unsigned int *re::snapshot::EncoderOPACK::writeInteger(unsigned int *this, int a2)
{
  char v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v3 = this;
  if ((a2 + 1) > 0x28)
  {
    v6 = this[2];
    if (v6 + 2 > (unint64_t)this[3])
    {
      this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v6 + 2);
      if (!(_DWORD)this)
        return this;
      v6 = v3[2];
    }
    v7 = *(_QWORD *)v3;
    v3[2] = v6 + 1;
    *(_BYTE *)(v7 + v6) = 48;
    *(_BYTE *)(*(_QWORD *)v3 + v3[2]++) = v2;
    return this;
  }
  v4 = this[2];
  if (v4 < this[3])
  {
LABEL_3:
    v5 = *(_QWORD *)v3;
    v3[2] = v4 + 1;
    *(_BYTE *)(v5 + v4) = v2 + 8;
    return this;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v4 + 1);
  if ((_DWORD)this)
  {
    LODWORD(v4) = v3[2];
    goto LABEL_3;
  }
  return this;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  __int16 v5;

  if (a2 == (char)a2)
    return re::snapshot::EncoderOPACK::writeInteger(this, (char)a2);
  v2 = this[2];
  if (v2 + 3 <= (unint64_t)this[3])
    goto LABEL_4;
  v5 = a2;
  v4 = this;
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v2 + 3);
  if ((_DWORD)this)
  {
    this = v4;
    v2 = v4[2];
    LOWORD(a2) = v5;
LABEL_4:
    v3 = *(_QWORD *)this;
    this[2] = v2 + 1;
    *(_BYTE *)(v3 + v2) = 49;
    *(_WORD *)(*(_QWORD *)this + this[2]) = a2;
    this[2] += 2;
  }
  return this;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;

  if (a2 == (__int16)a2)
    return re::snapshot::EncoderOPACK::writeInteger(this, (__int16)a2);
  v2 = this[2];
  if (v2 + 5 <= (unint64_t)this[3])
    goto LABEL_4;
  v5 = a2;
  v4 = this;
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v2 + 5);
  if ((_DWORD)this)
  {
    this = v4;
    v2 = v4[2];
    a2 = v5;
LABEL_4:
    v3 = *(_QWORD *)this;
    this[2] = v2 + 1;
    *(_BYTE *)(v3 + v2) = 50;
    *(_DWORD *)(*(_QWORD *)this + this[2]) = a2;
    this[2] += 4;
  }
  return this;
}

uint64_t *re::snapshot::DecoderOPACK::skip(uint64_t *result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;

  v2 = result;
  if (a2 <= 96)
  {
    switch(a2)
    {
      case '0':
        v3 = result[2] + 1;
        goto LABEL_48;
      case '1':
        v3 = result[2] + 2;
        goto LABEL_48;
      case '2':
      case '5':
        v3 = result[2] + 4;
        goto LABEL_48;
      case '3':
      case '6':
        v3 = result[2] + 8;
        goto LABEL_48;
      case '4':
        goto LABEL_35;
      default:
        if ((a2 - 1) < 2 || a2 == 4)
          return result;
LABEL_35:
        if ((a2 - 7) < 0x29)
          return result;
        v25 = (a2 - 64);
        if (v25 <= 0x20 || (v25 = (a2 - 112), v25 <= 0x20))
        {
          v3 = result[2] + v25;
          goto LABEL_48;
        }
        if ((a2 + 48) > 0xEu)
        {
          if ((a2 + 32) > 0xEu)
          {
            result = re::snapshot::Decoder::error((const char **)result, "unexpected tag while skipping: %x", a2);
          }
          else if (a2 >= 0xE1)
          {
            v30 = a2 - 223;
            do
            {
              v31 = (unsigned __int8 *)v2[2];
              if ((unint64_t)v31 >= v2[3])
              {
                v32 = 0;
              }
              else
              {
                v2[2] = (uint64_t)(v31 + 1);
                v32 = *v31;
              }
              re::snapshot::DecoderOPACK::skip(v2, v32);
              v33 = (unsigned __int8 *)v2[2];
              if ((unint64_t)v33 >= v2[3])
              {
                v34 = 0;
              }
              else
              {
                v2[2] = (uint64_t)(v33 + 1);
                v34 = *v33;
              }
              result = (uint64_t *)re::snapshot::DecoderOPACK::skip(v2, v34);
              --v30;
            }
            while (v30 > 1);
          }
        }
        else if (a2 >= 0xD1)
        {
          v27 = a2 - 207;
          do
          {
            v28 = (unsigned __int8 *)v2[2];
            if ((unint64_t)v28 >= v2[3])
            {
              v29 = 0;
            }
            else
            {
              v2[2] = (uint64_t)(v28 + 1);
              v29 = *v28;
            }
            result = (uint64_t *)re::snapshot::DecoderOPACK::skip(v2, v29);
            --v27;
          }
          while (v27 > 1);
        }
        break;
    }
  }
  else if (a2 <= 144)
  {
    switch(a2)
    {
      case 'a':
LABEL_7:
        v4 = (unsigned __int8 *)result[2];
        v5 = (unsigned __int8 *)result[3];
        if (v5 != v4)
        {
          v8 = *v4;
          v6 = v4 + 1;
          v7 = v8;
          goto LABEL_30;
        }
        result = re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
        goto LABEL_46;
      case 'b':
LABEL_26:
        v16 = (unsigned __int8 *)result[2];
        v5 = (unsigned __int8 *)result[3];
        v17 = v5 - v16;
        if ((unint64_t)(v5 - v16) > 1)
        {
          v18 = *(unsigned __int16 *)v16;
          v6 = v16 + 2;
          v7 = v18;
          goto LABEL_30;
        }
        v26 = 2;
        goto LABEL_44;
      case 'c':
LABEL_28:
        v19 = (unsigned __int8 *)result[2];
        v5 = (unsigned __int8 *)result[3];
        v17 = v5 - v19;
        if ((unint64_t)(v5 - v19) <= 3)
        {
          v26 = 4;
          goto LABEL_44;
        }
        v20 = *(_DWORD *)v19;
        v6 = v19 + 4;
        v7 = v20;
LABEL_30:
        result[2] = (uint64_t)v6;
        v21 = v5 - v6;
        if (v21 >= v7)
          goto LABEL_47;
        goto LABEL_34;
      case 'd':
LABEL_32:
        v22 = (_QWORD *)result[2];
        v23 = result[3];
        v17 = v23 - (_QWORD)v22;
        if ((unint64_t)(v23 - (_QWORD)v22) <= 7)
        {
          v26 = 8;
LABEL_44:
          result = re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", v26, v17);
LABEL_46:
          v7 = 0;
          v6 = (unsigned __int8 *)v2[2];
        }
        else
        {
          v24 = *v22;
          v6 = (unsigned __int8 *)(v22 + 1);
          v7 = v24;
          result[2] = (uint64_t)v6;
          v21 = v23 - (_QWORD)v6;
          if (v24 > v21)
          {
LABEL_34:
            result = re::snapshot::Decoder::error((const char **)result, "invalid size when skipping string or data: %zu, only %zu remaining", v7, v21);
            v6 = (unsigned __int8 *)v2[2];
            v7 = v2[3] - (_QWORD)v6;
          }
        }
LABEL_47:
        v3 = (uint64_t)&v6[v7];
        break;
      default:
        goto LABEL_35;
    }
LABEL_48:
    v2[2] = v3;
  }
  else
  {
    switch(a2)
    {
      case 145:
        goto LABEL_7;
      case 146:
        goto LABEL_26;
      case 147:
        goto LABEL_28;
      case 148:
        goto LABEL_32;
      default:
        if (a2 != 223 && a2 != 239)
          goto LABEL_35;
        v10 = (unsigned __int8 *)result[2];
        v9 = result[3];
        if ((unint64_t)v10 >= v9)
        {
          v11 = 0;
        }
        else
        {
          result[2] = (uint64_t)(v10 + 1);
          v11 = *v10++;
        }
        if ((unint64_t)v10 < v9 && v11 != 3)
        {
          do
          {
            result = (uint64_t *)re::snapshot::DecoderOPACK::skip(v2, v11);
            v12 = (unsigned __int8 *)v2[2];
            v13 = v2[3];
            if ((unint64_t)v12 >= v13)
              break;
            v14 = v12 + 1;
            v2[2] = (uint64_t)(v12 + 1);
            v11 = *v12;
          }
          while ((unint64_t)v14 < v13 && v11 != 3);
        }
        break;
    }
  }
  return result;
}

uint64_t re::snapshot::DecoderOPACK::readInteger(re::snapshot::DecoderOPACK *this, uint64_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  if ((unint64_t)v3 >= v4)
  {
LABEL_18:
    re::snapshot::Decoder::error((const char **)this, "expected integer, found tag %x");
  }
  else
  {
    v5 = v3 + 1;
    *((_QWORD *)this + 2) = v3 + 1;
    v6 = *v3;
    switch(*v3)
    {
      case '0':
        if ((unint64_t)v5 < v4)
        {
          *((_QWORD *)this + 2) = v3 + 2;
          a2 = (char)v3[1];
        }
        break;
      case '1':
        v7 = v4 - (_QWORD)v5;
        if (v7 <= 1)
        {
          re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 2uLL, v7);
        }
        else
        {
          LOWORD(a2) = *(_WORD *)(v3 + 1);
          *((_QWORD *)this + 2) = v3 + 3;
        }
        a2 = (__int16)a2;
        break;
      case '2':
        v8 = v4 - (_QWORD)v5;
        if (v8 <= 3)
        {
          re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 4uLL, v8);
        }
        else
        {
          LODWORD(a2) = *(_DWORD *)(v3 + 1);
          *((_QWORD *)this + 2) = v3 + 5;
        }
        a2 = (int)a2;
        break;
      case '3':
        if (v4 - (unint64_t)v5 <= 7)
        {
          re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining");
        }
        else
        {
          a2 = *(_QWORD *)(v3 + 1);
          *((_QWORD *)this + 2) = v3 + 9;
        }
        break;
      default:
        if ((v6 - 7) > 0x28)
          goto LABEL_18;
        a2 = (char)(v6 - 8);
        break;
    }
  }
  return a2;
}

void std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED88180;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED88180;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderRaw>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;

  v4 = *a3;
  v5 = (unsigned int *)a1[1];
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write(v5, *a2, a1[2]);
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write(v5, v4, a1[3]);
  return 1;
}

void std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED881C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED881C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1},std::allocator<re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(void const*,re::IntrospectionHashTableBase const&)::{lambda(void const*,void *)#1}>,BOOL ()(void const*,void *)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int *v5;

  v4 = *a3;
  v5 = (unsigned int *)a1[1];
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(v5, *a2, a1[2]);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::write(v5, v4, a1[3]);
  return 1;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED88210;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED88210;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48) + 80))();
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED88258;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED88258;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2, 0);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED882A0;
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED882A0;
}

double std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  double result;

  v2 = *a2;
  v3 = **a2;
  if (v3)
  {
    if ((v2[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2[2]);
    result = 0.0;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED882E8;
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED882E8;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::operator()(uint64_t a1, re::StringID **a2)
{
  re::StringID::destroyString(*a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED88330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED88330;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED88378;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED88378;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED883C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED883C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED88408;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED88408;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderRaw>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED88450;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED88450;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48) + 80))();
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED88498;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED88498;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#2}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2, 0);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED884E0;
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED884E0;
}

double std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#3}>,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  double result;

  v2 = *a2;
  v3 = **a2;
  if (v3)
  {
    if ((v2[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2[2]);
    result = 0.0;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED88528;
  return result;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED88528;
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#4}>,void ()(void *)>::operator()(uint64_t a1, re::StringID **a2)
{
  re::StringID::destroyString(*a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED88570;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED88570;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#5}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED885B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED885B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#6}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED88600;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED88600;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#7}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2);
}

void std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED88648;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED88648;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8},std::allocator<re::snapshot::Reader<re::snapshot::DecoderOPACK>::read(void *,re::IntrospectionStructure const&)::{lambda(void *)#8}>,void ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *a2);
}

uint64_t `anonymous namespace'::BinaryDeserializer::deserializeIntoBuffer(_anonymous_namespace_ *a1, const re::IntrospectionBase *a2, uint64_t a3, const re::IntrospectionBase **a4, uint64_t **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  _BYTE v25[12];
  __int128 v26;
  __int128 v27;
  _BYTE v28[12];
  _OWORD v29[2];
  int v30;
  uint64_t v31;
  _anonymous_namespace_ *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  char v41;
  uint64_t v42;
  _OWORD v43[2];
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char v51;

  *(_DWORD *)v25 = 0;
  v23 = 0u;
  v24 = 0u;
  *(_QWORD *)&v25[4] = 0x7FFFFFFFLL;
  v26 = 0u;
  v27 = 0u;
  *(_DWORD *)v28 = 0;
  *(_QWORD *)&v28[4] = 0x7FFFFFFFLL;
  memset(v29, 0, sizeof(v29));
  v30 = 0;
  v31 = 0x7FFFFFFFLL;
  v32 = a1;
  v33 = 0;
  v34 = a3;
  v35 = a8;
  v37 = 0uLL;
  *((_QWORD *)&v36 + 1) = 0;
  re::DynamicString::setCapacity(&v36, 0);
  v38 = a6;
  v39 = a7;
  v41 = 0;
  v40[0] = &off_24ED42538;
  v40[1] = "ScratchAutoFreeAllocator";
  v42 = a7;
  memset(v43, 0, sizeof(v43));
  v44 = 0;
  v45 = 0x7FFFFFFFLL;
  re::HashSetBase<void *,void *,re::internal::ValueAsKey<void *>,re::Hash<void *>,re::EqualTo<void *>,true,false>::init((uint64_t)v43, a7, 3);
  v50 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v46 = a7;
  re::DynamicArray<re::EvaluationRegister>::setCapacity(&v46, 0);
  ++v49;
  *(_QWORD *)&v36 = a7;
  re::DynamicString::setCapacity(&v36, 0);
  v14 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)a1 + 24))(a1);
  {
    v51 = 0;
    if ((*(uint64_t (**)(_anonymous_namespace_ *, char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v51, 1) == 1)
    {
      if (v51 == 69)
      {
        v21 = 1;
        goto LABEL_9;
      }
    }
    else
    {
    }
  }
  else
  {
  }
  v21 = 0;
LABEL_9:
  if (v46)
  {
    if (v50)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD, _QWORD))(*(_QWORD *)v46 + 40))(v46, v50, v15, v16, v17, v18, v19, v20, v23, *((_QWORD *)&v23 + 1), v24, *((_QWORD *)&v24 + 1), *(_QWORD *)v25, *(_DWORD *)&v25[8], v26, *((_QWORD *)&v26 + 1), v27, *((_QWORD *)&v27 + 1), *(_QWORD *)v28,
        *(_DWORD *)&v28[8],
        *(_QWORD *)&v29[0],
        *((_QWORD *)&v29[0] + 1));
    v50 = 0;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    ++v49;
  }
  re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)v40);
  if ((_QWORD)v36)
  {
    if ((BYTE8(v36) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v36 + 40))();
    v36 = 0u;
    v37 = 0u;
  }
  return v21;
}

_anonymous_namespace_ *`anonymous namespace'::BinaryDeserializer::addPointer(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;

  v9 = result;
  v10 = *((_QWORD *)result + 39);
  v11 = *((_QWORD *)result + 40);
  v12 = v11 + 1;
  if (v11 >= v10 && v10 < v12)
  {
    if (*((_QWORD *)result + 38))
    {
      v15 = 2 * v10;
      v16 = v10 == 0;
      v17 = 8;
      if (!v16)
        v17 = v15;
      if (v17 <= v12)
        v18 = v12;
      else
        v18 = v17;
      result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)result + 38, v18);
    }
    else
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)v9 + 38, v12);
      ++*((_DWORD *)v9 + 82);
    }
  }
  v14 = (_QWORD *)(*((_QWORD *)v9 + 42) + 32 * *((_QWORD *)v9 + 40));
  *v14 = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a4;
  ++*((_QWORD *)v9 + 40);
  ++*((_DWORD *)v9 + 82);
  return result;
}

uint64_t `anonymous namespace'::BinaryDeserializer::read(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2, const re::IntrospectionBase **a3, uint64_t **a4)
{
  int v7;
  uint64_t **v8;
  NSObject *v9;
  uint64_t v10;
  const re::IntrospectionBase *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  const re::IntrospectionBase *v30;
  int v31;
  _BOOL4 isCharInfo;
  const re::IntrospectionBase *v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  const char *v41;
  const re::IntrospectionBase *v42;
  const re::IntrospectionBase *v43;
  char *v44;
  const char *v45;
  const re::IntrospectionBase *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  NSObject *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  const char *v55;
  re *v56;
  NSObject *v57;
  uint64_t v58;
  const re::IntrospectionBase *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  int v65;
  re *v66;
  re::Allocator *v67;
  re::IntrospectionBase *v68;
  int v69;
  void *v70;
  int v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unint64_t v76;
  unint64_t i;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  re *v84;
  uint64_t v85;
  uint64_t *v86;
  BOOL v87;
  void (*v88)(_QWORD);
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t *v96;
  NSObject *v97;
  unsigned int *v98;
  NSObject *v99;
  uint64_t v100;
  _QWORD *v101;
  void *v102;
  _DWORD *v103;
  uint64_t v104;
  char v105;
  NSObject *v106;
  uint64_t **v107;
  uint64_t **v108;
  _QWORD v109[3];
  unint64_t v110;
  uint8_t v111[16];
  uint8_t buf[32];
  _QWORD v113[4];

  v113[3] = *MEMORY[0x24BDAC8D0];
  v7 = *((_DWORD *)a2 + 4);
  if (v7 != *((_DWORD *)a3 + 4))
  {
    re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
    if ((buf[8] & 1) != 0)
      v15 = *(const char **)&buf[16];
    else
      v15 = (const char *)&buf[9];
    re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)&v108);
    if ((v109[0] & 1) != 0)
      v16 = (const char *)v109[1];
    else
      v16 = (char *)v109 + 1;
    if (v108 && (v109[0] & 1) != 0)
      ((void (*)(void))(*v108)[5])();
LABEL_15:
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    return 0;
  }
  v8 = a4;
  switch(v7)
  {
    case 0:
      if (a2 != (const re::IntrospectionBase *)a3)
      {
        v9 = *re::foundationSerializationLogObjects(this);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          return 0;
        v10 = *((_QWORD *)a2 + 6);
        v11 = a3[6];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v11;
        v12 = "Binary Deserialization; Basic types don't match '%s' and '%s'.";
        v13 = v9;
        v14 = 22;
        goto LABEL_71;
      }
      v60 = *((int *)a2 + 5);
      if ((*(uint64_t (**)(_QWORD, uint64_t **, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), a4, v60) == v60)return 1;
      return 0;
    case 1:
      v17 = *((_QWORD *)a2 + 6);
      v18 = (uint64_t)a3[6];
      v108 = a4;
      v19 = *(_DWORD *)(v17 + 16);
      if (v19 != *(_DWORD *)(v18 + 16))
      {
        return 0;
      }
      if (v19 != 8)
        goto LABEL_33;
      v20 = *(unsigned int *)(v17 + 56);
      if (!(_DWORD)v20)
        goto LABEL_24;
      v21 = *(_QWORD **)(v17 + 64);
      while (1)
      {
        v22 = (_DWORD *)*v21;
        if (*(_DWORD *)*v21 == 2)
          break;
        ++v21;
        if (!--v20)
        {
LABEL_24:
          v22 = 0;
          break;
        }
      }
      v23 = *(unsigned int *)(v18 + 56);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD **)(v18 + 64);
        v25 = v24;
        v26 = *(unsigned int *)(v18 + 56);
        do
        {
          v27 = (_DWORD *)*v25;
          if (*(_DWORD *)*v25 == 2)
            goto LABEL_30;
          ++v25;
          --v26;
        }
        while (v26);
        v27 = 0;
LABEL_30:
        while (1)
        {
          v28 = (_DWORD *)*v24;
          if (*(_DWORD *)*v24 == 3)
            break;
          ++v24;
          if (!--v23)
            goto LABEL_32;
        }
        if ((v22 != 0) != (v27 != 0))
          goto LABEL_123;
        if (v22)
        {
          if (*a4)
          {
            re::introspectionReleasePointer(*a4, *((_QWORD *)this + 26), *((_QWORD *)this + 21), v18);
            *v8 = 0;
          }
        }
      }
      else
      {
LABEL_32:
        if (v22)
        {
LABEL_123:
          return 0;
        }
      }
LABEL_33:
      v29 = *((_QWORD *)this + 18);
      buf[0] = 0;
      if ((*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v29 + 16))(v29, buf, 1) == 1)
      {
        v31 = buf[0];
        {
          return 0;
        }
        *(_QWORD *)buf = v18;
        *(_QWORD *)&buf[8] = v17;
        *(_QWORD *)&buf[16] = this;
        *(_QWORD *)&buf[24] = &v108;
        if (v31 == 73)
        if (v31 != 82)
        {
          if (v31 != 78)
          {
            return 0;
          }
          goto LABEL_120;
        }
        LODWORD(v110) = 0;
        if ((*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v110, 4) != 4)
        {
          return 0;
        }
        if (*((_QWORD *)this + 40) <= (unint64_t)v110)
        {
          return 0;
        }
        v85 = (uint64_t)v84;
        v86 = *(uint64_t **)v84;
        if (*((_QWORD *)v84 + 3))
          v87 = v86 == 0;
        else
          v87 = 0;
        if (!v87 && *(_DWORD *)(v18 + 16) == 8 && (v88 = *(void (**)(_QWORD))(v18 + 88)) != 0)
        {
          if (!v86)
          {
            v106 = *re::foundationSerializationLogObjects(v84);
            if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v111 = 0;
              _os_log_impl(&dword_224FE9000, v106, OS_LOG_TYPE_DEFAULT, "Binary Deserialization; reference is null because source was skipped.",
                v111,
                2u);
            }
            v8 = v108;
LABEL_120:
            if (*v8)
            {
              re::introspectionReleasePointer(*v8, *((_QWORD *)this + 26), *((_QWORD *)this + 21), v18);
              *v8 = 0;
            }
            return 1;
          }
          if (*((_QWORD *)v84 + 1) != v18)
          {
            return 0;
          }
          v88(*(_QWORD *)v84);
          v107 = v108;
          if (*v108)
          {
            re::introspectionReleasePointer(*v108, *((_QWORD *)this + 26), *((_QWORD *)this + 21), v18);
            *v107 = 0;
            v107 = v108;
          }
          *v107 = v86;
        }
        else
        {
          v104 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
          if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 18) + 56))(*((_QWORD *)this + 18), *(_QWORD *)(v85 + 24)) & 1) == 0)
          {
            return 0;
          }
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 18) + 56))(*((_QWORD *)this + 18), v104) & 1) == 0)
          {
            return 0;
          }
          if ((v105 & 1) == 0)
          {
            return 0;
          }
        }
        return 1;
      }
      return 0;
    case 2:
      v34 = *((int *)a2 + 16);
      if ((_DWORD)v34 == *((_DWORD *)a3 + 16))
      v50 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        v12 = "Binary Deserialization; C-style array length changed.";
        v13 = v50;
        v14 = 2;
LABEL_71:
        _os_log_debug_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEBUG, v12, buf, v14);
      }
      return 0;
    case 3:
      *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
      *(_DWORD *)buf = 1;
      if ((*(uint64_t (**)(_QWORD, uint8_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), buf, 4) != 4)
      {
        return 0;
      }
      v36 = *(unsigned int *)buf;
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) < v36)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
        return 0;
      }
      (*((void (**)(const re::IntrospectionBase **, _QWORD, _QWORD, uint64_t **, _QWORD))*a3 + 9))(a3, *((_QWORD *)this + 26), *((_QWORD *)this + 21), v8, *(unsigned int *)buf);
      v61 = *(_DWORD *)buf;
      goto LABEL_90;
    case 4:
      *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
      *(_DWORD *)buf = 1;
      if ((*(uint64_t (**)(_QWORD, uint8_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), buf, 4) != 4)
      {
        return 0;
      }
      v37 = *(unsigned int *)buf;
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) < v37)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
        return 0;
      }
      if (((*((uint64_t (**)(const re::IntrospectionBase **, uint64_t **))*a3 + 11))(a3, v8) & 1) == 0)
        (*((void (**)(const re::IntrospectionBase **, uint64_t **, _QWORD, _QWORD, _QWORD))*a3 + 8))(a3, v8, *((_QWORD *)this + 26), *((_QWORD *)this + 21), *(unsigned int *)buf);
      v62 = (*((uint64_t (**)(const re::IntrospectionBase **, uint64_t **))*a3 + 10))(a3, v8);
      v61 = *(_DWORD *)buf;
      if (v62 != *(unsigned int *)buf)
      {
        return 0;
      }
LABEL_90:
      if (!v61)
        return 1;
      v63 = (char *)(*((uint64_t (**)(const re::IntrospectionBase **, uint64_t **, _QWORD))*a3 + 12))(a3, v8, 0);
    case 5:
      *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
      *(_DWORD *)buf = 1;
      if ((*(uint64_t (**)(_QWORD, uint8_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), buf, 4) != 4)
      {
        return 0;
      }
      v38 = *(unsigned int *)buf;
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) < v38)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
        return 0;
      }
      if ((*((unsigned int (**)(const re::IntrospectionBase **, uint64_t **))*a3 + 10))(a3, v8))
      {
        return 0;
      }
      if (!*(_DWORD *)buf)
        return 1;
      v71 = 0;
      v64 = 1;
      while (1)
      {
        v72 = (void *)(*((uint64_t (**)(const re::IntrospectionBase **, _QWORD, _QWORD, uint64_t **))*a3 + 9))(a3, *((_QWORD *)this + 26), *((_QWORD *)this + 21), v8);
        if (++v71 >= *(_DWORD *)buf)
          return v64;
      }
      return 0;
    case 6:
    case 7:
      *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
      LODWORD(v108) = 1;
      if ((*(uint64_t (**)(_QWORD, uint64_t ***, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v108, 4) != 4)
      {
        return 0;
      }
      v39 = v108;
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) < v39)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
        return 0;
      }
      (*((void (**)(const re::IntrospectionBase **, uint64_t **, _QWORD, _QWORD))*a3 + 8))(a3, v8, *((_QWORD *)this + 26), v108);
      *(_QWORD *)buf = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 27) + 32))(*((_QWORD *)this + 27), *((int *)a3[6] + 5), 0);
      *(_QWORD *)&buf[8] = &off_24ED88690;
      v113[0] = &buf[8];
      *(_QWORD *)&buf[16] = this;
      if (!(_DWORD)v108)
        goto LABEL_100;
      v65 = 0;
      while (2)
      {
        v66 = (re *)*((_QWORD *)this + 26);
        v67 = a3[6];
        v68 = *(re::IntrospectionBase **)buf;
        re::introspectionCallConstructor(*((_anonymous_namespace_ **)this + 21), (uint64_t)v67, *(uint64_t *)buf);
        re::introspectionInitElement(v66, v69, v67, v68);
        {
          v70 = (void *)(*((uint64_t (**)(const re::IntrospectionBase **, _QWORD, _QWORD, uint64_t **, _QWORD))*a3
                         + 12))(a3, *((_QWORD *)this + 26), *((_QWORD *)this + 21), v8, *(_QWORD *)buf);
          (*((void (**)(const re::IntrospectionBase **, _QWORD))*a3 + 14))(a3, *(_QWORD *)buf);
          {
            if (++v65 >= v108)
            {
LABEL_100:
              v64 = 1;
              goto LABEL_129;
            }
            continue;
          }
        }
        else
        {
          (*((void (**)(const re::IntrospectionBase **, _QWORD))*a3 + 14))(a3, *(_QWORD *)buf);
        }
        break;
      }
      v64 = 0;
LABEL_129:
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
      return v64;
    case 8:
    case 9:
      v40 = *((unsigned int *)a2 + 5);
      if ((v40 - 9) <= 0xFFFFFFF7)
      {
        return 0;
      }
      v110 = 0;
      if ((*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v110, v40) != v40)
      {
        return 0;
      }
      v51 = v110;
      if (a2 == (const re::IntrospectionBase *)a3)
        goto LABEL_188;
      v52 = (_QWORD *)((char *)this + 48);
      if (!*((_QWORD *)this + 6))
        goto LABEL_80;
      v53 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
      v54 = *(unsigned int *)(*((_QWORD *)this + 7) + 4 * ((v53 ^ (v53 >> 31)) % *((unsigned int *)this + 18)));
      if ((_DWORD)v54 == 0x7FFFFFFF)
        goto LABEL_80;
      v73 = *((_QWORD *)this + 8);
      if (*(const re::IntrospectionBase **)(v73 + 72 * v54 + 16) == a2)
        goto LABEL_133;
      while (1)
      {
        LODWORD(v54) = *(_DWORD *)(v73 + 72 * v54 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v54 == 0x7FFFFFFF)
          break;
        if (*(const re::IntrospectionBase **)(v73 + 72 * v54 + 16) == a2)
        {
LABEL_133:
          v74 = v73 + 72 * v54;
          goto LABEL_186;
        }
      }
LABEL_80:
      v55 = (const char *)*((_QWORD *)a2 + 6);
      v56 = (re *)strcmp(v55, (const char *)a3[6]);
      if ((_DWORD)v56)
      {
        v57 = *re::foundationSerializationLogObjects(v56);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
        {
          v58 = *((_QWORD *)a2 + 6);
          v59 = a3[6];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v58;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v59;
          _os_log_impl(&dword_224FE9000, v57, OS_LOG_TYPE_INFO, "Binary Deserialization; enum name changed '%s' and '%s'.",
            buf,
            0x16u);
        }
        return 0;
      }
      LODWORD(v113[0]) = 0;
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)((char *)v113 + 4) = 0x7FFFFFFFLL;
      v75 = (unsigned int *)*((_QWORD *)a2 + 8);
      v76 = *v75;
      if ((_DWORD)v76)
      {
        for (i = 0; i < v76; ++i)
        {
          v78 = *(_QWORD *)(*((_QWORD *)v75 + 1) + 8 * i);
          if (*(_DWORD *)v78 == 1)
          {
            re::getIntrospectionEnumValueWithVersioning((unsigned int *)a3[8], *(char **)(v78 + 16), (uint64_t)&v108);
            if ((_BYTE)v108)
            {
              re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<unsigned long long &>((uint64_t)buf, (uint64_t *)(v78 + 8), v109);
              v75 = (unsigned int *)*((_QWORD *)a2 + 8);
            }
            v76 = *v75;
          }
        }
        v55 = (const char *)*((_QWORD *)a2 + 6);
      }
      if (!strcmp(v55, "REAudioPlaybackState"))
      {
      }
      v79 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
      v80 = v79 ^ (v79 >> 31);
      if (*v52)
      {
        v81 = v80 % *((unsigned int *)this + 18);
        v82 = *(unsigned int *)(*((_QWORD *)this + 7) + 4 * v81);
        if ((_DWORD)v82 != 0x7FFFFFFF)
        {
          v83 = *((_QWORD *)this + 8);
          if (*(const re::IntrospectionBase **)(v83 + 72 * v82 + 16) == a2)
            goto LABEL_175;
          while (1)
          {
            LODWORD(v82) = *(_DWORD *)(v83 + 72 * v82 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v82 == 0x7FFFFFFF)
              break;
            if (*(const re::IntrospectionBase **)(v83 + 72 * v82 + 16) == a2)
              goto LABEL_175;
          }
        }
      }
      else
      {
        LODWORD(v81) = 0;
      }
      v89 = *((unsigned int *)this + 21);
      if ((_DWORD)v89 == 0x7FFFFFFF)
      {
        v89 = *((unsigned int *)this + 20);
        v90 = v89;
        if ((_DWORD)v89 == *((_DWORD *)this + 18))
        {
          LODWORD(v81) = v80 % *((unsigned int *)this + 18);
          v90 = *((_DWORD *)this + 20);
        }
        *((_DWORD *)this + 20) = v90 + 1;
        v91 = *((_QWORD *)this + 8);
        v92 = *(_DWORD *)(v91 + 72 * v89 + 8);
      }
      else
      {
        v91 = *((_QWORD *)this + 8);
        v92 = *(_DWORD *)(v91 + 72 * v89 + 8);
        *((_DWORD *)this + 21) = v92 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v91 + 72 * v89 + 8) = v92 | 0x80000000;
      *(_DWORD *)(*((_QWORD *)this + 8) + 72 * v89 + 8) = *(_DWORD *)(*((_QWORD *)this + 8) + 72 * v89 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 7) + 4 * v81);
      *(_QWORD *)(*((_QWORD *)this + 8) + 72 * v89) = v80;
      *(_QWORD *)(*((_QWORD *)this + 8) + 72 * v89 + 16) = a2;
      re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(*((_QWORD *)this + 8) + 72 * v89 + 24, (uint64_t)buf);
      *(_DWORD *)(*((_QWORD *)this + 7) + 4 * v81) = v89;
      ++*((_DWORD *)this + 19);
      ++*((_DWORD *)this + 22);
LABEL_175:
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)buf);
      v93 = 0x7FFFFFFF;
      if (*v52)
      {
        v94 = *(_DWORD *)(*((_QWORD *)this + 7) + 4 * (v80 % *((unsigned int *)this + 18)));
        if (v94 != 0x7FFFFFFF)
        {
          v95 = *((_QWORD *)this + 8);
          if (*(const re::IntrospectionBase **)(v95 + 72 * v94 + 16) == a2)
          {
            v93 = *(_DWORD *)(*((_QWORD *)this + 7) + 4 * (v80 % *((unsigned int *)this + 18)));
          }
          else
          {
            while (1)
            {
              v93 = *(_DWORD *)(v95
                              + 72
                              * *(unsigned int *)(*((_QWORD *)this + 7) + 4 * (v80 % *((unsigned int *)this + 18)))
                              + 8) & 0x7FFFFFFF;
              if (v93 == 0x7FFFFFFF)
                break;
              if (*(const re::IntrospectionBase **)(v95 + 72 * v93 + 16) == a2)
                goto LABEL_185;
            }
            v93 = 0x7FFFFFFF;
          }
        }
      }
LABEL_185:
      v74 = *((_QWORD *)this + 8) + 72 * v93;
LABEL_186:
      v96 = (unint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v74 + 24, v51);
      if (v96)
      {
        v51 = *v96;
LABEL_188:
        *(_QWORD *)buf = v51;
        memcpy(v8, buf, *((int *)a3 + 5));
        return 1;
      }
      v97 = *re::foundationSerializationLogObjects(0);
      if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
      {
        v98 = (unsigned int *)*((_QWORD *)a2 + 8);
        v99 = v97;
        v100 = *v98;
        if ((_DWORD)v100)
        {
          v101 = (_QWORD *)*((_QWORD *)v98 + 1);
          v102 = &str_28_13;
          while (1)
          {
            v103 = (_DWORD *)*v101;
            if (*(_DWORD *)*v101 == 1 && *((_QWORD *)v103 + 1) == v51)
              break;
            ++v101;
            if (!--v100)
              goto LABEL_203;
          }
          v102 = (void *)*((_QWORD *)v103 + 2);
        }
        else
        {
          v102 = &str_28_13;
        }
LABEL_203:
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v102;
        _os_log_impl(&dword_224FE9000, v99, OS_LOG_TYPE_INFO, "Binary Deserialization; unknown enum value '%s'.",
          buf,
          0xCu);

      }
      return 0;
    case 10:
      if ((*((_BYTE *)this + 184) & 1) != 0)
        v41 = (const char *)*((_QWORD *)this + 24);
      else
        v41 = (char *)this + 185;
      re::StringID::StringID((re::StringID *)buf, v41);
      re::StringID::operator=((uint64_t *)v8, (uint64_t *)buf);
      re::StringID::destroyString((re::StringID *)buf);
      return 1;
    case 11:
      v43 = a3[10];
      if (v43)
        goto LABEL_59;
      if (!re::IntrospectionRegistry::contains((re::IntrospectionRegistry *)a3, v42))
        return 1;
      v43 = a3[10];
      if (!v43)
      {
        return 0;
      }
LABEL_59:
      if ((*((_BYTE *)this + 184) & 1) != 0)
        v44 = (char *)*((_QWORD *)this + 24);
      else
        v44 = (char *)this + 185;
      if ((((uint64_t (*)(_QWORD, _QWORD, const re::IntrospectionBase **, uint64_t **, char *))v43)(*((_QWORD *)this + 26), *((_QWORD *)this + 21), a3, v8, v44) & 1) != 0)return 1;
      return 0;
    case 13:
      buf[0] = 0;
      if ((*(uint64_t (**)(_QWORD, uint8_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), buf, 1) != 1)
      {
        return 0;
      }
      (*((void (**)(const re::IntrospectionBase **, uint64_t **, _QWORD))*a3 + 8))(a3, v8, buf[0]);
      if (!buf[0])
        return 1;
      v46 = (const re::IntrospectionBase *)*((_QWORD *)a2 + 6);
      v47 = a3[6];
      v48 = (void *)(*((uint64_t (**)(const re::IntrospectionBase **, uint64_t **))*a3 + 9))(a3, v8);
    default:
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
      if ((buf[8] & 1) != 0)
        v45 = *(const char **)&buf[16];
      else
        v45 = (const char *)&buf[9];
      goto LABEL_15;
  }
}

void `anonymous namespace'::BinaryDeserializer::logError(_anonymous_namespace_::BinaryDeserializer *this, const char *__format, ...)
{
  re *v3;
  NSObject *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);
  const char *v9;
  re *v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  uint8_t v16[4];
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  char *v21;
  uint8_t buf[4];
  char *v23;
  char __str[256];
  uint64_t v25;
  va_list va;

  va_start(va, __format);
  v25 = *MEMORY[0x24BDAC8D0];
  v3 = (re *)vsnprintf(__str, 0x100uLL, __format, va);
  v4 = *re::foundationSerializationLogObjects(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v23 = __str;
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Binary Deserialization; %s", buf, 0xCu);
  }
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
  v6 = *((_QWORD *)this + 19);
  if (v5 > v6)
  {
    v7 = v5;
    v8 = *(uint64_t (**)(void))(**((_QWORD **)this + 18) + 40);
    if (v5 - v6 > 0x40)
    {
      v11 = (const char *)v8();
      strcpy(&__str[v12], " ... ");
      v13 = (const char *)(*(uint64_t (**)(_QWORD, uint8_t *, unint64_t, uint64_t))(**((_QWORD **)this + 18)
                                                                                                  + 40))(*((_QWORD *)this + 18), buf, v7 - 32, 32);
      if (!&v11[(_QWORD)v13])
        return;
    }
    else
    {
      v9 = (const char *)v8();
      if (!v9)
        return;
    }
    v14 = *re::foundationSerializationLogObjects(v10);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = *((_QWORD *)this + 19);
      *(_DWORD *)v16 = 134218498;
      v17 = v15;
      v18 = 2048;
      v19 = v7 - 1;
      v20 = 2080;
      v21 = __str;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "  Input bytes %zu thru %zu: %s", v16, 0x20u);
    }
    *((_QWORD *)this + 19) = v7;
  }
}

uint64_t `anonymous namespace'::BinaryDeserializer::readStructure(_anonymous_namespace_ **this, const re::IntrospectionBase *a2, const re::IntrospectionBase *a3, char *a4)
{
  const re::IntrospectionStructure *StructureVersion;
  const re::IntrospectionStructure *v9;
  unint64_t v10;
  unint64_t v12;
  re *v13;
  const re::IntrospectionBase *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;

  StructureVersion = (const re::IntrospectionStructure *)re::introspectionFindStructureVersion(a2, a2);
  v10 = re::introspectionFindStructureVersion(a3, v9);
  if (StructureVersion == (const re::IntrospectionStructure *)v10)
  v12 = v10;
  v13 = re::introspectionFindForVersion((uint64_t **)a3, StructureVersion);
  if (v13)
  {
    v14 = v13;
    v15 = (char *)re::introspectionAllocPointer(this[26], this[21], v13);
    if (v14 == a3)
    {
      {
        v16 = (uint64_t)this[26];
        v17 = (uint64_t)this[21];
        v18 = (uint64_t *)v15;
        v19 = a3;
        goto LABEL_13;
      }
    }
    {
      v16 = (uint64_t)this[26];
      v17 = (uint64_t)this[21];
      v18 = (uint64_t *)v15;
      v19 = v14;
LABEL_13:
      re::introspectionReleasePointer(v18, v16, v17, (uint64_t)v19);
      return 0;
    }
    if ((re::introspectionRunComplexVersion(this[26], this[21], (uint64_t)v14, (unint64_t)StructureVersion, (uint64_t *)v15, (uint64_t)a3, v12, (re::IntrospectionBase *)a4) & 1) != 0)return 1;
  }
  else
  {
  }
  return 0;
}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<unsigned long long &>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)result)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(result + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(result, v9, v8, a2, a3);
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(result + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v11 + 32 * v10 + 24) = *a3;
LABEL_9:
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t `anonymous namespace'::BinaryDeserializer::addMissingEnumValue(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  unint64_t v15;

  v15 = a3;
  result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a2, (uint64_t *)&v15);
  if ((result & 1) == 0)
  {
    result = (uint64_t)re::getIntrospectionEnumValueWithVersioning(*(unsigned int **)(a1 + 64), a4, (uint64_t)v13);
    if (v13[0])
    {
      v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
      v9 = v8 ^ (v8 >> 31);
      if (*(_QWORD *)a2)
      {
        v10 = v9 % *(unsigned int *)(a2 + 24);
        v11 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * v10);
        if ((_DWORD)v11 != 0x7FFFFFFF)
        {
          v12 = *(_QWORD *)(a2 + 16);
          if (*(_QWORD *)(v12 + 32 * v11 + 16) == v15)
            return result;
          while (1)
          {
            v11 = *(_DWORD *)(v12 + 32 * v11 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v11 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v12 + 32 * v11 + 16) == v15)
              return result;
          }
        }
      }
      else
      {
        LODWORD(v10) = 0;
      }
      result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a2, v10, v9, &v15, &v14);
      ++*(_DWORD *)(a2 + 40);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
    if (*(_DWORD *)(a1 + 28))
    {
      v6 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v6)
        memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v6);
      v7 = *(unsigned int *)(a1 + 32);
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = 32 * v7;
        do
        {
          v10 = *(_QWORD *)(a1 + 16) + v8;
          v11 = *(_DWORD *)(v10 + 8);
          if (v11 < 0)
            *(_DWORD *)(v10 + 8) = v11 & 0x7FFFFFFF;
          v8 += 32;
        }
        while (v9 != v8);
      }
      *(_DWORD *)(a1 + 28) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      v12 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 40) = v12;
    }
    v13 = *(_DWORD *)(a2 + 28);
    if (*(_DWORD *)(a1 + 24) < v13)
      re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v13);
    v14 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v14)
    {
      v15 = 0;
      for (i = 0; i < v14; ++i)
      {
        v17 = *(_QWORD *)(a2 + 16) + v15;
        if ((*(_DWORD *)(v17 + 8) & 0x80000000) != 0)
        {
          re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(_QWORD *)v17 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v17, (_QWORD *)(v17 + 16), (_QWORD *)(v17 + 24));
          v14 = *(unsigned int *)(a2 + 32);
        }
        v15 += 32;
      }
    }
  }
  return a1;
}

void re::HashTable<re::IntrospectionEnum const*,`anonymous namespace'::BinaryDeserializer::EnumVersionTable,re::Hash<re::IntrospectionEnum const*>,re::EqualTo<re::IntrospectionEnum const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (uint64_t *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            v14 = *(v13 - 3);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 16) = *(v13 - 1);
            v21 = *(_QWORD *)(a1 + 16) + 72 * v17;
            *(_OWORD *)(v21 + 24) = 0u;
            v21 += 24;
            *(_DWORD *)(v21 + 32) = 0;
            *(_OWORD *)(v21 + 16) = 0u;
            *(_QWORD *)(v21 + 36) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v21, v13);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 9;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

uint64_t *re::HashTable<re::IntrospectionEnum const*,`anonymous namespace'::BinaryDeserializer::EnumVersionTable,re::Hash<re::IntrospectionEnum const*>,re::EqualTo<re::IntrospectionEnum const*>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t `anonymous namespace'::BinaryDeserializer::readDynamicString(_anonymous_namespace_::BinaryDeserializer *this, re::DynamicString *a2)
{
  unint64_t v4;
  uint64_t v6;
  re::DynamicString *v7;
  unint64_t v8;

  *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
  LODWORD(v8) = 0;
  if ((*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v8, 4) == 4)
  {
    v4 = v8;
    if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) >= v4)
    {
      re::DynamicString::resize(a2, v8, -51);
      v6 = v8;
      if (!(_DWORD)v8)
        return 1;
      v7 = (*((_QWORD *)a2 + 1) & 1) != 0
         ? (re::DynamicString *)*((_QWORD *)a2 + 2)
         : (re::DynamicString *)((char *)a2 + 9);
      if ((*(uint64_t (**)(_QWORD, re::DynamicString *, _QWORD))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), v7, v8) == v6)return 1;
    }
    else
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
    }
  }
  else
  {
  }
  return 0;
}

uint64_t `anonymous namespace'::BinaryDeserializer::readPointerPolymorphic(_anonymous_namespace_::BinaryDeserializer *this, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  uint64_t **v11;
  uint64_t v12;
  int v13;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  char v20;
  NSObject *v21;
  uint8_t buf[12];
  unsigned int v23;
  uint64_t v24[9];
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;

  v30 = a4;
  v31 = a2;
  v28 = a6;
  v29 = a5;
  v27 = a7;
  v26 = a8;
  v25 = a9;
  if (a4 && a5)
  {
    v11 = a2;
    if (*a2)
    {
      re::introspectionReleasePointer(*a2, *((_QWORD *)this + 26), *((_QWORD *)this + 21), a8);
      *v11 = 0;
    }
    v12 = *((_QWORD *)this + 18);
    LOBYTE(v24[0]) = 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v24, 1) == 1)
    {
      v13 = LOBYTE(v24[0]);
      v24[0] = (uint64_t)this;
      v24[1] = (uint64_t)&v30;
      v24[2] = (uint64_t)&v29;
      v24[3] = a3;
      v24[4] = (uint64_t)&v25;
      v24[5] = (uint64_t)&v28;
      v24[6] = (uint64_t)&v27;
      v24[7] = (uint64_t)&v26;
      v24[8] = (uint64_t)&v31;
      switch(v13)
      {
        case 'I':
        case 'R':
          v23 = 0;
          if ((*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v23, 4) == 4)
          {
            if (*((_QWORD *)this + 40) <= (unint64_t)v23)
            {
            }
            else
            {
              v16 = v15;
              v17 = (uint64_t *)*v15;
              if ((*v15 || !v15[3]) && (v18 = *(void (**)(uint64_t))(a3 + 88)) != 0)
              {
                if (!v17)
                {
                  v21 = *re::foundationSerializationLogObjects((re *)v15);
                  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "Binary Deserialization; reference is null because source was skipped.",
                      buf,
                      2u);
                  }
                  v11 = v31;
                  if (!*v31)
                    return 1;
                  re::introspectionReleasePointer(*v31, *((_QWORD *)this + 26), *((_QWORD *)this + 21), a3);
                  goto LABEL_9;
                }
                if (v15[1] == a3)
                {
                  v18(*v15);
                  *v31 = v17;
                  return 1;
                }
              }
              else
              {
                v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
                if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 18) + 56))(*((_QWORD *)this + 18), v16[3]) & 1) != 0)
                {
                  if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 18) + 56))(*((_QWORD *)this + 18), v19) & 1) != 0)
                  {
                    if ((v20 & 1) != 0)
                      return 1;
                  }
                  else
                  {
                  }
                }
                else
                {
                }
              }
            }
          }
          else
          {
          }
          break;
        case 'N':
LABEL_9:
          *v11 = 0;
          return 1;
        default:
          break;
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

BOOL `anonymous namespace'::BinaryDeserializer::isCharInfo(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  int v5;
  const re::IntrospectionBase *v6;
  int v7;
  _anonymous_namespace_::BinaryDeserializer *v8;

  v3 = &unk_255825000;
  if ((v2 & 1) == 0)
  {
    v8 = this;
    v3 = (_QWORD *)&unk_255825000;
    v7 = v5;
    this = v8;
    if (v7)
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v6);
      v3 = (_QWORD *)&unk_255825000;
      this = v8;
    }
  }
  return v3[174] == (_QWORD)this;
}

uint64_t `anonymous namespace'::BinaryDeserializer::readPointer(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(`anonymous namespace'::BinaryDeserializer::PointerMapEntry *,unsigned int)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t v9;
  const re::IntrospectionBase *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ***v17;
  uint64_t **v18;
  uint64_t *v19;
  const char *v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(const re::IntrospectionBase **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)a1;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 144) + 24))(*(_QWORD *)(v6 + 144));
  {
    v12 = ***(uint64_t ****)(a1 + 24);
    v13 = v12;
    if (v12)
    {
      if (a2)
        goto LABEL_22;
    }
    else
    {
      v13 = (uint64_t *)re::introspectionAllocPointer(*(re **)(v6 + 208), *(_anonymous_namespace_ **)(v6 + 168), (re::Allocator *)v8);
      if (a2)
        goto LABEL_22;
    }
    if (*(_DWORD *)(v8 + 16) == 8)
    {
      if (*(_QWORD *)(v8 + 88))
        v14 = (uint64_t)v13;
      else
        v14 = 0;
    }
    else
    {
      v14 = 0;
    }
LABEL_22:
    {
      re::getPrettyTypeName(*(re **)(a1 + 8), (const re::IntrospectionBase *)&v24);
      if ((BYTE8(v24) & 1) != 0)
        v22 = (const char *)v25;
      else
        v22 = (char *)&v24 + 9;
      if ((_QWORD)v24 && (BYTE8(v24) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      if (*(_QWORD *)(v6 + 320) <= (unint64_t)a3)
      {
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v23 = (_QWORD *)(*(_QWORD *)(v6 + 336) + 32 * a3);
      *v23 = 0;
      v23[2] = 0;
      if (!v12)
        re::introspectionReleasePointer(v13, *(_QWORD *)(v6 + 208), *(_QWORD *)(v6 + 168), v8);
      return 0;
    }
    goto LABEL_23;
  }
  if (!a2)
  LODWORD(v24) = 0;
  if ((*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(v6 + 144) + 16))(*(_QWORD *)(v6 + 144), &v24, 4) != 4)
  {
    return 0;
  }
  v11 = v24;
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 144) + 32))(*(_QWORD *)(v6 + 144)) < v11)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 144) + 32))(*(_QWORD *)(v6 + 144));
    return 0;
  }
  v15 = (v24 + 1) << 31 >> 31;
  if (v15 != v24 + 1 || v15 < 0)
  {
    return 0;
  }
  v13 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 208) + 32))(*(_QWORD *)(v6 + 208), v15 & 0x1FFFFFFFFLL, 0);
  v16 = v24;
  if ((*(uint64_t (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(v6 + 144) + 16))(*(_QWORD *)(v6 + 144), v13, v24) != v16)
  {
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 208) + 40))(*(_QWORD *)(v6 + 208), v13);
    return 0;
  }
  *((_BYTE *)v13 + v24) = 0;
LABEL_23:
  v17 = *(uint64_t ****)(a1 + 24);
  v18 = *v17;
  v19 = **v17;
  if (v19 != v13 && v19 != 0)
  {
    re::introspectionReleasePointer(v19, *(_QWORD *)(v6 + 208), *(_QWORD *)(v6 + 168), *(_QWORD *)a1);
    *v18 = 0;
    v18 = **(uint64_t ****)(a1 + 24);
  }
  *v18 = v13;
  return 1;
}

uint64_t re::DynamicArray<`anonymous namespace'::BinaryDeserializer::PointerMapEntry>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t `anonymous namespace'::BinaryDeserializer::readPointerPolymorphic(void *,re::IntrospectionStructure const&,re::IntrospectionPolymorphicTable const*,re::IntrospectionPolymorphicTable const*,void *,int,re::IntrospectionBase const*,BOOL)::{lambda(`anonymous namespace'::BinaryDeserializer::PointerMapEntry *,unsigned long)#1}::operator()(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t i;
  uint64_t v22;
  const char **IntrospectionPolymorphicTypeByName;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  const re::IntrospectionBase *v49;
  const re::IntrospectionBase *v50;
  re::IntrospectionBase *v51;
  re::IntrospectionBase *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(_QWORD);
  re *v59;
  NSObject *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  const char *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  _QWORD v70[2];
  int v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  unint64_t v76;
  __int16 v77;
  unint64_t v78;
  uint8_t buf[16];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v5 = a1;
  v84 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 144) + 24))(*(_QWORD *)(*a1 + 144));
  v70[0] = 0;
  if ((*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v6 + 144) + 16))(*(_QWORD *)(v6 + 144), v70, 8) != 8)
  {
    return 0;
  }
  v8 = *(unsigned int **)v5[1];
  v9 = v70[0];
  v10 = *v8;
  if (!(_DWORD)v10)
  {
LABEL_6:
    return 0;
  }
  v11 = *((_QWORD *)v8 + 1);
  while (*(_QWORD *)(v11 + 24) != v70[0])
  {
    v11 += 40;
    if (!--v10)
      goto LABEL_6;
  }
  v13 = *(unsigned int **)v5[2];
  v14 = v11;
  if (v8 == v13)
    goto LABEL_58;
  v15 = *(_QWORD *)(v6 + 96);
  v69 = (uint64_t *)(v6 + 96);
  v16 = (unint64_t)v8 ^ ((unint64_t)v8 >> 30);
  if (v15)
  {
    v17 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v16) ^ ((0xBF58476D1CE4E5B9 * v16) >> 27));
    v18 = *(unsigned int *)(*(_QWORD *)(v6 + 104) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(v6 + 120)));
    if ((_DWORD)v18 != 0x7FFFFFFF)
    {
      v38 = *(_QWORD *)(v6 + 112);
      if (*(unsigned int **)(v38 + 72 * v18 + 16) == v8)
      {
LABEL_34:
        v39 = v38 + 72 * v18 + 24;
        goto LABEL_52;
      }
      while (1)
      {
        LODWORD(v18) = *(_DWORD *)(v38 + 72 * v18 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v18 == 0x7FFFFFFF)
          break;
        if (*(unsigned int **)(v38 + 72 * v18 + 16) == v8)
          goto LABEL_34;
      }
    }
  }
  v67 = v5;
  v68 = v7;
  LODWORD(v81) = 0;
  *(_OWORD *)buf = 0u;
  v80 = 0u;
  *(_QWORD *)((char *)&v81 + 4) = 0x7FFFFFFFLL;
  v19 = *v8;
  if (!(_DWORD)v19)
    goto LABEL_25;
  v20 = 0;
  for (i = 0; i < v19; ++i)
  {
    v22 = *((_QWORD *)v8 + 1);
    IntrospectionPolymorphicTypeByName = re::getIntrospectionPolymorphicTypeByName(v13, *(char **)(v22 + 40 * i));
    if (!IntrospectionPolymorphicTypeByName)
      continue;
    v24 = v22 + 40 * i;
    v27 = *(_QWORD *)(v24 + 24);
    v25 = (_QWORD *)(v24 + 24);
    v26 = v27;
    v28 = IntrospectionPolymorphicTypeByName + 3;
    v29 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27));
    v30 = v29 ^ (v29 >> 31);
    if (!*(_QWORD *)buf)
    {
      LODWORD(v31) = 0;
LABEL_21:
      re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy((uint64_t)buf, v31, v30, v25, v28);
      v20 = ++DWORD2(v81);
      v19 = *v8;
      continue;
    }
    v31 = v30 % DWORD2(v80);
    v32 = *(unsigned int *)(*(_QWORD *)&buf[8] + 4 * v31);
    if ((_DWORD)v32 == 0x7FFFFFFF)
      goto LABEL_21;
    while (*(_QWORD *)(v80 + 32 * v32 + 16) != v26)
    {
      v32 = *(_DWORD *)(v80 + 32 * v32 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v32 == 0x7FFFFFFF)
        goto LABEL_21;
    }
    *(_QWORD *)(v80 + 32 * v32 + 24) = *v28;
    DWORD2(v81) = ++v20;
  }
  v15 = *v69;
  v16 = (unint64_t)v8 ^ ((unint64_t)v8 >> 30);
LABEL_25:
  v33 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v16) ^ ((0xBF58476D1CE4E5B9 * v16) >> 27));
  v34 = v33 ^ (v33 >> 31);
  if (!v15)
  {
    LODWORD(v35) = 0;
    goto LABEL_36;
  }
  v35 = v34 % *(unsigned int *)(v6 + 120);
  v36 = *(unsigned int *)(*(_QWORD *)(v6 + 104) + 4 * v35);
  if ((_DWORD)v36 == 0x7FFFFFFF)
    goto LABEL_36;
  v37 = *(_QWORD *)(v6 + 112);
  if (*(unsigned int **)(v37 + 72 * v36 + 16) != v8)
  {
    while (1)
    {
      LODWORD(v36) = *(_DWORD *)(v37 + 72 * v36 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v36 == 0x7FFFFFFF)
        break;
      if (*(unsigned int **)(v37 + 72 * v36 + 16) == v8)
        goto LABEL_42;
    }
LABEL_36:
    v40 = *(unsigned int *)(v6 + 132);
    if ((_DWORD)v40 == 0x7FFFFFFF)
    {
      v40 = *(unsigned int *)(v6 + 128);
      v41 = v40;
      if ((_DWORD)v40 == *(_DWORD *)(v6 + 120))
      {
        LODWORD(v35) = v34 % *(unsigned int *)(v6 + 120);
        v41 = *(_DWORD *)(v6 + 128);
      }
      *(_DWORD *)(v6 + 128) = v41 + 1;
      v42 = *(_QWORD *)(v6 + 112);
      v43 = *(_DWORD *)(v42 + 72 * v40 + 8);
    }
    else
    {
      v42 = *(_QWORD *)(v6 + 112);
      v43 = *(_DWORD *)(v42 + 72 * v40 + 8);
      *(_DWORD *)(v6 + 132) = v43 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v42 + 72 * v40 + 8) = v43 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v6 + 112) + 72 * v40 + 8) = *(_DWORD *)(*(_QWORD *)(v6 + 112) + 72 * v40 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v6 + 104) + 4 * v35);
    *(_QWORD *)(*(_QWORD *)(v6 + 112) + 72 * v40) = v34;
    *(_QWORD *)(*(_QWORD *)(v6 + 112) + 72 * v40 + 16) = v8;
    re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(*(_QWORD *)(v6 + 112) + 72 * v40 + 24, (uint64_t)buf);
    *(_DWORD *)(*(_QWORD *)(v6 + 104) + 4 * v35) = v40;
    ++*(_DWORD *)(v6 + 124);
    ++*(_DWORD *)(v6 + 136);
  }
LABEL_42:
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)buf);
  v44 = 0x7FFFFFFF;
  if (*v69)
  {
    v45 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 4 * (v34 % *(unsigned int *)(v6 + 120)));
    v5 = v67;
    v7 = v68;
    if (v45 != 0x7FFFFFFF)
    {
      v46 = *(_QWORD *)(v6 + 112);
      if (*(unsigned int **)(v46 + 72 * v45 + 16) == v8)
      {
        v44 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 4 * (v34 % *(unsigned int *)(v6 + 120)));
      }
      else
      {
        while (1)
        {
          v44 = *(_DWORD *)(v46
                          + 72 * *(unsigned int *)(*(_QWORD *)(v6 + 104) + 4 * (v34 % *(unsigned int *)(v6 + 120)))
                          + 8) & 0x7FFFFFFF;
          if (v44 == 0x7FFFFFFF)
            break;
          if (*(unsigned int **)(v46 + 72 * v44 + 16) == v8)
            goto LABEL_51;
        }
        v44 = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    v5 = v67;
    v7 = v68;
  }
LABEL_51:
  v39 = *(_QWORD *)(v6 + 112) + 72 * v44 + 24;
  v9 = *(_QWORD *)(v11 + 24);
LABEL_52:
  v47 = (_QWORD *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v39, v9);
  if (v47)
  {
    v48 = *v13;
    if ((_DWORD)v48)
    {
      v14 = *((_QWORD *)v13 + 1);
      while (*(_QWORD *)(v14 + 24) != *v47)
      {
        v14 += 40;
        if (!--v48)
          goto LABEL_57;
      }
    }
    else
    {
LABEL_57:
      v14 = 0;
    }
LABEL_58:
    v49 = *(const re::IntrospectionBase **)(v11 + 8);
    if (v49 && (v50 = *(const re::IntrospectionBase **)(v14 + 8)) != 0)
    {
      v51 = re::introspectionAllocPointer(*(re **)(v6 + 208), *(_anonymous_namespace_ **)(v6 + 168), *(re::Allocator **)(v14 + 8));
      v52 = v51;
      v53 = v5[3];
      if (*(_DWORD *)(v53 + 16) == 8)
      {
        if (*(_QWORD *)(v53 + 88))
          v54 = (uint64_t)v51;
        else
          v54 = 0;
      }
      else
      {
        v54 = 0;
      }
      if (a2)
      {
        *a2 = v54;
        a2[2] = v14;
      }
      else
      {
        a3 = *(_QWORD *)(v6 + 320);
      }
      {
        v62 = (char *)v52 - *(int *)(v14 + 32);
        v63 = v62;
        if (*(_BYTE *)v5[4])
          v63 = *(char **)v5[5];
        memcpy(&v63[*(int *)v5[6]], (const void *)(v14 + 24), *(int *)(*(_QWORD *)v5[7] + 20));
        **(_QWORD **)v5[8] = v62;
        return 1;
      }
      re::getPrettyTypeName(v49, (const re::IntrospectionBase *)buf);
      if ((buf[8] & 1) != 0)
        v64 = (const char *)v80;
      else
        v64 = (const char *)&buf[9];
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
      v65 = *(_QWORD *)(v6 + 320);
      if (v65 <= a3)
      {
        v70[1] = 0;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v71 = 136315906;
        v72 = "operator[]";
        v73 = 1024;
        v74 = 789;
        v75 = 2048;
        v76 = a3;
        v77 = 2048;
        v78 = v65;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v66 = (_QWORD *)(*(_QWORD *)(v6 + 336) + 32 * a3);
      *v66 = 0;
      v66[2] = 0;
      re::introspectionReleasePointer((uint64_t *)v52, *(_QWORD *)(v6 + 208), *(_QWORD *)(v6 + 168), (uint64_t)v50);
    }
    else
    {
    }
    return 0;
  }
  v55 = *re::foundationSerializationLogObjects(0);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
  {
    v56 = *(_QWORD *)v11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v56;
    _os_log_impl(&dword_224FE9000, v55, OS_LOG_TYPE_INFO, "Binary Deserialization; unknown polymorphic type '%s'.",
      buf,
      0xCu);
  }
  v57 = *(_QWORD *)(v6 + 168);
  if (!v57
    || (v58 = *(uint64_t (**)(_QWORD))(v57 + 16)) == 0
    || (v59 = (re *)v58(*(_QWORD *)(v11 + 8)), !(_DWORD)v59))
  {
    return 0;
  }
  v60 = *re::foundationSerializationLogObjects(v59);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    v61 = *(_QWORD *)v11;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v61;
    _os_log_impl(&dword_224FE9000, v60, OS_LOG_TYPE_DEFAULT, "Binary Deserialization; failed to find stream polymorphic type '%s'. Skipping unknown type.",
      buf,
      0xCu);
  }
}

uint64_t `anonymous namespace'::BinaryDeserializer::skip(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const re::IntrospectionBase *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  const re::IntrospectionBase *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const re::IntrospectionBase *v25;
  int v26;
  const re::IntrospectionBase *v27;
  int v28;
  const re::IntrospectionBase *v29;
  int v30;
  const re::IntrospectionBase *v31;
  const re::IntrospectionBase *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;

  switch(*((_DWORD *)a2 + 4))
  {
    case 0:
      v5 = *((int *)a2 + 5);
      if ((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 18) + 48))(*((_QWORD *)this + 18), v5) == v5)
        return 1;
      return 0;
    case 1:
      v6 = *((_QWORD *)a2 + 6);
      if (*(_DWORD *)(v6 + 16) != 8)
        goto LABEL_10;
      v7 = *(unsigned int *)(v6 + 56);
      if (!(_DWORD)v7)
        goto LABEL_10;
      v8 = *(_QWORD *)(v6 + 64);
      do
      {
        if (**(_DWORD **)v8 == 2)
        v8 += 8;
        --v7;
      }
      while (v7);
LABEL_10:
      v9 = *((_QWORD *)this + 18);
      LOBYTE(v34) = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 16))(v9, &v34, 1) != 1)
      {
        return 0;
      }
      if (v34 == 82)
      {
        LODWORD(v34) = 0;
        if ((*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v34, 4) == 4)
        {
          if (*((_QWORD *)this + 40) > (unint64_t)v34)
            return 1;
        }
        else
        {
        }
        return 0;
      }
      if (v34 == 78)
        return 1;
      if (v34 != 73)
      {
        return 0;
      }
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
      {
          return 1;
        re::getPrettyTypeName((re *)v6, (const re::IntrospectionBase *)&v34);
        goto LABEL_82;
      }
      LODWORD(v34) = 0;
      if ((*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v34, 4) != 4)
      {
        return 0;
      }
      v12 = v34;
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
      v14 = v34;
      if (v13 < v12)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
        return 0;
      }
      return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 18) + 48))(*((_QWORD *)this + 18), v34) == v14;
    case 2:
      if (!*((_DWORD *)a2 + 16))
        return 1;
      v15 = 0;
      v16 = (const re::IntrospectionBase *)*((_QWORD *)a2 + 6);
      {
        ++v15;
        result = 1;
        if (v15 >= *((_DWORD *)a2 + 16))
          return result;
      }
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v34);
      goto LABEL_82;
    case 3:
      *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
      v33 = 1;
      if ((*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v33, 4) != 4)
      {
        return 0;
      }
      v17 = v33;
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) < v17)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
        return 0;
      }
      if (!v33)
        return 1;
      v24 = 0;
      v25 = (const re::IntrospectionBase *)*((_QWORD *)a2 + 6);
      {
        if (++v24 >= v33)
          return 1;
      }
      goto LABEL_81;
    case 4:
      *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
      v33 = 1;
      if ((*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v33, 4) != 4)
      {
        return 0;
      }
      v18 = v33;
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) < v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
        return 0;
      }
      if (!v33)
        return 1;
      v26 = 0;
      v27 = (const re::IntrospectionBase *)*((_QWORD *)a2 + 6);
      {
        if (++v26 >= v33)
          return 1;
      }
      goto LABEL_81;
    case 5:
      *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
      v33 = 1;
      if ((*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v33, 4) != 4)
      {
        return 0;
      }
      v19 = v33;
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) < v19)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
        return 0;
      }
      if (!v33)
        return 1;
      v28 = 0;
      v29 = (const re::IntrospectionBase *)*((_QWORD *)a2 + 6);
      {
        if (++v28 >= v33)
          return 1;
      }
LABEL_81:
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v34);
LABEL_82:
      if (v34)
      {
        if ((v35 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v34 + 40))();
      }
      return 0;
    case 6:
    case 0xA:
    case 0xB:
    case 7:
      *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
      LODWORD(v34) = 1;
      if ((*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v34, 4) != 4)
      {
        return 0;
      }
      v20 = v34;
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) < v20)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
        return 0;
      }
      if (!(_DWORD)v34)
        return 1;
      v30 = 0;
      v31 = (const re::IntrospectionBase *)*((_QWORD *)a2 + 6);
      v32 = (const re::IntrospectionBase *)*((_QWORD *)a2 + 8);
      while (2)
      {
        {
          {
            if (++v30 >= v34)
              return 1;
            continue;
          }
        }
        else
        {
        }
        break;
      }
      return 0;
    case 8:
      if (!*((_DWORD *)a2 + 14))
        return 1;
      v21 = 0;
      break;
    case 9:
      v23 = *((int *)a2 + 5);
      if ((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 18) + 48))(*((_QWORD *)this + 18), v23) == v23)
        return 1;
      return 0;
    case 0xD:
      LOBYTE(v34) = 0;
      if ((*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v34, 1) != 1)
      {
        return 0;
      }
      if (!(_BYTE)v34)
        return 1;
    default:
      re::getPrettyTypeName(a2, (const re::IntrospectionBase *)&v34);
      goto LABEL_82;
  }
  while (1)
  {
    v22 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v21);
    if (*(_DWORD *)v22 == 1)
      break;
LABEL_44:
    if (++v21 >= (unint64_t)*((unsigned int *)a2 + 14))
      return 1;
  }
  switch(*(_DWORD *)(v22 + 40))
  {
    case 0:
    case 3:
        goto LABEL_44;
      return 0;
    case 1:
      goto LABEL_90;
    case 2:
LABEL_90:
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t `anonymous namespace'::BinaryDeserializer::skipDynamicString(_anonymous_namespace_::BinaryDeserializer *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v6;

  *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
  v6 = 0;
  if ((*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v6, 4) == 4)
  {
    v2 = v6;
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
    v4 = v6;
    if (v3 >= v2)
    {
      if (!v6
        || (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 18) + 48))(*((_QWORD *)this + 18), v6) == v4)
      {
        return 1;
      }
    }
    else
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
    }
  }
  else
  {
  }
  return 0;
}

uint64_t `anonymous namespace'::BinaryDeserializer::skipPointerPolymorphic(_anonymous_namespace_::BinaryDeserializer *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  re *v9;
  const char *v10;
  uint64_t v11;
  char v12;
  _BYTE v13[23];
  uint64_t v14;

  if (a2)
  {
    v4 = *((_QWORD *)a1 + 18);
    LOBYTE(v11) = 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 16))(v4, &v11, 1) == 1)
    {
      switch(v11)
      {
        case 'R':
          LODWORD(v11) = 0;
          if ((*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)a1 + 18) + 16))(*((_QWORD *)a1 + 18), &v11, 4) == 4)
          {
            if (*((_QWORD *)a1 + 40) > (unint64_t)v11)
              return 1;
          }
          else
          {
          }
          break;
        case 'N':
          return 1;
        case 'I':
          v14 = 0;
          v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 18) + 24))(*((_QWORD *)a1 + 18));
          if ((*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)a1 + 18) + 16))(*((_QWORD *)a1 + 18), &v14, 8) == 8)
          {
            v6 = *a2;
            if ((_DWORD)v6)
            {
              v7 = *((_QWORD *)a2 + 1);
              while (*(_QWORD *)(v7 + 24) != v14)
              {
                v7 += 40;
                if (!--v6)
                  goto LABEL_11;
              }
              v9 = *(re **)(v7 + 8);
              if (v9)
              {
                {
                  re::getPrettyTypeName(v9, (const re::IntrospectionBase *)&v11);
                  if ((v12 & 1) != 0)
                    v10 = *(const char **)&v13[7];
                  else
                    v10 = v13;
                  if (v11)
                  {
                    if ((v12 & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
                  }
                  return 0;
                }
                return 1;
              }
            }
            else
            {
LABEL_11:
            }
          }
          else
          {
          }
          break;
        default:
          break;
      }
    }
    else
    {
    }
  }
  else
  {
  }
  return 0;
}

uint64_t `anonymous namespace'::BinaryDeserializer::skipArrayMember(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionMember *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  void (**v12)(re::IntrospectionPointer *__hidden);
  _QWORD v13[2];
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  void (***v18)(re::IntrospectionCStyleArray *__hidden);
  _QWORD *v19;
  void (**v20)(re::IntrospectionCStyleArray *__hidden);
  _QWORD v21[6];
  _QWORD *v22;
  unsigned int v23;

  *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
  v23 = 1;
  if ((*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v23, 4) != 4)
  {
    return 0;
  }
  v4 = v23;
  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18)) < v4)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
    return 0;
  }
  v5 = *((_QWORD *)a2 + 2);
  if (!v5 || *(_DWORD *)(v5 + 16) != 1)
  {
    return 0;
  }
  re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&v20, *(const re::IntrospectionBase **)(v5 + 48), v23);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v12, 0);
  v13[1] = 0x800000001;
  v14 = 8;
  v15 = 0;
  v16 = 0;
  v17 = 0xFFFFFFFFLL;
  v12 = &off_24ED30800;
  v18 = &v20;
  v19 = 0;
  v12 = &off_24ED30800;
  v18 = 0;
  v7 = v19;
  if (v19)
  {
    v8 = *v19;
    if (*v19)
    {
      if ((v19[1] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v8 + 40))(*v19, v19[2]);
      *v7 = 0u;
      v7[1] = 0u;
    }
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 40))(v8, v7);
    v19 = 0;
  }
  v12 = &off_24ED426B8;
  objc_destructInstance(v13);
  v20 = &off_24ED23640;
  v21[5] = 0;
  v9 = v22;
  if (v22)
  {
    v10 = *v22;
    if (*v22)
    {
      if ((v22[1] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v10 + 40))(*v22, v22[2]);
      *v9 = 0u;
      v9[1] = 0u;
    }
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 40))(v10, v9);
    v22 = 0;
  }
  v20 = &off_24ED426B8;
  objc_destructInstance(v21);
  return v6;
}

uint64_t `anonymous namespace'::BinaryDeserializer::skipPolymorphicMember(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionMember *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int ***v4;
  unsigned int **v5;
  uint64_t v6;
  unsigned int ***v7;
  uint64_t v8;
  unsigned int **v9;

  v2 = *((_QWORD *)a2 + 2);
  if (*(_DWORD *)(v2 + 16) != 1)
  {
    return 0;
  }
  v3 = *(_QWORD *)(v2 + 48);
  if (*(_DWORD *)(v3 + 16) != 8)
  {
    return 0;
  }
  v4 = *(unsigned int ****)(v3 + 64);
  v5 = *v4;
  if (*(_DWORD *)*v4 != 2)
  {
    v6 = *(unsigned int *)(v3 + 56);
    v7 = v4 + 1;
    v8 = v6 - 1;
    do
    {
      v9 = *v7++;
      v5 = v9;
      --v8;
    }
    while (*(_DWORD *)v9 != 2);
  }
}

BOOL `anonymous namespace'::BinaryDeserializer::readLinearArray(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2, const re::IntrospectionBase *a3, unint64_t a4, char *a5)
{
  unint64_t v10;
  _BOOL8 v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  _BOOL4 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _BYTE buf[12];
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)a2 + 4))
  {
    if (a2 == a3)
    {
      v15 = *((_DWORD *)a2 + 5);
      v16 = v15 < 0;
      if (v15 >= 0)
        v17 = v15;
      else
        v17 = -v15;
      v18 = (v17 * (unsigned __int128)a4) >> 64;
      v19 = v17 * a4;
      if (v15 >= 0)
        v20 = v19;
      else
        v20 = -v19;
      v21 = v18 != 0;
      if (!v19)
        v16 = 0;
      if (v21 || v16)
      {
      }
      else
      {
        if ((*(uint64_t (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), a5, v20) == v20)return 1;
      }
    }
    else
    {
      v12 = *re::foundationSerializationLogObjects(this);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = *((_QWORD *)a2 + 6);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v13;
        _os_log_debug_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEBUG, "Binary Deserialization; array item types don't match '%s'.",
          buf,
          0xCu);
      }
    }
    return 0;
  }
  if (!a4)
    return 1;
  {
    v10 = 0;
    while (a4 - 1 != v10)
    {
      {
        v11 = v10 >= a4;
        goto LABEL_12;
      }
    }
    return 1;
  }
  v11 = 0;
  LODWORD(v10) = 0;
LABEL_12:
  re::getPrettyTypeName(a2, (const re::IntrospectionBase *)buf);
  if ((buf[8] & 1) != 0)
    v14 = v24;
  else
    v14 = &buf[9];
  if (*(_QWORD *)buf && (buf[8] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  return v11;
}

void std::__function::__func<`anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<`anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<`anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<`anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED88690;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<`anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED88690;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1},std::allocator<`anonymous namespace'::BinaryDeserializer::readHashTable(re::IntrospectionBase const&,re::IntrospectionBase const&,void *)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 216) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 216), *a2);
}

uint64_t `anonymous namespace'::BinaryDeserializer::readStructureNoVersioning(_anonymous_namespace_::BinaryDeserializer *this, const re::IntrospectionBase *a2, const re::IntrospectionBase *a3, char *a4)
{
  unint64_t v5;
  uint64_t result;
  const re::IntrospectionBase *v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const re::IntrospectionBase *v15;
  size_t v16;
  const char *v17;
  size_t v18;
  size_t v19;
  re *v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  const char **v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t i;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  signed int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  void (****v95)(re::IntrospectionCStyleArray *__hidden);
  _OWORD *v96;
  uint64_t v97;
  _OWORD *v98;
  uint64_t v99;
  _OWORD *v100;
  uint64_t v101;
  _OWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _DWORD *v110;
  _QWORD *v111;
  _DWORD *v112;
  _DWORD **v113;
  uint64_t v114;
  _DWORD *v115;
  NSObject *v116;
  _BOOL8 v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  char v122[8];
  _anonymous_namespace_::BinaryDeserializer *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  void (**v132)(re::IntrospectionPointer *__hidden);
  _QWORD v133[2];
  int v134;
  __int16 v135;
  uint64_t v136;
  uint64_t v137;
  void (***v138)(re::IntrospectionCStyleArray *__hidden);
  _QWORD *v139;
  void (**v140)(re::IntrospectionPointer *__hidden);
  _QWORD v141[2];
  int v142;
  __int16 v143;
  uint64_t v144;
  uint64_t v145;
  uint8_t *v146;
  _QWORD *v147;
  void (**v148)(re::IntrospectionCStyleArray *__hidden);
  _QWORD v149[6];
  _QWORD *v150;
  unsigned int v151;
  uint8_t buf[32];
  int v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v5 = *((unsigned int *)a2 + 14);
  result = 1;
  if (!(_DWORD)v5)
    return result;
  v7 = a3;
  v9 = 0;
  v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                          * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
  v127 = v10 ^ (v10 >> 31);
  v124 = this;
  while (1)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v9);
    if (*(_DWORD *)v11 != 1)
      goto LABEL_160;
    if (a2 != v7)
      break;
    v46 = v9;
LABEL_46:
    v47 = *(_QWORD *)(*((_QWORD *)v7 + 8) + 8 * v46);
    v48 = *(_DWORD *)(v11 + 40);
    if (v48 != *(_DWORD *)(v47 + 40))
    {
      return 0;
    }
    v49 = &a4[*(int *)(v47 + 36)];
    switch(v48)
    {
      case 0:
      case 3:
        if ((result & 1) != 0)
          goto LABEL_160;
        return 0;
      case 1:
        *((_QWORD *)this + 19) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18));
        v85 = *(int *)(v47 + 36);
        v151 = 1;
        if ((*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), &v151, 4) == 4)
        {
          v86 = v151;
          v87 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
          v88 = v151;
          if (v87 < v86)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
          }
          else
          {
            *(_QWORD *)buf = v151;
            if (*(_DWORD *)(v47 + 40) == 1 && (v89 = *(_QWORD *)(v47 + 48)) != 0)
            {
              memcpy(&a4[*(int *)(v47 + 64)], buf, *(int *)(v89 + 20));
              v90 = *(_QWORD *)(v11 + 16);
              if (v90 && *(_DWORD *)(v90 + 16) == 1)
              {
                v91 = *(_QWORD *)(v47 + 16);
                re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)buf, *(const re::IntrospectionBase **)(v90 + 48), v88);
                re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&v148, *(const re::IntrospectionBase **)(v91 + 48), v151);
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v140, 0);
                v141[1] = 0x800000001;
                v142 = 8;
                v143 = 0;
                v144 = 0;
                v145 = 0xFFFFFFFFLL;
                v140 = &off_24ED30800;
                v146 = buf;
                v147 = 0;
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v132, 0);
                v133[1] = 0x800000001;
                v134 = 8;
                v135 = 0;
                v136 = 0;
                v137 = 0xFFFFFFFFLL;
                v132 = &off_24ED30800;
                v138 = &v148;
                v139 = 0;
                v93 = *((_QWORD *)this + 40);
                if (v93)
                {
                  v94 = 32 * v93;
                  v95 = (void (****)(re::IntrospectionCStyleArray *__hidden))(*((_QWORD *)this + 42) + 8);
                  do
                  {
                    if (*v95 == &v148)
                      *v95 = 0;
                    v95 += 4;
                    v94 -= 32;
                  }
                  while (v94);
                }
                v7 = a3;
                if ((v92 & 1) != 0)
                {
                  v132 = &off_24ED30800;
                  v138 = 0;
                  v96 = v139;
                  if (v139)
                  {
                    v97 = *v139;
                    if (*v139)
                    {
                      if ((v139[1] & 1) != 0)
                        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v97 + 40))(*v139, v139[2]);
                      *v96 = 0u;
                      v96[1] = 0u;
                    }
                    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v97 + 40))(v97, v96);
                    v139 = 0;
                  }
                  v132 = &off_24ED426B8;
                  objc_destructInstance(v133);
                  v140 = &off_24ED30800;
                  v146 = 0;
                  v98 = v147;
                  if (v147)
                  {
                    v99 = *v147;
                    if (*v147)
                    {
                      if ((v147[1] & 1) != 0)
                        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v99 + 40))(*v147, v147[2]);
                      *v98 = 0u;
                      v98[1] = 0u;
                    }
                    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v99 + 40))(v99, v98);
                    v147 = 0;
                  }
                  v140 = &off_24ED426B8;
                  objc_destructInstance(v141);
                  v148 = &off_24ED23640;
                  v149[5] = 0;
                  v100 = v150;
                  if (v150)
                  {
                    v101 = *v150;
                    if (*v150)
                    {
                      if ((v150[1] & 1) != 0)
                        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v101 + 40))(*v150, v150[2]);
                      *v100 = 0u;
                      v100[1] = 0u;
                    }
                    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v101 + 40))(v101, v100);
                    v150 = 0;
                  }
                  v148 = &off_24ED426B8;
                  objc_destructInstance(v149);
                  *(_QWORD *)buf = &off_24ED23640;
                  v155 = 0;
                  v102 = v156;
                  if (v156)
                  {
                    v103 = *v156;
                    if (*v156)
                    {
                      if ((v156[1] & 1) != 0)
                        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v103 + 40))(*v156, v156[2]);
                      *v102 = 0u;
                      v102[1] = 0u;
                    }
                    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v103 + 40))(v103, v102);
                    v156 = 0;
                  }
                  *(_QWORD *)buf = &off_24ED426B8;
                  result = (uint64_t)objc_destructInstance(&buf[8]);
                  this = v124;
                  goto LABEL_160;
                }
                re::IntrospectionPointer::~IntrospectionPointer((re::IntrospectionPointer *)&v132);
                re::IntrospectionPointer::~IntrospectionPointer((re::IntrospectionPointer *)&v140);
                re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&v148);
                re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)buf);
              }
              else
              {
              }
            }
            else
            {
            }
          }
        }
        else
        {
        }
        goto LABEL_175;
      case 2:
        v104 = *(_QWORD *)(v11 + 16);
        if (*(_DWORD *)(v104 + 16) != 1 || (v105 = *(_QWORD *)(v47 + 16), *(_DWORD *)(v105 + 16) != 1))
        {
LABEL_175:
          return 0;
        }
        v106 = *(_QWORD *)(v104 + 48);
        if (*(_DWORD *)(v106 + 16) != 8 || (v107 = *(_QWORD *)(v105 + 48), *(_DWORD *)(v107 + 16) != 8))
        {
          goto LABEL_175;
        }
        v108 = *(unsigned int *)(v106 + 56);
        if ((_DWORD)v108)
        {
          v109 = *(_QWORD **)(v106 + 64);
          while (1)
          {
            v110 = (_DWORD *)*v109;
            if (*(_DWORD *)*v109 == 2)
              break;
            ++v109;
            if (!--v108)
            {
              v110 = 0;
              break;
            }
          }
        }
        else
        {
          v110 = 0;
        }
        v111 = *(_QWORD **)(v107 + 64);
        v112 = (_DWORD *)*v111;
        if (*(_DWORD *)*v111 != 2)
        {
          v113 = (_DWORD **)(v111 + 1);
          v114 = *(unsigned int *)(v107 + 56) - 1;
          do
          {
            v115 = *v113++;
            v112 = v115;
            --v114;
          }
          while (*v115 != 2);
        }
        if ((result & 1) == 0)
          goto LABEL_175;
LABEL_160:
        ++v9;
        v5 = *((unsigned int *)a2 + 14);
        if (v9 >= v5)
          return 1;
        break;
      default:
LABEL_168:
        return 0;
    }
  }
  if (*(_QWORD *)this)
  {
    v12 = *(unsigned int *)(*((_QWORD *)this + 1) + 4 * (v127 % *((unsigned int *)this + 6)));
    if ((_DWORD)v12 != 0x7FFFFFFF)
    {
      v13 = *((_QWORD *)this + 2);
      do
      {
        if (*(const re::IntrospectionBase **)(v13 + 72 * v12 + 16) == a2)
        {
          v76 = v13 + 72 * v12;
          goto LABEL_91;
        }
        LODWORD(v12) = *(_DWORD *)(v13 + 72 * v12 + 8) & 0x7FFFFFFF;
      }
      while ((_DWORD)v12 != 0x7FFFFFFF);
    }
  }
  v14 = strlen(*((const char **)a2 + 6));
  v15 = v7;
  v16 = v14;
  v17 = (const char *)*((_QWORD *)v15 + 6);
  v18 = strlen(v17);
  if (v16 >= v18)
    v19 = v18;
  else
    v19 = v16;
  v20 = (re *)strncmp(*((const char **)a2 + 6), v17, v19);
  if ((_DWORD)v20)
  {
    v116 = *re::foundationSerializationLogObjects(v20);
    v117 = os_log_type_enabled(v116, OS_LOG_TYPE_INFO);
    if (v117)
    {
      v118 = *((_QWORD *)a2 + 6);
      v119 = *((_QWORD *)a3 + 6);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v118;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v119;
      _os_log_impl(&dword_224FE9000, v116, OS_LOG_TYPE_INFO, "Binary Deserialization; structure name changed '%s' and '%s'.",
        buf,
        0x16u);
    }
    v120 = *re::foundationSerializationLogObjects((re *)v117);
    result = os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      v121 = *(_QWORD *)(v11 + 8);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v121;
      _os_log_debug_impl(&dword_224FE9000, v120, OS_LOG_TYPE_DEBUG, "Binary Deserialization; failed to read member '%s'.",
        buf,
        0xCu);
      return 0;
    }
    return result;
  }
  v125 = v11;
  v126 = 0;
  v129 = 0;
  v130 = 0;
  v21 = 0;
  v128 = 0;
  v22 = 0;
  v153 = 0;
  memset(buf, 0, sizeof(buf));
  v154 = 0x7FFFFFFFLL;
  v7 = a3;
  do
  {
    v23 = *(_DWORD **)(*((_QWORD *)a2 + 8) + 8 * v22);
    if (*v23 != 1)
      goto LABEL_38;
    v24 = *((unsigned int *)v7 + 14);
    if (!(_DWORD)v24)
      goto LABEL_38;
    v25 = (const char **)(v23 + 2);
    v26 = *((_QWORD *)v7 + 8);
LABEL_18:
    v27 = 0;
    v28 = *v25;
    while (1)
    {
      v29 = *(_QWORD *)(v26 + 8 * v27);
      if (*(_DWORD *)v29 == 1)
        break;
      if (*(_DWORD *)v29 == 5 && !strcmp(*(const char **)(v29 + 8), v28))
      {
        v25 = (const char **)(v29 + 16);
        goto LABEL_18;
      }
LABEL_24:
      if (v24 == ++v27)
        goto LABEL_37;
    }
    if (strcmp(*(const char **)(v29 + 8), v28))
      goto LABEL_24;
    v30 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
    v31 = v30 ^ (v30 >> 31);
    v32 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v32 = v31 % v128;
      for (i = *(unsigned int *)(v130 + 4 * v32);
            (_DWORD)i != 0x7FFFFFFF;
            LODWORD(i) = *(_DWORD *)(v21 + 24 * i + 8) & 0x7FFFFFFF)
      {
        if (v22 == *(_DWORD *)(v21 + 24 * i + 12))
          goto LABEL_37;
      }
    }
    v34 = v154;
    v35 = HIDWORD(v129);
    v36 = v130;
    if ((_DWORD)v154 == 0x7FFFFFFF)
    {
      v37 = HIDWORD(v129);
      v128 = *(_DWORD *)&buf[24];
      if (HIDWORD(v129) == *(_DWORD *)&buf[24])
      {
        re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity((uint64_t)buf, 2 * v129);
        v37 = v153;
        v128 = *(_DWORD *)&buf[24];
        v32 = v31 % *(unsigned int *)&buf[24];
        v21 = *(_QWORD *)&buf[16];
        v126 = *(_QWORD *)&buf[8];
      }
      v38 = v37 + 1;
      v153 = v38;
      v34 = HIDWORD(v129);
      v39 = *(_DWORD *)(v21 + 24 * HIDWORD(v129) + 8);
      v36 = v126;
    }
    else
    {
      v39 = *(_DWORD *)(v21 + 24 * v154 + 8);
      LODWORD(v154) = v39 & 0x7FFFFFFF;
      v38 = HIDWORD(v129);
      v35 = v34;
    }
    v40 = 3 * v34;
    *(_DWORD *)(v21 + 8 * v40 + 8) = v39 | 0x80000000;
    v21 = *(_QWORD *)&buf[16];
    v41 = *(_QWORD *)&buf[16] + 8 * v40;
    v42 = *(_DWORD *)(v41 + 8) & 0x80000000 | *(_DWORD *)(v36 + 4 * v32);
    *(_QWORD *)v41 = v31;
    *(_DWORD *)(v41 + 8) = v42;
    *(_DWORD *)(v41 + 12) = v22;
    *(_DWORD *)(v41 + 16) = v27;
    v130 = v36;
    *(_DWORD *)(v36 + 4 * v32) = v35;
    LODWORD(v129) = *(_DWORD *)&buf[28] + 1;
    HIDWORD(v129) = v38;
    ++*(_DWORD *)&buf[28];
    ++HIDWORD(v154);
    v5 = *((unsigned int *)a2 + 14);
LABEL_37:
    v7 = a3;
LABEL_38:
    ++v22;
  }
  while (v22 < v5);
  this = v124;
  if (!*(_QWORD *)v124)
  {
    v43 = 0;
LABEL_51:
    v50 = *((unsigned int *)v124 + 9);
    if ((_DWORD)v50 == 0x7FFFFFFF)
    {
      v50 = *((unsigned int *)v124 + 8);
      v51 = v50;
      if ((_DWORD)v50 == *((_DWORD *)v124 + 6))
      {
        v43 = v127 % *((unsigned int *)v124 + 6);
        v51 = *((_DWORD *)v124 + 8);
      }
      *((_DWORD *)v124 + 8) = v51 + 1;
      v52 = *((_QWORD *)v124 + 2);
      v53 = *(_DWORD *)(v52 + 72 * v50 + 8);
    }
    else
    {
      v52 = *((_QWORD *)v124 + 2);
      v53 = *(_DWORD *)(v52 + 72 * v50 + 8);
      *((_DWORD *)v124 + 9) = v53 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v52 + 72 * v50 + 8) = v53 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)v124 + 2) + 72 * v50 + 8) = *(_DWORD *)(*((_QWORD *)v124 + 2) + 72 * v50 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v124 + 1) + 4 * v43);
    *(_QWORD *)(*((_QWORD *)v124 + 2) + 72 * v50) = v127;
    *(_QWORD *)(*((_QWORD *)v124 + 2) + 72 * v50 + 16) = a2;
    v54 = *((_QWORD *)v124 + 2) + 72 * v50;
    *(_OWORD *)(v54 + 24) = 0u;
    v55 = v54 + 24;
    *(_DWORD *)(v55 + 32) = 0;
    *(_OWORD *)(v55 + 16) = 0u;
    *(_QWORD *)(v55 + 36) = 0x7FFFFFFFLL;
    if (*(_QWORD *)buf)
    {
      if (v129 <= 3)
        v56 = 3;
      else
        v56 = v129;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(v55, *(uint64_t *)buf, v56);
      if (*(_DWORD *)(v55 + 28))
      {
        v57 = *(unsigned int *)(v55 + 24);
        if ((_DWORD)v57)
          memset_pattern16(*(void **)(v55 + 8), &unk_2260EB7B0, 4 * v57);
        v58 = *(unsigned int *)(v55 + 32);
        if ((_DWORD)v58)
        {
          v59 = 0;
          v60 = 24 * v58;
          do
          {
            v61 = *(_QWORD *)(v55 + 16) + v59;
            v62 = *(_DWORD *)(v61 + 8);
            if (v62 < 0)
              *(_DWORD *)(v61 + 8) = v62 & 0x7FFFFFFF;
            v59 += 24;
          }
          while (v60 != v59);
        }
        *(_DWORD *)(v55 + 28) = 0;
        *(_DWORD *)(v55 + 32) = 0;
        v63 = *(_DWORD *)(v55 + 40) + 1;
        *(_DWORD *)(v55 + 36) = 0x7FFFFFFF;
        *(_DWORD *)(v55 + 40) = v63;
      }
      if (*(_DWORD *)(v55 + 24) < v129)
        re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(v55, v129);
      if (HIDWORD(v129))
      {
        v64 = HIDWORD(v129);
        v65 = (_DWORD *)(*(_QWORD *)&buf[16] + 16);
        do
        {
          if ((*(v65 - 2) & 0x80000000) != 0)
          {
            v66 = *((_QWORD *)v65 - 2);
            v67 = *(unsigned int *)(v55 + 24);
            v68 = v66 % v67;
            v69 = *(unsigned int *)(v55 + 36);
            if ((_DWORD)v69 == 0x7FFFFFFF)
            {
              v69 = *(unsigned int *)(v55 + 32);
              v70 = v69;
              if ((_DWORD)v69 == (_DWORD)v67)
              {
                re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(v55, 2 * *(_DWORD *)(v55 + 28));
                v68 = v66 % *(unsigned int *)(v55 + 24);
                v70 = *(_DWORD *)(v55 + 32);
              }
              *(_DWORD *)(v55 + 32) = v70 + 1;
              v71 = *(_QWORD *)(v55 + 16);
              v72 = *(_DWORD *)(v71 + 24 * v69 + 8);
            }
            else
            {
              v71 = *(_QWORD *)(v55 + 16);
              v72 = *(_DWORD *)(v71 + 24 * v69 + 8);
              *(_DWORD *)(v55 + 36) = v72 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v71 + 24 * v69 + 8) = v72 | 0x80000000;
            v73 = *(_QWORD *)(v55 + 8);
            *(_DWORD *)(*(_QWORD *)(v55 + 16) + 24 * v69 + 8) = *(_DWORD *)(*(_QWORD *)(v55 + 16) + 24 * v69 + 8) & 0x80000000 | *(_DWORD *)(v73 + 4 * v68);
            *(_QWORD *)(*(_QWORD *)(v55 + 16) + 24 * v69) = v66;
            *(_DWORD *)(*(_QWORD *)(v55 + 16) + 24 * v69 + 12) = *(v65 - 1);
            *(_DWORD *)(*(_QWORD *)(v55 + 16) + 24 * v69 + 16) = *v65;
            *(_DWORD *)(v73 + 4 * v68) = v69;
            ++*(_DWORD *)(v55 + 28);
          }
          v65 += 6;
          --v64;
        }
        while (v64);
      }
    }
    this = v124;
    v11 = v125;
    *(_DWORD *)(*((_QWORD *)v124 + 1) + 4 * v43) = v50;
    ++*((_DWORD *)v124 + 7);
    ++*((_DWORD *)v124 + 10);
    v7 = a3;
    goto LABEL_82;
  }
  v43 = v127 % *((unsigned int *)v124 + 6);
  v44 = *(unsigned int *)(*((_QWORD *)v124 + 1) + 4 * v43);
  v11 = v125;
  if ((_DWORD)v44 == 0x7FFFFFFF)
    goto LABEL_51;
  v45 = *((_QWORD *)v124 + 2);
  while (*(const re::IntrospectionBase **)(v45 + 72 * v44 + 16) != a2)
  {
    LODWORD(v44) = *(_DWORD *)(v45 + 72 * v44 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v44 == 0x7FFFFFFF)
      goto LABEL_51;
  }
LABEL_82:
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)buf);
  if (!*(_QWORD *)this)
  {
    v74 = *((_QWORD *)this + 2);
LABEL_88:
    LODWORD(v75) = 0x7FFFFFFF;
    goto LABEL_89;
  }
  v74 = *((_QWORD *)this + 2);
  v75 = *(unsigned int *)(*((_QWORD *)this + 1) + 4 * (v127 % *((unsigned int *)this + 6)));
  if ((_DWORD)v75 == 0x7FFFFFFF)
    goto LABEL_88;
  while (*(const re::IntrospectionBase **)(v74 + 72 * v75 + 16) != a2)
  {
    v75 = *(_DWORD *)(v74 + 72 * v75 + 8) & 0x7FFFFFFF;
    if (v75 == 0x7FFFFFFF)
      goto LABEL_88;
  }
LABEL_89:
  v76 = v74 + 72 * v75;
LABEL_91:
  if (!*(_QWORD *)(v76 + 24)
    || (v77 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * ((int)v9 ^ ((unint64_t)(int)v9 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                        * ((int)v9 ^ ((unint64_t)(int)v9 >> 30))) >> 27)),
        v78 = *(unsigned int *)(*(_QWORD *)(v76 + 32) + 4 * ((v77 ^ (v77 >> 31)) % *(unsigned int *)(v76 + 48))),
        (_DWORD)v78 == 0x7FFFFFFF))
  {
LABEL_96:
    v80 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * (int)v9);
    v81 = *re::foundationSerializationLogObjects((re *)result);
    result = os_log_type_enabled(v81, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      v82 = *(_QWORD *)(v80 + 8);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v82;
      _os_log_impl(&dword_224FE9000, v81, OS_LOG_TYPE_INFO, "Binary Deserialization; unknown member '%s'.", buf, 0xCu);
    }
    goto LABEL_98;
  }
  v79 = *(_QWORD *)(v76 + 40);
  while (*(_DWORD *)(v79 + 24 * v78 + 12) != (_DWORD)v9)
  {
    LODWORD(v78) = *(_DWORD *)(v79 + 24 * v78 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v78 == 0x7FFFFFFF)
      goto LABEL_96;
  }
  v46 = *(_DWORD *)(v79 + 24 * v78 + 16);
  if (v46 != -1)
    goto LABEL_46;
LABEL_98:
  v83 = *re::foundationSerializationLogObjects((re *)result);
  if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
  {
    v84 = *(_QWORD *)(v11 + 8);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v84;
    _os_log_impl(&dword_224FE9000, v83, OS_LOG_TYPE_INFO, "Binary Deserialization; skipping unknown member '%s'.",
      buf,
      0xCu);
  }
  switch(*(_DWORD *)(v11 + 40))
  {
    case 0:
    case 3:
      if ((result & 1) != 0)
        goto LABEL_160;
      return 0;
    case 1:
      if ((result & 1) != 0)
        goto LABEL_160;
      goto LABEL_167;
    case 2:
      if ((result & 1) != 0)
        goto LABEL_160;
LABEL_167:
      break;
    default:
      goto LABEL_168;
  }
  return 0;
}

void re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_DWORD *)(v6 + 16);
        do
        {
          if ((*(v13 - 2) & 0x80000000) != 0)
          {
            v14 = *((_QWORD *)v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<int,int,re::Hash<int>,re::EqualTo<int>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17) = v14;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 12) = *(v13 - 1);
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 16) = *v13;
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 6;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

void re::HashTable<re::IntrospectionStructure const*,`anonymous namespace'::BinaryDeserializer::StructureVersionData,re::Hash<re::IntrospectionStructure const*>,re::EqualTo<re::IntrospectionStructure const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_DWORD *)(v6 + 60);
        do
        {
          if ((*(v13 - 13) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 15);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 16) = *(_QWORD *)(v13 - 11);
            v21 = *(_QWORD *)(a1 + 16) + 72 * v17;
            *(_DWORD *)(v21 + 56) = 0;
            *(_OWORD *)(v21 + 40) = 0u;
            *(_OWORD *)(v21 + 24) = 0u;
            *(_QWORD *)(v21 + 60) = 0x7FFFFFFFLL;
            *(_QWORD *)(v21 + 24) = *(_QWORD *)(v13 - 9);
            *(_QWORD *)(v13 - 9) = 0;
            v22 = *(_QWORD *)(v21 + 32);
            *(_QWORD *)(v21 + 32) = *(_QWORD *)(v13 - 7);
            *(_QWORD *)(v13 - 7) = v22;
            v23 = *(_QWORD *)(v21 + 40);
            *(_QWORD *)(v21 + 40) = *(_QWORD *)(v13 - 5);
            *(_QWORD *)(v13 - 5) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 48);
            *(_DWORD *)(v21 + 48) = *(v13 - 3);
            *(v13 - 3) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 52);
            *(_DWORD *)(v21 + 52) = *(v13 - 2);
            *(v13 - 2) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 56);
            *(_DWORD *)(v21 + 56) = *(v13 - 1);
            *(v13 - 1) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 60);
            *(_DWORD *)(v21 + 60) = *v13;
            *v13 = v23;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 18;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

uint64_t *re::HashTable<re::IntrospectionStructure const*,`anonymous namespace'::BinaryDeserializer::StructureVersionData,re::Hash<re::IntrospectionStructure const*>,re::EqualTo<re::IntrospectionStructure const*>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

unint64_t `anonymous namespace'::BinaryDeserializer::hexConvert(_anonymous_namespace_::BinaryDeserializer *this, char *a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  unint64_t i;
  char *v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;

  v4 = 0;
  if ((unint64_t)a2 >= 4 && a4)
  {
    v4 = 0;
    for (i = 0; i < (unint64_t)a4; ++i)
    {
      v6 = (char *)this + v4;
      v6[2] = 32;
      v7 = v4 + 6;
      v4 += 3;
      if (v7 >= (unint64_t)a2)
        break;
    }
  }
  v8 = v4 != 0;
  v9 = v4 - 1;
  if (!v8)
    v9 = 0;
  if (v9 < (unint64_t)a2)
    *((_BYTE *)this + v9) = 0;
  return v9;
}

uint64_t re::deserializeJsonIntoBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t *v10;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t *v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  BOOL v22;
  _anonymous_namespace_ *v23;
  uint64_t v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  const char *v32;
  uint64_t v33;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  char v42;
  uint64_t (**v43)();
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t *v49;
  char v50[8];
  __int128 v51;
  _BYTE v52[32];
  _QWORD v53[3];
  int v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[5];
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _OWORD v66[2];
  int v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70[4];
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  __int128 v78;
  int v79;
  __int128 v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  _QWORD v84[2];
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  StringID v90[3];
  uint64_t v91;
  char v92;

  v10 = a5;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v84[0] = &off_24ED886D8;
  v84[1] = a1;
  *(_QWORD *)&v90[0].var0 = 0xD037281FECA61F36;
  v90[0].var1 = "JSON-StreamAdaptor-DeserializerV1";
  v43 = &off_24ED88780;
  v85 = a5;
  v86 = 0;
  re::StringID::StringID((re::StringID *)&v44, v90);
  v55 = 0;
  memset(v53, 0, sizeof(v53));
  v54 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50[0] = 0;
  v56 = 12;
  v57 = 0;
  v58 = 1024;
  v14 = atomic_load((unsigned __int8 *)&qword_254123108);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254123108))
  {
    re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v32, (uint64_t)&v35);
    if ((_BYTE)v35)
      v33 = SDWORD1(v35);
    else
      v33 = 0;
    _MergedGlobals_479 = v33;
    __cxa_guard_release(&qword_254123108);
  }
  if (_MergedGlobals_479)
    v58 = _MergedGlobals_479;
  v62 = 0;
  v59 = 0u;
  v60 = 0u;
  memset(v61, 0, 28);
  memset(v66, 0, sizeof(v66));
  v67 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v68 = 0x7FFFFFFFLL;
  v61[4] = 0;
  v43 = &off_24ED88718;
  v69 = 1;
  v72 = 0x7FFFFFFFLL;
  v77 = 0u;
  v78 = 0u;
  memset(v70, 0, sizeof(v70));
  v71 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  v83 = 0;
  v79 = 0;
  v80 = 0u;
  v81 = 0u;
  v82 = 0;
  re::StringID::destroyString((re::StringID *)v90);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v42);
  v41 = *(_OWORD *)(a2 + 32);
  re::TypeRegistry::typeInfo((re *)v41, (re **)&v41, v90);
  re::TypeInfo::TypeInfo((uint64_t)&v39, (uint64_t)&v90[0].var1);
  v15 = 0;
  if (v40 == 8)
  {
    v16 = re::TypeInfo::name((re::TypeInfo *)&v39);
    if ((unint64_t)*v16 >> 1 == 94623636 && ((v17 = (char *)v16[1], v17 == "char*") || !strcmp(v17, "char*"))
      || (v18 = re::TypeInfo::name((re::TypeInfo *)&v39), (unint64_t)*v18 >> 1 == 0x134375A94D9F7110)
      && ((v19 = (char *)v18[1], v19 == "DynamicString") || !strcmp(v19, "DynamicString")))
    {
      v15 = 0;
    }
    else
    {
      v20 = re::TypeInfo::name((re::TypeInfo *)&v39);
      if ((unint64_t)*v20 >> 1 == 0x22C6ED80D0CLL)
      {
        v21 = (char *)v20[1];
        v22 = v21 == "StringID" || strcmp(v21, "StringID") == 0;
      }
      else
      {
        v22 = 0;
      }
      v15 = !v22;
    }
  }
  v63 = a4;
  v24 = v64;
  if (*(_DWORD *)(v64 + 24) != v65)
  {
    ((void (*)(uint64_t (***)()))v43[5])(&v43);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)v66);
    v64 = 0;
  }
  v45 = v84;
  v46 = 0;
  v47 = 0;
  if (!v10)
  {
  }
  v48 = v10;
  if (!a6)
  {
  }
  v49 = a6;
  *(_BYTE *)&v90[0].var0 = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v50, (unsigned __int8 *)v90);
  if (*(_BYTE *)&v90[0].var0 && v90[1].var1 && (*(_BYTE *)&v90[2].var0 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v90[1].var1 + 40))();
  v53[0] = v48;
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v53, 0x40uLL);
  ++v54;
  *(_BYTE *)&v90[0].var0 = 0;
  memset(&v90[0].var0 + 1, 0, 44);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  v61[0] = v49;
  re::DynamicArray<char>::setCapacity(v61, 0);
  ++LODWORD(v61[3]);
  v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 72, 8);
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 256;
  *(_DWORD *)(v26 + 48) = 0;
  *(_QWORD *)(v26 + 56) = 0;
  *(_DWORD *)(v26 + 64) = 2;
  *((_QWORD *)&v60 + 1) = v26;
  v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 104, 8);
  *(_QWORD *)&v60 = rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::GenericDocument(v27, 0, 1024, 0);
  v35 = (unint64_t)v45;
  LODWORD(v36) = 0;
  v37 = 0uLL;
  v28 = rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::ParseStream<440u,rapidjson::UTF8<char>,re::internal::RapidJSONInputStream>(v60, &v35);
  v29 = *(_QWORD *)(v28 + 88);
  if ((_DWORD)v29)
  {
    v30 = v29 > 0x11
        ? "Unknown error."
        : *(char **)((char *)off_24ED887D8 + (((v29 << 32) - 0x100000000) >> 29));
    re::DynamicString::format((re::DynamicString *)"Failed to deserialize JSON: %s (Offset %zu)", (re::DynamicString *)&v91, v30, *(_QWORD *)(v28 + 96));
    if (v91)
    {
      if ((v92 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v91 + 40))();
    }
  }
  if ((unint64_t)v37 < (int)v36)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v35 + 24))(v35, (v36 - v37));
  ((void (*)(uint64_t))v43[6])((uint64_t)&v43);
  if ((a7 & 1) != 0)
  {
    LOBYTE(v62) = 1;
    if ((a7 & 2) == 0)
    {
LABEL_41:
      if (v15)
        goto LABEL_42;
      goto LABEL_46;
    }
  }
  else if ((a7 & 2) == 0)
  {
    goto LABEL_41;
  }
  HIBYTE(v62) = 1;
  if (v15)
  {
LABEL_42:
    if (!v50[0])
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))v43[9])((uint64_t)&v43, (uint64_t)"object", 0, a3, (re::TypeInfo *)&v39, (uint64_t)&v39, 0);
    goto LABEL_50;
  }
LABEL_46:
  {
    *(_BYTE *)&v90[0].var0 = v50[0];
    if (v50[0])
    {
      *(_OWORD *)&v90[0].var1 = v51;
      re::DynamicString::DynamicString((re::DynamicString *)&v90[1].var1, (const re::DynamicString *)v52);
    }
    v35 = *(_OWORD *)&v90[0].var1;
    goto LABEL_56;
  }
  if (!v50[0])
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))v43[9])((uint64_t)&v43, (uint64_t)"object", 0, a3, (re::TypeInfo *)&v39, (uint64_t)&v39, 0);
LABEL_50:
  ((void (*)(uint64_t))v43[7])((uint64_t)&v43);
  if (!v50[0])
  {
    *(_BYTE *)a8 = 1;
    goto LABEL_60;
  }
  *(_BYTE *)&v90[0].var0 = 1;
  *(_OWORD *)&v90[0].var1 = v51;
  re::DynamicString::DynamicString((re::DynamicString *)&v90[1].var1, (const re::DynamicString *)v52);
  v35 = *(_OWORD *)&v90[0].var1;
LABEL_56:
  re::DynamicString::DynamicString((re::DynamicString *)&v36, (const re::DynamicString *)&v90[1].var1);
  *(_BYTE *)a8 = 0;
  *(_OWORD *)(a8 + 8) = v35;
  *(_QWORD *)(a8 + 24) = v36;
  *(_QWORD *)(a8 + 48) = v38;
  *(_OWORD *)(a8 + 32) = v37;
  v38 = 0;
  v36 = 0;
  v37 = 0uLL;
  if (*(_BYTE *)&v90[0].var0 && v90[1].var1 && (*(_BYTE *)&v90[2].var0 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v90[1].var1 + 40))();
LABEL_60:
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v42);
  v43 = &off_24ED88718;
  if (*((_QWORD *)&v80 + 1))
  {
    if (v83)
      (*(void (**)(void))(**((_QWORD **)&v80 + 1) + 40))();
    v83 = 0;
    v81 = 0uLL;
    *((_QWORD *)&v80 + 1) = 0;
    ++v82;
  }
  if (*((_QWORD *)&v77 + 1))
  {
    if ((_QWORD)v80)
      (*(void (**)(void))(**((_QWORD **)&v77 + 1) + 40))();
    *(_QWORD *)&v80 = 0;
    v78 = 0uLL;
    *((_QWORD *)&v77 + 1) = 0;
    ++v79;
  }
  if (v73)
  {
    if ((_QWORD)v77)
      (*(void (**)(void))(*(_QWORD *)v73 + 40))();
    *(_QWORD *)&v77 = 0;
    v74 = 0;
    v75 = 0;
    v73 = 0;
    ++v76;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v70);
  v84[0] = &off_24ED886D8;
  if (v86)
    return (*(uint64_t (**)(uint64_t *))(*v85 + 40))(v85);
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  a1[34] = a2;
  v3 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v3);
  (*(void (**)(_QWORD *))(*a1 + 64))(a1);
  v4 = a1[34];
  v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v4 + 200, a1 + 1);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = *v5;
    v8 = a1[34];
    v14[0] = v4;
    v14[1] = v7;
    re::TypeRegistry::attributesByAttributeType(v8, (uint64_t)v14, (uint64_t)&v15);
    if (v16)
    {
      v9 = 48 * v16;
      v10 = (uint64_t *)(v17 + 40);
      do
      {
        v13 = *(_OWORD *)(v10 - 3);
        v11 = *v10;
        v10 += 6;
        v9 -= 48;
      }
      while (v9);
    }
    if (v15 && v17)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  }
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  *((_DWORD *)a1 + 70) = *(_DWORD *)(a1[34] + 24);
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(uint64_t a1, char *a2, int a3)
{
  unsigned int *result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if (*((_WORD *)result + 11) == 3)
    {
      LOBYTE(v7) = 2;
      DWORD1(v7) = a3;
      *((_QWORD *)&v7 + 1) = a2;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = result;
      return (unsigned int *)1;
    }
    return 0;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14);
    ++*(_QWORD *)(v2 - 16);
  }
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED88718;
  v2 = *(_QWORD *)(a1 + 472);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 504))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    ++*(_DWORD *)(a1 + 496);
  }
  v3 = *(_QWORD *)(a1 + 432);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 464))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    ++*(_DWORD *)(a1 + 456);
  }
  v4 = *(_QWORD *)(a1 + 392);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 344));
}

void `anonymous namespace'::LegacyInputStreamAdaptor::~LegacyInputStreamAdaptor(_anonymous_namespace_::LegacyInputStreamAdaptor *this)
{
  *(_QWORD *)this = &off_24ED886D8;
  if (*((_QWORD *)this + 3))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 10) = 0;
  }
}

{
  *(_QWORD *)this = &off_24ED886D8;
  if (*((_QWORD *)this + 3))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 10) = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::LegacyInputStreamAdaptor::Next(_anonymous_namespace_::LegacyInputStreamAdaptor *this, const void **a2, int *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void *v10;

  if (*((_BYTE *)this + 48))
    return 0;
  v7 = *((_QWORD *)this + 3);
  if (!v7)
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), 256, 0);
    *((_QWORD *)this + 3) = v7;
  }
  v8 = *((unsigned int *)this + 11);
  if ((int)v8 >= 1)
  {
    *a2 = (const void *)(v7 + *((int *)this + 10) - v8);
    *a3 = v8;
    *((_DWORD *)this + 11) = 0;
    return 1;
  }
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v7, 256);
  *((_DWORD *)this + 10) = v9;
  if (v9 > 0)
  {
    v10 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 4) += v9;
    *a3 = v9;
    *a2 = v10;
    return 1;
  }
  if (v9 < 0)
    *((_BYTE *)this + 48) = 1;
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), *((_QWORD *)this + 3));
  result = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t `anonymous namespace'::LegacyInputStreamAdaptor::BackUp(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

BOOL `anonymous namespace'::LegacyInputStreamAdaptor::Skip(_anonymous_namespace_::LegacyInputStreamAdaptor *this, int a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  _BYTE v11[256];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 48))
    return 0;
  v4 = *((_DWORD *)this + 11);
  if (v4 >= a2)
  {
    *((_DWORD *)this + 11) = v4 - a2;
    return 1;
  }
  else
  {
    v5 = 0;
    v6 = a2 - v4;
    *((_DWORD *)this + 11) = 0;
    do
    {
      v7 = v5;
      v8 = __OFSUB__(v6, v5);
      v9 = v6 - v5;
      if ((v9 < 0) ^ v8 | (v9 == 0))
        break;
      if (v9 >= 256)
        v9 = 256;
      v10 = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v11, v9);
      v5 = v7 + v10;
    }
    while (v10 > 0);
    *((_QWORD *)this + 4) += v7;
    return v6 == v7;
  }
}

uint64_t `anonymous namespace'::LegacyInputStreamAdaptor::ByteCount(_anonymous_namespace_::LegacyInputStreamAdaptor *this)
{
  return *((_QWORD *)this + 4) - *((int *)this + 11);
}

uint64_t re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED88780;
  if (*(_QWORD *)(a1 + 272))
  {
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(a1 + 288);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v2 = *(_QWORD *)(a1 + 216);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (v4)
    {
      if ((*(_BYTE *)(a1 + 96) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 104));
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
    }
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED88718;
  v2 = *(_QWORD *)(a1 + 472);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 504))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    ++*(_DWORD *)(a1 + 496);
  }
  v3 = *(_QWORD *)(a1 + 432);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 464))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    ++*(_DWORD *)(a1 + 456);
  }
  v4 = *(_QWORD *)(a1 + 392);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 344));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;

  v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((_QWORD *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(_BYTE *)(result + 336))
  {
    --*(_QWORD *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(_BYTE *)(a1 + 337) = 1;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(_QWORD *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  re::internal::SharedObjectGraph::markAndSweep((re::internal::SharedObjectGraph *)(a1 + 336), *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(_QWORD *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  _QWORD v10[2];
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v11 = 6059476;
  v12 = "BOOL";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6104748;
  v12 = "char";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x172E117BCLL;
  v12 = "int8_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93A4A92;
  v12 = "int16_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93BFE06;
  v12 = "int32_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93EC744;
  v12 = "int64_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6655224;
  v12 = "long";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x31CD534126;
  v12 = "uint8_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0D4E68;
  v12 = "uint16_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0F01DCLL;
  v12 = "uint32_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD11CB1ALL;
  v12 = "uint64_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x1947BDF6CLL;
  v12 = "size_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 195052728;
  v12 = "float";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x161EEF7A2;
  v12 = "double";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 189247272;
  v12 = "char*";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2686EB529B3EE220;
  v12 = "DynamicString";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x458DDB01A18;
  v12 = "StringID";
  re::StringID::destroyString((re::StringID *)&v11);
  v2 = *(_QWORD *)(a1 + 272);
  v11 = 0x258C98EAAF29A10ALL;
  v12 = "CallbackSerializerAttribute";
  v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      v5 = *(_QWORD *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        v6 = 48 * v13;
        v7 = (__int128 *)(v14 + 16);
        do
        {
          v8 = *v7;
          v7 += 3;
          v9 = v8;
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14)
          (*(void (**)(void))(*(_QWORD *)v11 + 40))();
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v14 = (_BYTE *)(a1 + 336);
  v15 = *(_QWORD *)(a1 + 488);
  if (!v15)
  {
    if ((_DWORD)a7)
      v16 = 0;
    else
      v16 = a4;
    v17 = **((_QWORD **)a5 + 2);
    *(_QWORD *)&v26 = *(_QWORD *)a5;
    *((_QWORD *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((_QWORD *)(a1 + 336), v16, &v26);
  }
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v18)
  {
    result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(_QWORD *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    v20 = re::TypeInfo::name(a5);
    return 0;
  }
  return result;
}

BOOL (*re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this))(uint64_t a1, char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, int a7)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  BOOL (*result)(uint64_t, char *, int, char **, re::TypeInfo *, const re::TypeInfo *, int);
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 == 94623636)
  {
    v6 = (char *)v4[1];
    if (v6 == "char*" || !strcmp(v6, "char*"))
  }
  if (*((_BYTE *)this + 12) == 9)
  {
    v7 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 80);
    if (v7 >= 2)
    {
      if (v7 == 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
      result = (BOOL (*)(uint64_t, char *, int, char **, re::TypeInfo *, const re::TypeInfo *, int))_os_crash();
      __break(1u);
    }
    else
    {
    }
  }
  else if (*(_QWORD *)this == *(_QWORD *)(a1 + 272)
         && *(_QWORD *)(a1 + 288)
         && (v9 = **((_QWORD **)this + 2) | 0xFFFFFFFF00000000,
             v10 = *(unsigned int *)(*(_QWORD *)(a1 + 296) + 4 * (v9 % *(unsigned int *)(a1 + 312))),
             (_DWORD)v10 != 0x7FFFFFFF))
  {
    v11 = *(_QWORD *)(a1 + 304);
    if (*(_QWORD *)(v11 + 24 * v10 + 4) == v9)
    {
      return *(BOOL (**)(uint64_t, char *, int, char **, re::TypeInfo *, const re::TypeInfo *, int))(v11 + 24 * v10 + 16);
    }
    else
    {
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 24 * v10 + 4) == v9)
          return *(BOOL (**)(uint64_t, char *, int, char **, re::TypeInfo *, const re::TypeInfo *, int))(v11 + 24 * v10 + 16);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v14)
    return v14(a1, a2, a3, a4, a5, a6, a7);
  v16 = re::TypeInfo::name(a5);
  return 0;
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*result)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t, uint64_t);
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)a2 != *(_QWORD *)(a1 + 272))
  if (!*(_QWORD *)(a1 + 288))
  v3 = **(_QWORD **)(a2 + 16) | 0xFFFFFFFF00000000;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 296) + 4 * (v3 % *(unsigned int *)(a1 + 312)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
  v5 = *(_QWORD *)(a1 + 304);
  if (*(_QWORD *)(v5 + 24 * v4 + 4) == v3)
    return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t, uint64_t))(v5 + 24 * v4 + 16);
  while (1)
  {
    LODWORD(v4) = *(_DWORD *)(v5 + 24 * v4) & 0x7FFFFFFF;
    if ((_DWORD)v4 == 0x7FFFFFFF)
      break;
    if (*(_QWORD *)(v5 + 24 * v4 + 4) == v3)
      return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, uint64_t *, re *, re::TypeInfo *, uint64_t, uint64_t))(v5 + 24 * v4 + 16);
  }
  return result;
}

uint64_t *re::Encoder<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,`anonymous namespace'::LegacyInputStreamAdaptor>::close(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*result)
  {
    v1 = result;
    v2 = result + 3;
    v3 = result[23];
    if (v3)
    {
      v4 = *v2;
      rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(result[23]);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v3);
    }
    v1[23] = 0;
    v5 = v1[22];
    if (v5)
    {
      v6 = v1[3];
      rapidjson::GenericDocument<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>,re::internal::RapidJSONAllocator>::~GenericDocument((_QWORD *)v1[22]);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, v5);
      v1[22] = 0;
    }
    v7 = v1[24];
    if (v7)
    {
      if (v1[28])
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      v1[28] = 0;
      v1[25] = 0;
      v1[26] = 0;
      v1[24] = 0;
      ++*((_DWORD *)v1 + 54);
    }
    if (!*((_BYTE *)v1 + 40))
    result = (uint64_t *)v1[12];
    if (result)
    {
      if (v1[16])
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 40))(result);
      v1[16] = 0;
      v1[13] = 0;
      v1[14] = 0;
      v1[12] = 0;
      ++*((_DWORD *)v1 + 30);
    }
    if (*((int *)v1 + 4) >= 1)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v1 + 24))(*v1);
      v1[1] = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
    *v1 = 0;
    *v2 = 0;
    v2[1] = 0;
  }
  return result;
}

_anonymous_namespace_ *re::Encoder<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,`anonymous namespace'::LegacyInputStreamAdaptor>::popState(_anonymous_namespace_ *result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  char v7;

  v3 = (uint64_t)result;
  v4 = *((_QWORD *)result + 14);
  if (!v4)
  {
    result = v6;
    if (v6 && (v7 & 1) != 0)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
    v4 = *(_QWORD *)(v3 + 112);
  }
  v5 = v4 - 1;
  if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 128) + 48 * v5) != a2)
  {
    result = v6;
    if (v6 && (v7 & 1) != 0)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
    v5 = *(_QWORD *)(v3 + 112) - 1;
  }
  *(_QWORD *)(v3 + 112) = v5;
  ++*(_DWORD *)(v3 + 120);
  return result;
}

uint64_t re::Encoder<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,`anonymous namespace'::LegacyInputStreamAdaptor>::setError(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)&v7 = 400;
  *((_QWORD *)&v7 + 1) = &re::FoundationErrorCategory(void)::instance;
  v3 = a2[2];
  v2 = a2[3];
  v10 = v3;
  v11 = v2;
  v5 = a2[1];
  v8 = *a2;
  v4 = v8;
  v9 = v5;
  a2[2] = 0;
  a2[3] = 0;
  *a2 = 0;
  a2[1] = 0;
  result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1, &v7);
  if (v4)
  {
    if ((v5 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  _BYTE v21[23];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  re::DynamicString::setCapacity(&v32, 0);
  v31 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v32, a3, &a9);
  v12 = a1 + 24;
  if ((v20 & 1) != 0)
    v13 = *(_BYTE **)&v21[7];
  else
    v13 = v21;
  if ((v33 & 1) != 0)
    v14 = v34;
  else
    v14 = (char *)&v33 + 1;
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v22, "deserialize", v13, v14);
  *(_QWORD *)&v26 = 400;
  *((_QWORD *)&v26 + 1) = &re::FoundationErrorCategory(void)::instance;
  v15 = v24;
  v29 = v24;
  v30 = v25;
  v16 = v22;
  v17 = v23;
  v27 = v22;
  v28 = v23;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v12, &v26);
  if (v16 && (v17 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v15);
  if (v19 && (v20 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  result = (uint64_t)v32;
  if (v32)
  {
    if ((v33 & 1) != 0)
      return (*(uint64_t (**)(void))(*v32 + 40))();
  }
  return result;
}

void *re::Encoder<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,`anonymous namespace'::LegacyInputStreamAdaptor>::combineLabels(_anonymous_namespace_ *a1, unint64_t a2, uint64_t a3, const char *a4)
{
  void *result;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  _BYTE *v15;
  size_t v16;
  size_t v17;
  char __src;
  char v19;

  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  result = re::DynamicString::setCapacity(a1, 0);
  if (a2 >= 2)
  {
    v9 = a2 - 1;
    v10 = a3 + 48;
    do
    {
      v11 = *(unsigned __int8 *)(v10 - 48);
      v12 = v11 > 0xA;
      v13 = (1 << v11) & 0x608;
      if (v12 || v13 == 0)
      {
        v15 = *(_BYTE **)(v10 + 8);
        if (v15 && *v15)
        {
          __src = 47;
          re::DynamicString::append(a1, &__src, 1uLL);
          v16 = strlen(*(const char **)(v10 + 8));
          result = re::DynamicString::append(a1, *(const char **)(v10 + 8), v16);
        }
        if (*(_BYTE *)v10 == 5)
          result = (void *)re::DynamicString::appendf(a1, "/%lld", *(_QWORD *)(v10 + 32));
      }
      v10 += 48;
      --v9;
    }
    while (v9);
  }
  if (a4)
  {
    if (*a4)
    {
      v19 = 47;
      re::DynamicString::append(a1, &v19, 1uLL);
      v17 = strlen(a4);
      return re::DynamicString::append(a1, a4, v17);
    }
  }
  return result;
}

uint64_t re::serializeType<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t result;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  int v31;
  int v32;
  int v33;
  const re::TypeInfo *v34;
  uint64_t *v35;
  int v36;
  BOOL (*v37)(uint64_t, char *, const re::TypeInfo *, uint64_t, re *, re::TypeInfo *, int);
  _anonymous_namespace_ *v38;
  uint64_t *v39;
  const re::TypeInfo *v40;
  uint64_t v41;
  char *v42;
  re *v43;
  re::TypeInfo *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  char *v55;
  const re::TypeInfo *v56;
  uint64_t *p_Tag;
  uint64_t *v58;
  uint64_t v59;
  re::UnionAccessor *v60;
  uint64_t *v61;
  void **Instance;
  uint64_t v63;
  char *v64;
  re::TypeRegistry *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  re::internal *v77;
  _anonymous_namespace_ *v78;
  double v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  int v88;
  re::internal *v89;
  uint64_t v90;
  void (*v91)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  uint64_t v92;
  int v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  void (*v97)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t *, uint64_t *, _QWORD);
  uint64_t v98;
  int v99;
  int v100;
  _anonymous_namespace_ *v101;
  const re::TypeInfo *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  re::internal *v106;
  uint64_t v107;
  void (*v108)(uint64_t, _QWORD, _QWORD, _QWORD, unint64_t *, unint64_t *, uint64_t);
  unsigned int v109;
  uint64_t i;
  uint64_t v111;
  void (*v112)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t *, uint64_t *, _QWORD);
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  re::Allocator *v120;
  void *v121;
  unint64_t *v122;
  void **v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  char *v127;
  const re::TypeInfo *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  unint64_t v134;
  uint64_t v135;
  const char *v136;
  unint64_t v137;
  BOOL v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  const re::StringID *v150;
  void (*v151)(void);
  uint64_t v152;
  void (*v153)(uint64_t *, _BYTE *, uint64_t, unint64_t);
  uint64_t j;
  uint64_t v155;
  uint64_t (*v156)(uint64_t *, _QWORD);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  re::TypeInfo *v160;
  uint64_t v161;
  char v162;
  unsigned __int8 *v163;
  int v164;
  unsigned int EnumConstantIndex;
  re *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  const void *v170;
  BOOL v171;
  char v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  _BYTE *v176;
  NSObject *v177;
  NSObject *v178;
  uint64_t v179;
  void **v180;
  re::internal::TypeTranslationTable *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  re::internal *v197;
  re::internal *v198;
  uint64_t v199;
  void (*v200)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  uint64_t v201;
  void (*v202)(uint64_t, const char *, _QWORD, _QWORD, unint64_t *, unint64_t *, uint64_t);
  _anonymous_namespace_ *v203;
  uint64_t k;
  unint64_t *v205;
  uint64_t v206;
  void (*v207)(uint64_t, const char *, _QWORD, void **, unint64_t *, _BYTE *, _QWORD);
  uint64_t v208;
  void (*v209)(uint64_t, const char *, _QWORD, uint64_t, uint64_t *, _QWORD *, _QWORD);
  uint64_t v210;
  void (*v211)(uint64_t *, _BYTE *, uint64_t);
  uint64_t v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216[4];
  uint64_t v217;
  _QWORD v218[2];
  uint64_t v219;
  unint64_t v220;
  uint64_t v221[4];
  _QWORD v222[4];
  _BYTE v223[16];
  uint64_t v224;
  uint64_t Tag;
  const char *v226;
  _BYTE buf[24];
  uint64_t v228;
  char v229;
  _BYTE v230[7];
  uint64_t v231;
  uint64_t v232;

  v232 = *MEMORY[0x24BDAC8D0];
  if (this == a6)
    goto LABEL_18;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)this + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_18;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_18;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12))
    goto LABEL_374;
  v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
  if (v19)
    v20 = *(_DWORD *)(v19 + 16);
  else
    v20 = -1;
  v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **((_QWORD **)a6 + 2));
  if (v21)
    v22 = *(_DWORD *)(v21 + 16);
  else
    v22 = -1;
  if (v20 != v22)
  {
    v26 = re::TypeInfo::name(this);
    v27 = re::TypeInfo::name(a6);
    if (re::StringID::operator==(v26, v27))
    {
      v28 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **((_QWORD **)a6 + 2));
      if (v28)
        v29 = *(_DWORD *)(v28 + 16);
      else
        v29 = -1;
      re::TypeInfo::atVersion(this, v29, (unsigned __int8 *)&v220);
      if ((_BYTE)v220)
      {
        if ((a7 & 1) != 0)
          Instance = 0;
        else
          Instance = re::TypeInfo::createInstance((re::TypeInfo *)v221, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
        if (*(_BYTE *)(a1 + 64)
          || ((*(void (**)(uint64_t, char *, const re::TypeInfo *, void **, uint64_t *, re::TypeInfo *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, Instance, v221, a6, a7), *(_BYTE *)(a1 + 64)))
        {
          if (!Instance)
            return 0;
          v120 = *(re::Allocator **)(a1 + 48);
          v121 = *(void **)(a1 + 264);
          v122 = (unint64_t *)v221;
          v123 = Instance;
LABEL_182:
          re::TypeInfo::releaseInstance((re::TypeInfo *)v122, v123, v120, v121);
          return 0;
        }
        if ((a7 & 1) == 0)
        {
          re::TypeInfo::TypeInfo((uint64_t)v216, (uint64_t)v221);
          re::internal::upgradeObject(Instance, v216, a4, (uint64_t **)this, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264), buf);
          if (!buf[0])
          {
            if ((v229 & 1) != 0)
              LOBYTE(v176) = v231;
            else
              v176 = v230;
            if (!buf[0] && v228 && (v229 & 1) != 0)
            {
              v151 = *(void (**)(void))(*(_QWORD *)v228 + 40);
LABEL_262:
              v151();
            }
            return 0;
          }
        }
        return 1;
      }
      v63 = re::TypeInfo::name(a6)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **((_QWORD **)a6 + 2));
      LOBYTE(v215) = v63;
      v30 = "Unknown serialized type \"%s\" version %u. No matching runtime type found.";
    }
    else
    {
      v45 = re::TypeInfo::name(a6)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **((_QWORD **)a6 + 2));
      re::TypeInfo::name(this);
      re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
      LOBYTE(v215) = v45;
      v30 = "Type name changed: Serialized type \"%s\" version %u, runtime type \"%s\" version %u.";
    }
LABEL_216:
    v135 = a1;
    v136 = a2;
LABEL_388:
    return 0;
  }
LABEL_18:
  switch(*((_BYTE *)this + 12))
  {
    case 1:
      if (this == a6)
        goto LABEL_22;
      if (*(_QWORD *)this != *(_QWORD *)a6)
      {
        if (!re::areSameTranslatedVersion(this, a6, a3))
          break;
LABEL_22:
        v23 = re::TypeInfo::name(this);
        v24 = (unint64_t)*v23 >> 1;
        if (v24 <= 0xCA3DEFB5)
        {
          if ((unint64_t)*v23 >> 1 <= 0x5D0225B)
          {
            if ((unint64_t)*v23 >> 1 <= 0x2E9355)
            {
              if (v24 != 104431)
              {
                if (v24 == 3029738)
LABEL_271:
                v215 = re::TypeInfo::name(this)[1];
                v30 = "Unsupported basic type \"%s\".";
                goto LABEL_216;
              }
            }
            if (v24 == 3052374)
            v140 = 3327612;
LABEL_236:
            if (v24 == v140)
            goto LABEL_271;
          }
          if ((unint64_t)*v23 >> 1 > 0xB0F77BD0)
          {
            if (v24 == 2969009105)
            if (v24 == 3111160798)
            goto LABEL_271;
          }
          if (v24 == 97526364)
          v59 = 109413500;
LABEL_193:
          if (v24 == v59)
          goto LABEL_271;
        }
        if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
        {
          if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
          {
            if (v24 == 0x18E6A9A093)
            if (v24 == 0x303EE86A734)
            goto LABEL_271;
          }
          if (v24 == 0x303EE8780EELL)
          if (v24 != 0x303EE88E58DLL)
            goto LABEL_271;
        }
        else
        {
          if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
          {
            if (v24 == 0x16749DFF03)
            v140 = 0x16749F63A2;
            goto LABEL_236;
          }
          if (v24 != 3393056694)
          {
            v59 = 0x16749D2549;
            goto LABEL_193;
          }
        }
      }
      v66 = **((_QWORD **)this + 2);
      v67 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v66 == (unsigned __int16)v67)
      {
        v18 = WORD1(v66) == WORD1(v67);
        v68 = (v67 ^ v66) & 0xFFFFFF00000000;
        if (v18 && v68 == 0)
          goto LABEL_22;
      }
      break;
    case 2:
      if (this == a6)
        goto LABEL_205;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v70 = **((_QWORD **)this + 2);
        v71 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v70 == (unsigned __int16)v71
          && WORD1(v70) == WORD1(v71)
          && ((v71 ^ v70) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_118;
        }
        v31 = 2;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
        {
LABEL_118:
          if (*(_QWORD *)this == *(_QWORD *)a6)
          {
            v130 = **((_QWORD **)this + 2);
            v131 = **((_QWORD **)a6 + 2);
            if ((unsigned __int16)v130 == (unsigned __int16)v131
              && ((v18 = WORD1(v130) == WORD1(v131), v132 = (v131 ^ v130) & 0xFFFFFF00000000, v18)
                ? (v133 = v132 == 0)
                : (v133 = 0),
                  v133))
            {
LABEL_205:
              v74 = 1;
            }
            else
            {
              v74 = 0;
            }
          }
          else
          {
            v74 = re::areSameTranslatedVersion(this, a6, a3);
          }
          if ((_DWORD)a7)
          {
            *(_QWORD *)buf = 0;
            if (!(_DWORD)result)
              return result;
            if (*(_QWORD *)buf)
            return *(_BYTE *)(a1 + 64) == 0;
          }
          v220 = 0;
          v134 = v220;
          if (!v220)
          {
            v30 = "Failed to read enum constant. String is empty.";
            goto LABEL_387;
          }
          if (v220 >= 0x401)
          {
            LOBYTE(v215) = v220;
            v30 = "Failed to read enum constant. String is too long. Length: %zu";
            goto LABEL_387;
          }
          v149 = (char *)(*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), v220 + 1, 0);
          v149[v134] = 0;
          if (*(_BYTE *)(a1 + 64))
          {
LABEL_261:
            v151 = *(void (**)(void))(**(_QWORD **)(a1 + 56) + 40);
            goto LABEL_262;
          }
          v161 = *v149;
          if (*v149)
          {
            v162 = v149[1];
            if (v162)
            {
              v163 = (unsigned __int8 *)(v149 + 2);
              do
              {
                v161 = 31 * v161 + v162;
                v164 = *v163++;
                v162 = v164;
              }
              while (v164);
            }
          }
          *(_QWORD *)buf = 2 * v161;
          *(_QWORD *)&buf[8] = v149;
          EnumConstantIndex = re::internal::getEnumConstantIndex(a6, (const re::TypeInfo *)buf, v150);
          re::StringID::destroyString((re::StringID *)buf);
          if ((EnumConstantIndex & 0x80000000) != 0)
          {
            v177 = *re::foundationSerializationLogObjects(v166);
            if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
            {
              v178 = v177;
              v179 = re::TypeInfo::name(a6)[1];
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v149;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v179;
              _os_log_impl(&dword_224FE9000, v178, OS_LOG_TYPE_INFO, "String \"%s\" is not a valid enum constant of type \"%s\" - skipping.", buf, 0x16u);

            }
            v170 = 0;
          }
          else if (v74)
          {
            v167 = re::TypeInfo::enumConstants(this);
            v169 = EnumConstantIndex - v168;
            if (EnumConstantIndex >= v168)
            {
              v187 = re::TypeInfo::renamedEnumConstants(this);
              if (v188 <= v169)
              {
                re::internal::assertLog((re::internal *)6, v188, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v169, v188);
                _os_crash();
                __break(1u);
                JUMPOUT(0x225CAF994);
              }
              v170 = (const void *)(v187 + 24 * v169);
            }
            else
            {
              v170 = (const void *)(v167 + 24 * EnumConstantIndex);
            }
          }
          else
          {
            v181 = *(re::internal::TypeTranslationTable **)(*(_QWORD *)a6 + 856);
            if (!v181
              || (v170 = (const void *)re::internal::TypeTranslationTable::translateSerializedEnum(v181, a6, EnumConstantIndex, this)) == 0)
            {
              re::TypeInfo::name(this);
              goto LABEL_261;
            }
          }
          (*(void (**)(_QWORD, char *))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), v149);
          if (v170)
            memcpy(a4, v170, *(unsigned int *)(*((_QWORD *)this + 2) + 8));
          return *(_BYTE *)(a1 + 64) == 0;
        }
        v31 = *((unsigned __int8 *)this + 12);
      }
      if (v31 == *((unsigned __int8 *)a6 + 12))
      {
        v72 = re::TypeInfo::name(this);
        v73 = re::TypeInfo::name(a6);
        if (re::StringID::operator==(v72, v73))
          goto LABEL_118;
      }
      break;
    case 3:
      if (this == a6)
        goto LABEL_125;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v75 = **((_QWORD **)this + 2);
        v76 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v75 == (unsigned __int16)v76
          && WORD1(v75) == WORD1(v76)
          && ((v76 ^ v75) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_125;
        }
        v32 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
          goto LABEL_125;
        v32 = *((unsigned __int8 *)this + 12);
      }
      if (v32 != *((unsigned __int8 *)a6 + 12))
        break;
LABEL_125:
      if ((_DWORD)a7)
      {
        LOBYTE(Tag) = 0;
        if ((_BYTE)Tag)
        {
          v77 = *(re::internal **)(a1 + 272);
          re::TypeInfo::referencedType(a6, (uint64_t)&v220);
          re::internal::translateType(v77, (const re::TypeRegistry *)&v220, (uint64_t)buf);
          if (!*(_BYTE *)(a1 + 64))
            (*(void (**)(uint64_t, char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 0, 0, buf, buf, 1);
        }
        v78 = (_anonymous_namespace_ *)(a1 + 24);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&v220, (uint64_t)&buf[8]);
        re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)this);
        v223[0] = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)&buf[16] + 80))(a4) != 0;
        if (v223[0])
        {
          v80 = re::TypeInfo::createInstance((re::TypeInfo *)&v220, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          (*(void (**)(uint64_t *, void **))(*(_QWORD *)&buf[16] + 88))(a4, v80);
          re::TypeInfo::releaseInstance((re::TypeInfo *)&v220, v80, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          v81 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)&buf[16] + 80))(a4);
          if (!*(_BYTE *)(a1 + 64))
            (*(void (**)(uint64_t, char *, _QWORD, uint64_t, unint64_t *, uint64_t *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2, 0, v81, &v220, &Tag, 0);
        }
        else
        {
          (*(void (**)(uint64_t *, _QWORD, double))(*(_QWORD *)&buf[16] + 88))(a4, 0, v79);
        }
        v78 = (_anonymous_namespace_ *)(a1 + 24);
      }
      return *(_BYTE *)(a1 + 64) == 0;
    case 4:
      if (this == a6)
        goto LABEL_141;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v82 = **((_QWORD **)this + 2);
        v83 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v82 == (unsigned __int16)v83)
        {
          v18 = WORD1(v82) == WORD1(v83);
          v84 = (v83 ^ v82) & 0xFFFFFF00000000;
          if (v18 && v84 == 0)
            goto LABEL_141;
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_141;
      }
      if (*((_BYTE *)a6 + 12) != 4)
        break;
      v86 = *((_QWORD *)this + 2);
      v87 = *((_QWORD *)a6 + 2);
      v88 = *(_DWORD *)(v87 + 84) & 0xFFFFFF;
      if ((*(_DWORD *)(v86 + 84) & 0xFFFFFF) == 0)
      {
        if (!v88 && *(_DWORD *)(v86 + 88) == *(_DWORD *)(v87 + 88))
          goto LABEL_141;
        break;
      }
      if (!v88)
        break;
LABEL_141:
      if ((_DWORD)a7)
      {
        v89 = *(re::internal **)(a1 + 272);
        re::TypeInfo::referencedType(a6, (uint64_t)&v220);
        re::internal::translateType(v89, (const re::TypeRegistry *)&v220, (uint64_t)buf);
        v90 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, buf);
        if (!v90)
          goto LABEL_375;
        v91 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v90;
        v92 = *((_QWORD *)a6 + 2);
        v93 = *(_DWORD *)(v92 + 84) & 0xFFFFFF;
        if (v93)
        {
          v94 = 0;
          v95 = 8;
        }
        else
        {
          v94 = *(int *)(v92 + 88);
          v95 = 4;
        }
        v220 = v94;
        v101 = (_anonymous_namespace_ *)(a1 + 24);
        if ((_DWORD)result)
        {
          v137 = v220;
          if (v93)
            v138 = v220 == 0;
          else
            v138 = 1;
          v139 = v138;
          if (v138)
          {
            if (!v220)
              goto LABEL_311;
          }
          else
          {
            v222[0] = 0;
            v222[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a1 + 16))(a1, 0, v222);
          }
          do
          {
            v91(a1, 0, 0, 0, buf, buf, 1);
            --v137;
          }
          while (v137);
          if ((v139 & 1) != 0)
          {
LABEL_311:
            return *(_BYTE *)(a1 + 64) == 0;
          }
LABEL_310:
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          goto LABEL_311;
        }
      }
      else
      {
        re::TypeInfo::referencedType(this, (uint64_t)&v220);
        re::TypeInfo::referencedType(a6, (uint64_t)&Tag);
        re::TypeInfo::TypeInfo((uint64_t)v223, (uint64_t)this);
        v96 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 80))(a1, &v220);
        if (!v96)
          goto LABEL_385;
        v97 = (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t *, uint64_t *, _QWORD))v96;
        v98 = re::ArrayAccessor::size((re::ArrayAccessor *)v223, (char *)a4);
        v217 = v98;
        v99 = *(_DWORD *)(*((_QWORD *)this + 2) + 84) & 0xFFFFFF;
        if (v99)
          v100 = 8;
        else
          v100 = 4;
        v101 = (_anonymous_namespace_ *)(a1 + 24);
        if ((_DWORD)result)
        {
          v102 = (const re::TypeInfo *)v217;
          if (v98 != v217)
          {
            if ((*(_DWORD *)(v224 + 84) & 0xFFFFFF) == 0)
            {
              LOBYTE(v215) = v98;
              v30 = "Invalid array size. Expected size = %zu, actual size = %zu";
              goto LABEL_387;
            }
            re::TypeInfo::referencedType((re::TypeInfo *)v223, (uint64_t)buf);
            v103 = *(_DWORD *)(*(_QWORD *)&buf[16] + 8);
            if (!is_mul_ok(v103, (unint64_t)v102))
              goto LABEL_169;
            re::ArrayAccessor::reset((re::ArrayAccessor *)v223, (void **)a4, *(re::Allocator **)(a1 + 48), v102);
          }
          if (v99)
            v171 = v102 == 0;
          else
            v171 = 1;
          v172 = v171;
          if (v171)
          {
            if (!v102)
              goto LABEL_311;
          }
          else
          {
            v173 = *a4;
            v218[0] = 0;
            v218[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v173, v218);
          }
          v174 = 0;
          do
          {
            v175 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)v223, (char *)a4, v174);
            v97(a1, 0, 0, v175, &v220, &Tag, 0);
            ++v174;
          }
          while (v102 != (const re::TypeInfo *)v174);
          if ((v172 & 1) != 0)
            goto LABEL_311;
          goto LABEL_310;
        }
      }
      return result;
    case 5:
      if (this == a6)
        goto LABEL_159;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v104 = **((_QWORD **)this + 2);
        v105 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v104 == (unsigned __int16)v105
          && WORD1(v104) == WORD1(v105)
          && ((v105 ^ v104) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_159;
        }
        v33 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
          goto LABEL_159;
        v33 = *((unsigned __int8 *)this + 12);
      }
      if (v33 != *((unsigned __int8 *)a6 + 12))
        break;
LABEL_159:
      if ((_DWORD)a7)
      {
        v106 = *(re::internal **)(a1 + 272);
        re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), buf);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
        re::internal::translateType(v106, (const re::TypeRegistry *)&Tag, (uint64_t)&v220);
        v107 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 80))(a1, &v220);
        if (!v107)
          goto LABEL_385;
        v108 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, unint64_t *, unint64_t *, uint64_t))v107;
        *(_QWORD *)buf = 0;
        v101 = (_anonymous_namespace_ *)(a1 + 24);
        result = 0;
        if (v109)
        {
          for (i = *(_QWORD *)buf; i; --i)
            v108(a1, 0, 0, 0, &v220, &v220, 1);
          goto LABEL_311;
        }
        return result;
      }
      re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&v220, (uint64_t)&buf[8]);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&buf[8]);
      re::TypeInfo::TypeInfo((uint64_t)v223, (uint64_t)this);
      v111 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 80))(a1, &v220);
      if (!v111)
        goto LABEL_385;
      v112 = (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t *, uint64_t *, _QWORD))v111;
      v113 = (*(uint64_t (**)(uint64_t *))(v224 + 80))(a4);
      v222[0] = v113;
      v101 = (_anonymous_namespace_ *)(a1 + 24);
      result = 0;
      if (!v114)
        return result;
      v115 = v222[0];
      if (v113 != v222[0])
      {
        re::TypeInfo::referencedType((re::TypeInfo *)v223, (uint64_t)buf);
        v103 = *(_DWORD *)(*(_QWORD *)&buf[16] + 8);
        if (!is_mul_ok(v103, v115))
        {
LABEL_169:
          LOBYTE(v215) = v103;
          v30 = "Size overflow during deserialization. Element size = %zu, count = %zu";
          goto LABEL_387;
        }
        v152 = *(_QWORD *)(a1 + 48);
        v153 = *(void (**)(uint64_t *, _BYTE *, uint64_t, unint64_t))(v224 + 88);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v223);
        v153(a4, buf, v152, v115);
      }
      if (*(_QWORD *)(v224 + 96))
      {
        if (v115)
        {
          for (j = 0; j != v115; ++j)
          {
            v155 = (*(uint64_t (**)(uint64_t *, uint64_t))(v224 + 96))(a4, j);
            v112(a1, 0, 0, v155, &v220, &Tag, 0);
          }
        }
      }
      else
      {
        v156 = *(uint64_t (**)(uint64_t *, _QWORD))(v224 + 104);
        if (!v156 || !*(_QWORD *)(v224 + 112) || !*(_QWORD *)(v224 + 120))
        {
          v160 = (re::TypeInfo *)re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v223);
          v215 = re::TypeInfo::name(v160)[1];
          v30 = "List type \"%s\" does not provide an indexer or iterator.";
          goto LABEL_216;
        }
        v157 = v156(a4, *(_QWORD *)(a1 + 56));
        v158 = (*(uint64_t (**)(void))(v224 + 112))();
        if (v158)
        {
          v159 = v158;
          do
          {
            v112(a1, 0, 0, v159, &v220, &Tag, 0);
            v159 = (*(uint64_t (**)(uint64_t))(v224 + 112))(v157);
          }
          while (v159);
        }
        (*(void (**)(uint64_t, _QWORD))(v224 + 120))(v157, *(_QWORD *)(a1 + 56));
      }
      goto LABEL_311;
    case 6:
      re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), buf);
      re::TypeInfo::TypeInfo((uint64_t)&v220, (uint64_t)&buf[8]);
      v35 = re::TypeInfo::name((re::TypeInfo *)&v220);
      v36 = BYTE4(v221[0]);
      if (BYTE4(v221[0]) != 1)
        goto LABEL_97;
      if (re::TypeInfo::isInteger((re::TypeInfo *)&v220))
      {
        *(_QWORD *)buf = 0x303EE88E58DLL;
        *(_QWORD *)&buf[8] = "uint64_t";
        if (re::StringID::operator==(v35, buf)
          || (Tag = 3393056694, v226 = "size_t", re::StringID::operator==(v35, &Tag)))
        {
LABEL_325:
          v126 = a1;
          v127 = a2;
          v128 = a3;
          v129 = a4;
          p_Tag = (uint64_t *)this;
          v58 = (uint64_t *)a6;
          return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, uint64_t *, uint64_t *, uint64_t))v37)(v126, v127, v128, v129, p_Tag, v58, a7);
        }
        *(_QWORD *)buf = 0x303EE8780EELL;
        *(_QWORD *)&buf[8] = "uint32_t";
        if (re::StringID::operator==(v35, buf))
        {
          goto LABEL_325;
        }
        *(_QWORD *)buf = 0x303EE86A734;
        *(_QWORD *)&buf[8] = "uint16_t";
        if (re::StringID::operator==(v35, buf))
        {
          goto LABEL_325;
        }
        *(_QWORD *)buf = 0x18E6A9A093;
        *(_QWORD *)&buf[8] = "uint8_t";
        if (re::StringID::operator==(v35, buf))
        {
          goto LABEL_325;
        }
        *(_QWORD *)buf = 0x16749F63A2;
        *(_QWORD *)&buf[8] = "int64_t";
        if (re::StringID::operator==(v35, buf) || (Tag = 3327612, v226 = "long", re::StringID::operator==(v35, &Tag)))
        {
          goto LABEL_325;
        }
        *(_QWORD *)buf = 104431;
        *(_QWORD *)&buf[8] = "int";
        if (re::StringID::operator==(v35, buf))
        {
          goto LABEL_325;
        }
        *(_QWORD *)buf = 109413500;
        *(_QWORD *)&buf[8] = "short";
        if (re::StringID::operator==(v35, buf))
        {
          goto LABEL_325;
        }
      }
      else
      {
        v36 = BYTE4(v221[0]);
LABEL_97:
        if (v36 == 8)
        {
          if ((unint64_t)*v35 >> 1 == 0x134375A94D9F7110)
          {
            v64 = (char *)v35[1];
            if (v64 == "DynamicString" || !strcmp(v64, "DynamicString"))
            {
              goto LABEL_325;
            }
          }
          *(_QWORD *)buf = 0x22C6ED80D0CLL;
          *(_QWORD *)&buf[8] = "StringID";
          if (re::StringID::operator==(v35, buf))
          {
            goto LABEL_325;
          }
        }
      }
      if (this == a6)
        goto LABEL_367;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v195 = **((_QWORD **)this + 2);
        v196 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v195 == (unsigned __int16)v196
          && WORD1(v195) == WORD1(v196)
          && ((v196 ^ v195) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_367;
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, v34))
      {
        goto LABEL_367;
      }
      if (*((unsigned __int8 *)this + 12) == *((unsigned __int8 *)a6 + 12))
      {
LABEL_367:
        if ((_DWORD)a7)
        {
          v197 = *(re::internal **)(a1 + 272);
          re::TypeInfo::referencedType(a6, (uint64_t)&v220);
          re::internal::translateType(v197, (const re::TypeRegistry *)&v220, (uint64_t)buf);
          v198 = *(re::internal **)(a1 + 272);
          re::TypeInfo::dictionaryValueType(a6, (uint64_t)&Tag);
          re::internal::translateType(v198, (const re::TypeRegistry *)&Tag, (uint64_t)&v220);
          v199 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, buf);
          if (!v199)
          {
LABEL_375:
            v205 = (unint64_t *)buf;
LABEL_386:
            v215 = re::TypeInfo::name((re::TypeInfo *)v205)[1];
            v30 = "Failed to resolve serialize function for type \"%s\"";
            goto LABEL_387;
          }
          v200 = (void (*)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v199;
          v201 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 80))(a1, &v220);
          if (v201)
          {
            v202 = (void (*)(uint64_t, const char *, _QWORD, _QWORD, unint64_t *, unint64_t *, uint64_t))v201;
            Tag = 0;
            v203 = (_anonymous_namespace_ *)(a1 + 24);
            if (!(_DWORD)result)
              return result;
            for (k = Tag; k; --k)
            {
              v200(a1, "key", 0, 0, buf, buf, 1);
              v202(a1, "value", 0, 0, &v220, &v220, 1);
            }
LABEL_384:
            return *(_BYTE *)(a1 + 64) == 0;
          }
LABEL_385:
          v205 = &v220;
          goto LABEL_386;
        }
        re::TypeInfo::referencedType(this, (uint64_t)&v220);
        re::TypeInfo::dictionaryValueType(this, (uint64_t)&Tag);
        re::TypeInfo::referencedType(a6, (uint64_t)v223);
        re::TypeInfo::dictionaryValueType(a6, (uint64_t)v222);
        re::TypeInfo::TypeInfo((uint64_t)v218, (uint64_t)this);
        v206 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 80))(a1, &v220);
        if (!v206)
          goto LABEL_385;
        v207 = (void (*)(uint64_t, const char *, _QWORD, void **, unint64_t *, _BYTE *, _QWORD))v206;
        v208 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &Tag);
        if (!v208)
        {
          v205 = (unint64_t *)&Tag;
          goto LABEL_386;
        }
        v209 = (void (*)(uint64_t, const char *, _QWORD, uint64_t, uint64_t *, _QWORD *, _QWORD))v208;
        v217 = (*(uint64_t (**)(uint64_t *))(v219 + 88))(a4);
        v203 = (_anonymous_namespace_ *)(a1 + 24);
        if (!(_DWORD)result)
          return result;
        v210 = *(_QWORD *)(a1 + 48);
        v211 = *(void (**)(uint64_t *, _BYTE *, uint64_t))(v219 + 96);
        re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)v218);
        v211(a4, buf, v210);
        v212 = v217;
        if (!v217)
          goto LABEL_384;
        v213 = re::TypeInfo::createInstance((re::TypeInfo *)&v220, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
        while (1)
        {
          v207(a1, "key", 0, v213, &v220, v223, 0);
          v120 = *(re::Allocator **)(a1 + 48);
          if (*(_BYTE *)(a1 + 64))
            break;
          v214 = (*(uint64_t (**)(uint64_t *, _QWORD *, re::Allocator *, void **))(v219 + 104))(a4, v218, v120, v213);
          v209(a1, "value", 0, v214, &Tag, v222, 0);
          if (!--v212)
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)&v220, v213, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            goto LABEL_384;
          }
        }
        v121 = *(void **)(a1 + 264);
        v122 = &v220;
        v123 = v213;
        goto LABEL_182;
      }
      break;
    case 7:
      if (this == a6)
        goto LABEL_56;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v116 = **((_QWORD **)this + 2);
        v117 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v116 != (unsigned __int16)v117)
          break;
        v18 = WORD1(v116) == WORD1(v117);
        v118 = (v117 ^ v116) & 0xFFFFFF00000000;
        if (!v18 || v118 != 0)
          break;
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        break;
      }
LABEL_56:
      v38 = (_anonymous_namespace_ *)(a1 + 24);
      if ((_DWORD)a7)
      {
        if (!(_DWORD)result)
          return result;
        v220 = 0;
        if (v220 < *(unsigned int *)(*((_QWORD *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, v220, (uint64_t)buf);
          if (!*(_BYTE *)(a1 + 64))
            (*(void (**)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, "value", 0, 0, buf, buf, 1);
        }
      }
      else
      {
        if (!(_DWORD)result)
          return result;
        v60 = (re::UnionAccessor *)re::TypeInfo::TypeInfo((uint64_t)buf, (uint64_t)this);
        Tag = re::UnionAccessor::readTag(v60, (char *)a4);
        v61 = (uint64_t *)Tag;
        re::UnionAccessor::reset((re::UnionAccessor *)buf, (char *)a4, (const re::TypeInfo *)Tag, *(re::Allocator **)(a1 + 48));
        if ((unint64_t)v61 < *(unsigned int *)(*((_QWORD *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, (uint64_t)v61, (uint64_t)&v220);
          if (!*(_BYTE *)(a1 + 64))
            (*(void (**)(uint64_t, const char *, _QWORD, uint64_t *, unint64_t *, unint64_t *, _QWORD))(*(_QWORD *)a1 + 72))(a1, "value", 0, a4, &v220, &v220, 0);
        }
      }
      goto LABEL_254;
    case 8:
      if (!(_DWORD)a7)
        goto LABEL_67;
      if ((*(_BYTE *)(*((_QWORD *)this + 2) + 49) & 1) != 0)
      {
        v65 = *(re::TypeRegistry **)(a1 + 272);
        Tag = 0x2686EB529B3EE220;
        v226 = "DynamicString";
        re::TypeRegistry::typeInfo(v65, (const re::StringID *)&Tag, buf);
        re::TypeInfo::TypeInfo((uint64_t)&v220, (uint64_t)&buf[8]);
        re::StringID::destroyString((re::StringID *)&Tag);
        v43 = (re *)&v220;
        v44 = (re::TypeInfo *)&v220;
        v41 = a1;
        v42 = a2;
        goto LABEL_104;
      }
      v39 = re::TypeInfo::name(this);
      *(_QWORD *)buf = 0x134375A94D9F7110;
      *(_QWORD *)&buf[8] = "DynamicString";
      if (re::StringID::operator==(v39, buf))
      {
        v41 = a1;
        v42 = a2;
        v43 = this;
        v44 = this;
LABEL_104:
        return *(_BYTE *)(a1 + 64) == 0;
      }
LABEL_67:
      v46 = *((_QWORD *)this + 2);
      if ((*(_BYTE *)(v46 + 48) & 4) == 0)
      {
        v38 = (_anonymous_namespace_ *)(a1 + 24);
        result = 0;
        if (!v47)
          return result;
        v48 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
        if (v48
          && *(_WORD *)(v48 + 22) == 3
          && *(_DWORD *)v48
          && (v49 = *(_QWORD *)(v48 + 8), (*(_WORD *)(v49 + 46) & 0x40) != 0)
          && ((*(_WORD *)(v49 + 22) & 0x1000) != 0
            ? (v50 = *(const char **)(v48 + 8))
            : (v50 = *(const char **)(v49 + 8)),
              !strcmp(v50, "@version")))
        {
          v51 = *(_DWORD *)(v49 + 24);
        }
        else
        {
          v51 = 1;
        }
        v52 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **((_QWORD **)a6 + 2));
        if (v52)
          v53 = *(_DWORD *)(v52 + 16);
        else
          v53 = -1;
        if (v51 == v53)
        {
LABEL_254:
          return *(_BYTE *)(a1 + 64) == 0;
        }
        if (*(_QWORD *)this != *(_QWORD *)a6
          || (v146 = **((_QWORD **)this + 2),
              v147 = **((_QWORD **)a6 + 2),
              (unsigned __int16)v146 != (unsigned __int16)v147)
          || WORD1(v146) != WORD1(v147)
          || ((v147 ^ v146) & 0xFFFFFF00000000) != 0)
        {
          v148 = re::TypeInfo::name(a6)[1];
          re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **((_QWORD **)a6 + 2));
          LOBYTE(v215) = v148;
          v30 = "Type \"%s\" version %u expected in JSON. Actual version found in JSON: %u";
LABEL_387:
          v135 = a1;
          v136 = 0;
          goto LABEL_388;
        }
        re::TypeInfo::atVersion(this, v51, (unsigned __int8 *)&v220);
        if (!(_BYTE)v220)
        {
          v215 = re::TypeInfo::name(this)[1];
          v30 = "Unknown serialized type \"%s\" version %u. No matching runtime type found.";
          goto LABEL_387;
        }
        if ((a7 & 1) != 0)
          v180 = 0;
        else
          v180 = re::TypeInfo::createInstance((re::TypeInfo *)v221, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
        if (*(_BYTE *)(a1 + 64))
        {
          if (!v180)
            return 0;
          v120 = *(re::Allocator **)(a1 + 48);
          v121 = *(void **)(a1 + 264);
          v122 = (unint64_t *)v221;
          v123 = v180;
          goto LABEL_182;
        }
        if ((a7 & 1) == 0)
        {
          re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)v221);
          re::internal::upgradeObject(v180, (uint64_t **)&Tag, a4, (uint64_t **)this, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264), buf);
          if (!buf[0])
          {
            if ((v229 & 1) != 0)
              LOBYTE(v194) = v231;
            else
              v194 = v230;
            if (!buf[0] && v228 && (v229 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v228 + 40))();
          }
        }
        return 1;
      }
      v54 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)buf, *(_QWORD *)this, v46);
      re::TypeMemberCollection::operator[](v54, 0, (uint64_t)&v220);
      v55 = (char *)a4 + *(unsigned int *)(v221[1] + 24);
      re::TypeMemberInfo::memberType((re::TypeMemberInfo *)&v220, (uint64_t)&Tag);
      if (re::areSameVersion(this, a6, v56))
      {
        if (*(_BYTE *)(a1 + 64))
          return 0;
        v37 = *(BOOL (**)(uint64_t, char *, const re::TypeInfo *, uint64_t, re *, re::TypeInfo *, int))(*(_QWORD *)a1 + 72);
        p_Tag = &Tag;
        v58 = &Tag;
        goto LABEL_186;
      }
      v124 = *((_QWORD *)a6 + 2);
      if (*(_DWORD *)(v124 + 88) == 1)
      {
        v125 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)buf, *(_QWORD *)a6, v124);
        re::TypeMemberCollection::operator[](v125, 0, (uint64_t)v222);
        re::TypeMemberInfo::memberType((re::TypeMemberInfo *)v222, (uint64_t)v223);
        if (*(_BYTE *)(a1 + 64))
          return 0;
        v37 = *(BOOL (**)(uint64_t, char *, const re::TypeInfo *, uint64_t, re *, re::TypeInfo *, int))(*(_QWORD *)a1 + 72);
        p_Tag = &Tag;
        v58 = (uint64_t *)v223;
LABEL_186:
        v126 = a1;
        v127 = a2;
        v128 = a3;
        v129 = (uint64_t *)v55;
        return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, uint64_t *, uint64_t *, uint64_t *, uint64_t))v37)(v126, v127, v128, v129, p_Tag, v58, a7);
      }
      break;
    case 9:
      v215 = re::TypeInfo::name(this)[1];
      v30 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_216;
    default:
      LOBYTE(v215) = *((_BYTE *)this + 12);
      v30 = "Invalid type category. Value = %d";
      goto LABEL_216;
  }
LABEL_374:
  return 0;
}

uint64_t re::internal::setTypeMismatchError<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, re::TypeInfo *this, re::TypeInfo *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = re::TypeInfo::name(this)[1];
  re::TypeInfo::name(a4);
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(uint64_t a1, char *a2, BOOL *a3, char a4)
{
  unsigned int *result;
  int v9;
  const char *v10;
  re *v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    v9 = *((unsigned __int16 *)result + 11);
    if ((v9 & 8) != 0)
    {
      v12 = v9 == 10;
    }
    else
    {
      if ((v9 & 0x400) == 0
        || !*(_BYTE *)(a1 + 233)
        || ((v9 & 0x1000) != 0 ? (v10 = (const char *)result) : (v10 = (const char *)*((_QWORD *)result + 1)),
            (v11 = (re *)strcasecmp(v10, "true"), v12 = (_DWORD)v11 == 0, (_DWORD)v11)
         && (v11 = (re *)strcasecmp(v10, "false"), (_DWORD)v11)))
      {
        return 0;
      }
      v14 = *re::foundationSerializationLogObjects(v11);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 136315138;
        v16 = v10;
        _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as BOOLean in Bool/String Compatibility Mode", (uint8_t *)&v15, 0xCu);
      }
    }
    if ((a4 & 1) == 0)
      *a3 = v12;
    v13 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
    ++*(_QWORD *)(v13 - 16);
    return (unsigned int *)1;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(uint64_t a1, char *a2, _BYTE *a3, char a4)
{
  unsigned int *result;
  int v9;
  _BYTE *v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x400) == 0)
    {
      v9 = (*((_WORD *)result + 11) & 0x1000) != 0 ? 21 - *((char *)result + 21) : *result;
      if (v9 == 1)
      {
        return 0;
      }
    }
    if ((a4 & 1) == 0)
    {
      if ((*((_WORD *)result + 11) & 0x1000) != 0)
        v10 = result;
      else
        v10 = (_BYTE *)*((_QWORD *)result + 1);
      *a3 = *v10;
    }
    v11 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
    ++*(_QWORD *)(v11 - 16);
    return (unsigned int *)1;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI8(uint64_t a1, char *a2, _BYTE *a3, char a4)
{
  unsigned int *result;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BOOL4 v14;
  BOOL v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  NSObject *v19;
  unsigned int v20;
  uint8_t buf[4];
  unsigned __int8 *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x20) != 0)
    {
      v11 = *result;
      if (v11 != (char)v11)
      {
        return 0;
      }
LABEL_14:
      if ((a4 & 1) == 0)
        *a3 = v11;
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(_BYTE *)(a1 + 232))
      goto LABEL_41;
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v9 = (unsigned __int8 *)result;
    else
      v9 = (unsigned __int8 *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v10 = 21 - *((char *)result + 21);
    else
      v10 = *result;
    v13 = &v9[v10];
    if (v10)
      v14 = *v9 == 45;
    else
      v14 = 0;
    v15 = v14;
    if (v10 == (unint64_t)v14)
      goto LABEL_36;
    v16 = v10 - (unint64_t)v14;
    v17 = &v9[v14];
    while (*v17 == 48)
    {
      ++v17;
      if (!--v16)
        goto LABEL_36;
    }
    if (!v16)
    {
LABEL_36:
      v17 = &v9[v10];
    }
    else if (*v17 - 48 < 0xA)
    {
      v17 = std::__itoa::__traits<unsigned char>::__read[abi:nn180100](v17, v13, buf, &v20);
      if (v17 != v13 && *v17 - 48 <= 9 || *(_DWORD *)buf > 0xFFu || 255 - *(_DWORD *)buf < v20)
        goto LABEL_41;
      v18 = v20 + *(_DWORD *)buf;
      if (!v15)
      {
        if ((v18 & 0x80) != 0)
          goto LABEL_41;
        LOBYTE(v11) = v20 + buf[0];
        goto LABEL_40;
      }
      if ((v20 + buf[0]) > 0x80u)
        goto LABEL_41;
LABEL_39:
      v11 = -v18;
LABEL_40:
      if (v13 != v17)
        goto LABEL_41;
      v19 = *re::foundationSerializationLogObjects((re *)v17);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v22 = v9;
        _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
      }
      goto LABEL_14;
    }
    if (v17 == &v9[v14])
    {
LABEL_41:
      return 0;
    }
    v18 = 0;
    LOBYTE(v11) = 0;
    if (!v14)
      goto LABEL_40;
    goto LABEL_39;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI16(uint64_t a1, char *a2, _WORD *a3, char a4)
{
  unsigned int *result;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BOOL4 v14;
  BOOL v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  NSObject *v19;
  unsigned int v20;
  uint8_t buf[4];
  unsigned __int8 *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x20) != 0)
    {
      v11 = *result;
      if (v11 != (__int16)v11)
      {
        return 0;
      }
LABEL_14:
      if ((a4 & 1) == 0)
        *a3 = v11;
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(_BYTE *)(a1 + 232))
      goto LABEL_41;
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v9 = (unsigned __int8 *)result;
    else
      v9 = (unsigned __int8 *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v10 = 21 - *((char *)result + 21);
    else
      v10 = *result;
    v13 = &v9[v10];
    if (v10)
      v14 = *v9 == 45;
    else
      v14 = 0;
    v15 = v14;
    if (v10 == (unint64_t)v14)
      goto LABEL_36;
    v16 = v10 - (unint64_t)v14;
    v17 = &v9[v14];
    while (*v17 == 48)
    {
      ++v17;
      if (!--v16)
        goto LABEL_36;
    }
    if (!v16)
    {
LABEL_36:
      v17 = &v9[v10];
    }
    else if (*v17 - 48 < 0xA)
    {
      v17 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v17, v13, buf, &v20);
      if (v17 != v13 && *v17 - 48 <= 9 || *(_WORD *)&buf[2] || 0xFFFF - *(_DWORD *)buf < v20)
        goto LABEL_41;
      v18 = v20 + *(_DWORD *)buf;
      if (!v15)
      {
        if ((v18 & 0x8000) != 0)
          goto LABEL_41;
        LOWORD(v11) = v20 + *(_WORD *)buf;
        goto LABEL_40;
      }
      if ((unsigned __int16)(v20 + *(_WORD *)buf) > 0x8000u)
        goto LABEL_41;
LABEL_39:
      v11 = -v18;
LABEL_40:
      if (v13 != v17)
        goto LABEL_41;
      v19 = *re::foundationSerializationLogObjects((re *)v17);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v22 = v9;
        _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
      }
      goto LABEL_14;
    }
    if (v17 == &v9[v14])
    {
LABEL_41:
      return 0;
    }
    v18 = 0;
    LOWORD(v11) = 0;
    if (!v14)
      goto LABEL_40;
    goto LABEL_39;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI32(uint64_t a1, char *a2, unsigned int *a3, char a4)
{
  unsigned int *result;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BOOL4 v14;
  BOOL v15;
  unint64_t v16;
  unsigned __int8 *v17;
  NSObject *v18;
  int v19;
  uint8_t buf[4];
  unsigned __int8 *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x20) != 0)
    {
      v11 = *result;
LABEL_14:
      if ((a4 & 1) == 0)
        *a3 = v11;
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(_BYTE *)(a1 + 232))
      goto LABEL_39;
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v9 = (unsigned __int8 *)result;
    else
      v9 = (unsigned __int8 *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v10 = 21 - *((char *)result + 21);
    else
      v10 = *result;
    v13 = &v9[v10];
    if (v10)
      v14 = *v9 == 45;
    else
      v14 = 0;
    v15 = v14;
    if (v10 == (unint64_t)v14)
      goto LABEL_34;
    v16 = v10 - (unint64_t)v14;
    v17 = &v9[v14];
    while (*v17 == 48)
    {
      ++v17;
      if (!--v16)
        goto LABEL_34;
    }
    if (!v16)
    {
LABEL_34:
      v17 = &v9[v10];
    }
    else if (*v17 - 48 < 0xA)
    {
      v17 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v17, v13, buf, &v19);
      if (v17 != v13 && *v17 - 48 <= 9 || __CFADD__(*(_DWORD *)buf, v19))
        goto LABEL_39;
      v11 = *(_DWORD *)buf + v19;
      if (!v15)
      {
        if ((v11 & 0x80000000) != 0)
          goto LABEL_39;
        goto LABEL_38;
      }
      if (v11 > 0x80000000)
        goto LABEL_39;
LABEL_37:
      v11 = -v11;
LABEL_38:
      if (v13 != v17)
        goto LABEL_39;
      v18 = *re::foundationSerializationLogObjects((re *)v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v21 = v9;
        _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
      }
      goto LABEL_14;
    }
    if (v17 == &v9[v14])
    {
LABEL_39:
      return 0;
    }
    v11 = 0;
    if (!v14)
      goto LABEL_38;
    goto LABEL_37;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeI64(uint64_t a1, char *a2, unint64_t *a3, char a4)
{
  unsigned int *result;
  unsigned __int8 *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BOOL4 v14;
  BOOL v15;
  unint64_t v16;
  unsigned __int8 *v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t buf[24];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x80) != 0)
    {
      v11 = *(_QWORD *)result;
LABEL_14:
      if ((a4 & 1) == 0)
        *a3 = v11;
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(_BYTE *)(a1 + 232))
      goto LABEL_39;
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v9 = (unsigned __int8 *)result;
    else
      v9 = (unsigned __int8 *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v10 = 21 - *((char *)result + 21);
    else
      v10 = *result;
    v13 = &v9[v10];
    if (v10)
      v14 = *v9 == 45;
    else
      v14 = 0;
    v15 = v14;
    if (v10 == (unint64_t)v14)
      goto LABEL_34;
    v16 = v10 - (unint64_t)v14;
    v17 = &v9[v14];
    while (*v17 == 48)
    {
      ++v17;
      if (!--v16)
        goto LABEL_34;
    }
    if (!v16)
    {
LABEL_34:
      v17 = &v9[v10];
    }
    else if (*v17 - 48 < 0xA)
    {
      v17 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v17, v13, buf, &v19);
      if (v17 != v13 && *v17 - 48 <= 9 || __CFADD__(*(_QWORD *)buf, v19))
        goto LABEL_39;
      v11 = *(_QWORD *)buf + v19;
      if (!v15)
      {
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_39;
        goto LABEL_38;
      }
      if (v11 > 0x8000000000000000)
        goto LABEL_39;
LABEL_37:
      v11 = -(uint64_t)v11;
LABEL_38:
      if (v13 != v17)
        goto LABEL_39;
      v18 = *re::foundationSerializationLogObjects((re *)v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
      }
      goto LABEL_14;
    }
    if (v17 == &v9[v14])
    {
LABEL_39:
      return 0;
    }
    v11 = 0;
    if (!v14)
      goto LABEL_38;
    goto LABEL_37;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU8(uint64_t a1, char *a2, _BYTE *a3, char a4)
{
  unsigned int *result;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  NSObject *v15;
  unsigned int v16;
  uint8_t buf[4];
  unsigned __int8 *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x40) != 0)
    {
      v11 = *result;
      if (*result > 0xFF)
      {
        return 0;
      }
LABEL_14:
      if ((a4 & 1) == 0)
        *a3 = v11;
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(_BYTE *)(a1 + 232))
      goto LABEL_34;
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v9 = (unsigned __int8 *)result;
    else
      v9 = (unsigned __int8 *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      LODWORD(v10) = 21 - *((char *)result + 21);
    else
      LODWORD(v10) = *result;
    v13 = &v9[v10];
    if ((_DWORD)v10)
    {
      v10 = v10;
      v14 = v9;
      while (*v14 == 48)
      {
        ++v14;
        if (!--v10)
          goto LABEL_30;
      }
      if (*v14 - 48 < 0xA)
      {
        v14 = std::__itoa::__traits<unsigned char>::__read[abi:nn180100](v14, v13, buf, &v16);
        if (v14 != v13 && *v14 - 48 <= 9 || *(_DWORD *)buf > 0xFFu || 255 - *(_DWORD *)buf < v16)
          goto LABEL_34;
        LOBYTE(v11) = v16 + buf[0];
LABEL_33:
        if (v13 != v14)
          goto LABEL_34;
        v15 = *re::foundationSerializationLogObjects((re *)v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v18 = v9;
          _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
        }
        goto LABEL_14;
      }
    }
    else
    {
LABEL_30:
      v14 = v13;
    }
    if (v14 == v9)
    {
LABEL_34:
      return 0;
    }
    LOBYTE(v11) = 0;
    goto LABEL_33;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU16(uint64_t a1, char *a2, _WORD *a3, char a4)
{
  unsigned int *result;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  NSObject *v15;
  unsigned int v16;
  uint8_t buf[4];
  unsigned __int8 *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x40) != 0)
    {
      v11 = *result;
      if (HIWORD(*result))
      {
        return 0;
      }
LABEL_14:
      if ((a4 & 1) == 0)
        *a3 = v11;
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(_BYTE *)(a1 + 232))
      goto LABEL_34;
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v9 = (unsigned __int8 *)result;
    else
      v9 = (unsigned __int8 *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      LODWORD(v10) = 21 - *((char *)result + 21);
    else
      LODWORD(v10) = *result;
    v13 = &v9[v10];
    if ((_DWORD)v10)
    {
      v10 = v10;
      v14 = v9;
      while (*v14 == 48)
      {
        ++v14;
        if (!--v10)
          goto LABEL_30;
      }
      if (*v14 - 48 < 0xA)
      {
        v14 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v14, v13, buf, &v16);
        if (v14 != v13 && *v14 - 48 <= 9 || *(_WORD *)&buf[2] || 0xFFFF - *(_DWORD *)buf < v16)
          goto LABEL_34;
        LOWORD(v11) = v16 + *(_WORD *)buf;
LABEL_33:
        if (v13 != v14)
          goto LABEL_34;
        v15 = *re::foundationSerializationLogObjects((re *)v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v18 = v9;
          _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
        }
        goto LABEL_14;
      }
    }
    else
    {
LABEL_30:
      v14 = v13;
    }
    if (v14 == v9)
    {
LABEL_34:
      return 0;
    }
    LOWORD(v11) = 0;
    goto LABEL_33;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU32(uint64_t a1, char *a2, _DWORD *a3, char a4)
{
  unsigned int *result;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  NSObject *v15;
  int v16;
  uint8_t buf[4];
  unsigned __int8 *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x40) != 0)
    {
      v11 = *result;
LABEL_14:
      if ((a4 & 1) == 0)
        *a3 = v11;
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(_BYTE *)(a1 + 232))
      goto LABEL_32;
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v9 = (unsigned __int8 *)result;
    else
      v9 = (unsigned __int8 *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      LODWORD(v10) = 21 - *((char *)result + 21);
    else
      LODWORD(v10) = *result;
    v13 = &v9[v10];
    if ((_DWORD)v10)
    {
      v10 = v10;
      v14 = v9;
      while (*v14 == 48)
      {
        ++v14;
        if (!--v10)
          goto LABEL_28;
      }
      if (*v14 - 48 < 0xA)
      {
        v14 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v14, v13, buf, &v16);
        if (v14 != v13 && *v14 - 48 <= 9 || __CFADD__(*(_DWORD *)buf, v16))
          goto LABEL_32;
        v11 = *(_DWORD *)buf + v16;
LABEL_31:
        if (v13 != v14)
          goto LABEL_32;
        v15 = *re::foundationSerializationLogObjects((re *)v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v18 = v9;
          _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
        }
        goto LABEL_14;
      }
    }
    else
    {
LABEL_28:
      v14 = v13;
    }
    if (v14 == v9)
    {
LABEL_32:
      return 0;
    }
    v11 = 0;
    goto LABEL_31;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeU64(uint64_t a1, char *a2, _QWORD *a3, char a4)
{
  unsigned int *result;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t buf[24];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if ((*((_WORD *)result + 11) & 0x100) != 0)
    {
      v11 = *(_QWORD *)result;
LABEL_14:
      if ((a4 & 1) == 0)
        *a3 = v11;
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
      return (unsigned int *)1;
    }
    if ((*((_WORD *)result + 11) & 0x400) == 0 || !*(_BYTE *)(a1 + 232))
      goto LABEL_32;
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v9 = (unsigned __int8 *)result;
    else
      v9 = (unsigned __int8 *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      LODWORD(v10) = 21 - *((char *)result + 21);
    else
      LODWORD(v10) = *result;
    v13 = &v9[v10];
    if ((_DWORD)v10)
    {
      v10 = v10;
      v14 = v9;
      while (*v14 == 48)
      {
        ++v14;
        if (!--v10)
          goto LABEL_28;
      }
      if (*v14 - 48 < 0xA)
      {
        v14 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v14, v13, buf, &v16);
        if (v14 != v13 && *v14 - 48 <= 9 || __CFADD__(*(_QWORD *)buf, v16))
          goto LABEL_32;
        v11 = *(_QWORD *)buf + v16;
LABEL_31:
        if (v13 != v14)
          goto LABEL_32;
        v15 = *re::foundationSerializationLogObjects((re *)v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v9;
          _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", buf, 0xCu);
        }
        goto LABEL_14;
      }
    }
    else
    {
LABEL_28:
      v14 = v13;
    }
    if (v14 == v9)
    {
LABEL_32:
      return 0;
    }
    v11 = 0;
    goto LABEL_31;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeFloat(uint64_t a1, char *a2, float *a3, char a4)
{
  unsigned int *result;
  double v9;
  __int16 v10;
  float Double;
  const char *v12;
  unsigned int v13;
  int v14;
  re *v15;
  float v16;
  BOOL v17;
  NSObject *v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    v10 = *((_WORD *)result + 11);
    if ((v10 & 0x400) == 0)
    {
      if ((v10 & 0x10) != 0)
      {
        Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v9);
LABEL_35:
        if ((a4 & 1) == 0)
          *a3 = Double;
        v19 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
        ++*(_QWORD *)(v19 - 16);
        return (unsigned int *)1;
      }
LABEL_32:
      return 0;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v12 = (const char *)result;
    else
      v12 = (const char *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v13 = 21 - *((char *)result + 21);
    else
      v13 = *result;
    if (v13 == 9)
    {
      if (!strcasecmp(v12, "-Infinity"))
      {
        *(float *)&v14 = -INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 8)
    {
      if (!strcasecmp(v12, "Infinity"))
      {
        *(float *)&v14 = INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 3 && !strcasecmp(v12, "NaN"))
    {
      *(float *)&v14 = NAN;
LABEL_34:
      Double = *(float *)&v14;
      goto LABEL_35;
    }
    if (*(_BYTE *)(a1 + 232))
    {
      *(_QWORD *)v20 = 0;
      v16 = strtof(v12, (char **)v20);
      v17 = *(const char **)v20 != &v12[v13] || v16 == INFINITY;
      Double = v17 ? INFINITY : v16;
      if (Double != INFINITY)
      {
        v18 = *re::foundationSerializationLogObjects(v15);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v20 = 136315138;
          *(_QWORD *)&v20[4] = v12;
          _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", v20, 0xCu);
        }
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeDouble(uint64_t a1, char *a2, double *a3, char a4)
{
  unsigned int *result;
  double v9;
  __int16 v10;
  double Double;
  const char *v12;
  unsigned int v13;
  unint64_t v14;
  re *v15;
  float v16;
  BOOL v17;
  NSObject *v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    v10 = *((_WORD *)result + 11);
    if ((v10 & 0x400) == 0)
    {
      if ((v10 & 0x10) != 0)
      {
        Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v9);
LABEL_35:
        if ((a4 & 1) == 0)
          *a3 = Double;
        v19 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
        ++*(_QWORD *)(v19 - 16);
        return (unsigned int *)1;
      }
LABEL_32:
      return 0;
    }
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v12 = (const char *)result;
    else
      v12 = (const char *)*((_QWORD *)result + 1);
    if ((*((_WORD *)result + 11) & 0x1000) != 0)
      v13 = 21 - *((char *)result + 21);
    else
      v13 = *result;
    if (v13 == 9)
    {
      if (!strcasecmp(v12, "-Infinity"))
      {
        *(double *)&v14 = -INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 8)
    {
      if (!strcasecmp(v12, "Infinity"))
      {
        *(double *)&v14 = INFINITY;
        goto LABEL_34;
      }
    }
    else if (v13 == 3 && !strcasecmp(v12, "NaN"))
    {
      *(double *)&v14 = NAN;
LABEL_34:
      Double = *(double *)&v14;
      goto LABEL_35;
    }
    if (*(_BYTE *)(a1 + 232))
    {
      *(_QWORD *)v20 = 0;
      v16 = strtod(v12, (char **)v20);
      v17 = *(const char **)v20 != &v12[v13] || v16 == INFINITY;
      Double = v17 ? INFINITY : v16;
      if (Double != INFINITY)
      {
        v18 = *re::foundationSerializationLogObjects(v15);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v20 = 136315138;
          *(_QWORD *)&v20[4] = v12;
          _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "Reading JSON string \"%s\" as number in Number/String Compatibility Mode", v20, 0xCu);
        }
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::readJSONValue(uint64_t a1, char *__s)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  const char *v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  const char *v11;
  uint64_t v12;
  size_t v13;
  unsigned int *i;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  __darwin_ct_rune_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned int *result;
  const char *v32;
  uint64_t v33;
  char v34;
  _BYTE v35[23];
  uint64_t v36;
  char v37;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 112) - 1;
  v5 = *(unsigned __int8 *)(v3 + 48 * v4);
  if (!*(_BYTE *)(v3 + 48 * v4))
    return *(unsigned int **)(a1 + 176);
  v6 = *(unsigned int **)(v3 + 48 * v4 + 40);
  if (!v6)
    return v6;
  v7 = __s;
  if (v5 == 7)
    goto LABEL_6;
  if (v5 == 5)
  {
    v20 = *(_QWORD *)(v3 + 48 * v4 + 32);
    if (*v6 <= v20)
      return 0;
    v21 = *((_QWORD *)v6 + 1);
    if (!v21)
      return 0;
    v6 = (unsigned int *)(v21 + 24 * v20);
LABEL_26:
    if (*((_WORD *)v6 + 11) != 4)
      return v6;
    v22 = *v6;
    if (v22 < 2)
      return v6;
    v23 = *((_QWORD *)v6 + 1);
    if ((*(_WORD *)(v23 + 22) & 0x400) == 0)
      return v6;
    v24 = (*(_WORD *)(v23 + 22) & 0x1000) != 0 ? (const char *)*((_QWORD *)v6 + 1) : *(const char **)(v23 + 8);
    if (strcmp(v24, "@cond"))
      return v6;
    v26 = v22 - 1;
    v27 = (v22 - 1) - 1;
    v28 = (_WORD *)(v23 + 46);
    while (*v28 == 4)
    {
      if (*(_DWORD *)(v28 - 11) < 2u)
        break;
      v29 = *(_QWORD *)(v28 - 7);
      if ((*(_WORD *)(v29 + 22) & 0x20) == 0)
        break;
      if (!v27 || *(_DWORD *)(a1 + 136) <= *(_DWORD *)v29)
        return (unsigned int *)(v29 + 24);
      --v27;
      v28 += 12;
      if (!--v26)
      {
        re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "evaluateConditional", 1447);
        _os_crash();
        __break(1u);
        break;
      }
    }
    if ((v34 & 1) != 0)
      v30 = *(_BYTE **)&v35[7];
    else
      v30 = v35;
    re::DynamicString::format((re::DynamicString *)"Failed to read version conditional \"%s\". Invalid condition.", (re::DynamicString *)&v36, v30);
    if (v36 && (v37 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v36 + 40))();
    if (v33)
    {
      if ((v34 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v33 + 40))();
    }
    return 0;
  }
  if (v5 != 2)
    goto LABEL_26;
LABEL_6:
  v8 = strlen(__s);
  v9 = *v6;
  if (!(_DWORD)v9)
    return 0;
  v10 = v8;
  v32 = v7;
  v11 = v7 + 1;
  v12 = *((_QWORD *)v6 + 1);
  v13 = v8 - 1;
  for (i = (unsigned int *)(v12 + 24); ; i += 12)
  {
    if ((*((_WORD *)i - 1) & 0x1000) != 0)
      v15 = i - 6;
    else
      v15 = (unsigned int *)*((_QWORD *)i - 2);
    if ((*((_WORD *)i - 1) & 0x1000) != 0)
      v16 = 21 - *((char *)i - 3);
    else
      v16 = *(i - 6);
    if (v10 != v16 || strncmp(v11, (const char *)v15 + 1, v13))
      goto LABEL_19;
    if (!v10)
      break;
    v18 = __toupper(*v32);
    if (v18 == __toupper(*(char *)v15))
    {
      v6 = i;
      v7 = v32;
      goto LABEL_26;
    }
    v12 = *((_QWORD *)v6 + 1);
    v9 = *v6;
LABEL_19:
    v19 = i + 6;
    if (v19 == (unsigned int *)(v12 + 48 * v9))
      return 0;
  }
  re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
  result = (unsigned int *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::setErrorWrongType(uint64_t a1, const char *a2, uint64_t a3)
{
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  _BYTE v9[23];
  uint64_t v10;
  char v11;

  if ((v8 & 1) != 0)
    v5 = *(_BYTE **)&v9[7];
  else
    v5 = v9;
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Expected type: \"%s\"", (re::DynamicString *)&v10, v5, a3);
  if (v10 && (v11 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v10 + 40))();
  result = v7;
  if (v7)
  {
    if ((v8 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v7 + 40))();
  }
  return result;
}

uint64_t re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::setErrorValueOutOfTypeRange(uint64_t a1, const char *a2, uint64_t a3)
{
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  _BYTE v9[23];
  uint64_t v10;
  char v11;

  if ((v8 & 1) != 0)
    v5 = *(_BYTE **)&v9[7];
  else
    v5 = v9;
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Value out of \"%s\" type range.", (re::DynamicString *)&v10, v5, a3);
  if (v10 && (v11 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v10 + 40))();
  result = v7;
  if (v7)
  {
    if ((v8 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v7 + 40))();
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(_BYTE *a1, char *a2, uint64_t *a3)
{
  unsigned int *result;
  double v7;
  unsigned int *v8;
  __int16 v9;
  double Double;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  char __str[64];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a1[40])
    return 0;
  if (result)
  {
    v8 = result;
    v9 = *((_WORD *)result + 11);
    if ((v9 & 0x400) != 0)
    {
      if ((*((_WORD *)result + 11) & 0x1000) != 0)
        LODWORD(v12) = 21 - *((char *)result + 21);
      else
        LODWORD(v12) = *result;
      v12 = v12;
    }
    else if ((v9 & 0x10) != 0
           && a1[232]
           && (Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(result, v7), (v11 = snprintf(__str, 0x40uLL, "%g", Double)) != 0))
    {
      v12 = v11;
    }
    else
    {
      if (!a1[233] || (v13 = *((unsigned __int16 *)v8 + 11), (v13 & 8) == 0))
      {
        return 0;
      }
      v14 = v13 == 10;
      v12 = 4;
      if (!v14)
        v12 = 5;
    }
    *a3 = v12;
    LOBYTE(v15) = 8;
    DWORD1(v15) = 0;
    *((_QWORD *)&v15 + 1) = a2;
    v16 = 0;
    v17 = v12;
    v18 = 0;
    v19 = v8;
    return (unsigned int *)1;
  }
  return result;
}

void re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(uint64_t a1, char *a2, char a3)
{
  uint64_t v6;
  size_t v7;
  char *v8;
  unsigned int *JSONValue;
  double v10;
  unsigned int *v11;
  int v12;
  double Double;
  int v14;
  size_t v15;
  re *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  _BYTE *v20;
  const char *v21;
  const char *v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  _BYTE __str[12];
  _BYTE v27[12];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 40))
  {
    v6 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
    v7 = *(unsigned int *)(v6 - 24);
    v8 = *(char **)(v6 - 40);
    if (JSONValue)
    {
      v11 = JSONValue;
      v12 = *((unsigned __int16 *)JSONValue + 11);
      if ((v12 & 0x400) != 0)
      {
        if ((a3 & 1) == 0)
        {
          if ((v12 & 0x1000) != 0)
            v21 = (const char *)JSONValue;
          else
            v21 = (const char *)*((_QWORD *)JSONValue + 1);
          strncpy(a2, v21, v7);
        }
        goto LABEL_41;
      }
      if (*(_BYTE *)(a1 + 232))
      {
        if ((a3 & 1) == 0 && (v12 & 0x10) != 0)
        {
          Double = rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::GetDouble(JSONValue, v10);
          v14 = snprintf(__str, 0x40uLL, "%g", Double);
          if (v14 >= v7)
            v15 = v7;
          else
            v15 = v14;
          v16 = (re *)memcpy(a2, __str, v15);
          v17 = *re::foundationSerializationLogObjects(v16);
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            goto LABEL_41;
          *(_DWORD *)v27 = 136315138;
          *(_QWORD *)&v27[4] = __str;
          v18 = "Reading JSON number as string \"%s\" in Number/String Compatibility Mode";
          v19 = v27;
          goto LABEL_38;
        }
        if ((v12 & 0x10) != 0)
        {
LABEL_41:
          v25 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
          *(_QWORD *)(v25 - 16) += v7;
          return;
        }
      }
      if (*(_BYTE *)(a1 + 233))
      {
        if ((a3 & 1) == 0 && (v12 & 8) != 0)
        {
          if (v12 == 10)
            v22 = "true";
          else
            v22 = "false";
          v23 = strncpy(a2, v22, v7);
          v17 = *re::foundationSerializationLogObjects((re *)v23);
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            goto LABEL_41;
          if (*((_WORD *)v11 + 11) == 10)
            v24 = "true";
          else
            v24 = "false";
          *(_DWORD *)__str = 136315138;
          *(_QWORD *)&__str[4] = v24;
          v18 = "Reading JSON BOOL as string \"%s\" in Bool/String Compatibility Mode";
          v19 = __str;
LABEL_38:
          _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, v18, v19, 0xCu);
          goto LABEL_41;
        }
        if ((v12 & 8) != 0)
          goto LABEL_41;
      }
      return;
    }
    if ((v27[8] & 1) != 0)
      v20 = v28;
    else
      v20 = &v27[9];
    re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Key not found.", (re::DynamicString *)__str, v20);
    if (*(_QWORD *)__str && (__str[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)__str + 40))();
    if (*(_QWORD *)v27 && (v27[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v27 + 40))();
  }
}

_anonymous_namespace_ *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString(_anonymous_namespace_ *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  char v8;
  _BYTE v9[23];
  uint64_t v10;
  char v11;

  if (!*((_BYTE *)result + 40))
  {
    v1 = (uint64_t)result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14);
    if (*(_QWORD *)(v2 + 48 * v3 - 16) == *(_QWORD *)(v2 + 48 * v3 - 24))
    {
      v4 = *(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112);
      ++*(_QWORD *)(v4 - 16);
    }
    else
    {
      if ((v8 & 1) != 0)
        v5 = *(_BYTE **)&v9[7];
      else
        v5 = v9;
      v6 = *(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112);
      re::DynamicString::format((re::DynamicString *)"Failed to serialize string \"%s\". Expected number of characters: %lld. Actual number of characters: %lld.", (re::DynamicString *)&v10, v5, *(_QWORD *)(v6 - 24), *(_QWORD *)(v6 - 16));
      if (v10 && (v11 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v10 + 40))();
      result = v7;
      if (v7)
      {
        if ((v8 & 1) != 0)
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 40))();
      }
    }
  }
  return result;
}

double re::Encoder<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,`anonymous namespace'::LegacyInputStreamAdaptor>::pushState(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  double result;
  _OWORD v6[3];
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 112) >= *(_QWORD *)(a1 + 152))
  {
    re::DynamicString::format((re::DynamicString *)"State stack overflow (max depth is %zu). Increase user default com.apple.maxSerializationDepth to allow deeper hierarchies.", (re::DynamicString *)&v7, *(_QWORD *)(a1 + 152));
    if (v7)
    {
      if ((v8 & 1) != 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v9);
    }
  }
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v6[2] = a2[2];
  return result;
}

__n128 re::Encoder<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,`anonymous namespace'::LegacyInputStreamAdaptor>::StateStack::push(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)a1)
    {
      v11 = 2 * v4;
      v12 = v4 == 0;
      v13 = 8;
      if (!v12)
        v13 = v11;
      if (v13 <= v6)
        v14 = v6;
      else
        v14 = v13;
      re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((_QWORD *)a1, v14);
    }
    else
    {
      re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((_QWORD *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  v8 = *(_QWORD *)(a1 + 32) + 48 * *(_QWORD *)(a1 + 16);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)v8 = result;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

double re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(uint64_t a1, char *a2, _BYTE *a3)
{
  unsigned int *JSONValue;
  _BOOL4 v7;
  double result;
  __int128 v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  unsigned int *v13;

  if (!*(_BYTE *)(a1 + 40))
  {
    if (JSONValue)
      v7 = *((_WORD *)JSONValue + 11) != 0;
    else
      v7 = 0;
    *a3 = v7;
    LOBYTE(v9) = 3;
    DWORD1(v9) = 0;
    *((_QWORD *)&v9 + 1) = a2;
    v10 = 0;
    v11 = v7;
    v12 = 0;
    v13 = JSONValue;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endOptional(_anonymous_namespace_ *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  const char *v6;
  _anonymous_namespace_ *v7;
  char v8;
  _BYTE v9[23];
  uint64_t v10;
  char v11;

  if (!*((_BYTE *)result + 40))
  {
    v1 = (uint64_t)result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14);
    if (*(_QWORD *)(v2 + 48 * v3 - 16) == *(_QWORD *)(v2 + 48 * v3 - 24))
    {
      v4 = *(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112);
      ++*(_QWORD *)(v4 - 16);
    }
    else
    {
      if ((v8 & 1) != 0)
        v5 = *(_BYTE **)&v9[7];
      else
        v5 = v9;
      if (*(uint64_t *)(*(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112) - 24) <= 0)
        v6 = "Optional should not have a value.";
      else
        v6 = "Optional requires a value.";
      re::DynamicString::format((re::DynamicString *)"Failed to serialize optional type \"%s\". %s", (re::DynamicString *)&v10, v5, v6);
      if (v10 && (v11 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v10 + 40))();
      result = v7;
      if (v7)
      {
        if ((v8 & 1) != 0)
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 40))();
      }
    }
  }
  return result;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(uint64_t a1, char *a2, _QWORD *a3, int a4)
{
  unsigned int *result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if (*((_WORD *)result + 11) == 4)
    {
      v9 = *result;
      *a3 = v9;
      LOBYTE(v10) = 5;
      DWORD1(v10) = a4;
      *((_QWORD *)&v10 + 1) = a2;
      v11 = 0;
      v12 = v9;
      v13 = 0;
      v14 = result;
      return (unsigned int *)1;
    }
    return 0;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(_anonymous_namespace_ *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  char v8;
  _BYTE v9[23];
  uint64_t v10;
  char v11;

  if (!*((_BYTE *)result + 40))
  {
    v1 = (uint64_t)result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14);
    if (*(_QWORD *)(v2 + 48 * v3 - 16) == *(_QWORD *)(v2 + 48 * v3 - 24))
    {
      v4 = *(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112);
      ++*(_QWORD *)(v4 - 16);
    }
    else
    {
      if ((v8 & 1) != 0)
        v5 = *(_BYTE **)&v9[7];
      else
        v5 = v9;
      v6 = *(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize array \"%s\". Expected number of elements: %lld. Actual number of elements: %lld.", (re::DynamicString *)&v10, v5, *(_QWORD *)(v6 - 24), *(_QWORD *)(v6 - 16));
      if (v10 && (v11 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v10 + 40))();
      result = v7;
      if (v7)
      {
        if ((v8 & 1) != 0)
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 40))();
      }
    }
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  void (*v20)(uint64_t, uint64_t *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL8 result;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;
  _BYTE v47[32];
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[40];

  if (this == a6)
    goto LABEL_13;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      v16 = WORD1(v13) == WORD1(v14);
      v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      v16 = v16 && v15 == 0;
      if (v16)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v50),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v17 = *(_QWORD *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v51);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)this);
  v18 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v48);
  if (!v18)
  {
    v43 = re::TypeInfo::name((re::TypeInfo *)v48)[1];
    return 0;
  }
  v19 = (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v18;
  v20 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v46 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v45);
  v20(a4, &v50, v17);
  result = 0;
  if (v26)
  {
    v28 = *(unsigned int **)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      v29 = *((_QWORD *)v28 + 1);
      while (1)
      {
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0)
          v30 = v29;
        else
          v30 = *(_QWORD *)(v29 + 8);
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0)
          v31 = 21 - *(char *)(v29 + 21);
        else
          v31 = *(_DWORD *)v29;
        v44 = 0;
        if (!v31)
          goto LABEL_42;
        v32 = 0;
        v33 = (unsigned __int8 *)(v30 + v31);
        while (*(_BYTE *)(v30 + v32) == 48)
        {
          if (v31 == ++v32)
            goto LABEL_42;
        }
        if (v31 == v32)
          goto LABEL_42;
        v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 > 9)
          goto LABEL_41;
        v34 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v34, v33, &v50, &v49);
        if (v34 == v33)
          break;
        if (*v34 - 48 > 9)
        {
          v36 = v49;
          v35 = v50;
          if (!__CFADD__(v50, v49))
            goto LABEL_40;
        }
        while (*v34 - 48 <= 9)
        {
          if (++v34 == v33)
          {
            v34 = v33;
            break;
          }
        }
LABEL_41:
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        v37 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, uint64_t *))(v46 + 104))(a4, v45, *(_QWORD *)(a1 + 48), &v44);
        v19(a1, v30, 0, v37, v48, v47, 0);
        v29 += 48;
        if (v29 == *((_QWORD *)v28 + 1) + 48 * *v28)
          goto LABEL_43;
      }
      v36 = v49;
      v35 = v50;
      if (__CFADD__(v50, v49))
        goto LABEL_42;
LABEL_40:
      v44 = v35 + v36;
      goto LABEL_41;
    }
LABEL_43:
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  void (*v20)(uint64_t, int *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL8 result;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _BYTE v45[16];
  uint64_t v46;
  _BYTE v47[32];
  _BYTE v48[36];
  int v49;
  int v50;
  _BYTE v51[40];

  if (this == a6)
    goto LABEL_13;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      v16 = WORD1(v13) == WORD1(v14);
      v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      v16 = v16 && v15 == 0;
      if (v16)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v50),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v17 = *(_QWORD *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v51);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)this);
  v18 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v48);
  if (!v18)
  {
    v43 = re::TypeInfo::name((re::TypeInfo *)v48)[1];
    return 0;
  }
  v19 = (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v18;
  v20 = *(void (**)(uint64_t, int *, uint64_t))(v46 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v45);
  v20(a4, &v50, v17);
  result = 0;
  if (v26)
  {
    v28 = *(unsigned int **)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      v29 = *((_QWORD *)v28 + 1);
      while (1)
      {
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0)
          v30 = v29;
        else
          v30 = *(_QWORD *)(v29 + 8);
        if ((*(_WORD *)(v29 + 22) & 0x1000) != 0)
          v31 = 21 - *(char *)(v29 + 21);
        else
          v31 = *(_DWORD *)v29;
        v44 = 0;
        if (!v31)
          goto LABEL_42;
        v32 = 0;
        v33 = (unsigned __int8 *)(v30 + v31);
        while (*(_BYTE *)(v30 + v32) == 48)
        {
          if (v31 == ++v32)
            goto LABEL_42;
        }
        if (v31 == v32)
          goto LABEL_42;
        v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 > 9)
          goto LABEL_41;
        v34 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v34, v33, &v50, &v49);
        if (v34 == v33)
          break;
        if (*v34 - 48 > 9)
        {
          v36 = v49;
          v35 = v50;
          if (!__CFADD__(v50, v49))
            goto LABEL_40;
        }
        while (*v34 - 48 <= 9)
        {
          if (++v34 == v33)
          {
            v34 = v33;
            break;
          }
        }
LABEL_41:
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        v37 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, int *))(v46 + 104))(a4, v45, *(_QWORD *)(a1 + 48), &v44);
        v19(a1, v30, 0, v37, v48, v47, 0);
        v29 += 48;
        if (v29 == *((_QWORD *)v28 + 1) + 48 * *v28)
          goto LABEL_43;
      }
      v36 = v49;
      v35 = v50;
      if (__CFADD__(v50, v49))
        goto LABEL_42;
LABEL_40:
      v44 = v35 + v36;
      goto LABEL_41;
    }
LABEL_43:
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  void (*v20)(uint64_t, unsigned int *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL8 result;
  unsigned int *v28;
  uint64_t i;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _BYTE v43[16];
  uint64_t v44;
  _BYTE v45[32];
  _BYTE v46[36];
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[40];

  if (this == a6)
    goto LABEL_13;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      v16 = WORD1(v13) == WORD1(v14);
      v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      v16 = v16 && v15 == 0;
      if (v16)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49),
        v46[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v46))
  {
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v17 = *(_QWORD *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)v49);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)this);
  v18 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v46);
  if (!v18)
  {
    v41 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
    return 0;
  }
  v19 = (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v18;
  v20 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v44 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v48, (uint64_t)v43);
  v20(a4, &v48, v17);
  result = 0;
  if (v26)
  {
    v28 = *(unsigned int **)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      for (i = *((_QWORD *)v28 + 1); i != *((_QWORD *)v28 + 1) + 48 * *v28; i += 48)
      {
        if ((*(_WORD *)(i + 22) & 0x1000) != 0)
          v30 = i;
        else
          v30 = *(_QWORD *)(i + 8);
        if ((*(_WORD *)(i + 22) & 0x1000) != 0)
          v31 = 21 - *(char *)(i + 21);
        else
          v31 = *(_DWORD *)i;
        v42 = 0;
        if (!v31)
          goto LABEL_42;
        v32 = 0;
        v33 = (unsigned __int8 *)(v30 + v31);
        while (*(_BYTE *)(v30 + v32) == 48)
        {
          if (v31 == ++v32)
            goto LABEL_42;
        }
        if (v31 == v32)
          goto LABEL_42;
        v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 <= 9)
        {
          v34 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v34, v33, &v48, &v47);
          if (v34 == v33 || *v34 - 48 > 9)
          {
            if (HIWORD(v48) || 0xFFFF - v48 < v47)
            {
              if (v34 != v33)
                goto LABEL_37;
              goto LABEL_42;
            }
            v42 = v47 + v48;
          }
          else
          {
LABEL_37:
            while (*v34 - 48 <= 9)
            {
              if (++v34 == v33)
              {
                v34 = v33;
                break;
              }
            }
          }
        }
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        v35 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, __int16 *))(v44 + 104))(a4, v43, *(_QWORD *)(a1 + 48), &v42);
        v19(a1, v30, 0, v35, v46, v45, 0);
      }
    }
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  void (*v20)(uint64_t, unsigned int *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL8 result;
  unsigned int *v28;
  uint64_t i;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _BYTE v43[16];
  uint64_t v44;
  _BYTE v45[32];
  _BYTE v46[36];
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[40];

  if (this == a6)
    goto LABEL_13;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      v16 = WORD1(v13) == WORD1(v14);
      v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      v16 = v16 && v15 == 0;
      if (v16)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v48),
        re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49),
        v46[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v46))
  {
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v17 = *(_QWORD *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)v49);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v48);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)v49);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)this);
  v18 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v46);
  if (!v18)
  {
    v41 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
    return 0;
  }
  v19 = (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v18;
  v20 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v44 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v48, (uint64_t)v43);
  v20(a4, &v48, v17);
  result = 0;
  if (v26)
  {
    v28 = *(unsigned int **)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      for (i = *((_QWORD *)v28 + 1); i != *((_QWORD *)v28 + 1) + 48 * *v28; i += 48)
      {
        if ((*(_WORD *)(i + 22) & 0x1000) != 0)
          v30 = i;
        else
          v30 = *(_QWORD *)(i + 8);
        if ((*(_WORD *)(i + 22) & 0x1000) != 0)
          v31 = 21 - *(char *)(i + 21);
        else
          v31 = *(_DWORD *)i;
        v42 = 0;
        if (!v31)
          goto LABEL_42;
        v32 = 0;
        v33 = (unsigned __int8 *)(v30 + v31);
        while (*(_BYTE *)(v30 + v32) == 48)
        {
          if (v31 == ++v32)
            goto LABEL_42;
        }
        if (v31 == v32)
          goto LABEL_42;
        v34 = (unsigned __int8 *)(v30 + v32);
        if (*(unsigned __int8 *)(v30 + v32) - 48 <= 9)
        {
          v34 = std::__itoa::__traits<unsigned char>::__read[abi:nn180100](v34, v33, &v48, &v47);
          if (v34 == v33 || *v34 - 48 > 9)
          {
            if (v48 > 0xFF || 255 - v48 < v47)
            {
              if (v34 != v33)
                goto LABEL_37;
              goto LABEL_42;
            }
            v42 = v47 + v48;
          }
          else
          {
LABEL_37:
            while (*v34 - 48 <= 9)
            {
              if (++v34 == v33)
              {
                v34 = v33;
                break;
              }
            }
          }
        }
        if (v33 != v34)
        {
          return 0;
        }
LABEL_42:
        v35 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, char *))(v44 + 104))(a4, v43, *(_QWORD *)(a1 + 48), &v42);
        v19(a1, v30, 0, v35, v46, v45, 0);
      }
    }
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, unsigned __int8 *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  void (*v20)(uint64_t, uint64_t *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL8 result;
  unsigned int *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  char v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE v50[16];
  uint64_t v51;
  _BYTE v52[32];
  _BYTE v53[32];
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[40];

  if (this == a6)
    goto LABEL_13;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      v16 = WORD1(v13) == WORD1(v14);
      v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      v16 = v16 && v15 == 0;
      if (v16)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v55),
        re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56),
        v53[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v53))
  {
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v17 = *(_QWORD *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)v50, (uint64_t)this);
  v18 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v53);
  if (!v18)
  {
    v48 = re::TypeInfo::name((re::TypeInfo *)v53)[1];
    return 0;
  }
  v19 = (void (*)(uint64_t, unsigned __int8 *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v18;
  v20 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v51 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v50);
  v20(a4, &v55, v17);
  result = 0;
  if (v26)
  {
    v28 = *(unsigned int **)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      v29 = *((_QWORD *)v28 + 1);
      while (1)
      {
        v30 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)(v29 + 8);
        v31 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? 21 - *(char *)(v29 + 21) : *(_DWORD *)v29;
        v49 = 0;
        v32 = v31 && *v30 == 45;
        v33 = v31;
        v34 = &v30[v31];
        v35 = v32;
        v36 = &v30[v32];
        if (v33 == v32)
          break;
        v37 = v33 - v32;
        v38 = v36;
        while (*v38 == 48)
        {
          ++v38;
          if (!--v37)
            goto LABEL_42;
        }
        if (!v37)
          break;
        if (*v38 - 48 >= 0xA)
          goto LABEL_43;
        v38 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v38, v34, &v55, &v54);
        if (v38 == v34)
        {
          v40 = v54;
          v39 = v55;
          if (__CFADD__(v55, v54))
          {
LABEL_53:
            v38 = v34;
            goto LABEL_48;
          }
        }
        else if (*v38 - 48 <= 9 || (v40 = v54, v39 = v55, __CFADD__(v55, v54)))
        {
          while (*v38 - 48 <= 9)
          {
            if (++v38 == v34)
              goto LABEL_53;
          }
          goto LABEL_48;
        }
        v41 = v39 + v40;
        if ((v35 & 1) != 0)
        {
          if (v41 <= 0x8000000000000000)
            goto LABEL_45;
        }
        else if ((v41 & 0x8000000000000000) == 0)
        {
          goto LABEL_46;
        }
LABEL_48:
        if (v34 != v38)
        {
          return 0;
        }
        v42 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, unint64_t *))(v51 + 104))(a4, v50, *(_QWORD *)(a1 + 48), &v49);
        v19(a1, v30, 0, v42, v53, v52, 0);
        v29 += 48;
        if (v29 == *((_QWORD *)v28 + 1) + 48 * *v28)
          goto LABEL_62;
      }
LABEL_42:
      v38 = v34;
LABEL_43:
      if (v38 != v36)
      {
        v41 = 0;
        if ((v35 & 1) != 0)
LABEL_45:
          v41 = -(uint64_t)v41;
LABEL_46:
        v49 = v41;
        goto LABEL_48;
      }
      v38 = v30;
      goto LABEL_48;
    }
LABEL_62:
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, unsigned __int8 *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  void (*v20)(uint64_t, int *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL8 result;
  unsigned int *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  char v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _BYTE v50[16];
  uint64_t v51;
  _BYTE v52[32];
  _BYTE v53[36];
  int v54;
  int v55;
  _BYTE v56[40];

  if (this == a6)
    goto LABEL_13;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      v16 = WORD1(v13) == WORD1(v14);
      v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      v16 = v16 && v15 == 0;
      if (v16)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v55),
        re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56),
        v53[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v53))
  {
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v17 = *(_QWORD *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)v50, (uint64_t)this);
  v18 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v53);
  if (!v18)
  {
    v48 = re::TypeInfo::name((re::TypeInfo *)v53)[1];
    return 0;
  }
  v19 = (void (*)(uint64_t, unsigned __int8 *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v18;
  v20 = *(void (**)(uint64_t, int *, uint64_t))(v51 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v50);
  v20(a4, &v55, v17);
  result = 0;
  if (v26)
  {
    v28 = *(unsigned int **)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
    if (v28 && *v28)
    {
      v29 = *((_QWORD *)v28 + 1);
      while (1)
      {
        v30 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? (unsigned __int8 *)v29 : *(unsigned __int8 **)(v29 + 8);
        v31 = (*(_WORD *)(v29 + 22) & 0x1000) != 0 ? 21 - *(char *)(v29 + 21) : *(_DWORD *)v29;
        v49 = 0;
        v32 = v31 && *v30 == 45;
        v33 = v31;
        v34 = &v30[v31];
        v35 = v32;
        v36 = &v30[v32];
        if (v33 == v32)
          break;
        v37 = v33 - v32;
        v38 = v36;
        while (*v38 == 48)
        {
          ++v38;
          if (!--v37)
            goto LABEL_42;
        }
        if (!v37)
          break;
        if (*v38 - 48 >= 0xA)
          goto LABEL_43;
        v38 = std::__itoa::__traits<unsigned int>::__read[abi:nn180100](v38, v34, &v55, &v54);
        if (v38 == v34)
        {
          v40 = v54;
          v39 = v55;
          if (__CFADD__(v55, v54))
          {
LABEL_53:
            v38 = v34;
            goto LABEL_48;
          }
        }
        else if (*v38 - 48 <= 9 || (v40 = v54, v39 = v55, __CFADD__(v55, v54)))
        {
          while (*v38 - 48 <= 9)
          {
            if (++v38 == v34)
              goto LABEL_53;
          }
          goto LABEL_48;
        }
        v41 = v39 + v40;
        if ((v35 & 1) != 0)
        {
          if (v41 <= 0x80000000)
            goto LABEL_45;
        }
        else if ((v41 & 0x80000000) == 0)
        {
          goto LABEL_46;
        }
LABEL_48:
        if (v34 != v38)
        {
          return 0;
        }
        v42 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, unsigned int *))(v51 + 104))(a4, v50, *(_QWORD *)(a1 + 48), &v49);
        v19(a1, v30, 0, v42, v53, v52, 0);
        v29 += 48;
        if (v29 == *((_QWORD *)v28 + 1) + 48 * *v28)
          goto LABEL_62;
      }
LABEL_42:
      v38 = v34;
LABEL_43:
      if (v38 != v36)
      {
        v41 = 0;
        if ((v35 & 1) != 0)
LABEL_45:
          v41 = -v41;
LABEL_46:
        v49 = v41;
        goto LABEL_48;
      }
      v38 = v30;
      goto LABEL_48;
    }
LABEL_62:
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _BOOL8 result;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, unsigned __int8 *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  void (*v21)(uint64_t, unsigned int *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  char v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  _BYTE v49[16];
  uint64_t v50;
  _BYTE v51[32];
  _BYTE v52[36];
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[40];

  if (this == a6)
    goto LABEL_13;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      v16 = WORD1(v13) == WORD1(v14);
      v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      v16 = v16 && v15 == 0;
      if (v16)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v54),
        re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v55),
        v52[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v52))
  {
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v18 = *(_QWORD *)(a1 + 48);
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 80), &v54);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v55);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v54);
  re::TypeInfo::TypeInfo((uint64_t)v51, (uint64_t)v55);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)this);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v52);
  if (!v19)
  {
    v47 = re::TypeInfo::name((re::TypeInfo *)v52)[1];
    return 0;
  }
  v20 = (void (*)(uint64_t, unsigned __int8 *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v19;
  v21 = *(void (**)(uint64_t, unsigned int *, uint64_t))(v50 + 96);
  re::TypeInfo::TypeInfo((uint64_t)&v54, (uint64_t)v49);
  v21(a4, &v54, v18);
  result = 0;
  if (v27)
  {
    v28 = *(unsigned int **)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
    if (!v28 || !*v28)
    {
LABEL_62:
      return *(_BYTE *)(a1 + 64) == 0;
    }
    v29 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
    while (1)
    {
      if ((*((_WORD *)v29 + 11) & 0x1000) != 0)
        v30 = v29;
      else
        v30 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
      if ((*((_WORD *)v29 + 11) & 0x1000) != 0)
        v31 = 21 - (char)v29[21];
      else
        v31 = *(_DWORD *)v29;
      v48 = 0;
      if (v31)
        v32 = *v30 == 45;
      else
        v32 = 0;
      v33 = v31;
      v34 = &v30[v31];
      v35 = v32;
      v36 = &v30[v32];
      if (v33 == v32)
        goto LABEL_44;
      v37 = v33 - v32;
      v38 = v36;
      while (*v38 == 48)
      {
        ++v38;
        if (!--v37)
          goto LABEL_44;
      }
      if (!v37)
      {
LABEL_44:
        v38 = v34;
LABEL_45:
        if (v38 == v36)
        {
          v38 = v30;
          goto LABEL_52;
        }
        v39 = 0;
        v40 = 0;
        if ((v35 & 1) != 0)
        {
LABEL_47:
          v48 = -v39;
          goto LABEL_52;
        }
LABEL_51:
        v48 = v40;
        goto LABEL_52;
      }
      if (*v38 - 48 >= 0xA)
        goto LABEL_45;
      v38 = std::__itoa::__traits<unsigned short>::__read[abi:nn180100](v38, v34, &v54, &v53);
      if (v38 != v34 && *v38 - 48 <= 9)
        goto LABEL_56;
      if (HIWORD(v54) || 0xFFFF - v54 < v53)
        break;
      v39 = v53 + v54;
      if ((v35 & 1) == 0)
      {
        if ((((_WORD)v53 + (_WORD)v54) & 0x8000) != 0)
          goto LABEL_52;
        v40 = v53 + v54;
        goto LABEL_51;
      }
      if ((unsigned __int16)(v53 + v54) <= 0x8000u)
        goto LABEL_47;
LABEL_52:
      if (v34 != v38)
      {
        return 0;
      }
      v41 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, __int16 *))(v50 + 104))(a4, v49, *(_QWORD *)(a1 + 48), &v48);
      v20(a1, v30, 0, v41, v52, v51, 0);
      v29 += 48;
      if (v29 == (unsigned __int8 *)(*((_QWORD *)v28 + 1) + 48 * *v28))
        goto LABEL_62;
    }
    while (1)
    {
      if (v38 == v34)
      {
        v38 = v34;
        goto LABEL_52;
      }
LABEL_56:
      if (*v38 - 48 > 9)
        goto LABEL_52;
      ++v38;
    }
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  unsigned int v25;
  _BOOL8 result;
  void (*v27)(uint64_t, const char **, uint64_t);
  re::DynamicString *v28;
  unsigned int *v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  _BYTE v42[32];
  _BYTE v43[32];
  const char *v44;
  _QWORD v45[5];

  if (this == a6)
    goto LABEL_14;
  v13 = *(_QWORD **)this;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)this + 2);
    v14 = (uint64_t *)*((_QWORD *)a6 + 2);
    v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14)
      goto LABEL_10;
    v18 = WORD1(v15) == WORD1(v16);
    v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    v18 = v18 && v17 == 0;
    if (!v18)
      goto LABEL_10;
LABEL_14:
    if (!a7)
    {
      v22 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 80), &v44);
      re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)v45);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v44);
      re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)v45);
      re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)this);
      v23 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v43);
      if (!v23)
      {
        v34 = re::TypeInfo::name((re::TypeInfo *)v43);
        return 0;
      }
      v24 = (void (*)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v23;
      result = 0;
      if (!v25)
        return result;
      v27 = *(void (**)(uint64_t, const char **, uint64_t))(v41 + 96);
      re::TypeInfo::TypeInfo((uint64_t)&v44, (uint64_t)v40);
      v27(a4, &v44, v22);
      v28 = (re::DynamicString *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, 32, 8);
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = 0;
      *((_QWORD *)v28 + 3) = 0;
      *(_QWORD *)v28 = v22;
      re::DynamicString::setCapacity(v28, 0);
      v29 = *(unsigned int **)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
      if (v29 && *v29)
      {
        v30 = *((_QWORD *)v29 + 1);
        do
        {
          if ((*(_WORD *)(v30 + 22) & 0x1000) != 0)
            v31 = (const char *)v30;
          else
            v31 = *(const char **)(v30 + 8);
          v32 = strlen(v31);
          v44 = v31;
          v45[0] = v32;
          re::DynamicString::operator=(v28, (uint64_t)&v44);
          v33 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, re::DynamicString *))(v41 + 104))(a4, v40, *(_QWORD *)(a1 + 48), v28);
          v24(a1, v31, 0, v33, v43, v42, 0);
          v30 += 48;
        }
        while (v30 != *((_QWORD *)v29 + 1) + 48 * *v29);
      }
      if (*(_QWORD *)v28)
      {
        if ((*((_BYTE *)v28 + 8) & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v28 + 40))(*(_QWORD *)v28, *((_QWORD *)v28 + 2));
        *(_OWORD *)v28 = 0u;
        *((_OWORD *)v28 + 1) = 0u;
      }
      (*(void (**)(uint64_t, re::DynamicString *))(*(_QWORD *)v21 + 40))(v21, v28);
    }
    return *(_BYTE *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3))
    goto LABEL_14;
  v13 = *(_QWORD **)a6;
  v14 = (uint64_t *)*((_QWORD *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v44);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)v45);
  v19 = re::TypeInfo::name((re::TypeInfo *)v43);
  if ((unint64_t)*v19 >> 1 == 0x22C6ED80D0CLL)
  {
    v20 = (char *)v19[1];
    if (v20 == "StringID" || !strcmp(v20, "StringID"))
      goto LABEL_14;
  }
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  unsigned int v24;
  _BOOL8 result;
  uint64_t (*v26)(uint64_t, unint64_t *, uint64_t);
  _anonymous_namespace_ *v27;
  unsigned int *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  char v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  _BYTE v46[16];
  uint64_t v47;
  _BYTE v48[32];
  _BYTE v49[32];
  unint64_t v50;
  _QWORD v51[5];

  if (this == a6)
    goto LABEL_14;
  v13 = *(_QWORD **)this;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)this + 2);
    v14 = (uint64_t *)*((_QWORD *)a6 + 2);
    v16 = *v14;
    if ((unsigned __int16)v15 != (unsigned __int16)*v14)
      goto LABEL_10;
    v18 = WORD1(v15) == WORD1(v16);
    v17 = (v16 ^ v15) & 0xFFFFFF00000000;
    v18 = v18 && v17 == 0;
    if (!v18)
      goto LABEL_10;
LABEL_14:
    if (!a7)
    {
      v21 = *(_QWORD *)(a1 + 48);
      re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 80), &v50);
      re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v50);
      re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v51);
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)this);
      v22 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v49);
      if (!v22)
      {
        v36 = re::TypeInfo::name((re::TypeInfo *)v49);
        return 0;
      }
      v23 = (uint64_t (*)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v22;
      result = 0;
      if (!v24)
        return result;
      v26 = *(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(v47 + 96);
      re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)v46);
      v27 = (_anonymous_namespace_ *)v26(a4, &v50, v21);
      v44 = 0;
      v45 = &str_110;
      v28 = *(unsigned int **)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
      if (v28 && *v28)
      {
        v29 = *((_QWORD *)v28 + 1);
        do
        {
          if ((*(_WORD *)(v29 + 22) & 0x1000) != 0)
            v30 = (const char *)v29;
          else
            v30 = *(const char **)(v29 + 8);
          v42 = 0;
          v43 = &str_110;
          v31 = v42;
          v32 = v43;
          v42 = 0;
          v43 = &str_110;
          v33 = v44;
          v34 = v45;
          v44 = v31;
          v45 = v32;
          v50 = v31 & 0xFFFFFFFFFFFFFFFELL | v33 & 1;
          v51[0] = v34;
          re::StringID::destroyString((re::StringID *)&v50);
          re::StringID::destroyString((re::StringID *)&v42);
          v35 = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, uint64_t *))(v47 + 104))(a4, v46, *(_QWORD *)(a1 + 48), &v44);
          v27 = (_anonymous_namespace_ *)v23(a1, v30, 0, v35, v49, v48, 0);
          v29 += 48;
        }
        while (v29 != *((_QWORD *)v28 + 1) + 48 * *v28);
      }
      re::StringID::destroyString((re::StringID *)&v44);
    }
    return *(_BYTE *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(this, a6, a3))
    goto LABEL_14;
  v13 = *(_QWORD **)a6;
  v14 = (uint64_t *)*((_QWORD *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v13, v14[9], &v50);
  re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)v51);
  v19 = re::TypeInfo::name((re::TypeInfo *)v49);
  if ((unint64_t)*v19 >> 1 == 0x134375A94D9F7110)
  {
    v20 = (char *)v19[1];
    if (v20 == "DynamicString" || !strcmp(v20, "DynamicString"))
      goto LABEL_14;
  }
  return 0;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(uint64_t a1, char *a2, _QWORD *a3)
{
  unsigned int *result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    if (*((_WORD *)result + 11) == 4)
    {
      v7 = *result;
      *a3 = v7;
      LOBYTE(v8) = 6;
      DWORD1(v8) = 0;
      *((_QWORD *)&v8 + 1) = a2;
      v9 = 0;
      v10 = v7;
      v11 = 0;
      v12 = result;
      return (unsigned int *)1;
    }
    return 0;
  }
  return result;
}

void re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[23];
  uint64_t v15;
  char v16;

  if (*(_BYTE *)(a1 + 40))
    return;
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(v3 + 48 * (v4 - 1) + 40);
  if (!v5)
  {
    v7 = 0;
LABEL_7:
    if (*(_WORD *)(v7 + 22) == 3)
    {
      LOBYTE(v9[0]) = 7;
      DWORD1(v9[0]) = a2;
      *((_QWORD *)&v9[0] + 1) = "entry";
      v9[1] = xmmword_2260F4F20;
      v10 = 0;
      v11 = v7;
    }
    else
    {
    }
    return;
  }
  v6 = *(_QWORD *)(v3 + 48 * (v4 - 1) + 32);
  if (*(_DWORD *)v5 > v6)
  {
    v7 = *(_QWORD *)(v5 + 8) + 24 * v6;
    goto LABEL_7;
  }
  if ((v13 & 1) != 0)
    v8 = *(_BYTE **)&v14[7];
  else
    v8 = v14;
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Index out of range.", (re::DynamicString *)&v15, v8);
  if (v15 && (v16 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  if (v12 && (v13 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v12 + 40))();
}

_anonymous_namespace_ *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry(_anonymous_namespace_ *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _anonymous_namespace_ *v6;
  char v7;
  _BYTE v8[23];
  uint64_t v9;
  char v10;

  if (!*((_BYTE *)result + 40))
  {
    v1 = (uint64_t)result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14);
    if (*(_QWORD *)(v2 + 48 * v3 - 16) == 2)
    {
      v4 = *(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112);
      ++*(_QWORD *)(v4 - 16);
    }
    else
    {
      if ((v7 & 1) != 0)
        v5 = *(_BYTE **)&v8[7];
      else
        v5 = v8;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary entry \"%s\". Expected 2 objects (key+value). Actual number of objects: %lld.", (re::DynamicString *)&v9, v5, *(_QWORD *)(*(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112) - 16));
      if (v9 && (v10 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
      result = v6;
      if (v6)
      {
        if ((v7 & 1) != 0)
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionary(_anonymous_namespace_ *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  char v8;
  _BYTE v9[23];
  uint64_t v10;
  char v11;

  if (!*((_BYTE *)result + 40))
  {
    v1 = (uint64_t)result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14);
    if (*(_QWORD *)(v2 + 48 * v3 - 16) == *(_QWORD *)(v2 + 48 * v3 - 24))
    {
      v4 = *(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112);
      ++*(_QWORD *)(v4 - 16);
    }
    else
    {
      if ((v8 & 1) != 0)
        v5 = *(_BYTE **)&v9[7];
      else
        v5 = v9;
      v6 = *(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary \"%s\". Expected number of entries: %lld. Actual number of entries: %lld.", (re::DynamicString *)&v10, v5, *(_QWORD *)(v6 - 24), *(_QWORD *)(v6 - 16));
      if (v10 && (v11 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v10 + 40))();
      result = v7;
      if (v7)
      {
        if ((v8 & 1) != 0)
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 40))();
      }
    }
  }
  return result;
}

unsigned int *re::serializeDynamicString<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _QWORD *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  char *v18;
  unsigned int *result;
  _anonymous_namespace_ *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;

  if (this == a6)
    goto LABEL_14;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      v16 = WORD1(v13) == WORD1(v14);
      v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      v16 = v16 && v15 == 0;
      if (v16)
        goto LABEL_14;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x22C6ED80D0CLL
    || (v18 = (char *)v17[1], v18 != "StringID") && strcmp(v18, "StringID"))
  {
    return 0;
  }
LABEL_14:
  if (a7)
  {
    v34 = 0;
    if (!(_DWORD)result)
      return result;
    if (v34)
    v20 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_34;
  }
  v21 = a4[1];
  if ((v21 & 1) != 0)
    v22 = v21 >> 1;
  else
    v22 = v21 >> 1;
  v34 = v22;
  v23 = a1 + 24;
  if ((_DWORD)result)
  {
    v24 = v34;
    v25 = *(_QWORD *)v23;
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v23 + 8) + 24))(*(_QWORD *)(*(_QWORD *)v23 + 8));
    if (v24 <= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 8) + 32))(*(_QWORD *)(v25 + 8)) + v26)
    {
      if (!*a4)
      {
        *a4 = *(_QWORD *)(a1 + 48);
        re::DynamicString::setCapacity(a4, v24 + 1);
      }
      re::DynamicString::resize(a4, v24, 0);
      if (v24)
      {
        if ((a4[1] & 1) != 0)
          v33 = (char *)a4[2];
        else
          v33 = (char *)a4 + 9;
      }
      v20 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_34:
      return (unsigned int *)(*(_BYTE *)(a1 + 64) == 0);
    }
    v27 = *(_QWORD *)(a1 + 24);
    (*(void (**)(_QWORD))(**(_QWORD **)(v27 + 8) + 24))(*(_QWORD *)(v27 + 8));
    (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 8) + 32))(*(_QWORD *)(v27 + 8));
    return 0;
  }
  return result;
}

uint64_t re::internal::serializeMembers<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, uint64_t a2, uint64_t *a3, const re::TypeInfo *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t i;
  uint64_t v16;
  uint64_t v17;
  re *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  re::internal *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[32];
  _BYTE v40[32];
  _QWORD *v41[2];
  uint64_t v42;
  _QWORD *v43[2];
  uint64_t v44;
  uint64_t v45[4];
  unint64_t v46;
  uint64_t v47[5];
  _BYTE v48[8];
  _BYTE v49[32];
  _BYTE v50[8];
  uint64_t v51;
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (a3 == (uint64_t *)a4)
    return re::internal::serializeMembersWithoutVersioning<re::EncoderBinary<re::FixedArrayInputStream>>((_BYTE *)a1, a2, a3, a5);
  if (*a3 == *(_QWORD *)a4)
  {
    v11 = *(_QWORD *)a3[2];
    v12 = **((_QWORD **)a4 + 2);
    if ((unsigned __int16)v11 == (unsigned __int16)v12)
    {
      v14 = WORD1(v11) == WORD1(v12);
      v13 = (v12 ^ v11) & 0xFFFFFF00000000;
      v14 = v14 && v13 == 0;
      if (v14)
        return re::internal::serializeMembersWithoutVersioning<re::EncoderBinary<re::FixedArrayInputStream>>((_BYTE *)a1, a2, a3, a5);
    }
  }
  else if (re::areSameTranslatedVersion((re *)a3, a4, (const re::TypeInfo *)a3))
  {
    return re::internal::serializeMembersWithoutVersioning<re::EncoderBinary<re::FixedArrayInputStream>>((_BYTE *)a1, a2, a3, a5);
  }
  if (*((unsigned __int8 *)a3 + 12) == *((unsigned __int8 *)a4 + 12))
  {
    re::TypeRegistry::typeInfo((_QWORD *)*a3, *(_QWORD *)(a3[2] + 72), v50);
    re::TypeRegistry::typeInfo(*(_QWORD **)a4, *(_QWORD *)(*((_QWORD *)a4 + 2) + 72), v48);
    if (v48[0])
    {
      if (!v50[0])
      {
        v33 = re::TypeInfo::name((re::TypeInfo *)v49)[1];
        re::TypeInfo::name((re::TypeInfo *)a3);
      }
    }
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v47, *a3, a3[2]);
    result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v45, *(_QWORD *)a4, *((_QWORD *)a4 + 2));
    if (v46)
    {
      for (i = 0; i < v46; ++i)
      {
        if (*(_BYTE *)(a1 + 64))
          break;
        result = (uint64_t)re::TypeMemberCollection::operator[](v45, i, (uint64_t)v43);
        if (*(_BYTE *)(v44 + 28))
        {
          v16 = *(_QWORD *)(v44 + 16);
          if (strlen((const char *)v16) >= 3 && *(_BYTE *)v16 == 109)
            v16 += 2 * (*(_BYTE *)(v16 + 1) == 95);
          v17 = *(unsigned int *)(v44 + 32);
          v18 = *(re **)(*(_QWORD *)a4 + 856);
          if (!v18
            || (v18 = (re *)re::internal::TypeTranslationTable::translateMember(v18, (const re::TypeMemberInfo *)v43),
                (_DWORD)v18 == -1))
          {
            v22 = *re::foundationSerializationLogObjects(v18);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              v23 = v22;
              v24 = re::TypeInfo::name(a4)[1];
              *(_DWORD *)buf = 136315394;
              v53 = v24;
              v54 = 2080;
              v55 = v16;
              _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);

            }
            v25 = *(re::internal **)(a1 + 272);
            re::TypeRegistry::typeInfo(v43[0], *(_QWORD *)v44, buf);
            re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v53 + 4);
            result = re::internal::translateType(v25, (const re::TypeRegistry *)v41, (uint64_t)buf);
            if (!*(_BYTE *)(a1 + 64))
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint8_t *, uint8_t *, uint64_t))(*(_QWORD *)a1 + 72))(a1, v16, v17, 0, buf, buf, 1);
          }
          else
          {
            re::TypeMemberCollection::operator[](v47, (int)v18, (uint64_t)v41);
            v19 = a2 + *(unsigned int *)(v42 + 24);
            re::TypeRegistry::typeInfo(v41[0], *(_QWORD *)v42, buf);
            re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v53 + 4);
            re::TypeRegistry::typeInfo(v43[0], *(_QWORD *)v44, buf);
            re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v53 + 4);
            if (*(_BYTE *)(a1 + 64)
              || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, v16, v17, v19, v40, v39, a5), (result & 1) == 0))
            {
              result = re::TypeInfo::renamedObjectMembers(a4);
              if (v20)
              {
                v21 = (_DWORD *)(result + 16);
                while (i != *v21)
                {
                  v21 += 6;
                  if (!--v20)
                    goto LABEL_34;
                }
                v26 = *((_QWORD *)v21 - 1);
                re::TypeRegistry::typeInfo(v41[0], *(_QWORD *)v42, buf);
                re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v53 + 4);
                re::TypeRegistry::typeInfo(v43[0], *(_QWORD *)v44, buf);
                result = re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v53 + 4);
                if (!*(_BYTE *)(a1 + 64))
                  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, v26, v17, v19, v40, v39, a5);
              }
            }
          }
        }
LABEL_34:
        ;
      }
    }
  }
  else
  {
    v27 = re::TypeInfo::name((re::TypeInfo *)a3)[1];
    re::TypeInfo::name(a4);
  }
  return result;
}

void re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v9[2];

  v5 = *(_QWORD *)(a1 + 272);
  v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5 + 200, a2);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *v6;
    v9[0] = v5;
    v9[1] = v8;
  }
}

unsigned int *re::serializeBool<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, BOOL *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeChar<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _BYTE *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeI8<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _BYTE *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeI16<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _WORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeI32<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unsigned int *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeI64<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, unint64_t *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeU8<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _BYTE *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeU16<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _WORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeU32<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _DWORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeU64<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, _QWORD *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeFloat<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeDouble<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  if (this == a6)
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)this + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
  }
  return 0;
}

unsigned int *re::serializeCString<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, const char **a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  size_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  size_t v45;
  int v46;

  if (this != a6)
  {
    if (*(_QWORD *)this != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3))
        goto LABEL_4;
LABEL_23:
      return 0;
    }
    v21 = **((_QWORD **)this + 2);
    v22 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v21 != (unsigned __int16)v22)
      goto LABEL_23;
    v24 = WORD1(v21) == WORD1(v22);
    v23 = (v22 ^ v21) & 0xFFFFFF00000000;
    v24 = v24 && v23 == 0;
    if (!v24)
      goto LABEL_23;
  }
LABEL_4:
  if (a7)
  {
    v46 = 0;
    result = 0;
    if (!v18)
      return result;
    if (!v46)
      goto LABEL_12;
    if (v46 != 1)
    {
      v45 = 0;
      {
        if (v45)
      }
LABEL_12:
      goto LABEL_46;
    }
    goto LABEL_17;
  }
  v46 = 2 * (*a4 != 0);
  v20 = a1 + 24;
  if (!(_DWORD)result)
    return result;
  if (v46)
  {
    if (v46 == 2)
    {
      if (*a4)
        v25 = strlen(*a4);
      else
        v25 = 0;
      v45 = v25;
      {
        v26 = (char *)*a4;
        v27 = v45;
        if (!*a4 || v45 != v25)
        {
          if (v26)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
            *a4 = 0;
          }
          v28 = *(_QWORD *)v20;
          v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v20 + 8) + 24))(*(_QWORD *)(*(_QWORD *)v20 + 8));
          if (v27 > (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 8) + 32))(*(_QWORD *)(v28 + 8)) + v29)
          {
            v35 = *(_QWORD *)(a1 + 24);
            (*(void (**)(_QWORD))(**(_QWORD **)(v35 + 8) + 24))(*(_QWORD *)(v35 + 8));
            (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 8) + 32))(*(_QWORD *)(v35 + 8));
            return 0;
          }
          v41 = v27 == -1;
          v42 = v41 << 63 >> 63;
          if (v42 != v41 || v42 < 0)
          {
            return 0;
          }
          v26 = (char *)(*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v27 + 1, 0);
          *a4 = v26;
        }
        if (v27)
        {
          v26 = (char *)*a4;
        }
        v26[v27] = 0;
      }
    }
    else if (v46 == 1)
    {
LABEL_17:
      return 0;
    }
  }
  else if (*a4)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
    *a4 = 0;
  }
  v43 = *(unsigned __int8 *)(a1 + 64);
  if (!*a4 || !*(_BYTE *)(a1 + 64))
    return (unsigned int *)(v43 == 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
  *a4 = 0;
LABEL_46:
  v43 = *(unsigned __int8 *)(a1 + 64);
  return (unsigned int *)(v43 == 0);
}

unsigned int *re::serializeStringID<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t *a4, re *this, re::TypeInfo *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unsigned int *result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _anonymous_namespace_ *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;

  if (this == a6)
    goto LABEL_14;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 == (unsigned __int16)v14)
    {
      v16 = WORD1(v13) == WORD1(v14);
      v15 = (v14 ^ v13) & 0xFFFFFF00000000;
      v16 = v16 && v15 == 0;
      if (v16)
        goto LABEL_14;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_14;
  }
  v17 = re::TypeInfo::name(a6);
  if ((unint64_t)*v17 >> 1 != 0x134375A94D9F7110
    || (v18 = (char *)v17[1], v18 != "DynamicString") && strcmp(v18, "DynamicString"))
  {
    return 0;
  }
LABEL_14:
  v19 = a1 + 24;
  if (a7)
  {
    v47 = 0;
    if (!(_DWORD)result)
      return result;
    if (v47)
    goto LABEL_26;
  }
  v46 = 0;
  {
    v21 = v46;
    if (v46)
    {
      v22 = *(_QWORD *)v19;
      v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v19 + 8) + 24))(*(_QWORD *)(*(_QWORD *)v19 + 8));
      if (v21 > (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 8) + 32))(*(_QWORD *)(v22 + 8)) + v23)
      {
        v29 = *(_QWORD *)(a1 + 24);
        (*(void (**)(_QWORD))(**(_QWORD **)(v29 + 8) + 24))(*(_QWORD *)(v29 + 8));
        (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 8) + 32))(*(_QWORD *)(v29 + 8));
        return 0;
      }
      v36 = v21 == -1;
      v37 = v36 << 63 >> 63;
      if (v37 != v36 || v37 < 0)
      {
        return 0;
      }
      v38 = (char *)(*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), v21 + 1, 0);
      v38[v21] = 0;
      v44 = 0;
      v45 = &str_110;
      v40 = v44;
      v41 = (uint64_t)v45;
      v44 = 0;
      v45 = &str_110;
      v42 = *a4;
      v43 = a4[1];
      *a4 = v40;
      a4[1] = v41;
      v47 = v40 & 0xFFFFFFFFFFFFFFFELL | v42 & 1;
      v48 = v43;
      re::StringID::destroyString((re::StringID *)&v47);
      re::StringID::destroyString((re::StringID *)&v44);
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), v38);
    }
    else
    {
      v44 = 0;
      v45 = &str_110;
      v35 = a4[1];
      v47 = *a4 & 1;
      v48 = v35;
      *a4 = 0;
      a4[1] = (uint64_t)&str_110;
      re::StringID::destroyString((re::StringID *)&v47);
      re::StringID::destroyString((re::StringID *)&v44);
    }
LABEL_26:
    return (unsigned int *)(*(_BYTE *)(a1 + 64) == 0);
  }
  return 0;
}

void re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 + 8) | 0xFFFFFFFF00000000;
  v6 = *(_QWORD *)(a1 + 288);
  if (v6)
  {
    v6 = v5 % *(unsigned int *)(a1 + 312);
    v7 = *(unsigned int *)(*(_QWORD *)(a1 + 296) + 4 * v6);
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)(a1 + 304);
      if (*(_QWORD *)(v13 + 24 * v7 + 4) == v5)
      {
LABEL_12:
        *(_QWORD *)(v13 + 24 * v7 + 16) = a3;
        goto LABEL_13;
      }
      while (1)
      {
        LODWORD(v7) = *(_DWORD *)(v13 + 24 * v7) & 0x7FFFFFFF;
        if ((_DWORD)v7 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v13 + 24 * v7 + 4) == v5)
          goto LABEL_12;
      }
    }
  }
  v8 = *(unsigned int *)(a1 + 324);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 320);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 312))
    {
      LODWORD(v6) = v5 % *(unsigned int *)(a1 + 312);
      v9 = *(_DWORD *)(a1 + 320);
    }
    *(_DWORD *)(a1 + 320) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 304);
    v11 = *(_DWORD *)(v10 + 24 * v8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 304);
    v11 = *(_DWORD *)(v10 + 24 * v8);
    *(_DWORD *)(a1 + 324) = v11 & 0x7FFFFFFF;
  }
  v12 = 24 * v8;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 304) + v12) = *(_DWORD *)(*(_QWORD *)(a1 + 304) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 304) + 24 * v8 + 4) = v5;
  *(_QWORD *)(*(_QWORD *)(a1 + 304) + 24 * v8 + 16) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v6) = v8;
  ++*(_DWORD *)(a1 + 316);
LABEL_13:
  ++*(_DWORD *)(a1 + 328);
}

unsigned int *re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, uint64_t a4, re *this, re::TypeInfo *a6, int a7)
{
  unsigned int *result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  re *v21;
  NSObject *v22;
  char *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE buf[22];
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (this == a6)
    goto LABEL_4;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v26 = **((_QWORD **)this + 2);
    v27 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v26 == (unsigned __int16)v27)
    {
      v29 = WORD1(v26) == WORD1(v27);
      v28 = (v27 ^ v26) & 0xFFFFFF00000000;
      v29 = v29 && v28 == 0;
      if (v29)
        goto LABEL_4;
    }
LABEL_33:
    return 0;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3))
    goto LABEL_33;
LABEL_4:
  if (a7)
  {
    v30 = 0;
    if (!(_DWORD)result)
      return result;
    if (v30)
  }
  else
  {
    v14 = **((_QWORD **)this + 2);
    v30 = *(_QWORD **)this;
    v31 = v14;
    LODWORD(v32) = -1;
    *(_QWORD *)buf = 0x258C98EAAF29A10ALL;
    *(_QWORD *)&buf[8] = "CallbackSerializerAttribute";
    v15 = (uint64_t *)re::TypeAttributeCollection::operator[]((uint64_t *)&v30, buf);
    re::StringID::destroyString((re::StringID *)buf);
    v16 = *v15;
    v17 = *(_QWORD *)(a1 + 264);
    v34 = 0;
    if (!(_DWORD)result)
      return result;
    v18 = *(_QWORD **)(a1 + 56);
    v32 = 0;
    v33 = 0;
    v30 = v18;
    v31 = 0;
    re::DynamicString::setCapacity(&v30, 0);
    if (v34)
    {
      re::DynamicString::resize(&v30, v34, 0);
      if ((v31 & 1) != 0)
        v19 = v32;
      else
        v19 = (char *)&v31 + 1;
    }
    if ((v31 & 1) != 0)
      v20 = v32;
    else
      v20 = (char *)&v31 + 1;
    v21 = (re *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *))(v16 + 80))(*(_QWORD *)(a1 + 48), v17, v16, a4, v20);
    if ((v21 & 1) == 0)
    {
      v22 = *re::foundationSerializationLogObjects(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        if ((v31 & 1) != 0)
          v23 = v32;
        else
          v23 = (char *)&v31 + 1;
        v24 = v22;
        v25 = re::TypeInfo::name(this)[1];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v23;
        v36 = 2080;
        v37 = v25;
        _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_INFO, "Failed to parse \"%s\": \"%s\" (type %s) using deserialization callback - skipping.", buf, 0x20u);

      }
    }
    if (v30 && (v31 & 1) != 0)
      (*(void (**)(void))(*v30 + 40))();
  }
  return (unsigned int *)(*(_BYTE *)(a1 + 64) == 0);
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(uint64_t a1, char *a2, int *a3)
{
  unsigned int *result;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  if (result)
  {
    v7 = result;
    v8 = *((unsigned __int16 *)result + 11);
    if (*((_WORD *)result + 11))
    {
      if (v8 != 3
        || (int *)(*((_QWORD *)result + 1) + 48 * *result) == rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::FindMember(result, "@ref"))
      {
        v8 = 2;
        v9 = 1;
      }
      else
      {
        v9 = 1;
        v8 = 1;
      }
    }
    else
    {
      v9 = *((unsigned __int16 *)result + 11);
    }
    *a3 = v8;
    LOBYTE(v10) = 9;
    DWORD1(v10) = 0;
    *((_QWORD *)&v10 + 1) = a2;
    v11 = 0;
    v12 = v9;
    v13 = 0;
    v14 = v7;
    return (unsigned int *)1;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endPointer(_anonymous_namespace_ *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _anonymous_namespace_ *v6;
  char v7;
  _BYTE v8[23];
  uint64_t v9;
  char v10;

  if (!*((_BYTE *)result + 40))
  {
    v1 = (uint64_t)result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14);
    if (*(_QWORD *)(v2 + 48 * v3 - 16) == *(_QWORD *)(v2 + 48 * v3 - 24))
    {
      v4 = *(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112);
      ++*(_QWORD *)(v4 - 16);
    }
    else
    {
      if ((v7 & 1) != 0)
        v5 = *(_BYTE **)&v8[7];
      else
        v5 = v8;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize pointer \"%s\". No value was provided.", (re::DynamicString *)&v9, v5);
      if (v9 && (v10 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
      result = v6;
      if (v6)
      {
        if ((v7 & 1) != 0)
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
      }
    }
  }
  return result;
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        do
        {
          if ((*(_DWORD *)v6 & 0x80000000) != 0)
          {
            v13 = *(_QWORD *)(v6 + 4);
            v14 = *(unsigned int *)(a1 + 24);
            v15 = v13 % v14;
            v16 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v16 == 0x7FFFFFFF)
            {
              v16 = *(unsigned int *)(a1 + 32);
              v17 = v16;
              if ((_DWORD)v16 == (_DWORD)v14)
              {
                v15 = v13 % *(unsigned int *)(a1 + 24);
                v17 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v17 + 1;
              v18 = *(_QWORD *)(a1 + 16);
              v19 = *(_DWORD *)(v18 + 24 * v16);
            }
            else
            {
              v18 = *(_QWORD *)(a1 + 16);
              v19 = *(_DWORD *)(v18 + 24 * v16);
              *(_DWORD *)(a1 + 36) = v19 & 0x7FFFFFFF;
            }
            v20 = 24 * v16;
            *(_DWORD *)(v18 + v20) = v19 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v20) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v16) & 0x80000000 | *(_DWORD *)(v12 + 4 * v15);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v16 + 4) = *(_QWORD *)(v6 + 4);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v16 + 16) = *(_QWORD *)(v6 + 16);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v15) = v16;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v6 += 24;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

BOOL re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(uint64_t a1, char *a2, const re::TypeInfo *a3, char **a4, re *this, re::TypeInfo *a6, char a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  int v48;
  unsigned int v49;
  int v50;

  if (this != a6)
  {
    if (*(_QWORD *)this != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3))
        goto LABEL_4;
LABEL_15:
      return 0;
    }
    v13 = **((_QWORD **)this + 2);
    v14 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v13 != (unsigned __int16)v14)
      goto LABEL_15;
    v16 = WORD1(v13) == WORD1(v14);
    v15 = (v14 ^ v13) & 0xFFFFFF00000000;
    v16 = v16 && v15 == 0;
    if (!v16)
      goto LABEL_15;
  }
LABEL_4:
  v50 = 0;
  {
    if (v50 == 1)
    {
      v49 = 0;
      if (!*(_BYTE *)(a1 + 64))
      {
        v23 = v49;
        if (*(_QWORD *)(a1 + 408) <= (unint64_t)v49)
        {
        }
        else
        {
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v49, (uint64_t)&v45);
          if (v45 == *(_QWORD *)this)
          {
            v24 = **((_QWORD **)this + 2);
            if (v46 == (unsigned __int16)v24 && v47 == WORD1(v24) && ((v48 ^ HIDWORD(v24)) & 0xFFFFFF) == 0)
            {
              if ((a7 & 1) == 0)
              {
                if (*a4)
                {
                  v42 = *a4;
                  if (v42 != (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v23))
                  {
                    (*(void (**)(_QWORD, char *))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), *a4);
                    *a4 = 0;
                  }
                }
                *a4 = (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v23);
                re::internal::SharedObjectGraph::addReference((_QWORD *)(a1 + 336), v23);
              }
              goto LABEL_36;
            }
          }
          v25 = *(_anonymous_namespace_ **)(a1 + 272);
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v23, (uint64_t)&v45);
          v43 = *((_QWORD *)re::TypeRegistry::typeName(v25, &v45) + 1);
        }
      }
    }
    else
    {
      if (!v50)
      {
        if ((a7 & 1) == 0)
        {
          if (*a4)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
            *a4 = 0;
          }
        }
LABEL_36:
        return *(_BYTE *)(a1 + 64) == 0;
      }
      if ((a7 & 1) == 0 && *a4)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
        *a4 = 0;
      }
      v45 = 0;
      {
        v36 = v45;
        v37 = v45 == -1;
        v38 = v37 << 63 >> 63;
        if (v38 == v37 && (v38 & 0x8000000000000000) == 0)
        {
          v39 = (char *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v45 + 1, 0);
          v40 = (uint64_t)v39;
          if ((a7 & 1) == 0)
            *a4 = v39;
          if (v36)
          *(_BYTE *)(v40 + v36) = 0;
          v41 = **((_QWORD **)this + 2);
          *(_QWORD *)&v44 = *(_QWORD *)this;
          *((_QWORD *)&v44 + 1) = v41;
          re::internal::SharedObjectGraph::addObject(a1 + 336, v40, &v44);
          goto LABEL_36;
        }
      }
    }
  }
  return 0;
}

BOOL re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, int a7)
{
  const re::TypeInfo *v13;
  _BOOL4 isPointerToPolymorphicType;
  char v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  char **v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char v46;
  unsigned __int8 *v47;
  int v48;
  re::TypeRegistry *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  re *v53;
  uint64_t v54;
  _anonymous_namespace_ *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  const char *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  re::TypeRegistry *v65;
  re *v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t *v69;
  uint64_t *v70;
  void **Instance;
  void **v72;
  void (*v73)(uint64_t);
  NSObject *v74;
  NSObject *v75;
  uint64_t v76;
  NSObject *v77;
  char v78;
  uint64_t v79;
  char *__s2;
  __int128 v81;
  re *v82[2];
  _BYTE v83[20];
  int v84;
  _QWORD v85[2];
  uint64_t *v86;
  re *v87[2];
  re *v88[2];
  uint64_t *v89;
  _QWORD v90[2];
  re **v91;
  _QWORD v92[2];
  re *v93[4];
  re *v94;
  uint64_t v95;
  _QWORD v96[2];
  __int128 buf;
  uint64_t *v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6)
    goto LABEL_4;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v25 = **((_QWORD **)this + 2);
    v26 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v25 == (unsigned __int16)v26)
    {
      v28 = WORD1(v25) == WORD1(v26);
      v27 = (v26 ^ v25) & 0xFFFFFF00000000;
      v28 = v28 && v27 == 0;
      if (v28)
        goto LABEL_4;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v13))
  {
LABEL_4:
    v15 = 1;
    goto LABEL_5;
  }
  if (*((_BYTE *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (v29 = re::TypeInfo::name(this), v30 = re::TypeInfo::name(a6), !re::StringID::operator==(v29, v30))))
  {
    return 0;
  }
  v15 = 0;
LABEL_5:
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), &buf);
  re::TypeInfo::TypeInfo((uint64_t)v90, (uint64_t)&buf + 8);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &buf);
  re::TypeInfo::TypeInfo((uint64_t)v88, (uint64_t)&buf + 8);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    v16 = *v91;
    v87[0] = (re *)v90[0];
    v87[1] = v16;
    if (v90[0])
      goto LABEL_8;
LABEL_15:
    v79 = re::TypeInfo::name(this)[1];
    v22 = "Failed to get actual type of polymorphic object. Type \"%s\".";
    v23 = a1;
    v24 = a2;
LABEL_16:
    return 0;
  }
  re::internal::actualType(a4, (void **)this, v87);
  if (!v87[0])
    goto LABEL_15;
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, v87, &buf);
  re::TypeInfo::TypeInfo((uint64_t)v85, (uint64_t)&buf + 8);
  v84 = 0;
  {
    if (v84 != 1)
    {
      if (!v84)
      {
        if ((a7 & 1) == 0)
        {
          if (*a4)
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)v85, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            *a4 = 0;
          }
        }
        goto LABEL_111;
      }
      if (isPointerToPolymorphicType)
      {
        {
          v42 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 8);
          if (*(_DWORD *)v42)
          {
            v43 = *(char **)(v42 + 8);
            if ((*((_WORD *)v43 + 11) & 0x1000) != 0)
              v44 = v43;
            else
              v44 = (char *)*((_QWORD *)v43 + 1);
            if (v44)
            {
              v45 = *v44;
              if (*v44)
              {
                v46 = v44[1];
                if (v46)
                {
                  v47 = (unsigned __int8 *)(v44 + 2);
                  do
                  {
                    v45 = 31 * v45 + v46;
                    v48 = *v47++;
                    v46 = v48;
                  }
                  while (v48);
                }
              }
            }
            else
            {
              v45 = 0;
            }
            v56 = 2 * v45;
            __s2 = v44;
            v96[0] = 2 * v45;
            v96[1] = v44;
            v57 = *((_DWORD *)v89 + 20);
            v58 = (v57 - 1);
            if (v57 == 1)
              goto LABEL_80;
            v59 = 0;
            while (1)
            {
              re::TypeInfo::derivedClass((re::TypeInfo *)v88, v59, (uint64_t)&buf);
              v60 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)&buf);
              if ((*v60 ^ (unint64_t)v56) <= 1)
              {
                v61 = (const char *)v60[1];
                if (v61 == __s2 || !strcmp(v61, __s2))
                  break;
              }
              if (v58 == ++v59)
                goto LABEL_80;
            }
            v62 = *v98;
            v94 = (re *)buf;
            v95 = v62;
            if (!(_QWORD)buf)
            {
LABEL_80:
              v63 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v88);
              if ((*v63 ^ (unint64_t)v56) > 1
                || (v63 = (uint64_t *)v63[1], v63 != (uint64_t *)__s2)
                && (v63 = (uint64_t *)strcmp((const char *)v63, __s2), (_DWORD)v63)
                || (v64 = *v89, v94 = v88[0], v95 = v64, !v88[0]))
              {
                v68 = *re::foundationSerializationLogObjects((re *)v63);
                if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                {
                  v77 = v68;
                  LODWORD(buf) = 136315138;
                  *(_QWORD *)((char *)&buf + 4) = __s2;
                  _os_log_error_impl(&dword_224FE9000, v77, OS_LOG_TYPE_ERROR, "Skipping unknown polymorphic type. Type name = \"%s\"", (uint8_t *)&buf, 0xCu);

                  if ((a7 & 1) != 0)
                    goto LABEL_110;
                }
                else if ((a7 & 1) != 0)
                {
LABEL_110:
                  re::StringID::destroyString((re::StringID *)v96);
                  goto LABEL_111;
                }
                if (*a4)
                {
                  re::TypeInfo::releaseInstance((re::TypeInfo *)v85, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
                  *a4 = 0;
                }
                goto LABEL_110;
              }
            }
            if ((a7 & 1) == 0 && *a4)
            {
              re::TypeInfo::releaseInstance((re::TypeInfo *)v85, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
              *a4 = 0;
            }
            re::TypeRegistry::typeInfo(v88[0], &v94, &buf);
            re::TypeInfo::TypeInfo((uint64_t)v93, (uint64_t)&buf + 8);
            if ((v15 & 1) != 0)
            {
              v65 = *(re::TypeRegistry **)(a1 + 272);
              if (*(re::TypeRegistry **)this == v65)
              {
                re::TypeInfo::operator=((uint64_t)v85, (uint64_t)v93);
                v66 = v94;
                v67 = v95;
                goto LABEL_97;
              }
            }
            else
            {
              v65 = *(re::TypeRegistry **)(a1 + 272);
            }
            v69 = re::TypeInfo::name((re::TypeInfo *)v93);
            v70 = re::TypeRegistry::typeInfo(v65, (const re::StringID *)v69, &buf);
            if (!(_BYTE)buf)
            {
              v74 = *re::foundationSerializationLogObjects((re *)v70);
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
              {
                v75 = v74;
                v76 = re::TypeInfo::name((re::TypeInfo *)v93)[1];
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v76;
                _os_log_impl(&dword_224FE9000, v75, OS_LOG_TYPE_DEFAULT, "No matching runtime type found for serialized polymorphic type \"%s\". Skipping unknown type.", (uint8_t *)&buf, 0xCu);

              }
              *(_QWORD *)&buf = 0;
              *((_QWORD *)&buf + 1) = 0xFFFFFFFFLL;
              (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)a1 + 16))(a1, 0, &buf);
              if (!*(_BYTE *)(a1 + 64))
                (*(void (**)(uint64_t, char *, _QWORD, _QWORD, re **, re **, uint64_t))(*(_QWORD *)a1 + 72))(a1, __s2, 0, 0, v93, v93, 1);
              goto LABEL_109;
            }
            re::TypeInfo::operator=((uint64_t)v85, (uint64_t)&buf + 8);
            v66 = (re *)v85[0];
            v67 = *v86;
LABEL_97:
            Instance = re::TypeInfo::createInstance((re::TypeInfo *)v85, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            v72 = Instance;
            if ((a7 & 1) == 0)
            {
              *a4 = (char *)Instance;
              *(_QWORD *)&buf = v66;
              *((_QWORD *)&buf + 1) = v67;
              re::internal::setActualType(a4, (re **)this, (re **)&buf);
            }
            v92[0] = v66;
            v92[1] = v67;
            (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v72, v92);
            if (!*(_BYTE *)(a1 + 64))
              (*(void (**)(uint64_t, char *, _QWORD, void **, _QWORD *, re **, BOOL))(*(_QWORD *)a1 + 72))(a1, __s2, 0, v72, v85, v93, v72 == 0);
LABEL_109:
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
            goto LABEL_110;
          }
        }
LABEL_111:
        return *(_BYTE *)(a1 + 64) == 0;
      }
      if (!a7)
      {
        v51 = *a4;
        if (!*a4)
          v51 = (char *)re::TypeInfo::createInstance((re::TypeInfo *)v90, *(re::Allocator **)(a1 + 48), 0);
        v52 = 0;
        *a4 = v51;
        goto LABEL_62;
      }
      v49 = *(re::TypeRegistry **)(a1 + 272);
      if ((re::TypeRegistry *)v90[0] != v49)
      {
        v50 = re::TypeInfo::name((re::TypeInfo *)v90);
        re::TypeRegistry::typeInfo(v49, (const re::StringID *)v50, &buf);
        if (!(_BYTE)buf)
        {
          v51 = 0;
          v52 = 1;
          goto LABEL_62;
        }
        re::TypeInfo::operator=((uint64_t)v90, (uint64_t)&buf + 8);
      }
      v51 = (char *)re::TypeInfo::createInstance((re::TypeInfo *)v90, *(re::Allocator **)(a1 + 48), 0);
      v52 = 0;
LABEL_62:
      v53 = *v91;
      *(_QWORD *)&v81 = v90[0];
      *((_QWORD *)&v81 + 1) = v53;
      re::internal::SharedObjectGraph::beginObject((_QWORD *)(a1 + 336), (uint64_t)v51, &v81);
      if (!*(_BYTE *)(a1 + 64))
        (*(void (**)(uint64_t, char *, _QWORD, char *, _QWORD *, re **, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 0, v51, v90, v88, v52);
      if (*(_BYTE *)(a1 + 336))
      {
        --*(_QWORD *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
      goto LABEL_111;
    }
    LODWORD(v96[0]) = 0;
    if (!*(_BYTE *)(a1 + 64))
    {
      v32 = v96[0];
      if (*(_QWORD *)(a1 + 408) > (unint64_t)LODWORD(v96[0]))
      {
        re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v96[0], (uint64_t)v83);
        if (!re::internal::areCompatible((re **)this, (uint64_t)v83))
        {
          v54 = re::TypeInfo::name((re::TypeInfo *)v90)[1];
          v55 = *(_anonymous_namespace_ **)(a1 + 272);
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)&buf);
          LOBYTE(v79) = v54;
          re::TypeRegistry::typeName(v55, &buf);
          v22 = "Invalid reference. Objects are not compatible. Expected type \"%s\". Actual type \"%s\".";
          goto LABEL_68;
        }
        if ((a7 & 1) != 0)
          goto LABEL_111;
        if (*a4)
        {
          v33 = *a4;
          if (v33 != (char *)re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v32))
          {
            re::TypeInfo::releaseInstance((re::TypeInfo *)v85, *a4, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
            *a4 = 0;
          }
        }
        v34 = re::internal::SharedObjectGraph::object((re::internal::SharedObjectGraph *)(a1 + 336), v32);
        v35 = (char **)v34;
        *a4 = (char *)v34;
        if ((*((_BYTE *)v86 + 49) & 2) != 0)
        {
          v73 = (void (*)(uint64_t))v86[4];
          if (v73)
            v73(v34);
          re::internal::SharedObjectGraph::addReference((_QWORD *)(a1 + 336), v32);
        }
        else
        {
          re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)v93);
          if (!v93[0])
          {
            LOBYTE(v79) = v32;
            v22 = "TypeID for shared object at index %d is invalid.";
            goto LABEL_68;
          }
          re::TypeRegistry::typeInfo(v93[0], v93, &buf);
          if (!(_BYTE)buf)
          {
            LOBYTE(v79) = v32;
            v22 = "No TypeInfo found for shared object at index %d.";
            goto LABEL_68;
          }
          v36 = re::TypeInfo::createInstance((re::TypeInfo *)((char *)&buf + 8), *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264));
          *a4 = (char *)v36;
          if ((re::TypeInfo::copy((re::TypeInfo *)((char *)&buf + 8), v36, v35, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 264)) & 1) == 0)
          {
            v79 = re::TypeInfo::name((re::TypeInfo *)((char *)&buf + 8))[1];
            v22 = "Failed to copy non-shareable object of type '%s'.";
LABEL_68:
            v23 = a1;
            v24 = 0;
            goto LABEL_16;
          }
        }
        re::internal::SharedObjectGraph::typeID((re::internal::SharedObjectGraph *)(a1 + 336), v32, (uint64_t)v82);
        re::TypeInfo::setActualTypeForPointer((_QWORD **)this, (uint64_t)a4, v82);
        goto LABEL_111;
      }
      LOBYTE(v79) = v96[0];
      v22 = "Invalid reference ID for shared object: %u";
      goto LABEL_68;
    }
  }
  return 0;
}

unsigned int *re::EncoderRapidJSON<`anonymous namespace'::LegacyInputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(unsigned int *result, _DWORD *a2)
{
  _anonymous_namespace_ *v3;

  if (!*((_BYTE *)result + 40))
  {
    v3 = (_anonymous_namespace_ *)result;
    if ((_DWORD)result)
    {
    }
  }
  return result;
}

BOOL re::serializeJson(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t *v6;
  unsigned __int8 v10;
  BOOL v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  BOOL v18;
  _anonymous_namespace_ *v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  char v33;
  uint64_t (**v34)();
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  _BYTE v41[56];
  _QWORD v42[3];
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[5];
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _BYTE v55[32];
  int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59[4];
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  int v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  _QWORD v73[5];
  int v74;
  StringID v75[4];

  v6 = a6;
  v73[3] = 0;
  v73[4] = 0;
  v74 = 0;
  v73[0] = &off_24ED88870;
  v73[1] = a1;
  v73[2] = a6;
  *(_QWORD *)&v75[0].var0 = 0xFA473DDF415427B4;
  v75[0].var1 = "JSON-StreamAdaptor-SerializerV1";
  v34 = &off_24ED88920;
  re::StringID::StringID((re::StringID *)&v35, v75);
  v44 = 0;
  memset(v42, 0, sizeof(v42));
  v43 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41[0] = 0;
  v45 = 12;
  v46 = 0;
  v47 = 1024;
  v10 = atomic_load((unsigned __int8 *)&qword_254123118);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254123118))
  {
    re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v28, (uint64_t)&v30);
    if ((_BYTE)v30)
      v29 = SHIDWORD(v30);
    else
      v29 = 0;
    _MergedGlobals_480 = v29;
    __cxa_guard_release(&qword_254123118);
  }
  if (_MergedGlobals_480)
    v47 = _MergedGlobals_480;
  v51 = 0;
  v48 = 0u;
  v49 = 0u;
  memset(v50, 0, 28);
  memset(v55, 0, sizeof(v55));
  v56 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v57 = 0x7FFFFFFFLL;
  v50[4] = 0;
  v34 = &off_24ED888B8;
  v58 = 1;
  v61 = 0x7FFFFFFFLL;
  v66 = 0u;
  v67 = 0u;
  memset(v59, 0, sizeof(v59));
  v60 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v62 = 0;
  v72 = 0;
  v68 = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 0;
  re::StringID::destroyString((re::StringID *)v75);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
  v32 = *(_OWORD *)(a3 + 32);
  re::TypeRegistry::typeInfo((re *)v32, (re **)&v32, v75);
  re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v75[0].var1);
  v11 = 0;
  if (v31 == 8)
  {
    v12 = re::TypeInfo::name((re::TypeInfo *)&v30);
    if ((unint64_t)*v12 >> 1 == 94623636 && ((v13 = (char *)v12[1], v13 == "char*") || !strcmp(v13, "char*"))
      || (v14 = re::TypeInfo::name((re::TypeInfo *)&v30), (unint64_t)*v14 >> 1 == 0x134375A94D9F7110)
      && ((v15 = (char *)v14[1], v15 == "DynamicString") || !strcmp(v15, "DynamicString")))
    {
      v11 = 0;
    }
    else
    {
      v16 = re::TypeInfo::name((re::TypeInfo *)&v30);
      if ((unint64_t)*v16 >> 1 == 0x22C6ED80D0CLL)
      {
        v17 = (char *)v16[1];
        v18 = v17 == "StringID" || strcmp(v17, "StringID") == 0;
      }
      else
      {
        v18 = 0;
      }
      v11 = !v18;
    }
  }
  LOBYTE(v58) = 0;
  v52 = a5;
  v20 = v53;
  if (*(_DWORD *)(v53 + 24) != v54)
  {
    ((void (*)(uint64_t (***)()))v34[5])(&v34);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)v55);
    v53 = 0;
  }
  v36 = v73;
  v37 = 0;
  v38 = 0;
  if (v6)
  {
    v39 = v6;
  }
  else
  {
  }
  v40 = v6;
  *(_BYTE *)&v75[0].var0 = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v41, (unsigned __int8 *)v75);
  if (*(_BYTE *)&v75[0].var0 && v75[1].var1 && (*(_BYTE *)&v75[2].var0 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v75[1].var1 + 40))();
  v42[0] = v39;
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v42, 0x40uLL);
  ++v43;
  *(_BYTE *)&v75[0].var0 = 0;
  *(StringID *)((char *)v75 + 4) = 0u;
  memset(&v75[1].var0 + 1, 0, 28);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  v50[0] = v40;
  re::DynamicArray<char>::setCapacity(v50, 0);
  ++LODWORD(v50[3]);
  v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_QWORD *)(v23 + 48) = 512;
  *(_DWORD *)(v23 + 56) = 324;
  *(_WORD *)(v23 + 60) = 2304;
  *((_QWORD *)&v48 + 1) = v23;
  *(_QWORD *)(v23 + 64) = 0x100000001;
  v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 48, 8);
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 40) = 256;
  *(_QWORD *)&v48 = v24;
  v25 = *((_QWORD *)&v48 + 1);
  **((_QWORD **)&v48 + 1) = v24;
  *(_BYTE *)(v25 + 60) = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(v25 + 24);
  ((void (*)(uint64_t))v34[6])((uint64_t)&v34);
  if (v11)
  {
    if (!v41[0])
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))v34[9])((uint64_t)&v34, (uint64_t)"object", 0, a4, (re::TypeInfo *)&v30, (uint64_t)&v30, 0);
  }
  else
  {
    v26 = 0;
    if (!v41[0])
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))v34[9])((uint64_t)&v34, (uint64_t)"object", 0, a4, (re::TypeInfo *)&v30, (uint64_t)&v30, 0);
  }
  ((void (*)(uint64_t))v34[7])((uint64_t)&v34);
  v26 = v41[0] == 0;
LABEL_37:
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
  v34 = &off_24ED888B8;
  if (*((_QWORD *)&v69 + 1))
  {
    if (v72)
      (*(void (**)(void))(**((_QWORD **)&v69 + 1) + 40))();
    v72 = 0;
    v70 = 0uLL;
    *((_QWORD *)&v69 + 1) = 0;
    ++v71;
  }
  if (*((_QWORD *)&v66 + 1))
  {
    if ((_QWORD)v69)
      (*(void (**)(void))(**((_QWORD **)&v66 + 1) + 40))();
    *(_QWORD *)&v69 = 0;
    v67 = 0uLL;
    *((_QWORD *)&v66 + 1) = 0;
    ++v68;
  }
  if (v62)
  {
    if ((_QWORD)v66)
      (*(void (**)(void))(*(_QWORD *)v62 + 40))();
    *(_QWORD *)&v66 = 0;
    v63 = 0;
    v64 = 0;
    v62 = 0;
    ++v65;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v59);
  return v26;
}

BOOL re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(uint64_t a1, char *__s, int a3)
{
  int v3;
  _OWORD v8[3];

  v3 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), __s);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartObject(*(_QWORD *)(a1 + 168));
    LOBYTE(v8[0]) = 2;
    DWORD1(v8[0]) = a3 | 0x20;
    *((_QWORD *)&v8[0] + 1) = __s;
    memset(&v8[1], 0, 32);
  }
  return v3 == 0;
}

_anonymous_namespace_ *re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::EndObject(*((uint64_t **)result + 21));
    v2 = *((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14);
    ++*(_QWORD *)(v2 - 16);
  }
  return result;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED888B8;
  v2 = *(_QWORD *)(a1 + 472);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 504))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    ++*(_DWORD *)(a1 + 496);
  }
  v3 = *(_QWORD *)(a1 + 432);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 464))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    ++*(_DWORD *)(a1 + 456);
  }
  v4 = *(_QWORD *)(a1 + 392);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 344));
}

void `anonymous namespace'::LegacyOutputStreamAdaptor::~LegacyOutputStreamAdaptor(_anonymous_namespace_::LegacyOutputStreamAdaptor *this)
{
  *(_QWORD *)this = &off_24ED88870;
  if (*((_QWORD *)this + 3))
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 10) = 0;
  }
}

{
  JUMPOUT(0x2276933B8);
}

BOOL `anonymous namespace'::LegacyOutputStreamAdaptor::Next(_anonymous_namespace_::LegacyOutputStreamAdaptor *this, void **a2, int *a3)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  {
    v7 = *((_QWORD *)this + 3);
    if (!v7)
    {
      v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), 256, 0);
      *((_QWORD *)this + 3) = v7;
    }
    v8 = *((int *)this + 10);
    *a2 = (void *)(v7 + v8);
    *a3 = 256 - v8;
    *((_DWORD *)this + 10) = 256;
    return 1;
  }
  return result;
}

uint64_t `anonymous namespace'::LegacyOutputStreamAdaptor::BackUp(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) -= a2;
  return this;
}

uint64_t `anonymous namespace'::LegacyOutputStreamAdaptor::ByteCount(_anonymous_namespace_::LegacyOutputStreamAdaptor *this)
{
  return *((_QWORD *)this + 4) + *((int *)this + 10);
}

uint64_t `anonymous namespace'::LegacyOutputStreamAdaptor::WriteAliasedRaw(_anonymous_namespace_::LegacyOutputStreamAdaptor *this, const void *a2)
{
  return 0;
}

uint64_t `anonymous namespace'::LegacyOutputStreamAdaptor::AllowsAliasing(_anonymous_namespace_::LegacyOutputStreamAdaptor *this)
{
  return 0;
}

BOOL `anonymous namespace'::LegacyOutputStreamAdaptor::WriteBuffer(_anonymous_namespace_::LegacyOutputStreamAdaptor *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  if (!*((_QWORD *)this + 3))
    return 0;
  if (!*((_DWORD *)this + 10))
    return 1;
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v3 = *((int *)this + 10);
  v4 = v2 == v3;
  if (v2 == v3)
  {
    *((_QWORD *)this + 4) += v2;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 0;
  }
  *((_DWORD *)this + 10) = 0;
  return v4;
}

uint64_t re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED88920;
  if (*(_QWORD *)(a1 + 272))
  {
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(a1 + 288);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v2 = *(_QWORD *)(a1 + 216);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (v4)
    {
      if ((*(_BYTE *)(a1 + 96) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 104));
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
    }
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED888B8;
  v2 = *(_QWORD *)(a1 + 472);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 504))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    ++*(_DWORD *)(a1 + 496);
  }
  v3 = *(_QWORD *)(a1 + 432);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 464))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    ++*(_DWORD *)(a1 + 456);
  }
  v4 = *(_QWORD *)(a1 + 392);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 344));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;

  v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((_QWORD *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(_BYTE *)(result + 336))
  {
    --*(_QWORD *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(_BYTE *)(a1 + 337) = 0;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(_QWORD *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(_QWORD *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  _QWORD v10[2];
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v11 = 6059476;
  v12 = "BOOL";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6104748;
  v12 = "char";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x172E117BCLL;
  v12 = "int8_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93A4A92;
  v12 = "int16_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93BFE06;
  v12 = "int32_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93EC744;
  v12 = "int64_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6655224;
  v12 = "long";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x31CD534126;
  v12 = "uint8_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0D4E68;
  v12 = "uint16_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0F01DCLL;
  v12 = "uint32_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD11CB1ALL;
  v12 = "uint64_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x1947BDF6CLL;
  v12 = "size_t";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 195052728;
  v12 = "float";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x161EEF7A2;
  v12 = "double";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 189247272;
  v12 = "char*";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2686EB529B3EE220;
  v12 = "DynamicString";
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x458DDB01A18;
  v12 = "StringID";
  re::StringID::destroyString((re::StringID *)&v11);
  v2 = *(_QWORD *)(a1 + 272);
  v11 = 0x258C98EAAF29A10ALL;
  v12 = "CallbackSerializerAttribute";
  v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      v5 = *(_QWORD *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        v6 = 48 * v13;
        v7 = (__int128 *)(v14 + 16);
        do
        {
          v8 = *v7;
          v7 += 3;
          v9 = v8;
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14)
          (*(void (**)(void))(*(_QWORD *)v11 + 40))();
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v14 = (_BYTE *)(a1 + 336);
  v15 = *(_QWORD *)(a1 + 488);
  if (!v15)
  {
    if ((_DWORD)a7)
      v16 = 0;
    else
      v16 = a4;
    v17 = **((_QWORD **)a5 + 2);
    *(_QWORD *)&v26 = *(_QWORD *)a5;
    *((_QWORD *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((_QWORD *)(a1 + 336), v16, &v26);
  }
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v18)
  {
    result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(_QWORD *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    v20 = re::TypeInfo::name(a5);
    return 0;
  }
  return result;
}

uint64_t (*re::SerializerV1<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this))(uint64_t a1, char *a2, int a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t (*result)(uint64_t, char *, int, char **, re::TypeInfo *, const re::TypeInfo *, char);
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 == 94623636)
  {
    v6 = (char *)v4[1];
    if (v6 == "char*" || !strcmp(v6, "char*"))
  }
  if (*((_BYTE *)this + 12) == 9)
  {
    v7 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 80);
    if (v7 >= 2)
    {
      if (v7 == 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
      result = (uint64_t (*)(uint64_t, char *, int, char **, re::TypeInfo *, const re::TypeInfo *, char))_os_crash();
      __break(1u);
    }
    else
    {
    }
  }
  else if (*(_QWORD *)this == *(_QWORD *)(a1 + 272)
         && *(_QWORD *)(a1 + 288)
         && (v9 = **((_QWORD **)this + 2) | 0xFFFFFFFF00000000,
             v10 = *(unsigned int *)(*(_QWORD *)(a1 + 296) + 4 * (v9 % *(unsigned int *)(a1 + 312))),
             (_DWORD)v10 != 0x7FFFFFFF))
  {
    v11 = *(_QWORD *)(a1 + 304);
    if (*(_QWORD *)(v11 + 24 * v10 + 4) == v9)
    {
      return *(uint64_t (**)(uint64_t, char *, int, char **, re::TypeInfo *, const re::TypeInfo *, char))(v11 + 24 * v10 + 16);
    }
    else
    {
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 24 * v10 + 4) == v9)
          return *(uint64_t (**)(uint64_t, char *, int, char **, re::TypeInfo *, const re::TypeInfo *, char))(v11 + 24 * v10 + 16);
      }
    }
  }
  else
  {
  }
  return result;
}

void re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v14)
    return v14(a1, a2, a3, a4, a5, a6, a7);
  v16 = re::TypeInfo::name(a5);
  return 0;
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(uint64_t a1, char *__s, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*result)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t, uint64_t);
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)a2 != *(_QWORD *)(a1 + 272))
  if (!*(_QWORD *)(a1 + 288))
  v3 = **(_QWORD **)(a2 + 16) | 0xFFFFFFFF00000000;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 296) + 4 * (v3 % *(unsigned int *)(a1 + 312)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
  v5 = *(_QWORD *)(a1 + 304);
  if (*(_QWORD *)(v5 + 24 * v4 + 4) == v3)
    return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t, uint64_t))(v5 + 24 * v4 + 16);
  while (1)
  {
    LODWORD(v4) = *(_DWORD *)(v5 + 24 * v4) & 0x7FFFFFFF;
    if ((_DWORD)v4 == 0x7FFFFFFF)
      break;
    if (*(_QWORD *)(v5 + 24 * v4 + 4) == v3)
      return *(uint64_t (**)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t, uint64_t))(v5 + 24 * v4 + 16);
  }
  return result;
}

_QWORD *re::Encoder<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,`anonymous namespace'::LegacyOutputStreamAdaptor>::close(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t String;
  size_t v4;
  int *v5;
  void **v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  char v18;

  if (*result)
  {
    v1 = result;
    if (result[21])
    {
      v2 = (_QWORD *)result[20];
      if (v2)
      {
        String = rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>::GetString(v2);
        v4 = *(_QWORD *)(v1[20] + 24) - *(_QWORD *)(v1[20] + 16);
        v5 = (int *)(v1 + 2);
        v6 = (void **)(v1 + 1);
        if (String)
        {
          v7 = (char *)String;
          while (1)
          {
            v8 = *v5;
            if (v4 <= v8)
              break;
            if ((int)v8 >= 1)
            {
              memcpy(*v6, v7, v8);
              v9 = *v5;
              v7 += v9;
              v4 -= v9;
              *v6 = 0;
              *v5 = 0;
            }
            v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(*(_QWORD *)*v1 + 16))(*v1, v1 + 1, v1 + 2);
            if ((v10 & 1) == 0)
              goto LABEL_10;
          }
          memcpy(*v6, v7, v4);
LABEL_14:
          *v6 = (char *)*v6 + v4;
          *v5 -= v4;
        }
        else
        {
          do
          {
            v16 = *v5;
            if (v4 <= v16)
            {
              bzero(*v6, v4);
              goto LABEL_14;
            }
            if ((int)v16 >= 1)
            {
              bzero(*v6, v16);
              v4 -= *v5;
              *v6 = 0;
              *v5 = 0;
            }
            v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(*(_QWORD *)*v1 + 16))(*v1, v1 + 1, v1 + 2);
          }
          while ((v10 & 1) != 0);
LABEL_10:
          if (v17 && (v18 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v17 + 40))();
        }
        v11 = v1[20];
        if (v11)
        {
          v12 = v1[3];
          rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(v1[20]);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v11);
        }
        v1[20] = 0;
        v13 = v1[21];
        if (v13)
        {
          v14 = v1[3];
          rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(v13 + 8);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v13);
        }
        v15 = v1[24];
        v1[21] = 0;
        if (v15)
        {
          if (v1[28])
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          v1[28] = 0;
          v1[25] = 0;
          v1[26] = 0;
          v1[24] = 0;
          ++*((_DWORD *)v1 + 54);
        }
      }
    }
    if (!*((_BYTE *)v1 + 40))
    result = (_QWORD *)v1[12];
    if (result)
    {
      if (v1[16])
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
      v1[16] = 0;
      v1[13] = 0;
      v1[14] = 0;
      v1[12] = 0;
      ++*((_DWORD *)v1 + 30);
    }
    if (*((int *)v1 + 4) >= 1)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
      v1[1] = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
    *v1 = 0;
    v1[3] = 0;
    v1[4] = 0;
  }
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  _BYTE v21[23];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  re::DynamicString::setCapacity(&v32, 0);
  v31 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v32, a3, &a9);
  v12 = a1 + 24;
  if ((v20 & 1) != 0)
    v13 = *(_BYTE **)&v21[7];
  else
    v13 = v21;
  if ((v33 & 1) != 0)
    v14 = v34;
  else
    v14 = (char *)&v33 + 1;
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v22, "serialize", v13, v14);
  *(_QWORD *)&v26 = 400;
  *((_QWORD *)&v26 + 1) = &re::FoundationErrorCategory(void)::instance;
  v15 = v24;
  v29 = v24;
  v30 = v25;
  v16 = v22;
  v17 = v23;
  v27 = v22;
  v28 = v23;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v12, &v26);
  if (v16 && (v17 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v15);
  if (v19 && (v20 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  result = (uint64_t)v32;
  if (v32)
  {
    if ((v33 & 1) != 0)
      return (*(uint64_t (**)(void))(*v32 + 40))();
  }
  return result;
}

uint64_t re::serializeType<re::EncoderRapidJSON<`anonymous namespace'::LegacyOutputStreamAdaptor,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, char *__s, const re::TypeInfo *a3, unsigned __int8 *a4, re *this, re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  const re::TypeInfo *v30;
  uint64_t *v31;
  int v32;
  BOOL (*v33)(uint64_t, char *, const re::TypeInfo *, uint64_t, re *, re::TypeInfo *, int);
  _anonymous_namespace_ *v34;
  uint64_t *v35;
  const re::TypeInfo *v36;
  uint64_t v37;
  char *v38;
  re *v39;
  re::TypeInfo *v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int32 v45;
  const char *v46;
  uint64_t *v47;
  unsigned __int8 *v48;
  const re::TypeInfo *v49;
  re *v50;
  re::TypeInfo *v51;
  uint64_t v52;
  re::UnionAccessor *v53;
  unint64_t Tag;
  char *v55;
  re::TypeRegistry *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  _anonymous_namespace_ *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  re::internal *v79;
  uint64_t v80;
  void (*v81)(uint64_t, _QWORD, _QWORD, _QWORD, __n128 *, __n128 *, uint64_t);
  uint64_t v82;
  int v83;
  rapidjson::internal *v84;
  int v85;
  uint64_t v86;
  void (*v87)(uint64_t, _QWORD, _QWORD, uint64_t, __n128 *, rapidjson::internal **, _QWORD);
  uint64_t v88;
  int v89;
  int v90;
  _anonymous_namespace_ *v91;
  BOOL v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  re::internal *v96;
  _BOOL4 v97;
  _anonymous_namespace_ *v98;
  uint64_t v99;
  void (*v100)(uint64_t, _QWORD, _QWORD, uint64_t, rapidjson::internal **, _BYTE *, _QWORD);
  uint64_t v101;
  _BOOL4 v102;
  uint64_t i;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  char *v112;
  const re::TypeInfo *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  _anonymous_namespace_ *v119;
  unsigned int EnumConstantIndex;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  char v126;
  uint64_t v127;
  re::internal::TypeTranslationTable *v128;
  const char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(unsigned __int8 *, _QWORD);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  re::internal *v142;
  re::internal *v143;
  _anonymous_namespace_ *v144;
  __n128 *p_dst;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, const char *, _QWORD, uint64_t, _QWORD *, uint64_t *, _QWORD);
  uint64_t v153;
  void (*v154)(uint64_t, const char *, _QWORD, uint64_t, uint64_t *, _BYTE *, _QWORD);
  unint64_t v155;
  _QWORD *v156;
  uint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __n128 v164;
  uint64_t v165;
  unint64_t v166;
  double v167;
  unint64_t v168;
  void (*v169)(void);
  uint64_t v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  rapidjson::internal *v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  char *v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  _BYTE v184[16];
  uint64_t v185;
  _BYTE v186[32];
  uint64_t v187[4];
  uint64_t v188;
  uint64_t v189[4];
  _QWORD v190[4];
  _BYTE v191[18];
  __int16 v192;
  unint64_t v193;
  __int16 v194;
  unint64_t v195;
  __n128 __dst;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  if (this == a6)
    goto LABEL_18;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)this + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_18;
    }
LABEL_10:
    if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12))
      goto LABEL_291;
    v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
    if (v19)
      v20 = *(_DWORD *)(v19 + 16);
    else
      v20 = -1;
    v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **((_QWORD **)a6 + 2));
    if (v21)
      v22 = *(_DWORD *)(v21 + 16);
    else
      v22 = -1;
    if (v20 != v22)
    {
      v26 = re::TypeInfo::name(this)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
      re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **((_QWORD **)a6 + 2));
      LOBYTE(v174) = v26;
      v46 = "Cannot serialize type \"%s\" version %u as version %u. Downgrading versions is not supported.";
LABEL_70:
      return 0;
    }
    goto LABEL_18;
  }
  if (!re::areSameTranslatedVersion(this, a6, a3))
    goto LABEL_10;
LABEL_18:
  switch(*((_BYTE *)this + 12))
  {
    case 1:
      if (this == a6)
        goto LABEL_22;
      if (*(_QWORD *)this != *(_QWORD *)a6)
      {
        if (!re::areSameTranslatedVersion(this, a6, a3))
          goto LABEL_291;
LABEL_22:
        v23 = re::TypeInfo::name(this);
        v24 = (unint64_t)*v23 >> 1;
        if (v24 <= 0xCA3DEFB5)
        {
          if ((unint64_t)*v23 >> 1 <= 0x5D0225B)
          {
            if ((unint64_t)*v23 >> 1 <= 0x2E9355)
            {
              if (v24 != 104431)
              {
                if (v24 == 3029738)
LABEL_262:
                v174 = re::TypeInfo::name(this)[1];
                v46 = "Unsupported basic type \"%s\".";
                goto LABEL_70;
              }
            }
            if (v24 == 3052374)
            v127 = 3327612;
LABEL_219:
            if (v24 == v127)
            goto LABEL_262;
          }
          if ((unint64_t)*v23 >> 1 > 0xB0F77BD0)
          {
            if (v24 == 2969009105)
            if (v24 == 3111160798)
            goto LABEL_262;
          }
          if (v24 == 97526364)
          v52 = 109413500;
LABEL_175:
          if (v24 == v52)
          goto LABEL_262;
        }
        if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
        {
          if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
          {
            if (v24 == 0x18E6A9A093)
            if (v24 == 0x303EE86A734)
            goto LABEL_262;
          }
          if (v24 == 0x303EE8780EELL)
          if (v24 != 0x303EE88E58DLL)
            goto LABEL_262;
        }
        else
        {
          if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
          {
            if (v24 == 0x16749DFF03)
            v127 = 0x16749F63A2;
            goto LABEL_219;
          }
          if (v24 != 3393056694)
          {
            v52 = 0x16749D2549;
            goto LABEL_175;
          }
        }
      }
      v57 = **((_QWORD **)this + 2);
      v58 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v57 == (unsigned __int16)v58)
      {
        v18 = WORD1(v57) == WORD1(v58);
        v59 = (v58 ^ v57) & 0xFFFFFF00000000;
        if (v18 && v59 == 0)
          goto LABEL_22;
      }
      goto LABEL_291;
    case 2:
      if (this == a6)
        goto LABEL_187;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v61 = **((_QWORD **)this + 2);
        v62 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v61 == (unsigned __int16)v62
          && WORD1(v61) == WORD1(v62)
          && ((v62 ^ v61) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_104;
        }
        v27 = 2;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
        {
LABEL_104:
          if (*(_QWORD *)this == *(_QWORD *)a6)
          {
            v115 = **((_QWORD **)this + 2);
            v116 = **((_QWORD **)a6 + 2);
            if ((unsigned __int16)v115 == (unsigned __int16)v116
              && ((v18 = WORD1(v115) == WORD1(v116), v117 = (v116 ^ v115) & 0xFFFFFF00000000, v18)
                ? (v118 = v117 == 0)
                : (v118 = 0),
                  v118))
            {
LABEL_187:
              v65 = 1;
            }
            else
            {
              v65 = 0;
            }
          }
          else
          {
            v65 = re::areSameTranslatedVersion(this, a6, a3);
          }
          if ((_DWORD)a7)
          {
            __dst.n128_u64[0] = 0;
            if (!(_DWORD)result)
              return result;
            v119 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_191:
            return *(_BYTE *)(a1 + 64) == 0;
          }
          if (*(_DWORD *)(*((_QWORD *)this + 2) + 8) >= 9u)
          {
            v174 = re::TypeInfo::name(this)[1];
            v46 = "Enum type \"%s\" has invalid size: %zu bytes";
            goto LABEL_70;
          }
          EnumConstantIndex = re::internal::getEnumConstantIndex(this, (const re::TypeInfo *)a4, a3);
          if ((EnumConstantIndex & 0x80000000) != 0)
          {
            __dst.n128_u64[0] = 0;
            memcpy(&__dst, a4, *(unsigned int *)(*((_QWORD *)this + 2) + 8));
            LOBYTE(v174) = __dst.n128_u8[0];
            re::TypeInfo::name(this);
            v46 = "Value %zu is not a valid enum constant of \"%s\".";
            goto LABEL_70;
          }
          v121 = EnumConstantIndex;
          if (!v65)
          {
            v128 = *(re::internal::TypeTranslationTable **)(*(_QWORD *)a6 + 856);
            if (v128)
            {
              v124 = re::internal::TypeTranslationTable::translateRuntimeEnum(v128, this, v121, a6);
              if (v124)
              {
LABEL_233:
                v129 = *(const char **)(v124 + 16);
                __dst.n128_u64[0] = strlen(v129);
                v119 = (_anonymous_namespace_ *)(a1 + 24);
                goto LABEL_191;
              }
            }
            v137 = re::TypeInfo::enumConstants(this);
            v139 = v121;
            if (v138 > v121)
            {
              v174 = *(_QWORD *)(v137 + 24 * v121 + 16);
              re::TypeInfo::name(a6);
              v46 = "Runtime enum constant \"%s\" does not exist in serialized type \"%s\".";
              goto LABEL_70;
            }
LABEL_325:
            re::internal::assertLog((re::internal *)6, v138, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v139, v138);
            _os_crash();
            __break(1u);
          }
          result = re::TypeInfo::enumConstants(this);
          v123 = v121;
          if (v122 > v121)
          {
            if (!result)
              return result;
            v124 = result + 24 * v121;
            goto LABEL_233;
          }
LABEL_324:
          re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v123, v122);
          _os_crash();
          __break(1u);
          goto LABEL_325;
        }
        v27 = *((unsigned __int8 *)this + 12);
      }
      if (v27 == *((unsigned __int8 *)a6 + 12))
      {
        v63 = re::TypeInfo::name(this);
        v64 = re::TypeInfo::name(a6);
        if (re::StringID::operator==(v63, v64))
          goto LABEL_104;
      }
      goto LABEL_291;
    case 3:
      if (this == a6)
        goto LABEL_111;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v66 = **((_QWORD **)this + 2);
        v67 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v66 == (unsigned __int16)v67
          && WORD1(v66) == WORD1(v67)
          && ((v67 ^ v66) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_111;
        }
        v28 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
          goto LABEL_111;
        v28 = *((unsigned __int8 *)this + 12);
      }
      if (v28 != *((unsigned __int8 *)a6 + 12))
        goto LABEL_291;
LABEL_111:
      if ((_DWORD)a7)
      {
        __dst.n128_u8[0] = 0;
        v68 = (_anonymous_namespace_ *)(a1 + 24);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v176, (uint64_t)&__dst.n128_i64[1]);
        re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v191, (uint64_t)&__dst.n128_i64[1]);
        re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        v69 = (*(uint64_t (**)(unsigned __int8 *))(v197 + 80))(a4);
        LOBYTE(v190[0]) = v69 != 0;
        if (v69)
        {
          v71 = (*(uint64_t (**)(unsigned __int8 *, double))(v197 + 80))(a4, v70);
          if (!*(_BYTE *)(a1 + 64))
            (*(void (**)(uint64_t, char *, _QWORD, uint64_t, rapidjson::internal **, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, __s, 0, v71, &v176, v191, 0);
        }
        v68 = (_anonymous_namespace_ *)(a1 + 24);
      }
      return *(_BYTE *)(a1 + 64) == 0;
    case 4:
      if (this == a6)
        goto LABEL_126;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v72 = **((_QWORD **)this + 2);
        v73 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v72 == (unsigned __int16)v73)
        {
          v18 = WORD1(v72) == WORD1(v73);
          v74 = (v73 ^ v72) & 0xFFFFFF00000000;
          if (v18 && v74 == 0)
            goto LABEL_126;
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_126;
      }
      if (*((_BYTE *)a6 + 12) != 4)
        goto LABEL_291;
      v76 = *((_QWORD *)this + 2);
      v77 = *((_QWORD *)a6 + 2);
      v78 = *(_DWORD *)(v77 + 84) & 0xFFFFFF;
      if ((*(_DWORD *)(v76 + 84) & 0xFFFFFF) == 0)
      {
        if (!v78 && *(_DWORD *)(v76 + 88) == *(_DWORD *)(v77 + 88))
          goto LABEL_126;
LABEL_291:
        return 0;
      }
      if (!v78)
        goto LABEL_291;
LABEL_126:
      if ((_DWORD)a7)
      {
        v79 = *(re::internal **)(a1 + 272);
        re::TypeInfo::referencedType(a6, (uint64_t)&v176);
        re::internal::translateType(v79, (const re::TypeRegistry *)&v176, (uint64_t)&__dst);
        v80 = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)a1 + 80))(a1, &__dst);
        if (!v80)
          goto LABEL_295;
        v81 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128 *, __n128 *, uint64_t))v80;
        v82 = *((_QWORD *)a6 + 2);
        v83 = *(_DWORD *)(v82 + 84) & 0xFFFFFF;
        if (v83)
        {
          v84 = 0;
          v85 = 8;
        }
        else
        {
          v84 = (rapidjson::internal *)*(int *)(v82 + 88);
          v85 = 4;
        }
        v176 = v84;
        v91 = (_anonymous_namespace_ *)(a1 + 24);
        if ((_DWORD)result)
        {
          if (v83)
            v125 = v84 == 0;
          else
            v125 = 1;
          v126 = v125;
          if (v125)
          {
            if (!v84)
              goto LABEL_242;
          }
          else
          {
            v190[0] = 0;
            v190[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a1 + 16))(a1, 0, v190);
          }
          do
          {
            v81(a1, 0, 0, 0, &__dst, &__dst, 1);
            v84 = (rapidjson::internal *)((char *)v84 - 1);
          }
          while (v84);
          if ((v126 & 1) == 0)
            goto LABEL_241;
          goto LABEL_242;
        }
      }
      else
      {
        re::TypeInfo::referencedType(this, (uint64_t)&__dst);
        re::TypeInfo::referencedType(a6, (uint64_t)&v176);
        re::TypeInfo::TypeInfo((uint64_t)v191, (uint64_t)this);
        v86 = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)a1 + 80))(a1, &__dst);
        if (!v86)
          goto LABEL_295;
        v87 = (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, __n128 *, rapidjson::internal **, _QWORD))v86;
        v88 = re::ArrayAccessor::size((re::ArrayAccessor *)v191, (char *)a4);
        v187[0] = v88;
        v89 = *(_DWORD *)(*((_QWORD *)this + 2) + 84) & 0xFFFFFF;
        if (v89)
          v90 = 8;
        else
          v90 = 4;
        v91 = (_anonymous_namespace_ *)(a1 + 24);
        if ((_DWORD)result)
        {
          if (v89)
            v92 = v88 == 0;
          else
            v92 = 1;
          v93 = v92;
          if (v92)
          {
            if (!v88)
              goto LABEL_242;
          }
          else
          {
            v130 = *(_QWORD *)a4;
            v189[0] = 0;
            v189[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, v130, v189);
          }
          v131 = 0;
          do
          {
            v132 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)v191, (char *)a4, v131);
            v87(a1, 0, 0, v132, &__dst, &v176, 0);
            ++v131;
          }
          while (v88 != v131);
          if ((v93 & 1) == 0)
LABEL_241:
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
LABEL_242:
          v98 = v91;
LABEL_243:
          return *(_BYTE *)(a1 + 64) == 0;
        }
      }
      return result;
    case 5:
      if (this == a6)
        goto LABEL_150;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v94 = **((_QWORD **)this + 2);
        v95 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v94 == (unsigned __int16)v95
          && WORD1(v94) == WORD1(v95)
          && ((v95 ^ v94) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_150;
        }
        v29 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3))
          goto LABEL_150;
        v29 = *((unsigned __int8 *)this + 12);
      }
      if (v29 != *((unsigned __int8 *)a6 + 12))
        goto LABEL_291;
LABEL_150:
      if ((_DWORD)a7)
      {
        v96 = *(re::internal **)(a1 + 272);
        re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &__dst);
        re::TypeInfo::TypeInfo((uint64_t)v191, (uint64_t)&__dst.n128_i64[1]);
        re::internal::translateType(v96, (const re::TypeRegistry *)v191, (uint64_t)&v176);
        if (!(*(uint64_t (**)(uint64_t, rapidjson::internal **))(*(_QWORD *)a1 + 80))(a1, &v176))
          goto LABEL_294;
        __dst.n128_u64[0] = 0;
        result = 0;
        if (v97)
        {
          v98 = (_anonymous_namespace_ *)(a1 + 24);
          goto LABEL_243;
        }
        return result;
      }
      re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v176, (uint64_t)&__dst.n128_i64[1]);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)v191, (uint64_t)&__dst.n128_i64[1]);
      re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
      v99 = (*(uint64_t (**)(uint64_t, rapidjson::internal **))(*(_QWORD *)a1 + 80))(a1, &v176);
      if (!v99)
        goto LABEL_294;
      v100 = (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, rapidjson::internal **, _BYTE *, _QWORD))v99;
      v101 = (*(uint64_t (**)(unsigned __int8 *))(v197 + 80))(a4);
      v189[0] = v101;
      v91 = (_anonymous_namespace_ *)(a1 + 24);
      result = 0;
      if (!v102)
        return result;
      if (*(_QWORD *)(v197 + 96))
      {
        if (v101)
        {
          for (i = 0; i != v101; ++i)
          {
            v104 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v197 + 96))(a4, i);
            v100(a1, 0, 0, v104, &v176, v191, 0);
          }
        }
      }
      else
      {
        v133 = *(uint64_t (**)(unsigned __int8 *, _QWORD))(v197 + 104);
        if (!v133 || !*(_QWORD *)(v197 + 112) || !*(_QWORD *)(v197 + 120))
        {
          re::TypeInfo::TypeInfo((uint64_t)v190, (uint64_t)&__dst);
          v174 = re::TypeInfo::name((re::TypeInfo *)v190)[1];
          v46 = "List type \"%s\" does not provide an indexer or iterator.";
          goto LABEL_70;
        }
        v134 = v133(a4, *(_QWORD *)(a1 + 56));
        v135 = (*(uint64_t (**)(void))(v197 + 112))();
        if (v135)
        {
          v136 = v135;
          do
          {
            v100(a1, 0, 0, v136, &v176, v191, 0);
            v136 = (*(uint64_t (**)(uint64_t))(v197 + 112))(v134);
          }
          while (v136);
        }
        (*(void (**)(uint64_t, _QWORD))(v197 + 120))(v134, *(_QWORD *)(a1 + 56));
      }
      goto LABEL_242;
    case 6:
      re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), &__dst);
      re::TypeInfo::TypeInfo((uint64_t)&v176, (uint64_t)&__dst.n128_i64[1]);
      v31 = re::TypeInfo::name((re::TypeInfo *)&v176);
      v32 = BYTE4(v177);
      if (BYTE4(v177) != 1)
        goto LABEL_83;
      if (re::TypeInfo::isInteger((re::TypeInfo *)&v176))
      {
        __dst.n128_u64[0] = 0x303EE88E58DLL;
        __dst.n128_u64[1] = (unint64_t)"uint64_t";
        if (re::StringID::operator==(v31, &__dst)
          || (*(_QWORD *)v191 = 3393056694, *(_QWORD *)&v191[8] = "size_t", re::StringID::operator==(v31, v191)))
        {
LABEL_272:
          v111 = a1;
          v112 = __s;
          v113 = a3;
          v114 = a4;
          v50 = this;
          v51 = a6;
          return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v33)(v111, v112, v113, v114, v50, v51, a7);
        }
        __dst.n128_u64[0] = 0x303EE8780EELL;
        __dst.n128_u64[1] = (unint64_t)"uint32_t";
        if (re::StringID::operator==(v31, &__dst))
        {
          goto LABEL_272;
        }
        __dst.n128_u64[0] = 0x303EE86A734;
        __dst.n128_u64[1] = (unint64_t)"uint16_t";
        if (re::StringID::operator==(v31, &__dst))
        {
          goto LABEL_272;
        }
        __dst.n128_u64[0] = 0x18E6A9A093;
        __dst.n128_u64[1] = (unint64_t)"uint8_t";
        if (re::StringID::operator==(v31, &__dst))
        {
          goto LABEL_272;
        }
        __dst.n128_u64[0] = 0x16749F63A2;
        __dst.n128_u64[1] = (unint64_t)"int64_t";
        if (re::StringID::operator==(v31, &__dst)
          || (*(_QWORD *)v191 = 3327612, *(_QWORD *)&v191[8] = "long", re::StringID::operator==(v31, v191)))
        {
          goto LABEL_272;
        }
        __dst.n128_u64[0] = 104431;
        __dst.n128_u64[1] = (unint64_t)"int";
        if (re::StringID::operator==(v31, &__dst))
        {
          goto LABEL_272;
        }
        __dst.n128_u64[0] = 109413500;
        __dst.n128_u64[1] = (unint64_t)"short";
        if (re::StringID::operator==(v31, &__dst))
        {
          goto LABEL_272;
        }
      }
      else
      {
        v32 = BYTE4(v177);
LABEL_83:
        if (v32 == 8)
        {
          if ((unint64_t)*v31 >> 1 == 0x134375A94D9F7110)
          {
            v55 = (char *)v31[1];
            if (v55 == "DynamicString" || !strcmp(v55, "DynamicString"))
            {
              goto LABEL_272;
            }
          }
          __dst.n128_u64[0] = 0x22C6ED80D0CLL;
          __dst.n128_u64[1] = (unint64_t)"StringID";
          if (re::StringID::operator==(v31, &__dst))
          {
            goto LABEL_272;
          }
        }
      }
      if (this == a6)
        goto LABEL_286;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v140 = **((_QWORD **)this + 2);
        v141 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v140 == (unsigned __int16)v141
          && WORD1(v140) == WORD1(v141)
          && ((v141 ^ v140) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_286;
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, v30))
      {
        goto LABEL_286;
      }
      if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12))
        goto LABEL_291;
LABEL_286:
      if ((_DWORD)a7)
      {
        v142 = *(re::internal **)(a1 + 272);
        re::TypeInfo::referencedType(a6, (uint64_t)&v176);
        re::internal::translateType(v142, (const re::TypeRegistry *)&v176, (uint64_t)&__dst);
        v143 = *(re::internal **)(a1 + 272);
        re::TypeInfo::dictionaryValueType(a6, (uint64_t)v191);
        re::internal::translateType(v143, (const re::TypeRegistry *)v191, (uint64_t)&v176);
        if ((*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)a1 + 80))(a1, &__dst))
        {
          if ((*(uint64_t (**)(uint64_t, rapidjson::internal **))(*(_QWORD *)a1 + 80))(a1, &v176))
          {
            *(_QWORD *)v191 = 0;
            if (!(_DWORD)result)
              return result;
            v144 = (_anonymous_namespace_ *)(a1 + 24);
            goto LABEL_321;
          }
LABEL_294:
          p_dst = (__n128 *)&v176;
        }
        else
        {
LABEL_295:
          p_dst = &__dst;
        }
      }
      else
      {
        re::TypeInfo::referencedType(this, (uint64_t)v190);
        re::TypeInfo::dictionaryValueType(this, (uint64_t)v189);
        re::TypeInfo::referencedType(a6, (uint64_t)v187);
        re::TypeInfo::dictionaryValueType(a6, (uint64_t)v186);
        re::TypeInfo::TypeInfo((uint64_t)v184, (uint64_t)this);
        v151 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 80))(a1, v190);
        if (v151)
        {
          v152 = (void (*)(uint64_t, const char *, _QWORD, uint64_t, _QWORD *, uint64_t *, _QWORD))v151;
          v153 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, v189);
          if (v153)
          {
            v154 = (void (*)(uint64_t, const char *, _QWORD, uint64_t, uint64_t *, _BYTE *, _QWORD))v153;
            v155 = (*(uint64_t (**)(unsigned __int8 *))(v185 + 88))(a4);
            v183 = v155;
            if (!(_DWORD)result)
              return result;
            if (!v155)
              goto LABEL_320;
            v156 = *(_QWORD **)this;
            __dst.n128_u64[0] = 0x449AD97C4B77BED4;
            __dst.n128_u64[1] = (unint64_t)"_CompareFunc";
            v157 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v156 + 25), &__dst);
            if (v157)
            {
              v182 = *v157;
            }
            else
            {
              v156 = 0;
              v182 = 0xFFFFFFFFLL;
            }
            v181 = v156;
            re::StringID::destroyString((re::StringID *)&__dst);
            v158 = *(_QWORD *)v190[2];
            __dst.n128_u64[0] = v190[0];
            __dst.n128_u64[1] = v158;
            LODWORD(v197) = -1;
            v159 = re::TypeAttributeCollection::operator[]((uint64_t *)&__dst, &v181);
            if (v159)
            {
              v160 = (uint64_t (*)(uint64_t, uint64_t))v159;
              v180 = 0;
              v177 = 0;
              v178 = 0;
              v179 = 0;
              v176 = *(rapidjson::internal **)(a1 + 56);
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v176, v155);
              ++v179;
              v161 = (*(uint64_t (**)(unsigned __int8 *, _QWORD))(v185 + 112))(a4, *(_QWORD *)(a1 + 56));
              if ((*(unsigned int (**)(void))(v185 + 120))())
              {
                do
                {
                  v162 = (*(uint64_t (**)(uint64_t))(v185 + 128))(v161);
                  v163 = (*(uint64_t (**)(uint64_t))(v185 + 136))(v161);
                  __dst.n128_u64[0] = v162;
                  __dst.n128_u64[1] = v163;
                  v164 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v176, &__dst);
                }
                while (((*(uint64_t (**)(uint64_t, __n128))(v185 + 120))(v161, v164) & 1) != 0);
              }
              (*(void (**)(uint64_t, _QWORD))(v185 + 144))(v161, *(_QWORD *)(a1 + 56));
              v165 = 0;
              v166 = 0;
              while (1)
              {
                v168 = v178;
                if (v178 <= v166)
                  break;
                ((void (*)(uint64_t, const char *, _QWORD, _QWORD, _QWORD *, uint64_t *, _QWORD, double))v152)(a1, "key", 0, *(_QWORD *)&v180[v165], v190, v187, 0, v167);
                v168 = v178;
                if (v178 <= v166)
                  goto LABEL_323;
                v154(a1, "value", 0, *(_QWORD *)&v180[v165 + 8], v189, v186, 0);
                ++v166;
                v165 += 16;
                if (v155 == v166)
                {
                  if (v176 && v180)
                  {
                    v169 = *(void (**)(void))(*(_QWORD *)v176 + 40);
                    goto LABEL_319;
                  }
                  goto LABEL_320;
                }
              }
              v188 = 0;
              v199 = 0u;
              v200 = 0u;
              v197 = 0u;
              v198 = 0u;
              __dst = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v191 = 136315906;
              *(_QWORD *)&v191[4] = "operator[]";
              *(_WORD *)&v191[12] = 1024;
              *(_DWORD *)&v191[14] = 789;
              v192 = 2048;
              v193 = v166;
              v194 = 2048;
              v195 = v168;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_323:
              v188 = 0;
              v199 = 0u;
              v200 = 0u;
              v197 = 0u;
              v198 = 0u;
              __dst = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v191 = 136315906;
              *(_QWORD *)&v191[4] = "operator[]";
              *(_WORD *)&v191[12] = 1024;
              *(_DWORD *)&v191[14] = 789;
              v192 = 2048;
              v193 = v166;
              v194 = 2048;
              v195 = v168;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_324;
            }
            v170 = (*(uint64_t (**)(unsigned __int8 *, _QWORD))(v185 + 112))(a4, *(_QWORD *)(a1 + 56));
            (*(void (**)(void))(v185 + 120))();
            do
            {
              v172 = (*(uint64_t (**)(uint64_t, double))(v185 + 128))(v170, v171);
              v152(a1, "key", 0, v172, v190, v187, 0);
              v173 = (*(uint64_t (**)(uint64_t))(v185 + 136))(v170);
              v154(a1, "value", 0, v173, v189, v186, 0);
              (*(void (**)(uint64_t))(v185 + 120))(v170);
              --v155;
            }
            while (v155);
            v169 = *(void (**)(void))(v185 + 144);
LABEL_319:
            v169();
LABEL_320:
            v144 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_321:
            return *(_BYTE *)(a1 + 64) == 0;
          }
          p_dst = (__n128 *)v189;
        }
        else
        {
          p_dst = (__n128 *)v190;
        }
      }
      v175 = re::TypeInfo::name((re::TypeInfo *)p_dst)[1];
      return 0;
    case 7:
      if (this == a6)
        goto LABEL_54;
      if (*(_QWORD *)this == *(_QWORD *)a6)
      {
        v105 = **((_QWORD **)this + 2);
        v106 = **((_QWORD **)a6 + 2);
        if ((unsigned __int16)v105 != (unsigned __int16)v106)
          goto LABEL_291;
        v18 = WORD1(v105) == WORD1(v106);
        v107 = (v106 ^ v105) & 0xFFFFFF00000000;
        if (!v18 || v107 != 0)
          goto LABEL_291;
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_291;
      }
LABEL_54:
      v34 = (_anonymous_namespace_ *)(a1 + 24);
      if ((_DWORD)a7)
      {
        if (!(_DWORD)result)
          return result;
        v176 = 0;
        if (*(_DWORD *)(*((_QWORD *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, 0, (uint64_t)&__dst);
          if (!*(_BYTE *)(a1 + 64))
            (*(void (**)(uint64_t, const char *, _QWORD, _QWORD, __n128 *, __n128 *, uint64_t))(*(_QWORD *)a1 + 72))(a1, "value", 0, 0, &__dst, &__dst, 1);
        }
      }
      else
      {
        if (!(_DWORD)result)
          return result;
        v53 = (re::UnionAccessor *)re::TypeInfo::TypeInfo((uint64_t)&__dst, (uint64_t)this);
        Tag = re::UnionAccessor::readTag(v53, (char *)a4);
        *(_QWORD *)v191 = Tag;
        if (Tag < *(unsigned int *)(*((_QWORD *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, Tag, (uint64_t)&v176);
          if (!*(_BYTE *)(a1 + 64))
            (*(void (**)(uint64_t, const char *, _QWORD, unsigned __int8 *, rapidjson::internal **, rapidjson::internal **, _QWORD))(*(_QWORD *)a1 + 72))(a1, "value", 0, a4, &v176, &v176, 0);
        }
      }
      goto LABEL_254;
    case 8:
      if (!(_DWORD)a7)
        goto LABEL_64;
      if ((*(_BYTE *)(*((_QWORD *)this + 2) + 49) & 1) != 0)
      {
        v56 = *(re::TypeRegistry **)(a1 + 272);
        *(_QWORD *)v191 = 0x2686EB529B3EE220;
        *(_QWORD *)&v191[8] = "DynamicString";
        re::TypeRegistry::typeInfo(v56, (const re::StringID *)v191, &__dst);
        re::TypeInfo::TypeInfo((uint64_t)&v176, (uint64_t)&__dst.n128_i64[1]);
        re::StringID::destroyString((re::StringID *)v191);
        v39 = (re *)&v176;
        v40 = (re::TypeInfo *)&v176;
        v37 = a1;
        v38 = __s;
      }
      else
      {
        v35 = re::TypeInfo::name(this);
        __dst.n128_u64[0] = 0x134375A94D9F7110;
        __dst.n128_u64[1] = (unint64_t)"DynamicString";
        if (!re::StringID::operator==(v35, &__dst))
        {
LABEL_64:
          v41 = *((_QWORD *)this + 2);
          if ((*(_BYTE *)(v41 + 48) & 4) == 0)
          {
            v34 = (_anonymous_namespace_ *)(a1 + 24);
            result = 0;
            if (!v42)
              return result;
            v43 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
            if (!v43 || *(_DWORD *)(v43 + 16) >= 2u)
            {
              v44 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
              if (v44)
                v45 = *(_DWORD *)(v44 + 16);
              else
                v45 = -1;
              __dst.n128_u32[0] = v45;
            }
LABEL_254:
            return *(_BYTE *)(a1 + 64) == 0;
          }
          v47 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&__dst, *(_QWORD *)this, v41);
          re::TypeMemberCollection::operator[](v47, 0, (uint64_t)&v176);
          v48 = &a4[*(unsigned int *)(v178 + 24)];
          re::TypeMemberInfo::memberType((re::TypeMemberInfo *)&v176, (uint64_t)v191);
          if (re::areSameVersion(this, a6, v49))
          {
            if (*(_BYTE *)(a1 + 64))
              return 0;
            v33 = *(BOOL (**)(uint64_t, char *, const re::TypeInfo *, uint64_t, re *, re::TypeInfo *, int))(*(_QWORD *)a1 + 72);
            v50 = (re *)v191;
            v51 = (re::TypeInfo *)v191;
          }
          else
          {
            v109 = *((_QWORD *)a6 + 2);
            if (*(_DWORD *)(v109 + 88) != 1)
              goto LABEL_291;
            v110 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&__dst, *(_QWORD *)a6, v109);
            re::TypeMemberCollection::operator[](v110, 0, (uint64_t)v189);
            re::TypeMemberInfo::memberType((re::TypeMemberInfo *)v189, (uint64_t)v190);
            if (*(_BYTE *)(a1 + 64))
              return 0;
            v33 = *(BOOL (**)(uint64_t, char *, const re::TypeInfo *, uint64_t, re *, re::TypeInfo *, int))(*(_QWORD *)a1 + 72);
            v50 = (re *)v191;
            v51 = (re::TypeInfo *)v190;
          }
          v111 = a1;
          v112 = __s;
          v113 = a3;
          v114 = v48;
          return ((uint64_t (*)(uint64_t, char *, const re::TypeInfo *, unsigned __int8 *, re *, re::TypeInfo *, uint64_t))v33)(v111, v112, v113, v114, v50, v51, a7);
        }
        v37 = a1;
        v38 = __s;
        v39 = this;
        v40 = this;
      }
      return *(_BYTE *)(a1 + 64) == 0;
    case 9:
      v174 = re::TypeInfo::name(this)[1];
      v46 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_70;
    default:
      LOBYTE(v174) = *((_BYTE *)this + 12);
      v46 = "Invalid type category. Value = %d";
      goto LABEL_70;
  }
}

