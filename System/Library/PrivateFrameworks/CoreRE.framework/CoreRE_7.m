void sub_22536DEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49)
{
  void *v49;
  re::AssetLoadDescriptor *v50;
  void *v51;

  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)&a9);
  if (a36 && (a37 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a36 + 40))();
  if (a45)
  {
    if ((a46 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a45 + 40))();
  }
  re::AssetLoadDescriptor::~AssetLoadDescriptor(v50);
  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)&a49);

  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetProvider::makeDescriptorWithURL@<X0>(_anonymous_namespace_ *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v6;
  re::AudioFileAsset *v7;
  const char *v8;
  size_t v9;
  __int128 v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  unsigned __int8 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  int v20;
  unsigned __int8 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;
  const char *v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  unsigned __int8 v36[8];
  uint64_t v37;
  char v38;
  uint64_t v39;
  unsigned __int8 v40;
  int v41;
  unsigned __int8 v42;
  char v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  unsigned __int8 v49[8];
  __int128 v50;
  __int128 v51;

  LOWORD(v34) = 0;
  BYTE2(v34) = 0;
  *(_QWORD *)((char *)&v34 + 4) = 0;
  v35 = xmmword_2260FDC00;
  v36[0] = 0;
  v40 = 0;
  v42 = 0;
  v43 = 0;
  v46 = 0;
  v49[0] = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_QWORD *)(a3 + 136) = 0;
  re::DynamicString::setCapacity((_QWORD *)(a3 + 112), 0);
  v31 = "AudioOptions";
  v32 = 12;
  v7 = re::DynamicString::operator=((re::DynamicString *)a3, (uint64_t)&v31);
  v8 = (const char *)*re::AudioFileAsset::assetType(v7);
  v9 = strlen(v8);
  v31 = v8;
  v32 = v9;
  re::DynamicString::operator=((re::DynamicString *)(a3 + 112), (uint64_t)&v31);
  LOBYTE(v31) = 1;
  re::DynamicString::DynamicString((re::DynamicString *)&v32, a1);
  re::Optional<re::DynamicString>::operator=(v49, &v31);
  if ((_BYTE)v31 && v32 && (v33 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v32 + 40))();
  v10 = *((_OWORD *)a2 + 1);
  v34 = *(_OWORD *)a2;
  v35 = v10;
  re::Optional<re::DynamicString>::operator=(v36, a2 + 32);
  v11 = v40;
  if (v40 || a2[72])
  {
    if (!v40 || a2[72])
    {
      if (!v40 && a2[72])
      {
        v11 = 1;
        v40 = 1;
      }
      v41 = *((_DWORD *)a2 + 19);
    }
    else
    {
      v11 = 0;
      v40 = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  v42 = a2[80];
  v15[0] = v34;
  v15[1] = v35;
  v16 = v36[0];
  if (v36[0])
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v37);
    v11 = v40;
  }
  v19 = v11;
  if (v11)
    v20 = v41;
  v21 = v42;
  v22 = v43;
  if (v43)
    re::DynamicString::DynamicString((re::DynamicString *)&v23, (const re::DynamicString *)&v44);
  v25 = v46;
  if (v46)
    re::DynamicString::DynamicString((re::DynamicString *)&v26, (const re::DynamicString *)&v47);
  v28 = v49[0];
  if (v49[0])
    re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)&v50);
  result = re::AssetLoadDescriptor::setIntrospectableData((char **)a3, (const re::IntrospectionBase *)re::AudioFileAssetProvider::s_loadDescriptorParametersIntrospect, (const re::IntrospectionBase **)v15, 0);
  if (v28)
  {
    result = v29;
    if ((_QWORD)v29)
    {
      if ((BYTE8(v29) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v29 + 40))(v29, v30, v13, v14);
      v29 = 0u;
      v30 = 0u;
    }
  }
  if (v25)
  {
    result = v26;
    if ((_QWORD)v26)
    {
      if ((BYTE8(v26) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v26 + 40))(v26, v27, v13, v14);
      v26 = 0u;
      v27 = 0u;
    }
  }
  if (v22)
  {
    result = v23;
    if ((_QWORD)v23)
    {
      if ((BYTE8(v23) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v23 + 40))(v23, v24, v13, v14);
      v23 = 0u;
      v24 = 0u;
    }
  }
  if (v16)
  {
    result = v17;
    if ((_QWORD)v17)
    {
      if ((BYTE8(v17) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v18, v13, v14);
      v17 = 0u;
      v18 = 0u;
    }
  }
  if (v49[0])
  {
    result = v50;
    if ((_QWORD)v50)
    {
      if ((BYTE8(v50) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v50 + 40))(v50, v51, v13, v14);
      v50 = 0u;
      v51 = 0u;
    }
  }
  if (v46)
  {
    result = v47;
    if ((_QWORD)v47)
    {
      if ((BYTE8(v47) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v47 + 40))(v47, v48, v13, v14);
      v47 = 0u;
      v48 = 0u;
    }
  }
  if (v43)
  {
    result = v44;
    if ((_QWORD)v44)
    {
      if ((BYTE8(v44) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v44 + 40))(v44, v45, v13, v14);
      v44 = 0u;
      v45 = 0u;
    }
  }
  if (v36[0])
  {
    result = v37;
    if (v37)
    {
      if ((v38 & 1) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 40))(v37, v39, v13, v14);
    }
  }
  return result;
}

void sub_22536E368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  re::AssetLoadDescriptor *v41;

  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)&a9);
  re::AssetLoadDescriptor::~AssetLoadDescriptor(v41);
  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)&a41);
  _Unwind_Resume(a1);
}

__n128 re::AudioFileAssetProvider::resolveChild@<Q0>(re::AudioFileAssetProvider *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  result = v9;
  v7 = v10;
  v8 = v11;
  *(_BYTE *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  return result;
}

void *re::AudioFileAssetProvider::getDescription(re::AudioFileAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  const char *v4;
  size_t v5;
  void *result;
  uint64_t v7;
  char v8;
  _OWORD v9[2];
  uint64_t *v10;
  int v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  _QWORD v19[4];
  char v20;
  _QWORD v21[4];
  char v22;
  _QWORD v23[4];

  LOWORD(v10) = 0;
  BYTE2(v10) = 0;
  HIDWORD(v10) = 0;
  v11 = 0;
  v12 = xmmword_2260FDC00;
  v13 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20 = 0;
  v22 = 0;
  if (re::AssetLoadDescriptor::getIntrospectableData<re::AudioLoadDescriptorParameters>(a2, &v10))
  {
    if (v22)
    {
      re::DynamicString::operator=(a3, (re::DynamicString *)v23);
    }
    else if (v18 && v20)
    {
      re::DynamicString::operator+((re::DynamicString *)v19, "/", (re::DynamicString *)&v7);
      re::DynamicString::operator+((re::DynamicString *)&v7, (uint64_t)v21, (re::DynamicString *)v9);
      re::DynamicString::operator=(a3, (re::DynamicString *)v9);
      if (*(_QWORD *)&v9[0])
      {
        if ((BYTE8(v9[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v9[0] + 40))();
        memset(v9, 0, sizeof(v9));
      }
      if (v7 && (v8 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v7 + 40))();
    }
    if ((_BYTE)v10)
      v4 = "streamedAsset";
    else
      v4 = "preloadAsset";
    if ((_BYTE)v10)
      v5 = 13;
    else
      v5 = 12;
    result = re::DynamicString::append(a3, v4, v5);
  }
  else
  {
    *(_QWORD *)&v9[0] = "mangled";
    *((_QWORD *)&v9[0] + 1) = 7;
    result = re::DynamicString::operator=(a3, (uint64_t)v9);
  }
  if (v22)
  {
    result = (void *)v23[0];
    if (v23[0])
    {
      if ((v23[1] & 1) != 0)
        result = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v23[0] + 40))();
      memset(v23, 0, sizeof(v23));
    }
  }
  if (v20)
  {
    result = (void *)v21[0];
    if (v21[0])
    {
      if ((v21[1] & 1) != 0)
        result = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v21[0] + 40))();
      memset(v21, 0, sizeof(v21));
    }
  }
  if (v18)
  {
    result = (void *)v19[0];
    if (v19[0])
    {
      if ((v19[1] & 1) != 0)
        result = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v19[0] + 40))();
      memset(v19, 0, sizeof(v19));
    }
  }
  if (v13)
  {
    result = (void *)v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        return (void *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  return result;
}

void sub_22536E618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)va);
  _Unwind_Resume(a1);
}

const char *re::AudioFileAssetProvider::schemeName(re::AudioFileAssetProvider *this)
{
  return "AudioOptions";
}

re::ecs2::ECSJSONSerializer *re::ecs2::ECSJSONSerializer::ECSJSONSerializer(re::ecs2::ECSJSONSerializer *this)
{
  uint64_t v2;
  StringID v4;

  *(_QWORD *)&v4.var0 = 0xE1F66B0F30BD1E9ELL;
  v4.var1 = "ECSJSONSerializer";
  v2 = re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::Serializer((uint64_t)this, &v4, 12);
  *(_QWORD *)v2 = &off_24ED37338;
  *(_WORD *)(v2 + 336) = 1;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_DWORD *)(v2 + 376) = 0;
  *(_QWORD *)(v2 + 380) = 0x7FFFFFFFLL;
  *(_QWORD *)(v2 + 400) = 0;
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  *(_DWORD *)(v2 + 416) = 0;
  *(_QWORD *)(v2 + 504) = 0;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_DWORD *)(v2 + 456) = 0;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_DWORD *)(v2 + 496) = 0;
  re::StringID::destroyString((re::StringID *)&v4);
  *(_QWORD *)this = &off_24ED39260;
  return this;
}

re::ecs2::ECSJSONDeserializer *re::ecs2::ECSJSONDeserializer::ECSJSONDeserializer(re::ecs2::ECSJSONDeserializer *this, AssetService *a2)
{
  uint64_t v4;
  re::DirectAssetDeserialize *v5;
  StringID v7;

  *(_QWORD *)&v7.var0 = 0x3373FC80C73C66A0;
  v7.var1 = "ECSJSONDeserializer";
  v4 = re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::Serializer((uint64_t)this, &v7, 12);
  *(_QWORD *)v4 = &off_24ED2E8A8;
  *(_WORD *)(v4 + 336) = 1;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_DWORD *)(v4 + 376) = 0;
  *(_QWORD *)(v4 + 380) = 0x7FFFFFFFLL;
  *(_QWORD *)(v4 + 400) = 0;
  *(_QWORD *)(v4 + 408) = 0;
  *(_QWORD *)(v4 + 392) = 0;
  *(_DWORD *)(v4 + 416) = 0;
  *(_QWORD *)(v4 + 504) = 0;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_DWORD *)(v4 + 456) = 0;
  *(_OWORD *)(v4 + 464) = 0u;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_DWORD *)(v4 + 496) = 0;
  re::StringID::destroyString((re::StringID *)&v7);
  *(_QWORD *)this = &off_24ED37290;
  v5 = re::DirectAssetDeserialize::DirectAssetDeserialize((re::ecs2::ECSJSONDeserializer *)((char *)this + 512), a2, 0);
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 77) = v5;
  *((_QWORD *)this + 33) = (char *)this + 616;
  return this;
}

_QWORD *re::ecs2::ECSOPACKDeserializer::ECSOPACKDeserializer(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  AssetService *v5;
  StringID v7;

  *(_QWORD *)&v7.var0 = 0x337AFDA7A6DC2A0CLL;
  v7.var1 = "ECSOPACKDeserializer";
  re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::SerializerV2((uint64_t)a1, &v7);
  re::StringID::destroyString((re::StringID *)&v7);
  *a1 = &off_24ED39330;
  a1[56] = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v5 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v4);
  re::DirectAssetDeserialize::DirectAssetDeserialize((re::DirectAssetDeserialize *)(a1 + 57), v5, 0);
  a1[72] = 0;
  a1[71] = 0;
  a1[56] = a2;
  a1[70] = a1 + 57;
  a1[25] = a1 + 70;
  return a1;
}

void re::ecs2::ECSJSONSerializer::~ECSJSONSerializer(re::ecs2::ECSJSONSerializer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED37338;
  v2 = *((_QWORD *)this + 59);
  if (v2)
  {
    if (*((_QWORD *)this + 63))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 63) = 0;
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 61) = 0;
    *((_QWORD *)this + 59) = 0;
    ++*((_DWORD *)this + 124);
  }
  v3 = *((_QWORD *)this + 54);
  if (v3)
  {
    if (*((_QWORD *)this + 58))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 58) = 0;
    *((_QWORD *)this + 55) = 0;
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 54) = 0;
    ++*((_DWORD *)this + 114);
  }
  v4 = *((_QWORD *)this + 49);
  if (v4)
  {
    if (*((_QWORD *)this + 53))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 49) = 0;
    ++*((_DWORD *)this + 104);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED37338;
  v2 = *((_QWORD *)this + 59);
  if (v2)
  {
    if (*((_QWORD *)this + 63))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 63) = 0;
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 61) = 0;
    *((_QWORD *)this + 59) = 0;
    ++*((_DWORD *)this + 124);
  }
  v3 = *((_QWORD *)this + 54);
  if (v3)
  {
    if (*((_QWORD *)this + 58))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 58) = 0;
    *((_QWORD *)this + 55) = 0;
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 54) = 0;
    ++*((_DWORD *)this + 114);
  }
  v4 = *((_QWORD *)this + 49);
  if (v4)
  {
    if (*((_QWORD *)this + 53))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 49) = 0;
    ++*((_DWORD *)this + 104);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ECSOPACKSerializer::~ECSOPACKSerializer(re::ecs2::ECSOPACKSerializer *this)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED2B1A0;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  v3 = *((_QWORD *)this + 45);
  if (v3)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  v5 = *((_QWORD *)this + 34);
  if (v5)
  {
    if (*((_QWORD *)this + 38))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 34) = 0;
    ++*((_DWORD *)this + 74);
  }
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(this);
}

{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED2B1A0;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  v3 = *((_QWORD *)this + 45);
  if (v3)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  v5 = *((_QWORD *)this + 34);
  if (v5)
  {
    if (*((_QWORD *)this + 38))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 34) = 0;
    ++*((_DWORD *)this + 74);
  }
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ECSOPACKDeserializer::~ECSOPACKDeserializer(re::ecs2::ECSOPACKDeserializer *this)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED39330;
  *((_QWORD *)this + 57) = &off_24ED2D0D0;
  re::Optional<re::AssetPath>::~Optional((uint64_t)this + 464);
  *(_QWORD *)this = &off_24ED2B398;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  v3 = *((_QWORD *)this + 45);
  if (v3)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  v5 = *((_QWORD *)this + 34);
  if (v5)
  {
    if (*((_QWORD *)this + 38))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 34) = 0;
    ++*((_DWORD *)this + 74);
  }
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer(this);
}

{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED39330;
  *((_QWORD *)this + 57) = &off_24ED2D0D0;
  re::Optional<re::AssetPath>::~Optional((uint64_t)this + 464);
  *(_QWORD *)this = &off_24ED2B398;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  v3 = *((_QWORD *)this + 45);
  if (v3)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  v5 = *((_QWORD *)this + 34);
  if (v5)
  {
    if (*((_QWORD *)this + 38))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 34) = 0;
    ++*((_DWORD *)this + 74);
  }
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::Serializer(uint64_t a1, const StringID *a2, int a3)
{
  *(_QWORD *)a1 = &off_24ED373A0;
  re::StringID::StringID((re::StringID *)(a1 + 8), a2);
  re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::Encoder(a1 + 24, a3);
  *(_QWORD *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 324) = 0x7FFFFFFFLL;
  return a1;
}

uint64_t re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::Encoder(uint64_t result, int a2)
{
  unsigned __int8 v2;
  const char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[4];
  int v8;

  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_DWORD *)(result + 136) = a2;
  *(_BYTE *)(result + 140) = 0;
  *(_QWORD *)(result + 152) = 1024;
  v2 = atomic_load((unsigned __int8 *)&qword_254100D20);
  if ((v2 & 1) == 0)
  {
    v6 = result;
    v4 = __cxa_guard_acquire(&qword_254100D20);
    result = v6;
    if (v4)
    {
      re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v3, (uint64_t)v7);
      if (v7[0])
        v5 = v8;
      else
        v5 = 0;
      _MergedGlobals_89 = v5;
      __cxa_guard_release(&qword_254100D20);
      result = v6;
    }
  }
  if (_MergedGlobals_89)
    *(_QWORD *)(result + 152) = _MergedGlobals_89;
  return result;
}

BOOL re::AssetCompatibility::sceneAssetNeedsCopyForWriting(re::AssetCompatibility *this, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  _BYTE v12[8];
  id v13;
  _QWORD v14[4];
  int v15;
  uint64_t v16[6];

  v16[5] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_5;
  }
  v5 = atomic_load((unsigned int *)(v4 + 704));
  if (v5 != 2)
  {
    v6 = *((_QWORD *)this + 1);
LABEL_5:
    re::AssetHandle::loadNow(v6, 0);
  }
  v7 = *((_QWORD *)this + 1);
  if (!v7 || (v8 = atomic_load((unsigned int *)(v7 + 704)), v8 != 2))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "assetHandle.isLoaded()", "sceneAssetNeedsCopyForWriting", 317);
    _os_crash();
    __break(1u);
  }
  re::AssetHandle::serializableAsset(this, v16);
  if (a2 >= 5)
  {
    if ((unint64_t)a2 >= 9)
    {
      if ((unint64_t)a2 >= 0xC)
        v9 = 0;
      else
        v9 = 3;
    }
    else
    {
      v9 = 2;
    }
  }
  else
  {
    v9 = 1;
  }
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 0x40000000;
  v14[2] = ___ZN2re18AssetCompatibility29sceneAssetNeedsCopyForWritingERKNS_11AssetHandleEx_block_invoke;
  v14[3] = &__block_descriptor_tmp_5;
  v15 = v9;
  v10 = v13;
  if (!v12[0])

  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v16);
  return v10 == 0;
}

uint64_t ___ZN2re18AssetCompatibility29sceneAssetNeedsCopyForWritingERKNS_11AssetHandleEx_block_invoke@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[5];

  v4 = result;
  if (a2[4])
  {
    v6 = a2[6];
    if (v6)
    {
      v7 = 24 * v6;
      v8 = (uint64_t *)(a2[8] + 8);
      do
      {
        result = *v8;
        if (*v8)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
          if ((result & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v8 + 48))(*v8);
            if ((result & 1) != 0)
              goto LABEL_18;
          }
        }
        v8 += 3;
        v7 -= 24;
      }
      while (v7);
    }
  }
  v9 = *(_DWORD *)(v4 + 32);
  if (v9)
  {
    v10 = a2[6];
    if (v10)
    {
      v11 = (uint64_t *)a2[8];
      v12 = 24 * v10;
      while (1)
      {
        v13 = *v11;
        v14 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)result);
        result = re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v14, v13);
        if (result)
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
          re::getDowngradeFunctions(v15, v9, (uint64_t)v18);
          v16 = v18[2];
          result = v18[0];
          if (v18[0] && v18[4])
            result = (*(uint64_t (**)(void))(*(_QWORD *)v18[0] + 40))();
          if (v16)
            break;
        }
        v11 += 3;
        v12 -= 24;
        if (!v12)
          goto LABEL_17;
      }
LABEL_18:
      v17 = 0;
      goto LABEL_19;
    }
  }
LABEL_17:
  v17 = 1;
LABEL_19:
  *a3 = 1;
  a3[8] = v17;
  return result;
}

void `anonymous namespace'::walkEntityAssetData(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  _BOOL4 v8;
  id v9;
  uint64_t v10;
  id v11;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 32);
    for (i = 112 * v4; i; i -= 112)
    {
      if ((_BYTE)v10)
      {
        if ((_BYTE)v11)
        {
          (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v6);
          if (*a3)
          {
            v8 = a3[8] == 0;
            goto LABEL_10;
          }
        }
        else
        {
          *a3 = v10;
          a3[8] = 0;
        }
      }
      else
      {
        *a3 = 0;
        v9 = v11;
        v11 = 0;
        *((_QWORD *)a3 + 1) = v9;
      }
      v8 = 1;
LABEL_10:
      if (!(_BYTE)v10)

      if (v8)
        return;
      v6 += 112;
    }
  }
  *a3 = 1;
  a3[8] = 1;
}

uint64_t *re::AssetCompatibility::sceneAssetCopyForWriting@<X0>(re::AssetCompatibility *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t *result;
  re::SceneAsset *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  char v28[8];
  id v29;
  _QWORD v30[4];
  int v31;
  uint64_t *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 1);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_5;
  }
  v7 = atomic_load((unsigned int *)(v6 + 704));
  if (v7 != 2)
  {
    v8 = *((_QWORD *)this + 1);
LABEL_5:
    re::AssetHandle::loadNow(v8, 0);
  }
  v9 = *((_QWORD *)this + 1);
  if (v9 && (v10 = atomic_load((unsigned int *)(v9 + 704)), v10 == 2))
  {
    re::AssetHandle::serializableAsset(this, &v32);
    v11 = (uint64_t)v32;
    v13 = re::globalAllocators(v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 40, 8);
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_QWORD *)(v14 + 32) = 0;
    if (a2 >= 5)
    {
      if ((unint64_t)a2 >= 9)
      {
        if ((unint64_t)a2 >= 0xC)
          v15 = 0;
        else
          v15 = 3;
      }
      else
      {
        v15 = 2;
      }
    }
    else
    {
      v15 = 1;
    }
    v30[0] = MEMORY[0x24BDAC760];
    v30[1] = 0x40000000;
    v30[2] = ___ZN2re18AssetCompatibility24sceneAssetCopyForWritingERKNS_11AssetHandleEx_block_invoke;
    v30[3] = &__block_descriptor_tmp_9;
    v31 = v15;
    if (v28[0])
    {
      v21 = *((_QWORD *)this + 1);
      if (v21)
        v22 = *(_QWORD *)(v21 + 24);
      else
        v22 = 0;
      v24 = re::SceneAsset::assetType(v20);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v22 + 416))(v27, v22, v14, v24, 0, 2, 0);
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v25, (const re::AssetHandle *)v27);
      *(_BYTE *)a3 = 1;
      *(_OWORD *)(a3 + 8) = v25;
      v25 = 0uLL;
      *(_QWORD *)(a3 + 24) = v26;
      v26 = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v25);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    else
    {
      v23 = v29;
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v23;
    }
    if (!v28[0])

    return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v32);
  }
  else
  {
    v16 = re::AssetHandle::assetInfo(this);
    if ((v16[17] & 1) != 0)
      v17 = (char *)v16[18];
    else
      v17 = (char *)v16 + 137;
    re::DynamicString::format((re::DynamicString *)"Failed to load '%s'.", (re::DynamicString *)&v32, v17);
    v18 = v27[0];
    v27[0] = 0;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v18;

    result = v32;
    if (v32 && (v33 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v32 + 40))();
  }
  return result;
}

void `anonymous namespace'::makeError(__CFString *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = v3 >> 1;
  if ((v3 & 1) == 0)
    v4 = v3 >> 1;
  if (v4)
  {
    if ((v3 & 1) != 0)
      v5 = *(_QWORD *)(a2 + 16);
    else
      v5 = a2 + 9;
    re::WrappedError::make((re::WrappedError *)CFSTR("REAssetCompatibilityErrorDomain"), a1, v5, a3);
  }
  else
  {
    re::WrappedError::make((re::WrappedError *)CFSTR("REAssetCompatibilityErrorDomain"), a1, 0, a3);
  }
}

void `anonymous namespace'::sceneAssetDeepCopy(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[112];

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = 112 * v3;
    do
    {
      re::DynamicArray<re::ecs2::EntityAssetData>::add(a3, (uint64_t)v8);
      re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)v8);
      v6 += 112;
      v7 -= 112;
    }
    while (v7);
  }
}

void ___ZN2re18AssetCompatibility24sceneAssetCopyForWritingERKNS_11AssetHandleEx_block_invoke(re::ecs2::ComponentTypeRegistry *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (**v14)(int *__return_ptr, uint64_t, _QWORD);
  int v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  id v27;
  uint64_t v28;
  char v29;
  void *v30;
  int v31;
  _BYTE v32[14];
  __int16 v33;
  _BYTE v34[18];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = *((_DWORD *)a1 + 8);
  if (v6 && (v7 = *(_QWORD *)(a2 + 48)) != 0)
  {
    v8 = *(uint64_t **)(a2 + 64);
    v9 = &v8[3 * v7];
    while (1)
    {
      v11 = *v8;
      v10 = v8[1];
      v12 = re::ecs2::ComponentTypeRegistry::instance(a1);
      a1 = (re::ecs2::ComponentTypeRegistry *)re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v12, v11);
      if (a1)
      {
        v13 = (*(uint64_t (**)(re::ecs2::ComponentTypeRegistry *))(*(_QWORD *)a1 + 48))(a1);
        re::getDowngradeFunctions(v13, v6, (uint64_t)&v35);
        if ((_QWORD)v36)
        {
          v14 = (void (**)(int *__return_ptr, uint64_t, _QWORD))v37;
          while (1)
          {
            (*v14)(&v31, v10, 0);
            if (!(_BYTE)v31)
              break;
            if (++v14 == (void (**)(int *__return_ptr, uint64_t, _QWORD))(v37 + 8 * v36))
              goto LABEL_9;
          }
          if ((v32[12] & 1) != 0)
            v16 = *(_BYTE **)&v34[4];
          else
            v16 = &v32[13];
          re::DynamicString::format((re::DynamicString *)"Downgrade function failed for component. %s", (re::DynamicString *)&v28, v16);
          v3 = v30;
          v30 = 0;

          if (v28 && (v29 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v28 + 40))();
          if (!(_BYTE)v31 && *(_QWORD *)&v32[4] && (v32[12] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v32[4] + 40))();
          v15 = 0;
        }
        else
        {
LABEL_9:
          v15 = 1;
        }
        a1 = (re::ecs2::ComponentTypeRegistry *)v35;
        if ((_QWORD)v35 && (_QWORD)v37)
          a1 = (re::ecs2::ComponentTypeRegistry *)(*(uint64_t (**)(void))(*(_QWORD *)v35 + 40))();
        if (!v15)
          break;
      }
      v8 += 3;
      if (v8 == v9)
        goto LABEL_27;
    }
    v27 = v3;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v27;

  }
  else
  {
LABEL_27:
    if (*(_QWORD *)(a2 + 32) && (int)*(_QWORD *)(a2 + 48) >= 1)
    {
      v17 = *(_QWORD *)(a2 + 48) + 1;
      do
      {
        v18 = (v17 - 2);
        v19 = *(_QWORD *)(a2 + 48);
        if (v19 <= v18)
        {
          v28 = 0;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v31 = 136315906;
          *(_QWORD *)v32 = "operator[]";
          *(_WORD *)&v32[8] = 1024;
          *(_DWORD *)&v32[10] = 789;
          v33 = 2048;
          *(_QWORD *)v34 = (v17 - 2);
          *(_WORD *)&v34[8] = 2048;
          *(_QWORD *)&v34[10] = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_43:
          v28 = 0;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v31 = 136315906;
          *(_QWORD *)v32 = "removeAt";
          *(_WORD *)&v32[8] = 1024;
          *(_DWORD *)&v32[10] = 931;
          v33 = 2048;
          *(_QWORD *)v34 = (v17 - 2);
          *(_WORD *)&v34[8] = 2048;
          *(_QWORD *)&v34[10] = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v20 = *(_QWORD *)(a2 + 64) + 24 * v18;
        v21 = *(_QWORD *)(v20 + 8);
        if (v21
          && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 56))(v21) & 1) == 0
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v20 + 8) + 48))(*(_QWORD *)(v20 + 8)))
        {
          re::ecs2::ComponentHandleAssetData::release((uint64_t **)v20, *(re::Allocator **)(a2 + 32));
          *(_QWORD *)v20 = 0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_BYTE *)(v20 + 16) = 0;
          v19 = *(_QWORD *)(a2 + 48);
          if (v19 <= v18)
            goto LABEL_43;
          v22 = v19 - 1;
          if (v19 - 1 > v18)
          {
            v23 = *(_QWORD *)(a2 + 64);
            v24 = v23 + 24 * v19;
            v25 = v23 + 24 * v18;
            v26 = *(_OWORD *)(v24 - 24);
            *(_BYTE *)(v25 + 16) = *(_BYTE *)(v24 - 8);
            *(_OWORD *)v25 = v26;
            v22 = *(_QWORD *)(a2 + 48) - 1;
          }
          *(_QWORD *)(a2 + 48) = v22;
          ++*(_DWORD *)(a2 + 56);
        }
        --v17;
      }
      while (v17 > 1);
    }
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 8) = 1;
  }
}

uint64_t *re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary@<X0>(re::AssetCompatibility *this@<X0>, const re::internal::AssetEntry *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const re::IntrospectionBase *v16;
  _anonymous_namespace_ *v17;
  char *v18;
  uint64_t v19;
  uint64_t *result;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  void (**v27)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *);
  _anonymous_namespace_ *v28;
  uint64_t (****v29)();
  const re::IntrospectionBase **v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _anonymous_namespace_ *v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (**v47)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *);
  const re::IntrospectionBase **v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t (****v52)();
  _QWORD *v53;
  int v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BYTE v58[16];
  _QWORD v59[2];
  _QWORD v60[2];
  uint64_t v61;
  int v62;
  void (**v63)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *);
  uint64_t v64;
  const re::IntrospectionBase **v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t (***v69)();
  uint64_t *v70;
  const re::IntrospectionBase **v71;
  uint64_t v72;
  char *v73;
  void (**v74)(re::FixedArrayInputStream *__hidden);
  _QWORD v75[4];
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  const re::IntrospectionBase **v80;
  uint64_t (**v81)();
  const re::internal::AssetEntry *v82;
  uint64_t *v83;
  uint64_t (***v84)();
  char *v85[7];

  v85[5] = *(char **)MEMORY[0x24BDAC8D0];
  if ((unint64_t)a3 >= 0xC)
    v7 = 0;
  else
    v7 = 3;
  if ((unint64_t)a3 >= 9)
    v8 = v7;
  else
    v8 = 2;
  if (a3 >= 5)
    v9 = v8;
  else
    v9 = 1;
  v10 = (uint64_t *)*((_QWORD *)this + 33);
  if (v10)
  {
    v13 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((_QWORD *)a2 + 138), (unint64_t)v10);
    v14 = re::internal::AssetEntry::assetPointer(this);
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 256))(v85, v13, v14);
    if (v85[0])
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 112))(v13);
      if (v15)
      {
        v16 = (const re::IntrospectionBase *)v15;
        if (*(_DWORD *)(v15 + 16) == 8)
        {
          v63 = 0;
          v60[1] = 0;
          v61 = 0;
          v60[0] = 0;
          v62 = 0;
          if (v9)
          {
            re::getDowngradeFunctions(v15, v9, (uint64_t)&v70);
            re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::operator=((uint64_t)v60, (uint64_t)&v70);
            if (v70)
            {
              if (v74)
                (*(void (**)(void))(*v70 + 40))();
            }
          }
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v13 + 272))(v13, v85[0], a4);
          if (!v61 && (v17 & 1) == 0)
          {
            *(_BYTE *)a5 = 1;
            *(_BYTE *)(a5 + 8) = 0;
            goto LABEL_124;
          }
          if ((v17 & 1) != 0)
          {
            v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v13 + 280))(v13, v85[0], a4);
            if (v28)
            {
              v29 = &v84;
              v83 = v10;
              v84 = &v81;
              v80 = (const re::IntrospectionBase **)v28;
              v81 = &off_24ED39480;
              v82 = a2;
              goto LABEL_87;
            }
          }
          else
          {
          }
          v30 = (const re::IntrospectionBase **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 120))(v13);
          if (!v30)
          {
            if ((*((_QWORD *)this + 21) & 1) != 0)
              v35 = (char *)*((_QWORD *)this + 22);
            else
              v35 = (char *)this + 169;
            re::DynamicString::format((re::DynamicString *)"Failed to allocate copy of AssetEntry '%s'.", (re::DynamicString *)&v70, v35);
            v36 = v64;
            v64 = 0;
            *(_BYTE *)a5 = 0;
            *(_QWORD *)(a5 + 8) = v36;

            if (v70 && (v71 & 1) != 0)
              (*(void (**)(void))(*v70 + 40))();
LABEL_124:
            v26 = (uint64_t *)v60[0];
            if (!v60[0])
              return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v85);
            v27 = v63;
            if (!v63)
              return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v85);
            goto LABEL_126;
          }
          v83 = v10;
          v84 = &v81;
          v80 = v30;
          v81 = &off_24ED39480;
          v82 = a2;
          if (v10 == re::SceneAsset::assetType((re::SceneAsset *)v30))
          {
          }
          else
          {
            v71 = 0;
            v72 = 0;
            {
              if ((*((_QWORD *)this + 21) & 1) != 0)
                v31 = (char *)*((_QWORD *)this + 22);
              else
                v31 = (char *)this + 169;
              re::DynamicString::format((re::DynamicString *)"Failed to perform introspection copy of AssetEntry '%s'.", (re::DynamicString *)&v70, v31);
              v32 = v64;
              v64 = 0;
              *(_BYTE *)a5 = 0;
              *(_QWORD *)(a5 + 8) = v32;

              v33 = (uint64_t)v70;
              if (!v70 || (v71 & 1) == 0)
                goto LABEL_123;
              v34 = (char *)v72;
              goto LABEL_107;
            }
          }
          v68 = 0;
          v65 = 0;
          v66 = 0;
          v64 = 0;
          v67 = 0;
          v59[0] = &off_24ED7C100;
          v59[1] = &v64;
          v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, _QWORD *, char *, _QWORD))(*(_QWORD *)v13 + 56))(v13, v59, v85[0], 0);
          if ((v37 & 1) != 0)
          {
            v38 = v68;
            v39 = (int)v66;
            v70 = (uint64_t *)&off_24ED7BDD0;
            LOBYTE(v71) = 0;
            v72 = v68;
            v73 = v66;
            v40[1] = 0;
            v40[2] = 0;
            *v40 = 0;
            LOWORD(v75[0]) = 256;
            v74 = &off_24ED7C2E0;
            v75[1] = v40;
            v75[2] = &unk_24ED1E828;
            v75[3] = v38;
            v76 = v39;
            v77 = v39;
            v78 = 0;
            v79 = v39;
            if (*((_QWORD *)this + 14) == -1)
              v41 = 0;
            else
              v41 = *((_QWORD *)this + 14);
            re::AssetSignpost::ScopeGuard::ScopeGuard((re::AssetSignpost::ScopeGuard *)v58, 2056, v41, (const char *)*v10);
            v42 = 0;
            if (((*(uint64_t (**)(uint64_t, const re::IntrospectionBase **, uint64_t **, _QWORD))(*(_QWORD *)v13 + 24))(v13, v80, &v70, 0) & 1) == 0)
            {
              if ((*((_QWORD *)this + 21) & 1) != 0)
                v43 = (char *)*((_QWORD *)this + 22);
              else
                v43 = (char *)this + 169;
              re::DynamicString::format((re::DynamicString *)"Failed to deserialize asset blob of AssetEntry '%s'.", (re::DynamicString *)&v55, v43);
              v44 = v57;
              v57 = 0;
              *(_BYTE *)a5 = 0;
              *(_QWORD *)(a5 + 8) = v44;

              if (v55 && (v56 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v55 + 40))();
              v42 = 1;
            }
            re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v58);
            v70 = (uint64_t *)&off_24ED7BDD0;
            re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)&v74);
          }
          else
          {
            if ((*((_QWORD *)this + 21) & 1) != 0)
              v45 = (char *)*((_QWORD *)this + 22);
            else
              v45 = (char *)this + 169;
            re::DynamicString::format((re::DynamicString *)"Failed to serialize asset blob of AssetEntry '%s'.", (re::DynamicString *)&v70, v45);
            v46 = v55;
            v55 = 0;
            *(_BYTE *)a5 = 0;
            *(_QWORD *)(a5 + 8) = v46;

            if (v70 && (v71 & 1) != 0)
              (*(void (**)(void))(*v70 + 40))();
            v42 = 1;
          }
          if (v64 && v68)
            (*(void (**)(void))(*(_QWORD *)v64 + 40))();
          if (v42)
            goto LABEL_123;
          v29 = &v84;
LABEL_87:
          if (v61)
          {
            v47 = v63;
            while (1)
            {
              (*v47)(&v70, v80, a2);
              if (!(_BYTE)v70)
                break;
              if (++v47 == &v63[v61])
                goto LABEL_91;
            }
            if ((*((_QWORD *)this + 21) & 1) != 0)
              v49 = (char *)*((_QWORD *)this + 22);
            else
              v49 = (char *)this + 169;
            if ((v72 & 1) != 0)
              v50 = v73;
            else
              v50 = (char *)&v72 + 1;
            re::DynamicString::format((re::DynamicString *)"Downgrade function failed for AssetHandle '%s': %s", (re::DynamicString *)&v64, v49, v50);
            v51 = v55;
            v55 = 0;
            *(_BYTE *)a5 = 0;
            *(_QWORD *)(a5 + 8) = v51;

            if (v64 && (v65 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v64 + 40))();
            if ((_BYTE)v70)
              goto LABEL_123;
            v33 = (uint64_t)v71;
            if (!v71 || (v72 & 1) == 0)
              goto LABEL_123;
            v34 = v73;
LABEL_107:
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v33 + 40))(v33, v34);
LABEL_123:
            std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v80);
            goto LABEL_124;
          }
LABEL_91:
          LOBYTE(v64) = 1;
          v48 = v80;
          v80 = 0;
          v65 = v48;
          if (v84)
          {
            if (v84 == &v81)
            {
              v69 = (uint64_t (***)())&v66;
              ((void (*)(uint64_t (***)(), char **))v81[3])(&v81, &v66);
              LOBYTE(v70) = v64;
              if (!(_BYTE)v64)
              {
                *(_BYTE *)a5 = 1;
                *(_BYTE *)(a5 + 8) = 0;
                goto LABEL_121;
              }
              v48 = v65;
LABEL_110:
              v65 = 0;
              v71 = v48;
              if (v69)
              {
                if (v69 == (uint64_t (***)())&v66)
                {
                  v75[0] = &v72;
                  (*((void (**)(char **, uint64_t *))v66 + 3))(&v66, &v72);
                  v54 = v70;
                  *(_BYTE *)a5 = 1;
                  *(_BYTE *)(a5 + 8) = v54;
                  if (!v54)
                    goto LABEL_121;
                  v48 = v71;
                  goto LABEL_115;
                }
                v52 = &v69;
                v75[0] = v69;
              }
              else
              {
                v52 = (uint64_t (****)())v75;
              }
              *v52 = 0;
              *(_BYTE *)a5 = 1;
              *(_BYTE *)(a5 + 8) = 1;
LABEL_115:
              v71 = 0;
              *(_QWORD *)(a5 + 16) = v48;
              if (!v75[0])
              {
                v53 = (_QWORD *)(a5 + 48);
                goto LABEL_119;
              }
              if ((uint64_t *)v75[0] != &v72)
              {
                v53 = v75;
                *(_QWORD *)(a5 + 48) = v75[0];
LABEL_119:
                *v53 = 0;
LABEL_120:
                std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v71);
                goto LABEL_121;
              }
              *(_QWORD *)(a5 + 48) = a5 + 24;
              (*(void (**)(uint64_t *))(v72 + 24))(&v72);
              if ((_BYTE)v70)
                goto LABEL_120;
LABEL_121:
              if ((_BYTE)v64)
                std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v65);
              goto LABEL_123;
            }
            v69 = v84;
          }
          else
          {
            v29 = &v69;
          }
          *v29 = 0;
          LOBYTE(v70) = 1;
          goto LABEL_110;
        }
        if ((*((_QWORD *)this + 21) & 1) != 0)
          v24 = (char *)*((_QWORD *)this + 22);
        else
          v24 = (char *)this + 169;
        re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetEntry '%s' because its IntrospectionType is not a structure type.", (re::DynamicString *)&v70, v24);
        v22 = 3;
      }
      else
      {
        if ((*((_QWORD *)this + 21) & 1) != 0)
          v23 = (char *)*((_QWORD *)this + 22);
        else
          v23 = (char *)this + 169;
        re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetEntry '%s' because its AssetLoader does not have an IntrospectionBase.", (re::DynamicString *)&v70, v23);
        v22 = 2;
      }
    }
    else
    {
      if ((*((_QWORD *)this + 21) & 1) != 0)
        v21 = (char *)*((_QWORD *)this + 22);
      else
        v21 = (char *)this + 169;
      re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetEntry '%s' because it does not have an AssetPointer.", (re::DynamicString *)&v70, v21);
      v22 = 1;
    }
    v25 = v64;
    v64 = 0;
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 8) = v25;

    v26 = v70;
    if (!v70 || (v71 & 1) == 0)
      return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v85);
    v27 = (void (**)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *))v72;
LABEL_126:
    (*(void (**)(uint64_t *, void (**)(uint64_t **__return_ptr, const re::IntrospectionBase **, const re::internal::AssetEntry *)))(*v26 + 40))(v26, v27);
    return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v85);
  }
  if ((*((_QWORD *)this + 21) & 1) != 0)
    v18 = (char *)*((_QWORD *)this + 22);
  else
    v18 = (char *)this + 169;
  re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetEntry '%s' because it does not have an AssetType.", (re::DynamicString *)&v70, v18);
  v19 = v64;
  v64 = 0;
  *(_BYTE *)a5 = 0;
  *(_QWORD *)(a5 + 8) = v19;

  result = v70;
  if (v70 && (v71 & 1) != 0)
    return (uint64_t *)(*(uint64_t (**)(void))(*v70 + 40))();
  return result;
}

uint64_t re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessaryFromAssetHandle@<X0>(re::AssetCompatibility *this@<X0>, const re::AssetHandle *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  re::AssetCompatibility *v6;
  const re::internal::AssetEntry *v9;
  uint64_t *result;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v6 = (re::AssetCompatibility *)*((_QWORD *)this + 1);
  if (v6)
  {
    v9 = (const re::internal::AssetEntry *)*((_QWORD *)v6 + 3);
    if (v9)
      return re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(v6, v9, (uint64_t)a2, a3, a4);
    v12 = re::AssetHandle::assetInfo(this);
    if ((v12[17] & 1) != 0)
      v13 = (char *)v12[18];
    else
      v13 = (char *)v12 + 137;
    re::DynamicString::format((re::DynamicString *)"Could not make a copy of AssetHandle '%s' because it does not have an AssetService pointer.", (re::DynamicString *)&v15, v13);
    v11 = 9;
  }
  else
  {
    v11 = 8;
  }
  v14 = v17;
  v17 = 0;
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v14;

  result = (uint64_t *)v15;
  if (v15)
  {
    if ((v16 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

BOOL re::AssetCompatibility::isSceneAssetCompatibleWithVersion(re::AssetCompatibility *this, const re::AssetHandle *a2)
{
  uint64_t v2;
  re::AssetCompatibility *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _BOOL8 v13;
  _BYTE v15[8];
  id v16;
  _QWORD v17[4];
  char v18;
  uint64_t v19[6];

  v19[5] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  if (!v2)
    goto LABEL_18;
  v4 = this;
  v5 = *(uint64_t **)(v2 + 264);
  if (v5 != re::SceneAsset::assetType(this))
    goto LABEL_19;
  v7 = *((_QWORD *)v4 + 1);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v8 = atomic_load((unsigned int *)(v7 + 704));
  if (v8 != 2)
  {
    v9 = *((_QWORD *)v4 + 1);
LABEL_7:
    re::AssetHandle::loadNow(v9, 0);
  }
  v10 = *((_QWORD *)v4 + 1);
  if (!v10 || (v11 = atomic_load((unsigned int *)(v10 + 704)), v11 != 2))
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "assetHandle.isLoaded()", "isSceneAssetCompatibleWithVersion", 551);
    this = (re::AssetCompatibility *)_os_crash();
    __break(1u);
LABEL_18:
    re::SceneAsset::assetType(this);
LABEL_19:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "assetHandle.assetType() == SceneAsset::assetType()", "isSceneAssetCompatibleWithVersion", 547);
    _os_crash();
    __break(1u);
  }
  re::AssetHandle::serializableAsset(v4, v19);
  v12 = a2 == (const re::AssetHandle *)2;
  if ((unint64_t)a2 >= 2)
  {
    v13 = 1;
    if (v12)
    {
      v17[0] = MEMORY[0x24BDAC760];
      v17[1] = 0x40000000;
      v17[2] = ___ZN2re18AssetCompatibility33isSceneAssetCompatibleWithVersionERKNS_11AssetHandleEx_block_invoke;
      v17[3] = &__block_descriptor_tmp_23;
      v18 = 1;
      v13 = (_BYTE)v16 != 0;
      if (!v15[0])

    }
  }
  else
  {
    v13 = 0;
  }
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v19);
  return v13;
}

uint64_t ___ZN2re18AssetCompatibility33isSceneAssetCompatibleWithVersionERKNS_11AssetHandleEx_block_invoke@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;

  if (*(_BYTE *)(result + 32)
    && (result = re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MaterialParameterBlockArrayComponent>(a2)) != 0
    && (v4 = *(_QWORD *)(result + 48)) != 0)
  {
    v5 = *(uint64_t **)(result + 64);
    v6 = &v5[3 * v4];
    while (1)
    {
      v7 = *v5;
      if (!*v5)
        v7 = v5[1];
      v8 = *(unsigned int *)(v7 + 336);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = *(_DWORD **)(v7 + 320);
        while ((*v10 & 0x80000000) == 0)
        {
          v10 += 80;
          if (v8 == ++v9)
          {
            LODWORD(v9) = *(_DWORD *)(v7 + 336);
            break;
          }
        }
      }
      else
      {
        LODWORD(v9) = 0;
      }
      if ((_DWORD)v8 != (_DWORD)v9)
        break;
LABEL_24:
      v5 += 3;
      v15 = 1;
      if (v5 == v6)
        goto LABEL_28;
    }
    v11 = v9;
    v12 = *(_QWORD *)(v7 + 320);
    while (*(unsigned __int8 *)(v12 + 320 * v11 + 32) != 192)
    {
      if (v8 <= (int)v9 + 1)
        v13 = v9 + 1;
      else
        v13 = v8;
      while (1)
      {
        v11 = (v9 + 1);
        if (v13 - 1 == (_DWORD)v9)
          break;
        result = *(unsigned int *)(v12 + 320 * v11);
        LODWORD(v9) = v9 + 1;
        v14 = v11;
        if ((result & 0x80000000) != 0)
          goto LABEL_23;
      }
      v14 = v13;
LABEL_23:
      LODWORD(v9) = v14;
      if ((_DWORD)v8 == v14)
        goto LABEL_24;
    }
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
LABEL_28:
  *a3 = 1;
  a3[8] = v15;
  return result;
}

uint64_t *re::AssetCompatibility::sceneAssetCopyCompatibilityVariant(re::AssetCompatibility *this, uint64_t a2)
{
  uint64_t v2;
  re::AssetCompatibility *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  re::SceneAsset *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _BYTE v21[8];
  id v22;
  uint64_t v23[6];

  v23[5] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  if (!v2)
    goto LABEL_18;
  v4 = this;
  v5 = *(uint64_t **)(v2 + 264);
  if (v5 != re::SceneAsset::assetType(this))
    goto LABEL_19;
  v7 = *((_QWORD *)v4 + 1);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_7;
  }
  v8 = atomic_load((unsigned int *)(v7 + 704));
  if (v8 != 2)
  {
    v9 = *((_QWORD *)v4 + 1);
LABEL_7:
    re::AssetHandle::loadNow(v9, 0);
  }
  v10 = *((_QWORD *)v4 + 1);
  if (!v10 || (v11 = atomic_load((unsigned int *)(v10 + 704)), v11 != 2))
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "assetHandle.isLoaded()", "sceneAssetCopyCompatibilityVariant", 586);
    this = (re::AssetCompatibility *)_os_crash();
    __break(1u);
LABEL_18:
    re::SceneAsset::assetType(this);
LABEL_19:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "assetHandle.assetType() == SceneAsset::assetType()", "sceneAssetCopyCompatibilityVariant", 582);
    _os_crash();
    __break(1u);
  }
  re::AssetHandle::serializableAsset(v4, v23);
  v12 = v23[0];
  v14 = re::globalAllocators(v13);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 40, 8);
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)(v15 + 32) = 0;
  if (a2 <= 2)
  {
    if (!v21[0])

  }
  v17 = *((_QWORD *)v4 + 1);
  if (v17)
    v18 = *(_QWORD *)(v17 + 24);
  else
    v18 = 0;
  v19 = re::SceneAsset::assetType(v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v18 + 416))(v18, v15, v19, 0, 2, 0);
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v23);
}

uint64_t ___ZN2re18AssetCompatibility34sceneAssetCopyCompatibilityVariantERKNS_11AssetHandleEx_block_invoke@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  signed int v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  StringID *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;

  result = re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MaterialParameterBlockArrayComponent>(a1);
  if (result)
  {
    v4 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 48);
    if (v5)
    {
      v6 = *(uint64_t **)(result + 64);
      v7 = &v6[3 * v5];
      do
      {
        v8 = *v6;
        v9 = *v6;
        if (!*v6)
          v9 = v6[1];
        v29 = 0;
        v27 = 0u;
        v28 = 0u;
        v30 = 0x7FFFFFFFLL;
        v10 = *(_QWORD *)(v9 + 304);
        if (v10)
        {
          v11 = v9 + 304;
          v12 = *(_DWORD *)(v9 + 332);
          if (v12 <= 3)
            v13 = 3;
          else
            v13 = v12;
          re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v27, v10, v13);
          re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy((uint64_t)&v27, v11);
          v8 = *v6;
        }
        ++*((_DWORD *)v6 + 4);
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(v8 + 304);
        ++*(_DWORD *)(v8 + 400);
        ++*((_DWORD *)v6 + 4);
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(*v6 + 16);
        ++*((_DWORD *)v6 + 4);
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(*v6 + 160);
        v14 = v29;
        if (v29)
        {
          v15 = 0;
          v16 = (_DWORD *)v28;
          while ((*v16 & 0x80000000) == 0)
          {
            v16 += 80;
            if (v29 == ++v15)
            {
              LODWORD(v15) = v29;
              break;
            }
          }
        }
        else
        {
          LODWORD(v15) = 0;
        }
        if (v29 != (_DWORD)v15)
        {
          v17 = v15;
          v18 = v28;
          v19 = v29;
          do
          {
            v20 = v18 + 320 * v17;
            v22 = *(unsigned __int8 *)(v20 + 32);
            v21 = v20 + 32;
            if (v22 != 192)
            {
              v23 = (StringID *)(v18 + 320 * v17 + 8);
              ++*((_DWORD *)v6 + 4);
              v24 = *v6;
              *(_DWORD *)(v24 + 400) = *(_DWORD *)(*v6 + 400) + 1;
              re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v24 + 304, v23, v21);
              v19 = v29;
              v18 = v28;
            }
            if (v19 <= (int)v15 + 1)
              v25 = v15 + 1;
            else
              v25 = v19;
            while (1)
            {
              v17 = (v15 + 1);
              if (v25 - 1 == (_DWORD)v15)
                break;
              LODWORD(v15) = v15 + 1;
              v26 = v17;
              if ((*(_DWORD *)(v18 + 320 * v17) & 0x80000000) != 0)
                goto LABEL_28;
            }
            v26 = v25;
LABEL_28:
            LODWORD(v15) = v26;
          }
          while (v14 != v26);
        }
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v27);
        v6 += 3;
      }
      while (v6 != v7);
    }
    result = (uint64_t)re::ecs2::Component::markDirty(v4);
  }
  *a2 = 1;
  a2[8] = 1;
  return result;
}

void `anonymous namespace'::entityAssetDataDeepCopy(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re **v6;
  unint64_t v7;
  re::ecs2::ComponentTypeRegistry *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(char *);
  uint64_t v16;
  uint64_t v17;
  re::Allocator *v18;
  const re::IntrospectionBase **v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  *(_QWORD *)(a3 + 32) = 0;
  v6 = (re **)(a3 + 32);
  *(_BYTE *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_DWORD *)(a3 + 96) = 0;
  re::StringID::operator=((unint64_t *)(a3 + 8), (uint64_t *)(a2 + 8));
  *(_BYTE *)(a3 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  *v6 = a1;
  v8 = (re::ecs2::ComponentTypeRegistry *)re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v6, 0);
  ++*(_DWORD *)(a3 + 56);
  if (*(_QWORD *)(a3 + 40) < v7)
    v8 = (re::ecs2::ComponentTypeRegistry *)re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v6, v7);
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
  {
    v10 = *(uint64_t **)(a2 + 64);
    v11 = &v10[3 * v9];
    do
    {
      v12 = (char *)v10[1];
      if (v12)
      {
        v13 = *v10;
        v14 = re::ecs2::ComponentTypeRegistry::instance(v8);
        v15 = *(uint64_t (**)(char *))(re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v14, v13)+ 8);
        if (v15)
        {
          v16 = v15(v12);
          v25.n128_u64[0] = v13;
          v25.n128_u64[1] = v16;
          LOBYTE(v26) = 1;
        }
        else
        {
          v17 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 40))(v12);
          v18 = (re::Allocator *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
          v19 = (const re::IntrospectionBase **)re::introspectionAllocPointer(a1, 0, v18);
          v25 = (__n128)(unint64_t)a1;
          v26 = 0;
          v25.n128_u64[0] = v13;
          v25.n128_u64[1] = (unint64_t)v19;
          LOBYTE(v26) = 0;
        }
        re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)v6, &v25);
      }
      v10 += 3;
    }
    while (v10 != v11);
  }
  v20 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a3 + 72) = a1;
  v21 = a3 + 72;
  re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((_QWORD *)v21, 0);
  ++*(_DWORD *)(v21 + 24);
  if (*(_QWORD *)(v21 + 8) < v20)
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((_QWORD *)v21, v20);
  v22 = *(_QWORD *)(a2 + 88);
  if (v22)
  {
    v23 = *(_QWORD *)(a2 + 104);
    v24 = 112 * v22;
    do
    {
      re::DynamicArray<re::ecs2::EntityAssetData>::add(v21, (uint64_t)&v25);
      re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v25);
      v23 += 112;
      v24 -= 112;
    }
    while (v24);
  }
}

uint64_t re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MaterialParameterBlockArrayComponent>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1[4])
    return 0;
  v1 = a1[6];
  if (!v1)
    return 0;
  v2 = a1[8] + 8;
  v3 = 24 * v1;
  while (*(_QWORD *)(v2 - 8) != *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                 + 3) >> 1)
  {
    v2 += 24;
    v3 -= 24;
    if (!v3)
      return 0;
  }
  return *(_QWORD *)v2;
}

void re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_41, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + v3));
        ++v4;
        v3 += 40;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 320 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_41, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v8 + v6 + 8) >> 31) ^ (*(_QWORD *)(v8 + v6 + 8) >> 1));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), v8 + v6 + 32);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 320;
    }
  }
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_41, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + v3));
        ++v4;
        v3 += 320;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 320;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 320 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 320 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 320 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 320 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 320 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 16) + 320 * v9;
  *(_OWORD *)(v15 + 32) = *(_OWORD *)a5;
  v16 = *(_OWORD *)(a5 + 16);
  v17 = *(_OWORD *)(a5 + 32);
  v18 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v15 + 96) = v18;
  *(_OWORD *)(v15 + 48) = v16;
  *(_OWORD *)(v15 + 64) = v17;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v15 + 112), (const re::AssetHandle *)(a5 + 80));
  re::OptionalMaterialSamplerData::OptionalMaterialSamplerData(v15 + 136, a5 + 104);
  re::DynamicArray<BOOL>::DynamicArray(v15 + 240, (uint64_t *)(a5 + 208));
  *(_BYTE *)(v15 + 280) = *(_BYTE *)(a5 + 248);
  *(_QWORD *)(v15 + 288) = *(_QWORD *)(a5 + 256);
  v19 = *(_OWORD *)(a5 + 264);
  *(_BYTE *)(v15 + 312) = *(_BYTE *)(a5 + 280);
  *(_OWORD *)(v15 + 296) = v19;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(_DWORD *a1)
{
  if ((*a1 & 0x80000000) != 0)
  {
    *a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 2));
    re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)(a1 + 8));
  }
}

void re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter(re::ecs2::SerializedMaterialParameter *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  v3[6] = 0;
  if (v2)
  {
    if (*((_QWORD *)this + 30))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 30) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 58);
  }
  re::AssetHandle::~AssetHandle((re::ecs2::SerializedMaterialParameter *)((char *)this + 80));
}

uint64_t re::OptionalMaterialSamplerData::OptionalMaterialSamplerData(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  *(_BYTE *)result = *(_BYTE *)a2;
  v2 = *(unsigned __int8 *)(a2 + 1);
  *(_BYTE *)(result + 1) = v2;
  if (v2)
    *(_BYTE *)(result + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(unsigned __int8 *)(a2 + 3);
  *(_BYTE *)(result + 3) = v3;
  if (v3)
    *(_BYTE *)(result + 4) = *(_BYTE *)(a2 + 4);
  v4 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(result + 8) = v4;
  if (v4)
    *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  v5 = *(unsigned __int8 *)(a2 + 16);
  *(_BYTE *)(result + 16) = v5;
  if (v5)
    *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  v6 = *(unsigned __int8 *)(a2 + 24);
  *(_BYTE *)(result + 24) = v6;
  if (v6)
    *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  v7 = *(unsigned __int8 *)(a2 + 32);
  *(_BYTE *)(result + 32) = v7;
  if (v7)
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  v8 = *(unsigned __int8 *)(a2 + 40);
  *(_BYTE *)(result + 40) = v8;
  if (v8)
    *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  v9 = *(unsigned __int8 *)(a2 + 48);
  *(_BYTE *)(result + 48) = v9;
  if (v9)
    *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  v10 = *(unsigned __int8 *)(a2 + 56);
  *(_BYTE *)(result + 56) = v10;
  if (v10)
    *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  v11 = *(unsigned __int8 *)(a2 + 64);
  *(_BYTE *)(result + 64) = v11;
  if (v11)
    *(_DWORD *)(result + 68) = *(_DWORD *)(a2 + 68);
  v12 = *(unsigned __int8 *)(a2 + 72);
  *(_BYTE *)(result + 72) = v12;
  if (v12)
    *(_DWORD *)(result + 76) = *(_DWORD *)(a2 + 76);
  v13 = *(unsigned __int8 *)(a2 + 80);
  *(_BYTE *)(result + 80) = v13;
  if (v13)
    *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 84);
  v14 = *(unsigned __int8 *)(a2 + 88);
  *(_BYTE *)(result + 88) = v14;
  if (v14)
    *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  return result;
}

void re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(_DWORD *a1)
{
  if ((*a1 & 0x80000000) != 0)
  {
    *a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 2));
    re::StringID::destroyString((re::StringID *)(a1 + 6));
  }
}

double re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 320;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED39480;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED39480;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1104), *(_QWORD *)(a1 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v2);
}

uint64_t std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0,std::allocator<re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(re::internal::AssetEntry const&,re::AssetManager const*,long long,BOOL)::$_0>,void ()(void *)>::target_type()
{
}

void re::MeshAssetData::generateMetaData(re::MeshAssetData *this)
{
  uint64_t v1;
  unint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  int v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 17) = 0;
  ++*((_DWORD *)this + 36);
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v3 = 0;
    v4 = (re::MeshAssetData *)((char *)this + 120);
    do
    {
      if (*((_QWORD *)this + 2) <= v3)
      {
        memset(v17, 0, sizeof(v17));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = *((_QWORD *)this + 4);
      LODWORD(v17[0]) = 0;
      v6 = v5 + (v3 << 9);
      v7 = *(_QWORD *)(v6 + 168);
      if (v7)
      {
        v8 = 0;
        v9 = *(_QWORD *)(v6 + 184);
        v10 = v9 + 144 * v7;
        v11 = 0.0;
        do
        {
          v12 = *(_QWORD *)(v9 + 40);
          if (v12)
          {
            v13 = 0;
            v14 = *(int **)(v9 + 48);
            v15 = 4 * v12;
            do
            {
              v16 = *v14++;
              v8 += v16 - v13;
              v13 = v16;
              v15 -= 4;
            }
            while (v15);
          }
          v11 = v11 + (float)v12;
          v9 += 144;
        }
        while (v9 != v10);
        if (v11 > 0.0)
          *(float *)v17 = (float)v8 / v11;
      }
      re::DynamicArray<float>::add(v4, (float *)v17);
      ++v3;
    }
    while (v3 != v1);
  }
}

uint64_t re::MeshAssetBaseInfo::meshModel<re::MeshAsset>(_QWORD *a1, unint64_t a2)
{
  if (a1[52] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::DataArray<re::MeshModel>::tryGet(a1[55] + 8, *(_QWORD *)(a1[54] + 8 * a2));
}

_QWORD *re::internal::defaultConstruct<re::MeshAssetBuffer>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(_WORD *)(a3 + 72) = 256;
  return result;
}

double re::internal::defaultDestruct<re::MeshAssetBuffer>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  double result;

  v5 = a3 + 4;
  v4 = a3[4];
  if (v4)
  {
    if (a3[8])
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    a3[8] = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*((_DWORD *)a3 + 14);
  }
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::MeshAssetBuffer>(uint64_t a1)
{
  _QWORD *result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 72) = 256;
  return result;
}

double re::internal::defaultDestructV2<re::MeshAssetBuffer>(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  double result;

  v3 = a1 + 4;
  v2 = a1[4];
  if (v2)
  {
    if (a1[8])
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    a1[8] = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)a1 + 14);
  }
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetBuffer>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];
  __int128 v33;
  const char *v34;
  __int128 v35;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EA0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254101068);
    qword_254101068 = (uint64_t)&off_24ED39500;
    __cxa_guard_release(&qword_254100EA0);
  }
  if ((_MergedGlobals_90 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100D48;
    if (qword_254100D48)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100D38);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100D38))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541014A8, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2541014B8 = 0;
      *(_QWORD *)&xmmword_2541014C8 = 0;
      *((_QWORD *)&xmmword_2541014C8 + 1) = 0xFFFFFFFFLL;
      qword_2541014A8 = (uint64_t)&off_24ED7DAA8;
      qword_2541014D8 = (uint64_t)"MeshAssetBuffer";
      dword_2541014E0 = 0;
      xmmword_2541014E8 = 0u;
      xmmword_2541014F8 = 0u;
      xmmword_254101508 = 0u;
      qword_254101518 = 0;
      __cxa_guard_release(&qword_254100D38);
    }
    qword_254100D48 = (uint64_t)&qword_2541014A8;
    *(_QWORD *)&v35 = 0xBBFF8F97F37B7606;
    *((_QWORD *)&v35 + 1) = "MeshAssetBuffer";
    re::StringID::destroyString((re::StringID *)&v35);
    xmmword_2541014C8 = v33;
    v4 = atomic_load((unsigned __int8 *)&qword_254100D40);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100D40);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::DynamicString>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254100F78 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "data";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x2000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254100F80 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::mtl::introspect_VertexFormat((re::mtl *)1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "format";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x4800000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_254100F88 = v25;
        v26 = re::introspectionAllocator((re *)v25);
        v28 = re::mtl::introspect_VertexStepFunction((re::mtl *)1, v27);
        v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = "stepFunction";
        *(_QWORD *)(v29 + 16) = v28;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0x4900000004;
        *(_DWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
        qword_254100F90 = v29;
        __cxa_guard_release(&qword_254100D40);
      }
    }
    qword_2541014B8 = 0x5000000008;
    v1 = &qword_2541014A8;
    dword_2541014C0 = 8;
    word_2541014C4 = 0;
    dword_2541014E0 = 4;
    *(_QWORD *)&xmmword_2541014E8 = &qword_254100F78;
    *((_QWORD *)&xmmword_2541014E8 + 1) = re::internal::defaultConstruct<re::MeshAssetBuffer>;
    *(_QWORD *)&xmmword_2541014F8 = re::internal::defaultDestruct<re::MeshAssetBuffer>;
    *(_QWORD *)&xmmword_254101508 = 0;
    *((_QWORD *)&xmmword_2541014F8 + 1) = 0;
    *((_QWORD *)&xmmword_254101508 + 1) = re::internal::defaultConstructV2<re::MeshAssetBuffer>;
    qword_254101518 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetBuffer>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541014A8, v3);
    v35 = v33;
    if ((_MergedGlobals_90 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_90 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101068, 0);
      qword_254101078 = 0x2800000003;
      dword_254101080 = v5;
      word_254101084 = 0;
      *(_QWORD *)&xmmword_254101088 = 0;
      *((_QWORD *)&xmmword_254101088 + 1) = 0xFFFFFFFFLL;
      qword_254101098 = (uint64_t)v1;
      qword_2541010A0 = 0;
      qword_254101068 = (uint64_t)&off_24ED39500;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254101068, (const re::IntrospectionBase *)&v33);
      if ((BYTE8(v33) & 1) != 0)
        v8 = v34;
      else
        v8 = (char *)&v33 + 9;
      if ((_QWORD)v33 && (BYTE8(v33) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v33 + 40))();
      v31 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v32);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v30 + 1) = v10;
      }
      else
      {
        v35 = v31;
        re::TypeBuilder::beginListType((uint64_t)&v33, v32, 1, 0x28uLL, 8uLL, &v35);
        re::TypeBuilder::setConstructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v33, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v33, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v33, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v33, v11);
      }
      xmmword_254101088 = v30;
      re::StringID::destroyString((re::StringID *)v32);
    }
  }
}

uint64_t *re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  _OWORD *v7;
  const re::IntrospectionBase *v8;
  re *v9;
  std::__shared_mutex_base *v10;
  uint64_t v12;
  int v13;
  re::IntrospectionRegistry *v14;
  const re::IntrospectionBase *v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  const char *v21;
  uint64_t v22[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info);
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&off_24ED39598;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v4 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if (v4)
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
  v9 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, v8);
  if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v10 = re::introspectionSharedMutex(v9);
      std::__shared_mutex_base::unlock(v10);
    }
  }
  else
  {
    v12 = (uint64_t)v9;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized = 1;
    v13 = *((_DWORD *)v9 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, 0);
    qword_255801028 = 0x3000000007;
    dword_255801030 = v13;
    word_255801034 = 0;
    *(_QWORD *)&xmmword_255801038 = 0;
    *((_QWORD *)&xmmword_255801038 + 1) = 0xFFFFFFFFLL;
    qword_255801048 = (uint64_t)v7;
    unk_255801050 = 0;
    qword_255801058 = v12;
    unk_255801060 = 0;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&off_24ED39598;
    re::IntrospectionRegistry::add(v14, v15);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, (const re::IntrospectionBase *)&v20);
    if ((BYTE8(v20) & 1) != 0)
      v16 = v21;
    else
      v16 = (char *)&v20 + 9;
    if ((_QWORD)v20 && (BYTE8(v20) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v20 + 40))();
    v17 = v7[2];
    v19 = *(_OWORD *)(v12 + 32);
    v20 = v17;
    xmmword_255801038 = v18;
    re::StringID::destroyString((re::StringID *)v22);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::MeshAssetPart>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  double result;

  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 44) = 1;
  *(_DWORD *)(a3 + 52) = 1;
  *(_WORD *)(a3 + 56) = -1;
  *(_DWORD *)(a3 + 60) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = &str_110;
  *(_QWORD *)&v3 = 0x7F0000007FLL;
  *((_QWORD *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a3 + 96) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a3 + 112) = v3;
  *(_BYTE *)(a3 + 194) = 0;
  *(_BYTE *)(a3 + 196) = 0;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_BYTE *)(a3 + 192) = 0;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 236) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshAssetPart>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a3 + 200));
  re::StringID::destroyString((re::StringID *)(a3 + 72));
  return re::DynamicArray<re::MeshAssetBuffer>::deinit(a3);
}

double re::internal::defaultConstructV2<re::MeshAssetPart>(uint64_t a1)
{
  __int128 v1;
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 52) = 1;
  *(_WORD *)(a1 + 56) = -1;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = &str_110;
  *(_QWORD *)&v1 = 0x7F0000007FLL;
  *((_QWORD *)&v1 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 96) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 112) = v1;
  *(_BYTE *)(a1 + 194) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshAssetPart>(uint64_t a1)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 200));
  re::StringID::destroyString((re::StringID *)(a1 + 72));
  return re::DynamicArray<re::MeshAssetBuffer>::deinit(a1);
}

void re::IntrospectionInfo<re::FixedArray<re::SkinningInfluence>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24[2];
  __int128 v25;
  const char *v26;
  __int128 v27;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EA8))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_2541010A8);
    qword_2541010A8 = (uint64_t)&off_24ED39638;
    __cxa_guard_release(&qword_254100EA8);
  }
  if ((byte_254100D29 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100D78;
    if (qword_254100D78)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100D68);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100D68))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101598, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2541015A8 = 0;
      *(_QWORD *)&xmmword_2541015B8 = 0;
      *((_QWORD *)&xmmword_2541015B8 + 1) = 0xFFFFFFFFLL;
      qword_254101598 = (uint64_t)&off_24ED7DAA8;
      qword_2541015C8 = (uint64_t)"SkinningInfluence";
      dword_2541015D0 = 0;
      xmmword_2541015D8 = 0u;
      xmmword_2541015E8 = 0u;
      xmmword_2541015F8 = 0u;
      qword_254101608 = 0;
      __cxa_guard_release(&qword_254100D68);
    }
    qword_254100D78 = (uint64_t)&qword_254101598;
    *(_QWORD *)&v27 = 0xA30D63E3F87A3C48;
    *((_QWORD *)&v27 + 1) = "SkinningInfluence";
    re::StringID::destroyString((re::StringID *)&v27);
    xmmword_2541015B8 = v25;
    v4 = atomic_load((unsigned __int8 *)&qword_254100D70);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100D70);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::introspect_int((re *)1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "jointIndex";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254100F10 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::introspect_float((re *)1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "weight";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x400000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254100F18 = v21;
        __cxa_guard_release(&qword_254100D70);
      }
    }
    qword_2541015A8 = 0x800000008;
    dword_2541015B0 = 4;
    v1 = &qword_254101598;
    word_2541015B4 = 1;
    dword_2541015D0 = 2;
    *(_QWORD *)&xmmword_2541015D8 = &qword_254100F10;
    *((_QWORD *)&xmmword_2541015D8 + 1) = re::internal::defaultConstruct<re::SkinningInfluence>;
    *(_QWORD *)&xmmword_2541015E8 = re::internal::defaultDestruct<re::SkinningInfluence>;
    *(_QWORD *)&xmmword_2541015F8 = 0;
    *((_QWORD *)&xmmword_2541015E8 + 1) = 0;
    *((_QWORD *)&xmmword_2541015F8 + 1) = re::internal::defaultConstructV2<re::SkinningInfluence>;
    qword_254101608 = (uint64_t)re::internal::defaultDestructV2<re::SkinningInfluence>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101598, v3);
    v27 = v25;
    if ((byte_254100D29 & 1) == 0)
    {
LABEL_7:
      byte_254100D29 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541010A8, 0);
      qword_2541010B8 = 0x1800000004;
      dword_2541010C0 = v5;
      word_2541010C4 = 0;
      *(_QWORD *)&xmmword_2541010C8 = 0;
      *((_QWORD *)&xmmword_2541010C8 + 1) = 0xFFFFFFFFLL;
      qword_2541010D8 = (uint64_t)v1;
      qword_2541010E0 = 0;
      qword_2541010A8 = (uint64_t)&off_24ED39638;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541010A8, (const re::IntrospectionBase *)&v25);
      if ((BYTE8(v25) & 1) != 0)
        v8 = v26;
      else
        v8 = (char *)&v25 + 9;
      if ((_QWORD)v25 && (BYTE8(v25) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
      v23 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v24);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v22 + 1) = v10;
      }
      else
      {
        v27 = v23;
        re::TypeBuilder::beginListType((uint64_t)&v25, v24, 1, 0x18uLL, 8uLL, &v27);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v25, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v25, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v11);
      }
      xmmword_2541010C8 = v22;
      re::StringID::destroyString((re::StringID *)v24);
    }
  }
}

double re::internal::defaultConstruct<re::MeshAssetSkinningData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)a3 = -1;
  result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_QWORD *)(a3 + 136) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshAssetSkinningData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v4 = a3[7];
  if (v4)
  {
    v5 = a3 + 8;
    if (a3[8])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[9]);
      *v5 = 0;
      a3[9] = 0;
    }
    a3[7] = 0;
  }
  v6 = a3[4];
  if (v6)
  {
    if (a3[5])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, a3[6]);
      a3[5] = 0;
      a3[6] = 0;
    }
    a3[4] = 0;
  }
  result = a3[1];
  if (result)
  {
    if (a3[2])
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, a3[3]);
      a3[2] = 0;
      a3[3] = 0;
    }
    a3[1] = 0;
  }
  return result;
}

double re::internal::defaultConstructV2<re::MeshAssetSkinningData>(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = -1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshAssetSkinningData>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1[7];
  if (v2)
  {
    if (a1[8])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[9]);
      a1[8] = 0;
      a1[9] = 0;
    }
    a1[7] = 0;
  }
  v3 = a1[4];
  if (v3)
  {
    if (a1[5])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, a1[6]);
      a1[5] = 0;
      a1[6] = 0;
    }
    a1[4] = 0;
  }
  result = a1[1];
  if (result)
  {
    if (a1[2])
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, a1[3]);
      a1[2] = 0;
      a1[3] = 0;
    }
    a1[1] = 0;
  }
  return result;
}

void re::internal::defaultConstruct<re::MeshAssetBlendShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_DWORD *)(a3 + 44) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::MeshAssetBlendShapeData>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)a3 + 2);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::MeshAssetBlendShapeData>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshAssetBlendShapeData>(re::StringID *a1)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)a1 + 2);
  re::StringID::destroyString(a1);
}

double re::internal::defaultConstruct<re::MeshAssetWrapDeformerData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = &str_110;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)(a3 + 96) = 0;
  return result;
}

void re::internal::defaultDestruct<re::MeshAssetWrapDeformerData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a3[10];
  if (v4)
  {
    v5 = a3 + 11;
    if (a3[11])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[12]);
      *v5 = 0;
      a3[12] = 0;
    }
    a3[10] = 0;
  }
  v6 = a3[7];
  if (v6)
  {
    if (a3[8])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, a3[9]);
      a3[8] = 0;
      a3[9] = 0;
    }
    a3[7] = 0;
  }
  v7 = a3[4];
  if (v7)
  {
    if (a3[5])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, a3[6]);
      a3[5] = 0;
      a3[6] = 0;
    }
    a3[4] = 0;
  }
  re::StringID::destroyString((re::StringID *)(a3 + 2));
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::MeshAssetWrapDeformerData>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_110;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &str_110;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshAssetWrapDeformerData>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[10];
  if (v2)
  {
    if (a1[11])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[12]);
      a1[11] = 0;
      a1[12] = 0;
    }
    a1[10] = 0;
  }
  v3 = a1[7];
  if (v3)
  {
    if (a1[8])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, a1[9]);
      a1[8] = 0;
      a1[9] = 0;
    }
    a1[7] = 0;
  }
  v4 = a1[4];
  if (v4)
  {
    if (a1[5])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a1[6]);
      a1[5] = 0;
      a1[6] = 0;
    }
    a1[4] = 0;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 2));
  re::StringID::destroyString((re::StringID *)a1);
}

void re::internal::defaultConstruct<re::MeshAssetContactDeformerTarget>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
}

uint64_t re::internal::defaultDestruct<re::MeshAssetContactDeformerTarget>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;

  result = a3[1];
  if (result)
  {
    v5 = a3 + 2;
    if (a3[2])
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, a3[3]);
      *v5 = 0;
      v5[1] = 0;
    }
    a3[1] = 0;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::MeshAssetContactDeformerTarget>(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshAssetContactDeformerTarget>(_QWORD *a1)
{
  uint64_t result;

  result = a1[1];
  if (result)
  {
    if (a1[2])
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, a1[3]);
      a1[2] = 0;
      a1[3] = 0;
    }
    a1[1] = 0;
  }
  return result;
}

void re::IntrospectionInfo<re::FixedArray<re::MeshAssetContactDeformerTarget>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28[2];
  __int128 v29;
  const char *v30;
  __int128 v31;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EB0))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_2541010E8);
    qword_2541010E8 = (uint64_t)&off_24ED396D0;
    __cxa_guard_release(&qword_254100EB0);
  }
  if ((byte_254100D2A & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100DD8;
    if (qword_254100DD8)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100DC8);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100DC8))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101778, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101788 = 0;
      *(_QWORD *)&xmmword_254101798 = 0;
      *((_QWORD *)&xmmword_254101798 + 1) = 0xFFFFFFFFLL;
      qword_254101778 = (uint64_t)&off_24ED7DAA8;
      qword_2541017A8 = (uint64_t)"MeshAssetContactDeformerTarget";
      dword_2541017B0 = 0;
      xmmword_2541017B8 = 0u;
      xmmword_2541017C8 = 0u;
      xmmword_2541017D8 = 0u;
      qword_2541017E8 = 0;
      __cxa_guard_release(&qword_254100DC8);
    }
    qword_254100DD8 = (uint64_t)&qword_254101778;
    *(_QWORD *)&v31 = 0x12ECC0F162C64700;
    *((_QWORD *)&v31 + 1) = "MeshAssetContactDeformerTarget";
    re::StringID::destroyString((re::StringID *)&v31);
    xmmword_254101798 = v29;
    v4 = atomic_load((unsigned __int8 *)&qword_254100DD0);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100DD0);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::introspect_uint32_t((re *)1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "jointIndex";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254100F60 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::introspect_float((re *)1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "radius";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x400000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254100F68 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "heightMap";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x800000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_254100F70 = v25;
        __cxa_guard_release(&qword_254100DD0);
      }
    }
    qword_254101788 = 0x2000000008;
    v1 = &qword_254101778;
    dword_254101790 = 8;
    word_254101794 = 0;
    dword_2541017B0 = 3;
    *(_QWORD *)&xmmword_2541017B8 = &qword_254100F60;
    *((_QWORD *)&xmmword_2541017B8 + 1) = re::internal::defaultConstruct<re::MeshAssetContactDeformerTarget>;
    *(_QWORD *)&xmmword_2541017C8 = re::internal::defaultDestruct<re::MeshAssetContactDeformerTarget>;
    *(_QWORD *)&xmmword_2541017D8 = 0;
    *((_QWORD *)&xmmword_2541017C8 + 1) = 0;
    *((_QWORD *)&xmmword_2541017D8 + 1) = re::internal::defaultConstructV2<re::MeshAssetContactDeformerTarget>;
    qword_2541017E8 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetContactDeformerTarget>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101778, v3);
    v31 = v29;
    if ((byte_254100D2A & 1) == 0)
    {
LABEL_7:
      byte_254100D2A = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541010E8, 0);
      qword_2541010F8 = 0x1800000004;
      dword_254101100 = v5;
      word_254101104 = 0;
      *(_QWORD *)&xmmword_254101108 = 0;
      *((_QWORD *)&xmmword_254101108 + 1) = 0xFFFFFFFFLL;
      qword_254101118 = (uint64_t)v1;
      qword_254101120 = 0;
      qword_2541010E8 = (uint64_t)&off_24ED396D0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541010E8, (const re::IntrospectionBase *)&v29);
      if ((BYTE8(v29) & 1) != 0)
        v8 = v30;
      else
        v8 = (char *)&v29 + 9;
      if ((_QWORD)v29 && (BYTE8(v29) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v29 + 40))();
      v27 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v28);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v26 + 1) = v10;
      }
      else
      {
        v31 = v27;
        re::TypeBuilder::beginListType((uint64_t)&v29, v28, 1, 0x18uLL, 8uLL, &v31);
        re::TypeBuilder::setConstructor((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v29, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v29, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v29, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v29, v11);
      }
      xmmword_254101108 = v26;
      re::StringID::destroyString((re::StringID *)v28);
    }
  }
}

void re::internal::defaultConstruct<re::MeshAssetContactDeformerData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::MeshAssetContactDeformerData>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit((_QWORD *)a3 + 2);
  re::StringID::destroyString(a3);
}

_QWORD *re::internal::defaultConstructV2<re::MeshAssetContactDeformerData>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshAssetContactDeformerData>(re::StringID *a1)
{
  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit((_QWORD *)a1 + 2);
  re::StringID::destroyString(a1);
}

void re::internal::defaultConstruct<re::MeshAssetSmoothDeformerData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
}

void re::internal::defaultDestruct<re::MeshAssetSmoothDeformerData>(int a1, int a2, re::StringID *this)
{
  re::StringID::destroyString(this);
}

_QWORD *re::internal::defaultConstructV2<re::MeshAssetSmoothDeformerData>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  return result;
}

void re::internal::defaultConstruct<re::MeshAssetOffsetsDeformerData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
}

void re::internal::defaultDestruct<re::MeshAssetOffsetsDeformerData>(int a1, int a2, re::StringID *this)
{
  re::StringID::destroyString(this);
}

_QWORD *re::internal::defaultConstructV2<re::MeshAssetOffsetsDeformerData>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  return result;
}

double re::internal::defaultConstruct<re::MeshAssetSkeleton>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::MeshAssetSkeleton>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a3[11];
  if (v4)
  {
    v5 = a3 + 12;
    if (a3[12])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[13]);
      *v5 = 0;
      a3[13] = 0;
    }
    a3[11] = 0;
  }
  v6 = a3[8];
  if (v6)
  {
    if (a3[9])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, a3[10]);
      a3[9] = 0;
      a3[10] = 0;
    }
    a3[8] = 0;
  }
  v7 = a3[5];
  if (v7)
  {
    if (a3[6])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, a3[7]);
      a3[6] = 0;
      a3[7] = 0;
    }
    a3[5] = 0;
  }
  re::FixedArray<re::StringID>::deinit(a3 + 2);
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::MeshAssetSkeleton>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_110;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return result;
}

void re::internal::defaultDestructV2<re::MeshAssetSkeleton>(re::StringID *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)a1 + 11);
  if (v2)
  {
    if (*((_QWORD *)a1 + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)a1 + 13));
      *((_QWORD *)a1 + 12) = 0;
      *((_QWORD *)a1 + 13) = 0;
    }
    *((_QWORD *)a1 + 11) = 0;
  }
  v3 = *((_QWORD *)a1 + 8);
  if (v3)
  {
    if (*((_QWORD *)a1 + 9))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)a1 + 10));
      *((_QWORD *)a1 + 9) = 0;
      *((_QWORD *)a1 + 10) = 0;
    }
    *((_QWORD *)a1 + 8) = 0;
  }
  v4 = *((_QWORD *)a1 + 5);
  if (v4)
  {
    if (*((_QWORD *)a1 + 6))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)a1 + 7));
      *((_QWORD *)a1 + 6) = 0;
      *((_QWORD *)a1 + 7) = 0;
    }
    *((_QWORD *)a1 + 5) = 0;
  }
  re::FixedArray<re::StringID>::deinit((_QWORD *)a1 + 2);
  re::StringID::destroyString(a1);
}

uint64_t *re::allocInfo_MeshAssetMetaData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254100E40);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254100E40))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541019D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541019E0 = 0;
    qword_2541019F0 = 0;
    qword_2541019F8 = 0xFFFFFFFFLL;
    qword_2541019D0 = (uint64_t)&off_24ED7DAA8;
    qword_254101A00 = (uint64_t)"MeshAssetMetaData";
    dword_254101A08 = 0;
    xmmword_254101A10 = 0u;
    xmmword_254101A20 = 0u;
    xmmword_254101A30 = 0u;
    qword_254101A40 = 0;
    __cxa_guard_release(&qword_254100E40);
  }
  return &qword_2541019D0;
}

void re::initInfo_MeshAssetMetaData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0xBA5A09EF8224E2A4;
  v11[1] = "MeshAssetMetaData";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_254100E50);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254100E50);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "averageSkinningInfluencesPerVertex";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254100E48 = v9;
      __cxa_guard_release(&qword_254100E50);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254100E48;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshAssetMetaData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshAssetMetaData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetMetaData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetMetaData>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

void re::internal::defaultConstruct<re::MeshAssetMetaData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::MeshAssetMetaData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    if (*(_QWORD *)(a3 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    ++*(_DWORD *)(a3 + 24);
  }
  return result;
}

uint64_t re::internal::defaultConstructV2<re::MeshAssetMetaData>(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshAssetMetaData>(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkeleton>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[2];
  __int128 v35;
  const char *v36;
  __int128 v37;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EB8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254101128);
    qword_254101128 = (uint64_t)&off_24ED39768;
    __cxa_guard_release(&qword_254100EB8);
  }
  if ((byte_254100D2B & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100E38;
    if (qword_254100E38)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100E28);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100E28))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101958, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101968 = 0;
      *(_QWORD *)&xmmword_254101978 = 0;
      *((_QWORD *)&xmmword_254101978 + 1) = 0xFFFFFFFFLL;
      qword_254101958 = (uint64_t)&off_24ED7DAA8;
      qword_254101988 = (uint64_t)"MeshAssetSkeleton";
      dword_254101990 = 0;
      xmmword_254101998 = 0u;
      xmmword_2541019A8 = 0u;
      xmmword_2541019B8 = 0u;
      qword_2541019C8 = 0;
      __cxa_guard_release(&qword_254100E28);
    }
    qword_254100E38 = (uint64_t)&qword_254101958;
    *(_QWORD *)&v37 = 0xBA5A0A3EA9A0F4A0;
    *((_QWORD *)&v37 + 1) = "MeshAssetSkeleton";
    re::StringID::destroyString((re::StringID *)&v37);
    xmmword_254101978 = v35;
    v4 = atomic_load((unsigned __int8 *)&qword_254100E30);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100E30);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254101008 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "jointNames";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254101010 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "parentIndices";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x2800000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_254101018 = v25;
        v26 = re::introspectionAllocator((re *)v25);
        v27 = re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(1);
        v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
        *(_DWORD *)v28 = 1;
        *(_QWORD *)(v28 + 8) = "localBindPoses";
        *(_QWORD *)(v28 + 16) = v27;
        *(_QWORD *)(v28 + 24) = 0;
        *(_QWORD *)(v28 + 32) = 0x4000000004;
        *(_DWORD *)(v28 + 40) = 0;
        *(_QWORD *)(v28 + 48) = 0;
        *(_QWORD *)(v28 + 56) = 0;
        *(_DWORD *)(v28 + 64) = 0;
        qword_254101020 = v28;
        v29 = re::introspectionAllocator((re *)v28);
        v30 = re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(1);
        v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
        *(_DWORD *)v31 = 1;
        *(_QWORD *)(v31 + 8) = "inverseBindPoses";
        *(_QWORD *)(v31 + 16) = v30;
        *(_QWORD *)(v31 + 24) = 0;
        *(_QWORD *)(v31 + 32) = 0x5800000005;
        *(_DWORD *)(v31 + 40) = 0;
        *(_QWORD *)(v31 + 48) = 0;
        *(_QWORD *)(v31 + 56) = 0;
        *(_DWORD *)(v31 + 64) = 0;
        qword_254101028 = v31;
        __cxa_guard_release(&qword_254100E30);
      }
    }
    qword_254101968 = 0x7000000008;
    v1 = &qword_254101958;
    dword_254101970 = 8;
    word_254101974 = 0;
    dword_254101990 = 5;
    *(_QWORD *)&xmmword_254101998 = &qword_254101008;
    *((_QWORD *)&xmmword_254101998 + 1) = re::internal::defaultConstruct<re::MeshAssetSkeleton>;
    *(_QWORD *)&xmmword_2541019A8 = re::internal::defaultDestruct<re::MeshAssetSkeleton>;
    *(_QWORD *)&xmmword_2541019B8 = 0;
    *((_QWORD *)&xmmword_2541019A8 + 1) = 0;
    *((_QWORD *)&xmmword_2541019B8 + 1) = re::internal::defaultConstructV2<re::MeshAssetSkeleton>;
    qword_2541019C8 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetSkeleton>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101958, v3);
    v37 = v35;
    if ((byte_254100D2B & 1) == 0)
    {
LABEL_7:
      byte_254100D2B = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101128, 0);
      qword_254101138 = 0x2800000003;
      dword_254101140 = v5;
      word_254101144 = 0;
      *(_QWORD *)&xmmword_254101148 = 0;
      *((_QWORD *)&xmmword_254101148 + 1) = 0xFFFFFFFFLL;
      qword_254101158 = (uint64_t)v1;
      qword_254101160 = 0;
      qword_254101128 = (uint64_t)&off_24ED39768;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254101128, (const re::IntrospectionBase *)&v35);
      if ((BYTE8(v35) & 1) != 0)
        v8 = v36;
      else
        v8 = (char *)&v35 + 9;
      if ((_QWORD)v35 && (BYTE8(v35) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v35 + 40))();
      v33 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v34);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v32 + 1) = v10;
      }
      else
      {
        v37 = v33;
        re::TypeBuilder::beginListType((uint64_t)&v35, v34, 1, 0x28uLL, 8uLL, &v37);
        re::TypeBuilder::setConstructor((uint64_t)&v35, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v35, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v35, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v35, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v35, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v35, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v35, v11);
      }
      xmmword_254101148 = v32;
      re::StringID::destroyString((re::StringID *)v34);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetBlendShapeData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  const char *v25;
  __int128 v26;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EC0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254101168);
    qword_254101168 = (uint64_t)&off_24ED39800;
    __cxa_guard_release(&qword_254100EC0);
  }
  if ((byte_254100D2C & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100DA8;
    if (qword_254100DA8)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100D98);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100D98))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101688, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101698 = 0;
      *(_QWORD *)&xmmword_2541016A8 = 0;
      *((_QWORD *)&xmmword_2541016A8 + 1) = 0xFFFFFFFFLL;
      qword_254101688 = (uint64_t)&off_24ED7DAA8;
      qword_2541016B8 = (uint64_t)"MeshAssetBlendShapeData";
      dword_2541016C0 = 0;
      xmmword_2541016C8 = 0u;
      xmmword_2541016D8 = 0u;
      xmmword_2541016E8 = 0u;
      qword_2541016F8 = 0;
      __cxa_guard_release(&qword_254100D98);
    }
    qword_254100DA8 = (uint64_t)&qword_254101688;
    *(_QWORD *)&v26 = 0x14975A1BFCD5F2BALL;
    *((_QWORD *)&v26 + 1) = "MeshAssetBlendShapeData";
    re::StringID::destroyString((re::StringID *)&v26);
    xmmword_2541016A8 = v24;
    v4 = atomic_load((unsigned __int8 *)&qword_254100DA0);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100DA0);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = re::introspect_BlendShapeGroupDefinition((re::IntrospectionBase **)1);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "blendShapeGroup";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_254100F20 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::introspect_uint16_t((re *)1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "meshPartIndex";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x3000000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_254100F28 = v20;
        __cxa_guard_release(&qword_254100DA0);
      }
    }
    qword_254101698 = 0x3800000008;
    v1 = &qword_254101688;
    dword_2541016A0 = 8;
    word_2541016A4 = 0;
    dword_2541016C0 = 2;
    *(_QWORD *)&xmmword_2541016C8 = &qword_254100F20;
    *((_QWORD *)&xmmword_2541016C8 + 1) = re::internal::defaultConstruct<re::MeshAssetBlendShapeData>;
    *(_QWORD *)&xmmword_2541016D8 = re::internal::defaultDestruct<re::MeshAssetBlendShapeData>;
    *(_QWORD *)&xmmword_2541016E8 = 0;
    *((_QWORD *)&xmmword_2541016D8 + 1) = 0;
    *((_QWORD *)&xmmword_2541016E8 + 1) = re::internal::defaultConstructV2<re::MeshAssetBlendShapeData>;
    qword_2541016F8 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetBlendShapeData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101688, v3);
    v26 = v24;
    if ((byte_254100D2C & 1) == 0)
    {
LABEL_7:
      byte_254100D2C = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101168, 0);
      qword_254101178 = 0x2800000003;
      dword_254101180 = v5;
      word_254101184 = 0;
      *(_QWORD *)&xmmword_254101188 = 0;
      *((_QWORD *)&xmmword_254101188 + 1) = 0xFFFFFFFFLL;
      qword_254101198 = (uint64_t)v1;
      qword_2541011A0 = 0;
      qword_254101168 = (uint64_t)&off_24ED39800;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254101168, (const re::IntrospectionBase *)&v24);
      if ((BYTE8(v24) & 1) != 0)
        v8 = v25;
      else
        v8 = (char *)&v24 + 9;
      if ((_QWORD)v24 && (BYTE8(v24) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      v22 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v21 + 1) = v10;
      }
      else
      {
        v26 = v22;
        re::TypeBuilder::beginListType((uint64_t)&v24, v23, 1, 0x28uLL, 8uLL, &v26);
        re::TypeBuilder::setConstructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v24, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v24, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v24, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v24, v11);
      }
      xmmword_254101188 = v21;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkinningData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  __int128 v34;
  const char *v35;
  __int128 v36;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EC8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541011A8);
    qword_2541011A8 = (uint64_t)&off_24ED39898;
    __cxa_guard_release(&qword_254100EC8);
  }
  if ((byte_254100D2D & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100D90;
    if (qword_254100D90)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100D80);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100D80))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101610, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101620 = 0;
      *(_QWORD *)&xmmword_254101630 = 0;
      *((_QWORD *)&xmmword_254101630 + 1) = 0xFFFFFFFFLL;
      qword_254101610 = (uint64_t)&off_24ED7DAA8;
      qword_254101640 = (uint64_t)"MeshAssetSkinningData";
      dword_254101648 = 0;
      xmmword_254101650 = 0u;
      xmmword_254101660 = 0u;
      xmmword_254101670 = 0u;
      qword_254101680 = 0;
      __cxa_guard_release(&qword_254100D80);
    }
    qword_254100D90 = (uint64_t)&qword_254101610;
    *(_QWORD *)&v36 = 0x8DB8D5870250C6FCLL;
    *((_QWORD *)&v36 + 1) = "MeshAssetSkinningData";
    re::StringID::destroyString((re::StringID *)&v36);
    xmmword_254101630 = v34;
    v4 = atomic_load((unsigned __int8 *)&qword_254100D88);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100D88);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::introspect_uint32_t((re *)1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "skeletonIndex";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254100FB8 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        re::IntrospectionInfo<re::FixedArray<re::SkinningInfluence>>::get();
        v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = "skinningInfluences";
        *(_QWORD *)(v19 + 16) = &qword_2541010A8;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0x800000002;
        *(_DWORD *)(v19 + 40) = 0;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        qword_254100FC0 = v19;
        v20 = re::introspectionAllocator((re *)v19);
        v22 = re::IntrospectionInfo<re::FixedArray<int>>::get(1, v21);
        v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = "influenceEndIndices";
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0x2000000003;
        *(_DWORD *)(v23 + 40) = 0;
        *(_QWORD *)(v23 + 48) = 0;
        *(_QWORD *)(v23 + 56) = 0;
        *(_DWORD *)(v23 + 64) = 0;
        qword_254100FC8 = v23;
        v24 = re::introspectionAllocator((re *)v23);
        v26 = re::IntrospectionInfo<re::FixedArray<int>>::get(1, v25);
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "remappedJointIndices";
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0x3800000004;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_254100FD0 = v27;
        v28 = re::introspectionAllocator((re *)v27);
        v29 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
        v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
        *(_DWORD *)v30 = 1;
        *(_QWORD *)(v30 + 8) = "geometryBindTransform";
        *(_QWORD *)(v30 + 16) = v29;
        *(_QWORD *)(v30 + 24) = 0;
        *(_QWORD *)(v30 + 32) = 0x5000000005;
        *(_DWORD *)(v30 + 40) = 0;
        *(_QWORD *)(v30 + 48) = 0;
        *(_QWORD *)(v30 + 56) = 0;
        *(_DWORD *)(v30 + 64) = 0;
        qword_254100FD8 = v30;
        __cxa_guard_release(&qword_254100D88);
      }
    }
    qword_254101620 = 0x9000000008;
    v1 = &qword_254101610;
    dword_254101628 = 16;
    word_25410162C = 0;
    dword_254101648 = 5;
    *(_QWORD *)&xmmword_254101650 = &qword_254100FB8;
    *((_QWORD *)&xmmword_254101650 + 1) = re::internal::defaultConstruct<re::MeshAssetSkinningData>;
    *(_QWORD *)&xmmword_254101660 = re::internal::defaultDestruct<re::MeshAssetSkinningData>;
    *(_QWORD *)&xmmword_254101670 = 0;
    *((_QWORD *)&xmmword_254101660 + 1) = 0;
    *((_QWORD *)&xmmword_254101670 + 1) = re::internal::defaultConstructV2<re::MeshAssetSkinningData>;
    qword_254101680 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetSkinningData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101610, v3);
    v36 = v34;
    if ((byte_254100D2D & 1) == 0)
    {
LABEL_7:
      byte_254100D2D = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541011A8, 0);
      qword_2541011B8 = 0x2800000003;
      dword_2541011C0 = v5;
      word_2541011C4 = 0;
      *(_QWORD *)&xmmword_2541011C8 = 0;
      *((_QWORD *)&xmmword_2541011C8 + 1) = 0xFFFFFFFFLL;
      qword_2541011D8 = (uint64_t)v1;
      qword_2541011E0 = 0;
      qword_2541011A8 = (uint64_t)&off_24ED39898;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541011A8, (const re::IntrospectionBase *)&v34);
      if ((BYTE8(v34) & 1) != 0)
        v8 = v35;
      else
        v8 = (char *)&v34 + 9;
      if ((_QWORD)v34 && (BYTE8(v34) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v34 + 40))();
      v32 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v33);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v31 + 1) = v10;
      }
      else
      {
        v36 = v32;
        re::TypeBuilder::beginListType((uint64_t)&v34, v33, 1, 0x28uLL, 8uLL, &v36);
        re::TypeBuilder::setConstructor((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v34, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v34, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v34, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v34, v11);
      }
      xmmword_2541011C8 = v31;
      re::StringID::destroyString((re::StringID *)v33);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetPart>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  const re::IntrospectionBase *v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59[2];
  __int128 v60;
  const char *v61;
  __int128 v62;

  v0 = atomic_load((unsigned __int8 *)&qword_254100ED0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100ED0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541011E8);
    qword_2541011E8 = (uint64_t)&off_24ED39930;
    __cxa_guard_release(&qword_254100ED0);
  }
  if ((byte_254100D2E & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100D60;
    if (qword_254100D60)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100D50);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100D50))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101520, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101530 = 0;
      *(_QWORD *)&xmmword_254101540 = 0;
      *((_QWORD *)&xmmword_254101540 + 1) = 0xFFFFFFFFLL;
      qword_254101520 = (uint64_t)&off_24ED7DAA8;
      qword_254101550 = (uint64_t)"MeshAssetPart";
      dword_254101558 = 0;
      xmmword_254101560 = 0u;
      xmmword_254101570 = 0u;
      xmmword_254101580 = 0u;
      qword_254101590 = 0;
      __cxa_guard_release(&qword_254100D50);
    }
    qword_254100D60 = (uint64_t)&qword_254101520;
    *(_QWORD *)&v62 = 0xDD4C740759CEBEECLL;
    *((_QWORD *)&v62 + 1) = "MeshAssetPart";
    re::StringID::destroyString((re::StringID *)&v62);
    xmmword_254101540 = v60;
    v4 = atomic_load((unsigned __int8 *)&qword_254100D58);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100D58);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        re::IntrospectionInfo<re::DynamicArray<re::MeshAssetBuffer>>::get();
        v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = "buffers";
        *(_QWORD *)(v15 + 16) = &qword_254101068;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 1;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        *(_DWORD *)(v15 + 64) = 0;
        qword_2541013E8 = v15;
        v16 = re::introspectionAllocator((re *)v15);
        v18 = re::introspect_uint32_t((re *)1, v17);
        v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = "indexCount";
        *(_QWORD *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0x2800000002;
        *(_DWORD *)(v19 + 40) = 0;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        qword_2541013F0 = v19;
        v20 = re::introspectionAllocator((re *)v19);
        v22 = re::mtl::introspect_IndexType((re::mtl *)1, v21);
        v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = "indexType";
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0x2C00000003;
        *(_DWORD *)(v23 + 40) = 0;
        *(_QWORD *)(v23 + 48) = 0;
        *(_QWORD *)(v23 + 56) = 0;
        *(_DWORD *)(v23 + 64) = 0;
        qword_2541013F8 = v23;
        v24 = re::introspectionAllocator((re *)v23);
        v26 = re::introspect_uint32_t((re *)1, v25);
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "vertexCount";
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0x3000000004;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_254101400 = v27;
        v28 = re::introspectionAllocator((re *)v27);
        v30 = re::introspect_uint16_t((re *)1, v29);
        v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
        *(_DWORD *)v31 = 1;
        *(_QWORD *)(v31 + 8) = "materialIndex";
        *(_QWORD *)(v31 + 16) = v30;
        *(_QWORD *)(v31 + 24) = 0;
        *(_QWORD *)(v31 + 32) = 0x3800000005;
        *(_DWORD *)(v31 + 40) = 0;
        *(_QWORD *)(v31 + 48) = 0;
        *(_QWORD *)(v31 + 56) = 0;
        *(_DWORD *)(v31 + 64) = 0;
        qword_254101408 = v31;
        v32 = re::introspectionAllocator((re *)v31);
        v34 = re::introspect_uint32_t((re *)1, v33);
        v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
        *(_DWORD *)v35 = 1;
        *(_QWORD *)(v35 + 8) = "preSplitVertexCount";
        *(_QWORD *)(v35 + 16) = v34;
        *(_QWORD *)(v35 + 24) = 0;
        *(_QWORD *)(v35 + 32) = 0x3C00000006;
        *(_DWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 48) = 0;
        *(_QWORD *)(v35 + 56) = 0;
        *(_DWORD *)(v35 + 64) = 0;
        qword_254101410 = v35;
        v36 = re::introspectionAllocator((re *)v35);
        v38 = re::introspect_uint32_t((re *)1, v37);
        v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
        *(_DWORD *)v39 = 1;
        *(_QWORD *)(v39 + 8) = "patchCount";
        *(_QWORD *)(v39 + 16) = v38;
        *(_QWORD *)(v39 + 24) = 0;
        *(_QWORD *)(v39 + 32) = 0x4000000007;
        *(_DWORD *)(v39 + 40) = 0;
        *(_QWORD *)(v39 + 48) = 0;
        *(_QWORD *)(v39 + 56) = 0;
        *(_DWORD *)(v39 + 64) = 0;
        qword_254101418 = v39;
        v40 = re::introspectionAllocator((re *)v39);
        v42 = re::IntrospectionInfo<re::StringID>::get(1, v41);
        v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
        *(_DWORD *)v43 = 1;
        *(_QWORD *)(v43 + 8) = "name";
        *(_QWORD *)(v43 + 16) = v42;
        *(_QWORD *)(v43 + 24) = 0;
        *(_QWORD *)(v43 + 32) = 0x4800000008;
        *(_DWORD *)(v43 + 40) = 0;
        *(_QWORD *)(v43 + 48) = 0;
        *(_QWORD *)(v43 + 56) = 0;
        *(_DWORD *)(v43 + 64) = 0;
        qword_254101420 = v43;
        v44 = re::introspectionAllocator((re *)v43);
        v45 = re::introspect_AABB((re::IntrospectionBase **)1);
        v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
        *(_DWORD *)v46 = 1;
        *(_QWORD *)(v46 + 8) = "boundingBox";
        *(_QWORD *)(v46 + 16) = v45;
        *(_QWORD *)(v46 + 24) = 0;
        *(_QWORD *)(v46 + 32) = 0x6000000009;
        *(_DWORD *)(v46 + 40) = 0;
        *(_QWORD *)(v46 + 48) = 0;
        *(_QWORD *)(v46 + 56) = 0;
        *(_DWORD *)(v46 + 64) = 0;
        qword_254101428 = v46;
        v47 = re::introspectionAllocator((re *)v46);
        v48 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
        v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 72, 8);
        *(_DWORD *)v49 = 1;
        *(_QWORD *)(v49 + 8) = "orientedBoundingBox";
        *(_QWORD *)(v49 + 16) = v48;
        *(_QWORD *)(v49 + 24) = 0;
        *(_QWORD *)(v49 + 32) = 0x800000000ALL;
        *(_DWORD *)(v49 + 40) = 0;
        *(_QWORD *)(v49 + 48) = 0;
        *(_QWORD *)(v49 + 56) = 0;
        *(_DWORD *)(v49 + 64) = 0;
        qword_254101430 = v49;
        v50 = re::introspectionAllocator((re *)v49);
        v51 = re::introspect_MeshPartFlags((re::IntrospectionBase **)1);
        v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
        *(_DWORD *)v52 = 1;
        *(_QWORD *)(v52 + 8) = "renderFlags";
        *(_QWORD *)(v52 + 16) = v51;
        *(_QWORD *)(v52 + 24) = 0;
        *(_QWORD *)(v52 + 32) = 0xC00000000BLL;
        *(_DWORD *)(v52 + 40) = 0;
        *(_QWORD *)(v52 + 48) = 0;
        *(_QWORD *)(v52 + 56) = 0;
        *(_DWORD *)(v52 + 64) = 0;
        qword_254101438 = v52;
        v53 = re::introspectionAllocator((re *)v52);
        v55 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v54);
        v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 72, 8);
        *(_DWORD *)v56 = 1;
        *(_QWORD *)(v56 + 8) = "bufferAliases";
        *(_QWORD *)(v56 + 16) = v55;
        *(_QWORD *)(v56 + 24) = 0;
        *(_QWORD *)(v56 + 32) = 0xC80000000CLL;
        *(_DWORD *)(v56 + 40) = 0;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_DWORD *)(v56 + 64) = 0;
        qword_254101440 = v56;
        __cxa_guard_release(&qword_254100D58);
      }
    }
    qword_254101530 = 0x10000000008;
    v1 = &qword_254101520;
    dword_254101538 = 16;
    word_25410153C = 0;
    dword_254101558 = 12;
    *(_QWORD *)&xmmword_254101560 = &qword_2541013E8;
    *((_QWORD *)&xmmword_254101560 + 1) = re::internal::defaultConstruct<re::MeshAssetPart>;
    *(_QWORD *)&xmmword_254101570 = re::internal::defaultDestruct<re::MeshAssetPart>;
    *(_QWORD *)&xmmword_254101580 = 0;
    *((_QWORD *)&xmmword_254101570 + 1) = 0;
    *((_QWORD *)&xmmword_254101580 + 1) = re::internal::defaultConstructV2<re::MeshAssetPart>;
    qword_254101590 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetPart>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101520, v3);
    v62 = v60;
    if ((byte_254100D2E & 1) == 0)
    {
LABEL_7:
      byte_254100D2E = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541011E8, 0);
      qword_2541011F8 = 0x2800000003;
      dword_254101200 = v5;
      word_254101204 = 0;
      *(_QWORD *)&xmmword_254101208 = 0;
      *((_QWORD *)&xmmword_254101208 + 1) = 0xFFFFFFFFLL;
      qword_254101218 = (uint64_t)v1;
      qword_254101220 = 0;
      qword_2541011E8 = (uint64_t)&off_24ED39930;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541011E8, (const re::IntrospectionBase *)&v60);
      if ((BYTE8(v60) & 1) != 0)
        v8 = v61;
      else
        v8 = (char *)&v60 + 9;
      if ((_QWORD)v60 && (BYTE8(v60) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v60 + 40))();
      v58 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v59);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v57 + 1) = v10;
      }
      else
      {
        v62 = v58;
        re::TypeBuilder::beginListType((uint64_t)&v60, v59, 1, 0x28uLL, 8uLL, &v62);
        re::TypeBuilder::setConstructor((uint64_t)&v60, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v60, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v60, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v60, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v60, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v60, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v60, v11);
      }
      xmmword_254101208 = v57;
      re::StringID::destroyString((re::StringID *)v59);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshLodLevelInfo>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_254100ED8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100ED8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254101228);
    qword_254101228 = (uint64_t)&off_24ED399C8;
    __cxa_guard_release(&qword_254100ED8);
  }
  if ((byte_254100D2F & 1) == 0)
  {
    v1 = re::introspect_MeshLodLevelInfo((re::IntrospectionBase **)1);
    if ((byte_254100D2F & 1) == 0)
    {
      v2 = v1;
      byte_254100D2F = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101228, 0);
      qword_254101238 = 0x2800000003;
      dword_254101240 = v3;
      word_254101244 = 0;
      *(_QWORD *)&xmmword_254101248 = 0;
      *((_QWORD *)&xmmword_254101248 + 1) = 0xFFFFFFFFLL;
      qword_254101258 = v2;
      qword_254101260 = 0;
      qword_254101228 = (uint64_t)&off_24ED399C8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_254101228, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_254101248 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetContactDeformerData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22[2];
  __int128 v23;
  const char *v24;
  __int128 v25;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EE0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254101268);
    qword_254101268 = (uint64_t)&off_24ED39A60;
    __cxa_guard_release(&qword_254100EE0);
  }
  if ((byte_254100D30 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100DF0;
    if (qword_254100DF0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100DE0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100DE0))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541017F0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101800 = 0;
      *(_QWORD *)&xmmword_254101810 = 0;
      *((_QWORD *)&xmmword_254101810 + 1) = 0xFFFFFFFFLL;
      qword_2541017F0 = (uint64_t)&off_24ED7DAA8;
      qword_254101820 = (uint64_t)"MeshAssetContactDeformerData";
      dword_254101828 = 0;
      xmmword_254101830 = 0u;
      xmmword_254101840 = 0u;
      xmmword_254101850 = 0u;
      qword_254101860 = 0;
      __cxa_guard_release(&qword_254100DE0);
    }
    qword_254100DF0 = (uint64_t)&qword_2541017F0;
    *(_QWORD *)&v25 = 0x17FEA5E5144AA2B2;
    *((_QWORD *)&v25 + 1) = "MeshAssetContactDeformerData";
    re::StringID::destroyString((re::StringID *)&v25);
    xmmword_254101810 = v23;
    v4 = atomic_load((unsigned __int8 *)&qword_254100DE8);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100DE8);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        re::IntrospectionInfo<re::FixedArray<re::MeshAssetContactDeformerTarget>>::get();
        v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = "targets";
        *(_QWORD *)(v15 + 16) = &qword_2541010E8;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 0x1000000001;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        *(_DWORD *)(v15 + 64) = 0;
        qword_254100F30 = v15;
        v16 = re::introspectionAllocator((re *)v15);
        v18 = re::introspect_uint16_t((re *)1, v17);
        v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = "meshPartIndex";
        *(_QWORD *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0x2800000002;
        *(_DWORD *)(v19 + 40) = 0;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        qword_254100F38 = v19;
        __cxa_guard_release(&qword_254100DE8);
      }
    }
    qword_254101800 = 0x3000000008;
    v1 = &qword_2541017F0;
    dword_254101808 = 8;
    word_25410180C = 0;
    dword_254101828 = 2;
    *(_QWORD *)&xmmword_254101830 = &qword_254100F30;
    *((_QWORD *)&xmmword_254101830 + 1) = re::internal::defaultConstruct<re::MeshAssetContactDeformerData>;
    *(_QWORD *)&xmmword_254101840 = re::internal::defaultDestruct<re::MeshAssetContactDeformerData>;
    *(_QWORD *)&xmmword_254101850 = 0;
    *((_QWORD *)&xmmword_254101840 + 1) = 0;
    *((_QWORD *)&xmmword_254101850 + 1) = re::internal::defaultConstructV2<re::MeshAssetContactDeformerData>;
    qword_254101860 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetContactDeformerData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541017F0, v3);
    v25 = v23;
    if ((byte_254100D30 & 1) == 0)
    {
LABEL_7:
      byte_254100D30 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101268, 0);
      qword_254101278 = 0x2800000003;
      dword_254101280 = v5;
      word_254101284 = 0;
      *(_QWORD *)&xmmword_254101288 = 0;
      *((_QWORD *)&xmmword_254101288 + 1) = 0xFFFFFFFFLL;
      qword_254101298 = (uint64_t)v1;
      qword_2541012A0 = 0;
      qword_254101268 = (uint64_t)&off_24ED39A60;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254101268, (const re::IntrospectionBase *)&v23);
      if ((BYTE8(v23) & 1) != 0)
        v8 = v24;
      else
        v8 = (char *)&v23 + 9;
      if ((_QWORD)v23 && (BYTE8(v23) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v23 + 40))();
      v21 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v22);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v20 + 1) = v10;
      }
      else
      {
        v25 = v21;
        re::TypeBuilder::beginListType((uint64_t)&v23, v22, 1, 0x28uLL, 8uLL, &v25);
        re::TypeBuilder::setConstructor((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v23, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v23, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v23, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v23, v11);
      }
      xmmword_254101288 = v20;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSmoothDeformerData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24[2];
  __int128 v25;
  const char *v26;
  __int128 v27;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EE8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541012A8);
    qword_2541012A8 = (uint64_t)&off_24ED39AF8;
    __cxa_guard_release(&qword_254100EE8);
  }
  if ((byte_254100D31 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100E08;
    if (qword_254100E08)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100DF8);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100DF8))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101868, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101878 = 0;
      *(_QWORD *)&xmmword_254101888 = 0;
      *((_QWORD *)&xmmword_254101888 + 1) = 0xFFFFFFFFLL;
      qword_254101868 = (uint64_t)&off_24ED7DAA8;
      qword_254101898 = (uint64_t)"MeshAssetSmoothDeformerData";
      dword_2541018A0 = 0;
      xmmword_2541018A8 = 0u;
      xmmword_2541018B8 = 0u;
      xmmword_2541018C8 = 0u;
      qword_2541018D8 = 0;
      __cxa_guard_release(&qword_254100DF8);
    }
    qword_254100E08 = (uint64_t)&qword_254101868;
    *(_QWORD *)&v27 = 0xFF33CE7A6A0D541ALL;
    *((_QWORD *)&v27 + 1) = "MeshAssetSmoothDeformerData";
    re::StringID::destroyString((re::StringID *)&v27);
    xmmword_254101888 = v25;
    v4 = atomic_load((unsigned __int8 *)&qword_254100E00);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100E00);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "envelopeBufferName";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254100F40 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::introspect_uint16_t((re *)1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "meshPartIndex";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254100F48 = v21;
        __cxa_guard_release(&qword_254100E00);
      }
    }
    qword_254101878 = 0x1800000008;
    v1 = &qword_254101868;
    dword_254101880 = 8;
    word_254101884 = 0;
    dword_2541018A0 = 2;
    *(_QWORD *)&xmmword_2541018A8 = &qword_254100F40;
    *((_QWORD *)&xmmword_2541018A8 + 1) = re::internal::defaultConstruct<re::MeshAssetSmoothDeformerData>;
    *(_QWORD *)&xmmword_2541018B8 = re::internal::defaultDestruct<re::MeshAssetSmoothDeformerData>;
    *(_QWORD *)&xmmword_2541018C8 = 0;
    *((_QWORD *)&xmmword_2541018B8 + 1) = 0;
    *((_QWORD *)&xmmword_2541018C8 + 1) = re::internal::defaultConstructV2<re::MeshAssetSmoothDeformerData>;
    qword_2541018D8 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetSmoothDeformerData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101868, v3);
    v27 = v25;
    if ((byte_254100D31 & 1) == 0)
    {
LABEL_7:
      byte_254100D31 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541012A8, 0);
      qword_2541012B8 = 0x2800000003;
      dword_2541012C0 = v5;
      word_2541012C4 = 0;
      *(_QWORD *)&xmmword_2541012C8 = 0;
      *((_QWORD *)&xmmword_2541012C8 + 1) = 0xFFFFFFFFLL;
      qword_2541012D8 = (uint64_t)v1;
      qword_2541012E0 = 0;
      qword_2541012A8 = (uint64_t)&off_24ED39AF8;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541012A8, (const re::IntrospectionBase *)&v25);
      if ((BYTE8(v25) & 1) != 0)
        v8 = v26;
      else
        v8 = (char *)&v25 + 9;
      if ((_QWORD)v25 && (BYTE8(v25) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
      v23 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v24);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v22 + 1) = v10;
      }
      else
      {
        v27 = v23;
        re::TypeBuilder::beginListType((uint64_t)&v25, v24, 1, 0x28uLL, 8uLL, &v27);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v25, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v25, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v11);
      }
      xmmword_2541012C8 = v22;
      re::StringID::destroyString((re::StringID *)v24);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetWrapDeformerData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[2];
  __int128 v35;
  const char *v36;
  __int128 v37;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EF0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541012E8);
    qword_2541012E8 = (uint64_t)&off_24ED39B90;
    __cxa_guard_release(&qword_254100EF0);
  }
  if ((byte_254100D32 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100DC0;
    if (qword_254100DC0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100DB0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100DB0))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101700, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101710 = 0;
      *(_QWORD *)&xmmword_254101720 = 0;
      *((_QWORD *)&xmmword_254101720 + 1) = 0xFFFFFFFFLL;
      qword_254101700 = (uint64_t)&off_24ED7DAA8;
      qword_254101730 = (uint64_t)"MeshAssetWrapDeformerData";
      dword_254101738 = 0;
      xmmword_254101740 = 0u;
      xmmword_254101750 = 0u;
      xmmword_254101760 = 0u;
      qword_254101770 = 0;
      __cxa_guard_release(&qword_254100DB0);
    }
    qword_254100DC0 = (uint64_t)&qword_254101700;
    *(_QWORD *)&v37 = 0x7C3F1F58CCCB5ED2;
    *((_QWORD *)&v37 + 1) = "MeshAssetWrapDeformerData";
    re::StringID::destroyString((re::StringID *)&v37);
    xmmword_254101720 = v35;
    v4 = atomic_load((unsigned __int8 *)&qword_254100DB8);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100DB8);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "targetMeshInstanceName";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254100FE0 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "faceIndices";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x2000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254100FE8 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v23 = re::IntrospectionInfo<re::FixedArray<re::Vector3<float>>>::get(1);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "faceCoordinates";
        *(_QWORD *)(v24 + 16) = v23;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0x3800000003;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_254100FF0 = v24;
        v25 = re::introspectionAllocator((re *)v24);
        v26 = re::IntrospectionInfo<re::FixedArray<re::Vector3<float>>>::get(1);
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "offsets";
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0x5000000004;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_254100FF8 = v27;
        v28 = re::introspectionAllocator((re *)v27);
        v30 = re::introspect_uint16_t((re *)1, v29);
        v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
        *(_DWORD *)v31 = 1;
        *(_QWORD *)(v31 + 8) = "meshPartIndex";
        *(_QWORD *)(v31 + 16) = v30;
        *(_QWORD *)(v31 + 24) = 0;
        *(_QWORD *)(v31 + 32) = 0x6800000005;
        *(_DWORD *)(v31 + 40) = 0;
        *(_QWORD *)(v31 + 48) = 0;
        *(_QWORD *)(v31 + 56) = 0;
        *(_DWORD *)(v31 + 64) = 0;
        qword_254101000 = v31;
        __cxa_guard_release(&qword_254100DB8);
      }
    }
    qword_254101710 = 0x7000000008;
    v1 = &qword_254101700;
    dword_254101718 = 8;
    word_25410171C = 0;
    dword_254101738 = 5;
    *(_QWORD *)&xmmword_254101740 = &qword_254100FE0;
    *((_QWORD *)&xmmword_254101740 + 1) = re::internal::defaultConstruct<re::MeshAssetWrapDeformerData>;
    *(_QWORD *)&xmmword_254101750 = re::internal::defaultDestruct<re::MeshAssetWrapDeformerData>;
    *(_QWORD *)&xmmword_254101760 = 0;
    *((_QWORD *)&xmmword_254101750 + 1) = 0;
    *((_QWORD *)&xmmword_254101760 + 1) = re::internal::defaultConstructV2<re::MeshAssetWrapDeformerData>;
    qword_254101770 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetWrapDeformerData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101700, v3);
    v37 = v35;
    if ((byte_254100D32 & 1) == 0)
    {
LABEL_7:
      byte_254100D32 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541012E8, 0);
      qword_2541012F8 = 0x2800000003;
      dword_254101300 = v5;
      word_254101304 = 0;
      *(_QWORD *)&xmmword_254101308 = 0;
      *((_QWORD *)&xmmword_254101308 + 1) = 0xFFFFFFFFLL;
      qword_254101318 = (uint64_t)v1;
      qword_254101320 = 0;
      qword_2541012E8 = (uint64_t)&off_24ED39B90;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541012E8, (const re::IntrospectionBase *)&v35);
      if ((BYTE8(v35) & 1) != 0)
        v8 = v36;
      else
        v8 = (char *)&v35 + 9;
      if ((_QWORD)v35 && (BYTE8(v35) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v35 + 40))();
      v33 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v34);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v32 + 1) = v10;
      }
      else
      {
        v37 = v33;
        re::TypeBuilder::beginListType((uint64_t)&v35, v34, 1, 0x28uLL, 8uLL, &v37);
        re::TypeBuilder::setConstructor((uint64_t)&v35, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v35, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v35, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v35, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v35, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v35, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v35, v11);
      }
      xmmword_254101308 = v32;
      re::StringID::destroyString((re::StringID *)v34);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetOffsetsDeformerData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24[2];
  __int128 v25;
  const char *v26;
  __int128 v27;

  v0 = atomic_load((unsigned __int8 *)&qword_254100EF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100EF8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254101328);
    qword_254101328 = (uint64_t)&off_24ED39C28;
    __cxa_guard_release(&qword_254100EF8);
  }
  if ((byte_254100D33 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100E20;
    if (qword_254100E20)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100E10);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100E10))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541018E0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2541018F0 = 0;
      *(_QWORD *)&xmmword_254101900 = 0;
      *((_QWORD *)&xmmword_254101900 + 1) = 0xFFFFFFFFLL;
      qword_2541018E0 = (uint64_t)&off_24ED7DAA8;
      qword_254101910 = (uint64_t)"MeshAssetOffsetsDeformerData";
      dword_254101918 = 0;
      xmmword_254101920 = 0u;
      xmmword_254101930 = 0u;
      xmmword_254101940 = 0u;
      qword_254101950 = 0;
      __cxa_guard_release(&qword_254100E10);
    }
    qword_254100E20 = (uint64_t)&qword_2541018E0;
    *(_QWORD *)&v27 = 0x574CE82AAD8A56F2;
    *((_QWORD *)&v27 + 1) = "MeshAssetOffsetsDeformerData";
    re::StringID::destroyString((re::StringID *)&v27);
    xmmword_254101900 = v25;
    v4 = atomic_load((unsigned __int8 *)&qword_254100E18);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100E18);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "envelopeBufferName";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254100F50 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::introspect_uint16_t((re *)1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "meshPartIndex";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254100F58 = v21;
        __cxa_guard_release(&qword_254100E18);
      }
    }
    qword_2541018F0 = 0x1800000008;
    v1 = &qword_2541018E0;
    dword_2541018F8 = 8;
    word_2541018FC = 0;
    dword_254101918 = 2;
    *(_QWORD *)&xmmword_254101920 = &qword_254100F50;
    *((_QWORD *)&xmmword_254101920 + 1) = re::internal::defaultConstruct<re::MeshAssetOffsetsDeformerData>;
    *(_QWORD *)&xmmword_254101930 = re::internal::defaultDestruct<re::MeshAssetOffsetsDeformerData>;
    *(_QWORD *)&xmmword_254101940 = 0;
    *((_QWORD *)&xmmword_254101930 + 1) = 0;
    *((_QWORD *)&xmmword_254101940 + 1) = re::internal::defaultConstructV2<re::MeshAssetOffsetsDeformerData>;
    qword_254101950 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetOffsetsDeformerData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541018E0, v3);
    v27 = v25;
    if ((byte_254100D33 & 1) == 0)
    {
LABEL_7:
      byte_254100D33 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101328, 0);
      qword_254101338 = 0x2800000003;
      dword_254101340 = v5;
      word_254101344 = 0;
      *(_QWORD *)&xmmword_254101348 = 0;
      *((_QWORD *)&xmmword_254101348 + 1) = 0xFFFFFFFFLL;
      qword_254101358 = (uint64_t)v1;
      qword_254101360 = 0;
      qword_254101328 = (uint64_t)&off_24ED39C28;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254101328, (const re::IntrospectionBase *)&v25);
      if ((BYTE8(v25) & 1) != 0)
        v8 = v26;
      else
        v8 = (char *)&v25 + 9;
      if ((_QWORD)v25 && (BYTE8(v25) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
      v23 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v24);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v22 + 1) = v10;
      }
      else
      {
        v27 = v23;
        re::TypeBuilder::beginListType((uint64_t)&v25, v24, 1, 0x28uLL, 8uLL, &v27);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v25, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v25, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v11);
      }
      xmmword_254101348 = v22;
      re::StringID::destroyString((re::StringID *)v24);
    }
  }
}

double re::internal::defaultConstruct<re::MeshAssetModel>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)&v3 = 0x7F0000007FLL;
  *((_QWORD *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a3 + 16) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a3 + 32) = v3;
  *(_QWORD *)(a3 + 504) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 124) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_DWORD *)(a3 + 176) = 0;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_DWORD *)(a3 + 216) = 0;
  *(_DWORD *)(a3 + 256) = 0;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_DWORD *)(a3 + 296) = 0;
  *(_OWORD *)(a3 + 264) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_DWORD *)(a3 + 336) = 0;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_DWORD *)(a3 + 376) = 0;
  *(_OWORD *)(a3 + 344) = 0u;
  *(_OWORD *)(a3 + 360) = 0u;
  *(_DWORD *)(a3 + 416) = 0;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 424) = 0u;
  *(_OWORD *)(a3 + 440) = 0u;
  *(_DWORD *)(a3 + 456) = 0;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_DWORD *)(a3 + 496) = 0;
  return result;
}

void re::internal::defaultDestruct<re::MeshAssetModel>(int a1, int a2, re::MeshAssetModel *this)
{
  re::MeshAssetModel::~MeshAssetModel(this);
}

double re::internal::defaultConstructV2<re::MeshAssetModel>(uint64_t a1)
{
  __int128 v1;
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_110;
  *(_QWORD *)&v1 = 0x7F0000007FLL;
  *((_QWORD *)&v1 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 16) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 504) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  return result;
}

double re::internal::defaultConstruct<re::MeshAssetInstance>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_BYTE *)(a3 + 84) = 0;
  *(_DWORD *)(a3 + 88) = 1065353216;
  return result;
}

void re::internal::defaultDestruct<re::MeshAssetInstance>(int a1, int a2, re::StringID *this)
{
  re::StringID::destroyString(this);
}

double re::internal::defaultConstructV2<re::MeshAssetInstance>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_110;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  return result;
}

uint64_t *re::allocInfo_MeshAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254100E90);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254100E90))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101B38, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254101B48 = 0;
    qword_254101B58 = 0;
    qword_254101B60 = 0xFFFFFFFFLL;
    qword_254101B38 = (uint64_t)&off_24ED7DAA8;
    qword_254101B68 = (uint64_t)"MeshAssetData";
    dword_254101B70 = 0;
    xmmword_254101B78 = 0u;
    xmmword_254101B88 = 0u;
    xmmword_254101B98 = 0u;
    qword_254101BA8 = 0;
    __cxa_guard_release(&qword_254100E90);
  }
  return &qword_254101B38;
}

void re::initInfo_MeshAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  re::IntrospectionBase *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  re::IntrospectionBase *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  re::IntrospectionBase *v30;
  uint64_t v31;
  __int128 v32;
  _QWORD v33[2];
  __int128 v34;

  v33[0] = 0xDD4C740759C3D65ALL;
  v33[1] = "MeshAssetData";
  re::StringID::destroyString((re::StringID *)v33);
  *((_OWORD *)this + 2) = v34;
  v4 = atomic_load((unsigned __int8 *)&qword_254100E98);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254100E98);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetModel>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "models";
      *(_QWORD *)(v7 + 16) = &qword_254101368;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_254101030 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetInstance>>::get();
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v8 + 32))(v8, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "instances";
      *(_QWORD *)(v9 + 16) = &qword_2541013A8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x2800000002;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254101038 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkeleton>>::get();
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "skeletons";
      *(_QWORD *)(v11 + 16) = &qword_254101128;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x5000000003;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254101040 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = v12;
      v14 = (uint64_t *)qword_254100E58;
      if (!qword_254100E58)
      {
        v14 = re::allocInfo_MeshAssetMetaData((re *)v12);
        qword_254100E58 = (uint64_t)v14;
        re::initInfo_MeshAssetMetaData((re *)v14, v15);
      }
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "meshAssetMetaData";
      *(_QWORD *)(v16 + 16) = v14;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x7800000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254101048 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = v17;
      v19 = (uint64_t *)re::internal::introspectionInfoStorage<re::MeshAssetData>;
      if (!re::internal::introspectionInfoStorage<re::MeshAssetData>)
      {
        v19 = re::allocInfo_MeshAssetData((re *)v17);
        re::internal::introspectionInfoStorage<re::MeshAssetData> = (uint64_t)v19;
        re::initInfo_MeshAssetData((re *)v19, v20);
      }
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 64, 8);
      *(_DWORD *)v21 = 6;
      *(_QWORD *)(v21 + 8) = 2;
      *(_QWORD *)(v21 + 16) = v19;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)0>;
      *(_BYTE *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_DWORD *)(v21 + 56) = 0;
      qword_254101050 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v23 = v22;
      v24 = (uint64_t *)re::internal::introspectionInfoStorage<re::MeshAssetData>;
      if (!re::internal::introspectionInfoStorage<re::MeshAssetData>)
      {
        v24 = re::allocInfo_MeshAssetData((re *)v22);
        re::internal::introspectionInfoStorage<re::MeshAssetData> = (uint64_t)v24;
        re::initInfo_MeshAssetData((re *)v24, v25);
      }
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 64, 8);
      *(_DWORD *)v26 = 6;
      *(_QWORD *)(v26 + 8) = 3;
      *(_QWORD *)(v26 + 16) = v24;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)1>;
      *(_BYTE *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_DWORD *)(v26 + 56) = 0;
      qword_254101058 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v28 = v27;
      v29 = (uint64_t *)re::internal::introspectionInfoStorage<re::MeshAssetData>;
      if (!re::internal::introspectionInfoStorage<re::MeshAssetData>)
      {
        v29 = re::allocInfo_MeshAssetData((re *)v27);
        re::internal::introspectionInfoStorage<re::MeshAssetData> = (uint64_t)v29;
        re::initInfo_MeshAssetData((re *)v29, v30);
      }
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 64, 8);
      *(_DWORD *)v31 = 6;
      *(_QWORD *)(v31 + 8) = 4;
      *(_QWORD *)(v31 + 16) = v29;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)2>;
      *(_BYTE *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_DWORD *)(v31 + 56) = 0;
      qword_254101060 = v31;
      __cxa_guard_release(&qword_254100E98);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254101030;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v32 = v34;
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetModel>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44[2];
  __int128 v45;
  const char *v46;
  __int128 v47;

  v0 = atomic_load((unsigned __int8 *)&qword_254100F00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100F00))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254101368);
    qword_254101368 = (uint64_t)&off_24ED39CC0;
    __cxa_guard_release(&qword_254100F00);
  }
  if ((byte_254100D34 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100E70;
    if (qword_254100E70)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100E60);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100E60))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101A48, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101A58 = 0;
      *(_QWORD *)&xmmword_254101A68 = 0;
      *((_QWORD *)&xmmword_254101A68 + 1) = 0xFFFFFFFFLL;
      qword_254101A48 = (uint64_t)&off_24ED7DAA8;
      qword_254101A78 = (uint64_t)"MeshAssetModel";
      dword_254101A80 = 0;
      xmmword_254101A88 = 0u;
      xmmword_254101A98 = 0u;
      xmmword_254101AA8 = 0u;
      qword_254101AB8 = 0;
      __cxa_guard_release(&qword_254100E60);
    }
    qword_254100E70 = (uint64_t)&qword_254101A48;
    *(_QWORD *)&v47 = 0xCC420CE3DFC0E00CLL;
    *((_QWORD *)&v47 + 1) = "MeshAssetModel";
    re::StringID::destroyString((re::StringID *)&v47);
    xmmword_254101A68 = v45;
    v4 = atomic_load((unsigned __int8 *)&qword_254100E68);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100E68);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254101448 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v19 = re::introspect_AABB((re::IntrospectionBase **)1);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "boundingBox";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x1000000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_254101450 = v20;
        v21 = re::introspectionAllocator((re *)v20);
        v22 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
        v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = "orientedBoundingBox";
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0x3000000003;
        *(_DWORD *)(v23 + 40) = 0;
        *(_QWORD *)(v23 + 48) = 0;
        *(_QWORD *)(v23 + 56) = 0;
        *(_DWORD *)(v23 + 64) = 0;
        qword_254101458 = v23;
        v24 = re::introspectionAllocator((re *)v23);
        re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkeleton>>::get();
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "skeletons";
        *(_QWORD *)(v25 + 16) = &qword_254101128;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0xE800000004;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_254101460 = v25;
        v26 = re::introspectionAllocator((re *)v25);
        re::IntrospectionInfo<re::DynamicArray<re::MeshAssetBlendShapeData>>::get();
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "meshBlendShapeData";
        *(_QWORD *)(v27 + 16) = &qword_254101168;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0x7000000005;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_254101468 = v27;
        v28 = re::introspectionAllocator((re *)v27);
        re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSkinningData>>::get();
        v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = "meshSkinningData";
        *(_QWORD *)(v29 + 16) = &qword_2541011A8;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0x9800000006;
        *(_DWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
        qword_254101470 = v29;
        v30 = re::introspectionAllocator((re *)v29);
        re::IntrospectionInfo<re::DynamicArray<re::MeshAssetPart>>::get();
        v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
        *(_DWORD *)v31 = 1;
        *(_QWORD *)(v31 + 8) = "meshParts";
        *(_QWORD *)(v31 + 16) = &qword_2541011E8;
        *(_QWORD *)(v31 + 24) = 0;
        *(_QWORD *)(v31 + 32) = 0xC000000007;
        *(_DWORD *)(v31 + 40) = 0;
        *(_QWORD *)(v31 + 48) = 0;
        *(_QWORD *)(v31 + 56) = 0;
        *(_DWORD *)(v31 + 64) = 0;
        qword_254101478 = v31;
        v32 = re::introspectionAllocator((re *)v31);
        re::IntrospectionInfo<re::DynamicArray<re::MeshLodLevelInfo>>::get();
        v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
        *(_DWORD *)v33 = 1;
        *(_QWORD *)(v33 + 8) = "lodLevelInfos";
        *(_QWORD *)(v33 + 16) = &qword_254101228;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = 0x11000000008;
        *(_DWORD *)(v33 + 40) = 0;
        *(_QWORD *)(v33 + 48) = 0;
        *(_QWORD *)(v33 + 56) = 0;
        *(_DWORD *)(v33 + 64) = 0;
        qword_254101480 = v33;
        v34 = re::introspectionAllocator((re *)v33);
        re::IntrospectionInfo<re::DynamicArray<re::MeshAssetContactDeformerData>>::get();
        v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
        *(_DWORD *)v35 = 1;
        *(_QWORD *)(v35 + 8) = "contactDeformerData";
        *(_QWORD *)(v35 + 16) = &qword_254101268;
        *(_QWORD *)(v35 + 24) = 0;
        *(_QWORD *)(v35 + 32) = 0x13800000009;
        *(_DWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 48) = 0;
        *(_QWORD *)(v35 + 56) = 0;
        *(_DWORD *)(v35 + 64) = 0;
        qword_254101488 = v35;
        v36 = re::introspectionAllocator((re *)v35);
        re::IntrospectionInfo<re::DynamicArray<re::MeshAssetSmoothDeformerData>>::get();
        v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
        *(_DWORD *)v37 = 1;
        *(_QWORD *)(v37 + 8) = "smoothDeformerData";
        *(_QWORD *)(v37 + 16) = &qword_2541012A8;
        *(_QWORD *)(v37 + 24) = 0;
        *(_QWORD *)(v37 + 32) = 0x1600000000ALL;
        *(_DWORD *)(v37 + 40) = 0;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 56) = 0;
        *(_DWORD *)(v37 + 64) = 0;
        qword_254101490 = v37;
        v38 = re::introspectionAllocator((re *)v37);
        re::IntrospectionInfo<re::DynamicArray<re::MeshAssetWrapDeformerData>>::get();
        v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
        *(_DWORD *)v39 = 1;
        *(_QWORD *)(v39 + 8) = "wrapDeformerData";
        *(_QWORD *)(v39 + 16) = &qword_2541012E8;
        *(_QWORD *)(v39 + 24) = 0;
        *(_QWORD *)(v39 + 32) = 0x1880000000BLL;
        *(_DWORD *)(v39 + 40) = 0;
        *(_QWORD *)(v39 + 48) = 0;
        *(_QWORD *)(v39 + 56) = 0;
        *(_DWORD *)(v39 + 64) = 0;
        qword_254101498 = v39;
        v40 = re::introspectionAllocator((re *)v39);
        re::IntrospectionInfo<re::DynamicArray<re::MeshAssetOffsetsDeformerData>>::get();
        v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
        *(_DWORD *)v41 = 1;
        *(_QWORD *)(v41 + 8) = "offsetsDeformerData";
        *(_QWORD *)(v41 + 16) = &qword_254101328;
        *(_QWORD *)(v41 + 24) = 0;
        *(_QWORD *)(v41 + 32) = 0x1B00000000CLL;
        *(_DWORD *)(v41 + 40) = 0;
        *(_QWORD *)(v41 + 48) = 0;
        *(_QWORD *)(v41 + 56) = 0;
        *(_DWORD *)(v41 + 64) = 0;
        qword_2541014A0 = v41;
        __cxa_guard_release(&qword_254100E68);
      }
    }
    qword_254101A58 = 0x20000000008;
    v1 = &qword_254101A48;
    dword_254101A60 = 16;
    word_254101A64 = 0;
    dword_254101A80 = 12;
    *(_QWORD *)&xmmword_254101A88 = &qword_254101448;
    *((_QWORD *)&xmmword_254101A88 + 1) = re::internal::defaultConstruct<re::MeshAssetModel>;
    *(_QWORD *)&xmmword_254101A98 = re::internal::defaultDestruct<re::MeshAssetModel>;
    *(_QWORD *)&xmmword_254101AA8 = 0;
    *((_QWORD *)&xmmword_254101A98 + 1) = 0;
    *((_QWORD *)&xmmword_254101AA8 + 1) = re::internal::defaultConstructV2<re::MeshAssetModel>;
    qword_254101AB8 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetModel>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101A48, v3);
    v47 = v45;
    if ((byte_254100D34 & 1) == 0)
    {
LABEL_7:
      byte_254100D34 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101368, 0);
      qword_254101378 = 0x2800000003;
      dword_254101380 = v5;
      word_254101384 = 0;
      *(_QWORD *)&xmmword_254101388 = 0;
      *((_QWORD *)&xmmword_254101388 + 1) = 0xFFFFFFFFLL;
      qword_254101398 = (uint64_t)v1;
      qword_2541013A0 = 0;
      qword_254101368 = (uint64_t)&off_24ED39CC0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254101368, (const re::IntrospectionBase *)&v45);
      if ((BYTE8(v45) & 1) != 0)
        v8 = v46;
      else
        v8 = (char *)&v45 + 9;
      if ((_QWORD)v45 && (BYTE8(v45) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
      v43 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v42 + 1) = v10;
      }
      else
      {
        v47 = v43;
        re::TypeBuilder::beginListType((uint64_t)&v45, v44, 1, 0x28uLL, 8uLL, &v47);
        re::TypeBuilder::setConstructor((uint64_t)&v45, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v45, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v45, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v45, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v45, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v45, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v45, v11);
      }
      xmmword_254101388 = v42;
      re::StringID::destroyString((re::StringID *)v44);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshAssetInstance>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30[2];
  __int128 v31;
  const char *v32;
  __int128 v33;

  v0 = atomic_load((unsigned __int8 *)&qword_254100F08);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100F08))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541013A8);
    qword_2541013A8 = (uint64_t)&off_24ED39D58;
    __cxa_guard_release(&qword_254100F08);
  }
  if ((byte_254100D35 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254100E88;
    if (qword_254100E88)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254100E78);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254100E78))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101AC0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101AD0 = 0;
      *(_QWORD *)&xmmword_254101AE0 = 0;
      *((_QWORD *)&xmmword_254101AE0 + 1) = 0xFFFFFFFFLL;
      qword_254101AC0 = (uint64_t)&off_24ED7DAA8;
      qword_254101AF0 = (uint64_t)"MeshAssetInstance";
      dword_254101AF8 = 0;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      qword_254101B30 = 0;
      __cxa_guard_release(&qword_254100E78);
    }
    qword_254100E88 = (uint64_t)&qword_254101AC0;
    *(_QWORD *)&v33 = 0xBA5A09BFFA142D30;
    *((_QWORD *)&v33 + 1) = "MeshAssetInstance";
    re::StringID::destroyString((re::StringID *)&v33);
    xmmword_254101AE0 = v31;
    v4 = atomic_load((unsigned __int8 *)&qword_254100E80);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254100E80);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254100F98 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v19 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "transform";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x1000000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_254100FA0 = v20;
        v21 = re::introspectionAllocator((re *)v20);
        v23 = re::introspect_uint32_t((re *)1, v22);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "modelIndex";
        *(_QWORD *)(v24 + 16) = v23;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0x5000000003;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_254100FA8 = v24;
        v25 = re::introspectionAllocator((re *)v24);
        v26 = re::introspect_MeshLodSelectOptions((re::IntrospectionBase **)1);
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "lodSelectOptions";
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0x5400000004;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_254100FB0 = v27;
        __cxa_guard_release(&qword_254100E80);
      }
    }
    qword_254101AD0 = 0x6000000008;
    v1 = &qword_254101AC0;
    dword_254101AD8 = 16;
    word_254101ADC = 0;
    dword_254101AF8 = 4;
    qword_254101B00 = (uint64_t)&qword_254100F98;
    qword_254101B08 = (uint64_t)re::internal::defaultConstruct<re::MeshAssetInstance>;
    qword_254101B10 = (uint64_t)re::internal::defaultDestruct<re::MeshAssetInstance>;
    qword_254101B20 = 0;
    qword_254101B18 = 0;
    qword_254101B28 = (uint64_t)re::internal::defaultConstructV2<re::MeshAssetInstance>;
    qword_254101B30 = (uint64_t)re::internal::defaultDestructV2<re::MeshAssetInstance>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101AC0, v3);
    v33 = v31;
    if ((byte_254100D35 & 1) == 0)
    {
LABEL_7:
      byte_254100D35 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541013A8, 0);
      qword_2541013B8 = 0x2800000003;
      dword_2541013C0 = v5;
      word_2541013C4 = 0;
      *(_QWORD *)&xmmword_2541013C8 = 0;
      *((_QWORD *)&xmmword_2541013C8 + 1) = 0xFFFFFFFFLL;
      qword_2541013D8 = (uint64_t)v1;
      qword_2541013E0 = 0;
      qword_2541013A8 = (uint64_t)&off_24ED39D58;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541013A8, (const re::IntrospectionBase *)&v31);
      if ((BYTE8(v31) & 1) != 0)
        v8 = v32;
      else
        v8 = (char *)&v31 + 9;
      if ((_QWORD)v31 && (BYTE8(v31) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v31 + 40))();
      v29 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v30);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v28 + 1) = v10;
      }
      else
      {
        v33 = v29;
        re::TypeBuilder::beginListType((uint64_t)&v31, v30, 1, 0x28uLL, 8uLL, &v33);
        re::TypeBuilder::setConstructor((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v31, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v31, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v31, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v31, v11);
      }
      xmmword_2541013C8 = v28;
      re::StringID::destroyString((re::StringID *)v30);
    }
  }
}

uint64_t re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  re::DynamicArray<re::MeshAssetModel>::operator=(a3, a2);
  re::DynamicArray<re::MeshAssetInstance>::operator=(a3 + 40, a2 + 5);
  v5 = (uint64_t *)(a3 + 80);
  re::DynamicArray<re::MeshAssetSkeleton>::operator=(a3 + 80, a2 + 10);
  re::DynamicArray<float>::operator=(a3 + 120, a2 + 15);
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v8 + (v7 << 9);
    v26 = v9;
    do
    {
      v10 = *(_QWORD *)(a3 + 96);
      v11 = *(_QWORD *)(v8 + 248);
      if (v11)
      {
        if (v10 == -1)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_22:
          re::internal::assertLog((re::internal *)7, v6, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v10, v10, v11);
          _os_crash();
          __break(1u);
        }
        v12 = v10 + v11;
        if (__CFADD__(v10, v11))
          goto LABEL_22;
        v13 = *(uint64_t **)(v8 + 264);
        if (v10 >= v12)
        {
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkeleton const*,re::MeshAssetSkeleton const*,re::MeshAssetSkeleton*>(*(uint64_t **)(v8 + 264), &v13[14 * v11], *(_QWORD *)(a3 + 112) + 112 * v10);
        }
        else
        {
          re::DynamicArray<re::MeshAssetSkeleton>::growCapacity(v5, v10 + v11);
          v14 = *(_QWORD *)(a3 + 96);
          v15 = &v13[14 * (v14 - v10)];
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkeleton const*,re::MeshAssetSkeleton const*,re::MeshAssetSkeleton*>(v13, v15, *(_QWORD *)(a3 + 112) + 112 * v10);
          if (v14 - v10 != v11)
          {
            v16 = 0;
            v17 = *(_QWORD *)(a3 + 112) + 112 * *(_QWORD *)(a3 + 96);
            v18 = 112 * v10 + 112 * v11 - 112 * v14;
            do
            {
              re::StringID::StringID((re::StringID *)(v17 + v16), (const StringID *)&v15[v16 / 8]);
              re::FixedArray<re::StringID>::FixedArray((unint64_t *)(v17 + v16 + 16), (uint64_t)&v15[v16 / 8 + 2]);
              re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v17 + v16 + 40), (uint64_t)&v15[v16 / 8 + 5]);
              re::FixedArray<re::GenericSRT<float>>::FixedArray((_QWORD *)(v17 + v16 + 64), (uint64_t)&v15[v16 / 8 + 8]);
              re::FixedArray<re::Matrix4x4<float>>::FixedArray((uint64_t *)(v17 + v16 + 88), (uint64_t)&v15[v16 / 8 + 11]);
              v16 += 112;
            }
            while (v18 != v16);
          }
          *(_QWORD *)(a3 + 96) = v12;
          v9 = v26;
          v5 = (uint64_t *)(a3 + 80);
        }
        ++*(_DWORD *)(a3 + 104);
      }
      v19 = *(_QWORD *)(v8 + 168);
      if (v19)
      {
        v20 = *(_DWORD **)(v8 + 184);
        v21 = 144 * v19;
        do
        {
          *v20 += v10;
          v20 += 36;
          v21 -= 144;
        }
        while (v21);
      }
      v8 += 512;
    }
    while (v8 != v9);
    v22 = *(_QWORD *)(a3 + 16);
    if (v22)
    {
      v23 = v22 << 9;
      v24 = *(_QWORD *)(a3 + 32) + 232;
      do
      {
        re::DynamicArray<re::MeshAssetSkeleton>::operator=(v24, v5);
        v24 += 512;
        v23 -= 512;
      }
      while (v23);
    }
  }
  return 1;
}

uint64_t re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)1>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  re::DynamicArray<re::MeshAssetModel>::operator=(a3, a2);
  re::DynamicArray<re::MeshAssetInstance>::operator=(a3 + 40, a2 + 5);
  re::DynamicArray<re::MeshAssetSkeleton>::operator=(a3 + 80, a2 + 10);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<float>::operator=(a3 + 120, a2 + 15);
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v34 = 0;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v8 + (v6 << 9);
    do
    {
      v10 = *(_QWORD *)(v8 + 208);
      if (v10)
      {
        v11 = v10 << 8;
        v12 = (unsigned __int16 *)(*(_QWORD *)(v8 + 224) + 56);
        do
        {
          v13 = *v12;
          if (v13 == 0xFFFF)
          {
            v14 = v33;
            v15 = v29;
            if (v33 + 1 > 32 * v29)
            {
              re::BucketArray<unsigned short *,32ul>::setBucketsCapacity(&v28, (v33 + 32) >> 5);
              v15 = v29;
            }
            if (v15 <= v14 >> 5)
            {
              v35 = 0;
              v47 = 0u;
              v48 = 0u;
              v45 = 0u;
              v46 = 0u;
              v44 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v36 = 136315906;
              v37 = "operator[]";
              v38 = 1024;
              v39 = 858;
              v40 = 2048;
              v41 = v14 >> 5;
              v42 = 2048;
              v43 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v16 = v32;
            if ((v30 & 1) != 0)
              v16 = &v31;
            v17 = v16[v14 >> 5];
            ++v33;
            ++v34;
            *(_QWORD *)(v17 + 8 * (v14 & 0x1F)) = v12;
          }
          else if (v13 > v7)
          {
            v7 = *v12;
          }
          v12 += 128;
          v11 -= 256;
        }
        while (v11);
      }
      v8 += 512;
    }
    while (v8 != v9);
  }
  else
  {
    v7 = 0;
  }
  v18 = v33;
  if (v33)
  {
    v19 = 0;
    v20 = v7 + 1;
    do
      **(_WORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v28, v19++) = v20;
    while (v18 != v19);
    v21 = 0;
    do
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v28, v21++);
    while (v18 != v21);
  }
  v22 = v28;
  if (v29)
  {
    v23 = v32;
    v24 = v30;
    v25 = v29 - 1;
    do
    {
      if ((v24 & 1) != 0)
        v26 = &v31;
      else
        v26 = v23;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 40))(v22, v26[v25]);
      v24 += 2;
      v30 = v24;
      --v25;
    }
    while (v25 != -1);
  }
  else if (!v28)
  {
    return 1;
  }
  if ((v30 & 1) == 0)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 40))(v22, v32);
  return 1;
}

BOOL re::meshAssetDataUpgrade<(re::MeshAssetDataVersion)2>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  float32x4_t *v11;
  uint32x4_t v12;
  unint64_t v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  _BOOL8 result;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint8_t buf[48];
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v5 = (uint64_t)a2;
  v53 = *MEMORY[0x24BDAC8D0];
  re::DynamicArray<re::MeshAssetModel>::operator=(a3, a2);
  re::DynamicArray<re::MeshAssetInstance>::operator=(a3 + 40, (uint64_t *)(v5 + 40));
  re::DynamicArray<re::MeshAssetSkeleton>::operator=(a3 + 80, (uint64_t *)(v5 + 80));
  v6 = re::DynamicArray<float>::operator=(a3 + 120, (uint64_t *)(v5 + 120));
  v7 = *(_QWORD *)(a3 + 16);
  if (!v7)
    return 1;
  v8 = *(_QWORD **)(a3 + 32);
  v43 = &v8[64 * v7];
  while (1)
  {
    v44 = *((unsigned int *)v8 + 52);
    if (*((_DWORD *)v8 + 52))
      break;
LABEL_26:
    v8 += 64;
    if (v8 == v43)
    {
      v25 = *(_QWORD *)(a3 + 16);
      if (v25)
      {
        v26 = *(float32x4_t **)(a3 + 32);
        v27 = &v26[32 * v25];
        v45 = vdupq_n_s32(0x7F800000u);
        while (1)
        {
          if (v26[10].i64[1])
          {
            v28 = v26[13].u32[0];
            if (v26[13].i32[0])
            {
              v29 = 0;
              v30.i64[0] = 0x7F0000007FLL;
              v30.i64[1] = 0x7F0000007FLL;
              v31 = 80;
              v32 = 96;
              v33 = (float32x4_t)v45;
              while (v26[13].i64[0] > v29)
              {
                if (v26[10].i64[1] <= v29)
                  goto LABEL_46;
                v47 = v33;
                v49 = v30;
                re::AABB::transform((float32x4_t *)(v26[14].i64[0] + v32), (float32x4_t *)(v26[11].i64[1] + v31), (uint64_t)buf);
                v35 = v47;
                v34 = v49;
                v35.i32[3] = 0;
                v36 = *(float32x4_t *)buf;
                v37 = *(float32x4_t *)&buf[16];
                v36.i32[3] = 0;
                v34.i32[3] = 0;
                v37.i32[3] = 0;
                v33 = vminnmq_f32(v35, v36);
                v30 = vmaxnmq_f32(v34, v37);
                ++v29;
                v32 += 256;
                v31 += 144;
                if (v28 == v29)
                  goto LABEL_37;
              }
              v51 = 0u;
              v52 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_46:
              v51 = 0u;
              v52 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_47:
              v51 = 0u;
              v52 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v30.i64[0] = 0x7F0000007FLL;
            v30.i64[1] = 0x7F0000007FLL;
            v33 = (float32x4_t)v45;
LABEL_37:
            v26[1] = v33;
            v26[2] = v30;
          }
          v26 += 32;
          if (v26 == v27)
            return 1;
        }
      }
      return 1;
    }
  }
  v9 = 0;
  while (1)
  {
    v10 = v8[26];
    if (v10 <= v9)
      goto LABEL_43;
    v3 = v8[28];
    v11 = (float32x4_t *)(v3 + (v9 << 8));
    v46 = v11[7];
    v48 = v11[6];
    v12 = (uint32x4_t)vcgtq_f32(v48, v46);
    v12.i32[3] = v12.i32[2];
    if ((vmaxvq_u32(v12) & 0x80000000) != 0)
    {
      v10 = v11[1].u64[0];
      v13 = 0;
      if ((_DWORD)v10)
      {
        v5 = 8;
        while (v10 != v13)
        {
          v14 = (_QWORD *)(v11[2].i64[0] + v5);
          if ((*v14 & 1) != 0)
            v15 = (const char *)v14[1];
          else
            v15 = (char *)v14 + 1;
          v6 = strcmp(v15, "vertexPosition");
          if (!(_DWORD)v6)
          {
            v13 = v13;
            goto LABEL_19;
          }
          ++v13;
          v5 += 80;
          if (v10 == v13)
            goto LABEL_7;
        }
        v51 = 0u;
        v52 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_43:
        v51 = 0u;
        v52 = 0u;
        memset(buf, 0, sizeof(buf));
        v39 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_44;
      }
LABEL_19:
      if (v13 != v10)
        break;
    }
LABEL_7:
    if (++v9 == v44)
      goto LABEL_26;
  }
  if (v10 <= v13)
    goto LABEL_47;
  v16 = v11[2].i64[0];
  v10 = *(_QWORD *)(v16 + 80 * v13 + 48);
  v17 = v3 + (v9 << 8);
  v19 = *(_DWORD *)(v17 + 48);
  v5 = v17 + 48;
  v18 = v19;
  if (v19 <= v10 / 0xC)
  {
    if (v18)
    {
      v20 = *(_QWORD *)(v16 + 80 * v13 + 64);
      v21 = v20 + 12 * v18;
      do
      {
        v22.i64[0] = *(_QWORD *)v20;
        v23 = v48;
        v23.i32[3] = 0;
        v22.i64[1] = *(unsigned int *)(v20 + 8);
        v48 = vminnmq_f32(v23, v22);
        v11[6] = v48;
        v24 = v46;
        v24.i32[3] = 0;
        v46 = vmaxnmq_f32(v24, v22);
        v11[7] = v46;
        v20 += 12;
      }
      while (v20 != v21);
    }
    goto LABEL_7;
  }
  v39 = *re::assetTypesLogObjects((re *)v6);
  result = os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
LABEL_44:
  v40 = v8[1];
  v41 = *(_QWORD *)(v3 + (v9 << 8) + 80);
  v42 = *(_DWORD *)v5;
  *(_DWORD *)buf = 136315906;
  *(_QWORD *)&buf[4] = v40;
  *(_WORD *)&buf[12] = 2080;
  *(_QWORD *)&buf[14] = v41;
  *(_WORD *)&buf[22] = 1024;
  *(_DWORD *)&buf[24] = v42;
  *(_WORD *)&buf[28] = 2048;
  *(_QWORD *)&buf[30] = v10;
  _os_log_error_impl(&dword_224FE9000, v39, OS_LOG_TYPE_ERROR, "Invalid vertex count in MeshAssetModel. Model: %s, Part: %s, Vertex Count: %u, Data Size: %lu", buf, 0x26u);
  return 0;
}

double re::internal::defaultConstruct<re::MeshAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MeshAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;

  v5 = (_QWORD *)(a3 + 120);
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 144);
  }
  re::DynamicArray<re::MeshAssetSkeleton>::deinit(a3 + 80);
  re::DynamicArray<re::MeshAssetInstance>::deinit(a3 + 40);
  return re::DynamicArray<re::MeshAssetModel>::deinit(a3);
}

double re::internal::defaultConstructV2<re::MeshAssetData>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MeshAssetData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  re::DynamicArray<re::MeshAssetSkeleton>::deinit(a1 + 80);
  re::DynamicArray<re::MeshAssetInstance>::deinit(a1 + 40);
  return re::DynamicArray<re::MeshAssetModel>::deinit(a1);
}

uint64_t re::introspect_MeshAssetData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshAssetData", (uint64_t (*)(re::internal *))re::allocInfo_MeshAssetData, (re::IntrospectionBase *(*)(void))re::initInfo_MeshAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshAssetData>, this);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetBuffer>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetBuffer>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetBuffer>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBuffer>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetBuffer>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetBuffer>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshAssetBuffer>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetBuffer>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::MeshAssetBuffer>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetBuffer>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::MeshAssetBuffer>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetBuffer>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetBuffer>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  __n128 v8;
  re::IntrospectionBase *v9;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  re::DynamicString::setCapacity(&v11, 0);
  *((_QWORD *)&v15 + 1) = 0;
  v14 = 0uLL;
  *((_QWORD *)&v13 + 1) = 0;
  LODWORD(v15) = 0;
  LOWORD(v16) = 256;
  v8.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add(a4, (uint64_t)&v11);
  if (*((_QWORD *)&v13 + 1))
  {
    if (*((_QWORD *)&v15 + 1))
      (*(void (**)(double))(**((_QWORD **)&v13 + 1) + 40))(v8.n128_f64[0]);
    *((_QWORD *)&v15 + 1) = 0;
    v14 = 0uLL;
    *((_QWORD *)&v13 + 1) = 0;
    LODWORD(v15) = v15 + 1;
  }
  if (v11 && (v12 & 1) != 0)
    (*(void (**)(__n128))(*v11 + 40))(v8);
  v9 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + 80 * *((_QWORD *)a4 + 2) - 80);
  re::introspectionInitElement(a2, a3, a1[6], v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBuffer>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBuffer>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 80 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 80 * a3;
}

_anonymous_namespace_ *re::DynamicArray<re::MeshAssetBuffer>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 80 * a2;
    v9 = a2;
    do
    {
      v10 = *((_QWORD *)v3 + 4);
      v11 = v10 + v8;
      v12 = *(_QWORD *)(v10 + v8 + 32);
      if (v12)
      {
        if (*(_QWORD *)(v11 + 64))
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        *(_QWORD *)(v11 + 64) = 0;
        *(_QWORD *)(v10 + v8 + 40) = 0;
        *(_QWORD *)(v10 + v8 + 48) = 0;
        *(_QWORD *)(v10 + v8 + 32) = 0;
        ++*(_DWORD *)(v10 + v8 + 56);
      }
      result = *(_anonymous_namespace_ **)v11;
      if (*(_QWORD *)v11)
      {
        if ((*(_BYTE *)(v10 + v8 + 8) & 1) != 0)
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v10 + v8 + 16));
        *(_OWORD *)v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
      }
      ++v9;
      v8 += 80;
    }
    while (v9 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetBuffer>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 80 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_DWORD *)(v7 + 56) = 0;
        v6 += 80;
        *(_WORD *)(v7 + 72) = 256;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetBuffer>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetBuffer>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetBuffer>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetBuffer>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::MeshAssetBuffer>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 80 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 80;
        v11 -= 80;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 80 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBuffer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re *a1@<X0>, uint64_t *a2@<X1>, re **a3@<X2>, __int128 *a4@<X3>, re **a5@<X8>)
{
  uint64_t v10;
  re **v11;
  re *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  _anonymous_namespace_ *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  const char *v23;
  int v24;
  _QWORD v25[2];
  __int128 v26;
  StringID v27;
  const char **v28;

  v10 = (uint64_t)a1 + 200;
  v11 = (re **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v11)
  {
    v12 = *v11;
    *a5 = a1;
    a5[1] = v12;
    return;
  }
  v22 = 0x449AD97C4B77BED4;
  v23 = "_CompareFunc";
  v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v22);
  if (v13)
  {
    v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v22);
    if (a1)
    {
      v15 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v22);
  }
  *(_QWORD *)&v27.var0 = 0x449AD97C4B77BED4;
  v27.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v27, 1u, 0, &v22);
  v15 = v22;
  v14 = (uint64_t)v23;
  re::StringID::destroyString((re::StringID *)&v27);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, a3, &v22);
  re::TypeInfo::TypeInfo((uint64_t)&v27, (uint64_t)&v23);
  if (!v15
    || (v16 = *v28,
        v22 = v14,
        v23 = v16,
        v24 = -1,
        (v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v27.var0 + 768, &v22)) == 0)|| !*(_QWORD *)v17)
  {
    v26 = *(_OWORD *)a3;
    v25[0] = v15;
    v25[1] = v14;
    v17 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v26, -1, (uint64_t)v25, (uint64_t)re::internal::less<re::DynamicString>, 0);
  }
  v18 = *(_OWORD *)a3;
  v20 = *a4;
  v21 = v18;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v22, a2, 1, 0x30uLL, 8uLL, &v21, &v20);
  re::TypeBuilder::setConstructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v22, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v22, a1, a5);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v22, v19);
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  re::DynamicString::setCapacity(&v12, 0);
  v10 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, (re::DynamicString *)&v12);
  if (v12 && (v13 & 1) != 0)
    (*(void (**)(void))(*v12 + 40))();
  re::introspectionInitElement(a2, a3, a1[8], v10);
  return v10;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 20;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 80 * v10 + 16, *(_QWORD *)(a2 + 16) + 80 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 80 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, re::DynamicString *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 80 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 80 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::DynamicString::operator=((re::DynamicString *)(v10 + 80 * v9 + 48), a3);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 80 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, (re::DynamicString *)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 80 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 20;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 80 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 80 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionFixedArray<re::SkinningInfluence>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::SkinningInfluence>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<re::SkinningInfluence>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<re::SkinningInfluence>::destroy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

void re::IntrospectionFixedArray<re::SkinningInfluence>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t v11;

  re::FixedArray<re::SkinningInfluence>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 8;
    }
    while (a5 != v11);
  }
}

uint64_t re::IntrospectionFixedArray<re::SkinningInfluence>::deinit(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<re::SkinningInfluence>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::SkinningInfluence>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::SkinningInfluence>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 8 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *a1;
  if (v8)
  {
    if (a1[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  re::FixedArray<re::SkinningInfluence>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = a1[1];
    if (v10)
    {
      v11 = (char *)a1[2];
      v12 = 8 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 8 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::SkinningInfluence>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

_QWORD *re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::destroy(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a2);
}

void re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t v11;

  re::FixedArray<re::MeshAssetContactDeformerTarget>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 32;
    }
    while (a5 != v11);
  }
}

_QWORD *re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::deinit(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::MeshAssetContactDeformerTarget>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 32 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(_QWORD *a1)
{
  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a1);
  return re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  char v13[8];
  uint64_t v14;

  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(a1);
  re::FixedArray<re::MeshAssetContactDeformerTarget>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = a1[1];
    if (v9)
    {
      v10 = (char *)a1[2];
      v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 32 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::MeshAssetContactDeformerTarget>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetSkeleton>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshAssetSkeleton>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshAssetSkeleton>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  re::DynamicArray<re::MeshAssetSkeleton>::add(this, v10);
  if (*((_QWORD *)&v15 + 1))
  {
    if ((_QWORD)v16)
    {
      (*(void (**)(void))(**((_QWORD **)&v15 + 1) + 40))();
      v16 = 0uLL;
    }
    *((_QWORD *)&v15 + 1) = 0;
  }
  if ((_QWORD)v14)
  {
    if (*((_QWORD *)&v14 + 1))
    {
      (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      *((_QWORD *)&v14 + 1) = 0;
      *(_QWORD *)&v15 = 0;
    }
    *(_QWORD *)&v14 = 0;
  }
  if (*((_QWORD *)&v12 + 1))
  {
    if ((_QWORD)v13)
    {
      (*(void (**)(void))(**((_QWORD **)&v12 + 1) + 40))();
      v13 = 0uLL;
    }
    *((_QWORD *)&v12 + 1) = 0;
  }
  re::FixedArray<re::StringID>::deinit(&v11);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 112 * *((_QWORD *)this + 2) - 112);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkeleton>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

_QWORD *re::DynamicArray<re::MeshAssetSkeleton>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetSkeleton>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 112 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = 0;
  v7 = a2[3];
  v5[2] = a2[2];
  v5[3] = v7;
  a2[2] = 0;
  a2[3] = 0;
  v8 = v5[4];
  v5[4] = a2[4];
  a2[4] = v8;
  v5[5] = 0;
  v5[6] = 0;
  v5[7] = 0;
  v9 = a2[6];
  v5[5] = a2[5];
  v5[6] = v9;
  a2[5] = 0;
  a2[6] = 0;
  v10 = v5[7];
  v5[7] = a2[7];
  a2[7] = v10;
  v5[8] = 0;
  v5[9] = 0;
  v5[10] = 0;
  v11 = a2[9];
  v5[8] = a2[8];
  v5[9] = v11;
  a2[8] = 0;
  a2[9] = 0;
  v12 = v5[10];
  v5[10] = a2[10];
  a2[10] = v12;
  v5[11] = 0;
  v5[12] = 0;
  v5[13] = 0;
  v13 = a2[12];
  v5[11] = a2[11];
  v5[12] = v13;
  a2[11] = 0;
  a2[12] = 0;
  v14 = v5[13];
  v5[13] = a2[13];
  a2[13] = v14;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetSkeleton>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetSkeleton>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetSkeleton>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 112 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkeleton>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetBlendShapeData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshAssetBlendShapeData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshAssetBlendShapeData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  _OWORD v11[2];
  uint64_t v12;

  v10[0] = 0;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v10[1] = (uint64_t)&str_110;
  re::DynamicArray<re::MeshAssetBlendShapeData>::add(this, v10);
  re::FixedArray<re::BlendShapeDefinition>::deinit(v11);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 56 * *((_QWORD *)this + 2) - 56);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetBlendShapeData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

_QWORD *re::DynamicArray<re::MeshAssetBlendShapeData>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetBlendShapeData>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 56 * v4;
  v6 = *a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v7 = a2[3];
  *(_QWORD *)(v5 + 16) = a2[2];
  *(_QWORD *)(v5 + 24) = v7;
  a2[2] = 0;
  a2[3] = 0;
  v8 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = a2[4];
  a2[4] = v8;
  *(_QWORD *)(v5 + 40) = a2[5];
  *(_WORD *)(v5 + 48) = *((_WORD *)a2 + 24);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::MeshAssetBlendShapeData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetBlendShapeData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetBlendShapeData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetBlendShapeData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 56 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 56;
        v11 -= 56;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 56 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetBlendShapeData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetSkinningData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshAssetSkinningData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::MeshAssetSkinningData>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __n128 v8;
  re::IntrospectionBase *v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v11 = 0xFFFFFFFFLL;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v8 = re::DynamicArray<re::MeshAssetSkinningData>::add(this, (uint64_t)&v11);
  if ((_QWORD)v15)
  {
    if (*((_QWORD *)&v15 + 1))
    {
      (*(void (**)(__n128))(*(_QWORD *)v15 + 40))(v8);
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 0;
    }
    *(_QWORD *)&v15 = 0;
  }
  if (*((_QWORD *)&v13 + 1))
  {
    if ((_QWORD)v14)
    {
      (*(void (**)(__n128))(**((_QWORD **)&v13 + 1) + 40))(v8);
      v14 = 0uLL;
    }
    *((_QWORD *)&v13 + 1) = 0;
  }
  if ((_QWORD)v12 && *((_QWORD *)&v12 + 1))
    (*(void (**)(__n128))(*(_QWORD *)v12 + 40))(v8);
  v9 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 144 * *((_QWORD *)this + 2) - 144);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSkinningData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 144 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 144 * a3;
}

_QWORD *re::DynamicArray<re::MeshAssetSkinningData>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 144 * a2 + 40;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = (_QWORD *)(v10 + v8);
      v12 = *(_QWORD *)(v10 + v8 + 16);
      if (v12)
      {
        if (v11[3])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v10 + v8 + 32));
          v11[3] = 0;
          v11[4] = 0;
        }
        v11[2] = 0;
      }
      v13 = *(v11 - 1);
      if (v13)
      {
        v14 = (_QWORD *)(v10 + v8);
        if (*(_QWORD *)(v10 + v8))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, v14[1]);
          *v14 = 0;
          v14[1] = 0;
        }
        *(v11 - 1) = 0;
      }
      v15 = v10 + v8;
      result = *(_QWORD **)(v10 + v8 - 32);
      if (result)
      {
        if (*(_QWORD *)(v15 - 24))
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(_QWORD *)(v10 + v8 - 16));
          *(_QWORD *)(v15 - 24) = 0;
          *(_QWORD *)(v15 - 16) = 0;
        }
        *(_QWORD *)(v15 - 32) = 0;
      }
      ++v9;
      v8 += 144;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 144 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_DWORD *)v7 = -1;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(_OWORD *)(v7 + 24) = 0uLL;
        *(_OWORD *)(v7 + 40) = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_OWORD *)(v7 + 72) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(_OWORD *)(v7 + 120) = 0uLL;
        *(_QWORD *)(v7 + 136) = 0;
        v6 += 144;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetSkinningData>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetSkinningData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetSkinningData>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 144 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 144;
        v11 -= 144;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 144 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 144 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSkinningData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetPart>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetPart>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetPart>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetPart>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetPart>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetPart>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshAssetPart>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetPart>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetPart>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::MeshAssetPart>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::MeshAssetPart>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::MeshAssetPart>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetPart>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __int128 v8;
  re::IntrospectionBase *v9;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  int32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[40];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v16 = 0;
  v25 = 0u;
  memset(v23, 0, sizeof(v23));
  memset(v11, 0, sizeof(v11));
  BYTE12(v12) = 1;
  DWORD1(v13) = 1;
  WORD4(v13) = -1;
  v15 = &str_110;
  *(_QWORD *)&v8 = 0x7F0000007FLL;
  *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
  v17 = vdupq_n_s32(0x7F800000u);
  v18 = v8;
  v24 = 0x7FFFFFFF00000000;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  re::DynamicArray<re::MeshAssetPart>::add(this, (uint64_t)v11);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v23[8]);
  re::StringID::destroyString((re::StringID *)((char *)&v14 + 8));
  re::DynamicArray<re::MeshAssetBuffer>::deinit((uint64_t)v11);
  v9 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + (*((_QWORD *)this + 2) << 8) - 256);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetPart>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetPart>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 8);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 8);
}

_QWORD *re::DynamicArray<re::MeshAssetPart>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v10 = a2 << 8;
    v11 = a2;
    do
    {
      v12 = v3[4] + v10;
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v12 + 200));
      re::StringID::destroyString((re::StringID *)(v12 + 72));
      result = (_QWORD *)re::DynamicArray<re::MeshAssetBuffer>::deinit(v12);
      ++v11;
      v10 += 256;
    }
    while (v11 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::MeshAssetPart>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = (v4 << 8) | 0x80;
      v7 = vdupq_n_s32(0x7F800000u);
      *(_QWORD *)&v8 = 0x7F0000007FLL;
      *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
      do
      {
        v9 = v3[4] + v6;
        *(_QWORD *)(v9 - 96) = 0;
        *(_QWORD *)(v9 - 120) = 0;
        *(_QWORD *)(v9 - 112) = 0;
        *(_QWORD *)(v9 - 128) = 0;
        *(_DWORD *)(v9 - 104) = 0;
        *(_DWORD *)(v9 - 88) = 0;
        *(_BYTE *)(v9 - 84) = 1;
        *(_QWORD *)(v9 - 80) = 0x100000000;
        *(_WORD *)(v9 - 72) = -1;
        *(_QWORD *)(v9 - 68) = 0;
        *(_QWORD *)(v9 - 56) = 0;
        *(_QWORD *)(v9 - 48) = &str_110;
        *(int32x4_t *)(v9 - 32) = v7;
        *(_OWORD *)(v9 - 16) = v8;
        *(_BYTE *)(v9 + 66) = 0;
        *(_BYTE *)(v9 + 68) = 0;
        *(_OWORD *)v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        *(_OWORD *)(v9 + 32) = 0uLL;
        *(_OWORD *)(v9 + 48) = 0uLL;
        *(_BYTE *)(v9 + 64) = 0;
        *(_OWORD *)(v9 + 104) = 0uLL;
        *(_OWORD *)(v9 + 88) = 0uLL;
        *(_OWORD *)(v9 + 72) = 0uLL;
        v6 += 256;
        *(_DWORD *)(v9 + 108) = 0x7FFFFFFF;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetPart>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetPart>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetPart>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetPart>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetPart>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = v9 << 8;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 256;
        v11 -= 256;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 8);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 8);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetPart>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshLodLevelInfo>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;
  int v11;

  v11 = 0;
  v10 = 0;
  re::DynamicArray<re::MeshLodLevelInfo>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 12 * *((_QWORD *)this + 2) - 12);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshLodLevelInfo>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 12 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 12 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshLodLevelInfo>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 12 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 12;
        v12 -= 12;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 12 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 12 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshLodLevelInfo>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetContactDeformerData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshAssetContactDeformerData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshAssetContactDeformerData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  _OWORD v11[2];

  v10[0] = 0;
  memset(v11, 0, sizeof(v11));
  v10[1] = (uint64_t)&str_110;
  re::DynamicArray<re::MeshAssetContactDeformerData>::add(this, v10);
  re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(v11);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 48 * *((_QWORD *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetContactDeformerData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

_QWORD *re::DynamicArray<re::MeshAssetContactDeformerData>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetContactDeformerData>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 48 * v4;
  v6 = *a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v7 = a2[3];
  *(_QWORD *)(v5 + 16) = a2[2];
  *(_QWORD *)(v5 + 24) = v7;
  a2[2] = 0;
  a2[3] = 0;
  v8 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = a2[4];
  a2[4] = v8;
  *(_WORD *)(v5 + 40) = *((_WORD *)a2 + 20);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::MeshAssetContactDeformerData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetContactDeformerData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetContactDeformerData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetContactDeformerData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetContactDeformerData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 48 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 48 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetContactDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[3];

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v10[2] = 0;
  re::DynamicArray<re::MeshAssetSmoothDeformerData>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 24 * *((_QWORD *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetSmoothDeformerData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::DynamicArray<re::MeshAssetSmoothDeformerData>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetSmoothDeformerData>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 24 * v4;
  v6 = *a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_WORD *)(v5 + 16) = *((_WORD *)a2 + 8);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::MeshAssetSmoothDeformerData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetSmoothDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshAssetWrapDeformerData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v10[0] = 0;
  v11[0] = 0;
  v15 = 0u;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  v10[1] = (uint64_t)&str_110;
  v11[1] = &str_110;
  v16 = 0uLL;
  re::DynamicArray<re::MeshAssetWrapDeformerData>::add(this, v10);
  if ((_QWORD)v15)
  {
    if (*((_QWORD *)&v15 + 1))
    {
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 0;
    }
    *(_QWORD *)&v15 = 0;
  }
  if (*((_QWORD *)&v13 + 1))
  {
    if ((_QWORD)v14)
    {
      (*(void (**)(void))(**((_QWORD **)&v13 + 1) + 40))();
      v14 = 0uLL;
    }
    *((_QWORD *)&v13 + 1) = 0;
  }
  if ((_QWORD)v12)
  {
    if (*((_QWORD *)&v12 + 1))
    {
      (*(void (**)(void))(*(_QWORD *)v12 + 40))();
      *((_QWORD *)&v12 + 1) = 0;
      *(_QWORD *)&v13 = 0;
    }
    *(_QWORD *)&v12 = 0;
  }
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 112 * *((_QWORD *)this + 2) - 112);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetWrapDeformerData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

_QWORD *re::DynamicArray<re::MeshAssetWrapDeformerData>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshAssetWrapDeformerData>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 112 * v4;
  v6 = *a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v7 = a2[2];
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 16) = a2[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 24) = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)&str_110;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  v8 = a2[5];
  *(_QWORD *)(v5 + 32) = a2[4];
  *(_QWORD *)(v5 + 40) = v8;
  a2[4] = 0;
  a2[5] = 0;
  v9 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = a2[6];
  a2[6] = v9;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  v10 = a2[8];
  *(_QWORD *)(v5 + 56) = a2[7];
  *(_QWORD *)(v5 + 64) = v10;
  a2[7] = 0;
  a2[8] = 0;
  v11 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = a2[9];
  a2[9] = v11;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  v12 = a2[11];
  *(_QWORD *)(v5 + 80) = a2[10];
  *(_QWORD *)(v5 + 88) = v12;
  a2[10] = 0;
  a2[11] = 0;
  v13 = *(_QWORD *)(v5 + 96);
  *(_QWORD *)(v5 + 96) = a2[12];
  a2[12] = v13;
  *(_WORD *)(v5 + 104) = *((_WORD *)a2 + 52);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::MeshAssetWrapDeformerData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetWrapDeformerData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetWrapDeformerData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetWrapDeformerData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetWrapDeformerData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 112 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetWrapDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[3];

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v10[2] = 0;
  re::DynamicArray<re::MeshAssetSmoothDeformerData>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 24 * *((_QWORD *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetOffsetsDeformerData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetSmoothDeformerData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetOffsetsDeformerData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetModel>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetModel>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetModel>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetModel>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetModel>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetModel>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshAssetModel>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetModel>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetModel>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshAssetModel>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshAssetModel>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshAssetModel>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetModel>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __int128 v8;
  unint64_t v9;
  re::IntrospectionBase *v10;
  uint64_t v12[2];
  int32x4_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[28];
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v25[3];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[3];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[3];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[3];
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v43 = 0u;
  v38 = 0;
  v33 = 0;
  v28 = 0;
  v23 = 0;
  v12[0] = 0;
  v12[1] = (uint64_t)&str_110;
  v13 = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v8 = 0x7F0000007FLL;
  *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
  v14 = v8;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v21 = 0u;
  v22 = 0u;
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v26 = 0u;
  v27 = 0u;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v31 = 0u;
  v32 = 0u;
  v34 = 0u;
  memset(v35, 0, sizeof(v35));
  v36 = 0u;
  v37 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  LODWORD(v43) = 0;
  v41 = 0u;
  v42 = 0u;
  v9 = *((_QWORD *)this + 2);
  if (v9 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshAssetModel>::growCapacity(this, v9 + 1);
    v9 = *((_QWORD *)this + 2);
  }
  re::MeshAssetModel::MeshAssetModel(*((_QWORD *)this + 4) + (v9 << 9), v12);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  re::MeshAssetModel::~MeshAssetModel((re::MeshAssetModel *)v12);
  v10 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + (*((_QWORD *)this + 2) << 9) - 512);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetModel>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetModel>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 9);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 9);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetModel>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetModel>::clear((re::MeshAssetModel *)a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetModel>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetModel>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetModel>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = v9 << 9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 512;
        v11 -= 512;
      }
      while (v11);
    }
  }
}

re::MeshAssetModel *re::DynamicArray<re::MeshAssetModel>::clear(re::MeshAssetModel *result)
{
  re::MeshAssetModel *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::MeshAssetModel *)*((_QWORD *)result + 4);
    v3 = v2 << 9;
    do
    {
      re::MeshAssetModel::~MeshAssetModel(result);
      result = (re::MeshAssetModel *)(v4 + 512);
      v3 -= 512;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 9);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 9);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetModel>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetInstance>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshAssetInstance>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshAssetInstance>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetInstance>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetInstance>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshAssetInstance>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshAssetInstance>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshAssetInstance>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshAssetInstance>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshAssetInstance>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshAssetInstance>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshAssetInstance>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshAssetInstance>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10[0] = 0;
  v11 = 0u;
  v10[1] = (uint64_t)&str_110;
  DWORD2(v15) = 1065353216;
  re::DynamicArray<re::MeshAssetInstance>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 96 * *((_QWORD *)this + 2) - 96);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetInstance>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshAssetInstance>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 96 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 96 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshAssetInstance>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MeshAssetInstance>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::MeshAssetInstance>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshAssetInstance>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MeshAssetInstance>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 96 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::MeshAssetInstance>::clear(uint64_t a1)
{
  uint64_t v2;
  re::StringID *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::StringID **)(a1 + 32);
    v4 = 96 * v2;
    do
    {
      re::StringID::destroyString(v3);
      v3 = (re::StringID *)((char *)v3 + 96);
      v4 -= 96;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 96 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 96 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshAssetInstance>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::DynamicArray<re::MeshAssetModel>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetModel>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetModel>::clear((re::MeshAssetModel *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetModel>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetModel>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetInstance>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::MeshAssetInstance>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::MeshAssetInstance>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::MeshAssetInstance>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::MeshAssetInstance>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshAssetSkeleton const*,re::MeshAssetSkeleton const*,re::MeshAssetSkeleton*>(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8), &v5[v6]);
      re::FixedArray<re::StringID>::operator=((unint64_t *)(a3 + v6 * 8 + 16), (uint64_t)&v5[v6 + 2]);
      re::FixedArray<unsigned int>::operator=((uint64_t *)(a3 + v6 * 8 + 40), (uint64_t)&v5[v6 + 5]);
      re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(a3 + v6 * 8 + 64), (uint64_t)&v5[v6 + 8]);
      result = re::FixedArray<re::Matrix4x4<float>>::operator=((uint64_t *)(a3 + v6 * 8 + 88), (uint64_t)&v5[v6 + 11]);
      v6 += 14;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

_QWORD *re::BucketArray<unsigned short *,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<unsigned short *,32ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<unsigned short *,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 256, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::VideoFileAsset::assetType(re::VideoFileAsset *this)
{
  unsigned __int8 v1;

  {
    re::VideoFileAsset::assetType(void)::type = (uint64_t)"VideoFile";
    qword_255827728 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::VideoFileAsset::assetType(void)::type);
  }
  return &re::VideoFileAsset::assetType(void)::type;
}

re::VideoFileAsset *re::VideoFileAsset::VideoFileAsset(re::VideoFileAsset *this)
{
  _QWORD *v2;
  re *v3;
  uint64_t *v4;
  _OWORD *v5;

  *(_QWORD *)this = &off_24ED39DF0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v3 = (re *)re::DynamicString::setCapacity(v2, 0);
  v4 = re::globalAllocators(v3);
  v5 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 32, 8);
  *v5 = 0u;
  v5[1] = 0u;
  *((_QWORD *)this + 5) = v5;
  return this;
}

void sub_225381A5C(_Unwind_Exception *exception_object)
{
  _OWORD *v1;
  uint64_t v2;

  if (*(_QWORD *)v1)
  {
    if ((*(_BYTE *)(v2 + 16) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v1 + 40))(*(_QWORD *)v1, *(_QWORD *)(v2 + 24));
    *v1 = 0u;
    v1[1] = 0u;
  }
  _Unwind_Resume(exception_object);
}

void re::VideoFileAsset::~VideoFileAsset(re::VideoFileAsset *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  id v7;
  void *v8;
  const std::__fs::filesystem::path *v9;
  std::error_code *v10;
  void *v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = re::globalAllocators(this);
    v4 = v3[2];
    v5 = *(void (****)(_QWORD))(v2 + 24);
    if (v5)
    {
      v6 = re::globalAllocators((re *)v3)[2];
      (**v5)(v5);
      (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
      *(_QWORD *)(v2 + 24) = 0;
    }
    v7 = *(id *)v2;
    *(_QWORD *)v2 = 0;

    if (*(_BYTE *)(v2 + 16))
    {
      v8 = *(void **)(v2 + 8);
      if (v8)
      {
        v9 = (const std::__fs::filesystem::path *)objc_msgSend(v8, "fileSystemRepresentation");
        remove(v9, v10);
      }
    }
    v11 = *(void **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v2);
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  re::VideoFileAsset::~VideoFileAsset(this);
  JUMPOUT(0x2276933B8);
}

void sub_225381B88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
  {
    if ((*(_BYTE *)(v1 + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(v1 + 24));
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
  }
  _Unwind_Resume(exception_object);
}

re::DynamicString *re::VideoFileAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::VideoFileAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::VideoFileAsset *v3;
  _QWORD v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::VideoFileAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  re::VideoFileAsset::assetType(v3);
  v5[0] = re::VideoFileAsset::assetType(void)::type;
  v5[1] = strlen((const char *)re::VideoFileAsset::assetType(void)::type);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

uint64_t re::VideoFileAssetCompiler::assetIntrospectionType(re::VideoFileAssetCompiler *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254101BD8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254101BD8))
  {
    qword_254101BD0 = re::internal::getOrCreateInfo((re::internal *)"VideoFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_VideoFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VideoFileAsset, (void (*)(re::IntrospectionBase *))&unk_254101BC8, 0);
    __cxa_guard_release(&qword_254101BD8);
  }
  return qword_254101BD0;
}

_QWORD *re::VideoFileAssetCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  char *v5;

  v3 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  do
  {
    result = re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v5);
    ++v3;
  }
  while (v3 != 5);
  return result;
}

void sub_225381D60(_Unwind_Exception *a1)
{
  uint64_t *v1;

  re::DynamicArray<char const*>::~DynamicArray(v1);
  _Unwind_Resume(a1);
}

void re::VideoFileAssetCompiler::compile(char *__s@<X1>, uint64_t a2@<X8>)
{
  const char *v7;
  id *v8;
  re *v9;
  re *v10;
  uint64_t *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  re *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v7 = strrchr(__s, 46) + 1;
  if (!strcasecmp(v7, "mp4"))
  {
    v8 = (id *)MEMORY[0x24BDB1C30];
  }
  else if (!strcasecmp(v7, "m4v"))
  {
    v8 = (id *)MEMORY[0x24BDB1C08];
  }
  else if (!strcasecmp(v7, "3gp"))
  {
    v8 = (id *)MEMORY[0x24BDB1BE0];
  }
  else
  {
    if (strcasecmp(v7, "mov") && strcasecmp(v7, "qt"))
      goto LABEL_12;
    v8 = (id *)MEMORY[0x24BDB1C40];
  }
  v9 = (re *)*v8;
  if (v9)
  {
    v10 = v9;
    v11 = re::globalAllocators(v9);
    v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 48, 8);
    re::VideoFileAsset::VideoFileAsset((re::VideoFileAsset *)v12);
    v21 = objc_retainAutorelease(v10);
    *(_QWORD *)&v22 = -[re UTF8String](v21, "UTF8String");
    *((_QWORD *)&v22 + 1) = strlen((const char *)v22);
    re::DynamicString::operator=((re::DynamicString *)(v12 + 1), (uint64_t)&v22);
    v13 = (void *)MEMORY[0x24BDBCF48];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", __s);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "fileURLWithPath:", v14);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = v12[5];
    v17 = *(void **)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v15;

    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v12;

    return;
  }
LABEL_12:
  re::DynamicString::format((re::DynamicString *)"Unsupported video file extension: %s", (re::DynamicString *)&v22, v7);
  v18 = v22;
  v19 = v23;
  v20 = v24;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 100;
  *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
  *(_OWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v20;

}

void sub_225381F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

re *re::VideoFileAssetCompiler::deleteAsset(re::VideoFileAssetCompiler *this, re *a2)
{
  return re::internal::destroyPersistent<re::VideoFileAsset>(a2);
}

re *re::internal::destroyPersistent<re::VideoFileAsset>(re *result)
{
  re::VideoFileAsset *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    re::VideoFileAsset::~VideoFileAsset(v1);
    return (re *)(*(uint64_t (**)(uint64_t, re::VideoFileAsset *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

uint64_t re::VideoFileAssetLoader::introspectionType(re::VideoFileAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254101BD8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254101BD8))
  {
    qword_254101BD0 = re::internal::getOrCreateInfo((re::internal *)"VideoFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_VideoFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VideoFileAsset, (void (*)(re::IntrospectionBase *))&unk_254101BC8, 0);
    __cxa_guard_release(&qword_254101BD8);
  }
  return qword_254101BD0;
}

BOOL re::VideoFileAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  const char *v8;
  void *v9;
  void *v10;
  id v11;
  char *v12;
  re *v13;
  int v14;
  re *v15;
  re *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  void *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  __int16 v28;
  int __nbyte;
  const void *__nbyte_4[2];
  uint64_t v31;
  char v32;
  _BYTE v33[7];
  char *v34;

  if (!a3)
    return 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 96))(&v31, a3);
  if ((_BYTE)v31)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3);
    *(_QWORD *)(*(_QWORD *)(a2 + 40) + 24) = v5;
    if (v5)
      return 1;
  }
  else if (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 24))
  {
    return 1;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v6 = *(_QWORD *)(a2 + 24);
  else
    v6 = a2 + 17;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v7, "isEqualToString:", *MEMORY[0x24BDB1C30]) & 1) != 0)
  {
    v8 = "mp4";
  }
  else if ((objc_msgSend(v7, "isEqualToString:", *MEMORY[0x24BDB1C08]) & 1) != 0)
  {
    v8 = "m4v";
  }
  else if ((objc_msgSend(v7, "isEqualToString:", *MEMORY[0x24BDB1BE0]) & 1) != 0)
  {
    v8 = "3gp";
  }
  else
  {
    if ((objc_msgSend(v7, "isEqualToString:", *MEMORY[0x24BDB1C40]) & 1) == 0)
    {

      return 0;
    }
    v8 = "mov";
  }

  NSTemporaryDirectory();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringByAppendingPathComponent:", CFSTR("re_video"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_retainAutorelease(v10);
  re::DynamicString::format((re::DynamicString *)"%sXXXXXX.%s", (re::DynamicString *)&v31, objc_msgSend(v11, "UTF8String"), v8);
  if ((v32 & 1) != 0)
    v12 = v34;
  else
    v12 = v33;
  v13 = (re *)mkstemps(v12, 4);
  v14 = (int)v13;
  if ((_DWORD)v13)
  {
    __nbyte_4[0] = 0;
    __nbyte = 0;
    do
    {
      if (!(*(unsigned int (**)(uint64_t, const void **, int *))(*(_QWORD *)a3 + 16))(a3, __nbyte_4, &__nbyte))
      {
        v21 = (void *)MEMORY[0x24BDBCF48];
        if ((v32 & 1) != 0)
          v22 = v34;
        else
          v22 = v33;
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "fileURLWithPath:", v23);
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = *(_QWORD *)(a2 + 40);
        v26 = *(void **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = v24;

        *(_BYTE *)(*(_QWORD *)(a2 + 40) + 16) = 1;
        close(v14);
        v20 = 0;
        goto LABEL_32;
      }
      v15 = (re *)__nbyte;
      v16 = (re *)write(v14, __nbyte_4[0], __nbyte);
    }
    while (v16 == v15);
    v17 = *re::assetTypesLogObjects(v16);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    v28 = 0;
    v18 = "Failed to write VideoFileAsset temporary file content";
    v19 = (uint8_t *)&v28;
    goto LABEL_40;
  }
  v17 = *re::assetTypesLogObjects(v13);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__nbyte_4[0]) = 0;
    v18 = "Unable to create VideoFileAsset temporary file";
    v19 = (uint8_t *)__nbyte_4;
LABEL_40:
    _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, v18, v19, 2u);
  }
LABEL_27:
  v20 = 1;
LABEL_32:
  if (v31)
  {
    if ((v32 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v31 + 40))();
  }

  return !v20;
}

void sub_225382338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;
  void *v17;

  if (a15)
  {
    if ((a16 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a15 + 40))();
  }

  _Unwind_Resume(a1);
}

uint64_t re::VideoFileAssetLoader::registerAsset(re *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  const char *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  NSObject *v22;
  _QWORD v23[3];
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a2 + 40);
  if (*v2)
    return 0;
  v6 = v2[3];
  if (!v6)
    goto LABEL_18;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v6 + 96))(v23, v6);
  v7 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v23[1]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "fileURLWithPath:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v10 = *(_QWORD *)(a2 + 24);
  else
    v10 = a2 + 17;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x24BDB1C30]) & 1) != 0)
  {
    v12 = "video/mp4";
LABEL_16:

    v24 = *MEMORY[0x24BDB21B8];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = v13;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = objc_alloc(MEMORY[0x24BDB26C8]);
    v16 = objc_msgSend(v15, "initWithFileURL:offset:length:options:", v9, v23[2], (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6), v14);
    v17 = *(id **)(a2 + 40);
    v11 = *v17;
    *v17 = (id)v16;
    goto LABEL_17;
  }
  if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x24BDB1C08]) & 1) != 0)
  {
    v12 = "video/x-m4v";
    goto LABEL_16;
  }
  if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x24BDB1BE0]) & 1) != 0)
  {
    v12 = "video/3gpp";
    goto LABEL_16;
  }
  if (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x24BDB1C40]))
  {
    v12 = "video/quicktime";
    goto LABEL_16;
  }
  v14 = v11;
LABEL_17:

  v2 = *(_QWORD **)(a2 + 40);
  if (*v2)
    return 0;
LABEL_18:
  v18 = v2[1];
  if (v18)
  {
    objc_msgSend(MEMORY[0x24BDB26C8], "URLAssetWithURL:options:", v18, 0);
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = *(void ***)(a2 + 40);
    v21 = *v20;
    *v20 = (void *)v19;

    if (**(_QWORD **)(a2 + 40))
      return 0;
  }
  v22 = *re::assetTypesLogObjects(a1);
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    return 2;
  LOWORD(v23[0]) = 0;
  v3 = 2;
  _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "VideoFileAsset has no associated file", (uint8_t *)v23, 2u);
  return v3;
}

void sub_225382650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

re *re::VideoFileAssetLoader::unloadAsset(re::VideoFileAssetLoader *this, re *a2)
{
  return re::internal::destroyPersistent<re::VideoFileAsset>(a2);
}

BOOL re::VideoFileAssetLoader::isSupportedSourceExtension(re::VideoFileAssetLoader *this, const char *a2)
{
  uint64_t v3;
  int v4;

  v3 = 0;
  do
  {
    if (!v4)
      break;
  }
  while (v3++ != 4);
  return v4 == 0;
}

BOOL re::VideoFileAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  void *v7;
  re *v8;
  NSObject *v9;
  NSObject *v10;
  char *v12;
  void (**v13)(re::SeekableInputStreamReaderAdaptor *__hidden);
  _QWORD v14[2];
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint8_t buf[4];
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    v13 = &off_24ED7C6E0;
    v14[0] = v5;
    v14[1] = 0;
    v15 = 0;
    v16 = 0;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v18 = 0;
    v6 = re::AssetHelper::readerToWriterStream((uint64_t)&v13, a2);
    if (v15)
      (*(void (**)(_QWORD))(*(_QWORD *)v14[0] + 24))(v14[0]);
  }
  else
  {
    v7 = *(void **)(v4 + 8);
    if (v7)
    {
      re::FileStreamReader::open((re::FileStreamReader *)objc_msgSend(v7, "fileSystemRepresentation"), (uint64_t)&v13);
      if ((_BYTE)v13)
      {
        v6 = re::AssetHelper::readerToWriterStream((uint64_t)v14, a2);
      }
      else
      {
        v10 = *re::assetTypesLogObjects(v8);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          if ((v16 & 1) != 0)
            v12 = (char *)v17;
          else
            v12 = (char *)&v16 + 1;
          *(_DWORD *)buf = 136315138;
          v20 = v12;
          _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Failed to write VideoFileAsset: %s", buf, 0xCu);
        }
        v6 = 0;
      }
      re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)&v13);
    }
    else
    {
      v9 = *re::assetTypesLogObjects(0);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v13) = 0;
        _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Writing empty VideoFileAsset", (uint8_t *)&v13, 2u);
      }
      return 0;
    }
  }
  return v6;
}

void sub_2253828AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *re::VideoFileAssetLoader::allocateSampleAsset(re::VideoFileAssetLoader *this)
{
  NSObject *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  re *v13;
  uint64_t *v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  _QWORD block[4];
  id v23;
  NSObject *v24;
  _QWORD v25[2];

  v1 = dispatch_group_create();
  dispatch_group_enter(v1);
  v2 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("re_videosample%@.mp4"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)MEMORY[0x24BDBCF48];
  NSTemporaryDirectory();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringByAppendingPathComponent:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "fileURLWithPath:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  dispatch_get_global_queue(21, 0);
  v10 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN2re20VideoFileAssetLoader19allocateSampleAssetEv_block_invoke;
  block[3] = &unk_24ED39E58;
  v11 = v9;
  v23 = v11;
  v12 = v1;
  v24 = v12;
  dispatch_group_async(v12, v10, block);

  v13 = (re *)dispatch_group_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
  v14 = re::globalAllocators(v13);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 48, 8);
  re::VideoFileAsset::VideoFileAsset((re::VideoFileAsset *)v15);
  v16 = (const char *)objc_msgSend((id)*MEMORY[0x24BDB1C30], "UTF8String");
  v17 = strlen(v16);
  v25[0] = v16;
  v25[1] = v17;
  re::DynamicString::operator=((re::DynamicString *)(v15 + 1), (uint64_t)v25);
  objc_storeStrong((id *)(v15[5] + 8), v9);
  *(_BYTE *)(v15[5] + 16) = 1;
  objc_msgSend(MEMORY[0x24BDB26C8], "URLAssetWithURL:options:", v11, 0);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void **)v15[5];
  v20 = *v19;
  *v19 = (void *)v18;

  return v15;
}

void sub_225382AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZN2re20VideoFileAssetLoader19allocateSampleAssetEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int64_t v10;
  const __CFAllocator *v11;
  void *v12;
  char v13;
  CVPixelBufferRef v14;
  id v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  CMTime v19;
  CVPixelBufferRef texture;
  __int128 v21;
  uint64_t v22;
  id v23;
  _BYTE __b[768];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *MEMORY[0x24BDB1C30];
  v23 = 0;
  objc_msgSend(MEMORY[0x24BDB2400], "assetWriterWithURL:fileType:error:", v2, v3, &v23);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v23;
  v5 = (void *)MEMORY[0x24BDBCE70];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 16);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 16);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dictionaryWithObjectsAndKeys:", *MEMORY[0x24BDB2298], *MEMORY[0x24BDB2268], v6, *MEMORY[0x24BDB2368], v7, *MEMORY[0x24BDB2310], 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDB2408], "assetWriterInputWithMediaType:outputSettings:", *MEMORY[0x24BDB1D50], v16);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDB2418], "assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:", v8, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addInput:", v8);
  objc_msgSend(v4, "startWriting");
  v21 = *MEMORY[0x24BDC0D88];
  v22 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
  objc_msgSend(v4, "startSessionAtSourceTime:", &v21);
  v10 = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  do
  {
    do
    {
      objc_msgSend(v9, "assetWriterInput");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "isReadyForMoreMediaData");

    }
    while ((v13 & 1) == 0);
    memset(__b, 25 * v10, sizeof(__b));
    texture = 0;
    CVPixelBufferCreateWithBytes(v11, 0x10uLL, 0x10uLL, 0x18u, __b, 0x30uLL, 0, 0, 0, &texture);
    v14 = texture;
    CMTimeMake(&v19, v10, 10);
    objc_msgSend(v9, "appendPixelBuffer:withPresentationTime:", v14, &v19);
    CVPixelBufferRelease(texture);
    ++v10;
  }
  while (v10 != 10);
  objc_msgSend(v8, "markAsFinished");
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN2re20VideoFileAssetLoader19allocateSampleAssetEv_block_invoke_2;
  v17[3] = &unk_24ED39E30;
  v18 = *(id *)(a1 + 40);
  objc_msgSend(v4, "finishWritingWithCompletionHandler:", v17);

}

void sub_225382E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void ___ZN2re20VideoFileAssetLoader19allocateSampleAssetEv_block_invoke_2(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t re::VideoFileAssetLoader::shouldCompress(re::VideoFileAssetLoader *this, void *a2)
{
  return 0;
}

uint64_t *re::allocInfo_VideoFileAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254101BC0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254101BC0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101BE0, 0);
    *(uint64_t *)((char *)&qword_254101BF0 + 6) = 0;
    qword_254101BF0 = 0;
    qword_254101C00 = 0;
    qword_254101C08 = 0xFFFFFFFFLL;
    qword_254101BE0 = (uint64_t)&off_24ED7DAA8;
    qword_254101C10 = (uint64_t)"VideoFileAsset";
    dword_254101C18 = 0;
    xmmword_254101C20 = 0u;
    unk_254101C30 = 0u;
    xmmword_254101C40 = 0u;
    qword_254101C50 = 0;
    __cxa_guard_release(&qword_254101BC0);
  }
  return &qword_254101BE0;
}

void re::initInfo_VideoFileAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0xEC9982C10E198972;
  v11[1] = "VideoFileAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_254101BB8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254101BB8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "avFileType";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      _MergedGlobals_91 = v9;
      __cxa_guard_release(&qword_254101BB8);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &_MergedGlobals_91;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::VideoFileAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::VideoFileAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::VideoFileAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::VideoFileAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

void sub_2253830F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254101BB8);
  _Unwind_Resume(a1);
}

re::VideoFileAsset *re::internal::defaultConstruct<re::VideoFileAsset>(int a1, int a2, re::VideoFileAsset *this)
{
  return re::VideoFileAsset::VideoFileAsset(this);
}

void re::internal::defaultDestruct<re::VideoFileAsset>(int a1, int a2, re::VideoFileAsset *this)
{
  re::VideoFileAsset::~VideoFileAsset(this);
}

void re::VideoFileAssetCompiler::~VideoFileAssetCompiler(re::VideoFileAssetCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

void re::VideoFileAssetLoader::~VideoFileAssetLoader(re::VideoFileAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(_anonymous_namespace_ *a1, unint64_t a2, uint64_t a3, re::MeshAsset *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _anonymous_namespace_ *v18;
  re::DeformerFeatureFlags *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  re::DeformerFeatureFlags *v23;
  re::DeformerFeatureFlags *v24;
  unint64_t v25;
  re::DeformerFeatureFlags *v26;
  uint64_t isSkinningAssignLoggingEnabled;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  NSObject *v38;
  unsigned __int32 v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  uint64_t v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int started;
  uint64_t v54;
  _QWORD *v55;
  NSObject *v56;
  unint64_t v57;
  unint64_t v58;
  NSObject *v59;
  const char *v60;
  NSObject *v61;
  unint64_t v62;
  unint64_t v63;
  NSObject *v64;
  unsigned __int32 v65;
  NSObject *v66;
  unsigned __int32 v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  NSObject *v76;
  unint64_t v77;
  uint64_t v78;
  _anonymous_namespace_ *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _anonymous_namespace_ *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  NSObject *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  uint64_t result;
  BOOL v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _BYTE *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t *v148;
  _QWORD *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  unint64_t v153;
  int v154;
  uint64_t *v155;
  unsigned int v156;
  unint64_t v158;
  unint64_t v159;
  unsigned int v160;
  _QWORD *v161;
  uint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  _DWORD *v168;
  uint64_t v169;
  re::DeformerFeatureFlags *v170;
  int v171;
  const void **v172;
  unint64_t v173;
  unsigned int v175;
  int v177;
  int __src;
  uint64_t v179;
  _BYTE v180[28];
  __int16 v181;
  _BYTE v182[10];
  _BYTE v183[28];
  __int16 v184;
  _BYTE v185[10];
  uint64_t v186;
  _BYTE *v187;
  _BYTE v188[18];
  __int16 v189;
  unint64_t v190;
  __int16 v191;
  unint64_t v192;
  __n128 buf[2];
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;

  v8 = (unint64_t)a1;
  v197 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a1)
  {
  }
  v9 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 8) = -1;
  if (v9)
  {
    if (*(_QWORD *)(v8 + 24))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v8 + 32));
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
    }
    *(_QWORD *)(v8 + 16) = 0;
  }
  v166 = a2;
  v10 = *(_QWORD *)(v8 + 40);
  if (v10)
  {
    if (*(_QWORD *)(v8 + 48))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v8 + 56));
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
    }
    *(_QWORD *)(v8 + 40) = 0;
  }
  v11 = *(_QWORD *)(v8 + 64);
  v155 = (uint64_t *)(v8 + 64);
  if (v11)
  {
    if (*(_QWORD *)(v8 + 72))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v8 + 80));
      *(_QWORD *)(v8 + 72) = 0;
      *(_QWORD *)(v8 + 80) = 0;
    }
    *v155 = 0;
  }
  v149 = (_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v8 + 88);
  if (v12)
  {
    if (*(_QWORD *)(v8 + 96))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v8 + 104));
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v8 + 104) = 0;
    }
    *(_QWORD *)(v8 + 88) = 0;
  }
  v13 = *(_QWORD *)(v8 + 112);
  if (v13)
  {
    if (*(_QWORD *)(v8 + 120))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v8 + 128));
      *(_QWORD *)(v8 + 120) = 0;
      *(_QWORD *)(v8 + 128) = 0;
    }
    *(_QWORD *)(v8 + 112) = 0;
  }
  v14 = *(_QWORD *)(v8 + 136);
  if (v14)
  {
    if (*(_QWORD *)(v8 + 144))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 40))(v14, *(_QWORD *)(v8 + 152));
      *(_QWORD *)(v8 + 144) = 0;
      *(_QWORD *)(v8 + 152) = 0;
    }
    *(_QWORD *)(v8 + 136) = 0;
  }
  v15 = *(_QWORD *)(v8 + 160);
  if (v15)
  {
    if (*(_QWORD *)(v8 + 168))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(v8 + 176));
      *(_QWORD *)(v8 + 168) = 0;
      *(_QWORD *)(v8 + 176) = 0;
    }
    *(_QWORD *)(v8 + 160) = 0;
  }
  v16 = *(_QWORD *)(v8 + 184);
  if (v16)
  {
    if (*(_QWORD *)(v8 + 192))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 40))(v16, *(_QWORD *)(v8 + 200));
      *(_QWORD *)(v8 + 192) = 0;
      *(_QWORD *)(v8 + 200) = 0;
    }
    *(_QWORD *)(v8 + 184) = 0;
  }
  v17 = *(_QWORD *)(v8 + 208);
  v151 = (uint64_t *)(v8 + 208);
  if (v17)
  {
    if (*(_QWORD *)(v8 + 216))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v8 + 224));
      *(_QWORD *)(v8 + 216) = 0;
      *(_QWORD *)(v8 + 224) = 0;
    }
    *v151 = 0;
  }
  v18 = *(_anonymous_namespace_ **)(v8 + 232);
  if (v18)
  {
    if (*(_QWORD *)(v8 + 240))
    {
      v18 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v18 + 40))(v18, *(_QWORD *)(v8 + 248));
      *(_QWORD *)(v8 + 240) = 0;
      *(_QWORD *)(v8 + 248) = 0;
    }
    *(_QWORD *)(v8 + 232) = 0;
  }
  v21 = *(_QWORD *)(a5 + 264);
  v162 = (uint64_t *)v8;
  v158 = v21;
  v144 = a6;
  v145 = (uint64_t *)(v8 + 160);
  v152 = (uint64_t *)(v8 + 40);
  v147 = (uint64_t *)(v8 + 112);
  v148 = (uint64_t *)(v8 + 88);
  v146 = (uint64_t *)(v8 + 136);
  v150 = (uint64_t *)(v8 + 184);
  if (v21)
  {
    if (v21 >= 0x2E8BA2E8BA2E8BBLL)
    {
LABEL_243:
      re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 88, v21);
      _os_crash();
      __break(1u);
      goto LABEL_244;
    }
                                                           + 32))();
    if (!v19)
    {
LABEL_244:
      re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_245;
    }
    v23 = v19;
    v24 = v19;
    v25 = v21 - 1;
    if (v21 != 1)
    {
      v24 = v19;
      do
      {
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_DWORD *)v24 + 6) = 0;
        *((_QWORD *)v24 + 2) = 0;
        *((_QWORD *)v24 + 9) = 0;
        *((_OWORD *)v24 + 2) = 0uLL;
        *((_OWORD *)v24 + 3) = 0uLL;
        *((_DWORD *)v24 + 16) = 0;
        *((_DWORD *)v24 + 20) = -1;
        v24 = (re::DeformerFeatureFlags *)((char *)v24 + 88);
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_DWORD *)v24 + 6) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *((_QWORD *)v24 + 9) = 0;
    *((_OWORD *)v24 + 2) = 0u;
    *((_OWORD *)v24 + 3) = 0u;
    *((_DWORD *)v24 + 16) = 0;
    *((_DWORD *)v24 + 20) = -1;
  }
  else
  {
    v23 = 0;
  }
  v26 = (re::DeformerFeatureFlags *)v188;
  isSkinningAssignLoggingEnabled = re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled(v19);
  v177 = isSkinningAssignLoggingEnabled;
  v28 = *(_QWORD *)(a2 + 296);
  v170 = v23;
  if (v28)
  {
    v29 = 0;
    v164 = *(_QWORD *)(a2 + 296);
    do
    {
      v30 = *(_QWORD *)(a2 + 296);
      if (v30 <= v29)
        goto LABEL_229;
      v31 = *(_QWORD *)(a2 + 312);
      v32 = v31 + (v29 << 6);
      v35 = *(unsigned __int8 *)(v32 + 56);
      v34 = (_BYTE *)(v32 + 56);
      v33 = v35;
      if (v35 == 1)
      {
        if (!v177
          || (v42 = v31 + (v29 << 6),
              v43 = *(_DWORD *)(v42 + 60),
              v8 = v42 + 60,
              *(_QWORD *)(a2 + 176) > (unint64_t)v43))
        {
LABEL_62:
          v8 = a5;
          re::MeshNameMap::meshInstancePartsForIdentifier(a5, (unsigned __int8 *)(v31 + (v29 << 6)), buf);
          *(_QWORD *)v183 = a4;
          *(_QWORD *)&v183[8] = a5;
          *(_QWORD *)&v183[16] = buf[0].n128_u64[0];
          v186 = v194;
          v187 = 0;
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v183[24], (uint64_t)&buf[0].n128_i64[1]);
          if (*((_QWORD *)&v194 + 1))
          {
            (***((void (****)(_QWORD))&v194 + 1))(*((_QWORD *)&v194 + 1));
            if (*((__n128 **)&v194 + 1) != (__n128 *)&buf[0].n128_i8[8])
              (*(void (**)(_QWORD))(*(_QWORD *)v194 + 40))(v194);
          }
          *(_QWORD *)v188 = v183;
          *(_QWORD *)&v188[8] = 0;
          v44 = *(_QWORD *)&v183[16];
          if (!*(_QWORD *)&v183[16])
          {
LABEL_90:
            isSkinningAssignLoggingEnabled = (uint64_t)v187;
            if (v187)
            {
              isSkinningAssignLoggingEnabled = (**(uint64_t (***)(_BYTE *))v187)(v187);
              if (v187 != &v183[24])
                isSkinningAssignLoggingEnabled = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 40))(v186);
            }
            v23 = v170;
            v28 = v164;
            a2 = v166;
            goto LABEL_98;
          }
          v45 = 0;
          v168 = (_DWORD *)(v31 + (v29 << 6) + 60);
          v46 = &v187;
          while (2)
          {
            buf[0].n128_u64[0] = v45;
            v47 = (*(uint64_t (**)(_QWORD, __n128 *))(*(_QWORD *)*v46 + 16))(*v46, buf);
            buf[0].n128_u64[0] = *(_QWORD *)&v188[8];
            v48 = (*(uint64_t (**)(_QWORD, __n128 *))(**(_QWORD **)(*(_QWORD *)v188 + 56) + 16))(*(_QWORD *)(*(_QWORD *)v188 + 56), buf);
            v49 = (re *)re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel((uint64_t **)v188);
            a2 = (unint64_t)v49;
            v21 = WORD2(v48);
            v50 = *((_QWORD *)v49 + 22);
            if (v50 && *(_QWORD *)(v50 + 8) > (unint64_t)WORD2(v48))
            {
              if (*(_QWORD *)(a3 + 24) > (unint64_t)v47)
              {
                v51 = *(_QWORD *)(a3 + 32);
                if (*(_QWORD *)(v51 + 24 * v47 + 8) > (unint64_t)WORD2(v48))
                {
                  v52 = *(_DWORD *)(*(_QWORD *)(v51 + 24 * v47 + 16) + 4 * WORD2(v48));
                  if (v52 != -1)
                  {
                    started = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)a5, v47);
                    v8 = re::MeshNameMap::skinnedPartIndexForPartInstance((re::MeshNameMap *)a5, started + WORD2(v48));
                    if (v158 <= v8)
                      goto LABEL_241;
                    *((_DWORD *)v170 + 22 * v8 + 20) = v52;
                    if (*v34 == 1)
                    {
                      v55 = (_QWORD *)((char *)v170 + 88 * v8);
                    }
                    else
                    {
                      if (*v34)
                        goto LABEL_247;
                      v55 = (_QWORD *)((char *)v170 + 88 * v8 + 40);
                    }
                    re::DynamicArray<int>::add(v55, v168);
                    v26 = (re::DeformerFeatureFlags *)v188;
LABEL_85:
                    v45 = ++*(_QWORD *)&v188[8];
                    v46 = (_QWORD *)(*(_QWORD *)v188 + 56);
                    if (*(_BYTE **)v188 == v183 && v45 == v44)
                      goto LABEL_90;
                    continue;
                  }
                }
              }
              v26 = (re::DeformerFeatureFlags *)v188;
              if (!v177)
                goto LABEL_85;
              v61 = *re::assetsLogObjects(v49);
              if (!os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
                goto LABEL_85;
              v8 = *(_QWORD *)(a2 + 56);
              if (v8 <= v21)
                goto LABEL_238;
              v62 = *(_QWORD *)(a2 + 8);
              v63 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 560 * v21 + 512);
              buf[0].n128_u32[0] = 136315394;
              *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v62;
              buf[0].n128_u16[6] = 2080;
              *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v63;
              v59 = v61;
              v60 = "[DeformerLogging] Mesh Model[%s] Part[%s] has no assigned rig.";
            }
            else
            {
              if (!v177)
                goto LABEL_85;
              v56 = *re::assetsLogObjects(v49);
              if (!os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                goto LABEL_85;
              v8 = *(_QWORD *)(a2 + 56);
              if (v8 <= v21)
                goto LABEL_228;
              v57 = *(_QWORD *)(a2 + 8);
              v58 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 560 * v21 + 512);
              buf[0].n128_u32[0] = 136315394;
              *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v57;
              buf[0].n128_u16[6] = 2080;
              *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v58;
              v59 = v56;
              v60 = "[DeformerLogging] Mesh Model[%s] Part[%s] not skinned.";
            }
            break;
          }
          _os_log_impl(&dword_224FE9000, v59, OS_LOG_TYPE_INFO, v60, (uint8_t *)buf, 0x16u);
          goto LABEL_85;
        }
        v66 = *re::assetsLogObjects((re *)isSkinningAssignLoggingEnabled);
        isSkinningAssignLoggingEnabled = os_log_type_enabled(v66, OS_LOG_TYPE_ERROR);
        if ((_DWORD)isSkinningAssignLoggingEnabled)
        {
          v67 = *(_DWORD *)v8;
          buf[0].n128_u32[0] = 67109120;
          buf[0].n128_u32[1] = v67;
          v40 = v66;
          v41 = "[DeformerLogging] Skeletal mesh pose has an invalid model space pose index: %u.";
          goto LABEL_101;
        }
      }
      else
      {
        if (v33)
        {
          if (!v177)
            goto LABEL_98;
          v64 = *re::assetsLogObjects((re *)isSkinningAssignLoggingEnabled);
          isSkinningAssignLoggingEnabled = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)isSkinningAssignLoggingEnabled)
            goto LABEL_98;
          v65 = *v34;
          buf[0].n128_u32[0] = 67109120;
          buf[0].n128_u32[1] = v65;
          v40 = v64;
          v41 = "[DeformerLogging] Skeletal mesh pose has an invalid skeletal pose type: %u.";
          goto LABEL_101;
        }
        if (!v177)
          goto LABEL_62;
        v36 = v31 + (v29 << 6);
        v37 = *(_DWORD *)(v36 + 60);
        v8 = v36 + 60;
        if (*(_QWORD *)(a2 + 136) > (unint64_t)v37)
          goto LABEL_62;
        v38 = *re::assetsLogObjects((re *)isSkinningAssignLoggingEnabled);
        isSkinningAssignLoggingEnabled = os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
        if ((_DWORD)isSkinningAssignLoggingEnabled)
        {
          v39 = *(_DWORD *)v8;
          buf[0].n128_u32[0] = 67109120;
          buf[0].n128_u32[1] = v39;
          v40 = v38;
          v41 = "[DeformerLogging] Skeletal mesh pose has an invalid local space pose index: %u.";
LABEL_101:
          _os_log_error_impl(&dword_224FE9000, v40, OS_LOG_TYPE_ERROR, v41, (uint8_t *)buf, 8u);
        }
      }
LABEL_98:
      ++v29;
    }
    while (v29 != v28);
  }
  v68 = *(_DWORD *)(a5 + 216);
  v8 = *(_QWORD *)(a5 + 264);
  *(_QWORD *)&v185[2] = 0;
  memset(v183, 0, sizeof(v183));
  *(_QWORD *)&v182[2] = 0;
  memset(v180, 0, sizeof(v180));
  v154 = v68;
  if (v68)
  {
    v143 = v8;
    v69 = 0;
    v70 = 0;
    v165 = 0;
    v153 = 0;
    v29 = v158;
    v8 = *((_QWORD *)a4 + 117);
    v71 = v162;
    v159 = v8;
    while (1)
    {
      v160 = re::MeshNameMap::modelIndex((re::MeshNameMap *)a5, v70);
      v72 = (_QWORD *)re::MeshAssetBaseInfo::meshModel<re::MeshAsset>(a4, v160);
      v73 = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)a5, v70);
      v167 = v73;
      v74 = v72[22];
      v156 = v70;
      if (v74)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75 > v72[7])
        {
          if (v177)
          {
            v76 = *re::assetsLogObjects((re *)v73);
            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
            {
              v77 = v72[1];
              buf[0].n128_u32[0] = 136315138;
              *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v77;
              _os_log_error_impl(&dword_224FE9000, v76, OS_LOG_TYPE_ERROR, "[DeformerLogging] Mesh Model[%s] has unexpected skinned part count", (uint8_t *)buf, 0xCu);
            }
          }
          goto LABEL_162;
        }
        if (v75)
          break;
      }
LABEL_162:
      v70 = v156 + 1;
      if (v156 + 1 == v154)
      {
        v21 = *(_QWORD *)&v183[16];
        v8 = v143;
        v80 = v165;
        goto LABEL_165;
      }
    }
    v30 = 0;
    v173 = *(_QWORD *)(v74 + 8);
    v161 = v72;
    while (1)
    {
      v78 = v72[22];
      if (v78 && *(_QWORD *)(v78 + 8) > v30)
        a2 = *(unsigned int *)(*(_QWORD *)(v78 + 16) + 72 * v30 + 4);
      else
        a2 = 0xFFFFFFFFLL;
      if (v8 > a2)
        break;
      if (v177)
      {
        v94 = *re::assetsLogObjects((re *)v73);
        v73 = os_log_type_enabled(v94, OS_LOG_TYPE_INFO);
        if ((_DWORD)v73)
        {
          v8 = v72[7];
          if (v8 <= v30)
            goto LABEL_230;
          v95 = v72[1];
          v96 = *(_QWORD *)(v72[8] + 560 * v30 + 512);
          buf[0].n128_u32[0] = 136315394;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v95;
          buf[0].n128_u16[6] = 2080;
          *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v96;
          _os_log_impl(&dword_224FE9000, v94, OS_LOG_TYPE_INFO, "[DeformerLogging] Mesh Model[%s] Part[%s] has no skeleton.", (uint8_t *)buf, 0x16u);
          v71 = v162;
          v8 = v159;
        }
        else
        {
          v71 = v162;
        }
        goto LABEL_158;
      }
LABEL_159:
      if (++v30 == v75)
        goto LABEL_162;
    }
    __src = 0;
    v79 = (_anonymous_namespace_ *)re::MeshNameMap::skinnedPartIndexForPartInstance((re::MeshNameMap *)a5, v167 + (int)v30);
    __src = (int)v79;
    v80 = v79;
    if (v29 <= v79)
      goto LABEL_227;
    v81 = (unint64_t)v23 + 88 * v79;
    v171 = *(_DWORD *)(v81 + 80);
    if (v171 == -1)
    {
      v72 = v161;
      v97 = v161[22];
      if (v97 && *(_QWORD *)(v97 + 32) > a2)
      {
        re::ReadOnlyCPUAccessibleBufferSliceContent::make((_QWORD *)(*(_QWORD *)(v97 + 40) + 16 * a2), (uint64_t)buf);
        if (buf[0].n128_u8[0])
          v98 = buf[1].n128_u64[0] >> 6;
        else
          v98 = 0;
        v99 = v153;
        if (v153 <= v98)
          v99 = v98;
        v153 = v99;
        *(_DWORD *)v188 = __src;
        *(_QWORD *)&v188[8] = v98;
        re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add((uint64_t)v180, (__n128 *)v188);
        v73 = re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)buf);
      }
      else
      {
        buf[0].n128_u32[0] = v79;
        buf[0].n128_u64[1] = 0;
        re::DynamicArray<re::Pair<float *,re::AnimationBlendTreeInstance<float>::SampleFlags,true>>::add((uint64_t)v180, buf);
      }
    }
    else
    {
      v175 = v79;
      v163 = v69;
      v169 = *(_QWORD *)&v185[2];
      v82 = *(_QWORD *)&v183[16];
      if (*(_QWORD *)&v183[16])
      {
        v83 = (char *)v170 + 88 * v79;
        v84 = *(_QWORD *)(v81 + 16);
        v85 = v83 + 56;
        v172 = (const void **)(v83 + 72);
        v86 = (_QWORD *)(*(_QWORD *)&v185[2] + 16);
        v87 = *(_QWORD *)&v183[16] << 6;
        while (1)
        {
          v88 = *(v86 - 2);
          if (*(_QWORD *)(v88 + 16) == v84)
          {
            v79 = (_anonymous_namespace_ *)memcmp(*(const void **)(v88 + 32), *(const void **)(v81 + 32), 4 * v84);
            if (!(_DWORD)v79)
            {
              v89 = *(_QWORD *)(v88 + 56);
              if (v89 == *v85)
              {
                v79 = (_anonymous_namespace_ *)memcmp(*(const void **)(v88 + 72), *v172, 4 * v89);
                if (!(_DWORD)v79 && *(_DWORD *)(v88 + 80) == v171 && *((_DWORD *)v86 - 2) == a2)
                  break;
              }
            }
          }
          v86 += 8;
          v87 -= 64;
          if (!v87)
            goto LABEL_127;
        }
        v73 = (uint64_t)re::DynamicArray<int>::add(v86, &__src);
        v26 = (re::DeformerFeatureFlags *)v188;
        v71 = v162;
        v69 = v163;
        v29 = v158;
        v8 = v159;
        v23 = v170;
      }
      else
      {
LABEL_127:
        v26 = (re::DeformerFeatureFlags *)v188;
        buf[0].n128_u64[0] = v81;
        buf[0].n128_u32[2] = a2;
        *(_QWORD *)&v195 = 0;
        *(_QWORD *)&v194 = 0;
        buf[1] = 0uLL;
        DWORD2(v194) = 0;
        re::DynamicArray<int>::setCapacity((__n128 *)buf[1].n128_u64, 1uLL);
        ++DWORD2(v194);
        v90 = (_anonymous_namespace_ *)re::DynamicArray<float>::copy((__n128 *)buf[1].n128_u64, 0, (char *)&__src, 1);
        DWORD2(v195) = v160;
        if (v82 >= *(_QWORD *)&v183[8])
        {
          v92 = v163;
          v91 = v165;
          if (*(_QWORD *)&v183[8] < v82 + 1)
          {
            if (*(_QWORD *)v183)
            {
              v100 = 8;
              if (*(_QWORD *)&v183[8])
                v100 = 2 * *(_QWORD *)&v183[8];
              if (v100 <= v82 + 1)
                v101 = v82 + 1;
              else
                v101 = v100;
              re::DynamicArray<void re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,unsigned long)::UniqueSkinningRigPose>::setCapacity(v183, v101);
            }
            else
            {
              re::DynamicArray<void re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,unsigned long)::UniqueSkinningRigPose>::setCapacity(v183, v82 + 1);
              ++*(_DWORD *)&v183[24];
            }
          }
          v82 = *(_QWORD *)&v183[16];
          v93 = *(_QWORD *)&v185[2];
        }
        else
        {
          v92 = v163;
          v91 = v165;
          v93 = v169;
        }
        v102 = v93 + (v82 << 6);
        v103 = buf[0].n128_u64[0];
        *(_DWORD *)(v102 + 8) = buf[0].n128_u32[2];
        *(_QWORD *)v102 = v103;
        *(_QWORD *)(v102 + 48) = 0;
        *(_QWORD *)(v102 + 24) = 0;
        *(_QWORD *)(v102 + 32) = 0;
        *(_QWORD *)(v102 + 16) = 0;
        *(_DWORD *)(v102 + 40) = 0;
        *(_QWORD *)(v102 + 16) = buf[1].n128_u64[0];
        buf[1].n128_u64[0] = 0;
        *(_QWORD *)(v102 + 24) = buf[1].n128_u64[1];
        buf[1].n128_u64[1] = 0;
        v104 = *(_QWORD *)(v102 + 32);
        *(_QWORD *)(v102 + 32) = v194;
        *(_QWORD *)&v194 = v104;
        v105 = *(_QWORD *)(v102 + 48);
        *(_QWORD *)(v102 + 48) = v195;
        *(_QWORD *)&v195 = v105;
        ++DWORD2(v194);
        ++*(_DWORD *)(v102 + 40);
        *(_DWORD *)(v102 + 56) = DWORD2(v195);
        *(_QWORD *)&v183[16] = v82 + 1;
        ++*(_DWORD *)&v183[24];
        v73 = buf[1].n128_i64[0];
        v71 = v162;
        v8 = v159;
        if (buf[1].n128_u64[0] && v105)
          v73 = (*(uint64_t (**)(void))(*(_QWORD *)buf[1].n128_u64[0] + 40))();
        v23 = v170;
        v69 = *((_QWORD *)v170 + 11 * v175 + 7) + v92;
        v165 = *(_QWORD *)(v81 + 16) + v91;
        v29 = v158;
      }
      v72 = v161;
    }
LABEL_158:
    v75 = v173;
    goto LABEL_159;
  }
  v21 = 0;
  v153 = 0;
  v80 = 0;
  v69 = 0;
  v71 = v162;
LABEL_165:
  re::FixedArray<int>::init<>(v151, *v71, v21 + 1);
  re::FixedArray<unsigned int>::init<unsigned int const&>(v149, *v71, v8, &re::SkeletalPoseRigMappingData::kInvalidPoseRigMapIndex);
  v107 = *v71;
  v71[29] = *v71;
  v71[30] = v8;
  if (v8)
  {
    if (v8 >> 61)
    {
LABEL_245:
      re::internal::assertLog((re::internal *)6, v106, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v8);
      _os_crash();
      __break(1u);
      goto LABEL_246;
    }
    v108 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v107 + 32))(v107, 8 * v8, 4);
    v71[31] = (uint64_t)v108;
    if (!v108)
    {
LABEL_246:
      re::internal::assertLog((re::internal *)4, v109, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_247:
      re::internal::assertLog((re::internal *)4, v54, "assertion failure: '%s' (%s:line %i) Unexpected skeletal pose type.", "!\"Unreachable code\"", "rebuildMappingData", 280);
      _os_crash();
      __break(1u);
    }
    v110 = v108;
    if (v8 != 1)
    {
      bzero(v108, 8 * v8 - 8);
      v110 += v8 - 1;
    }
    *v110 = 0;
  }
  if (v21)
  {
    v111 = 0;
    v29 = 0;
    v26 = *(re::DeformerFeatureFlags **)&v185[2];
    while (1)
    {
      if (v111 == v21)
        goto LABEL_239;
      v112 = (char *)v26 + 64 * v111;
      v113 = re::MeshAsset::skeletonAtIndex(a4, *((unsigned int *)v112 + 2));
      v8 = v71[27];
      if (v8 <= v111)
        goto LABEL_240;
      v114 = *(_QWORD *)(v113 + 24);
      *(_DWORD *)(v71[28] + 4 * v111) = v29;
      v115 = *((_QWORD *)v112 + 4);
      if (v115)
        break;
LABEL_180:
      v29 = (v29 + v114);
      if (++v111 == v21)
        goto LABEL_183;
    }
    v116 = (unsigned int *)*((_QWORD *)v112 + 6);
    v117 = 4 * v115;
    while (1)
    {
      a2 = *v116;
      v8 = v71[3];
      if (v8 <= a2)
        break;
      *(_DWORD *)(v71[4] + 4 * a2) = v111;
      v8 = v71[30];
      if (v8 <= a2)
        goto LABEL_226;
      *(_QWORD *)(v71[31] + 8 * a2) = v29 | (unint64_t)(v114 << 32);
      ++v116;
      v117 -= 4;
      if (!v117)
        goto LABEL_180;
    }
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 468;
    v189 = 2048;
    v190 = a2;
    v191 = 2048;
    v192 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_226:
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 468;
    v189 = 2048;
    v190 = a2;
    v191 = 2048;
    v192 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_227:
    v179 = 0;
    *((_OWORD *)v26 + 6) = 0u;
    *((_OWORD *)v26 + 7) = 0u;
    *((_OWORD *)v26 + 4) = 0u;
    *((_OWORD *)v26 + 5) = 0u;
    *((_OWORD *)v26 + 3) = 0u;
    v21 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)((char *)v26 + 4) = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)((char *)v26 + 14) = 468;
    v189 = 2048;
    *(_QWORD *)((char *)v26 + 20) = v80;
    v191 = 2048;
    *(_QWORD *)((char *)v26 + 30) = v29;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_228:
    v179 = 0;
    *((_OWORD *)v26 + 6) = 0u;
    *((_OWORD *)v26 + 7) = 0u;
    *((_OWORD *)v26 + 4) = 0u;
    *((_OWORD *)v26 + 5) = 0u;
    *((_OWORD *)v26 + 3) = 0u;
    v30 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v180 = 136315906;
    *(_QWORD *)&v180[4] = "operator[]";
    *(_WORD *)&v180[12] = 1024;
    *(_DWORD *)&v180[14] = 476;
    *(_WORD *)&v180[18] = 2048;
    *(_QWORD *)&v180[20] = v21;
    v181 = 2048;
    *(_QWORD *)v182 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_229:
    *(_QWORD *)v180 = 0;
    *((_OWORD *)v26 + 6) = 0u;
    *((_OWORD *)v26 + 7) = 0u;
    *((_OWORD *)v26 + 4) = 0u;
    *((_OWORD *)v26 + 5) = 0u;
    *((_OWORD *)v26 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v183 = 136315906;
    *(_QWORD *)&v183[4] = "operator[]";
    *(_WORD *)&v183[12] = 1024;
    *(_DWORD *)&v183[14] = 797;
    *(_WORD *)&v183[18] = 2048;
    *(_QWORD *)&v183[20] = v29;
    v184 = 2048;
    *(_QWORD *)v185 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_230:
    v179 = 0;
    *((_OWORD *)v26 + 6) = 0u;
    *((_OWORD *)v26 + 7) = 0u;
    *((_OWORD *)v26 + 4) = 0u;
    *((_OWORD *)v26 + 5) = 0u;
    *((_OWORD *)v26 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)((char *)v26 + 4) = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)((char *)v26 + 14) = 476;
    v189 = 2048;
    *(_QWORD *)((char *)v26 + 20) = v30;
    v191 = 2048;
    *(_QWORD *)((char *)v26 + 30) = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_231;
  }
  LODWORD(v29) = 0;
LABEL_183:
  v71[32] = v153 + v29;
  v8 = v71[27];
  if (v8 <= v21)
  {
LABEL_242:
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 468;
    v189 = 2048;
    v190 = v21;
    v191 = 2048;
    v192 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_243;
  }
  *(_DWORD *)(v71[28] + 4 * v21) = v29;
  re::FixedArray<int>::init<>(v152, *v71, v69);
  re::FixedArray<int>::init<>(v155, *v71, v80);
  re::FixedArray<int>::init<>(v148, *v71, v21);
  re::FixedArray<re::Slice<unsigned int>>::init<>(v147, *v71, v21);
  re::FixedArray<re::Slice<unsigned int>>::init<>(v146, *v71, v21);
  re::FixedArray<int>::init<>(v145, *v71, v21);
  re::FixedArray<int>::init<>(v150, *v71, v21);
  if (v21)
  {
    a2 = 0;
    v118 = 0;
    v26 = *(re::DeformerFeatureFlags **)&v185[2];
    v119 = 8;
    while (v21 != a2)
    {
      v120 = *(_QWORD *)v26;
      re::FixedArray<unsigned int>::copy(v152, v118, *(const void **)(*(_QWORD *)v26 + 72), *(_QWORD *)(*(_QWORD *)v26 + 56));
      re::FixedArray<unsigned int>::copy(v155, 0, *(const void **)(v120 + 32), *(_QWORD *)(v120 + 16));
      v8 = v71[12];
      if (v8 <= a2)
        goto LABEL_233;
      *(_DWORD *)(v71[13] + 4 * a2) = *(_DWORD *)(v120 + 80);
      v121 = re::FixedArray<unsigned int>::slice((uint64_t)v152, v118, *(_QWORD *)(v120 + 56));
      v8 = v71[15];
      if (v8 <= a2)
        goto LABEL_234;
      v123 = (_QWORD *)(v71[16] + v119);
      *(v123 - 1) = v121;
      *v123 = v122;
      v124 = re::FixedArray<unsigned int>::slice((uint64_t)v155, 0, *(_QWORD *)(v120 + 16));
      v8 = v71[18];
      if (v8 <= a2)
        goto LABEL_235;
      v126 = (_QWORD *)(v71[19] + v119);
      *(v126 - 1) = v124;
      *v126 = v125;
      v8 = v71[21];
      if (v8 <= a2)
        goto LABEL_236;
      *(_DWORD *)(v71[22] + 4 * a2) = *((_DWORD *)v26 + 2);
      v8 = v71[24];
      if (v8 <= a2)
        goto LABEL_237;
      *(_DWORD *)(v71[25] + 4 * a2) = *((_DWORD *)v26 + 14);
      v118 += *(_QWORD *)(v120 + 56);
      ++a2;
      v26 = (re::DeformerFeatureFlags *)((char *)v26 + 64);
      v119 += 16;
      if (v21 == a2)
        goto LABEL_193;
    }
LABEL_232:
    v179 = 0;
    v8 = (unint64_t)v188;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 789;
    v189 = 2048;
    v190 = v21;
    v191 = 2048;
    v192 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_233:
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 468;
    v189 = 2048;
    v190 = a2;
    v191 = 2048;
    v192 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_234:
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 468;
    v189 = 2048;
    v190 = a2;
    v191 = 2048;
    v192 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_235:
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 468;
    v189 = 2048;
    v190 = a2;
    v191 = 2048;
    v192 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_236:
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 468;
    v189 = 2048;
    v190 = a2;
    v191 = 2048;
    v192 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_237:
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    v21 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 468;
    v189 = 2048;
    v190 = a2;
    v191 = 2048;
    v192 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_238:
    v179 = 0;
    *((_OWORD *)v26 + 6) = 0u;
    *((_OWORD *)v26 + 7) = 0u;
    *((_OWORD *)v26 + 4) = 0u;
    *((_OWORD *)v26 + 5) = 0u;
    *((_OWORD *)v26 + 3) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v180 = 136315906;
    *(_QWORD *)&v180[4] = "operator[]";
    *(_WORD *)&v180[12] = 1024;
    *(_DWORD *)&v180[14] = 476;
    *(_WORD *)&v180[18] = 2048;
    *(_QWORD *)&v180[20] = v21;
    v181 = 2048;
    *(_QWORD *)v182 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_239:
    v179 = 0;
    v8 = (unint64_t)v188;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    v111 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 789;
    v189 = 2048;
    v190 = v21;
    v191 = 2048;
    v192 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_240:
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)&v188[4] = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)&v188[14] = 468;
    v189 = 2048;
    v190 = v111;
    v191 = 2048;
    v192 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_241:
    v179 = 0;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    memset(buf, 0, sizeof(buf));
    v21 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v180 = 136315906;
    *(_QWORD *)&v180[4] = "operator[]";
    *(_WORD *)&v180[12] = 1024;
    *(_DWORD *)&v180[14] = 468;
    *(_WORD *)&v180[18] = 2048;
    *(_QWORD *)&v180[20] = v8;
    v181 = 2048;
    *(_QWORD *)v182 = v158;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_242;
  }
LABEL_193:
  v127 = *(_QWORD *)&v182[2];
  a2 = (unint64_t)v188;
  v26 = v170;
  if (*(_QWORD *)&v180[16])
  {
    v128 = *(unsigned int **)&v182[2];
    v129 = *(_QWORD *)&v182[2] + 16 * *(_QWORD *)&v180[16];
    while (1)
    {
      v30 = *v128;
      v8 = v71[30];
      if (v8 <= v30)
        break;
      *(_QWORD *)(v71[31] + 8 * v30) = v29 | (*((_QWORD *)v128 + 1) << 32);
      v128 += 4;
      if (v128 == (unsigned int *)v129)
        goto LABEL_197;
    }
LABEL_231:
    v179 = 0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    v21 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v188 = 136315906;
    *(_QWORD *)(a2 + 4) = "operator[]";
    *(_WORD *)&v188[12] = 1024;
    *(_DWORD *)(a2 + 14) = 468;
    v189 = 2048;
    *(_QWORD *)(a2 + 20) = v30;
    v191 = 2048;
    *(_QWORD *)(a2 + 30) = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_232;
  }
LABEL_197:
  v71[1] = v144;
  result = *(_QWORD *)v180;
  if (*(_QWORD *)v180)
    v131 = v127 == 0;
  else
    v131 = 1;
  if (!v131)
    result = (*(uint64_t (**)(void))(**(_QWORD **)v180 + 40))();
  v132 = *(_QWORD *)v183;
  v133 = v158;
  if (*(_QWORD *)v183)
  {
    v134 = *(_QWORD *)&v185[2];
    if (*(_QWORD *)&v185[2])
    {
      if (v21)
      {
        v135 = v21 << 6;
        v136 = (_QWORD *)(*(_QWORD *)&v185[2] + 48);
        do
        {
          v137 = *(v136 - 4);
          if (v137)
          {
            if (*v136)
              (*(void (**)(uint64_t))(*(_QWORD *)v137 + 40))(v137);
            *v136 = 0;
            *(v136 - 3) = 0;
            *(v136 - 2) = 0;
            *(v136 - 4) = 0;
            ++*((_DWORD *)v136 - 2);
          }
          v136 += 8;
          v135 -= 64;
        }
        while (v135);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 40))(v132, v134);
      v133 = v158;
    }
  }
  if (v133)
  {
    v138 = 0;
    v139 = 88 * v133;
    do
    {
      v140 = (_QWORD *)((char *)v170 + v138);
      v141 = *(_QWORD *)((char *)v170 + v138 + 40);
      if (v141)
      {
        if (v140[9])
          (*(void (**)(uint64_t))(*(_QWORD *)v141 + 40))(v141);
        v140[9] = 0;
        *(_QWORD *)((char *)v170 + v138 + 48) = 0;
        *(_QWORD *)((char *)v170 + v138 + 56) = 0;
        *(_QWORD *)((char *)v170 + v138 + 40) = 0;
        ++*(_DWORD *)((char *)v170 + v138 + 64);
      }
      if (*v140)
      {
        v142 = (char *)v170 + v138;
        if (*(_QWORD *)((char *)v170 + v138 + 32))
          (*(void (**)(_QWORD))(*(_QWORD *)*v140 + 40))(*v140);
        *((_QWORD *)v142 + 4) = 0;
        v140[1] = 0;
        v140[2] = 0;
        *v140 = 0;
        ++*((_DWORD *)v142 + 6);
      }
      v138 += 88;
    }
    while (v139 != v138);
  }
  return result;
}

void re::FixedArray<re::Slice<unsigned int>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 16 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 16);
    v8 = (_QWORD *)((char *)v8 + v5 - 16);
  }
  *v8 = 0;
  v8[1] = 0;
}

uint64_t re::FixedArray<unsigned int>::slice(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 <= a2)
  {
    v6 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v7) = 136315906;
    *(_QWORD *)((char *)&v7 + 4) = "slice";
    WORD6(v7) = 1024;
    HIWORD(v7) = 502;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_6;
  }
  if (__CFADD__(a2, a3))
  {
LABEL_6:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::slice(size_t,size_t). index, %zu, count = %zu, array size = %zu", "!overflow", "slice", 508, a2, a3, v4, v6, v7);
    _os_crash();
    __break(1u);
LABEL_7:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 512, a2, a3, v4);
    _os_crash();
    __break(1u);
  }
  if (a2 + a3 > v4)
    goto LABEL_7;
  return *(_QWORD *)(a1 + 16) + 4 * a2;
}

uint64_t re::SkeletalPoseRigMappingData::poseRigMapIndex(re::SkeletalPoseRigMappingData *this, const re::MeshNameMap *a2, unsigned int a3, int a4)
{
  unsigned int v7;
  uint64_t result;

  if (*((_DWORD *)a2 + 54) <= a3)
    return 0xFFFFFFFFLL;
  v7 = re::MeshNameMap::meshPartStartIndexForInstance(a2, a3) + a4;
  if (v7 >= re::MeshNameMap::meshPartStartIndexForInstance(a2, a3 + 1))
    return 0xFFFFFFFFLL;
  result = re::MeshNameMap::skinnedPartIndexForPartInstance(a2, v7);
  if ((_DWORD)result != -1)
  {
    if (*((_QWORD *)this + 3) <= (unint64_t)result)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return *(unsigned int *)(*((_QWORD *)this + 4) + 4 * result);
  }
  return result;
}

uint64_t re::SkeletalPoseRigMappingData::poseRigMapJointTransformCount(re::SkeletalPoseRigMappingData *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a2 + 1;
  v3 = *((_QWORD *)this + 27);
  if (v3 <= v2)
    return 0;
  if (v3 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return (*(_DWORD *)(*((_QWORD *)this + 28) + 4 * v2) - *(_DWORD *)(*((_QWORD *)this + 28) + 4 * a2));
}

unint64_t re::SkeletalPoseRigMappingData::poseRigMapAbsoluteJointTransforms(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = (a2 + 1);
  v4 = *(_QWORD *)(a1 + 216);
  if (v4 > v3)
  {
    if (v4 <= a2)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 224);
      v6 = *(unsigned int *)(v5 + 4 * a2);
      v7 = a3[1];
      if (v7 >= v6)
      {
        if (v7 >= *(unsigned int *)(v5 + 4 * v3))
          return *a3 + (v6 << 6);
LABEL_10:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 242, v6, v7);
        _os_crash();
        __break(1u);
      }
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive <= size()", "range", 241, v6, v7);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  return 0;
}

uint64_t re::SkeletalPoseRigMappingData::jointTransformStartAndEndIndex(re::SkeletalPoseRigMappingData *this, unsigned int a2)
{
  if (*((_QWORD *)this + 30) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 31) + 8 * a2;
}

_QWORD *re::DynamicArray<void re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,unsigned long)::UniqueSkinningRigPose>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<void re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,unsigned long)::UniqueSkinningRigPose>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 6;
        v11 = v8 + 32;
        v12 = v7;
        do
        {
          v13 = *(_QWORD *)(v11 - 32);
          *((_DWORD *)v12 + 2) = *(_DWORD *)(v11 - 24);
          *v12 = v13;
          v12[6] = 0;
          v12[3] = 0;
          v12[4] = 0;
          v12[2] = 0;
          *((_DWORD *)v12 + 10) = 0;
          v14 = *(_QWORD *)(v11 - 8);
          v12[2] = *(_QWORD *)(v11 - 16);
          *(_QWORD *)(v11 - 16) = 0;
          v12[3] = v14;
          *(_QWORD *)(v11 - 8) = 0;
          v15 = v12[4];
          v12[4] = *(_QWORD *)v11;
          *(_QWORD *)v11 = v15;
          v16 = v12[6];
          v12[6] = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(v11 + 16) = v16;
          ++*(_DWORD *)(v11 + 8);
          ++*((_DWORD *)v12 + 10);
          *((_DWORD *)v12 + 14) = *(_DWORD *)(v11 + 24);
          v17 = *(_QWORD *)(v11 - 16);
          if (v17)
          {
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            *(_QWORD *)(v11 + 16) = 0;
            *(_QWORD *)(v11 - 8) = 0;
            *(_QWORD *)v11 = 0;
            *(_QWORD *)(v11 - 16) = 0;
            ++*(_DWORD *)(v11 + 8);
          }
          v11 += 64;
          v12 += 8;
          v10 -= 64;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::FixedArray<unsigned int>::copy(_QWORD *result, uint64_t a2, const void *a3, uint64_t a4)
{
  if (__CFADD__(a2, a4))
  {
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 362, result[1], a2, a4);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  if ((unint64_t)(a2 + a4) > result[1])
  {
LABEL_7:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Too much data to copy.", "requiredSize <= m_size", "copy", 363);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  if (a4)
    return memmove((void *)(result[2] + 4 * a2), a3, 4 * a4);
  return result;
}

uint64_t re::AudioAssetLoadStrategy_Base::createRuntimeData(uint64_t a1, re::AudioFileAsset *a2, uint64_t a3, uint64_t a4, AudioSceneService *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  id v14;
  re::AudioAssetLoadStrategy_Base *v15;

  v9 = *(id *)(*((_QWORD *)a2 + 1) + 16);
  if (v9)
  {

LABEL_8:
    re::AudioFileAsset::completeLoad(a2, a5);
    return 1;
  }
  v10 = *(id *)(*((_QWORD *)a2 + 1) + 176);

  if (v10)
    goto LABEL_8;
  if (!a3)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 48) + 64))(*((_QWORD *)a2 + 1) + 48);
    v12 = *((_QWORD *)a2 + 1);
    if (!v11)
    {
      v14 = *(id *)(v12 + 184);

      if (v14)
        goto LABEL_8;
      result = re::AudioAssetLoadStrategy_Base::createRuntimeDataWithAudioFile(v15, a2);
      if ((_DWORD)result)
        goto LABEL_8;
      return result;
    }
    a3 = v12 + 48;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, re::AudioFileAsset *))(*(_QWORD *)a1 + 40))(a1, a3, a2) & 1) != 0)
    goto LABEL_8;
  return 0;
}

uint64_t re::AudioAssetLoadStrategy_Base::createRuntimeDataWithAudioFile(re::AudioAssetLoadStrategy_Base *this, re::AudioFileAsset *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (re::audio::CanStreamAudioFiles(this) && *((_BYTE *)a2 + 100))
  {
    v3 = 50000;
    if ((*((_DWORD *)a2 + 33) + 1) < 2)
      v3 = 100000;
    *((_QWORD *)a2 + 20) = v3;
  }
  else
  {
    v4 = (void *)**((_QWORD **)a2 + 1);
    result = v4;
    if (!result)
      return result;
    v6 = (void *)result;
    objc_storeStrong(*((id **)a2 + 1), v4);
    objc_msgSend(v6, "processingFormat");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(*((_QWORD *)a2 + 1) + 8), v7);

    *((_QWORD *)a2 + 17) = objc_msgSend(v6, "length");
    objc_msgSend(v6, "processingFormat");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(unsigned int *)(objc_msgSend(v8, "streamDescription") + 24);

    v10 = *((_QWORD *)a2 + 17) * v9;
    v11 = v10 / 0x64;
    if (v10 / 0x64 <= 0xC350)
      v11 = 50000;
    v12 = v11 + v10;
    if ((*((_DWORD *)a2 + 33) + 1) > 1)
      v12 = v11;
    *((_QWORD *)a2 + 20) = v12;

  }
  return 1;
}

void sub_225385FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Base::resourceDidUpdate(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _BYTE v9[24];
  _BYTE *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  v9[0] = 0;
  v11 = 0;
  re::AudioAssetLoadStrategy_Base::resourceDidUpdate((int)v8, a2, &v8, v4, v5, (uint64_t)v9);
  if (v11)
  {
    v6 = v10;
    if (v10 == v9)
    {
      v7 = 4;
      v6 = v9;
      goto LABEL_6;
    }
    if (v10)
    {
      v7 = 5;
LABEL_6:
      (*(void (**)(void))(*v6 + 8 * v7))();
    }
  }

}

void sub_225386090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15)
{
  char *v16;
  uint64_t v17;

  if (a15)
  {
    v16 = a14;
    if (a14 == &a11)
    {
      v17 = 4;
      v16 = &a11;
    }
    else
    {
      if (!a14)
        goto LABEL_7;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  }
LABEL_7:

  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Base::resourceDidUpdate(int a1, uint64_t a2, id *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  re *v8;
  id v9;
  id v10;
  int v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  _anonymous_namespace_ *v23;
  void *v24;
  BOOL v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  re *v32;
  NSObject *v33;
  id v34;
  _anonymous_namespace_ *v35;
  uint64_t v36;
  int v37;
  double v38;
  int v39;
  _BYTE *v40;
  char *v41;
  NSObject *v42;
  void *v43;
  BOOL v44;
  id v45;
  id v46;
  BOOL v47;
  re *v48;
  NSObject *v49;
  _anonymous_namespace_ *v50;
  int v51;
  double v52;
  int v53;
  _BYTE *v54;
  char *v55;
  char **v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  BOOL v63;
  re *v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  re *v73;
  uint64_t v74;
  _anonymous_namespace_ *v75;
  uint64_t v76;
  int v77;
  double v78;
  int v79;
  _BYTE *v80;
  char *v81;
  char **v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  char **v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  uint64_t v98;
  id v99;
  _OWORD v100[2];
  id v101;
  uint8_t buf[4];
  _BYTE v103[46];
  _BYTE v104[14];
  _BYTE v105[18];
  _BYTE v106[10];
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  re::AudioPayload::dynamicCast(this, &v101);
  if (!v101)
  {
    v42 = *re::audioLogObjects(v8);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v42, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Base] Cannot update shared AudioFileAsset with bad arguments.", buf, 2u);
    }
    goto LABEL_76;
  }
  v9 = v101;
  *(_BYTE *)(a2 + 52) = objc_msgSend(v9, "inputMode");

  v10 = v101;
  objc_msgSend(v10, "referenceLevel");
  *(_DWORD *)(a2 + 48) = v11;

  v12 = v101;
  *(_DWORD *)(a2 + 96) = objc_msgSend(v12, "loopCount");

  v13 = v101;
  *(_BYTE *)(a2 + 100) = objc_msgSend(v13, "streaming");

  v14 = v101;
  *(_DWORD *)(a2 + 104) = objc_msgSend(v14, "normalizationMode");

  v15 = v101;
  *(_DWORD *)(a2 + 108) = objc_msgSend(v15, "calibrationMode");

  v16 = v101;
  objc_msgSend(v16, "calibrationLevel");
  *(_QWORD *)(a2 + 112) = v17;

  v18 = v101;
  objc_msgSend(v18, "targetLUFS");
  *(_QWORD *)(a2 + 120) = v19;

  objc_msgSend(v101, "mixGroupName");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v18) = v20 == 0;

  if ((v18 & 1) == 0)
  {
    v21 = v101;
    objc_msgSend(v21, "mixGroupName");
    v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v23 = (_anonymous_namespace_ *)objc_msgSend(v22, "UTF8String");
    buf[0] = 1;
    *(_QWORD *)&v103[4] = *(_QWORD *)&v100[0];
    *(_QWORD *)&v103[28] = *((_QWORD *)&v100[1] + 1);
    *(_OWORD *)&v103[12] = *(_OWORD *)((char *)v100 + 8);
    memset(v100, 0, sizeof(v100));
    re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a2 + 56), buf);
    if (buf[0] && *(_QWORD *)&v103[4])
    {
      if ((v103[12] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v103[4] + 40))();
      memset(&v103[4], 0, 32);
    }
    if (*(_QWORD *)&v100[0])
    {
      if ((BYTE8(v100[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v100[0] + 40))();
      memset(v100, 0, sizeof(v100));
    }

  }
  objc_msgSend(v101, "pcmBuffer");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v24 == 0;

  if (!v25)
  {
    v26 = v101;
    objc_msgSend(v26, "pcmBuffer");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(*(_QWORD *)(a2 + 8) + 176), v27);

    v28 = v101;
    objc_msgSend(v28, "format");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(*(_QWORD *)(a2 + 8) + 8), v29);

    v30 = v101;
    objc_msgSend(v30, "length");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a2 + 136) = objc_msgSend(v31, "longLongValue");

    v33 = (id)*re::audioLogObjects(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v34 = *(id *)(*(_QWORD *)(a2 + 8) + 176);
      re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a2);
      v35 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
      v36 = *(_QWORD *)(a2 + 136);
      v37 = *(unsigned __int8 *)(a2 + 52);
      v38 = *(float *)(a2 + 48);
      v39 = *(_DWORD *)(a2 + 96);
      v40 = (char *)v100 + 8;
      if (*(_BYTE *)(a2 + 56))
        v40 = (_BYTE *)(a2 + 72);
      if ((*v40 & 1) != 0)
      {
        if (*(_BYTE *)(a2 + 56))
          v56 = (char **)(a2 + 80);
        else
          v56 = (char **)&v100[1];
        v41 = *v56;
      }
      else if (*(_BYTE *)(a2 + 56))
      {
        v41 = (char *)(a2 + 73);
      }
      else
      {
        v41 = (char *)v100 + 9;
      }
      v57 = *(unsigned __int8 *)(a2 + 100);
      v58 = *(_DWORD *)(a2 + 104);
      v59 = *(_DWORD *)(a2 + 108);
      v60 = *(_QWORD *)(a2 + 112);
      v61 = *(_QWORD *)(a2 + 120);
      *(_DWORD *)buf = 138415106;
      *(_QWORD *)v103 = v34;
      *(_WORD *)&v103[8] = 2112;
      *(_QWORD *)&v103[10] = v35;
      *(_WORD *)&v103[18] = 2048;
      *(_QWORD *)&v103[20] = v36;
      *(_WORD *)&v103[28] = 1024;
      *(_DWORD *)&v103[30] = v37;
      *(_WORD *)&v103[34] = 2048;
      *(double *)&v103[36] = v38;
      *(_WORD *)&v103[44] = 1024;
      *(_DWORD *)v104 = v39;
      *(_WORD *)&v104[4] = 2080;
      *(_QWORD *)&v104[6] = v41;
      *(_WORD *)v105 = 1024;
      *(_DWORD *)&v105[2] = v57;
      *(_WORD *)&v105[6] = 1024;
      *(_DWORD *)&v105[8] = v58;
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = v59;
      *(_WORD *)v106 = 2048;
      *(_QWORD *)&v106[2] = v60;
      v107 = 2048;
      v108 = v61;
      _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Base] Recovered pcm buffer asset with buffer=%@, format=%@, length=%llu, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, targetLUFS=%0.2f from audio payload update.", buf, 0x66u);
      if (*(_QWORD *)&v100[0])
      {
        if ((BYTE8(v100[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100[0] + 40))();
      }

    }
LABEL_71:

    goto LABEL_72;
  }
  objc_msgSend(v101, "filePath");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v43 == 0;

  if (!v44)
  {
    v45 = v101;
    objc_msgSend(v45, "filePath");
    v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v47 = re::AudioFileAsset::prepareToLoadFrom((re::AudioFileAsset *)a2, (const char *)objc_msgSend(v46, "UTF8String"));

    if (!v47)
    {
      v49 = (id)*re::audioLogObjects(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v96 = v101;
        objc_msgSend(v96, "filePath");
        v97 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v98 = objc_msgSend(v97, "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v103 = v98;
        _os_log_error_impl(&dword_224FE9000, v49, OS_LOG_TYPE_ERROR, "Failed to load audio file at '%s'", buf, 0xCu);

      }
    }
    v33 = (id)*re::audioLogObjects(v48);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v50 = (_anonymous_namespace_ *)*(id *)(*(_QWORD *)(a2 + 8) + 32);
      v51 = *(unsigned __int8 *)(a2 + 52);
      v52 = *(float *)(a2 + 48);
      v53 = *(_DWORD *)(a2 + 96);
      v54 = (char *)v100 + 8;
      if (*(_BYTE *)(a2 + 56))
        v54 = (_BYTE *)(a2 + 72);
      if ((*v54 & 1) != 0)
      {
        if (*(_BYTE *)(a2 + 56))
          v82 = (char **)(a2 + 80);
        else
          v82 = (char **)&v100[1];
        v55 = *v82;
      }
      else if (*(_BYTE *)(a2 + 56))
      {
        v55 = (char *)(a2 + 73);
      }
      else
      {
        v55 = (char *)v100 + 9;
      }
      v83 = *(unsigned __int8 *)(a2 + 100);
      v84 = *(_DWORD *)(a2 + 104);
      v85 = *(_DWORD *)(a2 + 108);
      v86 = *(_QWORD *)(a2 + 112);
      v87 = *(_QWORD *)(a2 + 120);
      *(_DWORD *)buf = 138414594;
      *(_QWORD *)v103 = v50;
      *(_WORD *)&v103[8] = 1024;
      *(_DWORD *)&v103[10] = v51;
      *(_WORD *)&v103[14] = 2048;
      *(double *)&v103[16] = v52;
      *(_WORD *)&v103[24] = 1024;
      *(_DWORD *)&v103[26] = v53;
      *(_WORD *)&v103[30] = 2080;
      *(_QWORD *)&v103[32] = v55;
      *(_WORD *)&v103[40] = 1024;
      *(_DWORD *)&v103[42] = v83;
      *(_WORD *)v104 = 1024;
      *(_DWORD *)&v104[2] = v84;
      *(_WORD *)&v104[6] = 1024;
      *(_DWORD *)&v104[8] = v85;
      *(_WORD *)&v104[12] = 2048;
      *(_QWORD *)v105 = v86;
      *(_WORD *)&v105[8] = 2048;
      *(_QWORD *)&v105[10] = v87;
      _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Base] Recovered file asset with path=%@, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, targetLUFS=%0.2f from audio payload update.", buf, 0x52u);
      if (*(_QWORD *)&v100[0] && (BYTE8(v100[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v100[0] + 40))();

    }
    goto LABEL_71;
  }
  objc_msgSend(v101, "fileBuffer");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = v62 == 0;

  if (!v63)
  {
    v65 = v101;
    objc_msgSend(v65, "fileBuffer");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(*(_QWORD *)(a2 + 8) + 184), v66);

    v67 = v101;
    objc_msgSend(v67, "bufferSize");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) = objc_msgSend(v68, "unsignedLongLongValue");

    v69 = v101;
    objc_msgSend(v69, "length");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a2 + 136) = objc_msgSend(v70, "longLongValue");

    v71 = v101;
    objc_msgSend(v71, "format");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(*(_QWORD *)(a2 + 8) + 8), v72);

    v33 = (id)*re::audioLogObjects(v73);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v99 = *(id *)(*(_QWORD *)(a2 + 8) + 184);
      v74 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
      re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a2);
      v75 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
      v76 = *(_QWORD *)(a2 + 136);
      v77 = *(unsigned __int8 *)(a2 + 52);
      v78 = *(float *)(a2 + 48);
      v79 = *(_DWORD *)(a2 + 96);
      v80 = (char *)v100 + 8;
      if (*(_BYTE *)(a2 + 56))
        v80 = (_BYTE *)(a2 + 72);
      if ((*v80 & 1) != 0)
      {
        if (*(_BYTE *)(a2 + 56))
          v89 = (char **)(a2 + 80);
        else
          v89 = (char **)&v100[1];
        v81 = *v89;
      }
      else if (*(_BYTE *)(a2 + 56))
      {
        v81 = (char *)(a2 + 73);
      }
      else
      {
        v81 = (char *)v100 + 9;
      }
      v90 = *(unsigned __int8 *)(a2 + 100);
      v91 = *(_DWORD *)(a2 + 104);
      v92 = *(_DWORD *)(a2 + 108);
      v93 = *(_QWORD *)(a2 + 112);
      v94 = *(_QWORD *)(a2 + 120);
      *(_DWORD *)buf = 138415362;
      *(_QWORD *)v103 = v99;
      *(_WORD *)&v103[8] = 2048;
      *(_QWORD *)&v103[10] = v74;
      *(_WORD *)&v103[18] = 2112;
      *(_QWORD *)&v103[20] = v75;
      *(_WORD *)&v103[28] = 2048;
      *(_QWORD *)&v103[30] = v76;
      *(_WORD *)&v103[38] = 1024;
      *(_DWORD *)&v103[40] = v77;
      *(_WORD *)&v103[44] = 2048;
      *(double *)v104 = v78;
      *(_WORD *)&v104[8] = 1024;
      *(_DWORD *)&v104[10] = v79;
      *(_WORD *)v105 = 2080;
      *(_QWORD *)&v105[2] = v81;
      *(_WORD *)&v105[10] = 1024;
      *(_DWORD *)&v105[12] = v90;
      *(_WORD *)&v105[16] = 1024;
      *(_DWORD *)v106 = v91;
      *(_WORD *)&v106[4] = 1024;
      *(_DWORD *)&v106[6] = v92;
      v107 = 2048;
      v108 = v93;
      v109 = 2048;
      v110 = v94;
      _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Base] Recovered file buffer asset with buffer=%@, bufferSize=%zu, format=%@, length=%llu, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, targetLUFS=%0.2f from audio payload update.", buf, 0x70u);
      if (*(_QWORD *)&v100[0] && (BYTE8(v100[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v100[0] + 40))();

    }
    goto LABEL_71;
  }
  v88 = *re::audioLogObjects(v64);
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v88, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Base] Cannot update asset from payload that contains neither buffer nor file path.", buf, 2u);
  }
LABEL_72:
  if (!*(_BYTE *)(a6 + 32))
  {
LABEL_75:
    re::AudioFileAsset::markAsIncompleteLoad((re::AudioFileAsset *)a2);
LABEL_76:

    return;
  }
  v95 = *(_QWORD *)(a6 + 24);
  if (v95)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 48))(v95);
    goto LABEL_75;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_225386AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

BOOL re::AudioAssetLoadStrategy_Base::createRuntimeDataWithSeekableInputStream(re::AudioAssetLoadStrategy_Base *this, re::SeekableInputStream *a2, re::AudioFileAsset *a3)
{
  void *v5;
  void *v6;
  re::audio *v7;
  AVAudioFormat *v8;
  re *v9;
  _BOOL8 v10;
  id v11;
  re::audio *v12;
  unint64_t v13;
  unint64_t v14;
  char SharableFileBuffer;
  NSObject *v16;
  NSObject *v17;
  uint8_t v19[16];
  uint8_t buf[16];

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a3 + 1) + 48) + 64))(*((_QWORD *)a3 + 1) + 48))
    *(_QWORD *)(*((_QWORD *)a3 + 1) + 160) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a3 + 1)
                                                                                              + 48)
                                                                                  + 40))(*((_QWORD *)a3 + 1) + 48);
  +[_REAudioFile audioFileWithStream:ownsStream:](_REAudioFile, "audioFileWithStream:ownsStream:", a2, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "processingFormat");
    v7 = (re::audio *)objc_claimAutoreleasedReturnValue();
    v9 = (re *)re::audio::layoutTagFromFormat(v7, v8);
    *((_DWORD *)a3 + 32) = (_DWORD)v9;
    v10 = (_DWORD)v9 != -65536;
    if ((_DWORD)v9 == -65536)
    {
      v17 = *re::audioLogObjects(v9);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v19 = 0;
        _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Client] Failed to load embedded audio due to missing channel layout.", v19, 2u);
      }
    }
    else
    {
      if (!*((_BYTE *)a3 + 100))
        goto LABEL_11;
      v11 = v6;
      v12 = v7;
      v13 = (*(uint64_t (**)(re::SeekableInputStream *))(*(_QWORD *)a2 + 64))(a2);
      objc_storeStrong((id *)(*((_QWORD *)a3 + 1) + 8), v7);
      *((_QWORD *)a3 + 17) = objc_msgSend(v11, "getReaderFileLength");
      v14 = v13 / 0x64;
      if (v13 / 0x64 <= 0xC350)
        v14 = 50000;
      if ((*((_DWORD *)a3 + 33) + 1) <= 1)
        v14 += v13;
      *((_QWORD *)a3 + 20) = v14;
      SharableFileBuffer = re::AudioFileAsset::createSharableFileBuffer((re::AudioFileAsset::Impl **)a3, a2);

      if ((SharableFileBuffer & 1) == 0)
LABEL_11:
        re::AudioAssetLoadStrategy_Base::decodeSeekableStreamIntoPCMBuffer(v9, a2, a3);
    }

  }
  else
  {
    v16 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Client] Failed to load embedded audio due to nil audio file.", buf, 2u);
    }
    v10 = 0;
  }

  return v10;
}

void sub_225386E54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL re::AudioAssetLoadStrategy_Base::decodeSeekableStreamIntoPCMBuffer(re::AudioAssetLoadStrategy_Base *this, re::SeekableInputStream *a2, re::AudioFileAsset *a3)
{
  void *v5;
  void *v6;
  void *v7;
  AVAudioPCMBuffer *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v12 = 0;
  v13 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  re::audio::AudioFileAssetReader::init(&v12, a2, 0);
  re::audio::AudioFileAssetReader::readFromData((re::audio::AudioFileAssetReader *)&v12);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "format");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(*((_QWORD *)a3 + 1) + 8), v7);

    *((_QWORD *)a3 + 17) = objc_msgSend(v6, "frameLength");
    objc_storeStrong((id *)(*((_QWORD *)a3 + 1) + 16), v6);
    v9 = re::audio::pcmBufferSize((re::audio *)v6, v8);
    v10 = v9 / 0x64;
    if (v9 / 0x64 <= 0xC350)
      v10 = 50000;
    if ((*((_DWORD *)a3 + 33) + 1) <= 1)
      v10 += v9;
    *((_QWORD *)a3 + 20) = v10;
    if (re::internal::enableSignposts(0, 0))
    {
      (*(void (**)(re::SeekableInputStream *))(*(_QWORD *)a2 + 64))(a2);
      kdebug_trace();
    }
  }

  re::audio::AudioFileAssetReader::~AudioFileAssetReader((re::audio::AudioFileAssetReader *)&v12);
  return v6 != 0;
}

void sub_22538701C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  re::audio::AudioFileAssetReader::~AudioFileAssetReader((re::audio::AudioFileAssetReader *)va);
  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Base::~AudioAssetLoadStrategy_Base(re::AudioAssetLoadStrategy_Base *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::SceneAsset::assetType(re::SceneAsset *this)
{
  unsigned __int8 v1;

  {
    re::SceneAsset::assetType(void)::type = (uint64_t)"Scene";
    qword_255827748 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::SceneAsset::assetType(void)::type);
  }
  return &re::SceneAsset::assetType(void)::type;
}

void re::ecs2::ComponentHandleAssetData::release(uint64_t **this, re::Allocator *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  if (this[1])
  {
    v4 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)this);
    v5 = re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v4, (uint64_t)*this);
    if (v5)
    {
      if (*((_BYTE *)this + 16))
      {

        this[1] = 0;
      }
      else
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
        re::introspectionReleasePointer(this[1], (uint64_t)a2, 0, v6);
      }
    }
  }
}

void re::ecs2::EntityAssetData::~EntityAssetData(re::ecs2::EntityAssetData *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)this + 32;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *((_QWORD *)this + 8);
    v5 = 24 * v3;
    do
    {
      re::ecs2::ComponentHandleAssetData::release((uint64_t **)v4, *(re::Allocator **)v2);
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 16) = 0;
      v4 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  re::DynamicArray<re::ecs2::EntityAssetData>::deinit((uint64_t)this + 72);
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    if (*((_QWORD *)this + 8))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
    *(_QWORD *)v2 = 0;
    ++*((_DWORD *)this + 14);
  }
  re::StringID::destroyString((re::ecs2::EntityAssetData *)((char *)this + 8));
}

uint64_t re::SceneAssetLoader::registerAsset()
{
  return 0;
}

re *re::SceneAssetLoader::unloadAsset(re::SceneAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::SceneAsset>((re *)"unloadAsset", 92, a2);
}

re *re::internal::destroyPersistent<re::SceneAsset>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::SceneAssetLoader::isSupportedSourceExtension(re::SceneAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "rescene") == 0;
}

__guard re::SceneAssetLoader::introspectionType(re::SceneAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::SceneAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"SceneAsset", (uint64_t (*)(re::internal *))re::allocInfo_SceneAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SceneAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SceneAsset>, 0);
    }
  }
  return v2[17];
}

_QWORD *re::SceneAssetLoader::findRegistrationDependencies@<X0>(re::SceneAssetLoader *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  result = re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t *re::IntrospectionInfo<re::ecs2::Component *>::get(int a1)
{
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  re *v6;
  uint64_t v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  std::__shared_mutex_base *v12;
  __int128 v14;
  __int128 v15;
  const char *v16;
  unint64_t v17;
  char *__s1;

  if ((v2 & 1) == 0
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info);
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::isInitialized)
    {
LABEL_19:
      v12 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v12);
      return &re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::isInitialized = 1;
  v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info, 0);
  qword_2558010A8 = 0x800000001;
  dword_2558010B0 = 8;
  word_2558010B4 = 0;
  *(_QWORD *)&xmmword_2558010B8 = 0;
  *((_QWORD *)&xmmword_2558010B8 + 1) = 0xFFFFFFFFLL;
  re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info = (uint64_t)&off_24ED30800;
  qword_2558010C8 = v7;
  unk_2558010D0 = 0;
  re::IntrospectionRegistry::add(v8, v9);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
  if ((BYTE8(v15) & 1) != 0)
    v10 = v16;
  else
    v10 = (char *)&v15 + 9;
  if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  if (v17 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
  {
    v11 = v15;
  }
  else
  {
    v15 = *(_OWORD *)(v7 + 32);
    v11 = v14;
  }
  xmmword_2558010B8 = v11;
  re::StringID::destroyString((re::StringID *)&v17);
  if ((a1 & 1) == 0)
    goto LABEL_19;
  return &re::IntrospectionInfo<re::ecs2::Component *>::get(BOOL)::info;
}

void re::internal::defaultConstruct<re::ecs2::ComponentHandleAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::ComponentHandleAssetData>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::ComponentHandleAssetData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  const char *v25;
  __int128 v26;

  v0 = atomic_load((unsigned __int8 *)&qword_254101CC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254101CC0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254101D08);
    qword_254101D08 = (uint64_t)&off_24ED3A218;
    __cxa_guard_release(&qword_254101CC0);
  }
  if ((_MergedGlobals_92 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254101C70;
    if (qword_254101C70)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254101C60);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254101C60))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101D88, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101D98 = 0;
      *(_QWORD *)&xmmword_254101DA8 = 0;
      *((_QWORD *)&xmmword_254101DA8 + 1) = 0xFFFFFFFFLL;
      qword_254101D88 = (uint64_t)&off_24ED7DAA8;
      qword_254101DB8 = (uint64_t)"ComponentHandleAssetData";
      dword_254101DC0 = 0;
      xmmword_254101DC8 = 0u;
      *(_OWORD *)&qword_254101DD8 = 0u;
      xmmword_254101DE8 = 0u;
      qword_254101DF8 = 0;
      __cxa_guard_release(&qword_254101C60);
    }
    qword_254101C70 = (uint64_t)&qword_254101D88;
    *(_QWORD *)&v26 = 0xE7C2365AE903F5AALL;
    *((_QWORD *)&v26 + 1) = "ComponentHandleAssetData";
    re::StringID::destroyString((re::StringID *)&v26);
    xmmword_254101DA8 = v24;
    v4 = atomic_load((unsigned __int8 *)&qword_254101C68);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254101C68);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = re::IntrospectionInfo<re::ecs2::Component *>::get(1);
        v17 = re::introspect_uint64_t((re *)1, v16);
        v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v18 = 1;
        *(_QWORD *)(v18 + 8) = "component";
        *(_QWORD *)(v18 + 16) = v15;
        *(_QWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 32) = 0x800000001;
        *(_DWORD *)(v18 + 40) = 2;
        *(_QWORD *)(v18 + 48) = v17;
        *(_QWORD *)(v18 + 56) = 0;
        *(_DWORD *)(v18 + 64) = 0;
        qword_254101CD0 = v18;
        v19 = re::introspectionAllocator((re *)v18);
        v20 = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 8, 4);
        *v20 = 0x100000004;
        qword_254101CD8 = (uint64_t)v20;
        __cxa_guard_release(&qword_254101C68);
      }
    }
    qword_254101D98 = 0x1800000008;
    v1 = &qword_254101D88;
    dword_254101DA0 = 8;
    word_254101DA4 = 1;
    dword_254101DC0 = 2;
    *(_QWORD *)&xmmword_254101DC8 = &qword_254101CD0;
    *((_QWORD *)&xmmword_254101DC8 + 1) = re::internal::defaultConstruct<re::ecs2::ComponentHandleAssetData>;
    qword_254101DD8 = (uint64_t)re::internal::defaultDestruct<re::ecs2::ComponentHandleAssetData>;
    unk_254101DE0 = 0;
    *(_QWORD *)&xmmword_254101DE8 = 0;
    *((_QWORD *)&xmmword_254101DE8 + 1) = re::internal::defaultConstructV2<re::ecs2::ComponentHandleAssetData>;
    qword_254101DF8 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::ComponentHandleAssetData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101D88, v3);
    v26 = v24;
    if ((_MergedGlobals_92 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_92 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101D08, 0);
      qword_254101D18 = 0x2800000003;
      dword_254101D20 = v5;
      word_254101D24 = 0;
      *(_QWORD *)&xmmword_254101D28 = 0;
      *((_QWORD *)&xmmword_254101D28 + 1) = 0xFFFFFFFFLL;
      qword_254101D38 = (uint64_t)v1;
      unk_254101D40 = 0;
      qword_254101D08 = (uint64_t)&off_24ED3A218;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254101D08, (const re::IntrospectionBase *)&v24);
      if ((BYTE8(v24) & 1) != 0)
        v8 = v25;
      else
        v8 = (char *)&v24 + 9;
      if ((_QWORD)v24 && (BYTE8(v24) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      v22 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v21 + 1) = v10;
      }
      else
      {
        v26 = v22;
        re::TypeBuilder::beginListType((uint64_t)&v24, v23, 1, 0x28uLL, 8uLL, &v26);
        re::TypeBuilder::setConstructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v24, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v24, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v24, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v24, v11);
      }
      xmmword_254101D28 = v21;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityAssetData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];
  __int128 v33;
  const char *v34;
  __int128 v35;

  v0 = atomic_load((unsigned __int8 *)&qword_254101CC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254101CC8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254101D48);
    qword_254101D48 = (uint64_t)&off_24ED3A2B0;
    __cxa_guard_release(&qword_254101CC8);
  }
  if ((byte_254101C59 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254101C88;
    if (qword_254101C88)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254101C78);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254101C78))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101E00, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254101E10 = 0;
      *(_QWORD *)&xmmword_254101E20 = 0;
      *((_QWORD *)&xmmword_254101E20 + 1) = 0xFFFFFFFFLL;
      qword_254101E00 = (uint64_t)&off_24ED7DAA8;
      qword_254101E30 = (uint64_t)"EntityAssetData";
      dword_254101E38 = 0;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      qword_254101E70 = 0;
      __cxa_guard_release(&qword_254101C78);
    }
    qword_254101C88 = (uint64_t)&qword_254101E00;
    *(_QWORD *)&v35 = 0x1BEB5EC469A7F3EELL;
    *((_QWORD *)&v35 + 1) = "EntityAssetData";
    re::StringID::destroyString((re::StringID *)&v35);
    xmmword_254101E20 = v33;
    v4 = atomic_load((unsigned __int8 *)&qword_254101C80);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254101C80);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::introspect_uint64_t((re *)1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "id";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254101CE0 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "name";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x800000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254101CE8 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::introspect_BOOL((re *)1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "isSelfActive";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x1800000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_254101CF0 = v25;
        v26 = re::introspectionAllocator((re *)v25);
        re::IntrospectionInfo<re::DynamicArray<re::ecs2::ComponentHandleAssetData>>::get();
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "components";
        *(_QWORD *)(v27 + 16) = &qword_254101D08;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0x2000000004;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_254101CF8 = v27;
        v28 = re::introspectionAllocator((re *)v27);
        re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityAssetData>>::get();
        v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = "children";
        *(_QWORD *)(v29 + 16) = &qword_254101D48;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0x4800000005;
        *(_DWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
        qword_254101D00 = v29;
        __cxa_guard_release(&qword_254101C80);
      }
    }
    qword_254101E10 = 0x7000000008;
    v1 = &qword_254101E00;
    dword_254101E18 = 8;
    word_254101E1C = 0;
    dword_254101E38 = 5;
    qword_254101E40 = (uint64_t)&qword_254101CE0;
    unk_254101E48 = re::internal::defaultConstruct<re::ecs2::EntityAssetData>;
    qword_254101E60 = 0;
    qword_254101E50 = (uint64_t)re::internal::defaultDestruct<re::ecs2::EntityAssetData>;
    unk_254101E58 = 0;
    qword_254101E68 = (uint64_t)re::internal::defaultConstructV2<re::ecs2::EntityAssetData>;
    qword_254101E70 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::EntityAssetData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254101E00, v3);
    v35 = v33;
    if ((byte_254101C59 & 1) == 0)
    {
LABEL_7:
      byte_254101C59 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101D48, 0);
      *(_QWORD *)&algn_254101D50[8] = 0x2800000003;
      dword_254101D60 = v5;
      word_254101D64 = 0;
      *(_QWORD *)&xmmword_254101D68 = 0;
      *((_QWORD *)&xmmword_254101D68 + 1) = 0xFFFFFFFFLL;
      qword_254101D78 = (uint64_t)v1;
      unk_254101D80 = 0;
      qword_254101D48 = (uint64_t)&off_24ED3A2B0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254101D48, (const re::IntrospectionBase *)&v33);
      if ((BYTE8(v33) & 1) != 0)
        v8 = v34;
      else
        v8 = (char *)&v33 + 9;
      if ((_QWORD)v33 && (BYTE8(v33) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v33 + 40))();
      v31 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v32);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v30 + 1) = v10;
      }
      else
      {
        v35 = v31;
        re::TypeBuilder::beginListType((uint64_t)&v33, v32, 1, 0x28uLL, 8uLL, &v35);
        re::TypeBuilder::setConstructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v33, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v33, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v33, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v33, v11);
      }
      xmmword_254101D68 = v30;
      re::StringID::destroyString((re::StringID *)v32);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::EntityAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  *(_BYTE *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::EntityAssetData>(int a1, int a2, re::ecs2::EntityAssetData *this)
{
  re::ecs2::EntityAssetData::~EntityAssetData(this);
}

double re::internal::defaultConstructV2<re::ecs2::EntityAssetData>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &str_110;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

uint64_t *re::ecs2::allocInfo_SceneAssetData(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254101C90);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254101C90))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101E78, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254101E88 = 0;
    qword_254101E98 = 0;
    qword_254101EA0 = 0xFFFFFFFFLL;
    qword_254101E78 = (uint64_t)&off_24ED7DAA8;
    qword_254101EA8 = (uint64_t)"SceneAssetData";
    dword_254101EB0 = 0;
    xmmword_254101EB8 = 0u;
    unk_254101EC8 = 0u;
    xmmword_254101ED8 = 0u;
    qword_254101EE8 = 0;
    __cxa_guard_release(&qword_254101C90);
  }
  return &qword_254101E78;
}

void re::ecs2::initInfo_SceneAssetData(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;

  v9[0] = 0x79292AE943720F5CLL;
  v9[1] = "SceneAssetData";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  v4 = atomic_load((unsigned __int8 *)&qword_254101CA0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254101CA0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::EntityAssetData>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "entities";
      *(_QWORD *)(v7 + 16) = &qword_254101D48;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_254101C98 = v7;
      __cxa_guard_release(&qword_254101CA0);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254101C98;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::SceneAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::ecs2::SceneAssetData>(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::ecs2::introspect_SceneAssetData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneAssetData", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneAssetData, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneAssetData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneAssetData>, this);
}

uint64_t *re::allocInfo_SceneAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254101CA8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254101CA8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254101EF0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254101F00 = 0;
    qword_254101F10 = 0;
    qword_254101F18 = 0xFFFFFFFFLL;
    qword_254101EF0 = (uint64_t)&off_24ED7DAA8;
    qword_254101F20 = (uint64_t)"SceneAsset";
    dword_254101F28 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254101F60 = 0;
    __cxa_guard_release(&qword_254101CA8);
  }
  return &qword_254101EF0;
}

void re::initInfo_SceneAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x103693E25C6BC8;
  v12[1] = "SceneAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254101CB8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254101CB8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::ecs2::SceneAssetData>;
      if (!re::internal::introspectionInfoStorage<re::ecs2::SceneAssetData>)
      {
        v8 = re::ecs2::allocInfo_SceneAssetData((re::ecs2 *)v6);
        re::internal::introspectionInfoStorage<re::ecs2::SceneAssetData> = (uint64_t)v8;
        re::ecs2::initInfo_SceneAssetData((re::ecs2 *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "sceneAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254101CB0 = v10;
      __cxa_guard_release(&qword_254101CB8);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254101CB0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SceneAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SceneAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SceneAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SceneAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::internal::defaultConstruct<re::SceneAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::SceneAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::SceneAsset>(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::introspect_SceneAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneAsset", (uint64_t (*)(re::internal *))re::allocInfo_SceneAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SceneAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SceneAsset>, this);
}

void re::SceneAssetLoader::~SceneAssetLoader(re::SceneAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::ComponentHandleAssetData>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  __n128 v10;
  uint64_t v11;

  v10 = 0uLL;
  v11 = 0;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 24 * *((_QWORD *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ComponentHandleAssetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::ComponentHandleAssetData>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(result, a2);
      v4 = v3[2];
    }
    if (v4 < a2)
    {
      v5 = v3[4];
      v6 = v5 + 24 * v4;
      v7 = v5 + 24 * a2 - v6;
      if (v7 >= 1)
      {
        v8 = v7 / 0x18uLL + 1;
        do
        {
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          *(_BYTE *)(v6 + 16) = 0;
          v6 += 24;
          --v8;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::ComponentHandleAssetData>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 24 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ComponentHandleAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::EntityAssetData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  v10 = 0u;
  v12 = 1;
  v11 = &str_110;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0u;
  v16 = 0u;
  re::DynamicArray<re::ecs2::EntityAssetData>::add(a4, (uint64_t)&v10);
  re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v10);
  v8 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 112 * *(_QWORD *)(a4 + 16) - 112);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::EntityAssetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 112 * a3;
}

void re::DynamicArray<re::ecs2::EntityAssetData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 112 * a2;
    v9 = a2;
    do
    {
      re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 112;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 112 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = &str_110;
        *(_BYTE *)(v7 + 24) = 1;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_DWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 104) = 0;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        v6 += 112;
        *(_DWORD *)(v7 + 96) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::clear((re::ecs2::EntityAssetData *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::EntityAssetData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 112 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 112;
        v11 -= 112;
      }
      while (v11);
    }
  }
}

re::ecs2::EntityAssetData *re::DynamicArray<re::ecs2::EntityAssetData>::clear(re::ecs2::EntityAssetData *result)
{
  re::ecs2::EntityAssetData *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::ecs2::EntityAssetData *)*((_QWORD *)result + 4);
    v3 = 112 * v2;
    do
    {
      re::ecs2::EntityAssetData::~EntityAssetData(result);
      result = (re::ecs2::EntityAssetData *)(v4 + 112);
      v3 -= 112;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 112 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 112 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::EntityAssetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t *re::RigGraphAsset::assetType(re::RigGraphAsset *this)
{
  unsigned __int8 v1;

  {
    re::RigGraphAsset::assetType(void)::type = (uint64_t)"RigGraph";
    qword_255827768 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::RigGraphAsset::assetType(void)::type);
  }
  return &re::RigGraphAsset::assetType(void)::type;
}

uint64_t *re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset@<X0>(re::RigGraphAsset *this@<X0>, const re::ecs2::Entity *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v7;
  __CFError *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  int v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  CFErrorRef *v36;
  CFErrorRef *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  const StringID *v46;
  const StringID *v47;
  __CFError *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char *var1;
  void **v53;
  __CFError *v54;
  __CFError *v55;
  unint64_t v56;
  uint64_t v57;
  const char **v58;
  char *v59;
  uint64_t v60;
  CFErrorRef v61;
  CFErrorRef *v63;
  __CFError *v64;
  uint64_t v65;
  const char **v66;
  uint64_t v67;
  __CFError *v68;
  __CFError *v69;
  CFErrorRef v70;
  _anonymous_namespace_ *v71;
  re::RigGraphAsset *v72;
  const re::ecs2::Entity *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  char v78[24];
  StringID v79;
  _QWORD v80[2];
  StringID v81;
  char v82[24];
  StringID v83;
  char v84[24];
  StringID v85;
  char v86[24];
  StringID v87;
  char v88[24];
  StringID v89;
  _QWORD v90[2];
  uint64_t v91[2];
  uint64_t v92[2];
  StringID v93;
  uint64_t v94;
  void *v95;
  void **v96;
  uint64_t v97;
  int v98;
  StringID v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  StringID v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  __CFError *v111;
  _QWORD v112[3];
  __CFError *v113;
  _BYTE v114[40];
  __CFError *v115;
  _OWORD v116[2];
  int v117;
  _OWORD v118[2];
  int v119;
  _OWORD v120[2];
  int v121;
  _OWORD v122[2];
  int v123;
  uint64_t v124;
  CFErrorRef v125[6];
  __int128 v126;
  __int128 v127;
  int v128;
  __int128 v129;
  __int128 v130;
  int v131;
  __int128 v132;
  __int128 v133;
  int v134;
  __int128 v135;
  __int128 v136;
  int v137;
  uint64_t v138;
  _BYTE v139[38];
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v7 = re::globalAllocators(this);
  v8 = (__CFError *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 160, 8);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  v113 = (__CFError *)v112;
  v111 = v8;
  v112[0] = &off_24ED3A4A0;
  if (!*((_QWORD *)this + 29))
  {
    v125[0] = 0;
    v59 = "Source entity must have a skeletal pose";
LABEL_40:
    v60 = 39;
LABEL_41:
    re::internal::makeError(v59, v60, v125);
    v61 = v125[0];
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v61;
    return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v111);
  }
  v9 = *((_QWORD *)a2 + 22);
  if (!v9 || !*((_QWORD *)a2 + 29))
  {
    v125[0] = 0;
    v59 = "Target entity must have a skeletal mesh";
    goto LABEL_40;
  }
  v10 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v9 + 32));
  if (!v10)
  {
    v125[0] = 0;
    v59 = "Invalid skeletal mesh";
    v60 = 21;
    goto LABEL_41;
  }
  v11 = v10;
  v12 = (uint64_t)v111;
  re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)v12, 0);
  ++*(_DWORD *)(v12 + 24);
  re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)(v12 + 40), 0);
  ++*(_DWORD *)(v12 + 64);
  re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((_QWORD *)(v12 + 80), 0);
  ++*(_DWORD *)(v12 + 104);
  v13 = *((_DWORD *)v11 + 234);
  if (v13)
  {
    v72 = this;
    v73 = a2;
    v71 = (_anonymous_namespace_ *)(v12 + 80);
    v74 = a3;
    do
    {
      v92[0] = 0xF97D88DA606B5F84;
      v92[1] = (uint64_t)"retargetRigGraph";
      re::StringID::destroyString((re::StringID *)v92);
      v91[0] = 0;
      v91[1] = (uint64_t)&str_110;
      v90[0] = 0;
      v90[1] = &str_110;
      re::internal::RigGraphDefinitionBuilder::addNode((uint64_t)v125, v91, v90);
      re::StringID::destroyString((re::StringID *)v90);
      re::StringID::destroyString((re::StringID *)v91);
      *(_QWORD *)&v89.var0 = 0;
      v89.var1 = (char *)&str_110;
      *(_QWORD *)&v105.var0 = 0;
      v105.var1 = (char *)&str_110;
      v106 = 0;
      v107 = &str_110;
      v88[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v125, &v89, &v105, v88);
      re::StringID::destroyString((re::StringID *)&v106);
      re::StringID::destroyString((re::StringID *)&v105);
      re::StringID::destroyString((re::StringID *)&v89);
      *(_QWORD *)&v87.var0 = 0;
      v87.var1 = (char *)&str_110;
      *(_QWORD *)&v99.var0 = 0;
      v99.var1 = (char *)&str_110;
      v100 = 0;
      v101 = &str_110;
      v86[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v125, &v87, &v99, v86);
      re::StringID::destroyString((re::StringID *)&v100);
      re::StringID::destroyString((re::StringID *)&v99);
      re::StringID::destroyString((re::StringID *)&v87);
      *(_QWORD *)&v85.var0 = 0;
      v85.var1 = (char *)&str_110;
      *(_QWORD *)&v93.var0 = 0;
      v93.var1 = (char *)&str_110;
      v94 = 0;
      v95 = &str_110;
      v84[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v125, &v85, &v93, v84);
      re::StringID::destroyString((re::StringID *)&v94);
      re::StringID::destroyString((re::StringID *)&v93);
      re::StringID::destroyString((re::StringID *)&v85);
      *(_QWORD *)&v83.var0 = 0;
      v83.var1 = (char *)&str_110;
      *(_QWORD *)v139 = 0;
      *(_QWORD *)&v139[8] = &str_110;
      *(_QWORD *)&v139[16] = 0;
      *(_QWORD *)&v139[24] = &str_110;
      v82[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v125, &v83, (const StringID *)v139, v82);
      re::StringID::destroyString((re::StringID *)&v139[16]);
      re::StringID::destroyString((re::StringID *)v139);
      re::StringID::destroyString((re::StringID *)&v83);
      *(_QWORD *)&v81.var0 = 0;
      v81.var1 = (char *)&str_110;
      *(_QWORD *)&v79.var0 = 0;
      v79.var1 = (char *)&str_110;
      v80[0] = 0;
      v80[1] = &str_110;
      v78[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphOutput(v125, &v81, &v79, v78);
      re::StringID::destroyString((re::StringID *)v80);
      re::StringID::destroyString((re::StringID *)&v79);
      re::StringID::destroyString((re::StringID *)&v81);
      *(CFErrorRef *)v114 = v125[0];
      v31 = *(_OWORD *)&v125[1];
      v125[0] = 0;
      v125[1] = (CFErrorRef)&str_110;
      *(_OWORD *)&v114[8] = v31;
      memset(&v125[2], 0, 24);
      *(_OWORD *)&v114[24] = *(_OWORD *)&v125[3];
      v116[0] = v126;
      v116[1] = v127;
      v126 = 0u;
      v127 = 0u;
      ++LODWORD(v125[5]);
      ++v128;
      LODWORD(v115) = 1;
      v117 = 1;
      v118[0] = v129;
      v129 = 0u;
      v118[1] = v130;
      v130 = 0u;
      v120[0] = v132;
      v120[1] = v133;
      v132 = 0u;
      v133 = 0u;
      ++v131;
      ++v134;
      v119 = 1;
      v121 = 1;
      v122[0] = v135;
      v135 = 0u;
      v122[1] = v136;
      v136 = 0u;
      v124 = v138;
      v138 = 0;
      ++v137;
      v123 = 1;
      re::DynamicArray<re::RigGraphDefinition>::add(v12, (uint64_t *)v114);
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)v122 + 8);
      re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)v120 + 1);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v118 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v116 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v114[16]);
      re::StringID::destroyString((re::StringID *)v114);
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v135 + 8);
      re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)&v132 + 1);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v129 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v126 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v125[2]);
      re::StringID::destroyString((re::StringID *)v125);
      --v13;
    }
    while (v13);
    v32 = *((_QWORD *)v11 + 52);
    if (v32)
    {
      v33 = (uint64_t *)*((_QWORD *)v11 + 54);
      v75 = &v33[v32];
      v76 = *((_QWORD *)v11 + 55) + 8;
      a3 = *((unsigned int *)v11 + 234);
      while (1)
      {
        v34 = re::DataArray<re::MeshModel>::tryGet(v76, *v33);
        if (!v34)
        {
          v125[0] = 0;
          re::internal::makeError("Unable to get mesh model", 24, v125);
          v63 = (CFErrorRef *)v125[0];
          a3 = v74;
          goto LABEL_84;
        }
        v35 = v34;
        v77 = v33;
        v36 = *(CFErrorRef **)(v34 + 56);
        if (v36)
          break;
LABEL_19:
        v33 = v77 + 1;
        if (v77 + 1 == v75)
          goto LABEL_20;
      }
      v37 = 0;
      v38 = 4;
      v39 = 504;
      while (1)
      {
        v40 = *(_QWORD *)(v35 + 56);
        if (v40 <= (unint64_t)v37)
          break;
        v41 = *(_QWORD *)(v35 + 176);
        if (v41)
        {
          if (*(_QWORD *)(v41 + 8) > (unint64_t)v37)
          {
            v42 = *(_QWORD *)(v41 + 16);
            v43 = *(_DWORD *)(v42 + v38);
            if (v43 < a3)
            {
              v44 = a3;
              v45 = *(_QWORD *)(v35 + 64);
              v46 = (const StringID *)re::MeshAsset::skeletonAtIndex(v11, *(unsigned int *)(v42 + v38));
              re::StringID::StringID((re::StringID *)v114, v46);
              LOBYTE(v125[0]) = 2;
              re::StringID::StringID((re::StringID *)&v125[1], (const StringID *)v35);
              v47 = (const StringID *)(v45 + v39);
              a3 = v44;
              re::StringID::StringID((re::StringID *)&v125[3], v47);
              re::StringID::StringID((re::StringID *)&v125[5], (const StringID *)v114);
              DWORD2(v126) = v43;
              re::DynamicArray<re::MeshRigGraphIndex>::add((_anonymous_namespace_ *)(v12 + 40), (uint64_t)v125);
              re::StringID::destroyString((re::StringID *)&v125[5]);
              re::StringID::destroyString((re::StringID *)&v125[3]);
              re::StringID::destroyString((re::StringID *)&v125[1]);
              re::StringID::destroyString((re::StringID *)v114);
            }
          }
        }
        v37 = (CFErrorRef *)((char *)v37 + 1);
        v39 += 560;
        v38 += 72;
        if (v36 == v37)
          goto LABEL_19;
      }
      *(_QWORD *)&v105.var0 = 0;
      v126 = 0u;
      v127 = 0u;
      memset(v125, 0, sizeof(v125));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 476;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v37;
      *(_WORD *)&v114[28] = 2048;
      *(_QWORD *)&v114[30] = v40;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_91;
    }
LABEL_20:
    *(_QWORD *)&v114[8] = 0;
    *(_QWORD *)v114 = 0;
    *(_DWORD *)&v114[16] = 1;
    v115 = 0;
    *(_QWORD *)&v114[24] = 0;
    *(_QWORD *)&v114[32] = 0;
    LODWORD(v116[0]) = 0;
    v105.var1 = 0;
    *(_QWORD *)&v105.var0 = 0;
    LODWORD(v106) = 1;
    v109 = 0;
    v107 = 0;
    v108 = 0;
    v110 = 0;
    re::internal::RetargetRigGraphAssetBuilder::appendParentNamesAndIds((uint64_t)v72, (uint64_t)v114, (uint64_t)&v105);
    v99.var1 = 0;
    *(_QWORD *)&v99.var0 = 0;
    LODWORD(v100) = 1;
    v103 = 0;
    v101 = 0;
    v102 = 0;
    v104 = 0;
    *(_QWORD *)&v93.var0 = 0;
    v93.var1 = 0;
    LODWORD(v94) = 1;
    v97 = 0;
    v95 = 0;
    v96 = 0;
    v98 = 0;
    re::internal::RetargetRigGraphAssetBuilder::appendParentNamesAndIds((uint64_t)v73, (uint64_t)&v99, (uint64_t)&v93);
    if (v109)
    {
      v48 = 0;
      v49 = -1;
      while (1)
      {
        v50 = (_QWORD *)re::BucketArray<unsigned long long,5ul>::operator[]((uint64_t)&v105, (unint64_t)v48);
        if (v97)
        {
          v51 = 0;
          var1 = v93.var1;
          v53 = v96;
          if ((v94 & 1) != 0)
            v53 = &v95;
          while (1)
          {
            if (v93.var1 <= (char *)(v51 / 5))
            {
              *(_QWORD *)&v79.var0 = 0;
              v126 = 0u;
              v127 = 0u;
              memset(v125, 0, sizeof(v125));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v139 = 136315906;
              *(_QWORD *)&v139[4] = "operator[]";
              *(_WORD *)&v139[12] = 1024;
              *(_DWORD *)&v139[14] = 866;
              *(_WORD *)&v139[18] = 2048;
              *(_QWORD *)&v139[20] = v51 / 5;
              *(_WORD *)&v139[28] = 2048;
              *(_QWORD *)&v139[30] = var1;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            if (*((_QWORD *)v53[v51 / 5] + v51 + -5 * (v51 / 5)) == *v50)
              break;
            if (v97 == ++v51)
              goto LABEL_31;
          }
        }
        else
        {
          v51 = 0;
        }
        if (v51 != v97)
          break;
LABEL_31:
        v48 = (__CFError *)((char *)v48 + 1);
        ++v49;
        if ((unint64_t)v48 >= v109)
          goto LABEL_32;
      }
      if ((v114[16] & 1) != 0)
        v64 = (__CFError *)&v114[24];
      else
        v64 = *(__CFError **)&v114[32];
      v125[0] = v64;
      v125[1] = *(CFErrorRef *)&v114[8];
      v125[2] = v48;
      for (; v51; --v51)
        re::DynamicString::appendf((re::DynamicString *)v139, "relative[parent].");
      if (v48)
      {
        do
        {
          v65 = *(_QWORD *)(re::BucketSlice<re::StringSlice,5ul>::operator[](v125, v49) + 8);
          v66 = (const char **)re::BucketSlice<re::StringSlice,5ul>::operator[](v125, v49);
          re::DynamicString::appendf((re::DynamicString *)v139, "%.*s.", v65, *v66);
          --v49;
        }
        while (v49 != -1);
      }
    }
    else
    {
LABEL_32:
      v54 = *(__CFError **)&v114[32];
      v55 = v115;
      if ((v114[16] & 1) != 0)
        v54 = (__CFError *)&v114[24];
      v125[0] = v54;
      v125[1] = *(CFErrorRef *)&v114[8];
      v125[2] = v115;
      if (v55)
      {
        v56 = (unint64_t)v55 - 1;
        do
        {
          v57 = *(_QWORD *)(re::BucketSlice<re::StringSlice,5ul>::operator[](v125, v56) + 8);
          v58 = (const char **)re::BucketSlice<re::StringSlice,5ul>::operator[](v125, v56);
          re::DynamicString::appendf((re::DynamicString *)v139, "%.*s.", v57, *v58);
          --v56;
        }
        while (v56 != -1);
      }
    }
    re::BucketArray<unsigned long long,5ul>::deinit((uint64_t)&v93);
    a3 = v74;
    if (*(_QWORD *)&v93.var0 && (v94 & 1) == 0)
      (*(void (**)(void))(**(_QWORD **)&v93.var0 + 40))();
    re::BucketArray<re::StringSlice,5ul>::deinit((uint64_t)&v99);
    if (*(_QWORD *)&v99.var0 && (v100 & 1) == 0)
      (*(void (**)(void))(**(_QWORD **)&v99.var0 + 40))();
    re::BucketArray<unsigned long long,5ul>::deinit((uint64_t)&v105);
    if (*(_QWORD *)&v105.var0 && (v106 & 1) == 0)
      (*(void (**)(void))(**(_QWORD **)&v105.var0 + 40))();
    re::BucketArray<re::StringSlice,5ul>::deinit((uint64_t)v114);
    if (*(_QWORD *)v114 && (v114[16] & 1) == 0)
      (*(void (**)(void))(**(_QWORD **)v114 + 40))();
    if ((v139[8] & 1) != 0)
      v67 = *(_QWORD *)&v139[8] >> 1;
    else
      v67 = v139[8] >> 1;
    if (v67)
    {
      v125[0] = (CFErrorRef)0xFE85F7454D5070B4;
      v125[1] = (CFErrorRef)"sourceHierarchy";
      re::DynamicString::operator+((re::DynamicString *)v139, "SkeletalPose.skeletalPoses[0]", (re::DynamicString *)v114);
      re::StringID::StringID((re::StringID *)&v125[2], (const re::DynamicString *)v114);
      LODWORD(v125[4]) = 0;
      re::DynamicArray<re::RigGraphBoundInputParameterData>::add(v71, (uint64_t *)v125);
      re::StringID::destroyString((re::StringID *)&v125[2]);
      re::StringID::destroyString((re::StringID *)v125);
      if (*(_QWORD *)v114 && (v114[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)v114 + 40))();
      v125[0] = (CFErrorRef)0xEFC647C93FEC3E86;
      v125[1] = (CFErrorRef)"sourceModelToWorldTransform";
      re::DynamicString::operator+((re::DynamicString *)v139, "Transform.transform", (re::DynamicString *)v114);
      re::StringID::StringID((re::StringID *)&v125[2], (const re::DynamicString *)v114);
      LODWORD(v125[4]) = 0;
      re::DynamicArray<re::RigGraphBoundInputParameterData>::add(v71, (uint64_t *)v125);
      re::StringID::destroyString((re::StringID *)&v125[2]);
      re::StringID::destroyString((re::StringID *)v125);
      if (*(_QWORD *)v114 && (v114[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)v114 + 40))();
      v125[0] = (CFErrorRef)0x52855BF5A9F7771ALL;
      v125[1] = (CFErrorRef)"targetModelToWorldTransform";
      v63 = &v125[2];
      v125[2] = (CFErrorRef)0x7A8A31107D1B226;
      v125[3] = (CFErrorRef)"entity://Transform.transform";
      LODWORD(v125[4]) = 0;
      re::DynamicArray<re::RigGraphBoundInputParameterData>::add(v71, (uint64_t *)v125);
      re::StringID::destroyString((re::StringID *)&v125[2]);
      re::StringID::destroyString((re::StringID *)v125);
    }
    else
    {
      v125[0] = 0;
      re::internal::makeError("Unable to construct bind path to source entity", 46, v125);
      v63 = (CFErrorRef *)v125[0];
    }
    if (*(_QWORD *)v139 && (v139[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v139 + 40))();
    if (v67)
    {
      v68 = v111;
      v69 = v113;
      v111 = 0;
      v125[0] = v68;
      if (v113)
      {
        v37 = &v125[1];
        if (v113 != (__CFError *)v112)
        {
          v113 = 0;
          *(_BYTE *)v74 = 1;
          v125[4] = v69;
          v125[0] = 0;
          *(_QWORD *)(v74 + 8) = v68;
LABEL_88:
          if (v69 == (__CFError *)&v125[1])
          {
LABEL_91:
            *(_QWORD *)(a3 + 40) = a3 + 16;
            (*((void (**)(CFErrorRef *))v125[1] + 3))(v37);
            goto LABEL_92;
          }
          *(_QWORD *)(v74 + 40) = v69;
          v125[4] = 0;
LABEL_92:
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v125);
          return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v111);
        }
        v125[4] = (CFErrorRef)&v125[1];
        (*(void (**)(uint64_t, _QWORD *))(v112[0] + 24))((uint64_t)v112, &v125[1]);
        v70 = v125[0];
        v69 = v125[4];
        *(_BYTE *)v74 = 1;
        v125[0] = 0;
        *(_QWORD *)(v74 + 8) = v70;
        if (v69)
          goto LABEL_88;
      }
      else
      {
        *(_BYTE *)v74 = 1;
        v125[4] = 0;
        v125[0] = 0;
        *(_QWORD *)(v74 + 8) = v68;
      }
      *(_QWORD *)(v74 + 40) = 0;
      goto LABEL_92;
    }
  }
  else
  {
    v125[0] = 0;
    re::internal::makeError("No skeleton to build retarget for", 33, v125);
    v63 = (CFErrorRef *)v125[0];
  }
LABEL_84:
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v63;
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v111);
}

void re::internal::makeError(char *cStr, uint64_t a2, CFErrorRef *a3)
{
  const void *v4;
  void *userInfoValues;

  if (!*a3)
  {
    userInfoValues = (void *)CFStringCreateWithCString(0, cStr, 0x8000100u);
    v4 = (const void *)*MEMORY[0x24BDBD378];
    *a3 = CFErrorCreateWithUserInfoKeysAndValues(0, CFSTR("RERigGraphAssetErrorDomain"), 0, &v4, (const void *const *)&userInfoValues, 1);
    if (userInfoValues)
      CFRelease(userInfoValues);
  }
}

uint64_t re::AssetHandle::asset<re::MeshAsset>(re::MeshAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::MeshAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t *re::RigGraphAsset::createIKSolverRigGraphAsset@<X0>(re::RigGraphAsset *this@<X0>, const re::MeshAsset *a2@<X1>, uint64_t a3@<X8>)
{
  re *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const StringID *v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  const re::MeshAsset *v35;
  _anonymous_namespace_ *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _anonymous_namespace_ *v41;
  _BYTE v43[24];
  StringID v44;
  _QWORD v45[2];
  StringID v46;
  _BYTE v47[8];
  uint64_t v48;
  StringID v49;
  StringID v50;
  StringID v51;
  _BYTE v52[24];
  StringID v53;
  _QWORD v54[2];
  StringID v55;
  _BYTE v56[24];
  StringID v57;
  _QWORD v58[2];
  StringID v59;
  _QWORD v60[2];
  uint64_t v61[2];
  uint64_t v62[2];
  StringID v63;
  StringID v64;
  StringID v65;
  StringID v66;
  _BYTE v67[16];
  StringID v68;
  uint64_t v69;
  _OWORD v70[3];
  __int128 v71;
  __int128 v72;
  int v73;
  _OWORD v74[2];
  int v75;
  _OWORD v76[2];
  int v77;
  _OWORD v78[2];
  int v79;
  uint64_t v80;
  _OWORD v81[3];
  __int128 v82;
  __int128 v83;
  int v84;
  __int128 v85;
  __int128 v86;
  int v87;
  __int128 v88;
  __int128 v89;
  int v90;
  __int128 v91;
  __int128 v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  _QWORD *v97;
  _BYTE v98[12];
  __int16 v99;
  int v100;
  __int16 v101;
  unint64_t v102;
  __int16 v103;
  unint64_t v104;
  _BYTE v105[18];
  __int16 v106;
  unint64_t v107;
  __int16 v108;
  unint64_t v109;
  uint64_t v110;
  StringID v111;
  StringID v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v7 = re::globalAllocators(v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 160, 8);
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_QWORD *)(v8 + 152) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  v97 = v96;
  v95 = v8;
  v96[0] = &off_24ED3A520;
  re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)v8, 0);
  ++*(_DWORD *)(v8 + 24);
  re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)(v8 + 40), 0);
  ++*(_DWORD *)(v8 + 64);
  v38 = *((unsigned int *)a2 + 32);
  if (*((_DWORD *)a2 + 32))
  {
    v34 = a3;
    v9 = 0;
    v36 = (_anonymous_namespace_ *)(v95 + 80);
    v37 = v95;
    v41 = (_anonymous_namespace_ *)(v95 + 40);
    v35 = a2;
    do
    {
      v10 = *((_QWORD *)a2 + 4);
      if (v10 <= v9)
        goto LABEL_58;
      re::StringID::StringID((re::StringID *)&v68, (const StringID *)(*((_QWORD *)a2 + 5) + 16 * v9));
      v10 = *((_QWORD *)a2 + 10);
      if (v10 <= v9)
        goto LABEL_59;
      re::StringID::StringID((re::StringID *)v67, (const StringID *)(*((_QWORD *)a2 + 11) + 16 * v9));
      re::StringID::StringID((re::StringID *)&v66, (const re::DynamicString *)v81);
      if (*(_QWORD *)&v81[0] && (BYTE8(v81[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v81[0] + 40))();
      re::StringID::StringID((re::StringID *)&v65, (const re::DynamicString *)v81);
      if (*(_QWORD *)&v81[0] && (BYTE8(v81[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v81[0] + 40))();
      re::StringID::StringID((re::StringID *)&v64, (const re::DynamicString *)v81);
      if (*(_QWORD *)&v81[0] && (BYTE8(v81[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v81[0] + 40))();
      re::StringID::StringID((re::StringID *)&v63, (const re::DynamicString *)v81);
      if (*(_QWORD *)&v81[0] && (BYTE8(v81[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v81[0] + 40))();
      re::StringID::StringID((re::StringID *)v62, &v66);
      re::StringID::destroyString((re::StringID *)v62);
      re::StringID::StringID((re::StringID *)v61, &v68);
      v60[0] = 0xA0DBB863F4861A8CLL;
      v60[1] = "IKParametersComponentSolverNode";
      re::internal::RigGraphDefinitionBuilder::addNode((uint64_t)v81, v61, v60);
      re::StringID::destroyString((re::StringID *)v60);
      re::StringID::destroyString((re::StringID *)v61);
      re::StringID::StringID((re::StringID *)&v59, &v65);
      *(_QWORD *)&v57.var0 = 0x2789F63FDC13D20;
      v57.var1 = "inHierarchy";
      v58[0] = 0x3C4B6E418F8AFE4ALL;
      v58[1] = "RigHierarchy";
      v56[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v81, &v59, &v57, v56);
      re::StringID::destroyString((re::StringID *)v58);
      re::StringID::destroyString((re::StringID *)&v57);
      re::StringID::destroyString((re::StringID *)&v59);
      re::StringID::StringID((re::StringID *)&v55, &v64);
      *(_QWORD *)&v53.var0 = 0x11F4B3FE87F3AF2ALL;
      v53.var1 = "inSolverRootModelSpaceTransform";
      v54[0] = 164778;
      v54[1] = "SRT";
      v52[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphInput(v81, &v55, &v53, v52);
      re::StringID::destroyString((re::StringID *)v54);
      re::StringID::destroyString((re::StringID *)&v53);
      re::StringID::destroyString((re::StringID *)&v55);
      *(_QWORD *)&v50.var0 = 0x4363292BB5C214F0;
      v50.var1 = "inSolverInstanceName";
      *(_QWORD *)&v51.var0 = 0x128749862;
      v51.var1 = "String";
      re::StringID::StringID((re::StringID *)v47, &v68);
      re::StringID::StringID((re::StringID *)&v49, (const re::DynamicString *)v70);
      if (*(_QWORD *)&v70[0] && (BYTE8(v70[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v70[0] + 40))();
      re::StringID::StringID((re::StringID *)v105, (const StringID *)(v88 + 32 * *((_QWORD *)&v86 + 1) - 32));
      re::StringID::StringID((re::StringID *)&v105[16], &v51);
      re::StringID::StringID((re::StringID *)((char *)&v109 + 2), &v50);
      re::StringID::invalid((re::StringID *)&v111);
      re::StringID::invalid((re::StringID *)&v112);
      re::StringID::StringID((re::StringID *)v70, (const StringID *)v105);
      re::StringID::StringID((re::StringID *)&v70[1], (const StringID *)&v105[16]);
      re::StringID::StringID((re::StringID *)&v70[2], (const StringID *)((char *)&v109 + 2));
      re::StringID::StringID((re::StringID *)&v71, &v111);
      re::StringID::StringID((re::StringID *)&v72, &v112);
      re::StringID::StringID((re::StringID *)&v73, &v49);
      re::DynamicArray<re::RigGraphInputValue>::add((_QWORD *)&v91 + 1, (uint64_t *)v70);
      re::StringID::destroyString((re::StringID *)&v73);
      re::StringID::destroyString((re::StringID *)&v72);
      re::StringID::destroyString((re::StringID *)&v71);
      re::StringID::destroyString((re::StringID *)&v70[2]);
      re::StringID::destroyString((re::StringID *)&v70[1]);
      re::StringID::destroyString((re::StringID *)v70);
      re::StringID::destroyString((re::StringID *)&v112);
      re::StringID::destroyString((re::StringID *)&v111);
      re::StringID::destroyString((re::StringID *)((char *)&v109 + 2));
      re::StringID::destroyString((re::StringID *)&v105[16]);
      re::StringID::destroyString((re::StringID *)v105);
      re::StringID::destroyString((re::StringID *)&v49);
      re::StringID::destroyString((re::StringID *)v47);
      re::StringID::destroyString((re::StringID *)&v51);
      re::StringID::destroyString((re::StringID *)&v50);
      re::StringID::StringID((re::StringID *)&v46, &v63);
      *(_QWORD *)&v44.var0 = 0x51075CF812B0B50ELL;
      v44.var1 = "outHierarchy";
      v45[0] = 0x3C4B6E418F8AFE4ALL;
      v45[1] = "RigHierarchy";
      v43[0] = 0;
      re::internal::RigGraphDefinitionBuilder::addGraphOutput(v81, &v46, &v44, v43);
      re::StringID::destroyString((re::StringID *)v45);
      re::StringID::destroyString((re::StringID *)&v44);
      re::StringID::destroyString((re::StringID *)&v46);
      *(_QWORD *)&v70[0] = *(_QWORD *)&v81[0];
      v11 = *(_OWORD *)((char *)v81 + 8);
      *(_QWORD *)&v81[0] = 0;
      *((_QWORD *)&v81[0] + 1) = &str_110;
      *(_OWORD *)((char *)v70 + 8) = v11;
      memset(&v81[1], 0, 24);
      *(_OWORD *)((char *)&v70[1] + 8) = *(_OWORD *)((char *)&v81[1] + 8);
      ++DWORD2(v81[2]);
      DWORD2(v70[2]) = 1;
      v71 = v82;
      v72 = v83;
      v82 = 0u;
      v83 = 0u;
      v74[0] = v85;
      v85 = 0u;
      v74[1] = v86;
      v86 = 0u;
      ++v84;
      ++v87;
      v73 = 1;
      v75 = 1;
      v76[0] = v88;
      v76[1] = v89;
      v88 = 0u;
      v89 = 0u;
      v80 = v94;
      v78[0] = v91;
      v91 = 0u;
      v78[1] = v92;
      v92 = 0u;
      v94 = 0;
      ++v90;
      ++v93;
      v77 = 1;
      v79 = 1;
      re::DynamicArray<re::RigGraphDefinition>::add(v37, (uint64_t *)v70);
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)v78 + 8);
      re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)v76 + 1);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v74 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v71 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v70[1]);
      re::StringID::destroyString((re::StringID *)v70);
      re::StringID::StringID((re::StringID *)v70, &v64);
      *(_QWORD *)&v70[1] = 0x7A8A31107D1B226;
      *((_QWORD *)&v70[1] + 1) = "entity://Transform.transform";
      LODWORD(v70[2]) = 0;
      re::DynamicArray<re::RigGraphBoundInputParameterData>::add(v36, (uint64_t *)v70);
      re::StringID::destroyString((re::StringID *)&v70[1]);
      re::StringID::destroyString((re::StringID *)v70);
      v12 = *((_QWORD *)this + 117);
      if (v12)
      {
        v13 = *((_QWORD *)this + 55);
        if (v13)
        {
          v14 = *((_QWORD *)this + 52);
          if (*((_BYTE *)this + 952) ? *((_QWORD *)this + 52) : *((_QWORD *)this + 3))
          {
            v10 = 0;
            v39 = v13 + 8;
            while (v14 > v10)
            {
              v40 = v10;
              v16 = re::DataArray<re::MeshModel>::get(v39, *(_QWORD *)(*((_QWORD *)this + 54) + 8 * v10));
              v17 = *(_QWORD *)(v16 + 176);
              if (v17)
              {
                v18 = *(_QWORD *)(v17 + 8);
                if (v18)
                {
                  v19 = v16;
                  v20 = 0;
                  v21 = 504;
                  v22 = 4;
                  do
                  {
                    v23 = *(_QWORD *)(v19 + 176);
                    if (v23 && *(_QWORD *)(v23 + 8) > v20)
                      v24 = *(unsigned int *)(*(_QWORD *)(v23 + 16) + v22);
                    else
                      v24 = 0xFFFFFFFFLL;
                    if (v12 > v24)
                    {
                      v105[0] = 2;
                      re::StringID::StringID((re::StringID *)&v105[8], (const StringID *)v19);
                      v25 = *(_QWORD *)(v19 + 56);
                      if (v25 <= v20)
                      {
                        v69 = 0;
                        v71 = 0u;
                        v72 = 0u;
                        memset(v70, 0, sizeof(v70));
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v98 = 136315906;
                        *(_QWORD *)&v98[4] = "operator[]";
                        v99 = 1024;
                        v100 = 476;
                        v101 = 2048;
                        v102 = v20;
                        v103 = 2048;
                        v104 = v25;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_49:
                        v30 = v34;
                        *(_BYTE *)v34 = 1;
                        *(_QWORD *)&v81[2] = 0;
                        *(_QWORD *)&v81[0] = 0;
                        *(_QWORD *)(v34 + 8) = v28;
LABEL_50:
                        *(_QWORD *)(v30 + 40) = 0;
                        goto LABEL_55;
                      }
                      re::StringID::StringID((re::StringID *)((char *)&v107 + 4), (const StringID *)(*(_QWORD *)(v19 + 64) + v21));
                      v26 = (const StringID *)re::MeshAsset::skeletonAtIndex(this, v24);
                      re::StringID::StringID((re::StringID *)&v110, v26);
                      LODWORD(v111.var1) = v9;
                      re::DynamicArray<re::MeshRigGraphIndex>::add(v41, (uint64_t)v105);
                      re::StringID::destroyString((re::StringID *)&v110);
                      re::StringID::destroyString((re::StringID *)((char *)&v107 + 4));
                      re::StringID::destroyString((re::StringID *)&v105[8]);
                    }
                    ++v20;
                    v22 += 72;
                    v21 += 560;
                  }
                  while (v18 != v20);
                }
              }
              v10 = v40 + 1;
              v14 = *((_QWORD *)this + 52);
              if (*((_BYTE *)this + 952))
                v27 = *((_QWORD *)this + 52);
              else
                v27 = *((_QWORD *)this + 3);
              if (v10 >= v27)
                goto LABEL_43;
            }
            *(_QWORD *)v98 = 0;
            v71 = 0u;
            v72 = 0u;
            memset(v70, 0, sizeof(v70));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v105 = 136315906;
            *(_QWORD *)&v105[4] = "operator[]";
            *(_WORD *)&v105[12] = 1024;
            *(_DWORD *)&v105[14] = 797;
            v106 = 2048;
            v107 = v10;
            v108 = 2048;
            v109 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_58:
            *(_QWORD *)v105 = 0;
            v82 = 0u;
            v83 = 0u;
            memset(v81, 0, sizeof(v81));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v70[0]) = 136315906;
            *(_QWORD *)((char *)v70 + 4) = "operator[]";
            WORD6(v70[0]) = 1024;
            *(_DWORD *)((char *)v70 + 14) = 476;
            WORD1(v70[1]) = 2048;
            *(_QWORD *)((char *)&v70[1] + 4) = v9;
            WORD6(v70[1]) = 2048;
            *(_QWORD *)((char *)&v70[1] + 14) = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_59:
            *(_QWORD *)v105 = 0;
            v82 = 0u;
            v83 = 0u;
            memset(v81, 0, sizeof(v81));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v70[0]) = 136315906;
            *(_QWORD *)((char *)v70 + 4) = "operator[]";
            WORD6(v70[0]) = 1024;
            *(_DWORD *)((char *)v70 + 14) = 476;
            WORD1(v70[1]) = 2048;
            *(_QWORD *)((char *)&v70[1] + 4) = v9;
            WORD6(v70[1]) = 2048;
            *(_QWORD *)((char *)&v70[1] + 14) = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
        }
      }
LABEL_43:
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v91 + 8);
      re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)&v88 + 1);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v85 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v82 + 8);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v81[1]);
      re::StringID::destroyString((re::StringID *)v81);
      re::StringID::destroyString((re::StringID *)&v63);
      re::StringID::destroyString((re::StringID *)&v64);
      re::StringID::destroyString((re::StringID *)&v65);
      re::StringID::destroyString((re::StringID *)&v66);
      re::StringID::destroyString((re::StringID *)v67);
      re::StringID::destroyString((re::StringID *)&v68);
      ++v9;
      a2 = v35;
    }
    while (v9 != v38);
    v28 = v95;
    v29 = v97;
    v95 = 0;
    *(_QWORD *)&v81[0] = v28;
    if (!v97)
      goto LABEL_49;
    v30 = v34;
    if (v97 == v96)
    {
      *(_QWORD *)&v81[2] = (char *)v81 + 8;
      (*(void (**)(uint64_t, _QWORD *))(v96[0] + 24))((uint64_t)v96, (_QWORD *)v81 + 1);
      v32 = *(_QWORD *)&v81[0];
      v29 = *(_OWORD **)&v81[2];
      *(_BYTE *)v34 = 1;
      *(_QWORD *)&v81[0] = 0;
      *(_QWORD *)(v34 + 8) = v32;
      if (!v29)
        goto LABEL_50;
    }
    else
    {
      v97 = 0;
      *(_BYTE *)v34 = 1;
      *(_QWORD *)&v81[2] = v29;
      *(_QWORD *)&v81[0] = 0;
      *(_QWORD *)(v34 + 8) = v28;
    }
    if (v29 == (_OWORD *)((char *)v81 + 8))
    {
      *(_QWORD *)(v34 + 40) = v34 + 16;
      (*(void (**)(char *))(*((_QWORD *)&v81[0] + 1) + 24))((char *)v81 + 8);
    }
    else
    {
      *(_QWORD *)(v34 + 40) = v29;
      *(_QWORD *)&v81[2] = 0;
    }
LABEL_55:
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v81);
  }
  else
  {
    *(_QWORD *)&v81[0] = 0;
    re::internal::makeError("No solver to build execution graph for", 38, (CFErrorRef *)v81);
    v31 = *(_QWORD *)&v81[0];
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v31;
  }
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v95);
}

void re::internal::RigGraphDefinitionBuilder::addNode(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];
  _QWORD v6[2];

  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  *a3 = 0;
  a3[1] = &str_110;
  re::DynamicArray<re::RigGraphNodeDescription>::add((_QWORD *)(a1 + 96), v5);
  re::StringID::destroyString((re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v5);
}

void re::internal::RigGraphDefinitionBuilder::addGraphInput(_QWORD *a1, const StringID *a2, const StringID *a3, _BYTE *a4)
{
  const StringID *v7;
  const StringID *v8;
  _QWORD v11[2];
  uint64_t v12[2];
  _BYTE v13[16];
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[16];
  _BYTE v21[16];
  StringID v22;
  StringID v23;
  StringID v24;
  StringID v25;
  StringID v26;
  StringID v27;
  StringID v28;
  StringID v29;
  StringID v30;
  StringID v31;

  *(_QWORD *)&v27.var0 = 7118140;
  v27.var1 = "this";
  v7 = a3 + 1;
  re::StringID::StringID((re::StringID *)&v28, a3 + 1);
  re::StringID::StringID((re::StringID *)&v29, a2);
  re::StringID::invalid((re::StringID *)&v30);
  re::StringID::invalid((re::StringID *)&v31);
  re::StringID::StringID((re::StringID *)&v22, (const StringID *)(a1[16] + 32 * a1[14] - 32));
  re::StringID::StringID((re::StringID *)&v23, v7);
  re::StringID::StringID((re::StringID *)&v24, a3);
  re::StringID::invalid((re::StringID *)&v25);
  re::StringID::invalid((re::StringID *)&v26);
  re::StringID::StringID((re::StringID *)v12, &v27);
  re::StringID::StringID((re::StringID *)v13, &v28);
  re::StringID::StringID((re::StringID *)v14, &v29);
  re::StringID::StringID((re::StringID *)v15, &v30);
  re::StringID::StringID((re::StringID *)v16, &v31);
  re::StringID::StringID((re::StringID *)v17, &v22);
  re::StringID::StringID((re::StringID *)v18, &v23);
  re::StringID::StringID((re::StringID *)v19, &v24);
  re::StringID::StringID((re::StringID *)v20, &v25);
  re::StringID::StringID((re::StringID *)v21, &v26);
  re::DynamicArray<re::RigGraphConnection>::add(a1 + 17, v12);
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::StringID((re::StringID *)v12, &v22);
  re::StringID::StringID((re::StringID *)v13, &v23);
  re::StringID::StringID((re::StringID *)v14, &v24);
  re::StringID::StringID((re::StringID *)v15, &v25);
  re::StringID::StringID((re::StringID *)v16, &v26);
  re::StringID::StringID((re::StringID *)v17, a2);
  v11[0] = 0;
  v11[1] = "";
  if (*a4)
    v8 = (const StringID *)(a4 + 8);
  else
    v8 = (const StringID *)v11;
  re::StringID::StringID((re::StringID *)v18, v8);
  re::DynamicArray<re::RigGraphParameterProxy>::add(a1 + 2, v12);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)&v26);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v23);
  re::StringID::destroyString((re::StringID *)&v22);
  re::StringID::destroyString((re::StringID *)&v31);
  re::StringID::destroyString((re::StringID *)&v30);
  re::StringID::destroyString((re::StringID *)&v29);
  re::StringID::destroyString((re::StringID *)&v28);
  re::StringID::destroyString((re::StringID *)&v27);
}

void re::internal::RigGraphDefinitionBuilder::addGraphOutput(_QWORD *a1, const StringID *a2, const StringID *a3, _BYTE *a4)
{
  const StringID *v7;
  const StringID *v8;
  _QWORD v11[2];
  uint64_t v12[2];
  _BYTE v13[16];
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[16];
  _BYTE v21[16];
  StringID v22;
  StringID v23;
  StringID v24;
  StringID v25;
  StringID v26;
  StringID v27;
  StringID v28;
  StringID v29;
  StringID v30;
  StringID v31;

  *(_QWORD *)&v27.var0 = 7118140;
  v27.var1 = "this";
  v7 = a3 + 1;
  re::StringID::StringID((re::StringID *)&v28, a3 + 1);
  re::StringID::StringID((re::StringID *)&v29, a2);
  re::StringID::invalid((re::StringID *)&v30);
  re::StringID::invalid((re::StringID *)&v31);
  re::StringID::StringID((re::StringID *)&v22, (const StringID *)(a1[16] + 32 * a1[14] - 32));
  re::StringID::StringID((re::StringID *)&v23, v7);
  re::StringID::StringID((re::StringID *)&v24, a3);
  re::StringID::invalid((re::StringID *)&v25);
  re::StringID::invalid((re::StringID *)&v26);
  re::StringID::StringID((re::StringID *)v12, &v22);
  re::StringID::StringID((re::StringID *)v13, &v23);
  re::StringID::StringID((re::StringID *)v14, &v24);
  re::StringID::StringID((re::StringID *)v15, &v25);
  re::StringID::StringID((re::StringID *)v16, &v26);
  re::StringID::StringID((re::StringID *)v17, &v27);
  re::StringID::StringID((re::StringID *)v18, &v28);
  re::StringID::StringID((re::StringID *)v19, &v29);
  re::StringID::StringID((re::StringID *)v20, &v30);
  re::StringID::StringID((re::StringID *)v21, &v31);
  re::DynamicArray<re::RigGraphConnection>::add(a1 + 17, v12);
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::StringID((re::StringID *)v12, &v22);
  re::StringID::StringID((re::StringID *)v13, &v23);
  re::StringID::StringID((re::StringID *)v14, &v24);
  re::StringID::StringID((re::StringID *)v15, &v25);
  re::StringID::StringID((re::StringID *)v16, &v26);
  re::StringID::StringID((re::StringID *)v17, a2);
  v11[0] = 0;
  v11[1] = "";
  if (*a4)
    v8 = (const StringID *)(a4 + 8);
  else
    v8 = (const StringID *)v11;
  re::StringID::StringID((re::StringID *)v18, v8);
  re::DynamicArray<re::RigGraphParameterProxy>::add(a1 + 7, v12);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)&v26);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v23);
  re::StringID::destroyString((re::StringID *)&v22);
  re::StringID::destroyString((re::StringID *)&v31);
  re::StringID::destroyString((re::StringID *)&v30);
  re::StringID::destroyString((re::StringID *)&v29);
  re::StringID::destroyString((re::StringID *)&v28);
  re::StringID::destroyString((re::StringID *)&v27);
}

uint64_t re::DynamicArray<re::RigGraphDefinition>::add(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  result = re::RigGraphDefinition::RigGraphDefinition(*(_QWORD *)(a1 + 32) + 216 * v5, a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::RigGraphBoundInputParameterData>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + 40 * v5;
  v12 = *a2;
  *(_QWORD *)v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v11 = *a2 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(_QWORD *)(v11 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v13 = a2[2];
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(_QWORD *)(v11 + 16) = a2[2] & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(_QWORD *)(v11 + 24) = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)&str_110;
  *(_DWORD *)(v11 + 32) = *((_DWORD *)a2 + 8);
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::MeshRigGraphIndex>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + (v5 << 6);
  *(_BYTE *)v11 = *(_BYTE *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = &str_110;
  v13 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v11 + 24) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = &str_110;
  v14 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(v11 + 40) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  *(_QWORD *)(v11 + 40) = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = &str_110;
  *(_DWORD *)(v11 + 56) = *(_DWORD *)(a2 + 56);
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::RigGraphAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re *v6;
  re::Allocator *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _anonymous_namespace_ *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  char *v32;
  _QWORD v33[2];
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  _BYTE v47[120];
  _BYTE *v48;
  uint64_t v49;
  _QWORD *v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[12];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  __int128 v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  uint8_t buf[4];
  char *v88;
  _QWORD v89[2];
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _BYTE v95[48];
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v47);
  v89[0] = 0;
  v89[1] = 0;
  v90 = 1;
  v92 = 0;
  v93 = 0;
  v91 = 0;
  v94 = 0;
  memset(v95, 0, sizeof(v95));
  re::RigEnvironment::init((re::RigEnvironment *)v89, (re::Allocator *)v47);
  v33[0] = 0;
  v33[1] = 0;
  v34 = 1;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v42 = 0;
  v46 = 0;
  v43 = 0u;
  v44 = 0u;
  v45 = 0;
  re::RigGraphCompilation::init((re::RigGraphCompilation *)v33, (re::Allocator *)v47);
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    v5 = 216 * v3;
    while (1)
    {
      *(_DWORD *)v53 = 0;
      v51 = 0u;
      v52 = 0u;
      *(_QWORD *)&v53[4] = 0x7FFFFFFFLL;
      v48 = v47;
      v49 = v4;
      v50 = v89;
      re::RigGraphDefinitionValidator::validate((re::RigGraphDefinitionValidator *)&v48, (uint64_t)v70);
      if (!LOBYTE(v70[0]))
        break;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v51);
      v4 += 216;
      v5 -= 216;
      if (!v5)
        goto LABEL_5;
    }
    v30 = *re::assetTypesLogObjects(v6);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      if ((v72 & 1) != 0)
        v32 = v73;
      else
        v32 = (char *)&v72 + 1;
      *(_DWORD *)buf = 136315138;
      v88 = v32;
      _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Could not validate RigGraphAssetDefinition: Error = %s", buf, 0xCu);
    }
    if (!LOBYTE(v70[0]) && v71 && (v72 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v71 + 40))();
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v51);
    v8 = 0;
  }
  else
  {
LABEL_5:
    v7 = *(re::Allocator **)a2;
    v8 = 1;
    if (*(_QWORD *)a2)
    {
      v73 = 0;
      v72 = 0;
      v74 = 1;
      v77 = 0;
      v75 = 0;
      v76 = 0;
      v78 = 0;
      v81 = 0;
      v79 = 0;
      v80 = 0;
      v86 = 0;
      v83 = 0u;
      v84 = 0u;
      v82 = 0;
      v85 = 0;
      v70[2] = 0;
      v70[0] = v7;
      v70[1] = 0;
      LOBYTE(v71) = 0;
      re::RigGraphCompilation::init((re::RigGraphCompilation *)&v72, v7);
      *(_QWORD *)(a2 + 120) = *(_QWORD *)a2;
      re::DynamicArray<re::RigGraphNode>::setCapacity((_QWORD *)(a2 + 120), 0);
      ++*(_DWORD *)(a2 + 144);
      if (*(_QWORD *)(a2 + 16))
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = (_anonymous_namespace_ *)re::RigGraphSystem::buildFromDefinition(*(_QWORD *)a2, (_QWORD *)(*(_QWORD *)(a2 + 32) + v9), (uint64_t)&v48);
          v12 = *(_QWORD *)(a2 + 128);
          v13 = *(_QWORD *)(a2 + 136);
          if (v13 >= v12)
          {
            v14 = v13 + 1;
            if (v12 < v13 + 1)
            {
              if (*(_QWORD *)(a2 + 120))
              {
                v15 = 2 * v12;
                v16 = v12 == 0;
                v17 = 8;
                if (!v16)
                  v17 = v15;
                if (v17 <= v14)
                  v18 = v14;
                else
                  v18 = v17;
                re::DynamicArray<re::RigGraphNode>::setCapacity((_QWORD *)(a2 + 120), v18);
              }
              else
              {
                re::DynamicArray<re::RigGraphNode>::setCapacity((_QWORD *)(a2 + 120), v14);
                ++*(_DWORD *)(a2 + 144);
              }
            }
            v13 = *(_QWORD *)(a2 + 136);
          }
          v19 = *(_QWORD *)(a2 + 152) + 200 * v13;
          *(_QWORD *)(v19 + 32) = 0;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)v19 = 0;
          *(_DWORD *)(v19 + 24) = 0;
          *(_QWORD *)v19 = v48;
          v48 = 0;
          *(_QWORD *)(v19 + 8) = v49;
          v49 = 0;
          v20 = *(_QWORD **)(v19 + 16);
          *(_QWORD *)(v19 + 16) = v50;
          v50 = v20;
          v21 = *(_QWORD *)(v19 + 32);
          *(_QWORD *)(v19 + 32) = *((_QWORD *)&v51 + 1);
          *((_QWORD *)&v51 + 1) = v21;
          LODWORD(v51) = v51 + 1;
          ++*(_DWORD *)(v19 + 24);
          *(_QWORD *)(v19 + 72) = 0;
          *(_QWORD *)(v19 + 48) = 0;
          *(_QWORD *)(v19 + 56) = 0;
          *(_QWORD *)(v19 + 40) = 0;
          *(_DWORD *)(v19 + 64) = 0;
          *(_QWORD *)(v19 + 40) = v52;
          *(_QWORD *)&v52 = 0;
          *(_QWORD *)(v19 + 48) = *((_QWORD *)&v52 + 1);
          *((_QWORD *)&v52 + 1) = 0;
          v22 = *(_QWORD *)(v19 + 56);
          *(_QWORD *)(v19 + 56) = *(_QWORD *)v53;
          *(_QWORD *)v53 = v22;
          v23 = *(_QWORD *)(v19 + 72);
          *(_QWORD *)(v19 + 72) = v54;
          v54 = v23;
          ++*(_DWORD *)&v53[8];
          ++*(_DWORD *)(v19 + 64);
          *(_QWORD *)(v19 + 112) = 0;
          *(_QWORD *)(v19 + 88) = 0;
          *(_QWORD *)(v19 + 96) = 0;
          *(_QWORD *)(v19 + 80) = 0;
          *(_DWORD *)(v19 + 104) = 0;
          *(_QWORD *)(v19 + 80) = v55;
          v55 = 0;
          *(_QWORD *)(v19 + 88) = v56;
          v56 = 0;
          v24 = *(_QWORD *)(v19 + 96);
          *(_QWORD *)(v19 + 96) = v57;
          v57 = v24;
          v25 = *(_QWORD *)(v19 + 112);
          *(_QWORD *)(v19 + 112) = v59;
          v59 = v25;
          ++v58;
          ++*(_DWORD *)(v19 + 104);
          *(_QWORD *)(v19 + 152) = 0;
          *(_QWORD *)(v19 + 128) = 0;
          *(_QWORD *)(v19 + 136) = 0;
          *(_QWORD *)(v19 + 120) = 0;
          *(_DWORD *)(v19 + 144) = 0;
          *(_QWORD *)(v19 + 120) = v60;
          v60 = 0;
          *(_QWORD *)(v19 + 128) = v61;
          v61 = 0;
          v26 = *(_QWORD *)(v19 + 136);
          *(_QWORD *)(v19 + 136) = v62;
          v62 = v26;
          v27 = *(_QWORD *)(v19 + 152);
          *(_QWORD *)(v19 + 152) = v64;
          v64 = v27;
          ++v63;
          ++*(_DWORD *)(v19 + 144);
          *(_QWORD *)(v19 + 192) = 0;
          *(_QWORD *)(v19 + 168) = 0;
          *(_QWORD *)(v19 + 176) = 0;
          *(_QWORD *)(v19 + 160) = 0;
          *(_DWORD *)(v19 + 184) = 0;
          *(_QWORD *)(v19 + 160) = v65;
          v65 = 0;
          *(_QWORD *)(v19 + 168) = v66;
          v66 = 0;
          v28 = *(_QWORD *)(v19 + 176);
          *(_QWORD *)(v19 + 176) = v67;
          v67 = v28;
          v29 = *(_QWORD *)(v19 + 192);
          *(_QWORD *)(v19 + 192) = v69;
          v69 = v29;
          ++v68;
          ++*(_DWORD *)(v19 + 184);
          ++*(_QWORD *)(a2 + 136);
          ++*(_DWORD *)(a2 + 144);
          re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit((uint64_t)&v65);
          re::DynamicArray<re::StringID>::deinit((uint64_t)&v60);
          re::DynamicArray<re::RigGraphNodeChild>::deinit((uint64_t)&v55);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v52);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit((uint64_t)&v48);
          ++v10;
          v9 += 216;
        }
        while (v10 < *(_QWORD *)(a2 + 16));
      }
      re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v72);
      v8 = 1;
    }
  }
  re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)v33);
  re::BindNode::deinit((re::BindNode *)&v95[8]);
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)v89);
  if (v89[0] && (v90 & 1) == 0)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v89[0] + 40))(v89[0], v92);
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v47);
  return v8;
}

re *re::RigGraphAssetLoader::unloadAsset(re::RigGraphAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::RigGraphAsset>((re *)"unloadAsset", 678, a2);
}

BOOL re::RigGraphAssetLoader::isSupportedSourceExtension(re::RigGraphAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reriggraph") == 0;
}

__objc2_class_ro *re::RigGraphAssetLoader::introspectionType(re::RigGraphAssetLoader *this)
{
  unsigned __int8 v1;
  __objc2_class_ro **p_info;
  int v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v1 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v4)
    {
      re::introspect<re::RigGraphAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RigGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_RigGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RigGraphAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigGraphAsset>, 0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[170];
}

uint64_t *re::allocInfo_RigGraphBoundInputParameterDataV1(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254101F70);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254101F70))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541021A0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541021B0 = 0;
    qword_2541021C0 = 0;
    qword_2541021C8 = 0xFFFFFFFFLL;
    qword_2541021A0 = (uint64_t)&off_24ED7DAA8;
    qword_2541021D0 = (uint64_t)"RigGraphBoundInputParameterDataV1";
    dword_2541021D8 = 0;
    xmmword_2541021E0 = 0u;
    unk_2541021F0 = 0u;
    xmmword_254102200 = 0u;
    qword_254102210 = 0;
    __cxa_guard_release(&qword_254101F70);
  }
  return &qword_2541021A0;
}

void re::initInfo_RigGraphBoundInputParameterDataV1(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0x43DF5FA6F6F04B48;
  v22[1] = "RigGraphBoundInputParameterDataV1";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_254101F78);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254101F78);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254102058 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::introspect_RigGraphBindNodeType((re *)v10, v11);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "bindNodeType";
      *(_QWORD *)(v12 + 16) = &qword_254102158;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254102060 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "bindingPath";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254102068 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint32_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "rigGraphIndex";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254102070 = v20;
      __cxa_guard_release(&qword_254101F78);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254102058;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RigGraphBoundInputParameterDataV1>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RigGraphBoundInputParameterDataV1>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RigGraphBoundInputParameterDataV1>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RigGraphBoundInputParameterDataV1>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

re::StringID *re::internal::defaultConstruct<re::RigGraphBoundInputParameterDataV1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID *result;

  re::StringID::invalid((re::StringID *)a3);
  *(_BYTE *)(a3 + 16) = 0;
  result = re::StringID::invalid((re::StringID *)(a3 + 24));
  *(_DWORD *)(a3 + 40) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RigGraphBoundInputParameterDataV1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)a3);
}

re::StringID *re::internal::defaultConstructV2<re::RigGraphBoundInputParameterDataV1>(uint64_t a1)
{
  re::StringID *result;

  re::StringID::invalid((re::StringID *)a1);
  *(_BYTE *)(a1 + 16) = 0;
  result = re::StringID::invalid((re::StringID *)(a1 + 24));
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RigGraphBoundInputParameterDataV1>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)a1);
}

void re::internal::defaultConstruct<re::MeshRigGraphIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = &str_110;
  *(_DWORD *)(a3 + 56) = 0;
}

void re::internal::defaultDestruct<re::MeshRigGraphIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::MeshRigGraphIndex>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &str_110;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = &str_110;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshRigGraphIndex>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

void re::introspect_RigGraphBindNodeType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254101FA0);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254101FA0);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Scene";
      qword_254102028 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Entity";
      qword_254102030 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "EcsService";
      qword_254102038 = v32;
      __cxa_guard_release(&qword_254101FA0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254101FA8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254101FA8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254102158, "RigGraphBindNodeType", 1, 1, 1, 1);
    qword_254102158 = (uint64_t)&off_24ED7D9E8;
    qword_254102198 = (uint64_t)&re::introspect_RigGraphBindNodeType(BOOL)::enumTable;
    dword_254102168 = 9;
    __cxa_guard_release(&qword_254101FA8);
  }
  if ((_MergedGlobals_93 & 1) == 0)
  {
    _MergedGlobals_93 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254102158, a2);
    v34 = 0xA871E7EADD22D22ELL;
    v35 = "RigGraphBindNodeType";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_254102198;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_254102178 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RigGraphBindNodeType", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t re::rigGraphBoundInputParameterDataUpgradeV1ToV2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  size_t v8;
  unint64_t *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;
  _BYTE v21[23];
  _QWORD v22[2];

  v5 = *(_QWORD *)(a2 + 32);
  re::DynamicString::find((re::DynamicString *)&v19, "scene://", 8, 0, (uint64_t)v22);
  if (!LOBYTE(v22[0]))
  {
    re::DynamicString::find((re::DynamicString *)&v19, "entity://", 9, 0, (uint64_t)&v17);
    if (!(_BYTE)v17)
    {
      re::DynamicString::find((re::DynamicString *)&v19, "service://", 10, 0, (uint64_t)v16);
      if (!v16[0])
      {
        v6 = *(char *)(a2 + 16);
        if (v6 <= 2)
        {
          v7 = off_24ED3A758[v6];
          v8 = strlen(v7);
          re::DynamicString::insert((re::DynamicString *)&v19, 0, v7, v8);
        }
      }
    }
  }
  v9 = re::StringID::operator=((unint64_t *)a3, (uint64_t *)a2);
  if ((v20 & 1) != 0)
    v10 = *(const char **)&v21[7];
  else
    v10 = v21;
  v17 = 0;
  v18 = &str_110;
  v11 = v17;
  v12 = v18;
  v17 = 0;
  v18 = &str_110;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  v22[0] = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v22[1] = v14;
  re::StringID::destroyString((re::StringID *)v22);
  re::StringID::destroyString((re::StringID *)&v17);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 40);
  if (v19 && (v20 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  return 1;
}

re::StringID *re::internal::defaultConstruct<re::RigGraphBoundInputParameterData>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  re::StringID *result;

  re::StringID::invalid((re::StringID *)a3);
  result = re::StringID::invalid((re::StringID *)(a3 + 4));
  a3[8] = 0;
  return result;
}

void re::internal::defaultDestruct<re::RigGraphBoundInputParameterData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

re::StringID *re::internal::defaultConstructV2<re::RigGraphBoundInputParameterData>(_DWORD *a1)
{
  re::StringID *result;

  re::StringID::invalid((re::StringID *)a1);
  result = re::StringID::invalid((re::StringID *)(a1 + 4));
  a1[8] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RigGraphBoundInputParameterData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t *re::allocInfo_RigGraphAssetData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254101FC8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254101FC8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102308, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254102318 = 0;
    qword_254102328 = 0;
    qword_254102330 = 0xFFFFFFFFLL;
    qword_254102308 = (uint64_t)&off_24ED7DAA8;
    qword_254102338 = (uint64_t)"RigGraphAssetData";
    dword_254102340 = 0;
    xmmword_254102348 = 0u;
    unk_254102358 = 0u;
    xmmword_254102368 = 0u;
    qword_254102378 = 0;
    __cxa_guard_release(&qword_254101FC8);
  }
  return &qword_254102308;
}

void re::initInfo_RigGraphAssetData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0xFBB5838EDEC9EC38;
  v13[1] = "RigGraphAssetData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_254101FD0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254101FD0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::RigGraphDefinition>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "rigGraphDefinitions";
      *(_QWORD *)(v7 + 16) = &qword_254102098;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_254102040 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::MeshRigGraphIndex>>::get();
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v8 + 32))(v8, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "meshRigGraphs";
      *(_QWORD *)(v9 + 16) = &qword_2541020D8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x2800000002;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254102048 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::DynamicArray<re::RigGraphBoundInputParameterData>>::get();
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "boundInputParameters";
      *(_QWORD *)(v11 + 16) = &qword_254102118;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x5000000003;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254102050 = v11;
      __cxa_guard_release(&qword_254101FD0);
    }
  }
  *((_QWORD *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254102040;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RigGraphAssetData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RigGraphAssetData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RigGraphAssetData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RigGraphAssetData>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

void re::IntrospectionInfo<re::DynamicArray<re::RigGraphDefinition>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_254101FF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254101FF8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254102098);
    qword_254102098 = (uint64_t)&off_24ED3A5A0;
    __cxa_guard_release(&qword_254101FF8);
  }
  if ((byte_254101F69 & 1) == 0)
  {
    v1 = re::introspect_RigGraphDefinition((re::IntrospectionBase **)1);
    if ((byte_254101F69 & 1) == 0)
    {
      v2 = v1;
      byte_254101F69 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102098, 0);
      qword_2541020A8 = 0x2800000003;
      dword_2541020B0 = v3;
      word_2541020B4 = 0;
      *(_QWORD *)&xmmword_2541020B8 = 0;
      *((_QWORD *)&xmmword_2541020B8 + 1) = 0xFFFFFFFFLL;
      qword_2541020C8 = v2;
      unk_2541020D0 = 0;
      qword_254102098 = (uint64_t)&off_24ED3A5A0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_254102098, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2541020B8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshRigGraphIndex>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27[2];
  __int128 v28;
  const char *v29;
  __int128 v30;

  v0 = atomic_load((unsigned __int8 *)&qword_254102000);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254102000))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541020D8);
    qword_2541020D8 = (uint64_t)&off_24ED3A638;
    __cxa_guard_release(&qword_254102000);
  }
  if ((byte_254101F6A & 1) == 0)
  {
    v1 = (uint64_t *)qword_254101F98;
    if (qword_254101F98)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254101F88);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254101F88))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102218, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254102228 = 0;
      *(_QWORD *)&xmmword_254102238 = 0;
      *((_QWORD *)&xmmword_254102238 + 1) = 0xFFFFFFFFLL;
      qword_254102218 = (uint64_t)&off_24ED7DAA8;
      qword_254102248 = (uint64_t)"MeshRigGraphIndex";
      dword_254102250 = 0;
      xmmword_254102258 = 0u;
      *(_OWORD *)&qword_254102268 = 0u;
      xmmword_254102278 = 0u;
      qword_254102288 = 0;
      __cxa_guard_release(&qword_254101F88);
    }
    qword_254101F98 = (uint64_t)&qword_254102218;
    *(_QWORD *)&v30 = 0x26A8B32DA977788ELL;
    *((_QWORD *)&v30 + 1) = "MeshRigGraphIndex";
    re::StringID::destroyString((re::StringID *)&v30);
    xmmword_254102238 = v28;
    v4 = atomic_load((unsigned __int8 *)&qword_254101F90);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254101F90);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "meshIdentifier";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_254102010 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::IntrospectionInfo<re::StringID>::get(1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "skeletonName";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x2800000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_254102018 = v20;
        v21 = re::introspectionAllocator((re *)v20);
        v23 = re::introspect_uint32_t((re *)1, v22);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "rigGraphIndex";
        *(_QWORD *)(v24 + 16) = v23;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0x3800000003;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_254102020 = v24;
        __cxa_guard_release(&qword_254101F90);
      }
    }
    qword_254102228 = 0x4000000008;
    v1 = &qword_254102218;
    dword_254102230 = 8;
    word_254102234 = 0;
    dword_254102250 = 3;
    *(_QWORD *)&xmmword_254102258 = &qword_254102010;
    *((_QWORD *)&xmmword_254102258 + 1) = re::internal::defaultConstruct<re::MeshRigGraphIndex>;
    qword_254102268 = (uint64_t)re::internal::defaultDestruct<re::MeshRigGraphIndex>;
    *(_QWORD *)&xmmword_254102278 = 0;
    qword_254102270 = 0;
    *((_QWORD *)&xmmword_254102278 + 1) = re::internal::defaultConstructV2<re::MeshRigGraphIndex>;
    qword_254102288 = (uint64_t)re::internal::defaultDestructV2<re::MeshRigGraphIndex>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254102218, v3);
    v30 = v28;
    if ((byte_254101F6A & 1) == 0)
    {
LABEL_7:
      byte_254101F6A = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541020D8, 0);
      qword_2541020E8 = 0x2800000003;
      dword_2541020F0 = v5;
      word_2541020F4 = 0;
      *(_QWORD *)&xmmword_2541020F8 = 0;
      *((_QWORD *)&xmmword_2541020F8 + 1) = 0xFFFFFFFFLL;
      qword_254102108 = (uint64_t)v1;
      unk_254102110 = 0;
      qword_2541020D8 = (uint64_t)&off_24ED3A638;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541020D8, (const re::IntrospectionBase *)&v28);
      if ((BYTE8(v28) & 1) != 0)
        v8 = v29;
      else
        v8 = (char *)&v28 + 9;
      if ((_QWORD)v28 && (BYTE8(v28) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v28 + 40))();
      v26 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v27);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v25 + 1) = v10;
      }
      else
      {
        v30 = v26;
        re::TypeBuilder::beginListType((uint64_t)&v28, v27, 1, 0x28uLL, 8uLL, &v30);
        re::TypeBuilder::setConstructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v28, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v28, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v28, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v28, v11);
      }
      xmmword_2541020F8 = v25;
      re::StringID::destroyString((re::StringID *)v27);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::RigGraphBoundInputParameterData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  re::IntrospectionBase *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  __int128 v34;
  const char *v35;
  __int128 v36;

  v0 = atomic_load((unsigned __int8 *)&qword_254102008);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254102008))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254102118);
    qword_254102118 = (uint64_t)&off_24ED3A6D0;
    __cxa_guard_release(&qword_254102008);
  }
  if ((byte_254101F6B & 1) == 0)
  {
    v1 = (uint64_t *)qword_254101FC0;
    if (qword_254101FC0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254101FB0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254101FB0))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102290, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2541022A0 = 0;
      *(_QWORD *)&xmmword_2541022B0 = 0;
      *((_QWORD *)&xmmword_2541022B0 + 1) = 0xFFFFFFFFLL;
      qword_254102290 = (uint64_t)&off_24ED7DAA8;
      qword_2541022C0 = (uint64_t)"RigGraphBoundInputParameterData";
      dword_2541022C8 = 0;
      xmmword_2541022D0 = 0u;
      *(_OWORD *)&qword_2541022E0 = 0u;
      xmmword_2541022F0 = 0u;
      qword_254102300 = 0;
      __cxa_guard_release(&qword_254101FB0);
    }
    qword_254101FC0 = (uint64_t)&qword_254102290;
    *(_QWORD *)&v36 = 0x24087D919F4A9292;
    *((_QWORD *)&v36 + 1) = "RigGraphBoundInputParameterData";
    re::StringID::destroyString((re::StringID *)&v36);
    xmmword_2541022B0 = v34;
    v4 = atomic_load((unsigned __int8 *)&qword_254101FB8);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254101FB8);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254102078 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "bindingPath";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254102080 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::introspect_uint32_t((re *)1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "rigGraphIndex";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x2000000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_254102088 = v25;
        v26 = re::introspectionAllocator((re *)v25);
        v27 = v26;
        v28 = (uint64_t *)qword_254101F80;
        if (!qword_254101F80)
        {
          v28 = re::allocInfo_RigGraphBoundInputParameterDataV1((re *)v26);
          qword_254101F80 = (uint64_t)v28;
          re::initInfo_RigGraphBoundInputParameterDataV1((re *)v28, v29);
        }
        v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 64, 8);
        *(_DWORD *)v30 = 6;
        *(_QWORD *)(v30 + 8) = 2;
        *(_QWORD *)(v30 + 16) = v28;
        *(_QWORD *)(v30 + 24) = 0;
        *(_QWORD *)(v30 + 32) = re::rigGraphBoundInputParameterDataUpgradeV1ToV2;
        *(_BYTE *)(v30 + 40) = 0;
        *(_QWORD *)(v30 + 48) = 0;
        *(_DWORD *)(v30 + 56) = 0;
        qword_254102090 = v30;
        __cxa_guard_release(&qword_254101FB8);
      }
    }
    qword_2541022A0 = 0x2800000008;
    v1 = &qword_254102290;
    dword_2541022A8 = 8;
    word_2541022AC = 0;
    dword_2541022C8 = 4;
    *(_QWORD *)&xmmword_2541022D0 = &qword_254102078;
    *((_QWORD *)&xmmword_2541022D0 + 1) = re::internal::defaultConstruct<re::RigGraphBoundInputParameterData>;
    qword_2541022E0 = (uint64_t)re::internal::defaultDestruct<re::RigGraphBoundInputParameterData>;
    *(_QWORD *)&xmmword_2541022F0 = 0;
    qword_2541022E8 = 0;
    *((_QWORD *)&xmmword_2541022F0 + 1) = re::internal::defaultConstructV2<re::RigGraphBoundInputParameterData>;
    qword_254102300 = (uint64_t)re::internal::defaultDestructV2<re::RigGraphBoundInputParameterData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254102290, v3);
    v36 = v34;
    if ((byte_254101F6B & 1) == 0)
    {
LABEL_7:
      byte_254101F6B = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102118, 0);
      qword_254102128 = 0x2800000003;
      dword_254102130 = v5;
      word_254102134 = 0;
      *(_QWORD *)&xmmword_254102138 = 0;
      *((_QWORD *)&xmmword_254102138 + 1) = 0xFFFFFFFFLL;
      qword_254102148 = (uint64_t)v1;
      unk_254102150 = 0;
      qword_254102118 = (uint64_t)&off_24ED3A6D0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254102118, (const re::IntrospectionBase *)&v34);
      if ((BYTE8(v34) & 1) != 0)
        v8 = v35;
      else
        v8 = (char *)&v34 + 9;
      if ((_QWORD)v34 && (BYTE8(v34) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v34 + 40))();
      v32 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v33);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v31 + 1) = v10;
      }
      else
      {
        v36 = v32;
        re::TypeBuilder::beginListType((uint64_t)&v34, v33, 1, 0x28uLL, 8uLL, &v36);
        re::TypeBuilder::setConstructor((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v34, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v34, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v34, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v34, v11);
      }
      xmmword_254102138 = v31;
      re::StringID::destroyString((re::StringID *)v33);
    }
  }
}

double re::internal::defaultConstruct<re::RigGraphAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RigGraphAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a3 + 80);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 40);
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::RigGraphAssetData>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RigGraphAssetData>(uint64_t a1)
{
  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a1 + 80);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1 + 40);
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a1);
}

uint64_t *re::allocInfo_RigGraphAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254101FE0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254101FE0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102380, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254102390 = 0;
    qword_2541023A0 = 0;
    qword_2541023A8 = 0xFFFFFFFFLL;
    qword_254102380 = (uint64_t)&off_24ED7DAA8;
    qword_2541023B0 = (uint64_t)"RigGraphAsset";
    dword_2541023B8 = 0;
    xmmword_2541023C0 = 0u;
    unk_2541023D0 = 0u;
    xmmword_2541023E0 = 0u;
    qword_2541023F0 = 0;
    __cxa_guard_release(&qword_254101FE0);
  }
  return &qword_254102380;
}

void re::initInfo_RigGraphAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x4D22379AE5FD16A4;
  v12[1] = "RigGraphAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254101FF0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254101FF0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254101FD8;
      if (!qword_254101FD8)
      {
        v8 = re::allocInfo_RigGraphAssetData((re *)v6);
        qword_254101FD8 = (uint64_t)v8;
        re::initInfo_RigGraphAssetData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "rigGraphAssetData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254101FE8 = v10;
      __cxa_guard_release(&qword_254101FF0);
    }
  }
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254101FE8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RigGraphAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RigGraphAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RigGraphAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RigGraphAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

double re::internal::defaultConstruct<re::RigGraphAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RigGraphAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RigGraphNode>::deinit(a3 + 120);
  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a3 + 80);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 40);
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::RigGraphAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RigGraphAsset>(uint64_t a1)
{
  re::DynamicArray<re::RigGraphNode>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a1 + 80);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1 + 40);
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a1);
}

uint64_t re::introspect_RigGraphAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_RigGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RigGraphAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigGraphAsset>, this);
}

void re::RigGraphAssetLoader::~RigGraphAssetLoader(re::RigGraphAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[5 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          LOBYTE(v12) = v8[2];
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = (uint64_t)&str_110;
          v8[2] = 0;
          *((_DWORD *)v11 + 8) = *((_DWORD *)v8 + 8);
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 5;
          v11 += 5;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

size_t re::internal::RetargetRigGraphAssetBuilder::appendParentNamesAndIds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  size_t result;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char **v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a2 + 24;
  v6 = a3 + 24;
  do
  {
    v7 = *(const char **)(a1 + 280);
    result = strlen(v7);
    v9 = result;
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 8);
    if (5 * v11 < v10 + 1)
    {
      result = (size_t)re::BucketArray<re::StringSlice,5ul>::setBucketsCapacity((_QWORD *)a2, (v10 + 5) / 5);
      v11 = *(_QWORD *)(a2 + 8);
    }
    if (v11 <= v10 / 5)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = *(_QWORD *)(a2 + 32);
    if ((*(_DWORD *)(a2 + 16) & 1) != 0)
      v12 = v20;
    v13 = *(_QWORD *)(v12 + 8 * (v10 / 5));
    ++*(_QWORD *)(a2 + 40);
    ++*(_DWORD *)(a2 + 48);
    v14 = (const char **)(v13 + 16 * (v10 % 5));
    *v14 = v7;
    v14[1] = (const char *)v9;
    v15 = *(_QWORD *)(a1 + 296);
    v16 = *(_QWORD *)(a3 + 40);
    v17 = *(_QWORD *)(a3 + 8);
    if (5 * v17 < v16 + 1)
    {
      result = (size_t)re::BucketArray<unsigned long long,5ul>::setBucketsCapacity((uint64_t *)a3, (v16 + 5) / 5);
      v17 = *(_QWORD *)(a3 + 8);
    }
    if (v17 <= v16 / 5)
      goto LABEL_16;
    v18 = *(_QWORD *)(a3 + 32);
    if ((*(_DWORD *)(a3 + 16) & 1) != 0)
      v18 = v6;
    v19 = *(_QWORD *)(v18 + 8 * (v16 / 5));
    ++*(_QWORD *)(a3 + 40);
    ++*(_DWORD *)(a3 + 48);
    *(_QWORD *)(v19 + 8 * (v16 % 5)) = v15;
    a1 = *(_QWORD *)(a1 + 24);
  }
  while (a1 && (*(_BYTE *)(a1 + 288) & 0x80) == 0);
  return result;
}

unint64_t re::BucketArray<unsigned long long,5ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 / 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 / 5)) + 8 * (a2 % 5);
}

uint64_t re::BucketArray<re::StringSlice,5ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::StringSlice,5ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::StringSlice,5ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (5 * a2 > result[5])
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 80, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<unsigned long long,5ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<unsigned long long,5ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<unsigned long long,5ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (5 * a2 > result[5])
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 40, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketSlice<re::StringSlice,5ul>::operator[](_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = a1[2];
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, a2, v2);
    _os_crash();
    __break(1u);
  }
  else
  {
    v3 = a2 / 5;
    v4 = a1[1];
    if (v4 > a2 / 5)
      return *(_QWORD *)(*a1 + 8 * v3) + 16 * (a2 % 5);
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v4);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::BucketArray<unsigned long long,5ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<unsigned long long,5ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::StringSlice,5ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;
  int v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      if (*(_QWORD *)(a1 + 8) <= i / 5)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
  else if (!*(_QWORD *)(a1 + 8))
  {
    goto LABEL_8;
  }
  do
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  while (*(_QWORD *)(a1 + 8));
LABEL_8:
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_DWORD *)(a1 + 16);
    if ((v5 & 1) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(a1 + 32));
      v5 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = (v5 | 1) + 2;
  }
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::internal::RigGraphDefinitionBuilder::RigGraphDefinitionBuilder(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t *v6;

  re::StringID::invalid((re::StringID *)a1);
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  v6 = re::StringID::operator=((unint64_t *)a1, a3);
  v6[12] = a2;
  re::DynamicArray<re::RigGraphNodeDescription>::setCapacity(v6 + 12, 0);
  ++*(_DWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 136) = a2;
  re::DynamicArray<re::RigGraphConnection>::setCapacity((_QWORD *)(a1 + 136), 0);
  ++*(_DWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 16) = a2;
  re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)(a1 + 16), 0);
  ++*(_DWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = a2;
  re::DynamicArray<re::RigGraphParameterProxy>::setCapacity((_QWORD *)(a1 + 56), 0);
  ++*(_DWORD *)(a1 + 80);
  return a1;
}

uint64_t re::RigGraphDefinition::RigGraphDefinition(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a2;
  *(_QWORD *)result = *(_QWORD *)result & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)result = *a2 & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  *(_QWORD *)(result + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  v3 = a2[3];
  *(_QWORD *)(result + 16) = a2[2];
  *(_QWORD *)(result + 24) = v3;
  a2[2] = 0;
  a2[3] = 0;
  v4 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = a2[4];
  a2[4] = v4;
  v5 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 48) = a2[6];
  a2[6] = v5;
  ++*((_DWORD *)a2 + 10);
  ++*(_DWORD *)(result + 40);
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = 0;
  v6 = a2[8];
  *(_QWORD *)(result + 56) = a2[7];
  *(_QWORD *)(result + 64) = v6;
  a2[7] = 0;
  a2[8] = 0;
  v7 = *(_QWORD *)(result + 72);
  *(_QWORD *)(result + 72) = a2[9];
  a2[9] = v7;
  v8 = *(_QWORD *)(result + 88);
  *(_QWORD *)(result + 88) = a2[11];
  a2[11] = v8;
  ++*((_DWORD *)a2 + 20);
  ++*(_DWORD *)(result + 80);
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 120) = 0;
  v9 = a2[13];
  *(_QWORD *)(result + 96) = a2[12];
  *(_QWORD *)(result + 104) = v9;
  a2[12] = 0;
  a2[13] = 0;
  v10 = *(_QWORD *)(result + 112);
  *(_QWORD *)(result + 112) = a2[14];
  a2[14] = v10;
  v11 = *(_QWORD *)(result + 128);
  *(_QWORD *)(result + 128) = a2[16];
  a2[16] = v11;
  ++*((_DWORD *)a2 + 30);
  ++*(_DWORD *)(result + 120);
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_DWORD *)(result + 160) = 0;
  v12 = a2[18];
  *(_QWORD *)(result + 136) = a2[17];
  *(_QWORD *)(result + 144) = v12;
  a2[17] = 0;
  a2[18] = 0;
  v13 = *(_QWORD *)(result + 152);
  *(_QWORD *)(result + 152) = a2[19];
  a2[19] = v13;
  v14 = *(_QWORD *)(result + 168);
  *(_QWORD *)(result + 168) = a2[21];
  a2[21] = v14;
  ++*((_DWORD *)a2 + 40);
  ++*(_DWORD *)(result + 160);
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_DWORD *)(result + 200) = 0;
  v15 = a2[23];
  *(_QWORD *)(result + 176) = a2[22];
  *(_QWORD *)(result + 184) = v15;
  a2[22] = 0;
  a2[23] = 0;
  v16 = *(_QWORD *)(result + 192);
  *(_QWORD *)(result + 192) = a2[24];
  a2[24] = v16;
  v17 = *(_QWORD *)(result + 208);
  *(_QWORD *)(result + 208) = a2[26];
  a2[26] = v17;
  ++*((_DWORD *)a2 + 50);
  ++*(_DWORD *)(result + 200);
  return result;
}

_QWORD *re::DynamicArray<re::RigGraphDefinition>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xD8uLL))
        {
          v2 = 216 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 216 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 216, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 216 * v9;
        do
        {
          re::RigGraphDefinition::RigGraphDefinition((uint64_t)&v7[v10 / 8], (uint64_t *)(v8 + v10));
          re::DynamicArray<re::RigGraphInputValue>::deinit(v8 + v10 + 176);
          re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(v8 + v10 + 136));
          re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(v8 + v10 + 96);
          re::DynamicArray<re::RigGraphParameterProxy>::deinit(v8 + v10 + 56);
          re::DynamicArray<re::RigGraphParameterProxy>::deinit(v8 + v10 + 16);
          re::StringID::destroyString((re::StringID *)(v8 + v10));
          v10 += 216;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  re::StringID *v13;
  char v14;
  re::StringID *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + (v9 << 6);
        v11 = v7;
        do
        {
          *(_BYTE *)v11 = *(_BYTE *)v8;
          v13 = (re::StringID *)(v8 + 8);
          v12 = *(_QWORD *)(v8 + 8);
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v8 + 8) & 1;
          v11[1] = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[2] = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = &str_110;
          *(_QWORD *)(v8 + 8) = 0;
          v15 = (re::StringID *)(v8 + 24);
          v14 = *(_QWORD *)(v8 + 24);
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v8 + 24) & 1;
          v11[3] = *(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          v11[4] = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 32) = &str_110;
          *(_QWORD *)(v8 + 24) = 0;
          v17 = *(_QWORD *)(v8 + 40);
          v16 = v8 + 40;
          v11[5] = v11[5] & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
          v11[5] = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
          v11[6] = *(_QWORD *)(v16 + 8);
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v16 + 8) = &str_110;
          *((_DWORD *)v11 + 14) = *(_DWORD *)(v16 + 16);
          re::StringID::destroyString((re::StringID *)v16);
          re::StringID::destroyString(v15);
          re::StringID::destroyString(v13);
          v8 = v16 + 24;
          v11 += 8;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED3A4A0;
  return result;
}

void std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED3A4A0;
}

re *std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::RigGraphAsset>((re *)"operator()", 374, *a2);
}

uint64_t std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0,std::allocator<re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(re::ecs2::Entity const&,re::ecs2::Entity const&)::$_0>,void ()(re::RigGraphAsset*)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED3A520;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED3A520;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EEclEOSF_(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::RigGraphAsset>((re *)"operator()", 36, *a2);
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_13RigGraphAssetEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

_QWORD *re::DynamicArray<re::RigGraphNode>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigGraphNode>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xC8uLL))
        {
          v2 = 200 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 200 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 200, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 200 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::RigGraphNode::RigGraphNode(v11, v8);
          re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(v8 + 160);
          re::DynamicArray<re::StringID>::deinit(v8 + 120);
          re::DynamicArray<re::RigGraphNodeChild>::deinit(v8 + 80);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(v8 + 40);
          re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(v8);
          v8 += 200;
          v11 += 200;
          v10 -= 200;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigGraphDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RigGraphDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigGraphDefinition>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RigGraphDefinition>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigGraphDefinition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RigGraphDefinition>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigGraphDefinition>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[3];
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];
  uint64_t v19;

  v19 = 0;
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  v16 = 0u;
  memset(v15, 0, sizeof(v15));
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  re::StringID::invalid((re::StringID *)&v10);
  v11 = 0uLL;
  DWORD2(v12) = 0;
  *(_QWORD *)&v12 = 0;
  v19 = 0;
  v13 = 0u;
  v14 = 0u;
  LODWORD(v15[0]) = 0;
  memset((char *)v15 + 8, 0, 36);
  v16 = 0u;
  v17 = 0u;
  memset((char *)v18 + 8, 0, 36);
  LODWORD(v18[0]) = 0;
  re::DynamicArray<re::RigGraphDefinition>::add(a4, (uint64_t *)&v10);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)&v18[1]);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)&v16 + 1);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)&v15[1]);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v13 + 8);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  v8 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 216 * *(_QWORD *)(a4 + 16) - 216);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 216 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 216 * a3;
}

void re::DynamicArray<re::RigGraphDefinition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 216 * a2;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)v10 + 176);
      re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)v10 + 17);
      re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v10 + 96);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v10 + 56);
      re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)v10 + 16);
      re::StringID::destroyString(v10);
      ++v9;
      v8 += 216;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 216 * v4 + 208;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        re::StringID::invalid((re::StringID *)(v7 - 26));
        *(v7 - 24) = 0;
        *(v7 - 23) = 0;
        *((_DWORD *)v7 - 42) = 0;
        *(v7 - 22) = 0;
        *v7 = 0;
        *((_OWORD *)v7 - 10) = 0u;
        *((_OWORD *)v7 - 9) = 0u;
        *((_DWORD *)v7 - 32) = 0;
        *(_OWORD *)(v7 - 15) = 0u;
        *(_OWORD *)(v7 - 13) = 0u;
        *((_DWORD *)v7 - 22) = 0;
        *((_OWORD *)v7 - 5) = 0u;
        *((_OWORD *)v7 - 4) = 0u;
        *((_DWORD *)v7 - 12) = 0;
        *(_OWORD *)(v7 - 5) = 0u;
        *(_OWORD *)(v7 - 3) = 0u;
        v6 += 216;
        *((_DWORD *)v7 - 2) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 216 * v8;
      do
      {
        re::DynamicArray<re::RigGraphInputValue>::deinit(v10 + v9 + 176);
        re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(v10 + v9 + 136));
        re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(v10 + v9 + 96);
        re::DynamicArray<re::RigGraphParameterProxy>::deinit(v10 + v9 + 56);
        re::DynamicArray<re::RigGraphParameterProxy>::deinit(v10 + v9 + 16);
        re::StringID::destroyString((re::StringID *)(v10 + v9));
        v9 += 216;
      }
      while (v11 != v9);
    }
  }
  else
  {
    re::DynamicArray<re::RigGraphDefinition>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigGraphDefinition>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RigGraphDefinition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 216 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 216;
        v15 -= 216;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 216 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 216 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshRigGraphIndex>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  void *v11;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[0] = 0;
  v13[2] = 0;
  v10 = 0u;
  v12[0] = 0;
  v11 = &str_110;
  v12[1] = &str_110;
  v13[1] = &str_110;
  re::DynamicArray<re::MeshRigGraphIndex>::add(a4, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)((char *)&v10 + 8));
  v8 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + (*((_QWORD *)a4 + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigGraphIndex>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

void re::DynamicArray<re::MeshRigGraphIndex>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = (a2 << 6) | 0x28;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
      ++v9;
      v8 += 64;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = (v4 << 6) | 0x38;
      do
      {
        v7 = (_DWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *((_BYTE *)v7 - 56) = 0;
        *((_QWORD *)v7 - 6) = 0;
        *((_QWORD *)v7 - 5) = &str_110;
        *((_QWORD *)v7 - 4) = 0;
        *((_QWORD *)v7 - 3) = &str_110;
        *((_QWORD *)v7 - 2) = 0;
        *((_QWORD *)v7 - 1) = &str_110;
        *v7 = 0;
        v6 += 64;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  re::StringID *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = v8 << 6;
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + 40);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
        v10 = (re::StringID *)((char *)v10 + 64);
        v9 -= 64;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshRigGraphIndex>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = v12 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 64;
        v14 -= 64;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigGraphIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RigGraphBoundInputParameterData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  re::StringID::invalid((re::StringID *)&v10);
  re::StringID::invalid((re::StringID *)&v11);
  LODWORD(v12) = 0;
  re::DynamicArray<re::RigGraphBoundInputParameterData>::add(a4, (uint64_t *)&v10);
  re::StringID::destroyString((re::StringID *)&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + 40 * *((_QWORD *)a4 + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigGraphBoundInputParameterData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

void re::DynamicArray<re::RigGraphBoundInputParameterData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 40 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 40;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 40 * v4;
      do
      {
        v7 = (_DWORD *)(*(_QWORD *)(a1 + 32) + v6);
        re::StringID::invalid((re::StringID *)v7);
        re::StringID::invalid((re::StringID *)(v7 + 4));
        v7[8] = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 40 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 40;
        v10 -= 40;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RigGraphBoundInputParameterData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigGraphBoundInputParameterData>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RigGraphBoundInputParameterData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 40 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 40;
        v14 -= 40;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 40 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigGraphBoundInputParameterData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::MaterialDefinitionAsset::~MaterialDefinitionAsset(re::MaterialDefinitionAsset *this)
{
  re::MaterialDefinitionFile *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24ED3A8E8;
  v2 = (re::MaterialDefinitionFile *)*((_QWORD *)this + 278);
  if (v2)
  {
    v3 = re::globalAllocators(this)[2];
    re::MaterialDefinitionFile::~MaterialDefinitionFile(v2);
    (*(void (**)(uint64_t, re::MaterialDefinitionFile *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  re::FixedArray<re::DynamicString>::deinit((_QWORD *)this + 308);
  re::FixedArray<re::DynamicString>::deinit((_QWORD *)this + 305);
  re::FixedArray<re::DynamicString>::deinit((_QWORD *)this + 302);
  re::FixedArray<re::DynamicString>::deinit((_QWORD *)this + 299);
  re::FixedArray<re::DynamicString>::deinit((_QWORD *)this + 296);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 290);
  v4 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 284);
  v5 = *((_QWORD *)this + 279);
  if (v5)
  {
    if (*((_QWORD *)this + 283))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *((_QWORD *)this + 283) = 0;
    *((_QWORD *)this + 280) = 0;
    *((_QWORD *)this + 281) = 0;
    *((_QWORD *)this + 279) = 0;
    ++*((_DWORD *)this + 564);
  }
  re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionAsset *)((char *)this + 776));
  re::AssetHandle::~AssetHandle((re::MaterialDefinitionAsset *)((char *)this + 752));
  v6 = *((_QWORD *)this + 93);
  if (v6)
  {

    *((_QWORD *)this + 93) = 0;
  }
  re::MaterialDefinitionFile::~MaterialDefinitionFile((re::MaterialDefinitionAsset *)((char *)this + 8));
}

{
  re::MaterialDefinitionAsset::~MaterialDefinitionAsset(this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::MaterialDefinitionAsset::assetType(re::MaterialDefinitionAsset *this)
{
  unsigned __int8 v1;

  {
    re::MaterialDefinitionAsset::assetType(void)::type = (uint64_t)"MaterialDefinition";
    qword_255827788 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::MaterialDefinitionAsset::assetType(void)::type);
  }
  return &re::MaterialDefinitionAsset::assetType(void)::type;
}

_QWORD *re::MaterialDefinitionAsset::setMergedFile(_QWORD *this, re::MaterialDefinitionFile *a2)
{
  re::MaterialDefinitionFile *v2;
  _QWORD *v4;
  uint64_t v5;

  v2 = (re::MaterialDefinitionFile *)this[278];
  if (v2 != a2)
  {
    v4 = this;
    if (v2)
    {
      v5 = re::globalAllocators((re *)this)[2];
      re::MaterialDefinitionFile::~MaterialDefinitionFile(v2);
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, re::MaterialDefinitionFile *))(*(_QWORD *)v5 + 40))(v5, v2);
    }
    v4[278] = a2;
  }
  return this;
}

uint64_t re::MaterialDefinitionAsset::getOriginalConstantParameterType(re::MaterialDefinitionAsset *this, const char *a2)
{
  char *v2;
  uint64_t v3;
  char v4;
  const char *v5;
  int v6;
  uint64_t result;
  uint64_t v8;

  v2 = (char *)this + 2272;
  if (a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = a2 + 2;
        do
        {
          v3 = 31 * v3 + v4;
          v6 = *(unsigned __int8 *)v5++;
          v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v8 = v3;
  result = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v2, &v8);
  if (result)
    return *(unsigned __int8 *)(result + 20);
  return result;
}

uint64_t *re::MaterialDefinitionAsset::tryGetOriginalColorGamut3FParameterValue@<X0>(re::MaterialDefinitionAsset *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = (char *)this + 2272;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v12 = v5;
  result = (uint64_t *)re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v4, &v12);
  if (result && *((_BYTE *)result + 20) == 20)
  {
    v10 = *result;
    v11 = *((unsigned int *)result + 2) | ((unint64_t)*((unsigned __int8 *)result + 16) << 32);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 4) = v10;
    *(_QWORD *)(a3 + 12) = v11;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

uint64_t re::MaterialDefinitionAsset::tryGetOriginalColorGamut4FParameterValue@<X0>(re::MaterialDefinitionAsset *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t result;
  uint64_t v10;

  v4 = (char *)this + 2272;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v5;
  result = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v4, &v10);
  if (result && *(_BYTE *)(result + 20) == 21)
  {
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 4) = *(_OWORD *)result;
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 16);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

uint64_t re::MaterialDefinitionAsset::tryGetParameterBinding(re::MaterialDefinitionAsset *this, const char *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = (char *)this + 2320;
  v4 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v3, (uint64_t)&v6);
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  return v4;
}

void re::MaterialDefinitionLoader::preloadAssets(re::MaterialDefinitionLoader *this)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**((_QWORD **)this + 2) + 8))(&v4, *((_QWORD *)this + 2), "engine:debugPasses.rematerialdefinition");
  v2 = *((_OWORD *)this + 2);
  *((_OWORD *)this + 2) = v4;
  v4 = v2;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v5;
  v5 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 352))(*((_QWORD *)this + 2)))
    re::AssetHandle::loadAsync((re::MaterialDefinitionLoader *)((char *)this + 32));
}

__guard re::MaterialDefinitionLoader::introspectionType(re::MaterialDefinitionLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::MaterialDefinitionAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"MaterialDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_MaterialDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialDefinitionAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialDefinitionAsset>, 0);
    }
  }
  return v2[33];
}

uint64_t re::MaterialDefinitionLoader::registerAsset(re::MaterialDefinitionLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v3;
  const re::MaterialDefinitionFile *v4;
  const re::MaterialDefinitionFile *v5;
  uint64_t v6;
  uint64_t v7;
  re::AssetLoader *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  re::AssetHandle **v12;
  re::AssetHandle **v13;
  int v14;
  int v15;
  re::AssetHandle *v16;
  uint64_t v17;
  unsigned int v18;
  re::TextureAsset *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  re *v24;
  uint64_t *v25;
  uint64_t v26;
  const re::AssetLoadDescriptor *v27;
  char isEngineAssetDescriptor;
  NSObject *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  re::MaterialDefinitionFile *FlattenedMaterialFile;
  char *v34;
  uint64_t v35;
  re *v36;
  NSObject *v37;
  uint64_t v38;
  _anonymous_namespace_ *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  _anonymous_namespace_ *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  int v61;
  _anonymous_namespace_ *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  int *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  re *v82;
  NSObject *v83;
  char *v85;
  _BYTE *v86;
  char *v87;
  const re::MaterialDefinitionFile *v88;
  _BYTE v89[1440];
  char v90[8];
  uint64_t v91;
  uint64_t v92;
  re::DynamicString *v93;
  uint64_t v94[6];
  uint64_t v95[6];
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint8_t v100[4];
  char *v101;
  __int16 v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  _BYTE buf[22];
  _BYTE *v108;
  _QWORD v109[3];
  int v110;
  uint64_t v111;
  _QWORD v112[3];
  int v113;
  uint64_t v114;
  _QWORD v115[168];
  int v116;
  const char *v117;
  __int16 v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  unint64_t v123;
  uint8_t v124[16];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v3 = MEMORY[0x24BDAC7A8](this);
  v5 = v4;
  v7 = v6;
  v8 = (re::AssetLoader *)v3;
  v129 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(v3 + 16);
  if (!*(_BYTE *)(v6 + 2216))
  {
    if (*((_QWORD *)v4 + 10) == -1)
      v23 = 0;
    else
      v23 = *((_QWORD *)v4 + 10);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 64));
    re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v9, v23, v100);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 64));
    if (v100[0])
    {
      re::AssetManager::lookupLoadDescriptors((os_unfair_lock_s *)v9, (const re::AssetHandle *)((char *)&v101 + 4), v90);
      if (v90[0])
      {
        if (v92)
        {
          v25 = (uint64_t *)v93;
          v26 = 144 * v92;
          while (1)
          {
            re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)v25);
            re::DynamicArray<BOOL>::DynamicArray((uint64_t)v109, v25 + 4);
            re::DynamicArray<BOOL>::DynamicArray((uint64_t)v112, v25 + 9);
            re::DynamicString::DynamicString((re::DynamicString *)v115, (const re::DynamicString *)(v25 + 14));
            isEngineAssetDescriptor = re::FrameworkAssetProvider::isEngineAssetDescriptor((re::FrameworkAssetProvider *)buf, v27);
            if (v115[0])
            {
              if ((v115[1] & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v115[0] + 40))();
              memset(v115, 0, 32);
            }
            if (v112[0])
            {
              if (v114)
                (*(void (**)(void))(*(_QWORD *)v112[0] + 40))();
              v114 = 0;
              memset(v112, 0, sizeof(v112));
              ++v113;
            }
            if (v109[0])
            {
              if (v111)
                (*(void (**)(void))(*(_QWORD *)v109[0] + 40))();
              v111 = 0;
              memset(v109, 0, sizeof(v109));
              ++v110;
            }
            v24 = *(re **)buf;
            if (*(_QWORD *)buf && (buf[8] & 1) != 0)
              v24 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
            if ((isEngineAssetDescriptor & 1) != 0)
              break;
            v25 += 18;
            v26 -= 144;
            if (!v26)
              goto LABEL_45;
          }
        }
        else
        {
LABEL_45:
          v29 = *re::graphicsLogObjects(v24);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            v30 = (char *)*((_QWORD *)v5 + 18);
            if ((*((_BYTE *)v5 + 136) & 1) == 0)
              v30 = (char *)v5 + 137;
            if ((*(_BYTE *)(v7 + 16) & 1) != 0)
              v31 = *(_QWORD *)(v7 + 24);
            else
              v31 = v7 + 17;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v30;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v31;
            _os_log_impl(&dword_224FE9000, v29, OS_LOG_TYPE_DEFAULT, "[%s] [%s] Loading of non-engine MaterialDefinitions is deprecated. Please move to using our public material APIs, such as CustomMaterial or ShaderGraphMaterial.", buf, 0x16u);
          }
        }
        if (v90[0])
          re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v91);
      }
      v57 = v100[0];
      *(_BYTE *)(v7 + 2216) = 1;
      if (v57)
        re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v101 + 4));
    }
    else
    {
      *(_BYTE *)(v7 + 2216) = 1;
    }
  }
  v10 = (_anonymous_namespace_ *)*((_QWORD *)v8 + 3);
  if (!v10)
    return 0;
  v11 = *(_QWORD *)(v7 + 2248);
  if (v11)
    goto LABEL_8;
  re::AssetLoader::internalFindAssetHandleFields(v8, (const re::IntrospectionBase **)v7, (uint64_t)buf);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v7 + 2232, (uint64_t)buf);
  if (*(_QWORD *)buf && v109[0])
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  v11 = *(_QWORD *)(v7 + 2248);
  if (v11)
  {
LABEL_8:
    v12 = *(re::AssetHandle ***)(v7 + 2264);
    v13 = &v12[v11];
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *v12;
      v17 = *((_QWORD *)*v12 + 1);
      if (v17)
      {
        v18 = atomic_load((unsigned int *)(v17 + 704));
        if (v18 != 2)
        {
          if (v18 == 3)
            return 2;
          re::AssetHandle::loadAsync(*v12);
          v20 = *((_QWORD *)v16 + 1);
          if (v20)
            v21 = *(uint64_t **)(v20 + 264);
          else
            v21 = 0;
          if (v21 == re::TextureAsset::assetType(v19))
            v14 = 1;
          else
            v15 = 1;
        }
      }
      ++v12;
    }
    while (v12 != v13);
    if (v15)
      return 1;
  }
  else
  {
    v14 = 0;
  }
  v32 = *(_QWORD *)(v7 + 2224);
  if (!v32)
  {
    FlattenedMaterialFile = re::makeFlattenedMaterialFile((re *)v9, (AssetService *)(v7 + 8), v4);
    if (!FlattenedMaterialFile)
      return 2;
    re::MaterialDefinitionAsset::setMergedFile((_QWORD *)v7, FlattenedMaterialFile);
    v32 = *(_QWORD *)(v7 + 2224);
  }
  v34 = (char *)v5 + 137;
  if ((*((_QWORD *)v5 + 17) & 1) != 0)
    v35 = *((_QWORD *)v5 + 18);
  else
    v35 = (uint64_t)v5 + 137;
  re::parseShaderParameterData((uint64_t)v10, v35, v32 + 144, (uint64_t)v90);
  re::makeMaterialDefinitionBuilder((uint64_t)v10);
  if (!buf[0])
  {
    v37 = *re::assetTypesLogObjects(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      if ((*((_QWORD *)v5 + 17) & 1) != 0)
        v85 = (char *)*((_QWORD *)v5 + 18);
      else
        v85 = (char *)v5 + 137;
      if ((buf[16] & 1) != 0)
        v86 = v108;
      else
        v86 = &buf[17];
      *(_DWORD *)v100 = 136315394;
      v101 = v85;
      v102 = 2080;
      v103 = v86;
      _os_log_error_impl(&dword_224FE9000, v37, OS_LOG_TYPE_ERROR, "Failed to prepare material definition builder '%s': %s.", v100, 0x16u);
    }
    v22 = 2;
    goto LABEL_147;
  }
  re::MaterialDefinitionBuilder::operator=((uint64_t *)(v7 + 776), (uint64_t *)&buf[8]);
  re::AssetHandle::operator=((uint64_t *)(v7 + 752), (uint64_t *)(*(_QWORD *)(v7 + 2224) + 120));
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(v7 + 2272, v94);
  if (v95[0])
    re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v7 + 2320, v95);
  if (!v14)
  {
    re::parseTextureParameterData(v10, *(_QWORD *)(v7 + 2224) + 144, (uint64_t)v100);
    v38 = *(_QWORD *)(v7 + 2224);
    buildKeySetFromParameters<re::DynamicString>((_anonymous_namespace_ *)v124, v38 + 144);
    re::FixedArray<float>::operator=((uint64_t *)(v7 + 2368), (uint64_t *)v124);
    re::FixedArray<re::DynamicString>::deinit(v124);
    buildKeySetFromParameters<re::DynamicString>((_anonymous_namespace_ *)v124, v38 + 192);
    re::FixedArray<float>::operator=((uint64_t *)(v7 + 2392), (uint64_t *)v124);
    v39 = (_anonymous_namespace_ *)re::FixedArray<re::DynamicString>::deinit(v124);
    v97 = 0;
    v96 = 0;
    v98 = 0;
    v40 = *(unsigned int *)(v38 + 268);
    v41 = *(unsigned int *)(v38 + 272);
    v88 = v5;
    v42 = 0;
    if ((_DWORD)v41)
    {
      v43 = (int *)(*(_QWORD *)(v38 + 256) + 8);
      while (1)
      {
        v44 = *v43;
        v43 += 22;
        if (v44 < 0)
          break;
        if (v41 == ++v42)
        {
          LODWORD(v42) = *(_DWORD *)(v38 + 272);
          break;
        }
      }
    }
    if ((_DWORD)v41 == (_DWORD)v42)
    {
LABEL_83:
      re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)v124, (uint64_t)&v96);
      re::FixedArray<re::DynamicString>::deinit(&v96);
      re::FixedArray<float>::operator=((uint64_t *)(v7 + 2416), (uint64_t *)v124);
      v51 = (_anonymous_namespace_ *)re::FixedArray<re::DynamicString>::deinit(v124);
      v97 = 0;
      v96 = 0;
      v98 = 0;
      v52 = *(unsigned int *)(v38 + 316);
      v53 = *(unsigned int *)(v38 + 320);
      if ((_DWORD)v53)
      {
        v54 = 0;
        v55 = (int *)(*(_QWORD *)(v38 + 304) + 8);
        while (1)
        {
          v56 = *v55;
          v55 += 40;
          if (v56 < 0)
            break;
          if (v53 == ++v54)
          {
            LODWORD(v54) = *(_DWORD *)(v38 + 320);
            break;
          }
        }
      }
      else
      {
        LODWORD(v54) = 0;
      }
      if ((_DWORD)v53 == (_DWORD)v54)
      {
LABEL_106:
        re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)v124, (uint64_t)&v96);
        re::FixedArray<re::DynamicString>::deinit(&v96);
        re::FixedArray<float>::operator=((uint64_t *)(v7 + 2440), (uint64_t *)v124);
        v62 = (_anonymous_namespace_ *)re::FixedArray<re::DynamicString>::deinit(v124);
        v97 = 0;
        v96 = 0;
        v98 = 0;
        v63 = *(unsigned int *)(v38 + 364);
        v64 = *(unsigned int *)(v38 + 368);
        if ((_DWORD)v64)
        {
          v65 = 0;
          v66 = (int *)(*(_QWORD *)(v38 + 352) + 8);
          while (1)
          {
            v67 = *v66;
            v66 += 38;
            if (v67 < 0)
              break;
            if (v64 == ++v65)
            {
              LODWORD(v65) = *(_DWORD *)(v38 + 368);
              break;
            }
          }
        }
        else
        {
          LODWORD(v65) = 0;
        }
        if ((_DWORD)v64 == (_DWORD)v65)
        {
LABEL_123:
          re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)v124, (uint64_t)&v96);
          re::FixedArray<re::DynamicString>::deinit(&v96);
          re::FixedArray<float>::operator=((uint64_t *)(v7 + 2464), (uint64_t *)v124);
          re::FixedArray<re::DynamicString>::deinit(v124);
          re::MaterialDefinitionAsset::setMergedFile((_QWORD *)v7, 0);
          re::TextureParameterTable::operator=(v7 + 1368, (uint64_t *)v100);
          v72 = v106;
          if (v106)
          {
            v73 = 0;
            v74 = (int *)(v105 + 8);
            while (1)
            {
              v75 = *v74;
              v74 += 22;
              if (v75 < 0)
                break;
              if (v106 == ++v73)
              {
                LODWORD(v73) = v106;
                break;
              }
            }
          }
          else
          {
            LODWORD(v73) = 0;
          }
          if (v106 != (_DWORD)v73)
          {
            v76 = v73;
            v77 = v105;
            do
            {
              re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(v7 + 2320, (re::DynamicString *)(v77 + 88 * v76 + 16), v77 + 88 * v76 + 48);
              v77 = v105;
              if (v106 <= (int)v73 + 1)
                v78 = v73 + 1;
              else
                v78 = v106;
              v79 = v73;
              while (1)
              {
                v76 = (v79 + 1);
                if (v78 - 1 == v79)
                  break;
                ++v79;
                LODWORD(v73) = v76;
                if ((*(_DWORD *)(v105 + 88 * v76 + 8) & 0x80000000) != 0)
                  goto LABEL_139;
              }
              LODWORD(v73) = v78;
LABEL_139:
              ;
            }
            while (v72 != (_DWORD)v73);
          }
          v80 = *((_QWORD *)v10 + 3);
          re::MaterialDefinitionBuilder::MaterialDefinitionBuilder((uint64_t)v89, (uint64_t *)(v7 + 776));
          re::MaterialManager::createMaterialDefinition(v80, (re::MaterialDefinitionBuilder *)v89, v124);
          v81 = *(_QWORD *)(v7 + 744);
          *(_QWORD *)(v7 + 744) = *(_QWORD *)v124;
          *(_QWORD *)v124 = v81;
          if (v81)
          {

            *(_QWORD *)v124 = 0;
          }
          re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionBuilder *)v89);
          if (*(_QWORD *)(v7 + 744))
          {
            v22 = 0;
          }
          else
          {
            v83 = *re::assetTypesLogObjects(v82);
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              if ((*((_QWORD *)v88 + 17) & 1) != 0)
                v87 = (char *)*((_QWORD *)v88 + 18);
              else
                v87 = v34;
              *(_DWORD *)v124 = 136315138;
              *(_QWORD *)&v124[4] = v87;
              _os_log_error_impl(&dword_224FE9000, v83, OS_LOG_TYPE_ERROR, "Failed to prepare material definition '%s'", v124, 0xCu);
            }
            v22 = 2;
          }
          re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v104);
          re::TextureParameterTable::~TextureParameterTable((re::TextureParameterTable *)v100);
          goto LABEL_147;
        }
        v68 = 0;
        v69 = v65;
        while (1)
        {
          v47 = v68;
          v48 = v97;
          if (v97 <= v68)
            break;
          re::DynamicString::operator=((re::DynamicString *)(v98 + 32 * v68), (re::DynamicString *)(*(_QWORD *)(v38 + 352) + 152 * v69 + 16));
          v68 = v47 + 1;
          if (*(_DWORD *)(v38 + 368) <= (v65 + 1))
            v70 = v65 + 1;
          else
            v70 = *(_DWORD *)(v38 + 368);
          while (1)
          {
            v69 = (v65 + 1);
            if (v70 - 1 == (_DWORD)v65)
              break;
            LODWORD(v65) = v65 + 1;
            v71 = v69;
            if ((*(_DWORD *)(*(_QWORD *)(v38 + 352) + 152 * v69 + 8) & 0x80000000) != 0)
              goto LABEL_122;
          }
          v71 = v70;
LABEL_122:
          LODWORD(v65) = v71;
          if ((_DWORD)v64 == v71)
            goto LABEL_123;
        }
LABEL_167:
        v99 = 0;
        v127 = 0u;
        v128 = 0u;
        v125 = 0u;
        v126 = 0u;
        *(_OWORD *)v124 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v116 = 136315906;
        v117 = "operator[]";
        v118 = 1024;
        v119 = 468;
        v120 = 2048;
        v121 = v47;
        v122 = 2048;
        v123 = v48;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v58 = 0;
      v59 = v54;
      while (1)
      {
        v47 = v58;
        v48 = v97;
        if (v97 <= v58)
          break;
        re::DynamicString::operator=((re::DynamicString *)(v98 + 32 * v58), (re::DynamicString *)(*(_QWORD *)(v38 + 304) + 160 * v59 + 16));
        v58 = v47 + 1;
        if (*(_DWORD *)(v38 + 320) <= (v54 + 1))
          v60 = v54 + 1;
        else
          v60 = *(_DWORD *)(v38 + 320);
        while (1)
        {
          v59 = (v54 + 1);
          if (v60 - 1 == (_DWORD)v54)
            break;
          LODWORD(v54) = v54 + 1;
          v61 = v59;
          if ((*(_DWORD *)(*(_QWORD *)(v38 + 304) + 160 * v59 + 8) & 0x80000000) != 0)
            goto LABEL_105;
        }
        v61 = v60;
LABEL_105:
        LODWORD(v54) = v61;
        if ((_DWORD)v53 == v61)
          goto LABEL_106;
      }
    }
    else
    {
      v45 = 0;
      v46 = v42;
      while (1)
      {
        v47 = v45;
        v48 = v97;
        if (v97 <= v45)
          break;
        re::DynamicString::operator=((re::DynamicString *)(v98 + 32 * v45), (re::DynamicString *)(*(_QWORD *)(v38 + 256) + 88 * v46 + 16));
        v45 = v47 + 1;
        if (*(_DWORD *)(v38 + 272) <= (v42 + 1))
          v49 = v42 + 1;
        else
          v49 = *(_DWORD *)(v38 + 272);
        while (1)
        {
          v46 = (v42 + 1);
          if (v49 - 1 == (_DWORD)v42)
            break;
          LODWORD(v42) = v42 + 1;
          v50 = v46;
          if ((*(_DWORD *)(*(_QWORD *)(v38 + 256) + 88 * v46 + 8) & 0x80000000) != 0)
            goto LABEL_82;
        }
        v50 = v49;
LABEL_82:
        LODWORD(v42) = v50;
        if ((_DWORD)v41 == v50)
          goto LABEL_83;
      }
      v99 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      *(_OWORD *)v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v116 = 136315906;
      v117 = "operator[]";
      v118 = 1024;
      v119 = 468;
      v120 = 2048;
      v121 = v47;
      v122 = 2048;
      v123 = v48;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v99 = 0;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    *(_OWORD *)v124 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 468;
    v120 = 2048;
    v121 = v47;
    v122 = 2048;
    v123 = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_167;
  }
  v22 = 1;
LABEL_147:
  if (buf[0])
  {
    re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionBuilder *)&buf[8]);
  }
  else if (*(_QWORD *)&buf[8] && (buf[16] & 1) != 0)
  {
    (*(void (**)(void))(**(_QWORD **)&buf[8] + 40))();
  }
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v95);
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v94);
  re::ShaderParameterTable::~ShaderParameterTable((re::ShaderParameterTable *)v90);
  return v22;
}

_QWORD *buildKeySetFromParameters<re::DynamicString>(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v4 = *(unsigned int *)(a2 + 28);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 20;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 != (_DWORD)v6)
  {
    v9 = 0;
    v10 = v6;
    do
    {
      v11 = v9;
      v12 = v17;
      if (v17 <= v9)
      {
        v19 = 0;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v20 = 136315906;
        v21 = "operator[]";
        v22 = 1024;
        v23 = 468;
        v24 = 2048;
        v25 = v11;
        v26 = 2048;
        v27 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::DynamicString::operator=((re::DynamicString *)(v18 + 32 * v9), (re::DynamicString *)(*(_QWORD *)(a2 + 16) + 80 * v10 + 16));
      v9 = v11 + 1;
      if (*(_DWORD *)(a2 + 32) <= (v6 + 1))
        v13 = v6 + 1;
      else
        v13 = *(_DWORD *)(a2 + 32);
      while (1)
      {
        v10 = (v6 + 1);
        if (v13 - 1 == (_DWORD)v6)
          break;
        LODWORD(v6) = v6 + 1;
        v14 = v10;
        if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 80 * v10 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      v14 = v13;
LABEL_17:
      LODWORD(v6) = v14;
    }
    while ((_DWORD)v5 != v14);
  }
  re::FixedArray<re::DynamicString>::FixedArray(a1, (uint64_t)&v16);
  return re::FixedArray<re::DynamicString>::deinit(&v16);
}

void re::MaterialDefinitionLoader::unregisterAsset(re::MaterialDefinitionLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = *((_QWORD *)a2 + 93);
  if (v4)
  {

    v5 = *((_OWORD *)a2 + 47);
    v6 = *((_QWORD *)a2 + 96);
    *(_OWORD *)(a2 + 760) = 0u;
    *(_OWORD *)(a2 + 744) = 0u;
    v7 = v5;
    v8 = v6;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  }
  re::MaterialDefinitionBuilder::destroy((re::MaterialDefinitionBuilder *)(a2 + 776));
  *((_QWORD *)a2 + 281) = 0;
  ++*((_DWORD *)a2 + 564);
}

re *re::MaterialDefinitionLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

BOOL re::MaterialDefinitionLoader::isSupportedSourceExtension(re::MaterialDefinitionLoader *this, const char *a2)
{
  return !strcasecmp(a2, "rematerialdefinition") || strcasecmp(a2, "hmmaterialdefinition") == 0;
}

void *re::MaterialDefinitionLoader::findDependencies@<X0>(re::MaterialDefinitionLoader *this@<X0>, const re::IntrospectionBase **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  void *result;
  const re::IntrospectionBase *v7;
  re::AssetHandle **v8;
  uint64_t v9;
  re::AssetHandle *v10;
  _QWORD v11[5];

  v5 = (unint64_t)a2[281];
  if (!v5)
  {
    re::AssetLoader::internalFindAssetHandleFields(this, a2, (uint64_t)v11);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a2 + 279), (uint64_t)v11);
    this = (re::MaterialDefinitionLoader *)v11[0];
    if (v11[0] && v11[4])
      this = (re::MaterialDefinitionLoader *)(*(uint64_t (**)(void))(*(_QWORD *)v11[0] + 40))();
    v5 = (unint64_t)a2[281];
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  result = re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a3, v5);
  ++*(_DWORD *)(a3 + 24);
  v7 = a2[281];
  if (v7)
  {
    v8 = (re::AssetHandle **)a2[283];
    v9 = 8 * (_QWORD)v7;
    do
    {
      v10 = *v8++;
      result = re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, v10);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

double downgradeMaterialDefinitionAssetFromFall2023@<D0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  return re::downgradeShaderParameterDataFromSpring2023((uint64_t)a1 + 152, a2);
}

uint64_t *re::allocInfo_MaterialDefinitionAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_94);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_94))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102418, 0);
    *(uint64_t *)((char *)&qword_254102428 + 6) = 0;
    qword_254102428 = 0;
    qword_254102438 = 0;
    qword_254102440 = 0xFFFFFFFFLL;
    qword_254102418 = (uint64_t)&off_24ED7DAA8;
    qword_254102448 = (uint64_t)"MaterialDefinitionAsset";
    dword_254102450 = 0;
    xmmword_254102458 = 0u;
    unk_254102468 = 0u;
    xmmword_254102478 = 0u;
    qword_254102488 = 0;
    __cxa_guard_release(&_MergedGlobals_94);
  }
  return &qword_254102418;
}

void re::initInfo_MaterialDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xD03B453A4494F22CLL;
  v12[1] = "MaterialDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254102400);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254102400);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_MaterialDefinitionFile((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "definitionFile";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254102408 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 64, 8);
      *(_DWORD *)v10 = 6;
      *(_QWORD *)(v10 + 8) = 1;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = downgradeMaterialDefinitionAssetFromFall2023;
      *(_DWORD *)(v10 + 56) = 2;
      qword_254102410 = v10;
      __cxa_guard_release(&qword_254102400);
    }
  }
  *((_QWORD *)this + 2) = 0x9B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254102408;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MaterialDefinitionAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MaterialDefinitionAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MaterialDefinitionAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MaterialDefinitionAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

re::MaterialDefinitionAsset *re::internal::defaultConstruct<re::MaterialDefinitionAsset>(int a1, int a2, re::MaterialDefinitionAsset *this)
{
  return re::MaterialDefinitionAsset::MaterialDefinitionAsset(this);
}

uint64_t re::internal::defaultDestruct<re::MaterialDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::MaterialDefinitionAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_MaterialDefinitionAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_MaterialDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialDefinitionAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialDefinitionAsset>, this);
}

void re::MaterialDefinitionLoader::~MaterialDefinitionLoader(re::MaterialDefinitionLoader *this)
{
  *(_QWORD *)this = &off_24ED3A790;
  re::AssetHandle::~AssetHandle((re::MaterialDefinitionLoader *)((char *)this + 32));
}

{
  *(_QWORD *)this = &off_24ED3A790;
  re::AssetHandle::~AssetHandle((re::MaterialDefinitionLoader *)((char *)this + 32));
  JUMPOUT(0x2276933B8);
}

void re::MaterialDefinitionFile::~MaterialDefinitionFile(re::MaterialDefinitionFile *this)
{
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v2 = re::MaterialDefinitionFile::deinit(this);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 86, v2);
  re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit((uint64_t)this + 648);
  v3 = re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 75);
  re::DynamicArray<re::DebugMapping>::deinit((uint64_t)this + 560, v3);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 58);
  re::DynamicArray<re::MaterialTechniqueGroupData>::deinit((uint64_t)this + 424);
  re::DynamicArray<re::MaterialTechniqueData>::deinit((uint64_t)this + 384);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 42, v4);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 18);
  re::AssetHandle::~AssetHandle((re::MaterialDefinitionFile *)((char *)this + 120));
  re::AssetHandle::~AssetHandle((re::MaterialDefinitionFile *)((char *)this + 96));
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if ((*((_BYTE *)this + 72) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 10));
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 6));
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
}

uint64_t re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit(uint64_t a1)
{
  uint64_t result;
  re::MaterialTechniqueQualityLevelSetData *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::MaterialTechniqueQualityLevelSetData **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 104 * v4;
        do
        {
          re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(v3);
          v3 = (re::MaterialTechniqueQualityLevelSetData *)((char *)v3 + 104);
          v5 -= 104;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::MaterialTechniqueQualityLevelSetData **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::MaterialTechniqueQualityLevelSetData *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(re::MaterialTechniqueQualityLevelSetData *this)
{
  uint64_t v2;

  re::MaterialTechniqueQualityLevelSetData::deinit(this);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 64);
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 6));
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
}

double re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 96;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::DebugMapping>::deinit(uint64_t a1, double a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  result = *(_QWORD *)a1;
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 16);
      if (v5)
      {
        v6 = (uint64_t *)(v4 + 32);
        v7 = 80 * v5;
        do
        {
          a2 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v6, a2);
          v8 = *(v6 - 4);
          if (v8)
          {
            if ((*(_BYTE *)(v6 - 3) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v8 + 40))(v8, *(v6 - 2), a2);
            a2 = 0.0;
            *((_OWORD *)v6 - 2) = 0u;
            *((_OWORD *)v6 - 1) = 0u;
          }
          v6 += 10;
          v7 -= 80;
        }
        while (v7);
        result = *(_QWORD *)a1;
        v4 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v4);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 96;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _OWORD *v4;
  double result;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v4 = (_OWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 16);
    *((_DWORD *)v4 - 2) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 32));
      *v4 = 0u;
      v4[1] = 0u;
    }
    return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 48));
  }
  return result;
}

uint64_t re::DynamicArray<re::MaterialTechniqueGroupData>::deinit(uint64_t a1)
{
  uint64_t result;
  re::MaterialTechniqueGroupData *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::MaterialTechniqueGroupData **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 72 * v4;
        do
        {
          re::MaterialTechniqueGroupData::deinit(v3);
          re::DynamicArray<re::DynamicString>::deinit((uint64_t)v3 + 32);
          if (*(_QWORD *)v3)
          {
            if ((*((_BYTE *)v3 + 8) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v3 + 40))(*(_QWORD *)v3, *((_QWORD *)v3 + 2));
            *(_OWORD *)v3 = 0u;
            *((_OWORD *)v3 + 1) = 0u;
          }
          v3 = (re::MaterialTechniqueGroupData *)((char *)v3 + 72);
          v5 -= 72;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::MaterialTechniqueGroupData **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::MaterialTechniqueGroupData *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::MaterialTechniqueData>::deinit(uint64_t a1)
{
  uint64_t result;
  re::MaterialTechniqueData *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::MaterialTechniqueData **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 664 * v4;
        do
        {
          re::MaterialTechniqueData::~MaterialTechniqueData(v3);
          v3 = (re::MaterialTechniqueData *)((char *)v3 + 664);
          v5 -= 664;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::MaterialTechniqueData **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::MaterialTechniqueData *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::MaterialTechniqueData::~MaterialTechniqueData(re::MaterialTechniqueData *this)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 76);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 70);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 512);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 58);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 424);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 47);
  v3.n128_f64[0] = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 41);
  v4 = *((_QWORD *)this + 37);
  if (v4)
  {
    if ((*((_BYTE *)this + 304) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 39), v3.n128_f64[0]);
    v3 = 0uLL;
    *(_OWORD *)((char *)this + 296) = 0u;
    *(_OWORD *)((char *)this + 312) = 0u;
  }
  v5 = *((_QWORD *)this + 32);
  if (v5)
  {
    if (*((_QWORD *)this + 36))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v5 + 40))(v5, v3);
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 33) = 0;
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 32) = 0;
    ++*((_DWORD *)this + 70);
  }
  v6 = *((_QWORD *)this + 21);
  if (v6)
  {
    if ((*((_BYTE *)this + 176) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 23), v3);
    *(_OWORD *)((char *)this + 168) = 0u;
    *(_OWORD *)((char *)this + 184) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::MaterialTechniqueData *)((char *)this + 144));
  v7 = *((_QWORD *)this + 14);
  if (v7)
  {
    if ((*((_BYTE *)this + 120) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 16));
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::MaterialTechniqueData *)((char *)this + 88));
  re::AssetHandle::~AssetHandle((re::MaterialTechniqueData *)((char *)this + 64));
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 6));
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
}

re::MaterialDefinitionAsset *re::MaterialDefinitionAsset::MaterialDefinitionAsset(re::MaterialDefinitionAsset *this)
{
  *(_QWORD *)this = &off_24ED3A8E8;
  re::MaterialDefinitionFile::MaterialDefinitionFile((re::MaterialDefinitionAsset *)((char *)this + 8));
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  re::MaterialDefinitionBuilder::MaterialDefinitionBuilder((re::MaterialDefinitionAsset *)((char *)this + 776));
  *((_BYTE *)this + 2216) = 0;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 140) = 0u;
  *((_DWORD *)this + 564) = 0;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *(_OWORD *)((char *)this + 2280) = 0u;
  *(_OWORD *)((char *)this + 2292) = 0u;
  *(_QWORD *)((char *)this + 2308) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 146) = 0u;
  *((_DWORD *)this + 588) = 0;
  *(_QWORD *)((char *)this + 2356) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 148) = 0u;
  *((_OWORD *)this + 149) = 0u;
  *((_OWORD *)this + 150) = 0u;
  *((_OWORD *)this + 151) = 0u;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_OWORD *)this + 154) = 0u;
  *((_QWORD *)this + 310) = 0;
  return this;
}

re::MaterialDefinitionFile *re::MaterialDefinitionFile::MaterialDefinitionFile(re::MaterialDefinitionFile *this)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(this, 0);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)this + 4, 0);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 4) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 8, 0);
  *((_DWORD *)this + 44) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_QWORD *)((char *)this + 180) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 0;
  *(_QWORD *)((char *)this + 228) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 0;
  *(_QWORD *)((char *)this + 276) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_DWORD *)this + 80) = 0;
  *(_QWORD *)((char *)this + 324) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 92) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_QWORD *)((char *)this + 372) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 102) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 0;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_QWORD *)((char *)this + 500) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 136) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *(_QWORD *)((char *)this + 548) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 146) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_OWORD *)this + 35) = 0u;
  *(_OWORD *)((char *)this + 620) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *(_QWORD *)((char *)this + 636) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 168) = 0;
  *((_QWORD *)this + 83) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 708) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_QWORD *)((char *)this + 724) = 0x7FFFFFFFLL;
  return this;
}

re::MaterialDefinitionBuilder *re::MaterialDefinitionBuilder::MaterialDefinitionBuilder(re::MaterialDefinitionBuilder *this)
{
  _anonymous_namespace_ *v2;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(this, 0);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 2) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 4, 0);
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 24) = &off_24ED36808;
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_DWORD *)this + 108) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_DWORD *)this + 98) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 116) = 1;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_DWORD *)this + 124) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 65) = 0;
  *((_DWORD *)this + 132) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_QWORD *)this + 72) = 0;
  *((_DWORD *)this + 146) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 142) = 0;
  *((_QWORD *)this + 103) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_QWORD *)this + 90) = off_24ED3A908;
  *(_OWORD *)((char *)this + 908) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_DWORD *)this + 276) = 0;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *(_QWORD *)((char *)this + 1108) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 288) = 0;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *(_QWORD *)((char *)this + 1156) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 300) = 0;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *(_QWORD *)((char *)this + 1204) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 312) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *(_QWORD *)((char *)this + 1252) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 324) = 0;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *(_QWORD *)((char *)this + 1300) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 352) = 0;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *(_QWORD *)((char *)this + 1412) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 89) = 0u;
  return this;
}

void re::TextureHandleTable::textureAt(re::TextureHandleTable *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  id v12;
  _BYTE v13[12];
  __int16 v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  id v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 11);
  if (v5 <= a2)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    *(_OWORD *)v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v13 = 136315906;
    *(_QWORD *)&v13[4] = "operator[]";
    v14 = 1024;
    v15 = 789;
    v16 = 2048;
    v17 = a2;
    v18 = 2048;
    v19 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *((_QWORD *)this + 13);
  v7 = v6 + 40 * a2;
  if (*(_BYTE *)(v7 + 32))
  {
    v8 = v6 + 40 * a2;
    v10 = *(unsigned __int8 *)(v8 + 16);
    v9 = v8 + 16;
    if (!v10)
    {
      re::TextureHandle::metalTexture((os_unfair_lock_s **)v7, v13);
      v11 = *(void **)v13;
      v12 = objc_msgSend(v11, sel_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_, objc_msgSend(v11, sel_pixelFormat), objc_msgSend(v11, sel_textureType), 0, objc_msgSend(*(id *)v13, sel_mipmapLevelCount), 0, objc_msgSend(v11, sel_arrayLength), *(unsigned int *)(v6 + 40 * a2 + 33));
      LOBYTE(v20[0]) = 1;
      v20[1] = v12;
      re::Optional<NS::SharedPtr<MTL::Texture>>::operator=(v9, v20);
      if (LOBYTE(v20[0]) && v20[1])

      if (v11)
    }
    *a3 = *(id *)(v6 + 40 * a2 + 24);
  }
  else
  {
    re::TextureHandle::metalTexture((os_unfair_lock_s **)v7, a3);
  }
}

uint64_t re::Optional<NS::SharedPtr<MTL::Texture>>::operator=(uint64_t a1, void **a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  void *v7;

  v3 = *(unsigned __int8 *)a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      v7 = *(void **)(a1 + 8);
      if (v7)
      {

        *(_QWORD *)(a1 + 8) = 0;
      }
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v6 = 1;
      else
        v6 = v3 == 0;
      if (v6)
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 8), a2 + 1);
      }
      else
      {
        *(_BYTE *)a1 = 1;
        *(_QWORD *)(a1 + 8) = a2[1];
        a2[1] = 0;
      }
    }
  }
  return a1;
}

uint64_t *re::CollisionShapeAsset::assetType(re::CollisionShapeAsset *this)
{
  unsigned __int8 v1;

  {
    re::CollisionShapeAsset::assetType(void)::type = (uint64_t)"CollisionShape";
    qword_2558277A8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::CollisionShapeAsset::assetType(void)::type);
  }
  return &re::CollisionShapeAsset::assetType(void)::type;
}

uint64_t *re::PhysicsMaterialAsset::assetType(re::PhysicsMaterialAsset *this)
{
  unsigned __int8 v1;

  {
    re::PhysicsMaterialAsset::assetType(void)::type = (uint64_t)"PhysicsMaterial";
    qword_2558277C8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::PhysicsMaterialAsset::assetType(void)::type);
  }
  return &re::PhysicsMaterialAsset::assetType(void)::type;
}

uint64_t *re::IndexedTriangleMeshAsset::assetType(re::IndexedTriangleMeshAsset *this)
{
  unsigned __int8 v1;

  {
    re::IndexedTriangleMeshAsset::assetType(void)::type = (uint64_t)"IndexedTriangleMesh";
    qword_2558277E8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::IndexedTriangleMeshAsset::assetType(void)::type);
  }
  return &re::IndexedTriangleMeshAsset::assetType(void)::type;
}

uint64_t *re::allocInfo_CollisionShapeAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541024A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541024A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102608, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254102618 = 0;
    qword_254102628 = 0;
    qword_254102630 = 0xFFFFFFFFLL;
    qword_254102608 = (uint64_t)&off_24ED7DAA8;
    qword_254102638 = (uint64_t)"CollisionShapeAsset";
    dword_254102640 = 0;
    xmmword_254102648 = 0u;
    unk_254102658 = 0u;
    xmmword_254102668 = 0u;
    qword_254102678 = 0;
    __cxa_guard_release(&qword_2541024A8);
  }
  return &qword_254102608;
}

void re::initInfo_CollisionShapeAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const char *v18;
  unint64_t v19;
  const char *v20;

  *(_QWORD *)&v17 = 0x601D4512AD02B902;
  *((_QWORD *)&v17 + 1) = "CollisionShapeAsset";
  re::StringID::destroyString((re::StringID *)&v17);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_2541024A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541024A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = atomic_load((unsigned __int8 *)&qword_2541024F0);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2541024F0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102548, 0);
        *(uint64_t *)((char *)&qword_254102558 + 6) = 0;
        qword_254102558 = 0;
        *(_QWORD *)&xmmword_254102568 = 0;
        *((_QWORD *)&xmmword_254102568 + 1) = 0xFFFFFFFFLL;
        qword_254102548 = (uint64_t)&off_24ED30800;
        qword_254102580 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254102578);
        __cxa_guard_release(&qword_2541024F0);
      }
      if ((_MergedGlobals_95 & 1) == 0)
      {
        _MergedGlobals_95 = 1;
        v8 = re::introspect_CollisionShapeData((re::IntrospectionBase **)1);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102548, 0);
        qword_254102558 = 0x800000001;
        dword_254102560 = 8;
        word_254102564 = 0;
        *(_QWORD *)&xmmword_254102568 = 0;
        *((_QWORD *)&xmmword_254102568 + 1) = 0xFFFFFFFFLL;
        qword_254102548 = (uint64_t)&off_24ED30800;
        qword_254102578 = v8;
        qword_254102580 = 0;
        re::IntrospectionRegistry::add(v9, v10);
        re::getPrettyTypeName((re *)&qword_254102548, (const re::IntrospectionBase *)&v17);
        if ((BYTE8(v17) & 1) != 0)
          v11 = v18;
        else
          v11 = (char *)&v17 + 9;
        if ((_QWORD)v17 && (BYTE8(v17) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v17 + 40))();
        if (v19 >> 1 == 94623636 && (v20 == "char*" || !strcmp(v20, "char*")))
        {
          v12 = v17;
        }
        else
        {
          v17 = *(_OWORD *)(v8 + 32);
          v12 = v16;
        }
        xmmword_254102568 = v12;
        re::StringID::destroyString((re::StringID *)&v19);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_data";
      *(_QWORD *)(v13 + 16) = &qword_254102548;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 1;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254102498 = v13;
      __cxa_guard_release(&qword_2541024A0);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254102498;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CollisionShapeAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CollisionShapeAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CollisionShapeAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CollisionShapeAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v15;
}

void re::internal::defaultConstruct<re::CollisionShapeAsset>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

_QWORD *re::internal::defaultConstructV2<re::CollisionShapeAsset>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

uint64_t *re::allocInfo_PhysicsMaterialAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541024C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541024C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102680, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254102690 = 0;
    qword_2541026A0 = 0;
    qword_2541026A8 = 0xFFFFFFFFLL;
    qword_254102680 = (uint64_t)&off_24ED7DAA8;
    qword_2541026B0 = (uint64_t)"PhysicsMaterialAsset";
    dword_2541026B8 = 0;
    xmmword_2541026C0 = 0u;
    unk_2541026D0 = 0u;
    xmmword_2541026E0 = 0u;
    qword_2541026F0 = 0;
    __cxa_guard_release(&qword_2541024C0);
  }
  return &qword_254102680;
}

void re::initInfo_PhysicsMaterialAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const char *v20;
  unint64_t v21;
  char *__s1;

  *(_QWORD *)&v19 = 0xD183AEF73ADBE44;
  *((_QWORD *)&v19 + 1) = "PhysicsMaterialAsset";
  re::StringID::destroyString((re::StringID *)&v19);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2541024B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541024B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = atomic_load((unsigned __int8 *)&qword_2541024F8);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2541024F8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102588, 0);
        *(uint64_t *)((char *)&qword_254102598 + 6) = 0;
        qword_254102598 = 0;
        *(_QWORD *)&xmmword_2541025A8 = 0;
        *((_QWORD *)&xmmword_2541025A8 + 1) = 0xFFFFFFFFLL;
        qword_254102588 = (uint64_t)&off_24ED30800;
        qword_2541025C0 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541025B8);
        __cxa_guard_release(&qword_2541024F8);
      }
      if ((byte_254102491 & 1) == 0)
      {
        byte_254102491 = 1;
        v8 = re::introspect_PhysicsMaterial((re::IntrospectionBase **)1);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102588, 0);
        qword_254102598 = 0x800000001;
        dword_2541025A0 = 8;
        word_2541025A4 = 0;
        *(_QWORD *)&xmmword_2541025A8 = 0;
        *((_QWORD *)&xmmword_2541025A8 + 1) = 0xFFFFFFFFLL;
        qword_254102588 = (uint64_t)&off_24ED30800;
        qword_2541025B8 = v8;
        qword_2541025C0 = 0;
        re::IntrospectionRegistry::add(v9, v10);
        re::getPrettyTypeName((re *)&qword_254102588, (const re::IntrospectionBase *)&v19);
        if ((BYTE8(v19) & 1) != 0)
          v11 = v20;
        else
          v11 = (char *)&v19 + 9;
        if ((_QWORD)v19 && (BYTE8(v19) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v19 + 40))();
        if (v21 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
        {
          v12 = v19;
        }
        else
        {
          v19 = *(_OWORD *)(v8 + 32);
          v12 = v18;
        }
        xmmword_2541025A8 = v12;
        re::StringID::destroyString((re::StringID *)&v21);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_data";
      *(_QWORD *)(v13 + 16) = &qword_254102588;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 1;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254102538 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 5;
      *(_QWORD *)(v15 + 8) = "m_material";
      *(_QWORD *)(v15 + 16) = "m_data";
      qword_254102540 = v15;
      __cxa_guard_release(&qword_2541024B8);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254102538;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::PhysicsMaterialAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::PhysicsMaterialAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::PhysicsMaterialAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::PhysicsMaterialAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v17;
}

void re::internal::defaultConstruct<re::PhysicsMaterialAsset>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

_QWORD *re::internal::defaultConstructV2<re::PhysicsMaterialAsset>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

uint64_t *re::allocInfo_IndexedTriangleMeshAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541024E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541024E0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541026F8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254102708 = 0;
    qword_254102718 = 0;
    qword_254102720 = 0xFFFFFFFFLL;
    qword_2541026F8 = (uint64_t)&off_24ED7DAA8;
    qword_254102728 = (uint64_t)"IndexedTriangleMeshAsset";
    dword_254102730 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254102768 = 0;
    __cxa_guard_release(&qword_2541024E0);
  }
  return &qword_2541026F8;
}

void re::initInfo_IndexedTriangleMeshAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const char *v18;
  unint64_t v19;
  const char *v20;

  *(_QWORD *)&v17 = 0xA2432DB9E2F0D614;
  *((_QWORD *)&v17 + 1) = "IndexedTriangleMeshAsset";
  re::StringID::destroyString((re::StringID *)&v17);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_2541024D8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541024D8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = atomic_load((unsigned __int8 *)&qword_254102500);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254102500))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541025C8, 0);
        *(uint64_t *)((char *)&qword_2541025D8 + 6) = 0;
        qword_2541025D8 = 0;
        *(_QWORD *)&xmmword_2541025E8 = 0;
        *((_QWORD *)&xmmword_2541025E8 + 1) = 0xFFFFFFFFLL;
        qword_2541025C8 = (uint64_t)&off_24ED30800;
        qword_254102600 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541025F8);
        __cxa_guard_release(&qword_254102500);
      }
      if ((byte_254102492 & 1) == 0)
      {
        byte_254102492 = 1;
        v8 = re::introspect_IndexedTriangleMeshData((re::IntrospectionBase **)1);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541025C8, 0);
        qword_2541025D8 = 0x800000001;
        dword_2541025E0 = 8;
        word_2541025E4 = 0;
        *(_QWORD *)&xmmword_2541025E8 = 0;
        *((_QWORD *)&xmmword_2541025E8 + 1) = 0xFFFFFFFFLL;
        qword_2541025C8 = (uint64_t)&off_24ED30800;
        qword_2541025F8 = v8;
        qword_254102600 = 0;
        re::IntrospectionRegistry::add(v9, v10);
        re::getPrettyTypeName((re *)&qword_2541025C8, (const re::IntrospectionBase *)&v17);
        if ((BYTE8(v17) & 1) != 0)
          v11 = v18;
        else
          v11 = (char *)&v17 + 9;
        if ((_QWORD)v17 && (BYTE8(v17) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v17 + 40))();
        if (v19 >> 1 == 94623636 && (v20 == "char*" || !strcmp(v20, "char*")))
        {
          v12 = v17;
        }
        else
        {
          v17 = *(_OWORD *)(v8 + 32);
          v12 = v16;
        }
        xmmword_2541025E8 = v12;
        re::StringID::destroyString((re::StringID *)&v19);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_data";
      *(_QWORD *)(v13 + 16) = &qword_2541025C8;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 1;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541024D0 = v13;
      __cxa_guard_release(&qword_2541024D8);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541024D0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IndexedTriangleMeshAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IndexedTriangleMeshAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IndexedTriangleMeshAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IndexedTriangleMeshAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v15;
}

void re::internal::defaultConstruct<re::IndexedTriangleMeshAsset>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

_QWORD *re::internal::defaultConstructV2<re::IndexedTriangleMeshAsset>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

uint64_t re::CollisionShapeAssetLoader::introspectionType(re::CollisionShapeAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254102510);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254102510))
  {
    qword_254102508 = re::internal::getOrCreateInfo((re::internal *)"CollisionShapeAsset", (uint64_t (*)(re::internal *))re::allocInfo_CollisionShapeAsset, (re::IntrospectionBase *(*)(void))re::initInfo_CollisionShapeAsset, (void (*)(re::IntrospectionBase *))&unk_2541024B0, 0);
    __cxa_guard_release(&qword_254102510);
  }
  return qword_254102508;
}

uint64_t re::CollisionShapeAssetLoader::registerAsset(re::CollisionShapeAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t *v8;
  __n128 v9;
  __n128 v10;
  uint64_t result;
  uint64_t v12;
  re::AssetHandle *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if (v5 > 0xC)
    goto LABEL_4;
  if (((1 << v5) & 0x1B7E) != 0)
  {
    this = (re::CollisionShapeAssetLoader *)re::AssetLoader::registerAsset(this, a2, a3);
    v7 = (uint64_t)this;
    if (!(_DWORD)this)
      goto LABEL_4;
    return v7;
  }
  if (v5 != 7)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected collision shape type.", "!\"Unreachable code\"", "registerAsset", 133);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v12 = *(_QWORD *)(v4 + 24);
  if (!v12)
    goto LABEL_4;
  v7 = 0;
  v13 = (re::AssetHandle *)(*(_QWORD *)(v4 + 32) + 48);
  v14 = 80 * v12;
  do
  {
    v15 = *((_QWORD *)v13 + 1);
    if (!v15)
      goto LABEL_16;
    v16 = atomic_load((unsigned int *)(v15 + 704));
    if (v16 == 3)
    {
      v7 = 2;
      goto LABEL_18;
    }
    v17 = *((_QWORD *)v13 + 1);
    if (!v17 || (v18 = atomic_load((unsigned int *)(v17 + 704)), v18 != 2))
    {
LABEL_16:
      re::AssetHandle::loadAsync(v13);
      if (!(_DWORD)v7)
        v7 = 1;
    }
LABEL_18:
    v13 = (re::AssetHandle *)((char *)v13 + 80);
    v14 -= 80;
  }
  while (v14);
  if (!(_DWORD)v7)
  {
    if (*(_QWORD *)(v4 + 24))
    {
      v19 = re::FixedArray<re::GeometricObjectData>::operator[](v4 + 16);
      v20 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 24);
      if ((*((_QWORD *)a3 + 13) & 1) != 0)
        v21 = (char *)*((_QWORD *)a3 + 14);
      else
        v21 = (char *)a3 + 105;
      (*(void (**)(_QWORD *__return_ptr, _QWORD, char *))(*(_QWORD *)v20 + 8))(v25, *(_QWORD *)(*(_QWORD *)(v19 + 56) + 24), v21);
      v22 = *(_QWORD *)(v4 + 24);
      if (v22)
      {
        v23 = 80 * v22;
        v24 = *(_QWORD *)(v4 + 32) + 48;
        do
        {
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v20 + 288))(v20, v25, v24);
          v24 += 80;
          v23 -= 80;
        }
        while (v23);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v25);
    }
LABEL_4:
    if (*((_QWORD *)a2 + 1))
    {
      return 0;
    }
    else
    {
      v8 = re::globalAllocators(this);
      return re::convertFromSerializable(*(re **)a2, (const re::CollisionShapeData *)(a2 + 8), (re::CollisionShape **)v8[2], (re::Allocator *)v8[2], 0, v9, v10);
    }
  }
  return v7;
}

uint64_t re::FixedArray<re::GeometricObjectData>::operator[](uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 8))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16);
}

uint64_t *re::CollisionShapeAssetLoader::unregisterAsset(re::CollisionShapeAssetLoader *this, _QWORD *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t *result;
  void (***v5)(_QWORD);
  uint64_t v6;

  result = re::globalAllocators(this);
  v5 = (void (***)(_QWORD))a2[1];
  if (v5)
  {
    v6 = result[2];
    (**v5)(a2[1]);
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
    a2[1] = 0;
  }
  return result;
}

uint64_t re::CollisionShapeAssetLoader::unloadAsset(re::CollisionShapeAssetLoader *this, _QWORD *a2)
{
  uint64_t *v3;
  void (***v4)(_QWORD);
  uint64_t v5;
  uint64_t *v6;

  v3 = re::globalAllocators(this);
  v4 = (void (***)(_QWORD))*a2;
  if (*a2)
  {
    v5 = v3[2];
    (**v4)(*a2);
    v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v5 + 40))(v5, v4);
    *a2 = 0;
  }
  v6 = re::globalAllocators((re *)v3);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6[2] + 40))(v6[2], a2);
}

BOOL re::CollisionShapeAssetLoader::isSupportedSourceExtension(re::CollisionShapeAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "recollisionshape") == 0;
}

uint64_t re::PhysicsMaterialAssetLoader::introspectionType(re::PhysicsMaterialAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254102520);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254102520))
  {
    qword_254102518 = re::internal::getOrCreateInfo((re::internal *)"PhysicsMaterialAsset", (uint64_t (*)(re::internal *))re::allocInfo_PhysicsMaterialAsset, (re::IntrospectionBase *(*)(void))re::initInfo_PhysicsMaterialAsset, (void (*)(re::IntrospectionBase *))&unk_2541024C8, 0);
    __cxa_guard_release(&qword_254102520);
  }
  return qword_254102518;
}

uint64_t *re::PhysicsMaterialAssetLoader::allocateSampleAsset(re::PhysicsMaterialAssetLoader *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory
                                                                        + 16))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, 0.1, 0.5, 0.5);
  v2 = re::globalAllocators((re *)v1);
  v3 = v2[2];
  v4 = re::globalAllocators((re *)v2);
  v5 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 16, 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, 24, 8);
  if (v6)
  {
    v7 = *(_DWORD *)(v1 + 16);
    *(_QWORD *)v6 = &off_24ED7E200;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v1 + 8);
    *(_DWORD *)(v6 + 16) = v7;
  }
  *v5 = v6;
  v5[1] = v1;
  return v5;
}

uint64_t re::PhysicsMaterialAssetLoader::unloadAsset(re::PhysicsMaterialAssetLoader *this, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  uint64_t *v7;

  v3 = re::globalAllocators(this);
  v4 = v3[2];
  v5 = (void (***)(_QWORD))*a2;
  if (*a2)
  {
    (**v5)(*a2);
    v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v5);
    *a2 = 0;
  }
  v6 = (void (***)(_QWORD))a2[1];
  if (v6)
  {
    (**v6)(a2[1]);
    v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v6);
    a2[1] = 0;
  }
  v7 = re::globalAllocators((re *)v3);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7[2] + 40))(v7[2], a2);
}

BOOL re::PhysicsMaterialAssetLoader::isSupportedSourceExtension(re::PhysicsMaterialAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "rephysicsmaterial") == 0;
}

uint64_t re::PhysicsMaterialAssetLoader::registerAsset(re::PhysicsMaterialAssetLoader *this, _QWORD *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t *v4;

  if (!a2[1])
  {
    v4 = re::globalAllocators(this);
    a2[1] = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory
                                                                             + 16))(re::PhysicsFactory::m_defaultFactory, v4[2], *(float *)(*a2 + 8), *(float *)(*a2 + 12), *(float *)(*a2 + 16));
  }
  return 0;
}

uint64_t re::IndexedTriangleMeshAssetLoader::introspectionType(re::IndexedTriangleMeshAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254102530);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254102530))
  {
    qword_254102528 = re::internal::getOrCreateInfo((re::internal *)"IndexedTriangleMeshAsset", (uint64_t (*)(re::internal *))re::allocInfo_IndexedTriangleMeshAsset, (re::IntrospectionBase *(*)(void))re::initInfo_IndexedTriangleMeshAsset, (void (*)(re::IntrospectionBase *))&unk_2541024E8, 0);
    __cxa_guard_release(&qword_254102530);
  }
  return qword_254102528;
}

uint64_t re::IndexedTriangleMeshAssetLoader::unloadAsset(re::IndexedTriangleMeshAssetLoader *this, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  uint64_t *v9;

  v3 = re::globalAllocators(this);
  v4 = v3[2];
  v5 = (_QWORD *)*a2;
  if (*a2)
  {
    v6 = v5[6];
    if (v6)
    {
      if (v5[7])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, v5[8]);
        v5[7] = 0;
        v5[8] = 0;
      }
      v5[6] = 0;
    }
    v7 = v5[3];
    if (v7)
    {
      if (v5[4])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, v5[5]);
        v5[4] = 0;
        v5[5] = 0;
      }
      v5[3] = 0;
    }
    if (*v5)
    {
      if (v5[1])
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[2]);
        v5[1] = 0;
        v5[2] = 0;
      }
      *v5 = 0;
    }
    v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, v5);
    *a2 = 0;
  }
  v8 = (void (***)(_QWORD))a2[1];
  if (v8)
  {
    (**v8)(a2[1]);
    v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v8);
    a2[1] = 0;
  }
  v9 = re::globalAllocators((re *)v3);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v9[2] + 40))(v9[2], a2);
}

BOOL re::IndexedTriangleMeshAssetLoader::isSupportedSourceExtension(re::IndexedTriangleMeshAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "recollisionmesh") == 0;
}

uint64_t re::IndexedTriangleMeshAssetLoader::createRuntimeData(re *a1, uint64_t *a2)
{
  uint64_t *v3;

  if (!a2[1])
  {
    v3 = re::globalAllocators(a1);
    a2[1] = re::convertFromSerializable(*a2, v3[2]);
  }
  return 1;
}

uint64_t *re::IndexedTriangleMeshAssetLoader::allocateSampleAsset(re::IndexedTriangleMeshAssetLoader *this)
{
  const re::IndexedTriangleMesh *v1;
  re *v2;
  re::Allocator *v3;
  uint64_t v4;
  uint64_t *result;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _OWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = xmmword_2260FE9C0;
  v10[1] = unk_2260FE9D0;
  v10[2] = xmmword_2260FE9E0;
  v10[3] = unk_2260FE9F0;
  v8 = 0x3000300010000;
  v9 = 131073;
  v7 = 1;
  v1 = (const re::IndexedTriangleMesh *)re::globalAllocators(this)[2];
  v6 = 1;
  v4 = re::convertToSerializable(v2, v1, v3);
  result = (uint64_t *)(*(uint64_t (**)(const re::IndexedTriangleMesh *, uint64_t, uint64_t))(*(_QWORD *)v1 + 32))(v1, 16, 8);
  *result = v4;
  result[1] = (uint64_t)v2;
  return result;
}

void re::CollisionShapeAssetLoader::~CollisionShapeAssetLoader(re::CollisionShapeAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

void re::PhysicsMaterialAssetLoader::~PhysicsMaterialAssetLoader(re::PhysicsMaterialAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

void re::IndexedTriangleMeshAssetLoader::~IndexedTriangleMeshAssetLoader(re::IndexedTriangleMeshAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::Drawable::Drawable(uint64_t a1, id a2, uint64_t *a3, uint64_t a4, _QWORD *a5, int a6)
{
  uint64_t v9;
  id *v10;
  id *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v17;

  *(_QWORD *)a1 = a4;
  *(_DWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a2;
  v9 = *a3;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = (id *)(a1 + 56);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (*a5)
  {
    v11 = (id *)(a1 + 64);
    re::IOSurfaceWrapper::SharedEvent::createSharedEvent(&v17);
    if (v10 != &v17)
    {
      v12 = v17;
      v17 = 0;
      v13 = *v10;
      *v10 = v12;

    }
    re::IOSurfaceWrapper::SharedEventListener::createSharedEventListenerWithQueue(a5, &v17);
    if (v11 != &v17)
    {
      v14 = v17;
      v17 = 0;
      v15 = *v11;
      *v11 = v14;

    }
  }
  return a1;
}

void re::Drawable::~Drawable(re::Drawable *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;

  v3 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;

  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {

    *((_QWORD *)this + 2) = 0;
  }
}

void re::DrawableQueue::present(re::DrawableQueue *this, re::Drawable *a2, int a3)
{
  const re::ecs2::Component *v6;

  re::LocklessRingBuffer::writerReleaseBuffer(*((_QWORD *)this + 45), *((unsigned int *)a2 + 2), a3);
  if (*((_BYTE *)this + 46))
  {
    if (a3 && (v6 = (const re::ecs2::Component *)*((_QWORD *)this + 41)) != 0)
    {
      *((_DWORD *)v6 + 7) = *((_DWORD *)a2 + 2);
      re::ecs2::NetworkComponent::markDirty(*((re::ecs2::NetworkComponent **)this + 42), v6);
    }
    else
    {
      atomic_load((unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 45) + 32) + 16 * *((int *)a2 + 2) + 40));
      if (re::internal::enableSignposts(0, 0))
        kdebug_trace();
    }
  }
}

void re::DrawableQueue::checkAndGenerateMipmapsSynchronous(re::DrawableQueue *this, re::Drawable *a2)
{
  id *v2;
  uint64_t v3;
  re::ns *v5;
  id v6;
  uint64_t v7;
  re *v8;
  NSObject *v9;
  id v10;
  uint8_t buf[8];
  char v12;
  _BYTE v13[23];
  id v14;
  id v15;

  if (*((_BYTE *)this + 45))
  {
    v3 = *((_QWORD *)this + 7);
    v2 = (id *)((char *)this + 56);
    if (v3)
    {
      re::mtl::CommandQueue::makeCommandBuffer(v2, &v15);
      re::DynamicString::format((re::DynamicString *)"DrawableQueue MipmapGenCommandBuffer-%p", (re::DynamicString *)buf, a2);
      if ((v12 & 1) != 0)
        v5 = *(re::ns **)&v13[7];
      else
        v5 = (re::ns *)v13;
      re::ns::String::String((re::ns::String *)&v14, v5);
      objc_msgSend(v15, "setLabel:", v14);

      if (*(_QWORD *)buf && (v12 & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
      v6 = v15;
      v10 = v6;
      re::DrawableQueue::encodeMipmapsGenerationJob((uint64_t)v6, &v10, (uint64_t)a2);

      objc_msgSend(v15, "commit");
      objc_msgSend(v15, "waitUntilCompleted");
      re::mtl::CommandBuffer::error(&v15, buf);
      v7 = *(_QWORD *)buf;

      if (v7)
      {
        v9 = *re::graphicsLogObjects(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Failed to generate mip-maps for the drawable texture!", buf, 2u);
        }
      }

    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) CommandQueue is not initialized!", "m_sharedCommandQueue.isValid()", "checkAndGenerateMipmapsSynchronous", 540);
      _os_crash();
      __break(1u);
    }
  }
}

void re::Drawable::reclaimFromClient(re::Drawable *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int *v5;
  unsigned int v6;
  NSObject *v7;
  int v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)this + 360);
  v2 = *((int *)this + 2);
  v3 = atomic_load((unsigned int *)(*(_QWORD *)(v1 + 32) + 16 * v2 + 32));
  if (v3 == 1)
  {
    v5 = (unsigned int *)(*(_QWORD *)(v1 + 32) + 16 * v2 + 32);
    do
    {
      v6 = __ldaxr(v5);
      if (v6 != 1)
      {
        __clrex();
        return;
      }
    }
    while (__stlxr(0, v5));
    v7 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *((_DWORD *)this + 2);
      v9[0] = 67109120;
      v9[1] = v8;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Reclaimed drawable with idx: %d which was in writing state. This is unsafe. Make sure to present the acquired drawable before it goes out of scope", (uint8_t *)v9, 8u);
    }
  }
}

uint64_t re::DrawableQueue::DrawableQueue(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TextureCompressionType;
  id v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  signed int v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  char *v29;
  uint64_t v30;
  re *v31;
  uint64_t *v32;
  semaphore_t *v33;
  re *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  re::LocklessRingBuffer *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  int *v44;
  uint64_t v45;
  unsigned int *v46;
  id v47;
  id v48;
  uint64_t v49;
  char *v50;
  _OWORD v51[2];
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59[2];

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)v8 = &off_24ED3AD68;
  v9 = *(_OWORD *)a2;
  *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v8 + 24) = v9;
  objc_initWeak((id *)(v8 + 48), 0);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a3;
  v10 = 72;
  do
  {
    v11 = a1 + v10;
    *(_QWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = -1;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_BYTE *)(v11 + 48) = 0;
    v10 += 72;
    *(_QWORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 64) = 0;
  }
  while (v11 + 72 != a1 + 288);
  *(_DWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 292) = 256;
  *(_BYTE *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = -1;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 353) = 0u;
  v12 = *(id *)(a3 + 184);
  v59[0] = v12;
  if (*((_BYTE *)a2 + 22) && (objc_msgSend(v12, "supportsSharedTextureHandles") & 1) == 0)
  {
LABEL_45:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "!descriptor.shareable || device.supportsSharedTextureHandles()", "DrawableQueue", 97);
    _os_crash();
    __break(1u);
LABEL_46:
    __error();
    v44 = __error();
    re::internal::assertLog((re::internal *)5, v45, "assertion failure: '%s' (%s:line %i) Failed to mmap for DrawableQueue: %{errno}d", "region != ((void *)-1)", "DrawableQueue", 152, *v44);
    _os_crash();
    __break(1u);
LABEL_47:
    re::internal::assertLog((re::internal *)4, v42, "assertion failure: '%s' (%s:line %i) Failed to allocate memory for ring buffer", "m_localMem != nullptr", "DrawableQueue", 157);
    result = _os_crash();
    __break(1u);
    return result;
  }
  *(_BYTE *)(a1 + 293) = 1;
  v14 = a2[3];
  v15 = (int)a2[2];
  v57 = v15;
  v58 = v14;
  v56 = 0;
  TextureCompressionType = re::mtl::getTextureCompressionType(v59, &v56, &v57, &v58);
  v17 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  if ((objc_msgSend(v17, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v17, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v17, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v17, sel_setWidth_, *a2);
  objc_msgSend(v17, sel_setHeight_, a2[1]);
  objc_msgSend(v17, sel_setPixelFormat_, v15);
  if (*((_BYTE *)a2 + 20))
  {
    v18 = 32 - __clz(*a2);
    v19 = 32 - __clz(a2[1]);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
  }
  else
  {
    v20 = 1;
  }
  objc_msgSend(v17, sel_setMipmapLevelCount_, v20);
  objc_msgSend(v17, sel_setUsage_, v14);
  objc_msgSend(v17, sel_setStorageMode_, 0);
  v46 = a2;
  v21 = a2[4];
  if (v21 == 0xFFFF)
    v21 = 0;
  objc_msgSend(v17, sel_setResourceOptions_, v21);
  v22 = 0;
  v23 = 0;
  v24 = v17;
  do
  {
    v55 = 0;
    v54 = 0;
    if (!*((_BYTE *)v46 + 22))
    {
      re::mtl::Device::makeTexture(v17, v59, &v48);
      NS::SharedPtr<MTL::Texture>::operator=(&v55, &v48);
      v27 = v48;
      if (!v48)
        goto LABEL_23;
      goto LABEL_22;
    }
    re::mtl::Device::makeSharedTexture(v17, v59, &v48);
    NS::SharedPtr<MTL::Texture>::operator=(&v55, &v48);
    if (v48)

    v25 = objc_retainAutorelease(objc_msgSend(v55, sel_newSharedTextureHandle));
    v54 = objc_msgSend(v25, "ioSurface");
    if (v25)
    {
      v27 = v25;
LABEL_22:

    }
LABEL_23:
    v28 = v55;
    if (!v55)
    {
      re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) ", "texture.isValid()", "DrawableQueue", 142);
      _os_crash();
      __break(1u);
      goto LABEL_45;
    }
    re::DynamicString::format((re::DynamicString *)"DrawableQueueTexture-%p-%d", (re::DynamicString *)&v48, a1, v23);
    if ((v49 & 1) != 0)
      v29 = v50;
    else
      v29 = (char *)&v49 + 1;
    objc_msgSend(v28, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v29, 4));
    if (v48 && (v49 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v48 + 40))();
    v47 = 0;
    re::Drawable::Drawable((uint64_t)&v48, v55, &v54, a1, &v47, v23);
    v30 = a1 + v22;
    *(_QWORD *)(v30 + 72) = v48;
    *(_DWORD *)(v30 + 80) = v49;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + v22 + 88), (void **)&v50);
    *(_OWORD *)(v30 + 96) = v51[0];
    *(_OWORD *)(v30 + 105) = *(_OWORD *)((char *)v51 + 9);
    re::ObjCObject::operator=((id *)(a1 + v22 + 128), &v52);
    re::ObjCObject::operator=((id *)(a1 + v22 + 136), &v53);
    re::Drawable::~Drawable((re::Drawable *)&v48);

    v31 = (re *)v55;
    if (v55)

    ++v23;
    v22 += 72;
    v17 = v24;
  }
  while (v23 != 3);
  v32 = re::globalAllocators(v31);
  v33 = (semaphore_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32[2] + 32))(v32[2], 40, 8);
  v34 = (re *)re::LocklessRingBuffer::LocklessRingBuffer(v33);
  v35 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v34;
  if (v35)

  if (!*((_BYTE *)v46 + 22))
  {
    v39 = re::globalAllocators(v34);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[2] + 32))(v39[2], 368, 16);
    *(_OWORD *)v40 = 0u;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    *(_OWORD *)(v40 + 48) = 0u;
    *(_OWORD *)(v40 + 64) = 0u;
    *(_OWORD *)(v40 + 80) = 0u;
    *(_OWORD *)(v40 + 96) = 0u;
    *(_OWORD *)(v40 + 112) = 0u;
    *(_OWORD *)(v40 + 128) = 0u;
    *(_OWORD *)(v40 + 144) = 0u;
    *(_OWORD *)(v40 + 160) = 0u;
    *(_OWORD *)(v40 + 176) = 0u;
    *(_OWORD *)(v40 + 192) = 0u;
    *(_OWORD *)(v40 + 208) = 0u;
    *(_OWORD *)(v40 + 224) = 0u;
    *(_OWORD *)(v40 + 240) = 0u;
    *(_OWORD *)(v40 + 256) = 0u;
    *(_OWORD *)(v40 + 272) = 0u;
    *(_OWORD *)(v40 + 288) = 0u;
    *(_OWORD *)(v40 + 304) = 0u;
    *(_OWORD *)(v40 + 320) = 0u;
    *(_OWORD *)(v40 + 336) = 0u;
    *(_OWORD *)(v40 + 352) = 0u;
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v40, 0);
    *(_QWORD *)v40 = &off_24ED3AE08;
    *(_DWORD *)(v40 + 44) = 0;
    v41 = *(_QWORD *)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v40;
    if (!v41 || ((id)(v41 + 8), (v40 = *(_QWORD *)(a1 + 352)) != 0))
    {
      v38 = *(re::LocklessRingBuffer **)(a1 + 360);
      v37 = (void *)(v40 + 32);
      goto LABEL_41;
    }
    goto LABEL_47;
  }
  v36 = mmap(0, 0x150uLL, 3, 4097, -1, 0);
  if (v36 == (void *)-1)
    goto LABEL_46;
  v37 = v36;
  *(_QWORD *)(a1 + 344) = v36;
  v38 = *(re::LocklessRingBuffer **)(a1 + 360);
LABEL_41:
  re::LocklessRingBuffer::initializeIntoBuffer(v38, v37);
  atomic_store(1u, (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 32) + 8));
  *(_BYTE *)(a1 + 294) = 1;
  *(_BYTE *)(a1 + 296) = dyld_program_sdk_at_least() ^ 1;
  if (v17)

  return a1;
}

re::DrawableQueue *re::DrawableQueue::DrawableQueue(re::DrawableQueue *this, id *a2, id *a3, re::Allocator *a4)
{
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  int v22;
  re *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  re::AppleBuild *v28;
  unsigned __int8 v29;
  BOOL v31;
  const char *v33;
  char v34;
  id v35;
  uint64_t v36;
  id v37;
  int v38;
  void *v39;
  _OWORD v40[2];
  id v41;
  id v42;
  void *v43;

  ArcSharedObject::ArcSharedObject(this, 0);
  v8[2] = a4;
  *v8 = &off_24ED3AD68;
  *((_DWORD *)this + 6) = objc_msgSend(*a2, "width");
  *((_DWORD *)this + 7) = objc_msgSend(*a2, "height");
  *((_DWORD *)this + 8) = objc_msgSend(*a2, "pixelFormat");
  *(_QWORD *)((char *)this + 36) = 0xFFFF00000000;
  *((_DWORD *)this + 11) = 0x10000;
  objc_initWeak((id *)this + 6, 0);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a3;
  v9 = 72;
  do
  {
    v10 = (char *)this + v9;
    *(_QWORD *)v10 = 0;
    *((_DWORD *)v10 + 2) = -1;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 4) = 0;
    *((_QWORD *)v10 + 5) = 0;
    v10[48] = 0;
    v9 += 72;
    *((_QWORD *)v10 + 7) = 0;
    *((_QWORD *)v10 + 8) = 0;
  }
  while (v10 + 72 != (char *)this + 288);
  *((_DWORD *)this + 72) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 80) = -1;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 353) = 0u;
  *((_DWORD *)this + 73) = 256;
  if ((objc_msgSend(a3[23], "supportsSharedTextureHandles") & 1) == 0)
  {
LABEL_31:
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) ", "device.supportsSharedTextureHandles()", "DrawableQueue", 189);
    _os_crash();
    __break(1u);
LABEL_32:
    re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) ", "payload.drawableCount() == kQueueLength", "DrawableQueue", 190);
    _os_crash();
    __break(1u);
LABEL_33:
    re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) ", "sharedSemaphore != 0", "DrawableQueue", 210);
    _os_crash();
    __break(1u);
LABEL_34:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Failed to map xpc_shmem for DrawableQueue", "m_sharedMem", "DrawableQueue", 213);
    _os_crash();
    __break(1u);
LABEL_35:
    v28 = (re::AppleBuild *)__cxa_guard_acquire(&qword_254102778);
    if ((_DWORD)v28)
    {
      re::Defaults::BOOLValue((re::Defaults *)"allowSharingEyeTransformsViaDrawableQueue", v33, (char *)&v37);
      if ((_BYTE)v37)
        v34 = BYTE1(v37);
      else
        v34 = 0;
      _MergedGlobals_96 = v34;
      __cxa_guard_release(&qword_254102778);
    }
    goto LABEL_20;
  }
  if (re::DrawableQueuePayload::drawableCount(a2) != 3)
    goto LABEL_32;
  v13 = 0;
  for (i = 0; i != 3; ++i)
  {
    v43 = 0;
    v37 = objc_msgSend(a3[23], sel_newSharedTextureWithHandle_, re::DrawableQueuePayload::textureHandle(a2, i));
    NS::SharedPtr<MTL::Texture>::operator=(&v43, &v37);
    if (v37)

    if (!v43)
    {
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) ", "texture.isValid()", "DrawableQueue", 198);
      _os_crash();
      __break(1u);
LABEL_28:
      re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "texture->width() == m_descriptor.width", "DrawableQueue", 199);
      _os_crash();
      __break(1u);
LABEL_29:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "texture->height() == m_descriptor.height", "DrawableQueue", 200);
      _os_crash();
      __break(1u);
LABEL_30:
      re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "texture->pixelFormat() == (MTL::PixelFormat)m_descriptor.pixelFormat", "DrawableQueue", 201);
      _os_crash();
      __break(1u);
      goto LABEL_31;
    }
    if (objc_msgSend(v43, sel_width) != (id)*((unsigned int *)this + 6))
      goto LABEL_28;
    if (objc_msgSend(v43, sel_height) != (id)*((unsigned int *)this + 7))
      goto LABEL_29;
    if (objc_msgSend(v43, sel_pixelFormat) != (id)*((int *)this + 8))
      goto LABEL_30;
    v35 = 0;
    v36 = 0;
    re::Drawable::Drawable((uint64_t)&v37, v43, &v36, (uint64_t)this, &v35, i);
    v19 = (char *)this + v13;
    *((_QWORD *)v19 + 9) = v37;
    *((_DWORD *)v19 + 20) = v38;
    NS::SharedPtr<MTL::Texture>::operator=((void **)((char *)this + v13 + 88), &v39);
    *((_OWORD *)v19 + 6) = v40[0];
    *(_OWORD *)(v19 + 105) = *(_OWORD *)((char *)v40 + 9);
    re::ObjCObject::operator=((id *)((char *)this + v13 + 128), &v41);
    re::ObjCObject::operator=((id *)((char *)this + v13 + 136), &v42);
    re::Drawable::~Drawable((re::Drawable *)&v37);

    if (v43)
    v13 += 72;
  }
  v20 = objc_msgSend(*a2, "machSemaphore");
  if (!v20)
    goto LABEL_33;
  v22 = v20;
  v23 = (re *)re::DrawableQueuePayload::mapQueueStateShmem(a2);
  *((_QWORD *)this + 43) = v23;
  if (!v23)
    goto LABEL_34;
  v25 = re::globalAllocators(v23);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 40, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v26, 0);
  *(_QWORD *)v26 = &off_24ED39120;
  *(_DWORD *)(v26 + 24) = v22;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = v26;
  if (v27)
  {

    v26 = *((_QWORD *)this + 45);
  }
  *(_QWORD *)(v26 + 32) = *((_QWORD *)this + 43);
  *((_BYTE *)this + 295) = 1;
  v28 = (re::AppleBuild *)objc_msgSend(*a2, "allowPixelFormatConversion");
  *((_BYTE *)this + 296) = (_BYTE)v28;
  v29 = atomic_load((unsigned __int8 *)&qword_254102778);
  if ((v29 & 1) == 0)
    goto LABEL_35;
LABEL_20:
  v31 = *re::AppleBuild::get(v28) == 1 && _MergedGlobals_96 != 0;
  *((_BYTE *)this + 368) = v31;
  return this;
}

int *re::AppleBuild::get(re::AppleBuild *this)
{
  unsigned __int8 v1;

  {
    re::AppleBuild::get(void)::build = 0;
    re::AppleBuild::determineBuildType((re::AppleBuild *)&re::AppleBuild::get(void)::build);
  }
  return &re::AppleBuild::get(void)::build;
}

void re::DrawableQueue::~DrawableQueue(re::DrawableQueue *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  re *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED3AD68;
  if (*((_BYTE *)this + 294))
  {
    atomic_store(0, (unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 45) + 32) + 8));
    *((_BYTE *)this + 294) = 0;
  }
  v2 = *((_QWORD *)this + 45);
  if (v2)
  {

    *((_QWORD *)this + 45) = 0;
  }
  v3 = *((_QWORD *)this + 44);
  if (v3)
  {

    *((_QWORD *)this + 44) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 43);
  if (v4)
  {
    v5 = (re *)munmap(v4, 0x150uLL);
    if ((_DWORD)v5)
    {
      v6 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v11 = *__error();
        v12[0] = 67109120;
        v12[1] = v11;
        _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Failed to munmap shmem for DrawableQueue: %{errno}d", (uint8_t *)v12, 8u);
      }
    }
    *((_QWORD *)this + 43) = 0;
  }
  v7 = *((_QWORD *)this + 45);
  if (v7)
  {

    *((_QWORD *)this + 45) = 0;
  }
  v8 = *((_QWORD *)this + 44);
  if (v8)
  {

    *((_QWORD *)this + 44) = 0;
  }
  v9 = *((_QWORD *)this + 42);
  if (v9)
  {

    *((_QWORD *)this + 42) = 0;
  }
  v10 = 216;
  do
  {
    re::Drawable::~Drawable((re::DrawableQueue *)((char *)this + v10));
    v10 -= 72;
  }
  while (v10);

  objc_destroyWeak((id *)this + 6);
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::DrawableQueue::~DrawableQueue(this);
  JUMPOUT(0x2276933B8);
}

void re::DrawableQueue::setActiveRealityRendererScene(re::DrawableQueue *this, uint64_t a2)
{
  int v2;
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  re::DrawableQueue *v7;
  uint64_t v8;

  v2 = a2;
  v8 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 38) = a2;
  v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109376;
    v5[1] = v2;
    v6 = 2048;
    v7 = this;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "DrawableQueue::setActiveRealityRendererScene %d for drawableQueue instance %p", (uint8_t *)v5, 0x12u);
  }
  if (!*((_BYTE *)this + 294))
  {
    atomic_store(1u, (unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 45) + 32) + 8));
    *((_BYTE *)this + 294) = 1;
  }
}

void re::DrawableQueue::afterFrameUpdate(re::DrawableQueue *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = *(_QWORD *)(re::RenderFrameBox::get(*(_QWORD *)(*((_QWORD *)this + 8) + 104) + 344, 0xFFFFFFFFFFFFFFFuLL)
                 + 368) & 0xFFFFFFFFFFFFFFFLL;
  os_unfair_lock_lock((os_unfair_lock_t)this + 72);
  v3 = 0;
  v4 = (char *)this + 120;
  do
  {
    if (!*v4)
      goto LABEL_7;
    if (*((_QWORD *)v4 - 1))
    {
      if ((unint64_t)(v2 - *((_QWORD *)v4 - 2)) < 2)
        goto LABEL_7;
      *((_QWORD *)v4 - 1) = 0;
    }
    *v4 = 0;
    re::LocklessRingBuffer::readerReleaseBuffer(*((_QWORD *)this + 45), v3);
LABEL_7:
    ++v3;
    v4 += 72;
  }
  while (v3 != 3);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
  if (*((_BYTE *)this + 368))
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 6);
    if (WeakRetained)
    {
      v6 = WeakRetained;
      v7 = (uint64_t)WeakRetained - 8;
      v8 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 45) + 32) + 12));
      v9 = v8 ^ 1;
      re::ecs2::CustomMatrixCameraComponent::localEyePoseMatrix((uint64_t)WeakRetained - 8, 1, (uint64_t)&v18);
      v10 = v19;
      v11 = v20;
      v12 = v21;
      v13 = (_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 45) + 32) + (v9 << 7));
      v13[5] = v18;
      v13[6] = v10;
      v13[7] = v11;
      v13[8] = v12;
      re::ecs2::CustomMatrixCameraComponent::localEyePoseMatrix(v7, 2, (uint64_t)&v18);
      v14 = v19;
      v15 = v20;
      v16 = v21;
      v17 = (_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 45) + 32) + (v9 << 7));
      v17[9] = v18;
      v17[10] = v14;
      v17[11] = v15;
      v17[12] = v16;
      atomic_store(v9, (unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 45) + 32) + 12));

    }
  }
}

uint64_t re::DrawableQueue::latestPresentableDrawable(re::DrawableQueue *this, re::RenderFrame *a2)
{
  int v4;
  re::LocklessRingBuffer *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int8 *)this + 295);
  v5 = (re::LocklessRingBuffer *)*((_QWORD *)this + 45);
  if (v4)
    v6 = re::LocklessRingBuffer::readerAcquireBuffer(v5);
  else
    v6 = re::LocklessRingBuffer::readerAcquireAnyWrittenBuffer(v5);
  v7 = v6;
  v8 = *(_QWORD *)(re::RenderFrameBox::get(*(_QWORD *)(*((_QWORD *)this + 8) + 104) + 344, 0xFFFFFFFFFFFFFFFuLL)
                 + 368) & 0xFFFFFFFFFFFFFFFLL;
  if (v7 > 2)
  {
    if ((*((_DWORD *)this + 80) & 0x80000000) == 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)this + 72);
      v7 = *((_DWORD *)this + 80);
      v10 = (char *)this + 72 * (int)v7;
      v11 = *((_QWORD *)v10 + 14) + 1;
      *((_QWORD *)v10 + 13) = v8;
      *((_QWORD *)v10 + 14) = v11;
      os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
    }
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 72);
    v9 = (char *)this + 72 * v7;
    v9[120] = 1;
    *((_QWORD *)v9 + 13) = v8;
    *((_QWORD *)v9 + 14) = 1;
    *((_DWORD *)this + 80) = v7;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 72);
    re::LocklessRingBuffer::readerReleaseAnyWrittenBuffer(*((_QWORD *)this + 45));
  }
  if (*((_DWORD *)this + 80) == -1)
    return 0;
  v12 = atomic_load((unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 45) + 32) + 16 * (int)v7 + 40));
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (v12 == *((_QWORD *)this + 39))
  {
    v13 = 0;
  }
  else
  {
    *((_QWORD *)this + 39) = v12;
    v13 = 1;
  }
  *((_BYTE *)this + 292) = v13;
  v17 = re::globalAllocators((re *)(char *)this + 8)[2];
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 32, 0);
  *(_QWORD *)v15 = &off_24ED3ADB0;
  *(_QWORD *)(v15 + 8) = this;
  *(_QWORD *)(v15 + 16) = v8;
  *(_DWORD *)(v15 + 24) = v7;
  v18 = (_BYTE *)v15;
  re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add((re::RenderFrame *)((char *)a2 + 3872), (uint64_t)v16);
  if (v18)
  {
    (**(void (***)(_BYTE *))v18)(v18);
    if (v18 != v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  }
  return (uint64_t)this + 72 * *((int *)this + 80) + 72;
}

uint64_t re::DrawableQueue::nextDrawable(uint64_t a1, uint64_t a2)
{
  double v4;
  char v5;
  unsigned int v6;
  _BOOL4 v7;

  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (*(_BYTE *)a2)
  {
    v4 = *(float *)(a2 + 4);
    v5 = 1;
  }
  else
  {
    v4 = 0.0;
    v5 = 0;
  }
  v6 = re::LocklessRingBuffer::writerAcquireBuffer(*(_QWORD *)(a1 + 360), *(uint64_t *)&v4, v5);
  v7 = re::internal::enableSignposts(0, 0);
  if (v6 < 3)
  {
    if (v7)
      kdebug_trace();
    return a1 + 72 * v6 + 72;
  }
  else
  {
    if (v7)
      kdebug_trace();
    return 0;
  }
}

void re::DrawableQueue::makeSharedResourcePayload(re::DrawableQueue *this@<X0>, REDrawableQueuePayload **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t i;
  void *v8;
  id v9;
  uint64_t v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  if ((objc_msgSend(*(id *)(*((_QWORD *)this + 8) + 184), "supportsSharedTextureHandles") & 1) == 0)
  {
    re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) ", "m_renderManager.renderDevice().supportsSharedTextureHandles()", "makeSharedResourcePayload", 514);
    _os_crash();
    __break(1u);
  }
  v5 = 0;
  memset(v10, 0, 24);
  v6 = (id *)((char *)this + 88);
  do
  {
    v9 = objc_msgSend(*v6, sel_newSharedTextureHandle);
    NS::SharedPtr<MTL::Texture>::operator=((void **)&v10[v5], &v9);
    if (v9)

    ++v5;
    v6 += 9;
  }
  while (v5 != 3);
  re::DrawableQueuePayload::make(*((unsigned int *)this + 6), *((unsigned int *)this + 7), *((_DWORD *)this + 8), v10, 3, *((unsigned __int8 *)this + 296), *(unsigned int *)(*((_QWORD *)this + 45) + 24), *((_QWORD *)this + 43), a2);
  for (i = 2; i != -1; --i)
  {
    v8 = (void *)v10[i];
    if (v8)
    {

      v10[i] = 0;
    }
  }
}

void re::DrawableQueue::encodeMipmapsGenerationJob(uint64_t a1, id *a2, uint64_t a3)
{
  re::ns *v4;
  uint64_t v5;
  char v6;
  _BYTE v7[23];
  id v8;
  id v9;

  re::mtl::CommandBuffer::makeBlitCommandEncoder(a2, &v9);
  re::DynamicString::format((re::DynamicString *)"DrawableQueue MipmapGenEncoder-%p", (re::DynamicString *)&v5, a3);
  if ((v6 & 1) != 0)
    v4 = *(re::ns **)&v7[7];
  else
    v4 = (re::ns *)v7;
  re::ns::String::String((re::ns::String *)&v8, v4);
  objc_msgSend(v9, "setLabel:", v8);

  if (v5 && (v6 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v5 + 40))();
  objc_msgSend(v9, "generateMipmapsForTexture:", *(_QWORD *)(a3 + 16));
  objc_msgSend(v9, "endEncoding");

}

id re::DrawableQueue::getLatestReadableUnSynchronizedMetalTexture@<X0>(re::LocklessRingBuffer **this@<X0>, uint64_t a2@<X8>)
{
  id result;
  char v5;

  result = (id)re::LocklessRingBuffer::getLatestReadableBufferIndex(this[45]);
  if (result <= 3)
  {
    result = this[9 * result + 11];
    *(_QWORD *)(a2 + 8) = result;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *(_BYTE *)a2 = v5;
  return result;
}

void re::AppleBuild::determineBuildType(re::AppleBuild *this)
{
  unint64_t v2;
  BOOL v3;
  std::string __p;
  unsigned __int8 v5;

  memset(&__p, 0, sizeof(__p));
  if (os_variant_has_internal_diagnostics())
    v2 = 2;
  else
    v2 = 1;
  std::string::append[abi:nn180100]<char const*,0>(&__p, "/AppleInternal", "");
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  if (v5)
    v3 = v5 == 255;
  else
    v3 = 1;
  if (!v3)
    ++v2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v2 >= 2)
    *(_DWORD *)this = 1;
}

std::string *std::string::append[abi:nn180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *v15;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size + v7 - v9, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
    }
    while (v4 != a3);
    *v15 = 0;
    v17 = size + v7;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:nn180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

_QWORD *std::string::__init_with_size[abi:nn180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

uint64_t re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::Function<void ()(re::FrameCount)>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 40 * v4;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v5 + 32) = 0;
  result = re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v5, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::Function<void ()(re::FrameCount)>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Function<void ()(re::FrameCount)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<void ()(re::FrameCount)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::Function<void ()(re::FrameCount)>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Function<void ()(re::FrameCount)>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 40 * v9;
        v11 = (uint64_t)v7;
        do
        {
          *(_QWORD *)(v11 + 24) = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v11 + 32) = 0;
          re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v11, v8);
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v8);
          v8 += 40;
          v11 += 40;
          v10 -= 40;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 288));
  v3 = *(int *)(a1 + 24);
  v4 = v2 + 72 * (int)v3;
  v5 = *(_QWORD *)(v4 + 112) - 1;
  *(_QWORD *)(v4 + 112) = v5;
  if (!v5 && *(_DWORD *)(v2 + 320) != (_DWORD)v3)
  {
    *(_BYTE *)(v2 + 72 * (int)v3 + 120) = 0;
    re::LocklessRingBuffer::readerReleaseBuffer(*(_QWORD *)(v2 + 360), v3);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 288));
  atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 360) + 32) + 16 * *(int *)(a1 + 24) + 40));
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();

}

uint64_t re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED3ADB0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED3ADB0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawableQueue::latestPresentableDrawable(re::RenderFrame *)::$_0,void ()(re::FrameCount)>::size()
{
  return 32;
}

void re::DrawableQueue::LocalRingBuffer::~LocalRingBuffer(re::DrawableQueue::LocalRingBuffer *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SMAssetStateCommand::getIntParameter(re::SMAssetStateCommand *this, const re::StringID *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v7;
  _QWORD *i;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return 0;
  v7 = 0;
  for (i = (_QWORD *)*((_QWORD *)this + 4); !re::StringID::operator==(i, a2) || v7 >= *((_QWORD *)this + 7); i += 2)
  {
    if (v3 == ++v7)
      return 0;
  }
  *a3 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v7);
  return 1;
}

uint64_t re::SMAssetStateCommand::getFloatParameter(re::SMAssetStateCommand *this, const re::StringID *a2, float *a3)
{
  uint64_t v3;
  unint64_t v7;
  _QWORD *i;

  v3 = *((_QWORD *)this + 12);
  if (!v3)
    return 0;
  v7 = 0;
  for (i = (_QWORD *)*((_QWORD *)this + 14); !re::StringID::operator==(i, a2) || v7 >= *((_QWORD *)this + 17); i += 2)
  {
    if (v3 == ++v7)
      return 0;
  }
  *a3 = *(float *)(*((_QWORD *)this + 19) + 4 * v7);
  return 1;
}

uint64_t re::SMAssetStateCommand::getDoubleParameter(re::SMAssetStateCommand *this, const re::StringID *a2, double *a3)
{
  uint64_t v3;
  unint64_t v7;
  _QWORD *i;

  v3 = *((_QWORD *)this + 22);
  if (!v3)
    return 0;
  v7 = 0;
  for (i = (_QWORD *)*((_QWORD *)this + 24); !re::StringID::operator==(i, a2) || v7 >= *((_QWORD *)this + 27); i += 2)
  {
    if (v3 == ++v7)
      return 0;
  }
  *a3 = *(double *)(*((_QWORD *)this + 29) + 8 * v7);
  return 1;
}

uint64_t re::SMAssetStateCommand::getBoolParameter(re::SMAssetStateCommand *this, const re::StringID *a2, BOOL *a3)
{
  uint64_t v3;
  unint64_t v7;
  _QWORD *i;

  v3 = *((_QWORD *)this + 32);
  if (!v3)
    return 0;
  v7 = 0;
  for (i = (_QWORD *)*((_QWORD *)this + 34); !re::StringID::operator==(i, a2) || v7 >= *((_QWORD *)this + 37); i += 2)
  {
    if (v3 == ++v7)
      return 0;
  }
  *a3 = *(_BYTE *)(*((_QWORD *)this + 39) + v7);
  return 1;
}

uint64_t re::SMAssetStateCommand::getStringParameter(re::SMAssetStateCommand *this, const re::StringID *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 42);
  if (!v2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = *((_QWORD *)this + 44);
  while (!re::StringID::operator==((_QWORD *)(v7 + v5), a2))
  {
    ++v6;
    v5 += 16;
    if (v2 == v6)
      return 0;
  }
  if (v6 < *((_QWORD *)this + 47))
    return *((_QWORD *)this + 49) + v5;
  else
    return 0;
}

uint64_t *re::StateMachineAsset::assetType(re::StateMachineAsset *this)
{
  unsigned __int8 v1;

  {
    re::StateMachineAsset::assetType(void)::type = (uint64_t)"StateMachine";
    qword_255827808 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::StateMachineAsset::assetType(void)::type);
  }
  return &re::StateMachineAsset::assetType(void)::type;
}

re *re::StateMachineAsset::initWithInitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  re *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[5];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a2[2];
  re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, v6);
  ++*(_DWORD *)(a1 + 24);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::StateMachineInitializationData>::operator=(a1, a2);
  v8 = *(_QWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a3 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = v11 + 40 * v10;
    do
    {
      v13 = *(_QWORD *)(v11 + 16);
      if (v13)
      {
        v14 = *(uint64_t **)(v11 + 32);
        v15 = 8 * v13;
        do
        {
          if (!*(_QWORD *)(a1 + 88))
          {
            memset(v23, 0, sizeof(v23));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v16 = *v14++;
          v17 = *(_QWORD **)(a1 + 96);
          v18 = re::globalAllocators(result);
          v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 72, 8);
          *(_QWORD *)v19 = &off_24ED3AFB8;
          v20 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v19 + 8) = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
          *(_QWORD *)(v19 + 8) = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
          *(_QWORD *)(v19 + 16) = *(_QWORD *)(v16 + 16);
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = &str_110;
          *(_QWORD *)(v19 + 56) = 0;
          *(_DWORD *)(v19 + 48) = 0;
          *(_QWORD *)(v19 + 32) = 0;
          *(_QWORD *)(v19 + 40) = 0;
          *(_QWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v19 + 24) = *(_QWORD *)(v16 + 24);
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v19 + 32) = *(_QWORD *)(v16 + 32);
          *(_QWORD *)(v16 + 32) = 0;
          v21 = *(_QWORD *)(v19 + 40);
          *(_QWORD *)(v19 + 40) = *(_QWORD *)(v16 + 40);
          *(_QWORD *)(v16 + 40) = v21;
          v22 = *(_QWORD *)(v19 + 56);
          *(_QWORD *)(v19 + 56) = *(_QWORD *)(v16 + 56);
          *(_QWORD *)(v16 + 56) = v22;
          ++*(_DWORD *)(v16 + 48);
          ++*(_DWORD *)(v19 + 48);
          *(_QWORD *)(v19 + 64) = *(_QWORD *)(v16 + 64);
          *(_QWORD *)&v23[0] = v19;
          result = (re *)re::DynamicArray<re::TransitionCondition *>::add(v17, v23);
          v15 -= 8;
        }
        while (v15);
      }
      v11 += 40;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t re::DynamicArray<re::StateMachineInitializationData>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::StateMachineInitializationData>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::StateMachineInitializationData>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::StateMachineInitializationData>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

_QWORD *re::StateMachineAsset::initWithInitData(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;

  v6 = a2[2];
  re::DynamicArray<re::RenderGraphOutputData>::setCapacity(a1, v6);
  ++*((_DWORD *)a1 + 6);
  re::DynamicArray<re::StateMachineInitializationData>::operator=((uint64_t)a1, a2);
  re::DynamicArray<re::SMAssetStateGraphGroup>::operator=((uint64_t)a1 + 40, a3);
  return re::StateMachineAsset::createRuntimeData(a1);
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetStateGraphGroup>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SMAssetStateGraphGroup>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetStateGraphGroup>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

_QWORD *re::StateMachineAsset::createRuntimeData(_QWORD *this)
{
  unint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  re *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::StateGraph *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  StringID v38;
  float v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  unint64_t v46;
  uint64_t v47;

  v2 = this;
  v47 = *MEMORY[0x24BDAC8D0];
  if (!this[2] || !this[11])
  {
    v3 = this[7];
    if (v2[7])
    {
      v4 = 0;
      do
      {
        v5 = v2[9] + 40 * v4;
        v6 = *(_QWORD *)(v5 + 16);
        if (v6)
        {
          v7 = *(_QWORD *)(v5 + 32);
          v31 = v2[9] + 40 * v4;
          v32 = v7 + 168 * v6;
          do
          {
            v8 = re::globalAllocators((re *)this);
            v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 72, 8);
            *(_QWORD *)v9 = &off_24ED3AFB8;
            this = re::StringID::StringID((re::StringID *)(v9 + 8), (const StringID *)(v7 + 40));
            *(_QWORD *)(v9 + 24) = 0;
            *(_DWORD *)(v9 + 48) = 0;
            *(_QWORD *)(v9 + 32) = 0;
            *(_QWORD *)(v9 + 40) = 0;
            *(_QWORD *)(v9 + 56) = 0;
            *(_QWORD *)(v9 + 64) = 0;
            if (*(_BYTE *)(v7 + 56))
            {
              v10 = re::globalAllocators((re *)this);
              v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 112, 8);
              *(_QWORD *)v1 = &off_24ED3AFE8;
              *(_QWORD *)(v1 + 8) = 0;
              *(_QWORD *)(v1 + 16) = 0;
              *(_QWORD *)(v1 + 24) = 0;
              *(_DWORD *)(v1 + 32) = 0;
              *(_QWORD *)(v1 + 80) = 0;
              *(_OWORD *)(v1 + 40) = 0u;
              *(_OWORD *)(v1 + 56) = 0u;
              *(_DWORD *)(v1 + 72) = 0;
              re::StringID::StringID((re::StringID *)(v1 + 88), (const StringID *)(v7 + 144));
              *(_QWORD *)(v1 + 104) = 0;
              v11 = *(float *)(v7 + 160);
              if (v11 >= 0.0)
                *(float *)(v1 + 104) = v11;
              this = re::StateGraph::addAnyState((_QWORD *)v9, (re::StateMachineState *)v1);
            }
            v12 = *(_QWORD *)(v7 + 16);
            if (v12)
            {
              v1 = *(_QWORD *)(v7 + 32);
              v13 = v1 + 104 * v12;
              do
              {
                re::DynamicArray<re::SMAssetStateTransition>::DynamicArray((uint64_t)&v33, (uint64_t *)v1);
                re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)&v35 + 8, (uint64_t *)(v1 + 40));
                v14 = re::StringID::StringID((re::StringID *)&v38, (const StringID *)(v1 + 80));
                v39 = *(float *)(v1 + 96);
                v15 = re::globalAllocators(v14);
                v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 112, 8);
                *(_QWORD *)v16 = &off_24ED3AFE8;
                *(_QWORD *)(v16 + 8) = 0;
                *(_QWORD *)(v16 + 16) = 0;
                *(_QWORD *)(v16 + 24) = 0;
                *(_DWORD *)(v16 + 32) = 0;
                *(_QWORD *)(v16 + 80) = 0;
                *(_OWORD *)(v16 + 40) = 0u;
                *(_OWORD *)(v16 + 56) = 0u;
                *(_DWORD *)(v16 + 72) = 0;
                re::StringID::StringID((re::StringID *)(v16 + 88), &v38);
                *(_QWORD *)(v16 + 104) = 0;
                if (v39 >= 0.0)
                  *(float *)(v16 + 104) = v39;
                *(_QWORD *)v40 = v16;
                re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)(v9 + 24), v40);
                re::StringID::destroyString((re::StringID *)&v38);
                re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)&v35 + 8);
                this = (_QWORD *)re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)&v33);
                v1 += 104;
              }
              while (v1 != v13);
            }
            v17 = v2[11];
            if (v17 <= v4)
            {
              v36 = 0u;
              v37 = 0u;
              v34 = 0u;
              v35 = 0u;
              v33 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v40 = 136315906;
              *(_QWORD *)&v40[4] = "operator[]";
              v41 = 1024;
              v42 = 468;
              v43 = 2048;
              v44 = v4;
              v45 = 2048;
              v46 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_33;
            }
            v1 = v2[12];
            v18 = v1 + 40 * v4;
            v21 = *(_QWORD *)(v18 + 16);
            v20 = (uint64_t *)(v18 + 16);
            v19 = v21;
            if (v21 >= *(v20 - 1))
            {
              this = re::DynamicArray<float *>::growCapacity((_QWORD *)(v1 + 40 * v4), v19 + 1);
              v19 = *v20;
            }
            v22 = v1 + 40 * v4;
            *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v19) = v9;
            *v20 = v19 + 1;
            ++*(_DWORD *)(v22 + 24);
            v7 += 168;
          }
          while (v7 != v32);
          v23 = v31;
          if (*(_QWORD *)(v31 + 16))
          {
            v1 = 0;
            while (1)
            {
              v9 = v2[11];
              if (v9 <= v4)
                break;
              v24 = v2[12];
              v9 = *(_QWORD *)(v24 + 40 * v4 + 16);
              if (v9 <= v1)
                goto LABEL_34;
              v25 = *(_QWORD *)(v23 + 32);
              v26 = *(re::StateGraph **)(*(_QWORD *)(v24 + 40 * v4 + 32) + 8 * v1);
              if (*(_BYTE *)(v25 + 168 * v1 + 56))
                this = (_QWORD *)re::StateMachineAsset::createStateTransitionsFromAssetData((uint64_t)v2, (_QWORD *)(v25 + 168 * v1 + 64), v26, v4);
              v27 = v25 + 168 * v1;
              v28 = *(_QWORD *)(v27 + 16);
              if (v28)
              {
                v29 = *(_QWORD *)(v27 + 32);
                v30 = v29 + 104 * v28;
                do
                {
                  re::DynamicArray<re::SMAssetStateTransition>::DynamicArray((uint64_t)&v33, (uint64_t *)v29);
                  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)&v35 + 8, (uint64_t *)(v29 + 40));
                  re::StringID::StringID((re::StringID *)&v38, (const StringID *)(v29 + 80));
                  v39 = *(float *)(v29 + 96);
                  re::StateMachineAsset::createStateTransitionsFromAssetData((uint64_t)v2, &v33, v26, v4);
                  re::StringID::destroyString((re::StringID *)&v38);
                  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)&v35 + 8);
                  this = (_QWORD *)re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)&v33);
                  v29 += 104;
                }
                while (v29 != v30);
              }
              ++v1;
              v23 = v31;
              if (v1 >= *(_QWORD *)(v31 + 16))
                goto LABEL_30;
            }
LABEL_33:
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            v33 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v40 = 136315906;
            *(_QWORD *)&v40[4] = "operator[]";
            v41 = 1024;
            v42 = 468;
            v43 = 2048;
            v44 = v4;
            v45 = 2048;
            v46 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_34:
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            v33 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v40 = 136315906;
            *(_QWORD *)&v40[4] = "operator[]";
            v41 = 1024;
            v42 = 789;
            v43 = 2048;
            v44 = v1;
            v45 = 2048;
            v46 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
        }
LABEL_30:
        ++v4;
      }
      while (v4 < v2[7]);
    }
  }
  return this;
}

uint64_t re::StateMachineAsset::createStateTransitionsFromAssetData(uint64_t result, _QWORD *a2, re::StateGraph *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::StringID *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2[2];
  if (v4)
  {
    v7 = result;
    v8 = a2[4];
    v9 = v8 + 96 * v4;
    v10 = (re::StringID *)(a2 + 10);
    do
    {
      if (*(_QWORD *)(v7 + 88) <= a4)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = re::StateGraph::createStateTransition(a3, *(_QWORD *)(v7 + 96) + 40 * a4, v10, (_QWORD *)(v8 + 56), (const re::StringID *)(v8 + 72), (StringID *)(v8 + 40), *(_BYTE *)(v8 + 92), *(float *)(v8 + 88));
      v11 = *(_QWORD *)(v8 + 16);
      if (v11)
      {
        v12 = *(_QWORD *)(v8 + 32);
        v13 = 40 * v11;
        do
        {
          switch(*(_BYTE *)(v12 + 16))
          {
            case 1:
              result = re::StateGraph::addIntTransitionCondition(a3, v10, (_QWORD *)(v8 + 40), (const StringID *)v12, *(_BYTE *)(v12 + 37), *(_QWORD *)(v12 + 24));
              break;
            case 2:
              result = re::StateGraph::addFloatTransitionCondition(a3, v10, (_QWORD *)(v8 + 40), (const StringID *)v12, *(_BYTE *)(v12 + 37), *(float *)(v12 + 32));
              break;
            case 3:
              result = re::StateGraph::addBoolTransitionCondition(a3, v10, (_QWORD *)(v8 + 40), (const StringID *)v12, *(_BYTE *)(v12 + 37), *(_BYTE *)(v12 + 36));
              break;
            case 4:
              result = (uint64_t)re::StateGraph::addTriggerTransitionCondition(a3, v10, (const re::StringID *)(v8 + 40), (const StringID *)v12);
              break;
            default:
              break;
          }
          v12 += 40;
          v13 -= 40;
        }
        while (v13);
      }
      v8 += 96;
    }
    while (v8 != v9);
  }
  return result;
}

_QWORD *re::StateMachineAsset::getAllGraphs@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v3 = this[7];
  if (v3)
  {
    v4 = this;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    for (i = 0; i < v3; ++i)
    {
      v9 = v4[9] + 40 * i;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (unint64_t *)(v9 + 16);
      v10 = v12;
      if (v12)
      {
        v13 = 0;
        do
        {
          if (v4[11] <= i)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v14 = v4[12];
          if (*(_QWORD *)(v14 + 40 * i + 16) <= v13)
            goto LABEL_23;
          v15 = *(_QWORD *)(*(_QWORD *)(v14 + 40 * i + 32) + 8 * v13);
          v16 = *(_QWORD *)(a2 + 8);
          if (v7 >= v16)
          {
            v17 = v7 + 1;
            if (v16 < v7 + 1)
            {
              if (*(_QWORD *)a2)
              {
                v18 = 2 * v16;
                if (!v16)
                  v18 = 8;
                if (v18 <= v17)
                  v19 = v7 + 1;
                else
                  v19 = v18;
                this = re::DynamicArray<float *>::setCapacity((_QWORD *)a2, v19);
                v5 = *(_DWORD *)(a2 + 24);
              }
              else
              {
                this = re::DynamicArray<float *>::setCapacity((_QWORD *)a2, v17);
                v5 = *(_DWORD *)(a2 + 24) + 1;
              }
            }
            v7 = *(_QWORD *)(a2 + 16);
            v6 = *(_QWORD *)(a2 + 32);
            v10 = *v11;
          }
          *(_QWORD *)(v6 + 8 * v7++) = v15;
          *(_QWORD *)(a2 + 16) = v7;
          *(_DWORD *)(a2 + 24) = ++v5;
          ++v13;
        }
        while (v13 < v10);
        v3 = v4[7];
      }
    }
  }
  return this;
}

uint64_t re::StateMachineAsset::deinit(re::StateMachineAsset *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::StateGraph **v6;
  uint64_t v7;
  re::StateGraph *v8;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *((_QWORD *)this + 12);
    v4 = v3 + 40 * v2;
    do
    {
      v5 = *(_QWORD *)(v3 + 16);
      if (v5)
      {
        v6 = *(re::StateGraph ***)(v3 + 32);
        v7 = 8 * v5;
        do
        {
          v8 = *v6++;
          re::internal::destroyPersistent<re::StateGraph>((re *)"deinit", 312, v8);
          v7 -= 8;
        }
        while (v7);
      }
      v3 += 40;
    }
    while (v3 != v4);
  }
  re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit((_QWORD *)this + 10);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)this);
  return re::DynamicArray<re::SMAssetStateGraphGroup>::deinit((uint64_t)this + 40);
}

re *re::internal::destroyPersistent<re::StateGraph>(re *result, uint64_t a2, re::StateGraph *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::StateGraph::~StateGraph(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::StateGraph *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

uint64_t re::StateMachineAssetLoader::createRuntimeData(int a1, re::StateMachineAsset *this)
{
  re::StateMachineAsset::createRuntimeData(this);
  return 1;
}

re *re::StateMachineAssetLoader::unloadAsset(re::StateMachineAssetLoader *this, re::StateMachineAsset *a2)
{
  return re::internal::destroyPersistent<re::StateMachineAsset>((re *)"unloadAsset", 335, a2);
}

re *re::internal::destroyPersistent<re::StateMachineAsset>(re *result, uint64_t a2, re::StateMachineAsset *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::StateMachineAsset::~StateMachineAsset(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::StateMachineAsset *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::StateMachineAssetLoader::isSupportedSourceExtension(re::StateMachineAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "restatemachine") == 0;
}

__guard re::StateMachineAssetLoader::introspectionType(re::StateMachineAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::StateMachineAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"StateMachineAsset", (uint64_t (*)(re::internal *))re::allocInfo_StateMachineAsset, (re::IntrospectionBase *(*)(void))re::initInfo_StateMachineAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::StateMachineAsset>, 0);
    }
  }
  return v2[38];
}

void re::internal::defaultConstruct<re::StateMachineInitializationData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[2] = 0;
  a3[3] = &str_110;
  a3[4] = 0;
  a3[5] = &str_110;
}

void re::internal::defaultDestruct<re::StateMachineInitializationData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::StateMachineInitializationData>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[2] = 0;
  result[3] = &str_110;
  result[4] = 0;
  result[5] = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::StateMachineInitializationData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void re::internal::defaultConstruct<re::SMAssetTransitionCondition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 30) = 0;
}

void re::internal::defaultDestruct<re::SMAssetTransitionCondition>(int a1, int a2, re::StringID *this)
{
  re::StringID::destroyString(this);
}

uint64_t re::internal::defaultConstructV2<re::SMAssetTransitionCondition>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 30) = 0;
  return result;
}

void re::internal::defaultConstruct<re::SMAssetStateTransition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = &str_110;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = &str_110;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = &str_110;
  *(_DWORD *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 92) = 0;
}

uint64_t re::internal::defaultDestruct<re::SMAssetStateTransition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 72));
  re::StringID::destroyString((re::StringID *)(a3 + 56));
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  return re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::SMAssetStateTransition>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = &str_110;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = &str_110;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = &str_110;
  *(_DWORD *)(result + 88) = 0;
  *(_BYTE *)(result + 92) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SMAssetStateTransition>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 72));
  re::StringID::destroyString((re::StringID *)(a1 + 56));
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  return re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a1);
}

double re::internal::defaultConstruct<re::SMAssetStateCommand>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 392) = 0;
  *(_BYTE *)(a3 + 400) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(_DWORD *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_DWORD *)(a3 + 264) = 0;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_DWORD *)(a3 + 304) = 0;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_DWORD *)(a3 + 344) = 0;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_DWORD *)(a3 + 384) = 0;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_QWORD *)(a3 + 408) = 0;
  *(_QWORD *)(a3 + 416) = &str_110;
  return result;
}

void re::internal::defaultDestruct<re::SMAssetStateCommand>(int a1, int a2, re::SMAssetStateCommand *this)
{
  re::SMAssetStateCommand::~SMAssetStateCommand(this);
}

double re::internal::defaultConstructV2<re::SMAssetStateCommand>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = &str_110;
  return result;
}

uint64_t *re::allocInfo_SMAssetState(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541027F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541027F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102DB0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254102DC0 = 0;
    qword_254102DD0 = 0;
    qword_254102DD8 = 0xFFFFFFFFLL;
    qword_254102DB0 = (uint64_t)&off_24ED7DAA8;
    qword_254102DE0 = (uint64_t)"SMAssetState";
    dword_254102DE8 = 0;
    xmmword_254102DF0 = 0u;
    xmmword_254102E00 = 0u;
    xmmword_254102E10 = 0u;
    qword_254102E20 = 0;
    __cxa_guard_release(&qword_2541027F0);
  }
  return &qword_254102DB0;
}

void re::initInfo_SMAssetState(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 v15;
  uint64_t *v16;
  unsigned __int8 v17;
  const re::IntrospectionBase *v18;
  unsigned __int8 v19;
  int v20;
  re::IntrospectionRegistry *v21;
  const re::IntrospectionBase *v22;
  const char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int8 v29;
  uint64_t *v30;
  unsigned __int8 v31;
  const re::IntrospectionBase *v32;
  unsigned __int8 v33;
  int v34;
  re::IntrospectionRegistry *v35;
  const re::IntrospectionBase *v36;
  const char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  re *v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  const re::IntrospectionBase *v55;
  void *v56;
  uint64_t v57;
  uint64_t *v58;
  const re::IntrospectionBase *v59;
  void *v60;
  uint64_t v61;
  uint64_t *v62;
  const re::IntrospectionBase *v63;
  void *v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned __int8 v67;
  uint64_t *v68;
  unsigned __int8 v69;
  const re::IntrospectionBase *v70;
  unsigned __int8 v71;
  int v72;
  re::IntrospectionRegistry *v73;
  const re::IntrospectionBase *v74;
  const char *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  re *v79;
  uint64_t *v80;
  const re::IntrospectionBase *v81;
  void *v82;
  uint64_t v83;
  uint64_t *v84;
  const re::IntrospectionBase *v85;
  void *v86;
  uint64_t v87;
  uint64_t *v88;
  const re::IntrospectionBase *v89;
  uint64_t *v90;
  uint64_t v91;
  const re::IntrospectionBase *v92;
  unsigned __int8 v93;
  _DWORD *v94;
  uint64_t v95;
  int v96;
  re::IntrospectionRegistry *v97;
  const re::IntrospectionBase *v98;
  const char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  const re::IntrospectionBase *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  const re::IntrospectionBase *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  const re::IntrospectionBase *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  const re::IntrospectionBase *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  const re::IntrospectionBase *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  const re::IntrospectionBase *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  const re::IntrospectionBase *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  const re::IntrospectionBase *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  re *v141;
  uint64_t *v142;
  const re::IntrospectionBase *v143;
  uint64_t v144;
  uint64_t *v145;
  const re::IntrospectionBase *v146;
  uint64_t v147;
  uint64_t *v148;
  const re::IntrospectionBase *v149;
  uint64_t v150;
  uint64_t *v151;
  const re::IntrospectionBase *v152;
  uint64_t v153;
  uint64_t *v154;
  const re::IntrospectionBase *v155;
  uint64_t v156;
  uint64_t *v157;
  const re::IntrospectionBase *v158;
  uint64_t v159;
  uint64_t *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172[2];
  __int128 v173;
  const char *v174;
  __int128 v175[2];

  *(_QWORD *)&v173 = 0x3C56069A78F8FAF6;
  *((_QWORD *)&v173 + 1) = "SMAssetState";
  re::StringID::destroyString((re::StringID *)&v173);
  *((_OWORD *)this + 2) = v168;
  v4 = atomic_load((unsigned __int8 *)&qword_2541027E8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541027E8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x5000000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2541028D0 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_totalExitTime";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x6000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541028D8 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v15 = atomic_load((unsigned __int8 *)&qword_254102878);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254102878))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541029F0, 0);
        *(_QWORD *)(v42 + 22) = 0;
        qword_254102A00 = 0;
        *(_QWORD *)&xmmword_254102A10 = 0;
        *((_QWORD *)&xmmword_254102A10 + 1) = 0xFFFFFFFFLL;
        qword_2541029F0 = (uint64_t)&off_24ED1FA08;
        qword_254102A28 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254102A20);
        qword_2541029F0 = (uint64_t)&off_24ED3B170;
        __cxa_guard_release(&qword_254102878);
      }
      if ((byte_254102782 & 1) == 0)
      {
        v16 = (uint64_t *)qword_2541027C8;
        if (qword_2541027C8)
          goto LABEL_10;
        v17 = atomic_load((unsigned __int8 *)&qword_2541027C0);
        if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_2541027C0))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102CC0, 0);
          *(_QWORD *)(v44 + 22) = 0;
          qword_254102CD0 = 0;
          *(_QWORD *)&xmmword_254102CE0 = 0;
          *((_QWORD *)&xmmword_254102CE0 + 1) = 0xFFFFFFFFLL;
          qword_254102CC0 = (uint64_t)&off_24ED7DAA8;
          qword_254102CF0 = (uint64_t)"SMAssetStateTransition";
          dword_254102CF8 = 0;
          xmmword_254102D00 = 0u;
          xmmword_254102D10 = 0u;
          xmmword_254102D20 = 0u;
          qword_254102D30 = 0;
          __cxa_guard_release(&qword_2541027C0);
        }
        qword_2541027C8 = (uint64_t)&qword_254102CC0;
        *(_QWORD *)&v173 = 0xEE3C36B22D66D260;
        *((_QWORD *)&v173 + 1) = "SMAssetStateTransition";
        re::StringID::destroyString((re::StringID *)&v173);
        xmmword_254102CE0 = v169;
        v19 = atomic_load((unsigned __int8 *)&qword_2541027B8);
        if ((v19 & 1) == 0)
        {
          v45 = (re *)__cxa_guard_acquire(&qword_2541027B8);
          if ((_DWORD)v45)
          {
            v46 = re::introspectionAllocator(v45);
            v48 = re::IntrospectionInfo<re::StringID>::get(1, v47);
            v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
            *(_DWORD *)v49 = 1;
            *(_QWORD *)(v49 + 8) = "m_name";
            *(_QWORD *)(v49 + 16) = v48;
            *(_QWORD *)(v49 + 24) = 0;
            *(_QWORD *)(v49 + 32) = 0x2800000001;
            *(_DWORD *)(v49 + 40) = 0;
            *(_QWORD *)(v49 + 48) = 0;
            *(_QWORD *)(v49 + 56) = 0;
            *(_DWORD *)(v49 + 64) = 0;
            qword_254102940 = v49;
            v50 = re::introspectionAllocator((re *)v49);
            v52 = re::IntrospectionInfo<re::StringID>::get(1, v51);
            v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
            *(_DWORD *)v53 = 1;
            *(_QWORD *)(v53 + 8) = "m_toGraphName";
            *(_QWORD *)(v53 + 16) = v52;
            *(_QWORD *)(v53 + 24) = 0;
            *(_QWORD *)(v53 + 32) = 0x3800000002;
            *(_DWORD *)(v53 + 40) = 0;
            *(_QWORD *)(v53 + 48) = 0;
            *(_QWORD *)(v53 + 56) = 0;
            *(_DWORD *)(v53 + 64) = 0;
            qword_254102948 = v53;
            v54 = re::introspectionAllocator((re *)v53);
            v56 = re::IntrospectionInfo<re::StringID>::get(1, v55);
            v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
            *(_DWORD *)v57 = 1;
            *(_QWORD *)(v57 + 8) = "m_toStateName";
            *(_QWORD *)(v57 + 16) = v56;
            *(_QWORD *)(v57 + 24) = 0;
            *(_QWORD *)(v57 + 32) = 0x4800000003;
            *(_DWORD *)(v57 + 40) = 0;
            *(_QWORD *)(v57 + 48) = 0;
            *(_QWORD *)(v57 + 56) = 0;
            *(_DWORD *)(v57 + 64) = 0;
            qword_254102950 = v57;
            v58 = re::introspectionAllocator((re *)v57);
            v60 = re::introspect_float((re *)1, v59);
            v61 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 72, 8);
            *(_DWORD *)v61 = 1;
            *(_QWORD *)(v61 + 8) = "m_transitionTime";
            *(_QWORD *)(v61 + 16) = v60;
            *(_QWORD *)(v61 + 24) = 0;
            *(_QWORD *)(v61 + 32) = 0x5800000004;
            *(_DWORD *)(v61 + 40) = 0;
            *(_QWORD *)(v61 + 48) = 0;
            *(_QWORD *)(v61 + 56) = 0;
            *(_DWORD *)(v61 + 64) = 0;
            qword_254102958 = v61;
            v62 = re::introspectionAllocator((re *)v61);
            v64 = re::introspect_StateTransitionInterruptionType((re *)1, v63);
            v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 72, 8);
            *(_DWORD *)v65 = 1;
            *(_QWORD *)(v65 + 8) = "m_interruptionType";
            *(_QWORD *)(v65 + 16) = v64;
            *(_QWORD *)(v65 + 24) = 0;
            *(_QWORD *)(v65 + 32) = 0x5C00000005;
            *(_DWORD *)(v65 + 40) = 0;
            *(_QWORD *)(v65 + 48) = 0;
            *(_QWORD *)(v65 + 56) = 0;
            *(_DWORD *)(v65 + 64) = 0;
            qword_254102960 = v65;
            v66 = re::introspectionAllocator((re *)v65);
            v67 = atomic_load((unsigned __int8 *)&qword_254102868);
            if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_254102868))
            {
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102970, 0);
              *(_QWORD *)(v138 + 22) = 0;
              qword_254102980 = 0;
              *(_QWORD *)&xmmword_254102990 = 0;
              *((_QWORD *)&xmmword_254102990 + 1) = 0xFFFFFFFFLL;
              qword_254102970 = (uint64_t)&off_24ED1FA08;
              qword_2541029A8 = 0;
              re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541029A0);
              qword_254102970 = (uint64_t)&off_24ED3B040;
              __cxa_guard_release(&qword_254102868);
            }
            if ((_MergedGlobals_97 & 1) == 0)
            {
              v68 = (uint64_t *)qword_2541027B0;
              if (qword_2541027B0)
                goto LABEL_50;
              v69 = atomic_load((unsigned __int8 *)&qword_2541027A8);
              if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_2541027A8))
              {
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102C48, 0);
                *(_QWORD *)(v140 + 22) = 0;
                qword_254102C58 = 0;
                *(_QWORD *)&xmmword_254102C68 = 0;
                *((_QWORD *)&xmmword_254102C68 + 1) = 0xFFFFFFFFLL;
                qword_254102C48 = (uint64_t)&off_24ED7DAA8;
                qword_254102C78 = (uint64_t)"SMAssetTransitionCondition";
                dword_254102C80 = 0;
                xmmword_254102C88 = 0u;
                xmmword_254102C98 = 0u;
                xmmword_254102CA8 = 0u;
                qword_254102CB8 = 0;
                __cxa_guard_release(&qword_2541027A8);
              }
              qword_2541027B0 = (uint64_t)&qword_254102C48;
              *(_QWORD *)&v175[0] = 0xC3FB3DEF23D84D60;
              *((_QWORD *)&v175[0] + 1) = "SMAssetTransitionCondition";
              re::StringID::destroyString((re::StringID *)v175);
              xmmword_254102C68 = v173;
              v71 = atomic_load((unsigned __int8 *)&qword_2541027A0);
              if ((v71 & 1) == 0)
              {
                v141 = (re *)__cxa_guard_acquire(&qword_2541027A0);
                if ((_DWORD)v141)
                {
                  v142 = re::introspectionAllocator(v141);
                  v161 = re::introspect_TransitionConditionType((re *)1, v143);
                  v144 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v142 + 32))(v142, 72, 8);
                  *(_DWORD *)v144 = 1;
                  *(_QWORD *)(v144 + 8) = "m_type";
                  *(_QWORD *)(v144 + 16) = v161;
                  *(_QWORD *)(v144 + 24) = 0;
                  *(_QWORD *)(v144 + 32) = 0x1000000001;
                  *(_DWORD *)(v144 + 40) = 0;
                  *(_QWORD *)(v144 + 48) = 0;
                  *(_QWORD *)(v144 + 56) = 0;
                  *(_DWORD *)(v144 + 64) = 0;
                  qword_254102910 = v144;
                  v145 = re::introspectionAllocator((re *)v144);
                  v162 = re::IntrospectionInfo<re::StringID>::get(1, v146);
                  v147 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v145 + 32))(v145, 72, 8);
                  *(_DWORD *)v147 = 1;
                  *(_QWORD *)(v147 + 8) = "m_parameterName";
                  *(_QWORD *)(v147 + 16) = v162;
                  *(_QWORD *)(v147 + 24) = 0;
                  *(_QWORD *)(v147 + 32) = 2;
                  *(_DWORD *)(v147 + 40) = 0;
                  *(_QWORD *)(v147 + 48) = 0;
                  *(_QWORD *)(v147 + 56) = 0;
                  *(_DWORD *)(v147 + 64) = 0;
                  qword_254102918 = v147;
                  v148 = re::introspectionAllocator((re *)v147);
                  v163 = re::introspect_int64_t((re *)1, v149);
                  v150 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v148 + 32))(v148, 72, 8);
                  *(_DWORD *)v150 = 1;
                  *(_QWORD *)(v150 + 8) = "m_intTestValue";
                  *(_QWORD *)(v150 + 16) = v163;
                  *(_QWORD *)(v150 + 24) = 0;
                  *(_QWORD *)(v150 + 32) = 0x1800000003;
                  *(_DWORD *)(v150 + 40) = 0;
                  *(_QWORD *)(v150 + 48) = 0;
                  *(_QWORD *)(v150 + 56) = 0;
                  *(_DWORD *)(v150 + 64) = 0;
                  qword_254102920 = v150;
                  v151 = re::introspectionAllocator((re *)v150);
                  v164 = re::introspect_float((re *)1, v152);
                  v153 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v151 + 32))(v151, 72, 8);
                  *(_DWORD *)v153 = 1;
                  *(_QWORD *)(v153 + 8) = "m_floatTestValue";
                  *(_QWORD *)(v153 + 16) = v164;
                  *(_QWORD *)(v153 + 24) = 0;
                  *(_QWORD *)(v153 + 32) = 0x2000000004;
                  *(_DWORD *)(v153 + 40) = 0;
                  *(_QWORD *)(v153 + 48) = 0;
                  *(_QWORD *)(v153 + 56) = 0;
                  *(_DWORD *)(v153 + 64) = 0;
                  qword_254102928 = v153;
                  v154 = re::introspectionAllocator((re *)v153);
                  v165 = re::introspect_BOOL((re *)1, v155);
                  v156 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v154 + 32))(v154, 72, 8);
                  *(_DWORD *)v156 = 1;
                  *(_QWORD *)(v156 + 8) = "m_BOOLTestValue";
                  *(_QWORD *)(v156 + 16) = v165;
                  *(_QWORD *)(v156 + 24) = 0;
                  *(_QWORD *)(v156 + 32) = 0x2400000005;
                  *(_DWORD *)(v156 + 40) = 0;
                  *(_QWORD *)(v156 + 48) = 0;
                  *(_QWORD *)(v156 + 56) = 0;
                  *(_DWORD *)(v156 + 64) = 0;
                  qword_254102930 = v156;
                  v157 = re::introspectionAllocator((re *)v156);
                  v166 = re::introspect_StateTransitionConditionOperator((re *)1, v158);
                  v159 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v157 + 32))(v157, 72, 8);
                  *(_DWORD *)v159 = 1;
                  *(_QWORD *)(v159 + 8) = "m_operator";
                  *(_QWORD *)(v159 + 16) = v166;
                  *(_QWORD *)(v159 + 24) = 0;
                  *(_QWORD *)(v159 + 32) = 0x2500000006;
                  *(_DWORD *)(v159 + 40) = 0;
                  *(_QWORD *)(v159 + 48) = 0;
                  *(_QWORD *)(v159 + 56) = 0;
                  *(_DWORD *)(v159 + 64) = 0;
                  qword_254102938 = v159;
                  __cxa_guard_release(&qword_2541027A0);
                }
              }
              qword_254102C58 = 0x2800000008;
              v68 = &qword_254102C48;
              dword_254102C60 = 8;
              word_254102C64 = 0;
              dword_254102C80 = 6;
              *(_QWORD *)&xmmword_254102C88 = &qword_254102910;
              *((_QWORD *)&xmmword_254102C88 + 1) = re::internal::defaultConstruct<re::SMAssetTransitionCondition>;
              *(_QWORD *)&xmmword_254102C98 = re::internal::defaultDestruct<re::SMAssetTransitionCondition>;
              *(_QWORD *)&xmmword_254102CA8 = 0;
              *((_QWORD *)&xmmword_254102C98 + 1) = 0;
              *((_QWORD *)&xmmword_254102CA8 + 1) = re::internal::defaultConstructV2<re::SMAssetTransitionCondition>;
              qword_254102CB8 = (uint64_t)re::internal::defaultDestructV2<re::SMAssetTransitionCondition>;
              re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254102C48, v70);
              v175[0] = v173;
              if ((_MergedGlobals_97 & 1) == 0)
              {
LABEL_50:
                _MergedGlobals_97 = 1;
                v72 = *((_DWORD *)v68 + 6);
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102970, 0);
                qword_254102980 = 0x2800000003;
                dword_254102988 = v72;
                word_25410298C = 0;
                *(_QWORD *)&xmmword_254102990 = 0;
                *((_QWORD *)&xmmword_254102990 + 1) = 0xFFFFFFFFLL;
                qword_2541029A0 = (uint64_t)v68;
                qword_2541029A8 = 0;
                qword_254102970 = (uint64_t)&off_24ED3B040;
                re::IntrospectionRegistry::add(v73, v74);
                re::getPrettyTypeName((re *)&qword_254102970, (const re::IntrospectionBase *)&v173);
                if ((BYTE8(v173) & 1) != 0)
                  v75 = v174;
                else
                  v75 = (char *)&v173 + 9;
                if ((_QWORD)v173 && (BYTE8(v173) & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v173 + 40))();
                v171 = *((_OWORD *)v68 + 2);
                v76 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v172);
                if (v76)
                {
                  v77 = *v76;
                  *((_QWORD *)&v170 + 1) = v77;
                }
                else
                {
                  v175[0] = v171;
                  re::TypeBuilder::beginListType((uint64_t)&v173, v172, 1, 0x28uLL, 8uLL, v175);
                  re::TypeBuilder::setConstructor((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
                  re::TypeBuilder::setDestructor((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
                  re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v173, 1);
                  re::TypeBuilder::setListAccessors((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIndexer((uint64_t)&v173, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIterator((uint64_t)&v173, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
                  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v173, v102);
                }
                xmmword_254102990 = v170;
                re::StringID::destroyString((re::StringID *)v172);
              }
            }
            v103 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 72, 8);
            *(_DWORD *)v103 = 1;
            *(_QWORD *)(v103 + 8) = "m_conditions";
            *(_QWORD *)(v103 + 16) = &qword_254102970;
            *(_QWORD *)(v103 + 24) = 0;
            *(_QWORD *)(v103 + 32) = 6;
            *(_DWORD *)(v103 + 40) = 0;
            *(_QWORD *)(v103 + 48) = 0;
            *(_QWORD *)(v103 + 56) = 0;
            *(_DWORD *)(v103 + 64) = 0;
            qword_254102968 = v103;
            __cxa_guard_release(&qword_2541027B8);
          }
        }
        qword_254102CD0 = 0x6000000008;
        v16 = &qword_254102CC0;
        dword_254102CD8 = 8;
        word_254102CDC = 0;
        dword_254102CF8 = 6;
        *(_QWORD *)&xmmword_254102D00 = &qword_254102940;
        *((_QWORD *)&xmmword_254102D00 + 1) = re::internal::defaultConstruct<re::SMAssetStateTransition>;
        *(_QWORD *)&xmmword_254102D10 = re::internal::defaultDestruct<re::SMAssetStateTransition>;
        *(_QWORD *)&xmmword_254102D20 = 0;
        *((_QWORD *)&xmmword_254102D10 + 1) = 0;
        *((_QWORD *)&xmmword_254102D20 + 1) = re::internal::defaultConstructV2<re::SMAssetStateTransition>;
        qword_254102D30 = (uint64_t)re::internal::defaultDestructV2<re::SMAssetStateTransition>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254102CC0, v18);
        v173 = v169;
        if ((byte_254102782 & 1) == 0)
        {
LABEL_10:
          byte_254102782 = 1;
          v20 = *((_DWORD *)v16 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541029F0, 0);
          qword_254102A00 = 0x2800000003;
          dword_254102A08 = v20;
          word_254102A0C = 0;
          *(_QWORD *)&xmmword_254102A10 = 0;
          *((_QWORD *)&xmmword_254102A10 + 1) = 0xFFFFFFFFLL;
          qword_254102A20 = (uint64_t)v16;
          qword_254102A28 = 0;
          qword_2541029F0 = (uint64_t)&off_24ED3B170;
          re::IntrospectionRegistry::add(v21, v22);
          re::getPrettyTypeName((re *)&qword_2541029F0, (const re::IntrospectionBase *)&v173);
          if ((BYTE8(v173) & 1) != 0)
            v23 = v174;
          else
            v23 = (char *)&v173 + 9;
          if ((_QWORD)v173 && (BYTE8(v173) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v173 + 40))();
          v171 = *((_OWORD *)v16 + 2);
          v24 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v172);
          if (v24)
          {
            v25 = *v24;
            *((_QWORD *)&v170 + 1) = v25;
          }
          else
          {
            v175[0] = v171;
            re::TypeBuilder::beginListType((uint64_t)&v173, v172, 1, 0x28uLL, 8uLL, v175);
            re::TypeBuilder::setConstructor((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v173, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v173, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v173, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v173, v26);
          }
          xmmword_254102A10 = v170;
          re::StringID::destroyString((re::StringID *)v172);
        }
      }
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "m_transitions";
      *(_QWORD *)(v27 + 16) = &qword_2541029F0;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 3;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2541028E0 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v29 = atomic_load((unsigned __int8 *)&qword_254102880);
      if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254102880))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102A30, 0);
        *(_QWORD *)(v43 + 22) = 0;
        qword_254102A40 = 0;
        *(_QWORD *)&xmmword_254102A50 = 0;
        *((_QWORD *)&xmmword_254102A50 + 1) = 0xFFFFFFFFLL;
        qword_254102A30 = (uint64_t)&off_24ED1FA08;
        qword_254102A68 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254102A60);
        qword_254102A30 = (uint64_t)&off_24ED3B208;
        __cxa_guard_release(&qword_254102880);
      }
      if ((byte_254102783 & 1) == 0)
      {
        v30 = (uint64_t *)qword_2541027E0;
        if (qword_2541027E0)
          goto LABEL_26;
        v31 = atomic_load((unsigned __int8 *)&qword_2541027D8);
        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_2541027D8))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102D38, 0);
          *(_QWORD *)(v78 + 22) = 0;
          qword_254102D48 = 0;
          *(_QWORD *)&xmmword_254102D58 = 0;
          *((_QWORD *)&xmmword_254102D58 + 1) = 0xFFFFFFFFLL;
          qword_254102D38 = (uint64_t)&off_24ED7DAA8;
          qword_254102D68 = (uint64_t)"SMAssetStateCommand";
          dword_254102D70 = 0;
          xmmword_254102D78 = 0u;
          xmmword_254102D88 = 0u;
          xmmword_254102D98 = 0u;
          qword_254102DA8 = 0;
          __cxa_guard_release(&qword_2541027D8);
        }
        qword_2541027E0 = (uint64_t)&qword_254102D38;
        *(_QWORD *)&v173 = 0x2258AF08EFF7D2A0;
        *((_QWORD *)&v173 + 1) = "SMAssetStateCommand";
        re::StringID::destroyString((re::StringID *)&v173);
        xmmword_254102D58 = v169;
        v33 = atomic_load((unsigned __int8 *)&qword_2541027D0);
        if ((v33 & 1) == 0)
        {
          v79 = (re *)__cxa_guard_acquire(&qword_2541027D0);
          if ((_DWORD)v79)
          {
            v80 = re::introspectionAllocator(v79);
            v82 = re::IntrospectionInfo<re::StringID>::get(1, v81);
            v83 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v80 + 32))(v80, 72, 8);
            *(_DWORD *)v83 = 1;
            *(_QWORD *)(v83 + 8) = "m_entityName";
            *(_QWORD *)(v83 + 16) = v82;
            *(_QWORD *)(v83 + 24) = 0;
            *(_QWORD *)(v83 + 32) = 0x19800000001;
            *(_DWORD *)(v83 + 40) = 0;
            *(_QWORD *)(v83 + 48) = 0;
            *(_QWORD *)(v83 + 56) = 0;
            *(_DWORD *)(v83 + 64) = 0;
            qword_254102B70 = v83;
            v84 = re::introspectionAllocator((re *)v83);
            v86 = re::introspect_REStateCommandID((re *)1, v85);
            v87 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v84 + 32))(v84, 72, 8);
            *(_DWORD *)v87 = 1;
            *(_QWORD *)(v87 + 8) = "m_commandType";
            *(_QWORD *)(v87 + 16) = v86;
            *(_QWORD *)(v87 + 24) = 0;
            *(_QWORD *)(v87 + 32) = 0x19000000002;
            *(_DWORD *)(v87 + 40) = 0;
            *(_QWORD *)(v87 + 48) = 0;
            *(_QWORD *)(v87 + 56) = 0;
            *(_DWORD *)(v87 + 64) = 0;
            qword_254102B78 = v87;
            v88 = re::introspectionAllocator((re *)v87);
            v90 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v89);
            v91 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v88 + 32))(v88, 72, 8);
            *(_DWORD *)v91 = 1;
            *(_QWORD *)(v91 + 8) = "m_intParameterNames";
            *(_QWORD *)(v91 + 16) = v90;
            *(_QWORD *)(v91 + 24) = 0;
            *(_QWORD *)(v91 + 32) = 3;
            *(_DWORD *)(v91 + 40) = 0;
            *(_QWORD *)(v91 + 48) = 0;
            *(_QWORD *)(v91 + 56) = 0;
            *(_DWORD *)(v91 + 64) = 0;
            qword_254102B80 = v91;
            v160 = re::introspectionAllocator((re *)v91);
            v93 = atomic_load((unsigned __int8 *)&qword_254102870);
            if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_254102870))
            {
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541029B0, 0);
              *(_QWORD *)(v139 + 22) = 0;
              qword_2541029C0 = 0;
              *(_QWORD *)&xmmword_2541029D0 = 0;
              *((_QWORD *)&xmmword_2541029D0 + 1) = 0xFFFFFFFFLL;
              qword_2541029B0 = (uint64_t)&off_24ED1FA08;
              qword_2541029E8 = 0;
              re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541029E0);
              qword_2541029B0 = (uint64_t)&off_24ED3B0D8;
              __cxa_guard_release(&qword_254102870);
            }
            if ((byte_254102781 & 1) == 0)
            {
              v94 = re::introspect_int64_t((re *)1, v92);
              if ((byte_254102781 & 1) == 0)
              {
                v95 = (uint64_t)v94;
                byte_254102781 = 1;
                v96 = v94[6];
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541029B0, 0);
                qword_2541029C0 = 0x2800000003;
                dword_2541029C8 = v96;
                word_2541029CC = 0;
                *(_QWORD *)&xmmword_2541029D0 = 0;
                *((_QWORD *)&xmmword_2541029D0 + 1) = 0xFFFFFFFFLL;
                qword_2541029E0 = v95;
                qword_2541029E8 = 0;
                qword_2541029B0 = (uint64_t)&off_24ED3B0D8;
                re::IntrospectionRegistry::add(v97, v98);
                re::getPrettyTypeName((re *)&qword_2541029B0, (const re::IntrospectionBase *)&v173);
                if ((BYTE8(v173) & 1) != 0)
                  v99 = v174;
                else
                  v99 = (char *)&v173 + 9;
                if ((_QWORD)v173 && (BYTE8(v173) & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v173 + 40))();
                v171 = *(_OWORD *)(v95 + 32);
                v100 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v172);
                if (v100)
                {
                  v101 = *v100;
                  *((_QWORD *)&v170 + 1) = v101;
                }
                else
                {
                  v175[0] = v171;
                  re::TypeBuilder::beginListType((uint64_t)&v173, v172, 1, 0x28uLL, 8uLL, v175);
                  re::TypeBuilder::setConstructor((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
                  re::TypeBuilder::setDestructor((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
                  re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v173, 1);
                  re::TypeBuilder::setListAccessors((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIndexer((uint64_t)&v173, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIterator((uint64_t)&v173, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
                  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v173, v104);
                }
                xmmword_2541029D0 = v170;
                re::StringID::destroyString((re::StringID *)v172);
              }
            }
            v105 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v160 + 32))(v160, 72, 8);
            *(_DWORD *)v105 = 1;
            *(_QWORD *)(v105 + 8) = "m_intParameters";
            *(_QWORD *)(v105 + 16) = &qword_2541029B0;
            *(_QWORD *)(v105 + 24) = 0;
            *(_QWORD *)(v105 + 32) = 0x2800000004;
            *(_DWORD *)(v105 + 40) = 0;
            *(_QWORD *)(v105 + 48) = 0;
            *(_QWORD *)(v105 + 56) = 0;
            *(_DWORD *)(v105 + 64) = 0;
            qword_254102B88 = v105;
            v106 = re::introspectionAllocator((re *)v105);
            v108 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v107);
            v109 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v106 + 32))(v106, 72, 8);
            *(_DWORD *)v109 = 1;
            *(_QWORD *)(v109 + 8) = "m_floatParameterNames";
            *(_QWORD *)(v109 + 16) = v108;
            *(_QWORD *)(v109 + 24) = 0;
            *(_QWORD *)(v109 + 32) = 0x5000000005;
            *(_DWORD *)(v109 + 40) = 0;
            *(_QWORD *)(v109 + 48) = 0;
            *(_QWORD *)(v109 + 56) = 0;
            *(_DWORD *)(v109 + 64) = 0;
            qword_254102B90 = v109;
            v110 = re::introspectionAllocator((re *)v109);
            v112 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v111);
            v113 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v110 + 32))(v110, 72, 8);
            *(_DWORD *)v113 = 1;
            *(_QWORD *)(v113 + 8) = "m_floatParameters";
            *(_QWORD *)(v113 + 16) = v112;
            *(_QWORD *)(v113 + 24) = 0;
            *(_QWORD *)(v113 + 32) = 0x7800000006;
            *(_DWORD *)(v113 + 40) = 0;
            *(_QWORD *)(v113 + 48) = 0;
            *(_QWORD *)(v113 + 56) = 0;
            *(_DWORD *)(v113 + 64) = 0;
            qword_254102B98 = v113;
            v114 = re::introspectionAllocator((re *)v113);
            v116 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v115);
            v117 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v114 + 32))(v114, 72, 8);
            *(_DWORD *)v117 = 1;
            *(_QWORD *)(v117 + 8) = "m_doubleParameterNames";
            *(_QWORD *)(v117 + 16) = v116;
            *(_QWORD *)(v117 + 24) = 0;
            *(_QWORD *)(v117 + 32) = 0xA000000007;
            *(_DWORD *)(v117 + 40) = 0;
            *(_QWORD *)(v117 + 48) = 0;
            *(_QWORD *)(v117 + 56) = 0;
            *(_DWORD *)(v117 + 64) = 0;
            qword_254102BA0 = v117;
            v118 = re::introspectionAllocator((re *)v117);
            v120 = re::IntrospectionInfo<re::DynamicArray<double>>::get(1, v119);
            v121 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v118 + 32))(v118, 72, 8);
            *(_DWORD *)v121 = 1;
            *(_QWORD *)(v121 + 8) = "m_doubleParameters";
            *(_QWORD *)(v121 + 16) = v120;
            *(_QWORD *)(v121 + 24) = 0;
            *(_QWORD *)(v121 + 32) = 0xC800000008;
            *(_DWORD *)(v121 + 40) = 0;
            *(_QWORD *)(v121 + 48) = 0;
            *(_QWORD *)(v121 + 56) = 0;
            *(_DWORD *)(v121 + 64) = 0;
            qword_254102BA8 = v121;
            v122 = re::introspectionAllocator((re *)v121);
            v124 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v123);
            v125 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v122 + 32))(v122, 72, 8);
            *(_DWORD *)v125 = 1;
            *(_QWORD *)(v125 + 8) = "m_BOOLParameterNames";
            *(_QWORD *)(v125 + 16) = v124;
            *(_QWORD *)(v125 + 24) = 0;
            *(_QWORD *)(v125 + 32) = 0xF000000009;
            *(_DWORD *)(v125 + 40) = 0;
            *(_QWORD *)(v125 + 48) = 0;
            *(_QWORD *)(v125 + 56) = 0;
            *(_DWORD *)(v125 + 64) = 0;
            qword_254102BB0 = v125;
            v126 = re::introspectionAllocator((re *)v125);
            v128 = re::IntrospectionInfo<re::DynamicArray<BOOL>>::get(1, v127);
            v129 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v126 + 32))(v126, 72, 8);
            *(_DWORD *)v129 = 1;
            *(_QWORD *)(v129 + 8) = "m_BOOLParameters";
            *(_QWORD *)(v129 + 16) = v128;
            *(_QWORD *)(v129 + 24) = 0;
            *(_QWORD *)(v129 + 32) = 0x1180000000ALL;
            *(_DWORD *)(v129 + 40) = 0;
            *(_QWORD *)(v129 + 48) = 0;
            *(_QWORD *)(v129 + 56) = 0;
            *(_DWORD *)(v129 + 64) = 0;
            qword_254102BB8 = v129;
            v130 = re::introspectionAllocator((re *)v129);
            v132 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v131);
            v133 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v130 + 32))(v130, 72, 8);
            *(_DWORD *)v133 = 1;
            *(_QWORD *)(v133 + 8) = "m_stringParameterNames";
            *(_QWORD *)(v133 + 16) = v132;
            *(_QWORD *)(v133 + 24) = 0;
            *(_QWORD *)(v133 + 32) = 0x1400000000BLL;
            *(_DWORD *)(v133 + 40) = 0;
            *(_QWORD *)(v133 + 48) = 0;
            *(_QWORD *)(v133 + 56) = 0;
            *(_DWORD *)(v133 + 64) = 0;
            qword_254102BC0 = v133;
            v134 = re::introspectionAllocator((re *)v133);
            v136 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v135);
            v137 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v134 + 32))(v134, 72, 8);
            *(_DWORD *)v137 = 1;
            *(_QWORD *)(v137 + 8) = "m_stringParameters";
            *(_QWORD *)(v137 + 16) = v136;
            *(_QWORD *)(v137 + 24) = 0;
            *(_QWORD *)(v137 + 32) = 0x1680000000CLL;
            *(_DWORD *)(v137 + 40) = 0;
            *(_QWORD *)(v137 + 48) = 0;
            *(_QWORD *)(v137 + 56) = 0;
            *(_DWORD *)(v137 + 64) = 0;
            qword_254102BC8 = v137;
            __cxa_guard_release(&qword_2541027D0);
          }
        }
        qword_254102D48 = 0x1A800000008;
        v30 = &qword_254102D38;
        dword_254102D50 = 8;
        word_254102D54 = 0;
        dword_254102D70 = 12;
        *(_QWORD *)&xmmword_254102D78 = &qword_254102B70;
        *((_QWORD *)&xmmword_254102D78 + 1) = re::internal::defaultConstruct<re::SMAssetStateCommand>;
        *(_QWORD *)&xmmword_254102D88 = re::internal::defaultDestruct<re::SMAssetStateCommand>;
        *(_QWORD *)&xmmword_254102D98 = 0;
        *((_QWORD *)&xmmword_254102D88 + 1) = 0;
        *((_QWORD *)&xmmword_254102D98 + 1) = re::internal::defaultConstructV2<re::SMAssetStateCommand>;
        qword_254102DA8 = (uint64_t)re::internal::defaultDestructV2<re::SMAssetStateCommand>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254102D38, v32);
        v173 = v169;
        if ((byte_254102783 & 1) == 0)
        {
LABEL_26:
          byte_254102783 = 1;
          v34 = *((_DWORD *)v30 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102A30, 0);
          qword_254102A40 = 0x2800000003;
          dword_254102A48 = v34;
          word_254102A4C = 0;
          *(_QWORD *)&xmmword_254102A50 = 0;
          *((_QWORD *)&xmmword_254102A50 + 1) = 0xFFFFFFFFLL;
          qword_254102A60 = (uint64_t)v30;
          qword_254102A68 = 0;
          qword_254102A30 = (uint64_t)&off_24ED3B208;
          re::IntrospectionRegistry::add(v35, v36);
          re::getPrettyTypeName((re *)&qword_254102A30, (const re::IntrospectionBase *)&v173);
          if ((BYTE8(v173) & 1) != 0)
            v37 = v174;
          else
            v37 = (char *)&v173 + 9;
          if ((_QWORD)v173 && (BYTE8(v173) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v173 + 40))();
          v171 = *((_OWORD *)v30 + 2);
          v38 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v172);
          if (v38)
          {
            v39 = *v38;
            *((_QWORD *)&v170 + 1) = v39;
          }
          else
          {
            v175[0] = v171;
            re::TypeBuilder::beginListType((uint64_t)&v173, v172, 1, 0x28uLL, 8uLL, v175);
            re::TypeBuilder::setConstructor((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v173, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v173, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v173, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v173, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v173, v40);
          }
          xmmword_254102A50 = v170;
          re::StringID::destroyString((re::StringID *)v172);
        }
      }
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "m_commands";
      *(_QWORD *)(v41 + 16) = &qword_254102A30;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x2800000004;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_2541028E8 = v41;
      __cxa_guard_release(&qword_2541027E8);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2541028D0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SMAssetState>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SMAssetState>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SMAssetState>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SMAssetState>;
  re::IntrospectionRegistry::add(this, v3);
  v167 = v168;
}

double re::internal::defaultConstruct<re::SMAssetState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = &str_110;
  *(_DWORD *)(a3 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::SMAssetState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 80));
  re::DynamicArray<re::SMAssetStateCommand>::deinit(a3 + 40);
  return re::DynamicArray<re::SMAssetStateTransition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::SMAssetState>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = &str_110;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SMAssetState>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 80));
  re::DynamicArray<re::SMAssetStateCommand>::deinit(a1 + 40);
  return re::DynamicArray<re::SMAssetStateTransition>::deinit(a1);
}

double re::internal::defaultConstruct<re::SMAssetStateGraph>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = &str_110;
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_DWORD *)(a3 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_DWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = &str_110;
  *(_DWORD *)(a3 + 160) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::SMAssetStateGraph>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3 + 64;
  re::StringID::destroyString((re::StringID *)(a3 + 144));
  re::DynamicArray<re::SMAssetStateCommand>::deinit(a3 + 104);
  re::DynamicArray<re::SMAssetStateTransition>::deinit(v4);
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  return re::DynamicArray<re::SMAssetState>::deinit(a3);
}

double re::internal::defaultConstructV2<re::SMAssetStateGraph>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &str_110;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = &str_110;
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SMAssetStateGraph>(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 64;
  re::StringID::destroyString((re::StringID *)(a1 + 144));
  re::DynamicArray<re::SMAssetStateCommand>::deinit(a1 + 104);
  re::DynamicArray<re::SMAssetStateTransition>::deinit(v2);
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  return re::DynamicArray<re::SMAssetState>::deinit(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::SMAssetStateGraph>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  re::IntrospectionBase *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned __int8 v29;
  uint64_t *v30;
  re::IntrospectionBase *v31;
  int v32;
  re::IntrospectionRegistry *v33;
  const re::IntrospectionBase *v34;
  const char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44[2];
  __int128 v45;
  __int128 v46;
  const char *v47;

  v0 = atomic_load((unsigned __int8 *)&qword_254102890);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254102890))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254102AB0);
    qword_254102AB0 = (uint64_t)&off_24ED3B338;
    __cxa_guard_release(&qword_254102890);
  }
  if ((byte_254102785 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254102810;
    if (qword_254102810)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254102808);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254102808))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102E28, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254102E38 = 0;
      *(_QWORD *)&xmmword_254102E48 = 0;
      *((_QWORD *)&xmmword_254102E48 + 1) = 0xFFFFFFFFLL;
      qword_254102E28 = (uint64_t)&off_24ED7DAA8;
      qword_254102E58 = (uint64_t)"SMAssetStateGraph";
      dword_254102E60 = 0;
      xmmword_254102E68 = 0u;
      xmmword_254102E78 = 0u;
      xmmword_254102E88 = 0u;
      qword_254102E98 = 0;
      __cxa_guard_release(&qword_254102808);
    }
    qword_254102810 = (uint64_t)&qword_254102E28;
    *(_QWORD *)&v46 = 0x4E16780EA9971126;
    *((_QWORD *)&v46 + 1) = "SMAssetStateGraph";
    re::StringID::destroyString((re::StringID *)&v46);
    xmmword_254102E48 = v41;
    v4 = atomic_load((unsigned __int8 *)&qword_254102800);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254102800);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "m_name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 0x2800000001;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2541028F0 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::introspect_BOOL((re *)1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "m_hasAnyState";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x3800000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_2541028F8 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v23 = v22;
        v24 = (uint64_t *)qword_2541027F8;
        if (!qword_2541027F8)
        {
          v24 = re::allocInfo_SMAssetState((re *)v22);
          qword_2541027F8 = (uint64_t)v24;
          re::initInfo_SMAssetState((re *)v24, v25);
        }
        v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
        *(_DWORD *)v26 = 1;
        *(_QWORD *)(v26 + 8) = "m_anyState";
        *(_QWORD *)(v26 + 16) = v24;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 32) = 0x4000000003;
        *(_DWORD *)(v26 + 40) = 0;
        *(_QWORD *)(v26 + 48) = 0;
        *(_QWORD *)(v26 + 56) = 0;
        *(_DWORD *)(v26 + 64) = 0;
        qword_254102900 = v26;
        v27 = re::introspectionAllocator((re *)v26);
        v28 = v27;
        v29 = atomic_load((unsigned __int8 *)&qword_254102888);
        if ((v29 & 1) == 0)
        {
          v27 = (uint64_t *)__cxa_guard_acquire(&qword_254102888);
          if ((_DWORD)v27)
          {
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102A70, 0);
            *(_QWORD *)(v40 + 22) = 0;
            qword_254102A80 = 0;
            *(_QWORD *)&xmmword_254102A90 = 0;
            *((_QWORD *)&xmmword_254102A90 + 1) = 0xFFFFFFFFLL;
            qword_254102A70 = (uint64_t)&off_24ED1FA08;
            qword_254102AA8 = 0;
            re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254102AA0);
            qword_254102A70 = (uint64_t)&off_24ED3B2A0;
            __cxa_guard_release(&qword_254102888);
          }
        }
        if ((byte_254102784 & 1) == 0)
        {
          v30 = (uint64_t *)qword_2541027F8;
          if (qword_2541027F8
            || (v30 = re::allocInfo_SMAssetState((re *)v27),
                qword_2541027F8 = (uint64_t)v30,
                re::initInfo_SMAssetState((re *)v30, v31),
                (byte_254102784 & 1) == 0))
          {
            byte_254102784 = 1;
            v32 = *((_DWORD *)v30 + 6);
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102A70, 0);
            qword_254102A80 = 0x2800000003;
            dword_254102A88 = v32;
            word_254102A8C = 0;
            *(_QWORD *)&xmmword_254102A90 = 0;
            *((_QWORD *)&xmmword_254102A90 + 1) = 0xFFFFFFFFLL;
            qword_254102AA0 = (uint64_t)v30;
            qword_254102AA8 = 0;
            qword_254102A70 = (uint64_t)&off_24ED3B2A0;
            re::IntrospectionRegistry::add(v33, v34);
            re::getPrettyTypeName((re *)&qword_254102A70, (const re::IntrospectionBase *)&v46);
            if ((BYTE8(v46) & 1) != 0)
              v35 = v47;
            else
              v35 = (char *)&v46 + 9;
            if ((_QWORD)v46 && (BYTE8(v46) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v46 + 40))();
            v43 = *((_OWORD *)v30 + 2);
            v36 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
            if (v36)
            {
              v37 = *v36;
              *((_QWORD *)&v42 + 1) = v37;
            }
            else
            {
              v45 = v43;
              re::TypeBuilder::beginListType((uint64_t)&v46, v44, 1, 0x28uLL, 8uLL, &v45);
              re::TypeBuilder::setConstructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
              re::TypeBuilder::setDestructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
              re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v46, 1);
              re::TypeBuilder::setListAccessors((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
              re::TypeBuilder::setListIndexer((uint64_t)&v46, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
              re::TypeBuilder::setListIterator((uint64_t)&v46, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
              re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v38);
            }
            xmmword_254102A90 = v42;
            re::StringID::destroyString((re::StringID *)v44);
          }
        }
        v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
        *(_DWORD *)v39 = 1;
        *(_QWORD *)(v39 + 8) = "m_states";
        *(_QWORD *)(v39 + 16) = &qword_254102A70;
        *(_QWORD *)(v39 + 24) = 0;
        *(_QWORD *)(v39 + 32) = 4;
        *(_DWORD *)(v39 + 40) = 0;
        *(_QWORD *)(v39 + 48) = 0;
        *(_QWORD *)(v39 + 56) = 0;
        *(_DWORD *)(v39 + 64) = 0;
        qword_254102908 = v39;
        __cxa_guard_release(&qword_254102800);
      }
    }
    qword_254102E38 = 0xA800000008;
    v1 = &qword_254102E28;
    dword_254102E40 = 8;
    word_254102E44 = 0;
    dword_254102E60 = 4;
    *(_QWORD *)&xmmword_254102E68 = &qword_2541028F0;
    *((_QWORD *)&xmmword_254102E68 + 1) = re::internal::defaultConstruct<re::SMAssetStateGraph>;
    *(_QWORD *)&xmmword_254102E78 = re::internal::defaultDestruct<re::SMAssetStateGraph>;
    *(_QWORD *)&xmmword_254102E88 = 0;
    *((_QWORD *)&xmmword_254102E78 + 1) = 0;
    *((_QWORD *)&xmmword_254102E88 + 1) = re::internal::defaultConstructV2<re::SMAssetStateGraph>;
    qword_254102E98 = (uint64_t)re::internal::defaultDestructV2<re::SMAssetStateGraph>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254102E28, v3);
    v46 = v41;
    if ((byte_254102785 & 1) == 0)
    {
LABEL_7:
      byte_254102785 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102AB0, 0);
      qword_254102AC0 = 0x2800000003;
      dword_254102AC8 = v5;
      word_254102ACC = 0;
      *(_QWORD *)&xmmword_254102AD0 = 0;
      *((_QWORD *)&xmmword_254102AD0 + 1) = 0xFFFFFFFFLL;
      qword_254102AE0 = (uint64_t)v1;
      qword_254102AE8 = 0;
      qword_254102AB0 = (uint64_t)&off_24ED3B338;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254102AB0, (const re::IntrospectionBase *)&v46);
      if ((BYTE8(v46) & 1) != 0)
        v8 = v47;
      else
        v8 = (char *)&v46 + 9;
      if ((_QWORD)v46 && (BYTE8(v46) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v46 + 40))();
      v43 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v42 + 1) = v10;
      }
      else
      {
        v45 = v43;
        re::TypeBuilder::beginListType((uint64_t)&v46, v44, 1, 0x28uLL, 8uLL, &v45);
        re::TypeBuilder::setConstructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v46, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v46, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v46, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v11);
      }
      xmmword_254102AD0 = v42;
      re::StringID::destroyString((re::StringID *)v44);
    }
  }
}

void re::internal::defaultConstruct<re::SMAssetStateGraphGroup>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::SMAssetStateGraphGroup>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::SMAssetStateGraph>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::SMAssetStateGraphGroup>(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t *re::allocInfo_SMAssetStateGraphGroupCollection(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254102838);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254102838))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102F18, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254102F28 = 0;
    qword_254102F38 = 0;
    qword_254102F40 = 0xFFFFFFFFLL;
    qword_254102F18 = (uint64_t)&off_24ED7DAA8;
    qword_254102F48 = (uint64_t)"SMAssetStateGraphGroupCollection";
    dword_254102F50 = 0;
    xmmword_254102F58 = 0u;
    xmmword_254102F68 = 0u;
    xmmword_254102F78 = 0u;
    qword_254102F88 = 0;
    __cxa_guard_release(&qword_254102838);
  }
  return &qword_254102F18;
}

void re::initInfo_SMAssetStateGraphGroupCollection(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;

  v9[0] = 0x9807B33386548AD4;
  v9[1] = "SMAssetStateGraphGroupCollection";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  v4 = atomic_load((unsigned __int8 *)&qword_254102848);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254102848);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::SMAssetStateGraphGroup>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "stateGraphGroups";
      *(_QWORD *)(v7 + 16) = &qword_254102AF0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_254102840 = v7;
      __cxa_guard_release(&qword_254102848);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254102840;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SMAssetStateGraphGroupCollection>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SMAssetStateGraphGroupCollection>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SMAssetStateGraphGroupCollection>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SMAssetStateGraphGroupCollection>;
  re::IntrospectionRegistry::add(this, v3);
  v8 = v10;
}

void re::IntrospectionInfo<re::DynamicArray<re::SMAssetStateGraphGroup>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18[2];
  __int128 v19;
  const char *v20;
  __int128 v21;

  v0 = atomic_load((unsigned __int8 *)&qword_254102898);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254102898))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254102AF0);
    qword_254102AF0 = (uint64_t)&off_24ED3B3D0;
    __cxa_guard_release(&qword_254102898);
  }
  if ((byte_254102786 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254102830;
    if (qword_254102830)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254102818);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254102818))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102EA0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254102EB0 = 0;
      *(_QWORD *)&xmmword_254102EC0 = 0;
      *((_QWORD *)&xmmword_254102EC0 + 1) = 0xFFFFFFFFLL;
      qword_254102EA0 = (uint64_t)&off_24ED7DAA8;
      qword_254102ED0 = (uint64_t)"SMAssetStateGraphGroup";
      dword_254102ED8 = 0;
      xmmword_254102EE0 = 0u;
      xmmword_254102EF0 = 0u;
      xmmword_254102F00 = 0u;
      qword_254102F10 = 0;
      __cxa_guard_release(&qword_254102818);
    }
    qword_254102830 = (uint64_t)&qword_254102EA0;
    *(_QWORD *)&v21 = 0xEE39C57C083FC358;
    *((_QWORD *)&v21 + 1) = "SMAssetStateGraphGroup";
    re::StringID::destroyString((re::StringID *)&v21);
    xmmword_254102EC0 = v19;
    v4 = atomic_load((unsigned __int8 *)&qword_254102828);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254102828);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        re::IntrospectionInfo<re::DynamicArray<re::SMAssetStateGraph>>::get();
        v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = "stateGraphs";
        *(_QWORD *)(v15 + 16) = &qword_254102AB0;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 1;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        *(_DWORD *)(v15 + 64) = 0;
        qword_254102820 = v15;
        __cxa_guard_release(&qword_254102828);
      }
    }
    qword_254102EB0 = 0x2800000008;
    v1 = &qword_254102EA0;
    dword_254102EB8 = 8;
    word_254102EBC = 0;
    dword_254102ED8 = 1;
    *(_QWORD *)&xmmword_254102EE0 = &qword_254102820;
    *((_QWORD *)&xmmword_254102EE0 + 1) = re::internal::defaultConstruct<re::SMAssetStateGraphGroup>;
    *(_QWORD *)&xmmword_254102EF0 = re::internal::defaultDestruct<re::SMAssetStateGraphGroup>;
    *(_QWORD *)&xmmword_254102F00 = 0;
    *((_QWORD *)&xmmword_254102EF0 + 1) = 0;
    *((_QWORD *)&xmmword_254102F00 + 1) = re::internal::defaultConstructV2<re::SMAssetStateGraphGroup>;
    qword_254102F10 = (uint64_t)re::internal::defaultDestructV2<re::SMAssetStateGraphGroup>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254102EA0, v3);
    v21 = v19;
    if ((byte_254102786 & 1) == 0)
    {
LABEL_7:
      byte_254102786 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102AF0, 0);
      qword_254102B00 = 0x2800000003;
      dword_254102B08 = v5;
      word_254102B0C = 0;
      *(_QWORD *)&xmmword_254102B10 = 0;
      *((_QWORD *)&xmmword_254102B10 + 1) = 0xFFFFFFFFLL;
      qword_254102B20 = (uint64_t)v1;
      qword_254102B28 = 0;
      qword_254102AF0 = (uint64_t)&off_24ED3B3D0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254102AF0, (const re::IntrospectionBase *)&v19);
      if ((BYTE8(v19) & 1) != 0)
        v8 = v20;
      else
        v8 = (char *)&v19 + 9;
      if ((_QWORD)v19 && (BYTE8(v19) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v19 + 40))();
      v17 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v18);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v16 + 1) = v10;
      }
      else
      {
        v21 = v17;
        re::TypeBuilder::beginListType((uint64_t)&v19, v18, 1, 0x28uLL, 8uLL, &v21);
        re::TypeBuilder::setConstructor((uint64_t)&v19, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v19, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v19, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v19, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v19, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v19, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v19, v11);
      }
      xmmword_254102B10 = v16;
      re::StringID::destroyString((re::StringID *)v18);
    }
  }
}

void re::internal::defaultConstruct<re::SMAssetStateGraphGroupCollection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::SMAssetStateGraphGroupCollection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::SMAssetStateGraphGroupCollection>(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t *re::allocInfo_StateMachineAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254102858);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254102858))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102F90, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254102FA0 = 0;
    qword_254102FB0 = 0;
    qword_254102FB8 = 0xFFFFFFFFLL;
    qword_254102F90 = (uint64_t)&off_24ED7DAA8;
    qword_254102FC0 = (uint64_t)"StateMachineAsset";
    dword_254102FC8 = 0;
    xmmword_254102FD0 = 0u;
    xmmword_254102FE0 = 0u;
    xmmword_254102FF0 = 0u;
    qword_254103000 = 0;
    __cxa_guard_release(&qword_254102858);
  }
  return &qword_254102F90;
}

void re::initInfo_StateMachineAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  re::IntrospectionBase *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x1BF3F5A4A26CA3F4;
  v14[1] = "StateMachineAsset";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254102860);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254102860);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::StateMachineInitializationData>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "stateMachineInitializationData";
      *(_QWORD *)(v7 + 16) = &qword_254102B30;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_2541028A8 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      v9 = v8;
      v10 = (uint64_t *)qword_254102850;
      if (!qword_254102850)
      {
        v10 = re::allocInfo_SMAssetStateGraphGroupCollection((re *)v8);
        qword_254102850 = (uint64_t)v10;
        re::initInfo_SMAssetStateGraphGroupCollection((re *)v10, v11);
      }
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "assetStateGraphs";
      *(_QWORD *)(v12 + 16) = v10;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541028B0 = v12;
      __cxa_guard_release(&qword_254102860);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541028A8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::StateMachineAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::StateMachineAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::StateMachineAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::StateMachineAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::IntrospectionInfo<re::DynamicArray<re::StateMachineInitializationData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28[2];
  __int128 v29;
  const char *v30;
  __int128 v31;

  v0 = atomic_load((unsigned __int8 *)&qword_2541028A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541028A0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254102B30);
    qword_254102B30 = (uint64_t)&off_24ED3B468;
    __cxa_guard_release(&qword_2541028A0);
  }
  if ((byte_254102787 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254102798;
    if (qword_254102798)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254102788);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254102788))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102BD0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254102BE0 = 0;
      *(_QWORD *)&xmmword_254102BF0 = 0;
      *((_QWORD *)&xmmword_254102BF0 + 1) = 0xFFFFFFFFLL;
      qword_254102BD0 = (uint64_t)&off_24ED7DAA8;
      qword_254102C00 = (uint64_t)"StateMachineInitializationData";
      dword_254102C08 = 0;
      xmmword_254102C10 = 0u;
      xmmword_254102C20 = 0u;
      xmmword_254102C30 = 0u;
      qword_254102C40 = 0;
      __cxa_guard_release(&qword_254102788);
    }
    qword_254102798 = (uint64_t)&qword_254102BD0;
    *(_QWORD *)&v31 = 0x8634B6D7058CB40;
    *((_QWORD *)&v31 + 1) = "StateMachineInitializationData";
    re::StringID::destroyString((re::StringID *)&v31);
    xmmword_254102BF0 = v29;
    v4 = atomic_load((unsigned __int8 *)&qword_254102790);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254102790);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "layerName";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2541028B8 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "stateGraphName";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_2541028C0 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::IntrospectionInfo<re::StringID>::get(1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "initialStateName";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x2000000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_2541028C8 = v25;
        __cxa_guard_release(&qword_254102790);
      }
    }
    qword_254102BE0 = 0x3000000008;
    v1 = &qword_254102BD0;
    dword_254102BE8 = 8;
    word_254102BEC = 0;
    dword_254102C08 = 3;
    *(_QWORD *)&xmmword_254102C10 = &qword_2541028B8;
    *((_QWORD *)&xmmword_254102C10 + 1) = re::internal::defaultConstruct<re::StateMachineInitializationData>;
    *(_QWORD *)&xmmword_254102C20 = re::internal::defaultDestruct<re::StateMachineInitializationData>;
    *(_QWORD *)&xmmword_254102C30 = 0;
    *((_QWORD *)&xmmword_254102C20 + 1) = 0;
    *((_QWORD *)&xmmword_254102C30 + 1) = re::internal::defaultConstructV2<re::StateMachineInitializationData>;
    qword_254102C40 = (uint64_t)re::internal::defaultDestructV2<re::StateMachineInitializationData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254102BD0, v3);
    v31 = v29;
    if ((byte_254102787 & 1) == 0)
    {
LABEL_7:
      byte_254102787 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254102B30, 0);
      qword_254102B40 = 0x2800000003;
      dword_254102B48 = v5;
      word_254102B4C = 0;
      *(_QWORD *)&xmmword_254102B50 = 0;
      *((_QWORD *)&xmmword_254102B50 + 1) = 0xFFFFFFFFLL;
      qword_254102B60 = (uint64_t)v1;
      qword_254102B68 = 0;
      qword_254102B30 = (uint64_t)&off_24ED3B468;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254102B30, (const re::IntrospectionBase *)&v29);
      if ((BYTE8(v29) & 1) != 0)
        v8 = v30;
      else
        v8 = (char *)&v29 + 9;
      if ((_QWORD)v29 && (BYTE8(v29) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v29 + 40))();
      v27 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v28);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v26 + 1) = v10;
      }
      else
      {
        v31 = v27;
        re::TypeBuilder::beginListType((uint64_t)&v29, v28, 1, 0x28uLL, 8uLL, &v31);
        re::TypeBuilder::setConstructor((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v29, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v29, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v29, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v29, v11);
      }
      xmmword_254102B50 = v26;
      re::StringID::destroyString((re::StringID *)v28);
    }
  }
}

double re::internal::defaultConstruct<re::StateMachineAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::StateMachineAsset>(int a1, int a2, re::StateMachineAsset *this)
{
  re::StateMachineAsset::~StateMachineAsset(this);
}

double re::internal::defaultConstructV2<re::StateMachineAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t re::introspect_StateMachineAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateMachineAsset", (uint64_t (*)(re::internal *))re::allocInfo_StateMachineAsset, (re::IntrospectionBase *(*)(void))re::initInfo_StateMachineAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::StateMachineAsset>, this);
}

void re::StateMachineAssetLoader::~StateMachineAssetLoader(re::StateMachineAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

void re::StateGraph::~StateGraph(re::StateGraph *this)
{
  re::StateGraph::~StateGraph(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;

  re::StateGraph::deinit(this);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 3) = 0;
    ++*((_DWORD *)this + 12);
  }
  re::StringID::destroyString((re::StateGraph *)((char *)this + 8));
}

void re::StateMachineState::~StateMachineState(re::StateMachineState *this)
{
  re::StateMachineState::~StateMachineState(this);
  JUMPOUT(0x2276933B8);
}

{
  re::StringID *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED3AFE8;
  v2 = (re::StateMachineState *)((char *)this + 88);
  re::StateMachineState::deinit(this);
  re::StringID::destroyString(v2);
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 6) = 0;
    ++*((_DWORD *)this + 18);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::SMAssetStateTransition>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetStateTransition>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetStateTransition>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateTransition *,re::SMAssetStateTransition *,re::SMAssetStateTransition *>((uint64_t)&v17, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 96 * a1[2], a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = *(_QWORD *)(a2 + 32);
      v11 = a1[4];
      v12 = 96 * v9;
      v13 = 96 * v4;
      do
      {
        v14 = v11 + v12;
        re::DynamicArray<re::SMAssetTransitionCondition>::DynamicArray(v11 + v12, (uint64_t *)(v10 + v12));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 40), (const StringID *)(v10 + v12 + 40));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 56), (const StringID *)(v10 + v12 + 56));
        result = (uint64_t)re::StringID::StringID((re::StringID *)(v11 + v12 + 72), (const StringID *)(v10 + v12 + 72));
        v15 = *(_DWORD *)(v10 + v12 + 88);
        *(_BYTE *)(v14 + 92) = *(_BYTE *)(v10 + v12 + 92);
        *(_DWORD *)(v14 + 88) = v15;
        v13 -= 96;
        v10 += 96;
        v11 += 96;
      }
      while (v12 != v13);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateTransition *,re::SMAssetStateTransition *,re::SMAssetStateTransition *>((uint64_t)&v16, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 96 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = a1[4] + 96 * v4;
      v8 = 96 * v6 - 96 * v4;
      do
      {
        re::StringID::destroyString((re::StringID *)(v7 + 72));
        re::StringID::destroyString((re::StringID *)(v7 + 56));
        re::StringID::destroyString((re::StringID *)(v7 + 40));
        result = re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v7);
        v7 += 96;
        v8 -= 96;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

_QWORD *re::DynamicArray<re::SMAssetStateTransition>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::SMAssetStateTransition>(v5[4], v5[4] + 96 * v5[2], v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::SMAssetStateTransition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::SMAssetStateTransition>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::StringID *v12;
  re::StringID *v13;
  re::StringID *v14;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = v5 + v6;
      v8 = a3 + v6;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 24) = 0;
      v9 = *(_QWORD *)(v5 + v6 + 8);
      *(_QWORD *)v8 = *(_QWORD *)(v5 + v6);
      *(_QWORD *)(v8 + 8) = v9;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      v10 = *(_QWORD *)(a3 + v6 + 16);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + v6 + 16);
      *(_QWORD *)(v7 + 16) = v10;
      v11 = *(_QWORD *)(a3 + v6 + 32);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v5 + v6 + 32);
      *(_QWORD *)(v7 + 32) = v11;
      *(_DWORD *)(v7 + 24) = *(_DWORD *)(v5 + v6 + 24) + 1;
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + v6 + 24) + 1;
      v12 = (re::StringID *)(v5 + v6 + 40);
      LOBYTE(v11) = *(_QWORD *)v12;
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(a3 + v6 + 40) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v12 & 1;
      *(_QWORD *)(v8 + 40) = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(v5 + v6 + 48);
      *(_QWORD *)(v7 + 48) = &str_110;
      *(_QWORD *)v12 = 0;
      v13 = (re::StringID *)(v5 + v6 + 56);
      LOBYTE(v11) = *(_QWORD *)v13;
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(a3 + v6 + 56) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v13 & 1;
      *(_QWORD *)(v8 + 56) = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
      *(_QWORD *)(v8 + 64) = *(_QWORD *)(v5 + v6 + 64);
      *(_QWORD *)(v7 + 64) = &str_110;
      *(_QWORD *)v13 = 0;
      v14 = (re::StringID *)(v5 + v6 + 72);
      LOBYTE(v11) = *(_QWORD *)v14;
      *(_QWORD *)(v8 + 72) = *(_QWORD *)(a3 + v6 + 72) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v14 & 1;
      *(_QWORD *)(v8 + 72) = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
      *(_QWORD *)(v8 + 80) = *(_QWORD *)(v5 + v6 + 80);
      *(_QWORD *)(v7 + 80) = &str_110;
      *(_QWORD *)v14 = 0;
      LODWORD(v11) = *(_DWORD *)(v5 + v6 + 88);
      *(_BYTE *)(v8 + 92) = *(_BYTE *)(v5 + v6 + 92);
      *(_DWORD *)(v8 + 88) = v11;
      re::StringID::destroyString(v14);
      re::StringID::destroyString(v13);
      re::StringID::destroyString(v12);
      result = re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v5 + v6);
      v6 += 96;
    }
    while (v7 + 96 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetTransitionCondition>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 40);
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateTransition *,re::SMAssetStateTransition *,re::SMAssetStateTransition *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    v9 = a2 + v7;
    re::DynamicArray<re::SMAssetTransitionCondition>::operator=(a4 + v7, (uint64_t *)(a2 + v7));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 40), (uint64_t *)(a2 + v7 + 40));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 56), (uint64_t *)(a2 + v7 + 56));
    re::StringID::operator=((unint64_t *)(a4 + v7 + 72), (uint64_t *)(a2 + v7 + 72));
    v10 = *(_DWORD *)(a2 + v7 + 88);
    *(_BYTE *)(v8 + 92) = *(_BYTE *)(a2 + v7 + 92);
    *(_DWORD *)(v8 + 88) = v10;
    v7 += 96;
  }
  while (v9 + 96 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::SMAssetTransitionCondition>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetTransitionCondition>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SMAssetTransitionCondition>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetTransitionCondition>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::SMAssetTransitionCondition>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::StringID *v11;
  uint64_t v12;
  re::StringID *v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 40 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = 5 * v8;
      v10 = *(_QWORD *)(a2 + 32) + 8 * v9;
      v11 = (re::StringID *)(a1[4] + 8 * v9);
      v12 = 40 * v4 - 8 * v9;
      do
      {
        v13 = re::StringID::StringID(v11, (const StringID *)v10);
        v14 = *(_OWORD *)(v10 + 16);
        *(_QWORD *)((char *)v13 + 30) = *(_QWORD *)(v10 + 30);
        *((_OWORD *)v13 + 1) = v14;
        v10 += 40;
        v11 = (re::StringID *)((char *)v13 + 40);
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 40 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = (re::StringID *)(a1[4] + 40 * v4);
      v7 = 40 * v5 - 40 * v4;
      do
      {
        re::StringID::destroyString(v6);
        v6 = (re::StringID *)((char *)v6 + 40);
        v7 -= 40;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

void re::DynamicArray<re::SMAssetTransitionCondition>::clear(uint64_t a1)
{
  uint64_t v2;
  re::StringID *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::StringID **)(a1 + 32);
    v4 = 40 * v2;
    do
    {
      re::StringID::destroyString(v3);
      v3 = (re::StringID *)((char *)v3 + 40);
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  __int128 v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[5 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v13 = *((_OWORD *)v8 + 1);
          *(unint64_t *)((char *)v11 + 30) = *(uint64_t *)((char *)v8 + 30);
          *((_OWORD *)v11 + 1) = v13;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 5;
          v11 += 5;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,re::SMAssetTransitionCondition *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::StringID::operator=((unint64_t *)a3, (uint64_t *)v4);
      v6 = *(_OWORD *)(v4 + 16);
      *(_QWORD *)(a3 + 30) = *(_QWORD *)(v4 + 30);
      *(_OWORD *)(a3 + 16) = v6;
      v4 += 40;
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::SMAssetTransitionCondition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetTransitionCondition>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::SMAssetStateCommand>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetStateCommand>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

re::SMAssetStateCommand *re::DynamicArray<re::SMAssetStateCommand>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  re::SMAssetStateCommand *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetStateCommand>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateCommand *,re::SMAssetStateCommand *,re::SMAssetStateCommand *>((uint64_t)&v10, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 424 * a1[2], a1[4]);
    result = re::ObjectHelper::copyConstruct<re::SMAssetStateCommand>((re::StringID *)(a1[4] + 424 * a1[2]), *(_QWORD *)(a2 + 32) + 424 * a1[2], *(_QWORD *)(a2 + 32) + 424 * v4);
  }
  else
  {
    result = (re::SMAssetStateCommand *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateCommand *,re::SMAssetStateCommand *,re::SMAssetStateCommand *>((uint64_t)&v9, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 424 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      result = (re::SMAssetStateCommand *)(a1[4] + 424 * v4);
      v7 = 424 * v6 - 424 * v4;
      do
      {
        re::SMAssetStateCommand::~SMAssetStateCommand(result);
        result = (re::SMAssetStateCommand *)(v8 + 424);
        v7 -= 424;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

_QWORD *re::DynamicArray<re::SMAssetStateCommand>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::SMAssetStateCommand *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SMAssetStateCommand>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x1A8uLL))
        {
          v2 = 424 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 424 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 424, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::SMAssetStateCommand *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 424 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::SMAssetStateCommand::SMAssetStateCommand(v11, (uint64_t)v8);
          re::SMAssetStateCommand::~SMAssetStateCommand(v8);
          v8 = (re::SMAssetStateCommand *)((char *)v8 + 424);
          v11 += 424;
          v10 -= 424;
        }
        while (v10);
        v8 = (re::SMAssetStateCommand *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::SMAssetStateCommand *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::SMAssetStateCommand::SMAssetStateCommand(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v3;
  v4 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 24);
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 64) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v6;
  v7 = *(_QWORD *)(result + 72);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v7;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(result + 64);
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 104) = 0;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 88) = v8;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v9 = *(_QWORD *)(result + 96);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v9;
  v10 = *(_QWORD *)(result + 112);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v10;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(result + 104);
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_DWORD *)(result + 144) = 0;
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 128) = v11;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v12 = *(_QWORD *)(result + 136);
  *(_QWORD *)(result + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v12;
  v13 = *(_QWORD *)(result + 152);
  *(_QWORD *)(result + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v13;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(result + 144);
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 184) = 0;
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(result + 168) = v14;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v15 = *(_QWORD *)(result + 176);
  *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = v15;
  v16 = *(_QWORD *)(result + 192);
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = v16;
  ++*(_DWORD *)(a2 + 184);
  ++*(_DWORD *)(result + 184);
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_DWORD *)(result + 224) = 0;
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(result + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(result + 208) = v17;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v18 = *(_QWORD *)(result + 216);
  *(_QWORD *)(result + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = v18;
  v19 = *(_QWORD *)(result + 232);
  *(_QWORD *)(result + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = v19;
  ++*(_DWORD *)(a2 + 224);
  ++*(_DWORD *)(result + 224);
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_DWORD *)(result + 264) = 0;
  v20 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(result + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(result + 248) = v20;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  v21 = *(_QWORD *)(result + 256);
  *(_QWORD *)(result + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = v21;
  v22 = *(_QWORD *)(result + 272);
  *(_QWORD *)(result + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = v22;
  ++*(_DWORD *)(a2 + 264);
  ++*(_DWORD *)(result + 264);
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_DWORD *)(result + 304) = 0;
  v23 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(result + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(result + 288) = v23;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  v24 = *(_QWORD *)(result + 296);
  *(_QWORD *)(result + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = v24;
  v25 = *(_QWORD *)(result + 312);
  *(_QWORD *)(result + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = v25;
  ++*(_DWORD *)(a2 + 304);
  ++*(_DWORD *)(result + 304);
  *(_QWORD *)(result + 352) = 0;
  *(_QWORD *)(result + 328) = 0;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_DWORD *)(result + 344) = 0;
  v26 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(result + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(result + 328) = v26;
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  v27 = *(_QWORD *)(result + 336);
  *(_QWORD *)(result + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = v27;
  v28 = *(_QWORD *)(result + 352);
  *(_QWORD *)(result + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 352) = v28;
  ++*(_DWORD *)(a2 + 344);
  ++*(_DWORD *)(result + 344);
  *(_QWORD *)(result + 392) = 0;
  *(_QWORD *)(result + 368) = 0;
  *(_QWORD *)(result + 376) = 0;
  *(_QWORD *)(result + 360) = 0;
  *(_DWORD *)(result + 384) = 0;
  v29 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(result + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(result + 368) = v29;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  v30 = *(_QWORD *)(result + 376);
  *(_QWORD *)(result + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = v30;
  v31 = *(_QWORD *)(result + 392);
  *(_QWORD *)(result + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 392) = v31;
  ++*(_DWORD *)(a2 + 384);
  ++*(_DWORD *)(result + 384);
  *(_BYTE *)(result + 400) = *(_BYTE *)(a2 + 400);
  v32 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(result + 408) = *(_QWORD *)(result + 408) & 0xFFFFFFFFFFFFFFFELL | v32 & 1;
  *(_QWORD *)(result + 408) = *(_QWORD *)(a2 + 408) & 0xFFFFFFFFFFFFFFFELL | v32 & 1;
  *(_QWORD *)(result + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 408) = 0;
  *(_QWORD *)(a2 + 416) = &str_110;
  return result;
}

void re::SMAssetStateCommand::~SMAssetStateCommand(re::SMAssetStateCommand *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  re::StringID::destroyString((re::SMAssetStateCommand *)((char *)this + 408));
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 360);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 320);
  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    if (*((_QWORD *)this + 39))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 35) = 0;
    ++*((_DWORD *)this + 76);
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 240);
  v3 = *((_QWORD *)this + 25);
  if (v3)
  {
    if (*((_QWORD *)this + 29))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
    *((_QWORD *)this + 25) = 0;
    ++*((_DWORD *)this + 56);
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 160);
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 15) = 0;
    ++*((_DWORD *)this + 36);
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 80);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    ++*((_DWORD *)this + 16);
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)this);
}

re::StringID *re::ObjectHelper::copyConstruct<re::SMAssetStateCommand>(re::StringID *result, uint64_t a2, uint64_t a3)
{
  re::StringID *v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v5 = result;
    v6 = 0;
    do
    {
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6, (uint64_t *)(a2 + v6));
      re::DynamicArray<char const*>::DynamicArray((uint64_t)v5 + v6 + 40, (uint64_t *)(a2 + v6 + 40));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 80, (uint64_t *)(a2 + v6 + 80));
      re::DynamicArray<float>::DynamicArray((uint64_t)v5 + v6 + 120, (uint64_t *)(a2 + v6 + 120));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 160, (uint64_t *)(a2 + v6 + 160));
      re::DynamicArray<char const*>::DynamicArray((uint64_t)v5 + v6 + 200, (uint64_t *)(a2 + v6 + 200));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 240, (uint64_t *)(a2 + v6 + 240));
      re::DynamicArray<BOOL>::DynamicArray((uint64_t)v5 + v6 + 280, (uint64_t *)(a2 + v6 + 280));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 320, (uint64_t *)(a2 + v6 + 320));
      re::DynamicArray<re::StringID>::DynamicArray((uint64_t)v5 + v6 + 360, (uint64_t *)(a2 + v6 + 360));
      *((_BYTE *)v5 + v6 + 400) = *(_BYTE *)(a2 + v6 + 400);
      result = re::StringID::StringID((re::StringID *)((char *)v5 + v6 + 408), (const StringID *)(a2 + v6 + 408));
      v6 += 424;
    }
    while (a2 + v6 != a3);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateCommand *,re::SMAssetStateCommand *,re::SMAssetStateCommand *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    re::DynamicArray<re::StringID>::operator=(a4, (uint64_t *)v5);
    re::DynamicArray<unsigned long long>::operator=(a4 + 40, (uint64_t *)(v5 + 40));
    re::DynamicArray<re::StringID>::operator=(a4 + 80, (uint64_t *)(v5 + 80));
    re::DynamicArray<float>::operator=(a4 + 120, (uint64_t *)(v5 + 120));
    re::DynamicArray<re::StringID>::operator=(a4 + 160, (uint64_t *)(v5 + 160));
    re::DynamicArray<unsigned long long>::operator=(a4 + 200, (uint64_t *)(v5 + 200));
    re::DynamicArray<re::StringID>::operator=(a4 + 240, (uint64_t *)(v5 + 240));
    re::DynamicArray<BOOL>::operator=(a4 + 280, (uint64_t *)(v5 + 280));
    re::DynamicArray<re::StringID>::operator=(a4 + 320, (uint64_t *)(v5 + 320));
    re::DynamicArray<re::StringID>::operator=(a4 + 360, (uint64_t *)(v5 + 360));
    *(_BYTE *)(a4 + 400) = *(_BYTE *)(v5 + 400);
    re::StringID::operator=((unint64_t *)(a4 + 408), (uint64_t *)(v5 + 408));
    a4 += 424;
    v5 += 424;
  }
  while (v5 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::SMAssetStateCommand>::deinit(uint64_t a1)
{
  uint64_t result;
  re::SMAssetStateCommand *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::SMAssetStateCommand **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 424 * v4;
        do
        {
          re::SMAssetStateCommand::~SMAssetStateCommand(v3);
          v3 = (re::SMAssetStateCommand *)((char *)v3 + 424);
          v5 -= 424;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::SMAssetStateCommand **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::SMAssetStateCommand *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 96 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 72));
          re::StringID::destroyString((re::StringID *)(v3 + 56));
          re::StringID::destroyString((re::StringID *)(v3 + 40));
          re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v3);
          v3 += 96;
          v5 -= 96;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          re::DynamicArray<re::SMAssetStateGraph>::deinit(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraph>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 168 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 144));
          re::DynamicArray<re::SMAssetStateCommand>::deinit(v3 + 104);
          re::DynamicArray<re::SMAssetStateTransition>::deinit(v3 + 64);
          re::StringID::destroyString((re::StringID *)(v3 + 40));
          re::DynamicArray<re::SMAssetState>::deinit(v3);
          v3 += 168;
          v5 -= 168;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetState>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 104 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 80));
          re::DynamicArray<re::SMAssetStateCommand>::deinit(v3 + 40);
          re::DynamicArray<re::SMAssetStateTransition>::deinit(v3);
          v3 += 104;
          v5 -= 104;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::StateMachineInitializationData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::StateMachineInitializationData *,re::StateMachineInitializationData *,re::StateMachineInitializationData *>(*(unint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 48 * *(_QWORD *)(a1 + 16)), *(unint64_t **)(a1 + 32));
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 48 * v8;
      v12 = 48 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        re::StringID::StringID((re::StringID *)(v10 + v11 + 16), (const StringID *)(v9 + v11 + 16));
        re::StringID::StringID((re::StringID *)(v10 + v11 + 32), (const StringID *)(v9 + v11 + 32));
        v9 += 48;
        v12 -= 48;
        v10 += 48;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::StateMachineInitializationData *,re::StateMachineInitializationData *,re::StateMachineInitializationData *>(*(unint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 48 * v4), *(unint64_t **)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 16);
    if (v4 != v5)
    {
      v6 = *(_QWORD *)(a1 + 32) + 48 * v4;
      v7 = 48 * v5 - 48 * v4;
      do
      {
        re::StringID::destroyString((re::StringID *)(v6 + 32));
        re::StringID::destroyString((re::StringID *)(v6 + 16));
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 48;
        v7 -= 48;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void re::DynamicArray<re::StateMachineInitializationData>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 48 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 32));
      re::StringID::destroyString((re::StringID *)(v3 + 16));
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

unint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::StateMachineInitializationData *,re::StateMachineInitializationData *,re::StateMachineInitializationData *>(unint64_t *result, uint64_t *a2, unint64_t *a3)
{
  uint64_t *v5;

  if (result != (unint64_t *)a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      re::StringID::operator=(a3, v5);
      re::StringID::operator=(a3 + 2, v5 + 2);
      result = re::StringID::operator=(a3 + 4, v5 + 4);
      v5 += 6;
      a3 += 6;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::FixedArray<re::DynamicArray<re::StateGraph *>>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 24) = 0;
      result += 40;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,0>(*(_QWORD *)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * a1[2]), a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = 5 * v9;
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 8 * v10);
      result = a1[4] + 8 * v10;
      v12 = 40 * v4 - 8 * v10;
      do
      {
        v13 = re::DynamicArray<re::SMAssetStateGraph>::DynamicArray(result, v11);
        v11 += 5;
        result = v13 + 40;
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,0>(*(_QWORD *)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * v4), a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = a1[4] + 40 * v4;
      v8 = 40 * v6 - 40 * v4;
      do
      {
        result = re::DynamicArray<re::SMAssetStateGraph>::deinit(v7);
        v7 += 40;
        v8 -= 40;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = 40 * v2;
    do
    {
      result = re::DynamicArray<re::SMAssetStateGraph>::deinit(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

_QWORD *re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 40 * v9;
        v11 = v7 + 4;
        do
        {
          *v11 = 0;
          *(v11 - 3) = 0;
          *(v11 - 2) = 0;
          *(v11 - 4) = 0;
          *((_DWORD *)v11 - 2) = 0;
          v12 = *(_QWORD *)(v8 + 8);
          *(v11 - 4) = *(_QWORD *)v8;
          *(v11 - 3) = v12;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v13 = *(v11 - 2);
          *(v11 - 2) = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = v13;
          v14 = *v11;
          *v11 = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 2);
          re::DynamicArray<re::SMAssetStateGraph>::deinit(v8);
          v11 += 5;
          v8 += 40;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,re::SMAssetStateGraphGroup *,0>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      if (v5 != (uint64_t *)a3)
      {
        v6 = *v5;
        if (*(_QWORD *)a3)
        {
          if (v6)
          {
            result = re::DynamicArray<re::SMAssetStateGraph>::copy((_QWORD *)a3, (uint64_t)v5);
            ++*(_DWORD *)(a3 + 24);
          }
          else
          {
            result = re::DynamicArray<re::SMAssetStateGraph>::clear(a3);
          }
        }
        else if (v6)
        {
          v7 = v5[2];
          *(_QWORD *)a3 = v6;
          re::DynamicArray<re::SMAssetStateGraph>::setCapacity((_QWORD *)a3, v7);
          ++*(_DWORD *)(a3 + 24);
          result = re::DynamicArray<re::SMAssetStateGraph>::copy((_QWORD *)a3, (uint64_t)v5);
        }
      }
      v5 += 5;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraph>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetStateGraph>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateGraph *,re::SMAssetStateGraph *,re::SMAssetStateGraph *>((uint64_t)&v17, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 168 * a1[2], a1[4]);
    v10 = a1[2];
    if (v10 != v4)
    {
      v11 = *(_QWORD *)(a2 + 32);
      v12 = a1[4];
      v13 = 168 * v10;
      v14 = 168 * v4;
      do
      {
        v15 = v12 + v13;
        re::DynamicArray<re::SMAssetState>::DynamicArray(v12 + v13, (uint64_t *)(v11 + v13));
        re::StringID::StringID((re::StringID *)(v12 + v13 + 40), (const StringID *)(v11 + v13 + 40));
        *(_BYTE *)(v15 + 56) = *(_BYTE *)(v11 + v13 + 56);
        re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(v12 + v13 + 64, (uint64_t *)(v11 + v13 + 64));
        re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(v12 + v13 + 104, (uint64_t *)(v11 + v13 + 104));
        result = (uint64_t)re::StringID::StringID((re::StringID *)(v12 + v13 + 144), (const StringID *)(v11 + v13 + 144));
        *(_DWORD *)(v15 + 160) = *(_DWORD *)(v11 + v13 + 160);
        v14 -= 168;
        v11 += 168;
        v12 += 168;
      }
      while (v13 != v14);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateGraph *,re::SMAssetStateGraph *,re::SMAssetStateGraph *>((uint64_t)&v16, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 168 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = a1[4];
      v8 = 168 * v4;
      v9 = 168 * v6;
      do
      {
        re::StringID::destroyString((re::StringID *)(v7 + v8 + 144));
        re::DynamicArray<re::SMAssetStateCommand>::deinit(v7 + v8 + 104);
        re::DynamicArray<re::SMAssetStateTransition>::deinit(v7 + v8 + 64);
        re::StringID::destroyString((re::StringID *)(v7 + v8 + 40));
        result = re::DynamicArray<re::SMAssetState>::deinit(v7 + v8);
        v9 -= 168;
        v7 += 168;
      }
      while (v8 != v9);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraph>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = 168 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 144));
      re::DynamicArray<re::SMAssetStateCommand>::deinit(v3 + 104);
      re::DynamicArray<re::SMAssetStateTransition>::deinit(v3 + 64);
      re::StringID::destroyString((re::StringID *)(v3 + 40));
      result = re::DynamicArray<re::SMAssetState>::deinit(v3);
      v3 += 168;
      v4 -= 168;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

_QWORD *re::DynamicArray<re::SMAssetStateGraph>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SMAssetStateGraph>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA8uLL))
        {
          v2 = 168 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 168 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 168, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 168 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::SMAssetStateGraph>(v8, v11);
          v8 += 168;
          v11 += 168;
          v10 -= 168;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::SMAssetStateGraph>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::StringID *v15;
  uint64_t v16;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  ++*(_DWORD *)(a1 + 24);
  ++*(_DWORD *)(a2 + 24);
  v6 = (re::StringID *)(a1 + 40);
  LOBYTE(v3) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = &str_110;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v7 = a1 + 64;
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v8;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v10;
  ++*(_DWORD *)(a1 + 88);
  ++*(_DWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 128) = 0;
  v11 = a1 + 104;
  v12 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a2 + 112) = v12;
  *(_QWORD *)(a1 + 112) = 0;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v13;
  v14 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v14;
  ++*(_DWORD *)(a1 + 128);
  ++*(_DWORD *)(a2 + 128);
  v16 = *(_QWORD *)(a1 + 144);
  v15 = (re::StringID *)(a1 + 144);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(_QWORD *)(a2 + 144) = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = &str_110;
  *(_QWORD *)v15 = 0;
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 160);
  re::StringID::destroyString(v15);
  re::DynamicArray<re::SMAssetStateCommand>::deinit(v11);
  re::DynamicArray<re::SMAssetStateTransition>::deinit(v7);
  re::StringID::destroyString(v6);
  return re::DynamicArray<re::SMAssetState>::deinit(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetStateGraph *,re::SMAssetStateGraph *,re::SMAssetStateGraph *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    re::DynamicArray<re::SMAssetState>::operator=(a4, (uint64_t *)v5);
    re::StringID::operator=((unint64_t *)(a4 + 40), (uint64_t *)(v5 + 40));
    *(_BYTE *)(a4 + 56) = *(_BYTE *)(v5 + 56);
    re::DynamicArray<re::SMAssetStateTransition>::operator=(a4 + 64, (uint64_t *)(v5 + 64));
    re::DynamicArray<re::SMAssetStateCommand>::operator=(a4 + 104, (uint64_t *)(v5 + 104));
    re::StringID::operator=((unint64_t *)(a4 + 144), (uint64_t *)(v5 + 144));
    *(_DWORD *)(a4 + 160) = *(_DWORD *)(v5 + 160);
    a4 += 168;
    v5 += 168;
  }
  while (v5 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::SMAssetState>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetState>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SMAssetState>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::SMAssetState>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetState>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetState>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::SMAssetState>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetState *,re::SMAssetState *,re::SMAssetState *>((uint64_t)&v15, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 104 * a1[2], a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = *(_QWORD *)(a2 + 32);
      v11 = a1[4];
      v12 = 104 * v9;
      v13 = 104 * v4;
      do
      {
        re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(v11 + v12, (uint64_t *)(v10 + v12));
        re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(v11 + v12 + 40, (uint64_t *)(v10 + v12 + 40));
        result = (uint64_t)re::StringID::StringID((re::StringID *)(v11 + v12 + 80), (const StringID *)(v10 + v12 + 80));
        *(_DWORD *)(v11 + v12 + 96) = *(_DWORD *)(v10 + v12 + 96);
        v13 -= 104;
        v10 += 104;
        v11 += 104;
      }
      while (v12 != v13);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetState *,re::SMAssetState *,re::SMAssetState *>((uint64_t)&v14, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 104 * v4, a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = a1[4] + 104 * v4;
      v8 = -104 * v4 + 104 * v6;
      do
      {
        re::StringID::destroyString((re::StringID *)(v7 + 80));
        re::DynamicArray<re::SMAssetStateCommand>::deinit(v7 + 40);
        result = re::DynamicArray<re::SMAssetStateTransition>::deinit(v7);
        v7 += 104;
        v8 -= 104;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t re::DynamicArray<re::SMAssetState>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = 104 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 80));
      re::DynamicArray<re::SMAssetStateCommand>::deinit(v3 + 40);
      result = re::DynamicArray<re::SMAssetStateTransition>::deinit(v3);
      v3 += 104;
      v4 -= 104;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

_QWORD *re::DynamicArray<re::SMAssetState>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x68uLL))
        {
          v2 = 104 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 104 * a2, 8);
          if (result)
          {
            v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::SMAssetState>(v5[4], v5[4] + 104 * v5[2], v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 104, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::SMAssetState>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::SMAssetState>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v4 = result;
    v5 = a3 + 48;
    do
    {
      *(_QWORD *)(v5 - 16) = 0;
      *(_QWORD *)(v5 - 40) = 0;
      *(_QWORD *)(v5 - 32) = 0;
      *(_QWORD *)(v5 - 48) = 0;
      *(_DWORD *)(v5 - 24) = 0;
      v6 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v5 - 48) = *(_QWORD *)v4;
      *(_QWORD *)(v5 - 40) = v6;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      v7 = *(_QWORD *)(v5 - 32);
      *(_QWORD *)(v5 - 32) = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 16) = v7;
      v8 = *(_QWORD *)(v5 - 16);
      *(_QWORD *)(v5 - 16) = *(_QWORD *)(v4 + 32);
      *(_QWORD *)(v4 + 32) = v8;
      ++*(_DWORD *)(v4 + 24);
      ++*(_DWORD *)(v5 - 24);
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 - 8) = 0;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_DWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 - 8) = *(_QWORD *)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)v5 = *(_QWORD *)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      v9 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 56);
      *(_QWORD *)(v4 + 56) = v9;
      v10 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = *(_QWORD *)(v4 + 72);
      *(_QWORD *)(v4 + 72) = v10;
      ++*(_DWORD *)(v4 + 64);
      ++*(_DWORD *)(v5 + 16);
      LOBYTE(v10) = *(_QWORD *)(v4 + 80);
      *(_QWORD *)(v5 + 32) = *(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v4 + 80) & 1;
      *(_QWORD *)(v5 + 32) = *(_QWORD *)(v4 + 80) & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v4 + 88);
      *(_QWORD *)(v4 + 88) = &str_110;
      *(_QWORD *)(v4 + 80) = 0;
      *(_DWORD *)(v5 + 48) = *(_DWORD *)(v4 + 96);
      re::StringID::destroyString((re::StringID *)(v4 + 80));
      re::DynamicArray<re::SMAssetStateCommand>::deinit(v4 + 40);
      result = re::DynamicArray<re::SMAssetStateTransition>::deinit(v4);
      v5 += 104;
      v4 += 104;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SMAssetState *,re::SMAssetState *,re::SMAssetState *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    re::DynamicArray<re::SMAssetStateTransition>::operator=(a4, (uint64_t *)v5);
    re::DynamicArray<re::SMAssetStateCommand>::operator=(a4 + 40, (uint64_t *)(v5 + 40));
    re::StringID::operator=((unint64_t *)(a4 + 80), (uint64_t *)(v5 + 80));
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(v5 + 96);
    a4 += 104;
    v5 += 104;
  }
  while (v5 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetStateTransition>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SMAssetStateTransition>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::SMAssetStateTransition>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetStateTransition>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateCommand>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SMAssetStateCommand>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SMAssetStateCommand>::clear((re::SMAssetStateCommand *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::SMAssetStateCommand>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SMAssetStateCommand>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateTransition>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = 96 * v2;
    do
    {
      re::StringID::destroyString((re::StringID *)(v3 + 72));
      re::StringID::destroyString((re::StringID *)(v3 + 56));
      re::StringID::destroyString((re::StringID *)(v3 + 40));
      result = re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v3);
      v3 += 96;
      v4 -= 96;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

re::SMAssetStateCommand *re::DynamicArray<re::SMAssetStateCommand>::clear(re::SMAssetStateCommand *result)
{
  re::SMAssetStateCommand *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::SMAssetStateCommand *)*((_QWORD *)result + 4);
    v3 = 424 * v2;
    do
    {
      re::SMAssetStateCommand::~SMAssetStateCommand(result);
      result = (re::SMAssetStateCommand *)(v4 + 424);
      v3 -= 424;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::DynamicArray<re::SMAssetState>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::SMAssetState>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetState>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::SMAssetStateGraph>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::SMAssetStateGraph>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::SMAssetStateGraph>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::StateMachineAsset::~StateMachineAsset(re::StateMachineAsset *this)
{
  re::StateMachineAsset::deinit(this);
  re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit((_QWORD *)this + 10);
  re::DynamicArray<re::SMAssetStateGraphGroup>::deinit((uint64_t)this + 40);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)this);
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::SMAssetTransitionCondition>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  uint64_t v9;
  re::IntrospectionBase *v10;
  _QWORD v12[5];

  memset(&v12[2], 0, 24);
  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = *((_QWORD *)this + 4) + 40 * v8;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = &str_110;
  v12[0] = 0;
  v12[1] = &str_110;
  *(_OWORD *)(v9 + 16) = *(_OWORD *)&v12[2];
  *(_QWORD *)(v9 + 30) = *(_QWORD *)((char *)&v12[3] + 6);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::StringID *)v12);
  v10 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 40 * *((_QWORD *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetTransitionCondition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

void re::DynamicArray<re::SMAssetTransitionCondition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 40 * a2;
    v9 = a2;
    do
    {
      re::StringID::destroyString((re::StringID *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 40;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 40 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_BYTE *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 30) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::SMAssetTransitionCondition>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SMAssetTransitionCondition>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::SMAssetTransitionCondition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 40 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetTransitionCondition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<long long>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<long long>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<long long>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<long long>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<long long>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<float *>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<long long>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<double>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<long long>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  re::IntrospectionBase *v9;

  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<float *>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 8 * v8);
  *(_QWORD *)v9 = 0;
  *((_QWORD *)this + 2) = v8 + 1;
  ++*((_DWORD *)this + 6);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<long long>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<long long>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<float *>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<double>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 8 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 8 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateTransition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetStateTransition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SMAssetStateTransition>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateTransition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateTransition>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateTransition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SMAssetStateTransition>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateTransition>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::SMAssetStateTransition>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetStateTransition>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  re::IntrospectionBase *v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = 0;
  v8 = 0uLL;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v9 = *((_QWORD *)this + 2);
  if (v9 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateTransition>::growCapacity(this, v9 + 1);
    v8 = 0uLL;
    v9 = *((_QWORD *)this + 2);
  }
  v10 = *((_QWORD *)this + 4) + 96 * v9;
  *(_OWORD *)v10 = v8;
  v14 = v8;
  *(_QWORD *)(v10 + 16) = 0;
  v15 = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *((_QWORD *)&v16 + 1) = 0;
  LODWORD(v16) = 1;
  *(_DWORD *)(v10 + 24) = 1;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = &str_110;
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = &str_110;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = &str_110;
  *(_QWORD *)&v18 = 0;
  *((_QWORD *)&v18 + 1) = &str_110;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 80) = &str_110;
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = &str_110;
  v11 = v20;
  *(_BYTE *)(v10 + 92) = BYTE4(v20);
  *(_DWORD *)(v10 + 88) = v11;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::StringID *)&v19);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v17);
  re::DynamicArray<re::SMAssetTransitionCondition>::deinit((uint64_t)&v14);
  v12 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 96 * *((_QWORD *)this + 2) - 96);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateTransition>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateTransition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 96 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 96 * a3;
}

_QWORD *re::DynamicArray<re::SMAssetStateTransition>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 96 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4] + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 72));
      re::StringID::destroyString((re::StringID *)(v10 + 56));
      re::StringID::destroyString((re::StringID *)(v10 + 40));
      result = (_QWORD *)re::DynamicArray<re::SMAssetTransitionCondition>::deinit(v10);
      ++v9;
      v8 += 96;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 96 * v4 + 48;
      do
      {
        v7 = v3[4] + v6;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 - 32) = 0uLL;
        *(_OWORD *)(v7 - 16) = 0uLL;
        *(_OWORD *)(v7 - 48) = 0uLL;
        *(_QWORD *)v7 = &str_110;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = &str_110;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = &str_110;
        *(_DWORD *)(v7 + 40) = 0;
        v6 += 96;
        *(_BYTE *)(v7 + 44) = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::SMAssetStateTransition>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SMAssetStateTransition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetStateTransition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SMAssetStateTransition>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetStateTransition>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetStateTransition>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SMAssetStateTransition>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetStateTransition>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 96 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 96 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 96 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateTransition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateCommand>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetStateCommand>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SMAssetStateCommand>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateCommand>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateCommand>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateCommand>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SMAssetStateCommand>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SMAssetStateCommand>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SMAssetStateCommand>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::SMAssetStateCommand>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::SMAssetStateCommand>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::SMAssetStateCommand>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetStateCommand>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  re::IntrospectionBase *v9;
  _OWORD v11[26];
  void *v12;

  memset(v11, 0, sizeof(v11));
  v12 = &str_110;
  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateCommand>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  re::SMAssetStateCommand::SMAssetStateCommand(*((_QWORD *)this + 4) + 424 * v8, (uint64_t)v11);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  re::SMAssetStateCommand::~SMAssetStateCommand((re::SMAssetStateCommand *)v11);
  v9 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 424 * *((_QWORD *)this + 2) - 424);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateCommand>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateCommand>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 424 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 424 * a3;
}

void re::DynamicArray<re::SMAssetStateCommand>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 424 * a2;
    v9 = a2;
    do
    {
      re::SMAssetStateCommand::~SMAssetStateCommand((re::SMAssetStateCommand *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 424;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::SMAssetStateCommand>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 424 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)(v7 + 416) = 0;
        *(_OWORD *)(v7 + 384) = 0uLL;
        *(_OWORD *)(v7 + 400) = 0uLL;
        *(_OWORD *)(v7 + 352) = 0uLL;
        *(_OWORD *)(v7 + 368) = 0uLL;
        *(_OWORD *)(v7 + 320) = 0uLL;
        *(_OWORD *)(v7 + 336) = 0uLL;
        *(_OWORD *)(v7 + 288) = 0uLL;
        *(_OWORD *)(v7 + 304) = 0uLL;
        *(_OWORD *)(v7 + 256) = 0uLL;
        *(_OWORD *)(v7 + 272) = 0uLL;
        *(_OWORD *)(v7 + 224) = 0uLL;
        *(_OWORD *)(v7 + 240) = 0uLL;
        *(_OWORD *)(v7 + 192) = 0uLL;
        *(_OWORD *)(v7 + 208) = 0uLL;
        *(_OWORD *)(v7 + 160) = 0uLL;
        *(_OWORD *)(v7 + 176) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        v6 += 424;
        *(_QWORD *)(v7 + 416) = &str_110;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::SMAssetStateCommand>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SMAssetStateCommand>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetStateCommand>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SMAssetStateCommand>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetStateCommand>::clear((re::SMAssetStateCommand *)a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetStateCommand>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SMAssetStateCommand>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::SMAssetStateCommand>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 424 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 424;
        v11 -= 424;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 424 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 424 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetState>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetState>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SMAssetState>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetState>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetState>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetState>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SMAssetState>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SMAssetState>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetState>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::SMAssetState>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::SMAssetState>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::SMAssetState>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetState>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::IntrospectionBase *v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v8 = 0uLL;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  v9 = *((_QWORD *)this + 2);
  if (v9 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SMAssetState>::growCapacity(this, v9 + 1);
    v8 = 0uLL;
    v9 = *((_QWORD *)this + 2);
  }
  v10 = *((_QWORD *)this + 4) + 104 * v9;
  *(_OWORD *)v10 = v8;
  v14 = v8;
  *(_QWORD *)(v10 + 16) = 0;
  v15 = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *((_QWORD *)&v16 + 1) = 0;
  LODWORD(v16) = 1;
  *(_DWORD *)(v10 + 24) = 1;
  *(_QWORD *)(v10 + 40) = 0;
  *(_OWORD *)(v10 + 48) = v8;
  *(_DWORD *)(v10 + 64) = 0;
  v17 = v8;
  v11 = *(_QWORD *)(v10 + 56);
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)&v18 = v11;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)&v19 = 0;
  DWORD2(v18) = 1;
  ++*(_DWORD *)(v10 + 64);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = &str_110;
  *((_QWORD *)&v19 + 1) = 0;
  *(_QWORD *)&v20 = &str_110;
  *(_DWORD *)(v10 + 96) = 0;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::StringID *)((char *)&v19 + 8));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)&v17);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)&v14);
  v12 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 104 * *((_QWORD *)this + 2) - 104);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetState>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetState>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 104 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 104 * a3;
}

_QWORD *re::DynamicArray<re::SMAssetState>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 104 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4] + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 80));
      re::DynamicArray<re::SMAssetStateCommand>::deinit(v10 + 40);
      result = (_QWORD *)re::DynamicArray<re::SMAssetStateTransition>::deinit(v10);
      ++v9;
      v8 += 104;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::SMAssetState>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 104 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_QWORD *)(v7 + 88) = &str_110;
        *(_QWORD *)(v7 + 96) = 0;
        *(_DWORD *)(v7 + 96) = 0;
        v6 += 104;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::SMAssetState>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SMAssetState>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetState>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SMAssetState>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetState>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetState>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SMAssetState>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetState>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 104 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 104;
        v11 -= 104;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 104 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 104 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateGraph>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetStateGraph>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SMAssetStateGraph>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraph>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateGraph>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateGraph>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SMAssetStateGraph>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateGraph>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::SMAssetStateGraph>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetStateGraph>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::IntrospectionBase *v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _OWORD v18[3];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v8 = 0uLL;
  v23 = 0u;
  v22 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  memset(v18, 0, sizeof(v18));
  v17 = 0u;
  v9 = *((_QWORD *)this + 2);
  if (v9 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateGraph>::growCapacity(this, v9 + 1);
    v8 = 0uLL;
    v9 = *((_QWORD *)this + 2);
  }
  v10 = *((_QWORD *)this + 4) + 168 * v9;
  *(_OWORD *)v10 = v8;
  v15 = v8;
  *(_QWORD *)(v10 + 16) = 0;
  v16 = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *((_QWORD *)&v17 + 1) = 0;
  LODWORD(v17) = 1;
  *(_DWORD *)(v10 + 24) = 1;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = &str_110;
  *(_QWORD *)&v18[0] = 0;
  *((_QWORD *)&v18[0] + 1) = &str_110;
  *(_BYTE *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_OWORD *)(v10 + 72) = v8;
  *(_DWORD *)(v10 + 88) = 0;
  *(_OWORD *)((char *)&v18[1] + 8) = v8;
  v11 = *(_QWORD *)(v10 + 80);
  *(_QWORD *)(v10 + 80) = 0;
  *((_QWORD *)&v18[2] + 1) = v11;
  *(_QWORD *)(v10 + 96) = 0;
  *((_QWORD *)&v19 + 1) = 0;
  LODWORD(v19) = 1;
  ++*(_DWORD *)(v10 + 88);
  *(_QWORD *)(v10 + 104) = 0;
  *(_OWORD *)(v10 + 112) = v8;
  *(_DWORD *)(v10 + 128) = 0;
  v20 = v8;
  v12 = *(_QWORD *)(v10 + 120);
  *(_QWORD *)(v10 + 120) = 0;
  *(_QWORD *)&v21 = v12;
  *(_QWORD *)(v10 + 136) = 0;
  *(_QWORD *)&v22 = 0;
  DWORD2(v21) = 1;
  ++*(_DWORD *)(v10 + 128);
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)(v10 + 152) = &str_110;
  *((_QWORD *)&v22 + 1) = 0;
  *(_QWORD *)&v23 = &str_110;
  *(_DWORD *)(v10 + 160) = 0;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::StringID *)((char *)&v22 + 8));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)&v20);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)&v18[1] + 8);
  re::StringID::destroyString((re::StringID *)v18);
  re::DynamicArray<re::SMAssetState>::deinit((uint64_t)&v15);
  v13 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 168 * *((_QWORD *)this + 2) - 168);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraph>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraph>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 168 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 168 * a3;
}

_QWORD *re::DynamicArray<re::SMAssetStateGraph>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 168 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4] + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 144));
      re::DynamicArray<re::SMAssetStateCommand>::deinit(v10 + 104);
      re::DynamicArray<re::SMAssetStateTransition>::deinit(v10 + 64);
      re::StringID::destroyString((re::StringID *)(v10 + 40));
      result = (_QWORD *)re::DynamicArray<re::SMAssetState>::deinit(v10);
      ++v9;
      v8 += 168;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 168 * v4 + 160;
      do
      {
        v7 = (_QWORD *)(v3[4] + v6);
        *((_OWORD *)v7 - 6) = 0uLL;
        *((_OWORD *)v7 - 5) = 0uLL;
        *((_OWORD *)v7 - 2) = 0uLL;
        *((_OWORD *)v7 - 1) = 0uLL;
        *(v7 - 1) = &str_110;
        *v7 = 0;
        *((_OWORD *)v7 - 8) = 0uLL;
        *((_OWORD *)v7 - 7) = 0uLL;
        *((_OWORD *)v7 - 10) = 0uLL;
        *((_OWORD *)v7 - 9) = 0uLL;
        *(v7 - 14) = &str_110;
        *((_BYTE *)v7 - 104) = 0;
        *(v7 - 12) = 0;
        *(v7 - 11) = 0;
        *(v7 - 10) = 0;
        *((_DWORD *)v7 - 18) = 0;
        *((_OWORD *)v7 - 4) = 0uLL;
        *((_OWORD *)v7 - 3) = 0uLL;
        *((_DWORD *)v7 - 8) = 0;
        *(v7 - 3) = 0;
        *(v7 - 2) = 0;
        v6 += 168;
        *(_DWORD *)v7 = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::SMAssetStateGraph>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SMAssetStateGraph>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetStateGraph>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SMAssetStateGraph>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetStateGraph>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetStateGraph>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SMAssetStateGraph>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetStateGraph>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 168 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 168;
        v11 -= 168;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 168 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 168 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraph>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::SMAssetStateGraphGroup>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  uint64_t v9;
  re::IntrospectionBase *v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = *((_QWORD *)this + 4) + 40 * v8;
  *(_OWORD *)v9 = 0u;
  v12 = 0u;
  *(_QWORD *)(v9 + 16) = 0;
  v13 = 0;
  *(_QWORD *)(v9 + 32) = 0;
  v15 = 0;
  LODWORD(v14) = 1;
  *(_DWORD *)(v9 + 24) = 1;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  re::DynamicArray<re::SMAssetStateGraph>::deinit((uint64_t)&v12);
  v10 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 40 * *((_QWORD *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SMAssetStateGraphGroup>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

_QWORD *re::DynamicArray<re::SMAssetStateGraphGroup>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 40 * a2;
    v9 = a2;
    do
    {
      result = (_QWORD *)re::DynamicArray<re::SMAssetStateGraph>::deinit(v3[4] + v8);
      ++v9;
      v8 += 40;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 40 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::SMAssetStateGraphGroup>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SMAssetStateGraphGroup>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetStateGraphGroup>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 40 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SMAssetStateGraphGroup>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::StateMachineInitializationData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::StateMachineInitializationData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::StateMachineInitializationData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::StateMachineInitializationData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::StateMachineInitializationData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::StateMachineInitializationData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RenderGraphOutputData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::StateMachineInitializationData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v11[0] = 0;
  v11[1] = &str_110;
  v12[0] = 0;
  v12[1] = &str_110;
  re::DynamicArray<re::StateMachineInitializationData>::add(this, v10);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 48 * *((_QWORD *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::StateMachineInitializationData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::StateMachineInitializationData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

_QWORD *re::DynamicArray<re::StateMachineInitializationData>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::StateMachineInitializationData>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 48 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v7 = a2[2];
  v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v5[3] = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)&str_110;
  v8 = a2[4];
  v5[4] = v5[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[4] = a2[4] & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  v5[5] = a2[5];
  a2[4] = 0;
  a2[5] = (uint64_t)&str_110;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::StateMachineInitializationData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphOutputData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphOutputData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::StateMachineInitializationData>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::RenderGraphOutputData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 48 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 48;
        v11 -= 48;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 48 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::StateMachineInitializationData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::makeMeshPayloadWithMeshAsset(re *a1@<X0>, Device **a2@<X1>, uint64_t a3@<X2>, REMultiBufferMeshPayload **a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  REAttributeDescriptor *v12;
  void *v13;
  REAttributeDescriptor *v14;
  unint64_t v15;
  _anonymous_namespace_ *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint8_t *v22;
  uint64_t k;
  REMeshModelDescriptor *v24;
  REMeshModelDescriptor *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  REMeshInstanceDescriptor *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  REMeshSkeletonDescriptor *v35;
  NSObject *v36;
  _anonymous_namespace_ *v39;
  id v40;
  uint64_t v41[2];
  uint64_t v42;
  int v43;
  uint64_t v44;
  id v45;
  char v46[4];
  int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint8_t buf[16];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[3];
  uint64_t v68;
  _BYTE v69[28];
  __int16 v70;
  _BYTE v71[10];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 7))
  {
    v45 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v46[0] = 1;
    v47 = 0;
    v48 = 0;
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    v52 = 0;
    v54 = 1;
    v55 = 0;
    v56 = 0;
    v61 = 0;
    v58 = 0;
    v59 = 0;
    v57 = 0;
    v60 = 0;
    v40 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v6 = *((_QWORD *)a1 + 12);
    if (v6)
    {
      v7 = 0;
      for (i = 0; i != v6; ++i)
      {
        v9 = *((_QWORD *)a1 + 12);
        if (v9 <= i)
        {
          v41[0] = 0;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v69 = 136315906;
          *(_QWORD *)&v69[4] = "operator[]";
          *(_WORD *)&v69[12] = 1024;
          *(_DWORD *)&v69[14] = 797;
          *(_WORD *)&v69[18] = 2048;
          *(_QWORD *)&v69[20] = i;
          v70 = 2048;
          *(_QWORD *)v71 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = (_QWORD *)(*((_QWORD *)a1 + 14) + v7);
        v12 = [REAttributeDescriptor alloc];
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10[1]);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = -[REAttributeDescriptor initWithName:payloadOffset:count:stride:](v12, "initWithName:payloadOffset:count:stride:", v13, v11, *((unsigned int *)v10 + 24), 64);

        objc_msgSend(v40, "addObject:", v14);
        v7 += 112;
      }
    }
    v39 = (_anonymous_namespace_ *)objc_alloc_init(MEMORY[0x24BDBCEB8]);
    *(_QWORD *)&v71[2] = 0;
    memset(&v69[8], 0, 20);
    v15 = *((_QWORD *)a1 + 2);
    v16 = (_anonymous_namespace_ *)re::DynamicArray<re::DeformationModelData>::setCapacity(v69, v15);
    ++*(_DWORD *)&v69[24];
    v44 = 0;
    v41[1] = 0;
    v42 = 0;
    v43 = 0;
    v17 = *((_QWORD *)a1 + 2);
    ++v43;
    v18 = *((_QWORD *)a1 + 2);
    if (v18)
    {
      v19 = *((_QWORD *)a1 + 4);
      v20 = v19 + (v18 << 9);
      do
      {
        bzero(buf, 0x2D0uLL);
        for (j = 0; j != 720; j += 40)
        {
          v22 = &buf[j];
          *(_QWORD *)v22 = 0;
          *((_QWORD *)v22 + 4) = 0;
        }
        re::DynamicArray<re::DeformationModelData>::add((uint64_t)v69, (uint64_t)buf);
        for (k = 680; k != -40; k -= 40)
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&buf[k]);
        v68 = 0;
        v67[1] = 1uLL;
        v66 = 0u;
        v64 = 0u;
        *(_OWORD *)buf = 0u;
        v63 = 0u;
        DWORD2(v64) = 1;
        v65 = 0uLL;
        *(_QWORD *)&v66 = 0;
        DWORD2(v66) = 0;
        v67[0] = 0uLL;
        v67[2] = 0uLL;
        re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray((uint64_t)v67);
        re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray((uint64_t)&v63 + 8);
        v24 = [REMeshModelDescriptor alloc];
        v25 = -[REMeshModelDescriptor initWithMeshAssetModel:inverseBindPoseAttributes:deformerBuilders:payloadBuilder:deformationModelData:](v24, "initWithMeshAssetModel:inverseBindPoseAttributes:deformerBuilders:payloadBuilder:deformationModelData:", v19, v40, v44 + 136 * v42 - 136, &v45, *(_QWORD *)&v71[2] + 720 * *(_QWORD *)&v69[16] - 720);
        -[_anonymous_namespace_ addObject:](v39, "addObject:", v25);

        v19 += 512;
      }
      while (v19 != v20);
    }
    v26 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v27 = *((_QWORD *)a1 + 7);
    if (v27)
    {
      v28 = *((_QWORD *)a1 + 9);
      v29 = 96 * v27;
      do
      {
        v30 = -[REMeshInstanceDescriptor initWithMeshAssetInstance:]([REMeshInstanceDescriptor alloc], "initWithMeshAssetInstance:", v28);
        objc_msgSend(v26, "addObject:", v30);

        v28 += 96;
        v29 -= 96;
      }
      while (v29);
    }
    v31 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v32 = *((_QWORD *)a1 + 12);
    if (v32)
    {
      v33 = *((_QWORD *)a1 + 14);
      v34 = 112 * v32;
      do
      {
        v35 = -[REMeshSkeletonDescriptor initWithMeshAssetSkeleton:]([REMeshSkeletonDescriptor alloc], "initWithMeshAssetSkeleton:", v33);
        objc_msgSend(v31, "addObject:", v35);

        v33 += 112;
        v34 -= 112;
      }
      while (v34);
    }

    re::DynamicArray<re::DeformationModelData>::deinit((uint64_t)v69);

    if (v57)
    {
      if (v61)
        (*(void (**)(void))(*(_QWORD *)v57 + 40))();
      v61 = 0;
      v58 = 0;
      v59 = 0;
      v57 = 0;
      ++v60;
    }
    if (v49)
    {
      if (v53)
        (*(void (**)(void))(*(_QWORD *)v49 + 40))();
      v53 = 0;
      v50 = 0;
      v51 = 0;
      v49 = 0;
      ++v52;
    }

  }
  else
  {
    v36 = *re::assetTypesLogObjects(a1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "Tried to make an empty mesh payload", buf, 2u);
    }
    *a4 = 0;
  }
}

void sub_2253A4BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);

  re::DynamicArray<re::DeformationModelData>::deinit(v11 - 144);

  _Unwind_Resume(a1);
}

unint64_t re::`anonymous namespace'::MeshPayloadBuilder::ContiguousLayout::addBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v7 = a4 + *(unsigned int *)(a1 + 4) - 1;
  v8 = v7 / a4 * a4;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v7 & -a4;
  if (v9.u32[0] == 1)
    v11 = v10;
  else
    v11 = v8;
  if (HIDWORD(v11))
    *(_BYTE *)(a1 + 8) = 1;
  v12 = a3 + v11;
  if (__CFADD__(a3, v11) || HIDWORD(v12))
    *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 4) = v12;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  if (v14 >= v13)
  {
    v15 = v14 + 1;
    if (v13 < v14 + 1)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        v16 = 2 * v13;
        v17 = v13 == 0;
        v18 = 8;
        if (!v17)
          v18 = v16;
        if (v18 <= v15)
          v19 = v15;
        else
          v19 = v18;
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)(a1 + 16), v19);
      }
      else
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)(a1 + 16), v15);
        ++*(_DWORD *)(a1 + 40);
      }
    }
  }
  v20 = *(_QWORD *)(a1 + 48) + 24 * *(_QWORD *)(a1 + 32);
  *(_DWORD *)v20 = v11;
  *(_QWORD *)(v20 + 8) = a2;
  *(_QWORD *)(v20 + 16) = a3;
  ++*(_QWORD *)(a1 + 32);
  ++*(_DWORD *)(a1 + 40);
  *(_BYTE *)a1 = 0;
  return v11;
}

_QWORD *re::DynamicArray<re::DeformationModelData>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::DeformationModelData>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::DeformationModelData>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 32) + 720 * v5;
  do
  {
    result = std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100]((_QWORD *)(v12 + v11), (uint64_t *)(a2 + v11));
    v11 += 40;
  }
  while (v11 != 720);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::DynamicArray<re::`anonymous namespace'::DeformerBuilders>::add(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)a1)
    {
      v11 = 2 * v4;
      v12 = v4 == 0;
      v13 = 8;
      if (!v12)
        v13 = v11;
      if (v13 <= v6)
        v14 = v6;
      else
        v14 = v13;
    }
    else
    {
      ++*(_DWORD *)(a1 + 24);
    }
  }
  v8 = *(_QWORD *)(a1 + 32) + 136 * *(_QWORD *)(a1 + 16);
  v9 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v9;
  re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArray(v8 + 24, (uint64_t)a2 + 24);
  result = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArray(v8 + 80, (uint64_t)(a2 + 5));
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::`anonymous namespace'::makeMeshPayload(REMultiBufferMeshPayload **a1, uint64_t a2, void *a3, void *a4, void *a5, Device **a6, uint64_t a7)
{
  id v13;
  id v14;
  re *v15;
  re *v16;
  NSObject *v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  int v21;
  void *DirectMeshPayload;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  REMultiBufferMeshPayload *v26;
  REMultiBufferMeshPayload *v27;
  uint64_t v28;
  unint64_t v29;
  uint8_t buf[16];

  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = v15;
  if (!*(_BYTE *)(a2 + 16) && !*(_BYTE *)(a2 + 72))
  {
    v18 = *(_DWORD *)(a2 + 68);
    v19 = *(unsigned __int8 *)(a2 + 64);
    if (v18)
      v20 = v18;
    else
      v20 = 4;
    v21 = 8 * (*(_DWORD *)a7 != 0);
    if (*(_BYTE *)(a2 + 64) || !*(_BYTE *)(a2 + 8))
    {
      v29 = v20;
      v23 = *(_DWORD *)(a2 + 12);
      if (v23)
        v24 = v23;
      else
        v24 = 4;
      if (v19)
      {
        v25 = 0;
LABEL_20:
        v26 = [REMultiBufferMeshPayload alloc];
        LOBYTE(v28) = *(_BYTE *)(a7 + 4);
        v27 = -[REMultiBufferMeshPayload initWithPayload:privatePayload:parts:models:instances:skeletons:isLimitedRenderAsset:](v26, "initWithPayload:privatePayload:parts:models:instances:skeletons:isLimitedRenderAsset:", DirectMeshPayload, v25, *(_QWORD *)a2, v13, v14, v16, v28);
        *a1 = v27;

        goto LABEL_6;
      }
      v20 = v29;
    }
    else
    {
      DirectMeshPayload = 0;
    }
    goto LABEL_20;
  }
  v17 = *re::assetTypesLogObjects(v15);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_224FE9000, v17, OS_LOG_TYPE_FAULT, "Mesh payload buffer size overflow", buf, 2u);
  }
  *a1 = 0;
LABEL_6:

}

void sub_2253A5164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t *re::DynamicArray<re::`anonymous namespace'::DeformerBuilders>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (v2)
  {
    v3 = a1[4];
    if (v3)
    {
      v4 = a1[2];
      if (v4)
      {
        v5 = 136 * v4;
        v6 = v3 + 80;
        do
        {
          re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray(v6);
          re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray(v6 - 56);
          v6 += 136;
          v5 -= 136;
        }
        while (v5);
        v2 = *a1;
        v3 = a1[4];
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v3);
    }
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

void re::`anonymous namespace'::MeshPayloadBuilder::~MeshPayloadBuilder(re::_anonymous_namespace_::MeshPayloadBuilder *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 80);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 14) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 26);
  }
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 3) = 0;
    ++*((_DWORD *)this + 12);
  }

}

void re::makeMeshPayloadWithMeshResourceDefinition(_QWORD *a1@<X0>, Device **a2@<X1>, uint64_t a3@<X2>, REMultiBufferMeshPayload **a4@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  REAttributeDescriptor *v8;
  void *v9;
  REAttributeDescriptor *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  REMeshPartDescriptor *v14;
  unint64_t v15;
  _anonymous_namespace_ *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *v22;
  uint64_t j;
  REMeshModelDescriptor *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  REMeshModelDescriptor *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  REMeshInstanceDescriptor *v38;
  unint64_t v39;
  void *v40;
  REMeshInstanceDescriptor *v41;
  REMeshInstanceDescriptor *v42;
  char *v43;
  void *v44;
  REMeshInstanceDescriptor *v45;
  id v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  REMeshSkeletonDescriptor *v50;
  uint64_t v54;
  id v55;
  id v56;
  _QWORD *v57;
  _anonymous_namespace_ *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  void *__dst;
  _QWORD v64[2];
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68[2];
  uint64_t v69;
  int v70;
  uint64_t v71;
  id v72;
  char v73[4];
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  char v81;
  int v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v72 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v73[0] = 1;
  v74 = 0;
  v75 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  v76 = 0;
  v79 = 0;
  v81 = 1;
  v82 = 0;
  v83 = 0;
  v88 = 0;
  v85 = 0;
  v86 = 0;
  v84 = 0;
  v87 = 0;
  v56 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v57 = a1;
  if (a1[30])
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD **)(a1[32] + 8 * v5);
      v8 = [REAttributeDescriptor alloc];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6[4]);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = -[REAttributeDescriptor initWithName:payloadOffset:count:stride:](v8, "initWithName:payloadOffset:count:stride:", v9, v7, *((unsigned int *)v6 + 30), 64);

      objc_msgSend(v56, "addObject:", v10);
      a1 = v57;

      ++v5;
    }
    while (v5 < v57[30]);
  }
  v11 = a1[10];
  if (v11)
  {
    v12 = v57[12];
    v13 = 144 * v11;
    do
    {
      v14 = -[REMeshPartDescriptor initWithResourceDefinition:meshPart:payloadBuilder:]([REMeshPartDescriptor alloc], "initWithResourceDefinition:meshPart:payloadBuilder:", v57, v12, &v72);
      objc_msgSend(v72, "addObject:", v14);

      v12 += 144;
      v13 -= 144;
    }
    while (v13);
  }
  v55 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v58 = (_anonymous_namespace_ *)objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v15 = v57[20];
  v71 = 0;
  v68[1] = 0;
  v69 = 0;
  v70 = 0;
  ++v70;
  v17 = v57[20];
  v67 = 0;
  v64[1] = 0;
  v65 = 0;
  v66 = 0;
  re::DynamicArray<re::DeformationModelData>::setCapacity(v64, v17);
  ++v66;
  v18 = v57[20];
  if (v18)
  {
    v19 = 0;
    v20 = v57[22];
    v54 = v20 + 192 * v18;
    do
    {
      v97 = 0;
      v95 = 1uLL;
      v93 = 0u;
      v91 = 0u;
      v89 = 0u;
      v90 = 0u;
      DWORD2(v91) = 1;
      v92 = 0uLL;
      *(_QWORD *)&v93 = 0;
      DWORD2(v93) = 0;
      v94 = 0uLL;
      v96 = 0uLL;
      re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray((uint64_t)&v94);
      re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray((uint64_t)&v90 + 8);
      bzero(&v89, 0x2D0uLL);
      for (i = 0; i != 720; i += 40)
      {
        v22 = (_QWORD *)((char *)&v89 + i);
        *v22 = 0;
        v22[4] = 0;
      }
      re::DynamicArray<re::DeformationModelData>::add((uint64_t)v64, (uint64_t)&v89);
      for (j = 680; j != -40; j -= 40)
        std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)((char *)&v89 + j));
      v24 = [REMeshModelDescriptor alloc];
      v25 = v71;
      v26 = v69;
      __dst = 0;
      v60 = 0;
      v61 = 0;
      v59 = 0;
      v62 = 0;
      if (v57[13])
      {
        v27 = v57[15];
        v59 = v57[13];
        re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(&v59, v27);
        ++v62;
        v28 = v57[15];
        if (v28 >= v61)
        {
          re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(&v59, v57[15]);
          v29 = v61;
          if (v61)
          {
            memmove(__dst, (const void *)v57[17], 8 * v61);
            v29 = v61;
          }
          memcpy((char *)__dst + 8 * v29, (const void *)(v57[17] + 8 * v29), 8 * v28 - 8 * v29);
        }
        else if (v28)
        {
          memmove(__dst, (const void *)v57[17], 8 * v28);
        }
        v61 = v28;
      }
      v30 = -[REMeshModelDescriptor initWithResourceDefinitionModel:inverseBindPoseAttributes:deformerBuilders:payloadBuilder:levels:deformationModelData:](v24, "initWithResourceDefinitionModel:inverseBindPoseAttributes:deformerBuilders:payloadBuilder:levels:deformationModelData:", v20, v56, v25 + 136 * v26 - 136, &v72, &v59, v67 + 720 * v65 - 720);
      if (v59)
      {
        if (__dst)
          (*(void (**)(void))(*(_QWORD *)v59 + 40))();
        __dst = 0;
        v60 = 0;
        v61 = 0;
        v59 = 0;
        ++v62;
      }
      objc_msgSend(v55, "addObject:", v30);
      v31 = v57[25];
      if (v31)
      {
        v32 = v57[27];
        v33 = v32 + (v31 << 7);
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v89, (const re::DynamicString *)v32);
          v34 = *(_OWORD *)(v32 + 48);
          v91 = *(_OWORD *)(v32 + 32);
          v92 = v34;
          v35 = *(_OWORD *)(v32 + 64);
          v36 = *(_OWORD *)(v32 + 80);
          v37 = *(_OWORD *)(v32 + 96);
          *(_QWORD *)&v96 = *(_QWORD *)(v32 + 112);
          v94 = v36;
          v95 = v37;
          v93 = v35;
          if ((_DWORD)v91 == (_DWORD)v19)
          {
            v38 = [REMeshInstanceDescriptor alloc];
            if ((BYTE8(v89) & 1) != 0)
              v39 = v90;
            else
              v39 = (unint64_t)&v89 | 9;
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v39);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v41 = -[REMeshInstanceDescriptor initWithName:modelIndex:transform:lodSelectOptions:](v38, "initWithName:modelIndex:transform:lodSelectOptions:", v40, v19, (_QWORD)v96, *(double *)&v92, *(double *)&v93, *(double *)&v94, *(double *)&v95);

            -[_anonymous_namespace_ addObject:](v58, "addObject:", v41);
          }
          if ((_QWORD)v89 && (BYTE8(v89) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v89 + 40))();
          v32 += 128;
        }
        while (v32 != v33);
      }
      else
      {
        re::DynamicString::operator+((re::DynamicString *)(v20 + 40), "_instance", (re::DynamicString *)&v89);
        v42 = [REMeshInstanceDescriptor alloc];
        if ((BYTE8(v89) & 1) != 0)
          v43 = (char *)v90;
        else
          v43 = (char *)&v89 + 9;
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v43);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = -[REMeshInstanceDescriptor initWithName:modelIndex:transform:lodSelectOptions:](v42, "initWithName:modelIndex:transform:lodSelectOptions:", v44, v19, 0x3F80000000000001, *MEMORY[0x24BDAEE00], *(double *)(MEMORY[0x24BDAEE00] + 16), *(double *)(MEMORY[0x24BDAEE00] + 32), *(double *)(MEMORY[0x24BDAEE00] + 48));

        -[_anonymous_namespace_ addObject:](v58, "addObject:", v45);
        if ((_QWORD)v89 && (BYTE8(v89) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v89 + 40))();
      }

      v19 = (v19 + 1);
      v20 += 192;
    }
    while (v20 != v54);
  }
  v46 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v47 = v57[30];
  if (v47)
  {
    v48 = (_QWORD *)v57[32];
    v49 = 8 * v47;
    do
    {
      v50 = -[REMeshSkeletonDescriptor initWithMeshSkeletonDefinition:]([REMeshSkeletonDescriptor alloc], "initWithMeshSkeletonDefinition:", *v48);
      objc_msgSend(v46, "addObject:", v50);

      ++v48;
      v49 -= 8;
    }
    while (v49);
  }

  re::DynamicArray<re::DeformationModelData>::deinit((uint64_t)v64);

  if (v84)
  {
    if (v88)
      (*(void (**)(void))(*(_QWORD *)v84 + 40))();
    v88 = 0;
    v85 = 0;
    v86 = 0;
    v84 = 0;
    ++v87;
  }
  if (v76)
  {
    if (v80)
      (*(void (**)(void))(*(_QWORD *)v76 + 40))();
    v80 = 0;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    ++v79;
  }

}

void sub_2253A5A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;

  re::DynamicArray<re::DeformationModelData>::deinit((uint64_t)&a28);

  _Unwind_Resume(a1);
}

void re::makeMeshCollectionWithMeshPayload(id *a1@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t i;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void **v10;
  void *v11;
  unint64_t v12;
  re *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  BOOL v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t k;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  int v44;
  id obj;
  id v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  id v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD v71[51];
  _BYTE v72[128];
  _BYTE v73[128];
  _BYTE v74[128];
  _BYTE v75[18];
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  unint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  re::MeshPayload::payloadBufferSizes(a1, v71);
  for (i = 0; i != 8; ++i)
  {
    v6 = *(_QWORD *)((char *)v71 + i * 8);
    if (v6 && (unint64_t)objc_msgSend(a2[i], sel_length) < v6)
    {
LABEL_50:
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "payloadBuffers[i]->length() >= length", "makeMeshCollectionWithMeshPayload", 550);
      _os_crash();
      __break(1u);
    }
  }
  v8 = *a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (v8)
    {
      objc_msgSend(v8, "makeMeshCollection:", a2);
    }
    else
    {
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    objc_msgSend(v8, "parts");
    v9 = 0;
    v65 = (id)objc_claimAutoreleasedReturnValue();
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    do
    {
      v10 = NS::SharedPtr<MTL::Texture>::operator=((id *)((char *)&v65 + v9 * 8 + 8), &a2[v9]);
      ++v9;
    }
    while (v9 != 8);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    objc_msgSend(v8, "models");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "count");
    re::DynamicArray<re::MeshModel>::setCapacity((_QWORD *)a3, v12);
    ++*(_DWORD *)(a3 + 24);

    v14 = re::globalAllocators(v13)[2];
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    objc_msgSend(v8, "models");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    obj = v15;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v59;
      do
      {
        for (j = 0; j != v16; ++j)
        {
          if (*(_QWORD *)v59 != v17)
            objc_enumerationMutation(obj);
          v19 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * j);
          objc_msgSend(v19, "skinningModel");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = v20 == 0;

          if (!v21)
          {
            objc_msgSend(v19, "skinningModel");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "inverseBindPoseAttributes");
            v43 = (void *)objc_claimAutoreleasedReturnValue();

            re::FixedArray<re::Slice<unsigned int>>::init<>(&v62, v14, objc_msgSend(v43, "count"));
            v42 = v8;
            v56 = 0u;
            v57 = 0u;
            v54 = 0u;
            v55 = 0u;
            v46 = v43;
            v23 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v54, v73, 16);
            if (!v23)
              goto LABEL_31;
            v24 = 0;
            v25 = *(_QWORD *)v55;
            while (1)
            {
              v26 = 0;
              v44 = v24;
              v27 = v24;
              v28 = 16 * v24;
              do
              {
                v29 = a3;
                if (*(_QWORD *)v55 != v25)
                  objc_enumerationMutation(v46);
                v30 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v26);
                v31 = *a2;
                v32 = objc_msgSend(v30, "payloadOffset");
                LODWORD(v30) = objc_msgSend(v30, "bufferSize");
                v52 = 0;
                v52 = v31;
                v53 = __PAIR64__(v30, v32);
                v33 = v63;
                if (v63 <= v27 + v26)
                {
                  v70 = 0;
                  memset(v71, 0, 80);
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v75 = 136315906;
                  *(_QWORD *)&v75[4] = "operator[]";
                  *(_WORD *)&v75[12] = 1024;
                  *(_DWORD *)&v75[14] = 468;
                  v76 = 2048;
                  v77 = v26 + v44;
                  v78 = 2048;
                  v79 = v33;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_50;
                }
                v34 = v64 + v28;
                a3 = v29;
                NS::SharedPtr<MTL::Texture>::operator=((void **)(v64 + v28), &v52);
                *(_QWORD *)(v34 + 8) = v53;
                if (v52)

                if (v31)
                ++v26;
                v28 += 16;
              }
              while (v23 != v26);
              v23 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v54, v73, 16);
              v24 = v27 + v26;
              if (!v23)
              {
LABEL_31:

                v8 = v42;
                v15 = obj;
                goto LABEL_32;
              }
            }
          }
        }
        v15 = obj;
        v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
      }
      while (v16);
    }
LABEL_32:

    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    objc_msgSend(v8, "models");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v48, v72, 16);
    if (v36)
    {
      v37 = *(_QWORD *)v49;
      do
      {
        for (k = 0; k != v36; ++k)
        {
          if (*(_QWORD *)v49 != v37)
            objc_enumerationMutation(v35);
          v39 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * k);
          *(_QWORD *)v75 = v64;
          *(_QWORD *)&v75[8] = v63;
          if (v39)
            objc_msgSend(v39, "meshModelWithMeshModelContext:inverseBindPoseBuffers:allocator:", &v65, v75, v14);
          else
            bzero(v71, 0x330uLL);
          re::DynamicArray<re::MeshModel>::add((_anonymous_namespace_ *)a3, (uint64_t *)v71);
          re::MeshModel::~MeshModel((re::MeshModel *)v71);
        }
        v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v48, v72, 16);
      }
      while (v36);
    }

    re::FixedArray<re::BufferSlice>::deinit(&v62);
    v40 = 64;
    do
    {
      v41 = *(id *)((char *)&v65 + v40);
      if (v41)
      {

        *(id *)((char *)&v65 + v40) = 0;
      }
      v40 -= 8;
    }
    while (v40);

  }
}

void sub_2253A6184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  uint64_t v61;
  void *v62;

  re::FixedArray<re::BufferSlice>::deinit(&a46);
  re::DynamicArray<re::MeshModel>::deinit(v59);
  v61 = 64;
  while (1)
  {
    v62 = *(void **)((char *)&a49 + v61);
    if (v62)
    {

      *(void **)((char *)&a49 + v61) = 0;
    }
    v61 -= 8;
    if (!v61)
    {

      _Unwind_Resume(a1);
    }
  }
}

uint64_t re::DynamicArray<re::MeshModel>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshModel>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::MeshModel::MeshModel(*((_QWORD *)this + 4) + 816 * v4, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::registerMeshCollectionWithMeshPayload(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  re *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _OWORD v17[9];
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v7 = (re *)*a2;
  v8 = re::globalAllocators(v7)[2];
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_DWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_QWORD *)(a4 + 40) = v8;
  re::DynamicArray<float *>::setCapacity((_QWORD *)(a4 + 40), 0);
  ++*(_DWORD *)(a4 + 64);
  *(_QWORD *)a4 = v8;
  re::DynamicArray<float *>::setCapacity((_QWORD *)a4, 0);
  ++*(_DWORD *)(a4 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = *(uint64_t **)(a1 + 32);
    v11 = 816 * v9;
    do
    {
      *(_QWORD *)&v17[0] = re::DataArray<re::MeshModel>::create<re::MeshModel>(a3 + 8, v10);
      re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add((_QWORD *)(a4 + 40), v17);
      v10 += 102;
      v11 -= 816;
    }
    while (v11);
  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[re instances](v7, "instances");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v20;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v20 != v14)
          objc_enumerationMutation(v12);
        v16 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v15);
        if (v16)
          objc_msgSend(v16, "meshInstanceWithModels:meshManager:", a4, a3);
        else
          memset(v17, 0, sizeof(v17));
        v18 = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(a3 + 72, (uint64_t)v17);
        re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add((_QWORD *)a4, &v18);
        re::MeshInstance::~MeshInstance((re::MeshInstance *)v17);
        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v13);
  }

  re::DynamicArray<re::MeshModel>::deinit(a1);
}

void sub_2253A6550(_Unwind_Exception *a1)
{
  void *v1;
  re::MeshCollectionHandles *v2;
  void *v3;

  re::MeshCollectionHandles::~MeshCollectionHandles(v2);
  _Unwind_Resume(a1);
}

void re::MeshCollectionHandles::~MeshCollectionHandles(re::MeshCollectionHandles *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 9) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 16);
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 4))
      (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    ++*((_DWORD *)this + 6);
  }
}

void re::makeMeshAssetSkeletonsWithMeshPayload(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  _anonymous_namespace_ *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  objc_msgSend(v3, "skeletons");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetSkeleton>::deinit(a2);
  re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)a2, v5);
  ++*(_DWORD *)(a2 + 24);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  objc_msgSend(v3, "skeletons");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v23 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        if (v11)
        {
          objc_msgSend(v11, "meshAssetSkeleton");
        }
        else
        {
          v20 = 0u;
          v21 = 0u;
          v18 = 0u;
          v19 = 0u;
          v16 = 0u;
          v17 = 0u;
          v15 = 0u;
        }
        re::DynamicArray<re::MeshAssetSkeleton>::add((_QWORD *)a2, (uint64_t *)&v15);
        if (*((_QWORD *)&v20 + 1))
        {
          if ((_QWORD)v21)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)&v20 + 1) + 40))(*((_QWORD *)&v20 + 1), *((_QWORD *)&v21 + 1), v12, v13, v14);
            v21 = 0uLL;
          }
          *((_QWORD *)&v20 + 1) = 0;
        }
        if ((_QWORD)v19)
        {
          if (*((_QWORD *)&v19 + 1))
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v20, v12, v13, v14);
            *((_QWORD *)&v19 + 1) = 0;
            *(_QWORD *)&v20 = 0;
          }
          *(_QWORD *)&v19 = 0;
        }
        if (*((_QWORD *)&v17 + 1))
        {
          if ((_QWORD)v18)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)&v17 + 1) + 40))(*((_QWORD *)&v17 + 1), *((_QWORD *)&v18 + 1), v12, v13, v14);
            v18 = 0uLL;
          }
          *((_QWORD *)&v17 + 1) = 0;
        }
        re::FixedArray<re::StringID>::deinit(&v16);
        re::StringID::destroyString((re::StringID *)&v15);
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v8);
  }

}

void sub_2253A684C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void re::MeshAssetSkeleton::~MeshAssetSkeleton(re::MeshAssetSkeleton *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    if (*((_QWORD *)this + 9))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 10));
      *((_QWORD *)this + 9) = 0;
      *((_QWORD *)this + 10) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if (*((_QWORD *)this + 6))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 7));
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
    }
    *((_QWORD *)this + 5) = 0;
  }
  re::FixedArray<re::StringID>::deinit((_QWORD *)this + 2);
  re::StringID::destroyString(this);
}

void re::makeMeshAssetInstancesWithMeshPayload(id *a1, uint64_t a2)
{
  void *v3;
  unint64_t v4;
  _anonymous_namespace_ *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  id v11;
  _anonymous_namespace_ *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  id v17;
  uint64_t v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v17 = *a1;
  objc_msgSend(v17, "skeletons");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetInstance>::deinit(a2);
  re::DynamicArray<re::MeshAssetInstance>::setCapacity((_QWORD *)a2, v4);
  ++*(_DWORD *)(a2 + 24);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  objc_msgSend(v17, "instances");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v26 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend(v10, "name");
        v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v12 = (_anonymous_namespace_ *)objc_msgSend(v11, "UTF8String");
        v18[0] = 0;
        v18[1] = (uint64_t)&str_110;
        objc_msgSend(v10, "transform");
        v19 = v13;
        v20 = v14;
        v21 = v15;
        v22 = v16;
        v23 = objc_msgSend(v10, "modelIndex");
        v24 = objc_msgSend(v10, "lodSelectOptions");

        re::DynamicArray<re::MeshAssetInstance>::add((_anonymous_namespace_ *)a2, v18);
        re::StringID::destroyString((re::StringID *)v18);
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v7);
  }

}

void sub_2253A6B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void re::makeBoundingBoxesWithMeshPayload(id *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  unsigned int v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  unint64_t i;
  void *v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[128];
  int v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unint64_t v59;
  __int16 v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    v6 = a2 + 1;
    if (a2[1])
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
      *v6 = 0;
      a2[2] = 0;
    }
    *a2 = 0;
  }
  v42 = (uint64_t)a2;
  if (*a3)
  {
    if (a3[1])
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
      a3[1] = 0;
      a3[2] = 0;
    }
    *a3 = 0;
  }
  v7 = *a1;
  v8 = objc_opt_respondsToSelector();
  if ((v8 & 1) != 0)
  {
    objc_msgSend(v7, "makeBoundingBoxes:perPartPerInstanceBoundingBoxes:", a2, a3);
    goto LABEL_29;
  }
  v9 = re::globalAllocators((re *)v8)[2];
  objc_msgSend(v7, "models");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "count");

  objc_msgSend(v7, "instances");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend(v11, "count");

  objc_msgSend(v7, "parts");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "count");

  if (v45)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      objc_msgSend(v7, "instances");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectAtIndexedSubscript:", v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "modelIndex");

      objc_msgSend(v7, "models");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "objectAtIndexedSubscript:", v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "partIndices");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v14 += objc_msgSend(v20, "count");

      ++v13;
    }
    while (v45 != v13);
  }
  else
  {
    v14 = 0;
  }
  re::FixedArray<re::AABB>::init<>(v42, v9, v45);
  re::FixedArray<re::AABB>::init<>((uint64_t)a3, v9, v14);
  if (v45)
  {
    v21 = 0;
    for (i = 0; i != v45; ++i)
    {
      objc_msgSend(v7, "instances");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "objectAtIndexedSubscript:", i);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "modelIndex");

      objc_msgSend(v7, "models");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "objectAtIndexedSubscript:", v24);
      v44 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v44, "boundingBoxMin");
      v46 = v26;
      objc_msgSend(v44, "boundingBoxMax");
      v28 = i;
      v29 = *(_QWORD *)(v42 + 8);
      if (v29 <= i)
        goto LABEL_31;
      v30 = (_OWORD *)(*(_QWORD *)(v42 + 16) + 32 * i);
      *v30 = v46;
      v30[1] = v27;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      objc_msgSend(v44, "partIndices");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
      if (!v32)
        goto LABEL_28;
      v28 = *(_QWORD *)v49;
      do
      {
        v29 = 0;
        v33 = v21;
        v34 = 32 * v21;
        do
        {
          if (*(_QWORD *)v49 != v28)
            objc_enumerationMutation(v31);
          v35 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * v29);
          objc_msgSend(v7, "parts");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "objectAtIndexedSubscript:", objc_msgSend(v35, "unsignedIntegerValue"));
          v37 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v37, "boundingBoxMin");
          v47 = v38;
          objc_msgSend(v37, "boundingBoxMax");
          v40 = a3[1];
          if (v40 <= v33 + v29)
          {
            v52 = 0;
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v62 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v54 = 136315906;
            v55 = "operator[]";
            v56 = 1024;
            v57 = 468;
            v58 = 2048;
            v59 = v33 + v29;
            v60 = 2048;
            v61 = v40;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_31:
            v52 = 0;
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v62 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v54 = 136315906;
            v55 = "operator[]";
            v56 = 1024;
            v57 = 468;
            v58 = 2048;
            v59 = v28;
            v60 = 2048;
            v61 = v29;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v41 = (_OWORD *)(a3[2] + v34);
          *v41 = v47;
          v41[1] = v39;

          ++v29;
          v34 += 32;
        }
        while (v32 != v29);
        v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
        v21 = v33 + v29;
      }
      while (v32);
      v21 = v33 + v29;
LABEL_28:

    }
  }
LABEL_29:

}

void sub_2253A70F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253A7318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  re::StringID::destroyString((re::StringID *)&a9);

  _Unwind_Resume(a1);
}

void sub_2253A7394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253A7518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  re::NamedVertexBuffer::~NamedVertexBuffer((re::NamedVertexBuffer *)&a15);
  _Unwind_Resume(a1);
}

id re::DynamicArray<re::NamedVertexBuffer>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::NamedVertexBuffer>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + (v4 << 6);
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v9 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 16) = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v8;
  *(_WORD *)(v5 + 32) = *(_WORD *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(v5 + 40) = result;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 56);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::NamedVertexBuffer::~NamedVertexBuffer(re::NamedVertexBuffer *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {

    *((_QWORD *)this + 5) = 0;
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
}

void sub_2253A7A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_2253A7DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a12);

  re::FixedArray<re::MeshVertexAttributeBuffers::Attribute>::deinit((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2253A8434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  re::DynamicArray<re::NamedVertexBuffer>::deinit((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_2253A85A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253A8730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

REAttributeDescriptor *`anonymous namespace'::makeDescriptorForSkinningAttribute(unsigned int a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  REAttributeDescriptor *v13;
  void *v14;
  uint64_t v15;
  REAttributeDescriptor *v16;

  if (!*(_QWORD *)(a3 + 8))
    goto LABEL_12;
  v5 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v6 = *(unsigned int *)(*(_QWORD *)(a3 + 16)
                       + 4
                       * (((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))
                        % *(unsigned int *)(a3 + 32)));
  if ((_DWORD)v6 == 0x7FFFFFFF)
    goto LABEL_12;
  v9 = *(_QWORD *)(a3 + 24);
  while (!re::StringID::operator==((_QWORD *)(v9 + 48 * v6 + 8), a2))
  {
    v6 = *(_DWORD *)(v9 + 48 * v6) & 0x7FFFFFFF;
    if (v6 == 0x7FFFFFFF)
      goto LABEL_12;
  }
  v10 = v9 + 48 * v6;
  if (*(_QWORD *)(v10 + 40))
  {
    v11 = v10 + 32;
    v12 = v9 + 48 * v6;
    v13 = [REAttributeDescriptor alloc];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2[1]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (a1 > 4 || a1 == 2)
      v15 = a4 + 8;
    else
      v15 = a4 + 64;
    v16 = -[REAttributeDescriptor initWithName:buffer:elementSize:payloadLayout:](v13, "initWithName:buffer:elementSize:payloadLayout:", v14, v11, *(_QWORD *)(v12 + 24), v15);

  }
  else
  {
LABEL_12:
    v16 = 0;
  }
  return v16;
}

void sub_2253A88F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253A8C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;

  if (v15)

  re::StringID::destroyString((re::StringID *)&a11);
  re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&a13);
  _Unwind_Resume(a1);
}

uint64_t re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = re::StringID::operator==((_QWORD *)(v10 + 40 * v9 + 8), a2);
    if ((result & 1) != 0)
      return result;
    v9 = *(_DWORD *)(v10 + 40 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

void sub_2253A9168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  uint64_t v17;
  void *v18;

  re::FixedArray<re::SkinningModelBuilder::AttributeDescriptor::SkinnedPartAttribute>::deinit((_QWORD *)(v17 + 16));

  _Unwind_Resume(a1);
}

void sub_2253A92E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  re::FixedArray<re::SkinningModelBuilder::AttributeDescriptor::SkinnedPartAttribute>::deinit((_QWORD *)(v3 + 16));

  _Unwind_Resume(a1);
}

void sub_2253A93BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253A95E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

REAttributeDescriptor *`anonymous namespace'::makeAttributeDescriptor(uint64_t a1, int a2, void *a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  id v11;
  uint64_t v12;
  REAttributeDescriptor *v13;

  v11 = a3;
  if (a5)
  {
    if (a2 == 1)
      v12 = a1 + 8;
    else
      v12 = a1 + 64;
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_2253A970C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253A9AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  uint64_t v21;
  void *v22;

  re::FixedArray<re::StringID>::deinit(&a16);
  v21 = 80;
  while (1)
  {
    v22 = *(void **)(&a19 + v21);
    if (v22)
    {

      *(_QWORD *)(&a19 + v21) = 0;
    }
    v21 -= 16;
    if (v21 == -16)
      _Unwind_Resume(a1);
  }
}

void `anonymous namespace'::fillBufferSliceForAttribute(unsigned int a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  id v14;
  unint64_t v15;

  v7 = a2;
  v8 = v7;
  v9 = 48;
  if (a1 == 1)
    v9 = 0;
  v10 = *(void **)(a4 + v9);
  if (v7)
  {
    v11 = objc_msgSend(v7, "payloadOffset");
    v12 = objc_msgSend(v8, "bufferSize");
    v14 = v10;
    v15 = __PAIR64__(v12, v11);
  }
  else
  {
    v14 = v10;
    v15 = 0;
  }
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 16 * a1), &v14);
  v13 = v14;
  *(_QWORD *)(a3 + 16 * a1 + 8) = v15;
  if (v13)

}

void sub_2253A9C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  if (a9)

  _Unwind_Resume(a1);
}

void sub_2253A9FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2253AA33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2253AA824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_2253AABE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2253AB6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, re::StringID *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v61;
  void *v62;
  uint64_t i;
  BOOL v65;

  if (a30 && a31)
    (*(void (**)(void))(*(_QWORD *)a30 + 40))();
  for (i = 680; i != -40; i -= 40)
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)((char *)&STACK[0x350] + i));
  if (a50)
    v65 = a51 == 0;
  else
    v65 = 1;
  if (!v65)
    (*(void (**)(void))(*(_QWORD *)a50 + 40))();
  re::FixedArray<re::MeshPart>::deinit(&a61);
  _Unwind_Resume(a1);
}

uint64_t *re::MeshPart::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v17[2];

  v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  re::FixedArray<float>::operator=(a1 + 3, a2 + 3);
  re::BufferTable::operator=((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  re::FixedArray<float>::operator=(a1 + 42, a2 + 42);
  v6 = *((_OWORD *)a2 + 24);
  v5 = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 23) = *((_OWORD *)a2 + 23);
  *((_OWORD *)a1 + 24) = v6;
  *((_OWORD *)a1 + 25) = v5;
  v8 = *((_OWORD *)a2 + 27);
  v7 = *((_OWORD *)a2 + 28);
  v9 = *((_OWORD *)a2 + 26);
  *(_OWORD *)((char *)a1 + 460) = *(_OWORD *)((char *)a2 + 460);
  *((_OWORD *)a1 + 27) = v8;
  *((_OWORD *)a1 + 28) = v7;
  *((_OWORD *)a1 + 26) = v9;
  if (a1 != a2)
  {
    v10 = *(_OWORD *)((char *)a2 + 476);
    *(uint64_t *)((char *)a1 + 492) = *(uint64_t *)((char *)a2 + 492);
    *(_OWORD *)((char *)a1 + 476) = v10;
  }
  v11 = a2[63];
  v12 = a2[64];
  a2[63] = 0;
  a2[64] = (uint64_t)&str_110;
  v13 = a1[63];
  v14 = a1[64];
  a1[63] = v11;
  a1[64] = v12;
  v17[0] = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v17[1] = v14;
  re::StringID::destroyString((re::StringID *)v17);
  v15 = *(_OWORD *)(a2 + 65);
  *(_OWORD *)((char *)a1 + 532) = *(_OWORD *)((char *)a2 + 532);
  *(_OWORD *)(a1 + 65) = v15;
  return a1;
}

void sub_2253ABAC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253ABCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, char a20)
{
  re::StringID::destroyString((re::StringID *)&a20);

  _Unwind_Resume(a1);
}

void sub_2253AC030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a8);
  if (a6)
  {
    if (a7)
      (*(void (**)(void))(*(_QWORD *)a6 + 40))();
  }

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::RestPoseComponents::RestPoseComponents(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  unint64_t v12;

  *(_OWORD *)(a1 + 48) = 0u;
  v4 = (uint64_t *)(a1 + 48);
  v5 = (uint64_t *)(a1 + 24);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 8))
  {
    v11 = 0;
    v12 = 0;
    while (*(_QWORD *)(a1 + 8) > v12)
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 16) + 16 * v12) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v11);
      if (*(_QWORD *)(a2 + 8) <= v12)
        goto LABEL_11;
      if (*(_QWORD *)(a1 + 32) <= v12)
        goto LABEL_12;
      *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v12) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v11 + 16);
      if (*(_QWORD *)(a2 + 8) <= v12)
        goto LABEL_13;
      if (*(_QWORD *)(a1 + 56) <= v12)
        goto LABEL_14;
      *(_OWORD *)(*(_QWORD *)(a1 + 64) + 16 * v12++) = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v11 + 32);
      v11 += 48;
      if (v12 >= *(_QWORD *)(a2 + 8))
        return a1;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1;
}

void sub_2253AC5B0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  if (*v3)
  {
    if (v1[7])
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v1[8]);
      v1[7] = 0;
      v1[8] = 0;
    }
    *v3 = 0;
  }
  if (*v2)
  {
    if (v1[4])
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, v1[5]);
      v1[4] = 0;
      v1[5] = 0;
    }
    *v2 = 0;
  }
  if (*v1)
  {
    if (v1[1])
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      v1[1] = 0;
      v1[2] = 0;
    }
    *v1 = 0;
  }
  _Unwind_Resume(exception_object);
}

id `anonymous namespace'::makeJointNamesArray(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", *(_QWORD *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v5 = 16 * v3;
    do
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v6);

      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return v2;
}

void sub_2253AC6D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::makeParentIndicesArray(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", *(_QWORD *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(unsigned int **)(a1 + 16);
    v5 = 4 * v3;
    do
    {
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v6);

      ++v4;
      v5 -= 4;
    }
    while (v5);
  }
  return v2;
}

void sub_2253AC780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 `anonymous namespace'::makeInverseBindPoseArray(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;

  *((_QWORD *)a1 + 2) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)a1 + 1) = v4;
  if (v4)
  {
    if (v4 >> 58)
    {
LABEL_14:
      re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, v4);
      _os_crash();
      __break(1u);
LABEL_15:
      re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v9 = v7;
    *((_QWORD *)a1 + 2) = v7;
    if (!v7)
      goto LABEL_15;
    v10 = v7;
    if (v4 != 1)
    {
      bzero(v7, (v4 << 6) - 64);
      v10 = &v9[4 * v4 - 4];
    }
    result.n128_u64[0] = 0;
    v10[2] = 0u;
    v10[3] = 0u;
    *v10 = 0u;
    v10[1] = 0u;
  }
  else
  {
    v9 = 0;
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v11 = 0;
    v12 = 0;
    while (v4 != v12)
    {
      v13 = *(_QWORD *)(a2 + 16) + v11 * 16;
      result = *(__n128 *)v13;
      v14 = *(_OWORD *)(v13 + 16);
      v15 = *(_OWORD *)(v13 + 32);
      v16 = *(_OWORD *)(v13 + 48);
      v17 = &v9[v11];
      *v17 = result;
      v17[1] = v14;
      v17[2] = v15;
      v17[3] = v16;
      ++v12;
      v11 += 4;
      if (v12 >= *(_QWORD *)(a2 + 8))
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

void sub_2253ACA10(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, 0);
  *v3 = 0;
  v3[1] = 0;
  *v1 = 0;
  _Unwind_Resume(a1);
}

void `anonymous namespace'::RestPoseComponents::~RestPoseComponents(_anonymous_namespace_::RestPoseComponents *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 8));
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 1))
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    *(_QWORD *)this = 0;
  }
}

void sub_2253ACE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a8);
  if (a6)
  {
    if (a7)
      (*(void (**)(void))(*(_QWORD *)a6 + 40))();
  }

  _Unwind_Resume(a1);
}

void sub_2253AD7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, re::StringID *a17, char a18)
{
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  re::StringID *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v23 = a17;
  if (*v20)
  {
    if (*((_QWORD *)a17 + 12))
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v20 + 40))(*v20, *((_QWORD *)a17 + 13));
      *((_QWORD *)a17 + 12) = 0;
      *((_QWORD *)a17 + 13) = 0;
    }
    *v20 = 0;
    v23 = a17;
  }
  if (*v21)
  {
    v25 = *((_QWORD *)v23 + 9);
    v24 = (_QWORD *)((char *)v23 + 72);
    if (v25)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v21 + 40))(*v21, *((_QWORD *)a17 + 10));
      *v24 = 0;
      v24[1] = 0;
    }
    *v21 = 0;
    v23 = a17;
  }
  if (*a11)
  {
    v27 = *((_QWORD *)v23 + 6);
    v26 = (_QWORD *)((char *)v23 + 48);
    if (v27)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a11 + 40))(*a11, *((_QWORD *)a17 + 7));
      *v26 = 0;
      v26[1] = 0;
    }
    *a11 = 0;
  }

  re::FixedArray<re::StringID>::deinit(v19);
  re::StringID::destroyString(a17);

  _Unwind_Resume(a1);
}

void sub_2253ADA48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253AE3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,id a59)
{
  re::MeshModel::~MeshModel((re::MeshModel *)&a59);
  re::DynamicArray<re::NamedVertexBuffer>::deinit((uint64_t)&a50);
  re::FixedArray<re::MeshPart>::deinit(&a55);

  _Unwind_Resume(a1);
}

uint64_t re::FixedArray<re::MeshPart>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  int32x4_t v8;
  uint64_t v9;
  __int128 v10;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x75075075075076)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 560, a3);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 560 * a3, 16);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    *(_QWORD *)&v7 = 0x7F0000007FLL;
    *((_QWORD *)&v7 + 1) = 0x7F0000007FLL;
    v8 = vdupq_n_s32(0x7F800000u);
    do
    {
      *(_OWORD *)(result + 304) = 0uLL;
      *(_OWORD *)(result + 320) = 0uLL;
      *(_OWORD *)(result + 272) = 0uLL;
      *(_OWORD *)(result + 288) = 0uLL;
      *(_OWORD *)(result + 240) = 0uLL;
      *(_OWORD *)(result + 256) = 0uLL;
      *(_OWORD *)(result + 208) = 0uLL;
      *(_OWORD *)(result + 224) = 0uLL;
      *(_OWORD *)(result + 176) = 0uLL;
      *(_OWORD *)(result + 192) = 0uLL;
      *(_OWORD *)(result + 144) = 0uLL;
      *(_OWORD *)(result + 160) = 0uLL;
      *(_OWORD *)(result + 112) = 0uLL;
      *(_OWORD *)(result + 128) = 0uLL;
      *(_OWORD *)(result + 80) = 0uLL;
      *(_OWORD *)(result + 96) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_OWORD *)result = 0uLL;
      *(_DWORD *)(result + 208) = 1;
      *(_QWORD *)(result + 216) = 0;
      *(_QWORD *)(result + 224) = 0;
      *(_QWORD *)(result + 232) = 0;
      *(_DWORD *)(result + 240) = 0;
      *(_QWORD *)(result + 248) = 0;
      *(_QWORD *)(result + 256) = 0;
      *(_QWORD *)(result + 264) = 0;
      *(_DWORD *)(result + 272) = 0;
      *(_OWORD *)(result + 280) = 0uLL;
      *(_OWORD *)(result + 296) = 0uLL;
      *(_DWORD *)(result + 312) = 0;
      *(_QWORD *)(result + 344) = 0;
      *(_QWORD *)(result + 352) = 0;
      *(_QWORD *)(result + 336) = 0;
      *(_OWORD *)(result + 368) = xmmword_2260E5F10;
      *(_OWORD *)(result + 384) = xmmword_2260E5F20;
      *(_OWORD *)(result + 400) = xmmword_2260E5F40;
      *(_OWORD *)(result + 416) = xmmword_2260E5D70;
      *(int32x4_t *)(result + 432) = v8;
      *(_OWORD *)(result + 448) = v7;
      *(_WORD *)(result + 474) = 0;
      *(_BYTE *)(result + 472) = 0;
      *(_QWORD *)(result + 464) = 0;
      *(_QWORD *)(result + 504) = 0;
      *(_QWORD *)(result + 512) = &str_110;
      *(_QWORD *)(result + 528) = 0;
      *(_BYTE *)(result + 536) = 3;
      *(_DWORD *)(result + 540) = 1;
      *(_DWORD *)(result + 544) = 25172350;
      v9 = result + 476;
      *(_QWORD *)(result + 476) = -1;
      *(_QWORD *)(result + 484) = -1;
      result += 560;
      *(_QWORD *)(v9 + 16) = -1;
      --v6;
    }
    while (v6);
  }
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_DWORD *)(result + 208) = 1;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_DWORD *)(result + 240) = 0;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 264) = 0;
  *(_DWORD *)(result + 272) = 0;
  *(_OWORD *)(result + 280) = 0u;
  *(_OWORD *)(result + 296) = 0u;
  *(_DWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 344) = 0;
  *(_QWORD *)(result + 352) = 0;
  *(_QWORD *)(result + 336) = 0;
  *(_OWORD *)(result + 368) = xmmword_2260E5F10;
  *(_OWORD *)(result + 384) = xmmword_2260E5F20;
  *(_OWORD *)(result + 400) = xmmword_2260E5F40;
  *(_OWORD *)(result + 416) = xmmword_2260E5D70;
  *(_QWORD *)&v10 = 0x7F0000007FLL;
  *((_QWORD *)&v10 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(result + 432) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(result + 448) = v10;
  *(_WORD *)(result + 474) = 0;
  *(_BYTE *)(result + 472) = 0;
  *(_QWORD *)(result + 464) = 0;
  *(_QWORD *)(result + 504) = 0;
  *(_QWORD *)(result + 512) = &str_110;
  *(_QWORD *)(result + 528) = 0;
  *(_BYTE *)(result + 536) = 3;
  *(_DWORD *)(result + 540) = 1;
  *(_DWORD *)(result + 544) = 25172350;
  *(_QWORD *)(result + 476) = -1;
  *(_QWORD *)(result + 484) = -1;
  *(_QWORD *)(result + 492) = -1;
  return result;
}

void sub_2253AEAA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *re::`anonymous namespace'::MeshPayloadBuilder::ContiguousLayout::createDirectMeshPayload(re::_anonymous_namespace_::MeshPayloadBuilder::ContiguousLayout *this, unint64_t a2, unsigned int a3, Device *a4)
{
  void *v5;
  uint64_t Bytes;
  unint64_t Length;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  id v12;
  void *result;

  v5 = (void *)DRMemoryResourceCreate();
  if (!v5)
  {
LABEL_8:

    return v5;
  }
  Bytes = DRMemoryResourceGetBytes();
  Length = DRMemoryResourceGetLength();
  if (!*((_BYTE *)this + 8) && Length >= *((unsigned int *)this + 1))
  {
    v9 = *((_QWORD *)this + 4);
    if (v9)
    {
      v10 = (unsigned int *)*((_QWORD *)this + 6);
      v11 = &v10[6 * v9];
      do
      {
        memcpy((void *)(Bytes + *v10), *((const void **)v10 + 1), *((_QWORD *)v10 + 2));
        v10 += 6;
      }
      while (v10 != v11);
    }
    DRMemoryResourceDidUpdateBytes();
    v12 = v5;
    goto LABEL_8;
  }
  re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "requiredSize.hasValue() && dest.size() >= requiredSize.value()", "copyBytes", 83);
  result = (void *)_os_crash();
  __break(1u);
  return result;
}

void sub_2253AEBB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *re::DynamicArray<re::MeshModel>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshModel>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x330uLL))
        {
          v2 = 816 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 816 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 816, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 816 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::MeshModel::MeshModel(v11, v8);
          re::MeshModel::~MeshModel((re::MeshModel *)v8);
          v8 += 102;
          v11 += 816;
          v10 -= 816;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::MeshModel::MeshModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;

  v4 = *a2;
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)a1 = *a2 & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
  *(_QWORD *)(a1 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v6;
  a2[6] = 0;
  a2[7] = 0;
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = a2[8];
  a2[8] = v7;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v8 = a2[10];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_QWORD *)(a1 + 80) = v8;
  a2[9] = 0;
  a2[10] = 0;
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = a2[11];
  a2[11] = v9;
  for (i = 12; i != 102; i += 5)
    std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100]((_QWORD *)(a1 + i * 8), &a2[i]);
  return a1;
}

_QWORD *re::FixedArray<re::MeshVertexAttributeBuffers::Attribute>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 56 * v2;
      v5 = (_QWORD *)(result[2] + 24);
      do
      {
        if (*v5)
        {
          if (v5[1])
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[2]);
            v5[1] = 0;
            v5[2] = 0;
          }
          *v5 = 0;
        }
        v5 += 7;
        v4 -= 56;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::SkinningModelBuilder::AttributeDescriptor::SkinnedPartAttribute>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  double v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 56 * v2;
      v5 = (uint64_t *)(result[2] + 8);
      do
      {
        v6 = re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v5);
        v5 += 7;
        v4 -= 56;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, v1[2], v6);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

double re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 48;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::BufferTable::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)a1, (uint64_t *)a2);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1 + 64, a2 + 64);
  re::DynamicArray<re::RigComponentConstraint>::operator=(a1 + 104, a2 + 104);
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=((_QWORD *)(a1 + 144), (_QWORD *)(a2 + 144));
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a1 + 200, a2 + 200);
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(a1 + 240, a2 + 240);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  return a1;
}

{
  int v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  if (a1 != a2)
  {
    re::DynamicArray<re::BufferView>::operator=(a1 + 64, (uint64_t *)(a2 + 64));
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=(a1 + 144, a2 + 144);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::copy((_anonymous_namespace_ *)a1, (uint64_t *)a2);
    re::DynamicArray<re::FixedArray<unsigned long>>::operator=(a1 + 200, (uint64_t *)(a2 + 200));
    re::DynamicArray<unsigned long>::operator=(a1 + 240, (uint64_t *)(a2 + 240));
    v4 = *(_DWORD *)(a2 + 280);
    *(_DWORD *)(a1 + 280) = v4;
    if (v4)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        if (*(_QWORD *)(a1 + 184) > v6
          && *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1 + 144, v6))
        {
          v7 = (_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1 + 144, v6);
          if (*(_QWORD *)(a1 + 80) <= v6)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 96) + v5) = *v7;
        }
        ++v6;
        v5 += 16;
      }
      while (v6 < *(unsigned int *)(a1 + 280));
    }
  }
  return a1;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 != a2)
  {
    if (*a1)
    {
      if (*a2 && *a1 != *a2)
      {
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || allocator() == other.allocator()", "operator=", 526);
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    re::BucketArray<RESubscriptionHandle,8ul>::swap((uint64_t)a1, (uint64_t)a2);
  }
  return (uint64_t)a1;
}

uint64_t *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[7];
  result[7] = a2[7];
  a2[7] = v2;
  v3 = *result;
  *result = *a2;
  *a2 = v3;
  v4 = result[1];
  v5 = result[2];
  v6 = a2[2];
  result[1] = a2[1];
  result[2] = v6;
  a2[1] = v4;
  a2[2] = v5;
  v7 = result[5];
  result[5] = a2[5];
  a2[5] = v7;
  v8 = result[6];
  result[6] = a2[6];
  a2[6] = v8;
  v9 = result[3];
  result[3] = a2[3];
  a2[3] = v9;
  v10 = result[4];
  result[4] = a2[4];
  a2[4] = v10;
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray(uint64_t a1)
{
  re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::deinit(a1);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  return a1;
}

void sub_2253AF194(_Unwind_Exception *a1)
{
  uint64_t v1;

  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  _Unwind_Resume(a1);
}

uint64_t re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  re::SkinningModelBuilder::PreparedSkinnedMeshPartData *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (re::SkinningModelBuilder::PreparedSkinnedMeshPartData *)re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a1, i);
      re::SkinningModelBuilder::PreparedSkinnedMeshPartData::~PreparedSkinnedMeshPartData(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 152 * (a2 & 3);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 152 * (a2 & 3);
}

void re::SkinningModelBuilder::PreparedSkinnedMeshPartData::~PreparedSkinnedMeshPartData(re::SkinningModelBuilder::PreparedSkinnedMeshPartData *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {

    *((_QWORD *)this + 17) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {

    *((_QWORD *)this + 13) = 0;
  }
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {

    *((_QWORD *)this + 8) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {

    *((_QWORD *)this + 4) = 0;
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray(uint64_t a1)
{
  re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::deinit(a1);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  return a1;
}

void sub_2253AF490(_Unwind_Exception *a1)
{
  uint64_t v1;

  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  _Unwind_Resume(a1);
}

uint64_t re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 88 * (a2 & 3);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 88 * (a2 & 3);
}

void re::FixedArray<simd_quatf>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 16 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 16);
    v8 = (_QWORD *)((char *)v8 + v5 - 16);
  }
  *v8 = 0;
  v8[1] = 0;
}

uint64_t re::DynamicArray<re::DeformationModelData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 720 * v4;
        do
        {
          v6 = v3 + 720;
          for (i = 680; i != -40; i -= 40)
            std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v3 + i));
          v3 += 720;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::DeformationModelData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t j;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DeformationModelData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x2D0uLL))
        {
          v2 = 720 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 720 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 720, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 720 * v9;
        v11 = v7;
        do
        {
          for (i = 0; i != 90; i += 5)
            std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100](&v11[i], (uint64_t *)(v8 + i * 8));
          v13 = v8 + 720;
          for (j = 680; j != -40; j -= 40)
            std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v8 + j));
          v11 += 90;
          v8 += 720;
        }
        while (v13 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::`anonymous namespace'::DeformerBuilders>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          v2 = 136 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (uint64_t)(v7 + 10);
        v11 = 136 * v9;
        v12 = v8 + 80;
        do
        {
          v13 = *(_OWORD *)(v12 - 80);
          *(_QWORD *)(v10 - 64) = *(_QWORD *)(v12 - 64);
          *(_OWORD *)(v10 - 80) = v13;
          re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArray(v10 - 56, v12 - 56);
          re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArray(v10, v12);
          re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::~BucketArray(v12);
          re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::~BucketArray(v12 - 56);
          v10 += 136;
          v12 += 136;
          v11 -= 136;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[5];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)a2;
  if (v5)
  {
    re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::init(a1, v5, *(_QWORD *)(a2 + 8));
    v6 = *(_QWORD *)(a2 + 40);
    if (v6 >= *(_QWORD *)(a1 + 40))
    {
      re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, (v6 + 3) >> 2);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>&,true>>((uint64_t)v21, a2, 0, a2, *(_QWORD *)(a1 + 40), a1, 0);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = v6 - v8;
      if (v6 != v8)
      {
        v10 = 0;
        do
        {
          v11 = v10 + *(_QWORD *)(a1 + 40);
          if (*(_QWORD *)(a1 + 8) <= v11 >> 2)
          {
            memset(v21, 0, sizeof(v21));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v12 = v4;
          if ((*(_BYTE *)(a1 + 16) & 1) == 0)
            v12 = *(_QWORD *)(a1 + 32);
          v13 = *(_QWORD *)(v12 + 8 * (v11 >> 2));
          v14 = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a2, v11);
          v15 = v13 + 88 * (v11 & 3);
          v16 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)v15 = *(_OWORD *)v14;
          *(_OWORD *)(v15 + 16) = v16;
          v17 = *(_OWORD *)(v14 + 32);
          v18 = *(_OWORD *)(v14 + 48);
          v19 = *(_OWORD *)(v14 + 64);
          *(_QWORD *)(v15 + 80) = *(_QWORD *)(v14 + 80);
          *(_OWORD *)(v15 + 48) = v18;
          *(_OWORD *)(v15 + 64) = v19;
          *(_OWORD *)(v15 + 32) = v17;
          ++v10;
        }
        while (v9 != v10);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>&,true>>((uint64_t)v21, a2, 0, a2, *(_QWORD *)(a2 + 40), a1, 0);
      if (v6 != *(_QWORD *)(a1 + 40))
      {
        v7 = v6;
        do
          re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a1, v7++);
        while (v7 != *(_QWORD *)(a1 + 40));
      }
    }
    *(_QWORD *)(a1 + 40) = v6;
  }
  return a1;
}

void sub_2253AFE84(_Unwind_Exception *a1)
{
  uint64_t v1;

  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  _Unwind_Resume(a1);
}

uint64_t *re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 352, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::RawSkinnedMeshPartData,re::SkinningModelBuilder::RawSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>&,true>>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v12 = (_QWORD *)result;
  if (a2 != a4 || a3 != a5)
  {
    v13 = a5 - 1;
    do
    {
      do
      {
        v14 = a3;
        v15 = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a2, a3);
        result = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a6, a7);
        v16 = *(_OWORD *)(v15 + 16);
        *(_OWORD *)result = *(_OWORD *)v15;
        *(_OWORD *)(result + 16) = v16;
        v18 = *(_OWORD *)(v15 + 48);
        v17 = *(_OWORD *)(v15 + 64);
        v19 = *(_OWORD *)(v15 + 32);
        *(_QWORD *)(result + 80) = *(_QWORD *)(v15 + 80);
        *(_OWORD *)(result + 48) = v18;
        *(_OWORD *)(result + 64) = v17;
        *(_OWORD *)(result + 32) = v19;
        a3 = v14 + 1;
        ++a7;
      }
      while (a2 != a4);
    }
    while (v13 != v14);
    a3 = a5;
  }
  *v12 = a2;
  v12[1] = a3;
  v12[2] = a6;
  v12[3] = a7;
  return result;
}

uint64_t re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  re::SkinningModelBuilder::PreparedSkinnedMeshPartData *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)a2;
  if (v5)
  {
    re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::init(a1, v5, *(_QWORD *)(a2 + 8));
    v6 = *(_QWORD *)(a2 + 40);
    if (v6 >= *(_QWORD *)(a1 + 40))
    {
      re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, (v6 + 3) >> 2);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>&,true>>((void **)v18, a2, 0, a2, *(_QWORD *)(a1 + 40), a1, 0);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = v6 - v9;
      if (v6 != v9)
      {
        v11 = 0;
        do
        {
          v12 = v11 + *(_QWORD *)(a1 + 40);
          if (*(_QWORD *)(a1 + 8) <= v12 >> 2)
          {
            memset(v18, 0, sizeof(v18));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v13 = v4;
          if ((*(_BYTE *)(a1 + 16) & 1) == 0)
            v13 = *(_QWORD *)(a1 + 32);
          v14 = *(_QWORD *)(v13 + 8 * (v12 >> 2));
          v15 = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a2, v12);
          v16 = v14 + 152 * (v12 & 3);
          *(_QWORD *)v16 = *(_QWORD *)v15;
          re::FixedArray<unsigned char>::FixedArray((_QWORD *)(v16 + 8), (uint64_t *)(v15 + 8));
          *(_QWORD *)(v16 + 32) = *(id *)(v15 + 32);
          *(_QWORD *)(v16 + 40) = *(_QWORD *)(v15 + 40);
          *(_OWORD *)(v16 + 48) = *(_OWORD *)(v15 + 48);
          *(_QWORD *)(v16 + 64) = *(id *)(v15 + 64);
          *(_QWORD *)(v16 + 72) = *(_QWORD *)(v15 + 72);
          re::FixedArray<unsigned char>::FixedArray((_QWORD *)(v16 + 80), (uint64_t *)(v15 + 80));
          *(_QWORD *)(v16 + 104) = *(id *)(v15 + 104);
          *(_QWORD *)(v16 + 112) = *(_QWORD *)(v15 + 112);
          *(_OWORD *)(v16 + 120) = *(_OWORD *)(v15 + 120);
          *(_QWORD *)(v16 + 136) = *(id *)(v15 + 136);
          *(_QWORD *)(v16 + 144) = *(_QWORD *)(v15 + 144);
          ++v11;
        }
        while (v10 != v11);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>&,true>>((void **)v18, a2, 0, a2, *(_QWORD *)(a2 + 40), a1, 0);
      if (v6 != *(_QWORD *)(a1 + 40))
      {
        v7 = v6;
        do
        {
          v8 = (re::SkinningModelBuilder::PreparedSkinnedMeshPartData *)re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a1, v7);
          re::SkinningModelBuilder::PreparedSkinnedMeshPartData::~PreparedSkinnedMeshPartData(v8);
          ++v7;
        }
        while (v7 != *(_QWORD *)(a1 + 40));
      }
    }
    *(_QWORD *)(a1 + 40) = v6;
  }
  return a1;
}

void sub_2253B04D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  _Unwind_Resume(a1);
}

uint64_t *re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 608, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData const&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul> const&,true>,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::BucketArrayIterator<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,re::SkinningModelBuilder::PreparedSkinnedMeshPartData&,re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>&,true>>(void **result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = result;
  if (a2 != a4 || a3 != a5)
  {
    v13 = a5 - 1;
    do
    {
      do
      {
        v14 = a3;
        v15 = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a2, a3);
        v16 = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](a6, a7);
        *(_QWORD *)v16 = *(_QWORD *)v15;
        re::FixedArray<unsigned char>::operator=((uint64_t *)(v16 + 8), (uint64_t *)(v15 + 8));
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 32), (void **)(v15 + 32));
        *(_QWORD *)(v16 + 40) = *(_QWORD *)(v15 + 40);
        *(_OWORD *)(v16 + 48) = *(_OWORD *)(v15 + 48);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 64), (void **)(v15 + 64));
        *(_QWORD *)(v16 + 72) = *(_QWORD *)(v15 + 72);
        re::FixedArray<unsigned char>::operator=((uint64_t *)(v16 + 80), (uint64_t *)(v15 + 80));
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 104), (void **)(v15 + 104));
        *(_QWORD *)(v16 + 112) = *(_QWORD *)(v15 + 112);
        *(_OWORD *)(v16 + 120) = *(_OWORD *)(v15 + 120);
        result = NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 136), (void **)(v15 + 136));
        *(_QWORD *)(v16 + 144) = *(_QWORD *)(v15 + 144);
        a3 = v14 + 1;
        ++a7;
      }
      while (a2 != a4);
    }
    while (v13 != v14);
    a3 = a5;
  }
  *v12 = a2;
  v12[1] = a3;
  v12[2] = a6;
  v12[3] = a7;
  return result;
}

_QWORD *re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 4);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::FixedArray<re::BufferSlice>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  id *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (id *)result[2];
      v5 = 16 * v2;
      do
      {
        if (*v4)
        {

          *v4 = 0;
        }
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::DynamicArray<re::MeshModel>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshModel>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshModel>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::NamedVertexBuffer>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::NamedVertexBuffer>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::NamedVertexBuffer>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::NamedVertexBuffer>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::NamedVertexBuffer>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 6;
        v11 = v7;
        do
        {
          *(_OWORD *)v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = v8[3];
          v12 = v8[1];
          *v11 = *v8;
          *v8 = 0;
          v13 = v8[2];
          v8[3] = 0;
          v15 = v11[1];
          v14 = v11[2];
          v11[1] = v12;
          v11[2] = v13;
          v8[1] = v15;
          v8[2] = v14;
          *((_WORD *)v11 + 16) = *((_WORD *)v8 + 16);
          v11[5] = (id)v8[5];
          v11[6] = v8[6];
          v11[7] = v8[7];
          v16 = (void *)v8[5];
          if (v16)
          {

            v8[5] = 0;
          }
          if (*v8)
          {
            if ((v8[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v8 + 40))(*v8, v8[2]);
            *(_OWORD *)v8 = 0u;
            *((_OWORD *)v8 + 1) = 0u;
          }
          v8 += 8;
          v11 += 8;
          v10 -= 64;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::NamedVertexBuffer>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v4 << 6;
        do
        {
          v6 = (void *)v3[5];
          if (v6)
          {

            v3[5] = 0;
          }
          if (*v3)
          {
            if ((v3[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v3[2]);
            *(_OWORD *)v3 = 0u;
            *((_OWORD *)v3 + 1) = 0u;
          }
          v3 += 8;
          v5 -= 64;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = a1[2];
        v6 = *(_DWORD *)(v5 + v3);
        if (v6 < 0)
        {
          v7 = v5 + v3;
          *(_DWORD *)(v5 + v3) = v6 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v5 + v3 + 8));
          v8 = *(void **)(v7 + 24);
          if (v8)
          {

            *(_QWORD *)(v7 + 24) = 0;
          }
        }
        ++v4;
        v3 += 40;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v31, v14, v13);
          v16 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v31[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v22 - 24) & 0x80000000) != 0)
              {
                v23 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v22 - 16) >> 31) ^ (*(_QWORD *)(v22 - 16) >> 1));
                v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22 - 16, v22);
              }
              v22 += 40;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13)
          v27 = 2 * v12;
        else
          v27 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 40 * v9);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 40 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  v28 = 40 * v9;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8), a4);
  v29 = *(_QWORD *)(a1 + 16) + 40 * v9;
  *(_QWORD *)(v29 + 24) = *(id *)a5;
  *(_QWORD *)(v29 + 32) = *(_QWORD *)(a5 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void sub_2253B115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<re::StringID,re::BufferSlice,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

re::StringID *re::FixedArray<re::StringID>::init<re::StringID>(re::StringID *result, uint64_t a2, unint64_t a3, const StringID *a4)
{
  unint64_t v4;
  re::StringID *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)result = a2;
  *((_QWORD *)result + 1) = a3;
  if (!a3)
    return result;
  v4 = a3;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  result = (re::StringID *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 8);
  *((_QWORD *)v6 + 2) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (re::StringID *)_os_crash();
    __break(1u);
    return result;
  }
  while (--v4)
    result = (re::StringID *)((char *)re::StringID::StringID(result, a4) + 16);
  v8 = *(_QWORD *)&a4->var0;
  *(_QWORD *)result = *(_QWORD *)result & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)&a4->var0 & 1;
  *(_QWORD *)result = *(_QWORD *)&a4->var0 & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *((_QWORD *)result + 1) = a4->var1;
  *(_QWORD *)&a4->var0 = 0;
  a4->var1 = (char *)&str_110;
  return result;
}

void re::FixedArray<re::MeshLodLevelInfo>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >= 0x1555555555555556)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 12, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 12 * a3;
  v6 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 12 * a3, 4);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 12);
    v8 += v5 - 12;
  }
  *(_QWORD *)v8 = 0;
  *((_DWORD *)v8 + 2) = 0;
}

_QWORD *re::IKRigAssetRuntimeData::init(_anonymous_namespace_ *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;
  unint64_t v7;
  _QWORD *v8;
  uint64_t i;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[4];
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = 0;
    v8 = (_QWORD *)(a2 + 16);
    for (i = 8; ; i += 40)
    {
      v10 = *(v8 - 1);
      v11 = (v10 & 1) != 0 ? (_QWORD *)*v8 : (_QWORD *)((char *)v8 - 7);
      v12 = (v10 & 1) != 0 ? v10 >> 1 : v10 >> 1;
      v13 = MEMORY[0x22769136C](v11, v12);
      v17[0] = &off_24ED3B790;
      v18 = v17;
      v19 = v13;
      v20[3] = v20;
      v20[0] = &off_24ED3B790;
      v14 = *((_QWORD *)a1 + 1);
      if (v14 <= v7)
      {
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v21 = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 468;
        v25 = 2048;
        v26 = v7;
        v27 = 2048;
        v28 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v15 = (_QWORD *)(*((_QWORD *)a1 + 2) + i);
      v19 = 0;
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v15 - 1, v13);
      std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v15, (uint64_t)v20);
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v19);
      result = v18;
      if (v18 == v17)
        break;
      if (v18)
      {
        v16 = 5;
LABEL_14:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
      }
      ++v7;
      v8 += 4;
      if (a3 == v7)
        return result;
    }
    result = v17;
    v16 = 4;
    goto LABEL_14;
  }
  return result;
}

_QWORD *re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (uint64_t *)result[2];
      v5 = 40 * v2;
      do
      {
        v4 = std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v4)
           + 5;
        v5 -= 40;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t *re::IKRigAsset::assetType(re::IKRigAsset *this)
{
  unsigned __int8 v1;

  {
    re::IKRigAsset::assetType(void)::type = (uint64_t)"IKRig";
    qword_255827828 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::IKRigAsset::assetType(void)::type);
  }
  return &re::IKRigAsset::assetType(void)::type;
}

_QWORD *re::IKRigAsset::init(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  _QWORD *result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v31;

  v31 = a2;
  result = re::IKRigAssetRuntimeData::init((_anonymous_namespace_ *)(a1 + 15), a2, a3);
  if (a3)
  {
    v20 = a3;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (a1[1] > v23)
    {
      re::DynamicString::operator=((re::DynamicString *)(a1[2] + v21), (re::DynamicString *)(v31 + v21));
      if (a5 == v23)
        goto LABEL_15;
      if (a1[10] <= v23)
        goto LABEL_16;
      re::StringID::operator=((unint64_t *)(a1[11] + v22), (uint64_t *)(a4 + v22));
      if (a7 == v23)
        goto LABEL_17;
      if (a1[13] <= v23)
        goto LABEL_18;
      re::StringID::operator=((unint64_t *)(a1[14] + v22), (uint64_t *)(a6 + v22));
      if (a10 == v23)
        goto LABEL_19;
      if (a1[4] <= v23)
        goto LABEL_20;
      result = re::StringID::operator=((unint64_t *)(a1[5] + v22), (uint64_t *)(a9 + v22));
      if (a12 == v23)
        goto LABEL_21;
      if (a1[7] <= v23)
        goto LABEL_22;
      *(_QWORD *)(a1[8] + 8 * v23) = *(_QWORD *)(a11 + 8 * v23);
      ++v23;
      v22 += 16;
      v21 += 32;
      if (v20 == v23)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a5, a5);
    _os_crash();
    __break(1u);
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a7, a7);
    _os_crash();
    __break(1u);
LABEL_18:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a10, a10);
    _os_crash();
    __break(1u);
LABEL_20:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a12, a12);
    _os_crash();
    __break(1u);
LABEL_22:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

_QWORD *re::IKRigAsset::init(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  _QWORD *v20;
  _anonymous_namespace_ *v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v39[3];
  _QWORD *v40;
  _BYTE v41[18];
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  _BYTE v45[10];
  _BYTE v46[12];
  __int16 v47;
  int v48;
  __int16 v49;
  unint64_t v50;
  __int16 v51;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v20 = a1 + 15;
  if (a3)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 8;
    while (1)
    {
      if (a5 == v26)
      {
        re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a5, a5);
        _os_crash();
        __break(1u);
LABEL_22:
        *(_QWORD *)v46 = 0;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v41 = 136315906;
        *(_QWORD *)&v41[4] = "operator[]";
        *(_WORD *)&v41[12] = 1024;
        *(_DWORD *)&v41[14] = 468;
        v42 = 2048;
        v43 = v26;
        v44 = 2048;
        *(_QWORD *)v45 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_23:
        re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a7, a7);
        _os_crash();
        __break(1u);
LABEL_24:
        *(_QWORD *)v46 = 0;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v41 = 136315906;
        *(_QWORD *)&v41[4] = "operator[]";
        *(_WORD *)&v41[12] = 1024;
        *(_DWORD *)&v41[14] = 468;
        v42 = 2048;
        v43 = v26;
        v44 = 2048;
        *(_QWORD *)v45 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_25:
        re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a10, a10);
        _os_crash();
        __break(1u);
LABEL_26:
        *(_QWORD *)v46 = 0;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v41 = 136315906;
        *(_QWORD *)&v41[4] = "operator[]";
        *(_WORD *)&v41[12] = 1024;
        *(_DWORD *)&v41[14] = 468;
        v42 = 2048;
        v43 = v26;
        v44 = 2048;
        *(_QWORD *)v45 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a12, a12);
        _os_crash();
        __break(1u);
LABEL_28:
        *(_QWORD *)v46 = 0;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v41 = 136315906;
        *(_QWORD *)&v41[4] = "operator[]";
        *(_WORD *)&v41[12] = 1024;
        *(_DWORD *)&v41[14] = 468;
        v42 = 2048;
        v43 = v26;
        v44 = 2048;
        *(_QWORD *)v45 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_29:
        re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a14, a14);
        _os_crash();
        __break(1u);
LABEL_30:
        *(_QWORD *)v46 = 0;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v41 = 136315906;
        *(_QWORD *)&v41[4] = "operator[]";
        *(_WORD *)&v41[12] = 1024;
        *(_DWORD *)&v41[14] = 468;
        v42 = 2048;
        v43 = v26;
        v44 = 2048;
        *(_QWORD *)v45 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_31:
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v46 = 136315906;
        *(_QWORD *)&v46[4] = "operator[]";
        v47 = 1024;
        v48 = 468;
        v49 = 2048;
        v50 = v26;
        v51 = 2048;
        v52 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v20 = (_QWORD *)a1[1];
      if ((unint64_t)v20 <= v26)
        goto LABEL_22;
      re::DynamicString::operator=((re::DynamicString *)(a1[2] + v24), (re::DynamicString *)(a4 + v24));
      if (a7 == v26)
        goto LABEL_23;
      v20 = (_QWORD *)a1[10];
      if ((unint64_t)v20 <= v26)
        goto LABEL_24;
      re::StringID::operator=((unint64_t *)(a1[11] + v25), (uint64_t *)(a6 + v25));
      if (a10 == v26)
        goto LABEL_25;
      v20 = (_QWORD *)a1[13];
      if ((unint64_t)v20 <= v26)
        goto LABEL_26;
      re::StringID::operator=((unint64_t *)(a1[14] + v25), (uint64_t *)(a9 + v25));
      if (a12 == v26)
        goto LABEL_27;
      v20 = (_QWORD *)a1[4];
      if ((unint64_t)v20 <= v26)
        goto LABEL_28;
      re::StringID::operator=((unint64_t *)(a1[5] + v25), (uint64_t *)(a11 + v25));
      if (a14 == v26)
        goto LABEL_29;
      v20 = (_QWORD *)a1[7];
      if ((unint64_t)v20 <= v26)
        goto LABEL_30;
      *(_QWORD *)(a1[8] + 8 * v26) = *(_QWORD *)(a13 + 8 * v26);
      v32 = *(_QWORD *)(a2 + 8 * v26);
      v39[0] = &off_24ED3B820;
      v40 = v39;
      *(_QWORD *)v41 = v32;
      *(_QWORD *)&v45[2] = &v41[8];
      *(_QWORD *)&v41[8] = &off_24ED3B820;
      v20 = (_QWORD *)a1[16];
      if ((unint64_t)v20 <= v26)
        goto LABEL_31;
      v20 = (_QWORD *)(a1[17] + v27);
      *(_QWORD *)v41 = 0;
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v20 - 1, v32);
      std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v20, (uint64_t)&v41[8]);
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v41);
      result = v40;
      if (v40 == v39)
        break;
      if (v40)
      {
        v33 = 5;
LABEL_18:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v33))();
      }
      ++v26;
      v27 += 40;
      v25 += 16;
      v24 += 32;
      if (a3 == v26)
        return result;
    }
    result = v39;
    v33 = 4;
    goto LABEL_18;
  }
  return result;
}

re *re::IKRigAssetLoader::unloadAsset(re::IKRigAssetLoader *this, _QWORD *a2)
{
  return re::internal::destroyPersistent<re::IKRigAsset>((re *)"unloadAsset", 114, a2);
}

re *re::internal::destroyPersistent<re::IKRigAsset>(re *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a3 + 15);
    re::FixedArray<re::StringID>::deinit(a3 + 12);
    re::FixedArray<re::StringID>::deinit(a3 + 9);
    v5 = a3[6];
    if (v5)
    {
      if (a3[7])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, a3[8]);
        a3[7] = 0;
        a3[8] = 0;
      }
      a3[6] = 0;
    }
    re::FixedArray<re::StringID>::deinit(a3 + 3);
    re::FixedArray<re::DynamicString>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

uint64_t re::IKRigAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  if (!*(_QWORD *)(a2 + 120))
    re::IKRigAssetRuntimeData::init((_anonymous_namespace_ *)(a2 + 120), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 8));
  return 1;
}

BOOL re::IKRigAssetLoader::isSupportedSourceExtension(re::IKRigAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "ik") == 0;
}

uint64_t re::IKRigAssetLoader::introspectionType(re::IKRigAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254103030);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103030))
  {
    qword_254103028 = re::internal::getOrCreateInfo((re::internal *)"IKRigAsset", (uint64_t (*)(re::internal *))re::allocInfo_IKRigAsset, (re::IntrospectionBase *(*)(void))re::initInfo_IKRigAsset, (void (*)(re::IntrospectionBase *))&unk_254103020, 0);
    __cxa_guard_release(&qword_254103030);
  }
  return qword_254103028;
}

uint64_t *re::allocInfo_IKRigAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254103010);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103010))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541030A8, 0);
    *(uint64_t *)((char *)&qword_2541030B8 + 6) = 0;
    qword_2541030B8 = 0;
    qword_2541030C8 = 0;
    qword_2541030D0 = 0xFFFFFFFFLL;
    qword_2541030A8 = (uint64_t)&off_24ED7DAA8;
    qword_2541030D8 = (uint64_t)"IKRigAsset";
    dword_2541030E0 = 0;
    unk_2541030E8 = 0u;
    unk_2541030F8 = 0u;
    unk_254103108 = 0u;
    qword_254103118 = 0;
    __cxa_guard_release(&qword_254103010);
  }
  return &qword_2541030A8;
}

void re::initInfo_IKRigAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0xE2F738A332E04;
  v26[1] = "IKRigAsset";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_254103018);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103018);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_rigStrings";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254103040 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_sourceBindTargets";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x4800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254103048 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_targetBindTargets";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x6000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254103050 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "m_solverNames";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x1800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254103058 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::FixedArray<unsigned long>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "m_solverIDs";
      *(_QWORD *)(v24 + 16) = &qword_254103068;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x3000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254103060 = v24;
      __cxa_guard_release(&qword_254103018);
    }
  }
  *((_QWORD *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254103040;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IKRigAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IKRigAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IKRigAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IKRigAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

void re::IntrospectionInfo<re::FixedArray<unsigned long>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_254103038);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254103038))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_254103068);
    qword_254103068 = (uint64_t)&off_24ED3B8A0;
    __cxa_guard_release(&qword_254103038);
  }
  if ((_MergedGlobals_98 & 1) == 0)
  {
    v3 = re::introspect_size_t((re *)1, a2);
    if ((_MergedGlobals_98 & 1) == 0)
    {
      v4 = (uint64_t)v3;
      _MergedGlobals_98 = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103068, 0);
      qword_254103078 = 0x1800000004;
      dword_254103080 = v5;
      word_254103084 = 0;
      *(_QWORD *)&xmmword_254103088 = 0;
      *((_QWORD *)&xmmword_254103088 + 1) = 0xFFFFFFFFLL;
      qword_254103098 = v4;
      unk_2541030A0 = 0;
      qword_254103068 = (uint64_t)&off_24ED3B8A0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254103068, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginListType((uint64_t)&v16, v14, 1, 0x18uLL, 8uLL, &v15);
        re::TypeBuilder::setConstructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v16, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v16, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v16, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_254103088 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

double re::internal::defaultConstruct<re::IKRigAsset>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  double result;

  result = 0.0;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  return result;
}

_QWORD *re::internal::defaultDestruct<re::IKRigAsset>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a3 + 15);
  re::FixedArray<re::StringID>::deinit(a3 + 12);
  re::FixedArray<re::StringID>::deinit(a3 + 9);
  v4 = a3[6];
  if (v4)
  {
    if (a3[7])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[8]);
      a3[7] = 0;
      a3[8] = 0;
    }
    a3[6] = 0;
  }
  re::FixedArray<re::StringID>::deinit(a3 + 3);
  return re::FixedArray<re::DynamicString>::deinit(a3);
}

double re::internal::defaultConstructV2<re::IKRigAsset>(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

_QWORD *re::internal::defaultDestructV2<re::IKRigAsset>(_QWORD *a1)
{
  uint64_t v2;

  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a1 + 15);
  re::FixedArray<re::StringID>::deinit(a1 + 12);
  re::FixedArray<re::StringID>::deinit(a1 + 9);
  v2 = a1[6];
  if (v2)
  {
    if (a1[7])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[8]);
      a1[7] = 0;
      a1[8] = 0;
    }
    a1[6] = 0;
  }
  re::FixedArray<re::StringID>::deinit(a1 + 3);
  return re::FixedArray<re::DynamicString>::deinit(a1);
}

void re::IKRigAssetLoader::~IKRigAssetLoader(re::IKRigAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result = 0;
      result[4] = 0;
      result += 5;
      --v6;
    }
    while (v6);
  }
  *result = 0;
  result[4] = 0;
  return result;
}

void std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED3B790;
  return result;
}

void std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED3B790;
}

void std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::operator()()
{
  JUMPOUT(0x2276913A8);
}

uint64_t std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0,std::allocator<re::IKRigAssetRuntimeData::init(re::Slice<re::DynamicString>)::$_0>,void ()(CoreIKRig *)>::target_type()
{
}

void std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED3B820;
  return result;
}

void std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED3B820;
}

void std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::operator()()
{
  JUMPOUT(0x2276913A8);
}

uint64_t std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0,std::allocator<re::IKRigAsset::init(re::Slice<CoreIKRig *>,re::Slice<re::DynamicString>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<re::StringID>,re::Slice<unsigned long>)::$_0>,void ()(CoreIKRig *)>::target_type()
{
}

_QWORD *re::IntrospectionFixedArray<unsigned long>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<unsigned long>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<unsigned long>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<unsigned long>::destroy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

void re::IntrospectionFixedArray<unsigned long>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t v11;

  re::FixedArray<unsigned long>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 8;
    }
    while (a5 != v11);
  }
}

uint64_t re::IntrospectionFixedArray<unsigned long>::deinit(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<unsigned long>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<unsigned long>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<unsigned long>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 8 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *a1;
  if (v8)
  {
    if (a1[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  re::FixedArray<unsigned long>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = a1[1];
    if (v10)
    {
      v11 = (char *)a1[2];
      v12 = 8 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 8 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::BlendShapeWeightsMapping::update<re::MeshAsset>(re::BlendShapeWeightsMapping *a1, _QWORD *a2, re::MeshNameMap *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*((_QWORD *)a1 + 1) != a5)
  {
    re::BlendShapeWeightsMapping::rebuildMappingData<re::MeshAsset>(a1, a2, a3, a4, a6);
    *((_QWORD *)a1 + 1) = a5;
  }
  return re::BlendShapeWeightsMapping::updateBlendFactors(a1, a6);
}

uint64_t re::BlendShapeWeightsMapping::rebuildMappingData<re::MeshAsset>(re::BlendShapeWeightsMapping *this, _QWORD *a2, re::MeshNameMap *a3, uint64_t a4, uint64_t a5)
{
  if (!*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = -1;
  }
  re::BlendShapeWeightsMapping::clear(this);
  re::BlendShapeWeightsDefinitionAsset::constructBlendShapeWeights((uint64_t)a2, *(_QWORD *)this, a5);
  return re::BlendShapeWeightsMapping::buildMappingData<re::MeshAsset>(this, a2, a3, a4);
}

_QWORD *re::BlendShapeWeightsMapping::updateBlendFactors(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;

  v2 = result[6];
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = result[3];
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 32);
    while (v5 != v4)
    {
      v8 = result[4];
      v9 = *(unsigned int *)(v8 + v3);
      if ((_DWORD)v9 == -1)
      {
        v12 = 0;
      }
      else
      {
        if (v6 <= v9)
          goto LABEL_12;
        v10 = *(unsigned int *)(v8 + v3 + 4);
        v11 = v7 + 32 * v9;
        if (*(_QWORD *)(v11 + 8) <= v10)
          goto LABEL_13;
        v12 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + 4 * v10);
      }
      *(_DWORD *)(result[7] + 4 * v4++) = v12;
      v3 += 8;
      if (v2 == v4)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::BlendShapeWeightsMapping::clear(re::BlendShapeWeightsMapping *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  *((_QWORD *)this + 1) = -1;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (*((_QWORD *)this + 3))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 4));
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    *((_QWORD *)this + 2) = 0;
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if (*((_QWORD *)this + 6))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
    }
    *((_QWORD *)this + 5) = 0;
  }
  result = *((_QWORD *)this + 8);
  if (result)
  {
    if (*((_QWORD *)this + 9))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *((_QWORD *)this + 10));
      *((_QWORD *)this + 9) = 0;
      *((_QWORD *)this + 10) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  return result;
}

uint64_t re::BlendShapeWeightsMapping::blendWeightValues(re::BlendShapeWeightsMapping *this, const re::MeshNameMap *a2, unsigned int a3, int a4)
{
  uint64_t v7;

  if (*((_DWORD *)a2 + 54) <= a3)
    return 0;
  v7 = re::MeshNameMap::meshPartStartIndexForInstance(a2, a3) + a4;
  if (v7 >= re::MeshNameMap::meshPartStartIndexForInstance(a2, a3 + 1))
    return 0;
  if (*((_QWORD *)this + 9) <= (unint64_t)v7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 10) + 16 * v7);
}

uint64_t re::BlendShapeWeightsMapping::buildMappingData<re::MeshAsset>(_anonymous_namespace_ *a1, _QWORD *a2, re::MeshNameMap *a3, uint64_t a4)
{
  unint64_t v4;
  size_t v5;
  NSObject *v6;
  uint64_t *v8;
  uint64_t v9;
  _anonymous_namespace_ *started;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  re::MeshNameMap *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  const DeformationModelData *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  re::BlendShapeModelUtil *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  uint32_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  size_t v68;
  const char *v69;
  uint64_t v70;
  int v71;
  re::MeshNameMap *v72;
  int v73;
  uint64_t v74;
  const DeformationModelData *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t result;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  re::MeshNameMap *v100;
  re::BlendShapeModelUtil *v101;
  uint64_t v102;
  re::MeshNameMap *v103;
  uint64_t v104;
  uint64_t v105;
  re::MeshNameMap *v106;
  uint64_t v107;
  uint64_t v108;
  re::MeshNameMap *v109[6];
  uint64_t v110;
  re::MeshNameMap **v111;
  _BYTE v112[12];
  __int16 v113;
  int v114;
  __int16 v115;
  unint64_t v116;
  __int16 v117;
  const DeformationModelData *v118;
  unsigned __int128 buf;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;

  v8 = (uint64_t *)a1;
  v124 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a4 + 336);
  if (v9)
    LODWORD(v9) = *(_DWORD *)(*(_QWORD *)(a4 + 344) + 4 * v9 - 4);
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v89 = *(_DWORD *)(a4 + 216);
  if (v89)
  {
    v11 = 0;
    do
    {
      v12 = re::MeshNameMap::modelIndex((re::MeshNameMap *)a4, v11);
      v13 = re::MeshAssetBaseInfo::meshModel<re::MeshAsset>(a3, v12);
      started = (_anonymous_namespace_ *)re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)a4, v11);
      v14 = *(_QWORD *)(v13 + 96);
      if (v14)
        v15 = *(_QWORD *)(v14 + 40);
      else
        v15 = 0;
      v16 = *(_QWORD *)(v13 + 56);
      if (v15 == v16 && v16 != 0)
      {
        v18 = 0;
        v19 = v106;
        v20 = v107 + 4 * started;
        do
        {
          if (v14)
          {
            if (*(_QWORD *)(v14 + 40) > v18)
            {
              v21 = *(_DWORD *)(*(_QWORD *)(v14 + 48) + 4 * v18);
              if (v21 != -1)
              {
                v22 = started + v18;
                if ((unint64_t)v19 <= v22)
                {
LABEL_120:
                  *(_QWORD *)v112 = 0;
                  v122 = 0u;
                  v123 = 0u;
                  v120 = 0u;
                  v121 = 0u;
                  buf = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v109[0]) = 136315906;
                  *(re::MeshNameMap **)((char *)v109 + 4) = (re::MeshNameMap *)"operator[]";
                  WORD2(v109[1]) = 1024;
                  *(_DWORD *)((char *)&v109[1] + 6) = 468;
                  WORD1(v109[2]) = 2048;
                  *(re::MeshNameMap **)((char *)&v109[2] + 4) = (re::MeshNameMap *)v22;
                  WORD2(v109[3]) = 2048;
                  *(re::MeshNameMap **)((char *)&v109[3] + 6) = v19;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_121:
                  *(_QWORD *)v112 = 0;
                  v122 = 0u;
                  v123 = 0u;
                  v120 = 0u;
                  v121 = 0u;
                  buf = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v109[0]) = 136315906;
                  *(re::MeshNameMap **)((char *)v109 + 4) = (re::MeshNameMap *)"operator[]";
                  WORD2(v109[1]) = 1024;
                  *(_DWORD *)((char *)&v109[1] + 6) = 468;
                  WORD1(v109[2]) = 2048;
                  *(re::MeshNameMap **)((char *)&v109[2] + 4) = (re::MeshNameMap *)v4;
                  WORD2(v109[3]) = 2048;
                  *(re::MeshNameMap **)((char *)&v109[3] + 6) = v19;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_122:
                  *(_QWORD *)v112 = 0;
                  v122 = 0u;
                  v123 = 0u;
                  v120 = 0u;
                  v121 = 0u;
                  buf = 0u;
                  v75 = (const DeformationModelData *)MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v109[0]) = 136315906;
                  *(re::MeshNameMap **)((char *)v109 + 4) = (re::MeshNameMap *)"operator[]";
                  WORD2(v109[1]) = 1024;
                  *(_DWORD *)((char *)&v109[1] + 6) = 468;
                  WORD1(v109[2]) = 2048;
                  *(re::MeshNameMap **)((char *)&v109[2] + 4) = (re::MeshNameMap *)v4;
                  WORD2(v109[3]) = 2048;
                  *(re::MeshNameMap **)((char *)&v109[3] + 6) = v19;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_123:
                  v108 = 0;
                  v122 = 0u;
                  v123 = 0u;
                  v120 = 0u;
                  v121 = 0u;
                  buf = 0u;
                  v83 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v112 = 136315906;
                  *(_QWORD *)&v112[4] = "operator[]";
                  v113 = 1024;
                  v114 = 797;
                  v115 = 2048;
                  v116 = (unint64_t)v6;
                  v117 = 2048;
                  v118 = v75;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_124:
                  v108 = 0;
                  v122 = 0u;
                  v123 = 0u;
                  v120 = 0u;
                  v121 = 0u;
                  buf = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v112 = 136315906;
                  *(_QWORD *)&v112[4] = "slice";
                  v113 = 1024;
                  v114 = 502;
                  v115 = 2048;
                  v116 = v5;
                  v117 = 2048;
                  v118 = (const DeformationModelData *)v83;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_125:
                  re::internal::assertLog((re::internal *)7, v61, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::slice(size_t,size_t). index, %zu, count = %zu, array size = %zu", "!overflow", "slice", 508, v5, v84, v82);
                  _os_crash();
                  __break(1u);
LABEL_126:
                  re::internal::assertLog((re::internal *)7, v61, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 512, v5, v84, v82);
                  _os_crash();
                  __break(1u);
LABEL_127:
                  v108 = 0;
                  v122 = 0u;
                  v123 = 0u;
                  v120 = 0u;
                  v121 = 0u;
                  buf = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v112 = 136315906;
                  *(_QWORD *)&v112[4] = "operator[]";
                  v113 = 1024;
                  v114 = 468;
                  v115 = 2048;
                  v116 = v4;
                  v117 = 2048;
                  v118 = (const DeformationModelData *)v83;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_128;
                }
                *(_DWORD *)(v20 + 4 * v18) = v21;
              }
            }
          }
          ++v18;
        }
        while (v15 != v18);
      }
      v11 = (v11 + 1);
    }
    while ((_DWORD)v11 != v89);
  }
  v23 = *(_QWORD *)(a4 + 336);
  if (v23)
    LODWORD(v23) = *(_DWORD *)(*(_QWORD *)(a4 + 344) + 4 * v23 - 4);
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v25 = a2[7];
  v100 = (re::MeshNameMap *)a4;
  v97 = v8;
  v11 = 0;
  if (!v25)
  {
    v45 = *v8;
    v8[2] = *v8;
    v8[3] = 0;
    goto LABEL_65;
  }
  v26 = a2[9];
  v27 = v26 + 48 * v25;
  do
  {
    v28 = *(_DWORD *)(v26 + 40);
    v29 = *(_DWORD *)(v26 + 44);
    if (v28 <= v29)
      v30 = v29;
    else
      v30 = v28;
    if (a2[2] <= v30)
    {
      v6 = *re::assetsLogObjects((re *)v24);
      v24 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)v24)
        goto LABEL_54;
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v30;
      v41 = v6;
      v42 = "Blend factor asset has an invalid blend factor values index: %u.";
      v43 = 8;
      goto LABEL_57;
    }
    re::MeshNameMap::meshInstancePartsForIdentifier(a4, (unsigned __int8 *)v26, &buf);
    v109[0] = a3;
    v109[1] = (re::MeshNameMap *)a4;
    v109[2] = (re::MeshNameMap *)buf;
    v110 = v121;
    v111 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v109[3], (uint64_t)&buf + 8);
    if (*((_QWORD *)&v121 + 1))
    {
      (***((void (****)(_QWORD))&v121 + 1))(*((_QWORD *)&v121 + 1));
      if (*((unsigned __int128 **)&v121 + 1) != (unsigned __int128 *)((char *)&buf + 8))
        (*(void (**)(_QWORD))(*(_QWORD *)v121 + 40))(v121);
    }
    v5 = (size_t)v109[2];
    if (v109[2])
    {
      v31 = 0;
      v4 = 0;
      while (1)
      {
        *(_QWORD *)&buf = v31;
        v32 = (*((uint64_t (**)(re::MeshNameMap **, unsigned __int128 *))*v111 + 2))(v111, &buf);
        *(_QWORD *)&buf = v31;
        v6 = (*((uint64_t (**)(re::MeshNameMap **, unsigned __int128 *))*v111 + 2))(v111, &buf);
        v22 = re::MeshNameMap::meshPartStartIndexForInstance(v100, v32) + WORD2(v6);
        v33 = (const DeformationModelData *)v106;
        if ((unint64_t)v106 <= v22)
          goto LABEL_117;
        if (*(_DWORD *)(v107 + 4 * v22) != -1)
        {
          v4 = (unint64_t)v103;
          if ((unint64_t)v103 <= v22)
            goto LABEL_118;
          if (*(_DWORD *)(v104 + 4 * v22) == -1)
          {
            *(_QWORD *)&buf = v31;
            v34 = (*((uint64_t (**)(re::MeshNameMap **, unsigned __int128 *))*v111 + 2))(v111, &buf);
            v35 = re::MeshNameMap::modelIndex(v109[1], v34);
            v36 = re::MeshAssetBaseInfo::meshModel<re::MeshAsset>(a3, v35);
            v39 = *(_QWORD *)(v36 + 96);
            v37 = (re::BlendShapeModelUtil *)(v36 + 96);
            v38 = v39;
            if (v39 && *(_QWORD *)(v38 + 40) > (unint64_t)WORD2(v6))
              v40 = *(unsigned int *)(*(_QWORD *)(v38 + 48) + 4 * WORD2(v6));
            else
              v40 = 0xFFFFFFFFLL;
            v11 += (re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v37, (const DeformationModelData *)v40) + 3) & 0xFFFFFFFFFFFFFFFCLL;
            v4 = (unint64_t)v103;
          }
          if (v4 <= v22)
          {
LABEL_119:
            v108 = 0;
            v19 = (re::MeshNameMap *)v112;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v112 = 136315906;
            *(_QWORD *)&v112[4] = "operator[]";
            v113 = 1024;
            v114 = 468;
            v115 = 2048;
            v116 = v22;
            v117 = 2048;
            v118 = (const DeformationModelData *)v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_120;
          }
          *(_DWORD *)(v104 + 4 * v22) = v30;
          v4 = 1;
        }
        if (v5 == ++v31)
          goto LABEL_49;
      }
    }
    LOBYTE(v4) = 0;
LABEL_49:
    v24 = (uint64_t)v111;
    if (v111)
    {
      v24 = (*(uint64_t (**)(re::MeshNameMap **))*v111)(v111);
      if (v111 != &v109[3])
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 40))(v110);
    }
    a4 = (uint64_t)v100;
    if ((v4 & 1) == 0)
    {
      v6 = *re::assetsLogObjects((re *)v24);
      v24 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v24)
      {
        v44 = *(_QWORD *)(v26 + 16);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v44;
        v41 = v6;
        v42 = "Blend factor for mesh %s was not applied.";
        v43 = 12;
LABEL_57:
        _os_log_error_impl(&dword_224FE9000, v41, OS_LOG_TYPE_ERROR, v42, (uint8_t *)&buf, v43);
      }
    }
LABEL_54:
    v26 += 48;
  }
  while (v26 != v27);
  v8 = v97;
  v45 = *v97;
  v97[2] = *v97;
  v97[3] = v11;
  if (!v11)
    goto LABEL_65;
  if (v11 >> 61)
  {
LABEL_128:
    re::internal::assertLog((re::internal *)6, v45, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v11);
    _os_crash();
    __break(1u);
LABEL_129:
    re::internal::assertLog((re::internal *)4, v47, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  v5 = 8 * v11;
  v46 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v45 + 32))(v45, 8 * v11, 4);
  v97[4] = (uint64_t)v46;
  if (!v46)
    goto LABEL_129;
  v48 = v46;
  if (v11 != 1)
  {
    v5 -= 8;
    memset(v46, 255, v5);
    v48 = (_QWORD *)((char *)v48 + v5);
  }
  *v48 = -1;
  v45 = *v97;
LABEL_65:
  re::FixedArray<int>::init<>(v8 + 5, v45, v11);
  v51 = *v8;
  v50 = v8 + 8;
  v49 = v51;
  v52 = *(_QWORD *)(a4 + 336);
  if (v52)
    v53 = *(unsigned int *)(*(_QWORD *)(a4 + 344) + 4 * v52 - 4);
  else
    v53 = 0;
  re::FixedArray<re::Slice<unsigned int>>::init<>(v50, v49, v53);
  if (v89)
  {
    v54 = 0;
    v55 = 0;
    while (1)
    {
      v56 = re::MeshNameMap::modelIndex(v100, v54);
      v57 = re::MeshAssetBaseInfo::meshModel<re::MeshAsset>(a3, v56);
      v88 = v54;
      v58 = re::MeshNameMap::meshPartStartIndexForInstance(v100, v54);
      v91 = *(_QWORD *)(v57 + 56);
      if (v91)
        break;
LABEL_107:
      v54 = v88 + 1;
      if (v88 + 1 == v89)
        goto LABEL_108;
    }
    v59 = 0;
    v90 = v58;
    v101 = (re::BlendShapeModelUtil *)(v57 + 96);
    while (2)
    {
      v4 = v59 + v90;
      v19 = v103;
      if ((unint64_t)v103 <= v59 + v90)
        goto LABEL_121;
      if (*(_DWORD *)(v104 + 4 * v4) != -1)
      {
        v19 = v106;
        if ((unint64_t)v106 <= v4)
          goto LABEL_122;
        v96 = *(unsigned int *)(v104 + 4 * v4);
        v93 = v59;
        v94 = v59 + v90;
        v95 = v55;
        v33 = (const DeformationModelData *)*(unsigned int *)(v107 + 4 * v4);
        v60 = re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v101, v33);
        memset(v109, 0, 36);
        *(re::MeshNameMap **)((char *)&v109[4] + 4) = (re::MeshNameMap *)0x7FFFFFFF;
        v98 = v60;
        if ((_DWORD)v60)
        {
          v62 = 0;
          v63 = v60;
          do
          {
            re::BlendShapeModelUtil::blendShapeTargetName(v101, v33, v62, (re::StringID *)&buf);
            v11 = buf;
            v64 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * ((v11 >> 31) ^ (v11 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                         * ((v11 >> 31) ^ (v11 >> 1))) >> 27));
            v65 = v64 ^ (v64 >> 31);
            if (v109[0])
            {
              v4 = v65 % LODWORD(v109[3]);
              v66 = *((unsigned int *)v109[1] + v4);
              if ((_DWORD)v66 != 0x7FFFFFFF)
              {
                v5 = (size_t)v109[2];
                v67 = (char *)*((_QWORD *)&buf + 1);
                do
                {
                  v68 = v5 + 32 * v66;
                  if ((*(_QWORD *)(v68 + 8) ^ v11) <= 1)
                  {
                    v69 = *(const char **)(v68 + 16);
                    if (v69 == v67 || !strcmp(v69, v67))
                      goto LABEL_92;
                  }
                  v66 = *(_DWORD *)(v5 + 32 * v66) & 0x7FFFFFFF;
                }
                while (v66 != 0x7FFFFFFF);
              }
            }
            else
            {
              v4 = 0;
            }
            v70 = HIDWORD(v109[4]);
            if (HIDWORD(v109[4]) == 0x7FFFFFFF)
            {
              v70 = LODWORD(v109[4]);
              v71 = (int)v109[4];
              if (LODWORD(v109[4]) == LODWORD(v109[3]))
              {
                re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity((uint64_t)v109, 2 * HIDWORD(v109[3]));
                v71 = (int)v109[4];
                v4 = v65 % LODWORD(v109[3]);
              }
              LODWORD(v109[4]) = v71 + 1;
              v72 = v109[2];
              v73 = *((_DWORD *)v109[2] + 8 * v70);
            }
            else
            {
              v72 = v109[2];
              v73 = *((_DWORD *)v109[2] + 8 * HIDWORD(v109[4]));
              HIDWORD(v109[4]) = v73 & 0x7FFFFFFF;
            }
            v74 = 32 * v70;
            *(_DWORD *)((char *)v72 + v74) = v73 | 0x80000000;
            *(_DWORD *)((char *)v109[2] + v74) = *((_DWORD *)v109[2] + 8 * v70) & 0x80000000 | *((_DWORD *)v109[1] + v4);
            re::StringID::StringID((re::MeshNameMap *)((char *)v109[2] + 32 * v70 + 8), (const StringID *)&buf);
            *((_QWORD *)v109[2] + 4 * v70 + 3) = v62;
            *((_DWORD *)v109[1] + v4) = v70;
            ++HIDWORD(v109[3]);
            ++LODWORD(v109[5]);
LABEL_92:
            re::StringID::destroyString((re::StringID *)&buf);
            ++v62;
          }
          while (v62 != v63);
        }
        v75 = (const DeformationModelData *)a2[2];
        v6 = v96;
        if ((unint64_t)v75 <= v96)
          goto LABEL_123;
        v76 = a2[4];
        v77 = v76 + 24 * v96;
        v78 = *(_DWORD *)(v77 + 8);
        v22 = v77 + 8;
        v4 = v78;
        v5 = v95;
        if (v78)
        {
          v79 = 0;
          v80 = (_QWORD *)(v76 + 24 * v96 + 16);
          while (1)
          {
            v11 = *(_QWORD *)v22;
            if (*(_QWORD *)v22 <= v79)
              break;
            v81 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v109, (_QWORD *)(*v80 + 16 * v79));
            if (v81)
            {
              v11 = *v81 + v95;
              v33 = (const DeformationModelData *)v97[3];
              if ((unint64_t)v33 <= v11)
                goto LABEL_116;
              *(_QWORD *)(v97[4] + 8 * v11) = v96 | (v79 << 32);
            }
            if (++v79 == v4)
              goto LABEL_101;
          }
          v108 = 0;
          v22 = (unint64_t)v112;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v112 = 136315906;
          *(_QWORD *)&v112[4] = "operator[]";
          v113 = 1024;
          v114 = 476;
          v115 = 2048;
          v116 = v79;
          v117 = 2048;
          v118 = (const DeformationModelData *)v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_116:
          v108 = 0;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v112 = 136315906;
          *(_QWORD *)&v112[4] = "operator[]";
          v113 = 1024;
          v114 = 468;
          v115 = 2048;
          v116 = v11;
          v117 = 2048;
          v118 = v33;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_117:
          v108 = 0;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v112 = 136315906;
          *(_QWORD *)&v112[4] = "operator[]";
          v113 = 1024;
          v114 = 468;
          v115 = 2048;
          v116 = v22;
          v117 = 2048;
          v118 = v33;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_118:
          v108 = 0;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v112 = 136315906;
          *(_QWORD *)&v112[4] = "operator[]";
          v113 = 1024;
          v114 = 468;
          v115 = 2048;
          v116 = v22;
          v117 = 2048;
          v118 = (const DeformationModelData *)v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_119;
        }
LABEL_101:
        v82 = v97[6];
        v83 = v82 + 1;
        if (v82 + 1 <= v95)
          goto LABEL_124;
        v84 = (v98 + 3) & 0x1FFFFFFFCLL;
        v85 = v95 + v84;
        if (__CFADD__(v95, v84))
          goto LABEL_125;
        if (v85 > v82)
          goto LABEL_126;
        v83 = v97[9];
        v4 = v94;
        if (v83 <= v94)
          goto LABEL_127;
        v86 = (_QWORD *)(v97[10] + 16 * v94);
        *v86 = v97[7] + 4 * v95;
        v86[1] = v84;
        re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v109);
        v55 = v85;
        v59 = v93;
      }
      if (++v59 == v91)
        goto LABEL_107;
      continue;
    }
  }
LABEL_108:
  if (v102 && v103)
    (*(void (**)(void))(*(_QWORD *)v102 + 40))();
  result = v105;
  if (v105)
  {
    if (v106)
      return (*(uint64_t (**)(void))(*(_QWORD *)v105 + 40))();
  }
  return result;
}

uint64_t *re::SkeletonAsset::assetType(re::SkeletonAsset *this)
{
  unsigned __int8 v1;

  {
    re::SkeletonAsset::assetType(void)::type = (uint64_t)"Skeleton";
    qword_255827848 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::SkeletonAsset::assetType(void)::type);
  }
  return &re::SkeletonAsset::assetType(void)::type;
}

uint64_t re::SkeletonAsset::SkeletonAsset(uint64_t a1, const StringID *a2)
{
  re::StringID *v4;

  v4 = re::StringID::StringID((re::StringID *)a1, a2);
  re::FixedArray<re::StringID>::FixedArray((unint64_t *)v4 + 2, (uint64_t)&a2[1]);
  re::FixedArray<unsigned int>::FixedArray((uint64_t *)(a1 + 40), (uint64_t)&a2[2].var1);
  re::FixedArray<re::GenericSRT<float>>::FixedArray((_QWORD *)(a1 + 64), (uint64_t)&a2[4]);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = &str_110;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

double re::SkeletonAsset::SkeletonAsset(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v2 = *a2;
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)a1 = *a2 & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  *(_QWORD *)(a1 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v3;
  a2[2] = 0;
  a2[3] = 0;
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2[4];
  a2[4] = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v5;
  a2[5] = 0;
  a2[6] = 0;
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = a2[7];
  a2[7] = v6;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v7 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v7;
  a2[8] = 0;
  a2[9] = 0;
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2[10];
  a2[10] = v8;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = &str_110;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return result;
}

__guard re::SkeletonAssetLoader::introspectionType(re::SkeletonAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::SkeletonAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"SkeletonAsset", (uint64_t (*)(re::internal *))re::allocInfo_SkeletonAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletonAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkeletonAsset>, 0);
    }
  }
  return v2[41];
}

uint64_t re::SkeletonAssetLoader::allocateSampleAsset(re::SkeletonAssetLoader *this)
{
  uint64_t v1;
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  re::StringID *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  StringID v10;
  __int128 v11;
  re::StringID *v12[2];
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v10.var0 = 0;
  v10.var1 = (char *)&str_110;
  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  re::StringID::destroyString((re::StringID *)&v10);
  v1 = re::internal::compileTimeHornerHash<15ul>(0, 0, 14);
  *(_QWORD *)&v10.var0 = 2 * v1;
  v10.var1 = "SampleSkeleton";
  if (!*((_QWORD *)&v11 + 1))
  {
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 468;
    v21 = 2048;
    v22 = 0;
    v23 = 2048;
    v24 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  v4 = v12[0];
  re::StringID::destroyString(v12[0]);
  v5 = re::internal::compileTimeHornerHash<12ul>(0, 0, 11);
  *(_QWORD *)v4 = 2 * v5;
  *((_QWORD *)v4 + 1) = "SampleJoint";
  if (!(_QWORD)v13)
  {
LABEL_14:
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 468;
    v21 = 2048;
    v22 = 0;
    v23 = 2048;
    v24 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 468;
    v21 = 2048;
    v22 = 0;
    v23 = 2048;
    v24 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  **((_DWORD **)&v13 + 1) = -1;
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_15;
  v6 = v15;
  v15[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  v7 = re::globalAllocators((re *)v5);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 248, 8);
  re::SkeletonAsset::SkeletonAsset(v8, &v10);
  if ((_QWORD)v14)
  {
    if (*((_QWORD *)&v14 + 1))
    {
      (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      *((_QWORD *)&v14 + 1) = 0;
      v15 = 0;
    }
    *(_QWORD *)&v14 = 0;
  }
  if (v12[1])
  {
    if ((_QWORD)v13)
    {
      (*(void (**)(void))(*(_QWORD *)v12[1] + 40))();
      v13 = 0uLL;
    }
    v12[1] = 0;
  }
  re::FixedArray<re::StringID>::deinit(&v11);
  re::StringID::destroyString((re::StringID *)&v10);
  return v8;
}

BOOL re::SkeletonAssetLoader::createRuntimeData(re *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re *v7;
  int v8;
  NSObject *v9;
  _BYTE *v11;
  _BYTE v12[24];
  uint64_t v13;
  char v14;
  _BYTE v15[23];
  _QWORD v16[2];
  uint64_t v17[2];
  __int128 buf;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = re::globalAllocators(a1)[2];
  if (a2[13])
    re::Skeleton::deinit((re::Skeleton *)(a2 + 11));
  v4 = a2[3];
  *(_QWORD *)&buf = a2[4];
  *((_QWORD *)&buf + 1) = v4;
  v5 = a2[6];
  v17[0] = a2[7];
  v17[1] = v5;
  v6 = a2[9];
  v16[0] = a2[10];
  v16[1] = v6;
  re::Skeleton::init(a2 + 11, v3, a2, &buf, v17, (unint64_t)v16, (uint64_t)v12);
  v8 = v12[0];
  if (!v12[0])
  {
    v9 = *re::assetTypesLogObjects(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v14 & 1) != 0)
        v11 = *(_BYTE **)&v15[7];
      else
        v11 = v15;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v11;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Invalid skeleton data: %s", (uint8_t *)&buf, 0xCu);
    }
    if (!v12[0] && v13 && (v14 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v13 + 40))();
  }
  return v8 != 0;
}

uint64_t *re::SkeletonAssetLoader::unloadAsset(re::SkeletonAssetLoader *this, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = re::globalAllocators(this);
  if (a2)
  {
    v4 = result[2];
    re::Skeleton::~Skeleton((re::Skeleton *)(a2 + 11));
    v5 = a2[8];
    if (v5)
    {
      if (a2[9])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, a2[10]);
        a2[9] = 0;
        a2[10] = 0;
      }
      a2[8] = 0;
    }
    v6 = a2[5];
    if (v6)
    {
      if (a2[6])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, a2[7]);
        a2[6] = 0;
        a2[7] = 0;
      }
      a2[5] = 0;
    }
    re::FixedArray<re::StringID>::deinit(a2 + 2);
    re::StringID::destroyString((re::StringID *)a2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
  }
  return result;
}

BOOL re::SkeletonAssetLoader::isSupportedSourceExtension(re::SkeletonAssetLoader *this, const char *__s1)
{
  return strcmp(__s1, "reskel") == 0;
}

double re::internal::defaultConstruct<re::SkeletonAssetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_QWORD *)(a3 + 80) = 0;
  return result;
}

void re::internal::defaultDestruct<re::SkeletonAssetData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = a3[8];
  if (v4)
  {
    v5 = a3 + 9;
    if (a3[9])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[10]);
      *v5 = 0;
      a3[10] = 0;
    }
    a3[8] = 0;
  }
  v6 = a3[5];
  if (v6)
  {
    if (a3[6])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, a3[7]);
      a3[6] = 0;
      a3[7] = 0;
    }
    a3[5] = 0;
  }
  re::FixedArray<re::StringID>::deinit(a3 + 2);
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::SkeletonAssetData>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_110;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletonAssetData>(re::StringID *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a1 + 8);
  if (v2)
  {
    if (*((_QWORD *)a1 + 9))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)a1 + 10));
      *((_QWORD *)a1 + 9) = 0;
      *((_QWORD *)a1 + 10) = 0;
    }
    *((_QWORD *)a1 + 8) = 0;
  }
  v3 = *((_QWORD *)a1 + 5);
  if (v3)
  {
    if (*((_QWORD *)a1 + 6))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)a1 + 7));
      *((_QWORD *)a1 + 6) = 0;
      *((_QWORD *)a1 + 7) = 0;
    }
    *((_QWORD *)a1 + 5) = 0;
  }
  re::FixedArray<re::StringID>::deinit((_QWORD *)a1 + 2);
  re::StringID::destroyString(a1);
}

uint64_t *re::allocInfo_SkeletonAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254103148);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103148))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541031E8, 0);
    *(uint64_t *)((char *)&qword_2541031F8 + 6) = 0;
    qword_2541031F8 = 0;
    qword_254103208 = 0;
    qword_254103210 = 0xFFFFFFFFLL;
    qword_2541031E8 = (uint64_t)&off_24ED7DAA8;
    qword_254103218 = (uint64_t)"SkeletonAsset";
    dword_254103220 = 0;
    xmmword_254103228 = 0u;
    unk_254103238 = 0u;
    xmmword_254103248 = 0u;
    qword_254103258 = 0;
    __cxa_guard_release(&qword_254103148);
  }
  return &qword_2541031E8;
}

void re::initInfo_SkeletonAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  const re::IntrospectionBase *v9;
  unsigned __int8 v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  *(_QWORD *)&v31 = 0x646333CF3298B506;
  *((_QWORD *)&v31 + 1) = "SkeletonAsset";
  re::StringID::destroyString((re::StringID *)&v31);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_254103140);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103140);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = (uint64_t *)qword_254103130;
      if (!qword_254103130)
      {
        v8 = atomic_load((unsigned __int8 *)&_MergedGlobals_99);
        if ((v8 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_99))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103170, 0);
          *(uint64_t *)((char *)&qword_254103180 + 6) = 0;
          qword_254103180 = 0;
          qword_254103190 = 0;
          qword_254103198 = 0xFFFFFFFFLL;
          qword_254103170 = (uint64_t)&off_24ED7DAA8;
          qword_2541031A0 = (uint64_t)"SkeletonAssetData";
          dword_2541031A8 = 0;
          xmmword_2541031B0 = 0u;
          *(_OWORD *)&qword_2541031C0 = 0u;
          xmmword_2541031D0 = 0u;
          qword_2541031E0 = 0;
          __cxa_guard_release(&_MergedGlobals_99);
        }
        qword_254103130 = (uint64_t)&qword_254103170;
        *(_QWORD *)&v30 = 0x54F97D4E1DCB899ALL;
        *((_QWORD *)&v30 + 1) = "SkeletonAssetData";
        re::StringID::destroyString((re::StringID *)&v30);
        *(_OWORD *)&qword_254103190 = v31;
        v10 = atomic_load((unsigned __int8 *)&qword_254103128);
        if ((v10 & 1) == 0)
        {
          v12 = (re *)__cxa_guard_acquire(&qword_254103128);
          if ((_DWORD)v12)
          {
            v13 = re::introspectionAllocator(v12);
            v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
            v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
            *(_DWORD *)v16 = 1;
            *(_QWORD *)(v16 + 8) = "name";
            *(_QWORD *)(v16 + 16) = v15;
            *(_QWORD *)(v16 + 24) = 0;
            *(_QWORD *)(v16 + 32) = 1;
            *(_DWORD *)(v16 + 40) = 0;
            *(_QWORD *)(v16 + 48) = 0;
            *(_QWORD *)(v16 + 56) = 0;
            *(_DWORD *)(v16 + 64) = 0;
            qword_254103150 = v16;
            v17 = re::introspectionAllocator((re *)v16);
            v19 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, v18);
            v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
            *(_DWORD *)v20 = 1;
            *(_QWORD *)(v20 + 8) = "jointNames";
            *(_QWORD *)(v20 + 16) = v19;
            *(_QWORD *)(v20 + 24) = 0;
            *(_QWORD *)(v20 + 32) = 0x1000000002;
            *(_DWORD *)(v20 + 40) = 0;
            *(_QWORD *)(v20 + 48) = 0;
            *(_QWORD *)(v20 + 56) = 0;
            *(_DWORD *)(v20 + 64) = 0;
            qword_254103158 = v20;
            v21 = re::introspectionAllocator((re *)v20);
            v23 = re::IntrospectionInfo<re::FixedArray<unsigned int>>::get(1, v22);
            v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
            *(_DWORD *)v24 = 1;
            *(_QWORD *)(v24 + 8) = "parentIndices";
            *(_QWORD *)(v24 + 16) = v23;
            *(_QWORD *)(v24 + 24) = 0;
            *(_QWORD *)(v24 + 32) = 0x2800000003;
            *(_DWORD *)(v24 + 40) = 0;
            *(_QWORD *)(v24 + 48) = 0;
            *(_QWORD *)(v24 + 56) = 0;
            *(_DWORD *)(v24 + 64) = 0;
            qword_254103160 = v24;
            v25 = re::introspectionAllocator((re *)v24);
            v26 = re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(1);
            v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
            *(_DWORD *)v27 = 1;
            *(_QWORD *)(v27 + 8) = "localRestPose";
            *(_QWORD *)(v27 + 16) = v26;
            *(_QWORD *)(v27 + 24) = 0;
            *(_QWORD *)(v27 + 32) = 0x4000000004;
            *(_DWORD *)(v27 + 40) = 0;
            *(_QWORD *)(v27 + 48) = 0;
            *(_QWORD *)(v27 + 56) = 0;
            *(_DWORD *)(v27 + 64) = 0;
            qword_254103168 = v27;
            __cxa_guard_release(&qword_254103128);
          }
        }
        qword_254103180 = 0x5800000008;
        v7 = &qword_254103170;
        dword_254103188 = 8;
        word_25410318C = 0;
        dword_2541031A8 = 4;
        *(_QWORD *)&xmmword_2541031B0 = &qword_254103150;
        *((_QWORD *)&xmmword_2541031B0 + 1) = re::internal::defaultConstruct<re::SkeletonAssetData>;
        qword_2541031C0 = (uint64_t)re::internal::defaultDestruct<re::SkeletonAssetData>;
        unk_2541031C8 = 0;
        *(_QWORD *)&xmmword_2541031D0 = 0;
        *((_QWORD *)&xmmword_2541031D0 + 1) = re::internal::defaultConstructV2<re::SkeletonAssetData>;
        qword_2541031E0 = (uint64_t)re::internal::defaultDestructV2<re::SkeletonAssetData>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254103170, v9);
        v30 = v31;
      }
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_skeletonAssetData";
      *(_QWORD *)(v11 + 16) = v7;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 1;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254103138 = v11;
      __cxa_guard_release(&qword_254103140);
    }
  }
  *((_QWORD *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254103138;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SkeletonAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SkeletonAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SkeletonAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SkeletonAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v28 = v29;
}

double re::internal::defaultConstruct<re::SkeletonAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)(a3 + 96) = &str_110;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 236) = 0x7FFFFFFFLL;
  return result;
}

void re::internal::defaultDestruct<re::SkeletonAsset>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  re::Skeleton::~Skeleton((re::Skeleton *)(a3 + 11));
  v4 = a3[8];
  if (v4)
  {
    if (a3[9])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[10]);
      a3[9] = 0;
      a3[10] = 0;
    }
    a3[8] = 0;
  }
  v5 = a3[5];
  if (v5)
  {
    if (a3[6])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, a3[7]);
      a3[6] = 0;
      a3[7] = 0;
    }
    a3[5] = 0;
  }
  re::FixedArray<re::StringID>::deinit(a3 + 2);
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::SkeletonAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_110;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = &str_110;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletonAsset>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  re::Skeleton::~Skeleton((re::Skeleton *)(a1 + 11));
  v2 = a1[8];
  if (v2)
  {
    if (a1[9])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[10]);
      a1[9] = 0;
      a1[10] = 0;
    }
    a1[8] = 0;
  }
  v3 = a1[5];
  if (v3)
  {
    if (a1[6])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, a1[7]);
      a1[6] = 0;
      a1[7] = 0;
    }
    a1[5] = 0;
  }
  re::FixedArray<re::StringID>::deinit(a1 + 2);
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t re::introspect_SkeletonAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletonAsset", (uint64_t (*)(re::internal *))re::allocInfo_SkeletonAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletonAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkeletonAsset>, this);
}

void re::SkeletonAssetLoader::~SkeletonAssetLoader(re::SkeletonAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::compileTimeHornerHash<15ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      v5 = 961 * a1 - aSampleskeleton[a2] + 32 * aSampleskeleton[a2];
      v3 = a2 + 1;
      return v5 + aSampleskeleton[v3];
    case 3:
      v5 = 29791 * a1 + 961 * aSampleskeleton[a2] - aSampleskeleton[a2 + 1] + 32 * aSampleskeleton[a2 + 1];
      v3 = a2 + 2;
      return v5 + aSampleskeleton[v3];
    case 4:
      v5 = 923521 * a1
         + 29791 * aSampleskeleton[a2]
         + 961 * aSampleskeleton[a2 + 1]
         - aSampleskeleton[a2 + 2]
         + 32 * aSampleskeleton[a2 + 2];
      v3 = a2 + 3;
      return v5 + aSampleskeleton[v3];
    case 5:
      v5 = 28629151 * a1
         + 923521 * aSampleskeleton[a2]
         + 29791 * aSampleskeleton[a2 + 1]
         + 961 * aSampleskeleton[a2 + 2]
         - aSampleskeleton[a2 + 3]
         + 32 * aSampleskeleton[a2 + 3];
      v3 = a2 + 4;
      return v5 + aSampleskeleton[v3];
    case 6:
      v5 = 887503681 * a1
         + 28629151 * aSampleskeleton[a2]
         + 923521 * aSampleskeleton[a2 + 1]
         + 29791 * aSampleskeleton[a2 + 2]
         + 961 * aSampleskeleton[a2 + 3]
         - aSampleskeleton[a2 + 4]
         + 32 * aSampleskeleton[a2 + 4];
      v3 = a2 + 5;
      return v5 + aSampleskeleton[v3];
    case 7:
      v5 = 0x667E12CDFLL * a1
         + 887503681 * aSampleskeleton[a2]
         + 28629151 * aSampleskeleton[a2 + 1]
         + 923521 * aSampleskeleton[a2 + 2]
         + 29791 * aSampleskeleton[a2 + 3]
         + 961 * aSampleskeleton[a2 + 4]
         - aSampleskeleton[a2 + 5]
         + 32 * aSampleskeleton[a2 + 5];
      v3 = a2 + 6;
      return v5 + aSampleskeleton[v3];
    case 8:
      v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aSampleskeleton[a2]
         + 887503681 * aSampleskeleton[a2 + 1]
         + 28629151 * aSampleskeleton[a2 + 2]
         + 923521 * aSampleskeleton[a2 + 3]
         + 29791 * aSampleskeleton[a2 + 4]
         + 961 * aSampleskeleton[a2 + 5]
         - aSampleskeleton[a2 + 6]
         + 32 * aSampleskeleton[a2 + 6];
      v3 = a2 + 7;
      return v5 + aSampleskeleton[v3];
    case 9:
      v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aSampleskeleton[a2]
         + 0x667E12CDFLL * aSampleskeleton[a2 + 1]
         + 887503681 * aSampleskeleton[a2 + 2]
         + 28629151 * aSampleskeleton[a2 + 3]
         + 923521 * aSampleskeleton[a2 + 4]
         + 29791 * aSampleskeleton[a2 + 5]
         + 961 * aSampleskeleton[a2 + 6]
         - aSampleskeleton[a2 + 7]
         + 32 * aSampleskeleton[a2 + 7];
      v3 = a2 + 8;
      return v5 + aSampleskeleton[v3];
    case 10:
      v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aSampleskeleton[a2]
         + 0xC694446F01 * aSampleskeleton[a2 + 1]
         + 0x667E12CDFLL * aSampleskeleton[a2 + 2]
         + 887503681 * aSampleskeleton[a2 + 3]
         + 28629151 * aSampleskeleton[a2 + 4]
         + 923521 * aSampleskeleton[a2 + 5]
         + 29791 * aSampleskeleton[a2 + 6]
         + 961 * aSampleskeleton[a2 + 7]
         - aSampleskeleton[a2 + 8]
         + 32 * aSampleskeleton[a2 + 8];
      v3 = a2 + 9;
      return v5 + aSampleskeleton[v3];
    default:
      v7 = a2 + (v4 >> 1);
      v8 = re::internal::compileTimeHornerHash<15ul>(a1, a2, v7 - 1);
      v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<15ul>(aSampleskeleton[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      v5 = 31 * a1;
      return v5 + aSampleskeleton[v3];
  }
}

uint64_t re::internal::compileTimeHornerHash<12ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = a3 - a2;
  switch(a3 - a2)
  {
    case 0:
      return v4;
    case 1:
      goto LABEL_4;
    case 2:
      v5 = 961 * a1 - aSamplejoint[a2] + 32 * aSamplejoint[a2];
      v3 = a2 + 1;
      return v5 + aSamplejoint[v3];
    case 3:
      v5 = 29791 * a1 + 961 * aSamplejoint[a2] - aSamplejoint[a2 + 1] + 32 * aSamplejoint[a2 + 1];
      v3 = a2 + 2;
      return v5 + aSamplejoint[v3];
    case 4:
      v5 = 923521 * a1
         + 29791 * aSamplejoint[a2]
         + 961 * aSamplejoint[a2 + 1]
         - aSamplejoint[a2 + 2]
         + 32 * aSamplejoint[a2 + 2];
      v3 = a2 + 3;
      return v5 + aSamplejoint[v3];
    case 5:
      v5 = 28629151 * a1
         + 923521 * aSamplejoint[a2]
         + 29791 * aSamplejoint[a2 + 1]
         + 961 * aSamplejoint[a2 + 2]
         - aSamplejoint[a2 + 3]
         + 32 * aSamplejoint[a2 + 3];
      v3 = a2 + 4;
      return v5 + aSamplejoint[v3];
    case 6:
      v5 = 887503681 * a1
         + 28629151 * aSamplejoint[a2]
         + 923521 * aSamplejoint[a2 + 1]
         + 29791 * aSamplejoint[a2 + 2]
         + 961 * aSamplejoint[a2 + 3]
         - aSamplejoint[a2 + 4]
         + 32 * aSamplejoint[a2 + 4];
      v3 = a2 + 5;
      return v5 + aSamplejoint[v3];
    case 7:
      v5 = 0x667E12CDFLL * a1
         + 887503681 * aSamplejoint[a2]
         + 28629151 * aSamplejoint[a2 + 1]
         + 923521 * aSamplejoint[a2 + 2]
         + 29791 * aSamplejoint[a2 + 3]
         + 961 * aSamplejoint[a2 + 4]
         - aSamplejoint[a2 + 5]
         + 32 * aSamplejoint[a2 + 5];
      v3 = a2 + 6;
      return v5 + aSamplejoint[v3];
    case 8:
      v5 = 0xC694446F01 * a1
         + 0x667E12CDFLL * aSamplejoint[a2]
         + 887503681 * aSamplejoint[a2 + 1]
         + 28629151 * aSamplejoint[a2 + 2]
         + 923521 * aSamplejoint[a2 + 3]
         + 29791 * aSamplejoint[a2 + 4]
         + 961 * aSamplejoint[a2 + 5]
         - aSamplejoint[a2 + 6]
         + 32 * aSamplejoint[a2 + 6];
      v3 = a2 + 7;
      return v5 + aSamplejoint[v3];
    case 9:
      v5 = 0x180BF449711FLL * a1
         + 0xC694446F01 * aSamplejoint[a2]
         + 0x667E12CDFLL * aSamplejoint[a2 + 1]
         + 887503681 * aSamplejoint[a2 + 2]
         + 28629151 * aSamplejoint[a2 + 3]
         + 923521 * aSamplejoint[a2 + 4]
         + 29791 * aSamplejoint[a2 + 5]
         + 961 * aSamplejoint[a2 + 6]
         - aSamplejoint[a2 + 7]
         + 32 * aSamplejoint[a2 + 7];
      v3 = a2 + 8;
      return v5 + aSamplejoint[v3];
    case 10:
      v5 = 0x2E97294E4B2C1 * a1
         + 0x180BF449711FLL * aSamplejoint[a2]
         + 0xC694446F01 * aSamplejoint[a2 + 1]
         + 0x667E12CDFLL * aSamplejoint[a2 + 2]
         + 887503681 * aSamplejoint[a2 + 3]
         + 28629151 * aSamplejoint[a2 + 4]
         + 923521 * aSamplejoint[a2 + 5]
         + 29791 * aSamplejoint[a2 + 6]
         + 961 * aSamplejoint[a2 + 7]
         - aSamplejoint[a2 + 8]
         + 32 * aSamplejoint[a2 + 8];
      v3 = a2 + 9;
      return v5 + aSamplejoint[v3];
    default:
      v7 = a2 + (v4 >> 1);
      v8 = re::internal::compileTimeHornerHash<12ul>(a1, a2, v7 - 1);
      v3 = a3 - 1;
      a1 = re::internal::compileTimeHornerHash<12ul>(aSamplejoint[v7 - 1] - v8 + 32 * v8, v7, a3 - 1);
LABEL_4:
      v5 = 31 * a1;
      return v5 + aSamplejoint[v3];
  }
}

uint64_t *re::VertexCacheAsset::assetType(re::VertexCacheAsset *this)
{
  unsigned __int8 v1;

  {
    re::VertexCacheAsset::assetType(void)::type = (uint64_t)"VertexCacheAsset";
    qword_255827868 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::VertexCacheAsset::assetType(void)::type);
  }
  return &re::VertexCacheAsset::assetType(void)::type;
}

void re::VertexCacheAsset::deinit(re::VertexCacheAsset *this)
{
  uint64_t v2;

  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }

  *((_QWORD *)this + 14) = 0;
}

uint64_t re::VertexCacheAssetLoader::introspectionType(re::VertexCacheAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254103288);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103288))
  {
    qword_254103280 = re::internal::getOrCreateInfo((re::internal *)"VertexCacheAsset", (uint64_t (*)(re::internal *))re::allocInfo_VertexCacheAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VertexCacheAsset, (void (*)(re::IntrospectionBase *))&unk_254103278, 0);
    __cxa_guard_release(&qword_254103288);
  }
  return qword_254103280;
}

uint64_t re::VertexCacheAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v3;
  uint64_t result;

  v3 = (id)(a3[10] * a3[8] * a3[9]);
  if (!v3)
    return 1;
  result = a3[14];
  if (result)
    return v3 == objc_msgSend((id)result, sel_length)
        && v3 == (id)(*(uint64_t (**)(uint64_t, id, id))(*(_QWORD *)a2 + 16))(a2, objc_msgSend((id)a3[14], sel_contents), v3);
  return result;
}

BOOL re::VertexCacheAssetLoader::createRuntimeData(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v4;
  void **v5;
  id v6;
  _BOOL8 v7;
  id v8;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v5 = (void **)(a2 + 14);
  v4 = (void *)a2[14];
  v6 = (id)(a2[10] * a2[8] * a2[9]);
  if (v4)
    return v6 == objc_msgSend(v4, sel_length);
  v19 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v18 = 0;
  v12 = 0;
  v13 = 0;
  v11 = a3;
  v14 = 0;
  re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v11, 0xFFFFFFFFFFFFFFFFLL);
  if (v6 == v13)
  {
    if (v6)
    {
      v10 = objc_msgSend(*(id *)(a1 + 8), sel_newBufferWithBytes_length_options_, v12, v6, 0);
      NS::SharedPtr<MTL::Texture>::operator=(v5, &v10);
      if (v10)

      v8 = v13;
      v7 = v8 == objc_msgSend(*v5, sel_length);
    }
    else
    {
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)&v11);
  return v7;
}

void sub_2253B6D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10)
{
  if (a9)

  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)&a10);
  _Unwind_Resume(a1);
}

uint64_t re::VertexCacheAssetLoader::assetByteSize(re::VertexCacheAssetLoader *this, _QWORD *a2)
{
  return (*(uint64_t (**)(re::VertexCacheAssetLoader *))(*(_QWORD *)this + 40))(this)
       + a2[9] * a2[10] * a2[8];
}

re *re::VertexCacheAssetLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

BOOL re::VertexCacheAssetLoader::isSupportedSourceExtension(re::VertexCacheAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "revertcache") == 0;
}

uint64_t re::VertexCacheAssetLoader::shouldCompress(re::VertexCacheAssetLoader *this, void *a2)
{
  return 0;
}

double re::VertexCacheAssetLoader::allocateSampleAsset(re::VertexCacheAssetLoader *this)
{
  uint64_t *v1;
  uint64_t v2;
  double result;

  v1 = re::globalAllocators(this);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 120, 8);
  result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_24ED3BBE8;
  *(_QWORD *)(v2 + 24) = &str_110;
  *(_QWORD *)(v2 + 40) = &str_110;
  *(_BYTE *)(v2 + 49) = 0;
  *(_DWORD *)(v2 + 52) = 1023969417;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  *(_BYTE *)(v2 + 8) = 1;
  return result;
}

uint64_t *re::allocInfo_VertexCacheAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254103268);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103268))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103320, 0);
    *(uint64_t *)((char *)&qword_254103330 + 6) = 0;
    qword_254103330 = 0;
    qword_254103340 = 0;
    qword_254103348 = 0xFFFFFFFFLL;
    qword_254103320 = (uint64_t)&off_24ED7DAA8;
    qword_254103350 = (uint64_t)"VertexCacheAsset";
    dword_254103358 = 0;
    unk_254103360 = 0u;
    xmmword_254103370 = 0u;
    unk_254103380 = 0u;
    qword_254103390 = 0;
    __cxa_guard_release(&qword_254103268);
  }
  return &qword_254103320;
}

void re::initInfo_VertexCacheAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[2];
  __int128 v41;

  v40[0] = 0x38B77DDA5BC982E4;
  v40[1] = "VertexCacheAsset";
  re::StringID::destroyString((re::StringID *)v40);
  *((_OWORD *)this + 2) = v41;
  v4 = atomic_load((unsigned __int8 *)&qword_254103270);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103270);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_BOOL((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "defaultInterpolation";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x3000000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2541032D8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::mtl::introspect_VertexFormat((re::mtl *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "format";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3100000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541032E0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "frameInterval";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x3400000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2541032E8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "startTime";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x3800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2541032F0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_size_t((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "frameCount";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x4000000006;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2541032F8 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_size_t((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "vertexCount";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x4800000007;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254103300 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_size_t((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "stride";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x5000000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254103308 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      re::IntrospectionInfo<re::FixedArray<re::AABB>>::get();
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "frameAABBs";
      *(_QWORD *)(v35 + 16) = &qword_254103298;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x5800000009;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_254103310 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v37 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "meshIdentifier";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x80000000ALL;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_254103318 = v38;
      __cxa_guard_release(&qword_254103270);
    }
  }
  *((_QWORD *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_2541032D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::VertexCacheAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::VertexCacheAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::VertexCacheAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::VertexCacheAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v39 = v41;
}

void sub_2253B7438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254103270);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::FixedArray<re::AABB>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_254103290);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254103290))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_254103298);
    qword_254103298 = (uint64_t)&off_24ED3BC18;
    __cxa_guard_release(&qword_254103290);
  }
  if ((_MergedGlobals_100 & 1) == 0)
  {
    v1 = re::introspect_AABB((re::IntrospectionBase **)1);
    if ((_MergedGlobals_100 & 1) == 0)
    {
      v2 = v1;
      _MergedGlobals_100 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103298, 0);
      qword_2541032A8 = 0x1800000004;
      dword_2541032B0 = v3;
      word_2541032B4 = 0;
      *(_QWORD *)&xmmword_2541032B8 = 0;
      *((_QWORD *)&xmmword_2541032B8 + 1) = 0xFFFFFFFFLL;
      qword_2541032C8 = v2;
      unk_2541032D0 = 0;
      qword_254103298 = (uint64_t)&off_24ED3BC18;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_254103298, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x18uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2541032B8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void sub_2253B76CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254103290);
  _Unwind_Resume(a1);
}

double re::internal::defaultConstruct<re::VertexCacheAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = &off_24ED3BBE8;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = &str_110;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = &str_110;
  *(_WORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 52) = 1023969417;
  result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_QWORD *)(a3 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::VertexCacheAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::VertexCacheAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24ED3BBE8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &str_110;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = &str_110;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 1023969417;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::VertexCacheAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void re::VertexCacheAssetLoader::~VertexCacheAssetLoader(id *this)
{
  *this = &off_24ED3BA90;

}

{
  *this = &off_24ED3BA90;

  JUMPOUT(0x2276933B8);
}

void re::VertexCacheAsset::~VertexCacheAsset(re::VertexCacheAsset *this)
{
  re::VertexCacheAsset::~VertexCacheAsset(this);
  JUMPOUT(0x2276933B8);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED3BBE8;
  re::VertexCacheAsset::deinit(this);
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {

    *((_QWORD *)this + 14) = 0;
  }
  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  re::StringID::destroyString((re::VertexCacheAsset *)((char *)this + 32));
  re::StringID::destroyString((re::VertexCacheAsset *)((char *)this + 16));
}

void sub_2253B78AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;
  uint64_t v4;

  v3 = (void *)v1[14];
  if (v3)
  {

    v1[14] = 0;
  }
  v4 = v1[11];
  if (v4)
  {
    if (v1[12])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v1[13]);
      v1[12] = 0;
      v1[13] = 0;
    }
    v1[11] = 0;
  }
  re::StringID::destroyString((re::StringID *)(v1 + 4));
  re::StringID::destroyString((re::StringID *)(v1 + 2));
  _Unwind_Resume(a1);
}

_QWORD *re::IntrospectionFixedArray<re::AABB>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::AABB>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<re::AABB>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<re::AABB>::destroy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<re::AABB>::init(uint64_t a1, uint64_t a2, re *a3, int a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::AABB>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (*(_QWORD *)(a2 + 8) <= v12)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = (uint64_t)re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(*(_QWORD *)(a2 + 16) + v11));
      ++v12;
      v11 += 32;
    }
    while (a5 != v12);
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<re::AABB>::deinit(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<re::AABB>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::AABB>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::AABB>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 32 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *a1;
  if (v8)
  {
    if (a1[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  v9 = (_anonymous_namespace_ *)re::FixedArray<re::AABB>::init<>((uint64_t)a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = a1[1];
    if (v10)
    {
      v11 = (char *)a1[2];
      v12 = 32 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 32;
        v12 -= 32;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 32 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::AABB>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::introspectionTable_GeometricObjectBaseData(re *this)
{
  unsigned __int8 v1;
  re *v2;
  uint64_t *v3;
  re::IntrospectionBase *v4;

  if ((_MergedGlobals_101 & 1) == 0)
  {
    _MergedGlobals_101 = 1;
    v1 = atomic_load((unsigned __int8 *)&qword_2541033A0);
    if ((v1 & 1) == 0)
    {
      v2 = (re *)__cxa_guard_acquire(&qword_2541033A0);
      if ((_DWORD)v2)
      {
        qword_254103670 = (uint64_t)"GeometricObjectData";
        v3 = (uint64_t *)qword_2541033D8;
        if (!qword_2541033D8)
        {
          v3 = re::allocInfo_GeometricObjectData(v2);
          qword_2541033D8 = (uint64_t)v3;
          re::initInfo_GeometricObjectData((re *)v3, v4);
        }
        qword_254103678 = (uint64_t)v3;
        qword_254103680 = 0;
        qword_254103688 = 1;
        dword_254103690 = 0;
        __cxa_guard_release(&qword_2541033A0);
      }
    }
    dword_254103528 = 1;
    qword_254103530 = (uint64_t)&qword_254103670;
  }
}

uint64_t *re::allocInfo_GeometricObjectBaseData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541033A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541033A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103718, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103728 = 0;
    qword_254103738 = 0;
    qword_254103740 = 0xFFFFFFFFLL;
    qword_254103718 = (uint64_t)&off_24ED7DAA8;
    qword_254103748 = (uint64_t)"GeometricObjectBaseData";
    dword_254103750 = 0;
    xmmword_254103758 = 0u;
    unk_254103768 = 0u;
    xmmword_254103778 = 0u;
    qword_254103788 = 0;
    __cxa_guard_release(&qword_2541033A8);
  }
  return &qword_254103718;
}

void re::initInfo_GeometricObjectBaseData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  re *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0xFD63273CAECF29F6;
  v20[1] = "GeometricObjectBaseData";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_2541033B0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541033B0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_GeometricObjectType((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 32, 8);
      *(_DWORD *)v9 = 3;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 8;
      qword_254103610 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::introspectionTable_GeometricObjectBaseData((re *)v10);
      v11 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 16, 8);
      *(_DWORD *)v11 = 2;
      *((_QWORD *)v11 + 1) = &dword_254103528;
      qword_254103618 = (uint64_t)v11;
      v12 = re::introspectionAllocator(v11);
      v13 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "pose";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254103620 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_AssetHandle((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "shape";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x3000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254103628 = v18;
      __cxa_guard_release(&qword_2541033B0);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254103610;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeometricObjectBaseData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeometricObjectBaseData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeometricObjectBaseData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeometricObjectBaseData>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

void re::internal::defaultConstruct<re::GeometricObjectBaseData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED3BCB0;
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0x3F80000000000000;
  a3[7] = 0;
  a3[8] = 0;
  a3[6] = 0;
}

uint64_t re::internal::defaultDestruct<re::GeometricObjectBaseData>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::GeometricObjectBaseData>(_QWORD *result)
{
  *result = &off_24ED3BCB0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0x3F80000000000000;
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::GeometricObjectBaseData>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *re::allocInfo_GeometricObjectData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541033C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541033C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103790, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541037A0 = 0;
    qword_2541037B0 = 0;
    qword_2541037B8 = 0xFFFFFFFFLL;
    qword_254103790 = (uint64_t)&off_24ED7DAA8;
    qword_2541037C0 = (uint64_t)"GeometricObjectData";
    dword_2541037C8 = 0;
    xmmword_2541037D0 = 0u;
    xmmword_2541037E0 = 0u;
    xmmword_2541037F0 = 0u;
    qword_254103800 = 0;
    __cxa_guard_release(&qword_2541033C0);
  }
  return &qword_254103790;
}

void re::initInfo_GeometricObjectData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x871260762354B514;
  v12[1] = "GeometricObjectData";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2541033D0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541033D0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2541033B8;
      if (!qword_2541033B8)
      {
        v8 = re::allocInfo_GeometricObjectBaseData((re *)v6);
        qword_2541033B8 = (uint64_t)v8;
        re::initInfo_GeometricObjectBaseData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "GeometricObjectBaseData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541033C8 = v10;
      __cxa_guard_release(&qword_2541033D0);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541033C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GeometricObjectData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GeometricObjectData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GeometricObjectData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GeometricObjectData>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::internal::defaultConstruct<re::GeometricObjectData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0x3F80000000000000;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)a3 = &off_24ED3BCE0;
}

void re::internal::defaultDestruct<re::GeometricObjectData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED3BCB0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 6));
}

uint64_t re::internal::defaultConstructV2<re::GeometricObjectData>(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0x3F80000000000000;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)result = &off_24ED3BCE0;
  return result;
}

void re::internal::defaultDestructV2<re::GeometricObjectData>(_QWORD *a1)
{
  *a1 = &off_24ED3BCB0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 6));
}

uint64_t re::convertToSerializable(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(re::CapsuleShapeData *__hidden);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t j;
  char v33;
  _anonymous_namespace_ *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t i;
  _QWORD *v42;
  uint64_t v43;
  _BYTE v44[18];
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  __n128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  switch((*(unsigned int (**)(_QWORD *))(*a1 + 24))(a1))
  {
    case 1u:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 16, 8);
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)v11 = &off_24ED3BE98;
      return v11;
    case 2u:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 16, 8);
      *(_DWORD *)(v11 + 8) = 2;
      *(_QWORD *)v11 = &off_24ED3BF40;
      *(float *)(v11 + 12) = (*(float (**)(_QWORD *))(*a1 + 64))(a1);
      return v11;
    case 3u:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 32, 16);
      *(_DWORD *)(v11 + 8) = 3;
      *(_QWORD *)v11 = &off_24ED3BD18;
      *(_OWORD *)(v11 + 16) = 0u;
      v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
      *(_QWORD *)(v11 + 24) = v13;
      goto LABEL_31;
    case 4u:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 24, 8);
      v11 = v14;
      *(_DWORD *)(v14 + 8) = 4;
      v15 = &off_24ED3BD80;
      goto LABEL_29;
    case 5u:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 96, 8);
      *(_DWORD *)(v11 + 8) = 5;
      *(_QWORD *)v11 = &off_24ED3BE28;
      *(_QWORD *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 88) = 0;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_DWORD *)(v11 + 80) = 0;
      v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      *(_QWORD *)(v11 + 16) = a4;
      re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)(v11 + 16), v16);
      ++*(_DWORD *)(v11 + 40);
      v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
      v18 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
      if (v16)
      {
        v20 = v18;
        v21 = (_DWORD *)(v17 + 8);
        do
        {
          v19.n128_u64[0] = *((_QWORD *)v21 - 1);
          v19.n128_u32[2] = *v21;
          v21 = (_DWORD *)((char *)v21 + v20);
          v49 = v19;
          v19 = re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v11 + 16), &v49);
          --v16;
        }
        while (v16);
      }
      re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v11 + 56, (uint64_t)&v49);
      goto LABEL_24;
    case 6u:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 48, 16);
      *(_DWORD *)(v11 + 8) = 6;
      *(_QWORD *)v11 = &off_24ED3BED0;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
      *(float *)(v11 + 32) = (*(float (**)(_QWORD *))(*a1 + 72))(a1);
      return v11;
    case 7u:
      v43 = a5;
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 72, 8);
      *(_DWORD *)(v11 + 8) = 7;
      *(_QWORD *)v11 = &off_24ED3BDB8;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      v42 = (_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      v22 = a1[4];
      re::FixedArray<re::GeometricObjectData>::init<>((_QWORD *)(v11 + 16), a4, v22);
      if (!v22)
        goto LABEL_19;
      v23 = 0;
      break;
    case 8u:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 24, 8);
      v11 = v14;
      *(_DWORD *)(v14 + 8) = 8;
      v15 = &off_24ED3BE60;
      goto LABEL_29;
    case 9u:
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 24, 8);
      v11 = v14;
      *(_DWORD *)(v14 + 8) = 9;
      v15 = &off_24ED3BDF0;
LABEL_29:
      *(_QWORD *)v14 = v15;
      *(float *)(v11 + 12) = (*(float (**)(_QWORD *))(*a1 + 64))(a1);
      *(float *)(v11 + 16) = (*(float (**)(_QWORD *))(*a1 + 72))(a1);
      return v11;
    case 0xBu:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 24, 8);
      *(_DWORD *)(v11 + 8) = 11;
      *(_QWORD *)v11 = &off_24ED3BF08;
      *(_QWORD *)(v11 + 16) = 0;
      v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
LABEL_31:
      *(_QWORD *)(v11 + 16) = v12;
      return v11;
    case 0xCu:
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 40, 8);
      *(_DWORD *)(v11 + 8) = 12;
      *(_QWORD *)v11 = &off_24ED3BF78;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      v36 = a1[3];
      v37 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) >> 27));
      v38 = (v37 ^ (v37 >> 31)) % *(unsigned int *)(a3 + 24);
      v39 = *(_QWORD *)(a3 + 16);
      for (i = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 4 * v38);
            *(_QWORD *)(v39 + 48 * i + 16) != v36;
      re::AssetHandle::operator=((uint64_t *)(v11 + 16), (uint64_t *)(v39 + 48 * i + 24));
      return v11;
    default:
      re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Unexpected shape type.", "!\"Unreachable code\"", "convertToSerializable", 267);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2253B9088);
  }
  do
  {
    v24 = a1[4];
    if (v24 <= v23)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v44 = 136315906;
      *(_QWORD *)&v44[4] = "operator[]";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 476;
      v45 = 2048;
      v46 = v23;
      v47 = 2048;
      v48 = v24;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v44 = 136315906;
      *(_QWORD *)&v44[4] = "operator[]";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 468;
      v45 = 2048;
      v46 = v23;
      v47 = 2048;
      v48 = v24;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v24 = *(_QWORD *)(v11 + 24);
    if (v24 <= v23)
      goto LABEL_37;
    v25 = a1[5] + 240 * v23;
    v26 = *(_QWORD *)(v11 + 32) + 80 * v23;
    (*(void (**)(__n128 *__return_ptr, uint64_t))(*(_QWORD *)v25 + 40))(&v49, v25);
    v27 = v50;
    *(__n128 *)(v26 + 16) = v49;
    *(_OWORD *)(v26 + 32) = v27;
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    v29 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
    v30 = (v29 ^ (v29 >> 31)) % *(unsigned int *)(a2 + 24);
    v31 = *(_QWORD *)(a2 + 16);
    for (j = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * v30);
          *(_QWORD *)(v31 + 48 * j + 16) != v28;
    re::AssetHandle::operator=((uint64_t *)(v26 + 48), (uint64_t *)(v31 + 48 * j + 24));
    ++v23;
  }
  while (v23 != v22);
LABEL_19:
  v33 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  *(_BYTE *)(v11 + 40) = v33;
  if ((v33 & 1) != 0)
  {
    v35 = v50;
    *(_QWORD *)v44 = v51;
    *(_QWORD *)&v44[8] = v50;
    if (!*v42)
    {
      if (!(_QWORD)v50)
      {
LABEL_24:
        if (v49.n128_u64[0] && (_QWORD)v51)
          (*(void (**)(void))(*(_QWORD *)v49.n128_u64[0] + 40))();
        return v11;
      }
    }
    re::FixedArray<unsigned char>::copy(v42, (uint64_t)v44);
    goto LABEL_24;
  }
  return v11;
}

_QWORD *re::FixedArray<re::GeometricObjectData>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0x333333333333334)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 80, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 80 * a3, 16);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *((_DWORD *)result + 2) = 1;
      result[2] = 0;
      result[3] = 0;
      result[4] = 0;
      result[5] = 0x3F80000000000000;
      result[7] = 0;
      result[8] = 0;
      result[6] = 0;
      *result = &off_24ED3BCE0;
      result += 10;
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)result + 2) = 1;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0x3F80000000000000;
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  *result = &off_24ED3BCE0;
  return result;
}

uint64_t re::convertFromSerializable(re *this, const re::CollisionShapeData *a2, re::CollisionShape **a3, re::Allocator *a4, re::Allocator *a5, __n128 a6, __n128 a7)
{
  int v7;
  re::CollisionShape **v8;
  const re::CollisionShapeData *v9;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t, re::CollisionShape **, char *, re::Allocator *);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  unint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  unsigned int v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  re::IndexedTriangleMeshAsset *v37;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  const re::CollisionShapeData *v44;
  uint64_t v45;
  re::CollisionShape **v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unint64_t v59;
  __int16 v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v7 = (int)a5;
  v8 = a3;
  v9 = a2;
  switch(*((_DWORD *)this + 2))
  {
    case 1:
      goto LABEL_43;
    case 2:
      goto LABEL_43;
    case 3:
      v13 = (char *)this + 16;
                                                                                              + 32);
      goto LABEL_42;
    case 4:
      a6.n128_u32[0] = *((_DWORD *)this + 3);
      a7.n128_u32[0] = *((_DWORD *)this + 4);
      goto LABEL_43;
    case 5:
      goto LABEL_43;
    case 6:
      goto LABEL_43;
    case 7:
      v16 = *((_QWORD *)this + 3);
      v50 = 0;
      v51 = 0;
      v52 = 0;
      re::FixedArray<unsigned long>::init<>(&v50, (uint64_t)a4, v16);
      v47 = 0;
      v48 = 0;
      v49 = 0;
      re::FixedArray<re::Pose<float>>::init<>(&v47, (uint64_t)a4, v16);
      if (v16)
      {
        v45 = v11;
        v46 = v8;
        v44 = v9;
        v17 = 0;
        v18 = 0;
        LODWORD(v19) = 0;
        for (i = 0; i != v16; ++i)
        {
          v21 = *((_QWORD *)this + 3);
          if (v21 <= i)
          {
            v53 = 0;
            v65 = 0u;
            v66 = 0u;
            v64 = 0u;
            v62 = 0u;
            v63 = 0u;
            v27 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v54 = 136315906;
            v55 = "operator[]";
            v56 = 1024;
            v57 = 476;
            v58 = 2048;
            v59 = i;
            v60 = 2048;
            v61 = v21;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_72:
            v53 = 0;
            v65 = 0u;
            v66 = 0u;
            v64 = 0u;
            v62 = 0u;
            v63 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v54 = 136315906;
            v55 = "operator[]";
            v56 = 1024;
            v57 = 468;
            v58 = 2048;
            v59 = i;
            v60 = 2048;
            v61 = v27;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_73:
            v53 = 0;
            v65 = 0u;
            v66 = 0u;
            v64 = 0u;
            v62 = 0u;
            v63 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v54 = 136315906;
            v55 = "operator[]";
            v56 = 1024;
            v57 = 476;
            v58 = 2048;
            v59 = i;
            v60 = 2048;
            v61 = v27;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_74:
            v53 = 0;
            v65 = 0u;
            v66 = 0u;
            v64 = 0u;
            v62 = 0u;
            v63 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v54 = 136315906;
            v55 = "operator[]";
            v56 = 1024;
            v57 = 468;
            v58 = 2048;
            v59 = i;
            v60 = 2048;
            v61 = v27;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          re::AssetHandle::AssetHandle((re::AssetHandle *)&v62, (const re::AssetHandle *)(*((_QWORD *)this + 4) + v18 + 48));
          if (v7)
          {
            re::AssetHandle::loadNow(*((uint64_t *)&v62 + 1), 0);
          }
          else if (*((_QWORD *)&v62 + 1))
          {
            if (!atomic_load((unsigned int *)(*((_QWORD *)&v62 + 1) + 704)))
              re::AssetHandle::loadAsync((re::AssetHandle *)&v62);
          }
          v23 = re::AssetHandle::loadedAsset<re::CollisionShapeAsset>((re::CollisionShapeAsset *)&v62);
          if (v23)
          {
            v24 = 0;
            v25 = *(_QWORD *)(v23 + 8);
          }
          else if (*((_QWORD *)&v62 + 1))
          {
            v25 = 0;
            v26 = atomic_load((unsigned int *)(*((_QWORD *)&v62 + 1) + 704));
            if (v26 == 3)
              v24 = 2;
            else
              v24 = 1;
          }
          else
          {
            v25 = 0;
            v24 = 1;
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v62);
          v27 = v51;
          if (v51 <= i)
            goto LABEL_72;
          *(_QWORD *)(v52 + 8 * i) = v25;
          v27 = *((_QWORD *)this + 3);
          if (v27 <= i)
            goto LABEL_73;
          v27 = v48;
          if (v48 <= i)
            goto LABEL_74;
          v28 = *((_QWORD *)this + 4) + v18;
          v29 = v49;
          v30 = (_OWORD *)(v49 + v17);
          v31 = *(_OWORD *)(v28 + 32);
          *v30 = *(_OWORD *)(v28 + 16);
          v30[1] = v31;
          if (v24 == 2)
            v32 = 2;
          else
            v32 = v19;
          if ((_DWORD)v19)
            v33 = 0;
          else
            v33 = v24 == 1;
          if (v33)
            v19 = 1;
          else
            v19 = v32;
          v18 += 80;
          v17 += 32;
        }
        v11 = v45;
        v8 = v46;
        if ((_DWORD)v19)
        {
          v34 = 0;
          v35 = 0;
          v9 = v44;
          goto LABEL_65;
        }
        v9 = v44;
      }
      else
      {
        v29 = v49;
      }
      v35 = (*(uint64_t (**)(uint64_t, re::CollisionShape **, uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 160))(v11, v8, v52, v29, v16, *((unsigned __int8 *)this + 40), 0);
      v19 = 0;
      v34 = v48 == 0;
LABEL_65:
      *(_QWORD *)v9 = v35;
      if (v47 && !v34)
        (*(void (**)(void))(*(_QWORD *)v47 + 40))();
      if (v50 && v51)
        (*(void (**)(void))(*(_QWORD *)v50 + 40))();
      return v19;
    case 8:
      a6.n128_u32[0] = *((_DWORD *)this + 3);
      a7.n128_u32[0] = *((_DWORD *)this + 4);
      goto LABEL_43;
    case 9:
      a6.n128_u32[0] = *((_DWORD *)this + 3);
      a7.n128_u32[0] = *((_DWORD *)this + 4);
      goto LABEL_43;
    case 0xB:
      v13 = (char *)this + 16;
                                                                                              + 136);
LABEL_42:
      goto LABEL_43;
    case 0xC:
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v62, (re *)((char *)this + 16));
      v37 = (re::IndexedTriangleMeshAsset *)*((_QWORD *)&v62 + 1);
      if (v7)
      {
        re::AssetHandle::loadNow(*((uint64_t *)&v62 + 1), 0);
      }
      else if (*((_QWORD *)&v62 + 1))
      {
        if (!atomic_load((unsigned int *)(*((_QWORD *)&v62 + 1) + 704)))
          re::AssetHandle::loadAsync((re::AssetHandle *)&v62);
      }
      if (!*((_QWORD *)&v62 + 1))
      {
        v19 = 1;
LABEL_62:
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v62);
        v12 = 0;
        goto LABEL_44;
      }
      v39 = re::IndexedTriangleMeshAsset::assetType(v37);
      v40 = re::AssetHandle::assetWithType((re::AssetHandle *)&v62, (const re::AssetType *)v39, 1);
      if (!v40
        || (v41 = *(_QWORD *)(v40 + 8)) == 0
        || !re::IndexedTriangleMesh::isValid(*(re::IndexedTriangleMesh **)(v40 + 8)))
      {
        v19 = 1;
        if (*((_QWORD *)&v62 + 1))
        {
          v43 = atomic_load((unsigned int *)(*((_QWORD *)&v62 + 1) + 704));
          if (v43 == 3)
            v19 = 2;
          else
            v19 = 1;
        }
        goto LABEL_62;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v62);
      v12 = (*(uint64_t (**)(uint64_t, re::CollisionShape **, uint64_t, uint64_t))(*(_QWORD *)v11 + 144))(v11, v8, v41, v42);
LABEL_43:
      v19 = 0;
LABEL_44:
      *(_QWORD *)v9 = v12;
      return v19;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, a4, "assertion failure: '%s' (%s:line %i) Unexpected shape type.", "!\"Unreachable code\"", "convertFromSerializable", 398);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2253B997CLL);
  }
}

uint64_t re::convertToSerializable(re *this, const re::IndexedTriangleMesh *a2, re::Allocator *a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;

  v5 = (*(uint64_t (**)(const re::IndexedTriangleMesh *, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 80, 8);
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 57) = 0u;
  re::FixedArray<int>::init<>((uint64_t *)v5, (uint64_t)a2, 12 * *((_QWORD *)this + 3));
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    v7 = *(_DWORD **)(v5 + 16);
    v8 = *((_QWORD *)this + 4);
    v9 = (_DWORD *)(*((_QWORD *)this + 1) + 8);
    do
    {
      *v7 = *(v9 - 2);
      v7[1] = *(v9 - 1);
      v7[2] = *v9;
      v9 = (_DWORD *)((char *)v9 + v8);
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  v10 = *((unsigned __int8 *)this + 58);
  if (v10 == 2)
    v11 = 4;
  else
    v11 = 2 * (v10 == 1);
  re::FixedArray<unsigned short>::init<>((uint64_t *)(v5 + 24), (uint64_t)a2, (unint64_t)(v11 * *((_QWORD *)this + 5)) >> 1);
  v12 = *((unsigned __int8 *)this + 58);
  if (v12 == 2)
    v13 = 4;
  else
    v13 = 2 * (v12 == 1);
  memcpy(*(void **)(v5 + 40), *((const void **)this + 2), v13 * *((_QWORD *)this + 5));
  if (*((_QWORD *)this + 2))
  {
    v14 = *((_QWORD *)this + 5);
    re::FixedArray<unsigned short>::init<>((uint64_t *)(v5 + 48), (uint64_t)a2, v14 / 3);
    if (v14 >= 3)
    {
      v15 = 0;
      if (v14 / 3 <= 1)
        v16 = 1;
      else
        v16 = v14 / 3;
      do
      {
        v17 = (*(uint64_t (**)(re *, unint64_t))(*(_QWORD *)this + 16))(this, v15);
        if (*(_QWORD *)(v5 + 56) <= v15)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_WORD *)(*(_QWORD *)(v5 + 64) + 2 * v15++) = v17;
      }
      while (v16 != v15);
    }
  }
  *(_BYTE *)(v5 + 72) = *((_BYTE *)this + 58) == 2;
  return v5;
}

void re::FixedArray<unsigned short>::init<>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  _WORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 < 0)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 2, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 2 * a3;
  v6 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 2 * a3, 2);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 2);
    v8 = (_WORD *)((char *)v8 + v5 - 2);
  }
  *v8 = 0;
}

uint64_t re::convertFromSerializable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
    v3 = *(_QWORD *)(a1 + 64);
  else
    v3 = 0;
  if (*(_BYTE *)(a1 + 72))
    v4 = 2;
  else
    v4 = 1;
}

void re::introspectionTable_CollisionShapeData(re *this)
{
  unsigned __int8 v1;
  re *v2;
  uint64_t *v3;
  re::IntrospectionBase *v4;
  uint64_t *v5;
  re::IntrospectionBase *v6;
  uint64_t *v7;
  re::IntrospectionBase *v8;
  uint64_t *v9;
  re::IntrospectionBase *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t *v13;
  re::IntrospectionBase *v14;
  uint64_t *v15;
  re::IntrospectionBase *v16;
  uint64_t *v17;
  re::IntrospectionBase *v18;
  uint64_t *v19;
  re::IntrospectionBase *v20;
  uint64_t *v21;
  re::IntrospectionBase *v22;
  uint64_t *v23;
  re::IntrospectionBase *v24;

  if ((byte_254103399 & 1) == 0)
  {
    byte_254103399 = 1;
    v1 = atomic_load((unsigned __int8 *)&qword_2541033E0);
    if ((v1 & 1) == 0)
    {
      v2 = (re *)__cxa_guard_acquire(&qword_2541033E0);
      if ((_DWORD)v2)
      {
        qword_254103E20 = (uint64_t)"BoxShapeData";
        v3 = (uint64_t *)qword_254103408;
        if (!qword_254103408)
        {
          v3 = re::allocInfo_BoxShapeData(v2);
          qword_254103408 = (uint64_t)v3;
          re::initInfo_BoxShapeData((re *)v3, v4);
        }
        qword_254103E28 = (uint64_t)v3;
        qword_254103E30 = 0;
        qword_254103E38 = 3;
        dword_254103E40 = 0;
        qword_254103E48 = (uint64_t)"CapsuleShapeData";
        v5 = (uint64_t *)qword_254103420;
        if (!qword_254103420)
        {
          v5 = re::allocInfo_CapsuleShapeData(v2);
          qword_254103420 = (uint64_t)v5;
          re::initInfo_CapsuleShapeData((re *)v5, v6);
        }
        qword_254103E50 = (uint64_t)v5;
        qword_254103E58 = 0;
        qword_254103E60 = 4;
        dword_254103E68 = 0;
        qword_254103E70 = (uint64_t)"CompoundShapeData";
        v7 = (uint64_t *)qword_254103438;
        if (!qword_254103438)
        {
          v7 = re::allocInfo_CompoundShapeData(v2);
          qword_254103438 = (uint64_t)v7;
          re::initInfo_CompoundShapeData((re *)v7, v8);
        }
        qword_254103E78 = (uint64_t)v7;
        qword_254103E80 = 0;
        qword_254103E88 = 7;
        dword_254103E90 = 0;
        qword_254103E98 = (uint64_t)"ConeShapeData";
        v9 = (uint64_t *)qword_254103450;
        if (!qword_254103450)
        {
          v9 = re::allocInfo_ConeShapeData(v2);
          qword_254103450 = (uint64_t)v9;
          re::initInfo_ConeShapeData((re *)v9, v10);
        }
        qword_254103EA0 = (uint64_t)v9;
        qword_254103EA8 = 0;
        qword_254103EB0 = 9;
        dword_254103EB8 = 0;
        qword_254103EC0 = (uint64_t)"ConvexPolyhedronShapeData";
        v11 = (uint64_t *)qword_254103468;
        if (!qword_254103468)
        {
          v11 = re::allocInfo_ConvexPolyhedronShapeData(v2);
          qword_254103468 = (uint64_t)v11;
          re::initInfo_ConvexPolyhedronShapeData((re *)v11, v12);
        }
        qword_254103EC8 = (uint64_t)v11;
        qword_254103ED0 = 0;
        qword_254103ED8 = 5;
        dword_254103EE0 = 0;
        qword_254103EE8 = (uint64_t)"CylinderShapeData";
        v13 = (uint64_t *)qword_254103480;
        if (!qword_254103480)
        {
          v13 = re::allocInfo_CylinderShapeData(v2);
          qword_254103480 = (uint64_t)v13;
          re::initInfo_CylinderShapeData((re *)v13, v14);
        }
        qword_254103EF0 = (uint64_t)v13;
        qword_254103EF8 = 0;
        qword_254103F00 = 8;
        dword_254103F08 = 0;
        qword_254103F10 = (uint64_t)"EmptyShapeData";
        v15 = (uint64_t *)qword_2541034A0;
        if (!qword_2541034A0)
        {
          v15 = re::allocInfo_EmptyShapeData(v2);
          qword_2541034A0 = (uint64_t)v15;
          re::initInfo_EmptyShapeData((re *)v15, v16);
        }
        qword_254103F18 = (uint64_t)v15;
        qword_254103F20 = 0;
        qword_254103F28 = 1;
        dword_254103F30 = 0;
        qword_254103F38 = (uint64_t)"PlaneShapeData";
        v17 = (uint64_t *)qword_2541034B8;
        if (!qword_2541034B8)
        {
          v17 = re::allocInfo_PlaneShapeData(v2);
          qword_2541034B8 = (uint64_t)v17;
          re::initInfo_PlaneShapeData((re *)v17, v18);
        }
        qword_254103F40 = (uint64_t)v17;
        qword_254103F48 = 0;
        qword_254103F50 = 6;
        dword_254103F58 = 0;
        qword_254103F60 = (uint64_t)"RectangleShapeData";
        v19 = (uint64_t *)qword_2541034D0;
        if (!qword_2541034D0)
        {
          v19 = re::allocInfo_RectangleShapeData(v2);
          qword_2541034D0 = (uint64_t)v19;
          re::initInfo_RectangleShapeData((re *)v19, v20);
        }
        qword_254103F68 = (uint64_t)v19;
        qword_254103F70 = 0;
        qword_254103F78 = 11;
        dword_254103F80 = 0;
        qword_254103F88 = (uint64_t)"SphereShapeData";
        v21 = (uint64_t *)qword_2541034E8;
        if (!qword_2541034E8)
        {
          v21 = re::allocInfo_SphereShapeData(v2);
          qword_2541034E8 = (uint64_t)v21;
          re::initInfo_SphereShapeData((re *)v21, v22);
        }
        qword_254103F90 = (uint64_t)v21;
        qword_254103F98 = 0;
        qword_254103FA0 = 2;
        dword_254103FA8 = 0;
        qword_254103FB0 = (uint64_t)"TriangleMeshShapeData";
        v23 = (uint64_t *)qword_254103500;
        if (!qword_254103500)
        {
          v23 = re::allocInfo_TriangleMeshShapeData(v2);
          qword_254103500 = (uint64_t)v23;
          re::initInfo_TriangleMeshShapeData((re *)v23, v24);
        }
        qword_254103FB8 = (uint64_t)v23;
        qword_254103FC0 = 0;
        qword_254103FC8 = 12;
        dword_254103FD0 = 0;
        __cxa_guard_release(&qword_2541033E0);
      }
    }
    dword_254103538 = 11;
    qword_254103540 = (uint64_t)&qword_254103E20;
  }
}

uint64_t *re::allocInfo_CollisionShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541033E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541033E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103808, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103818 = 0;
    qword_254103828 = 0;
    qword_254103830 = 0xFFFFFFFFLL;
    qword_254103808 = (uint64_t)&off_24ED7DAA8;
    qword_254103838 = (uint64_t)"CollisionShapeData";
    dword_254103840 = 0;
    xmmword_254103848 = 0u;
    xmmword_254103858 = 0u;
    xmmword_254103868 = 0u;
    qword_254103878 = 0;
    __cxa_guard_release(&qword_2541033E8);
  }
  return &qword_254103808;
}

void re::initInfo_CollisionShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0x139DD8F0161B0FF2;
  v13[1] = "CollisionShapeData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_2541033F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541033F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_ShapeType((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 32, 8);
      *(_DWORD *)v9 = 3;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 8;
      qword_254103548 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::introspectionTable_CollisionShapeData((re *)v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 16, 8);
      *(_DWORD *)v11 = 2;
      *(_QWORD *)(v11 + 8) = &dword_254103538;
      qword_254103550 = v11;
      __cxa_guard_release(&qword_2541033F0);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254103548;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CollisionShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CollisionShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CollisionShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CollisionShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

void re::internal::defaultConstruct<re::CollisionShapeData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED3BD60;
}

uint64_t re::internal::defaultDestruct<re::CollisionShapeData>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::CollisionShapeData>(_QWORD *result)
{
  *result = &off_24ED3BD60;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::CollisionShapeData>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_CollisionShapeData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CollisionShapeData", (uint64_t (*)(re::internal *))re::allocInfo_CollisionShapeData, (re::IntrospectionBase *(*)(void))re::initInfo_CollisionShapeData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::CollisionShapeData>, this);
}

uint64_t *re::allocInfo_BoxShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541033F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541033F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103880, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103890 = 0;
    qword_2541038A0 = 0;
    qword_2541038A8 = 0xFFFFFFFFLL;
    qword_254103880 = (uint64_t)&off_24ED7DAA8;
    qword_2541038B0 = (uint64_t)"BoxShapeData";
    dword_2541038B8 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2541038F0 = 0;
    __cxa_guard_release(&qword_2541033F8);
  }
  return &qword_254103880;
}

void re::initInfo_BoxShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x3129063846308B00;
  v15[1] = "BoxShapeData";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_254103400);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103400);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254103558 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "extent";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254103560 = v13;
      __cxa_guard_release(&qword_254103400);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254103558;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BoxShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BoxShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BoxShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BoxShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

double re::internal::defaultConstruct<re::BoxShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a3 + 8) = 3;
  *(_QWORD *)a3 = &off_24ED3BD18;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

double re::internal::defaultConstructV2<re::BoxShapeData>(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)a1 = &off_24ED3BD18;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t *re::allocInfo_CapsuleShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254103410);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103410))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541038F8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103908 = 0;
    qword_254103918 = 0;
    qword_254103920 = 0xFFFFFFFFLL;
    qword_2541038F8 = (uint64_t)&off_24ED7DAA8;
    qword_254103928 = (uint64_t)"CapsuleShapeData";
    dword_254103930 = 0;
    xmmword_254103938 = 0u;
    xmmword_254103948 = 0u;
    xmmword_254103958 = 0u;
    qword_254103968 = 0;
    __cxa_guard_release(&qword_254103410);
  }
  return &qword_2541038F8;
}

void re::initInfo_CapsuleShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0x8B915C5BAD1E5EBCLL;
  v20[1] = "CapsuleShapeData";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_254103418);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103418);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254103598 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_float((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "height";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0xC00000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2541035A0 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_float((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "radius";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x1000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2541035A8 = v18;
      __cxa_guard_release(&qword_254103418);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254103598;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CapsuleShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CapsuleShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CapsuleShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CapsuleShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

void re::internal::defaultConstruct<re::CapsuleShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = &off_24ED3BD80;
}

uint64_t re::internal::defaultConstructV2<re::CapsuleShapeData>(uint64_t result)
{
  *(_DWORD *)(result + 8) = 4;
  *(_QWORD *)result = &off_24ED3BD80;
  return result;
}

uint64_t *re::allocInfo_CompoundShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254103428);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103428))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103970, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103980 = 0;
    qword_254103990 = 0;
    qword_254103998 = 0xFFFFFFFFLL;
    qword_254103970 = (uint64_t)&off_24ED7DAA8;
    qword_2541039A0 = (uint64_t)"CompoundShapeData";
    dword_2541039A8 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2541039E0 = 0;
    __cxa_guard_release(&qword_254103428);
  }
  return &qword_254103970;
}

void re::initInfo_CompoundShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0xCA87D356D3A682C0;
  v22[1] = "CompoundShapeData";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_254103430);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103430);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254103630 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<re::FixedArray<re::GeometricObjectData>>::get((re *)v11);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "objects";
      *(_QWORD *)(v12 + 16) = &qword_254103698;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254103638 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "useAABBTree";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254103640 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "bulletData";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x3000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254103648 = v20;
      __cxa_guard_release(&qword_254103430);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254103630;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CompoundShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CompoundShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CompoundShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CompoundShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

void re::IntrospectionInfo<re::FixedArray<re::GeometricObjectData>>::get(re *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  re::IntrospectionBase *v3;
  int v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  _BYTE v17[479];

  v1 = atomic_load((unsigned __int8 *)&qword_254103518);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_254103518);
    if ((_DWORD)a1)
    {
      re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_254103698);
      qword_254103698 = (uint64_t)&off_24ED3BFB0;
      __cxa_guard_release(&qword_254103518);
    }
  }
  if ((byte_25410339A & 1) == 0)
  {
    v2 = (uint64_t *)qword_2541033D8;
    if (qword_2541033D8
      || (v2 = re::allocInfo_GeometricObjectData(a1),
          qword_2541033D8 = (uint64_t)v2,
          re::initInfo_GeometricObjectData((re *)v2, v3),
          (byte_25410339A & 1) == 0))
    {
      byte_25410339A = 1;
      v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103698, 0);
      qword_2541036A8 = 0x1800000004;
      dword_2541036B0 = v4;
      word_2541036B4 = 0;
      *(_QWORD *)&xmmword_2541036B8 = 0;
      *((_QWORD *)&xmmword_2541036B8 + 1) = 0xFFFFFFFFLL;
      qword_2541036C8 = (uint64_t)v2;
      qword_2541036D0 = 0;
      qword_254103698 = (uint64_t)&off_24ED3BFB0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_254103698, (const re::IntrospectionBase *)&v15);
      if ((v16 & 1) != 0)
        v7 = *(const char **)&v17[7];
      else
        v7 = v17;
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      v12 = *((_OWORD *)v2 + 2);
      v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v13);
      if (v8)
      {
        v9 = *v8;
        *((_QWORD *)&v11 + 1) = v9;
      }
      else
      {
        v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x18uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_2541036B8 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void re::internal::defaultConstruct<re::CompoundShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 7;
  *(_QWORD *)a3 = &off_24ED3BDB8;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = 0;
}

_QWORD *re::internal::defaultDestruct<re::CompoundShapeData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = a3[6];
  if (v4)
  {
    v5 = a3 + 7;
    if (a3[7])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[8]);
      *v5 = 0;
      a3[8] = 0;
    }
    a3[6] = 0;
  }
  return re::FixedArray<re::GeometricObjectData>::deinit(a3 + 2);
}

uint64_t re::internal::defaultConstructV2<re::CompoundShapeData>(uint64_t result)
{
  *(_DWORD *)(result + 8) = 7;
  *(_QWORD *)result = &off_24ED3BDB8;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

_QWORD *re::internal::defaultDestructV2<re::CompoundShapeData>(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[6];
  if (v2)
  {
    if (a1[7])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[8]);
      a1[7] = 0;
      a1[8] = 0;
    }
    a1[6] = 0;
  }
  return re::FixedArray<re::GeometricObjectData>::deinit(a1 + 2);
}

uint64_t *re::allocInfo_ConeShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254103440);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103440))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541039E8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541039F8 = 0;
    qword_254103A08 = 0;
    qword_254103A10 = 0xFFFFFFFFLL;
    qword_2541039E8 = (uint64_t)&off_24ED7DAA8;
    qword_254103A18 = (uint64_t)"ConeShapeData";
    dword_254103A20 = 0;
    xmmword_254103A28 = 0u;
    xmmword_254103A38 = 0u;
    xmmword_254103A48 = 0u;
    qword_254103A58 = 0;
    __cxa_guard_release(&qword_254103440);
  }
  return &qword_2541039E8;
}

void re::initInfo_ConeShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0x99D738C6689E5D0;
  v20[1] = "ConeShapeData";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_254103448);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103448);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541035B0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_float((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "height";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0xC00000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2541035B8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_float((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "radius";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x1000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2541035C0 = v18;
      __cxa_guard_release(&qword_254103448);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541035B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ConeShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ConeShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ConeShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ConeShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

void re::internal::defaultConstruct<re::ConeShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 9;
  *(_QWORD *)a3 = &off_24ED3BDF0;
}

uint64_t re::internal::defaultConstructV2<re::ConeShapeData>(uint64_t result)
{
  *(_DWORD *)(result + 8) = 9;
  *(_QWORD *)result = &off_24ED3BDF0;
  return result;
}

uint64_t *re::allocInfo_ConvexPolyhedronShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254103458);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103458))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103A60, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103A70 = 0;
    qword_254103A80 = 0;
    qword_254103A88 = 0xFFFFFFFFLL;
    qword_254103A60 = (uint64_t)&off_24ED7DAA8;
    qword_254103A90 = (uint64_t)"ConvexPolyhedronShapeData";
    dword_254103A98 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254103AD0 = 0;
    __cxa_guard_release(&qword_254103458);
  }
  return &qword_254103A60;
}

void re::initInfo_ConvexPolyhedronShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x55E4C92089E1199CLL;
  v19[1] = "ConvexPolyhedronShapeData";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254103460);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103460);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541035C8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::IntrospectionInfo<re::DynamicArray<re::Vector3<float>>>::get(1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "vertices";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541035D0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "bulletData";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x3800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2541035D8 = v17;
      __cxa_guard_release(&qword_254103460);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541035C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ConvexPolyhedronShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ConvexPolyhedronShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ConvexPolyhedronShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ConvexPolyhedronShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

double re::internal::defaultConstruct<re::ConvexPolyhedronShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a3 + 8) = 5;
  *(_QWORD *)a3 = &off_24ED3BE28;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_DWORD *)(a3 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ConvexPolyhedronShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(a3 + 56);
  v4 = *(_QWORD *)(a3 + 56);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 88))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 88) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 80);
  }
  result = *(_QWORD *)(a3 + 16);
  if (result)
  {
    if (*(_QWORD *)(a3 + 48))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    ++*(_DWORD *)(a3 + 40);
  }
  return result;
}

double re::internal::defaultConstructV2<re::ConvexPolyhedronShapeData>(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 8) = 5;
  *(_QWORD *)a1 = &off_24ED3BE28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ConvexPolyhedronShapeData>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 88))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 88) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (*(_QWORD *)(a1 + 48))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    ++*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t *re::allocInfo_CylinderShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254103470);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103470))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103AD8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103AE8 = 0;
    qword_254103AF8 = 0;
    qword_254103B00 = 0xFFFFFFFFLL;
    qword_254103AD8 = (uint64_t)&off_24ED7DAA8;
    qword_254103B08 = (uint64_t)"CylinderShapeData";
    dword_254103B10 = 0;
    xmmword_254103B18 = 0u;
    xmmword_254103B28 = 0u;
    xmmword_254103B38 = 0u;
    qword_254103B48 = 0;
    __cxa_guard_release(&qword_254103470);
  }
  return &qword_254103AD8;
}

void re::initInfo_CylinderShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0x258B756EC289C72ALL;
  v20[1] = "CylinderShapeData";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_254103478);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103478);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541035E0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_float((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "height";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0xC00000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2541035E8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_float((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "radius";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x1000000002;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2541035F0 = v18;
      __cxa_guard_release(&qword_254103478);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541035E0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CylinderShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CylinderShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CylinderShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CylinderShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

void re::internal::defaultConstruct<re::CylinderShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 8;
  *(_QWORD *)a3 = &off_24ED3BE60;
}

uint64_t re::internal::defaultConstructV2<re::CylinderShapeData>(uint64_t result)
{
  *(_DWORD *)(result + 8) = 8;
  *(_QWORD *)result = &off_24ED3BE60;
  return result;
}

uint64_t *re::allocInfo_EmptyShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254103488);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103488))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103B50, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103B60 = 0;
    qword_254103B70 = 0;
    qword_254103B78 = 0xFFFFFFFFLL;
    qword_254103B50 = (uint64_t)&off_24ED7DAA8;
    qword_254103B80 = (uint64_t)"EmptyShapeData";
    dword_254103B88 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254103BC0 = 0;
    __cxa_guard_release(&qword_254103488);
  }
  return &qword_254103B50;
}

void re::initInfo_EmptyShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x4B9147A9A0AC107CLL;
  v12[1] = "EmptyShapeData";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254103498);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103498);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254103490 = v10;
      __cxa_guard_release(&qword_254103498);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254103490;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::EmptyShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::EmptyShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::EmptyShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::EmptyShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::internal::defaultConstruct<re::EmptyShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 1;
  *(_QWORD *)a3 = &off_24ED3BE98;
}

uint64_t re::internal::defaultConstructV2<re::EmptyShapeData>(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_24ED3BE98;
  return result;
}

uint64_t *re::allocInfo_PlaneShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541034A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541034A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103BC8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103BD8 = 0;
    qword_254103BE8 = 0;
    qword_254103BF0 = 0xFFFFFFFFLL;
    qword_254103BC8 = (uint64_t)&off_24ED7DAA8;
    qword_254103BF8 = (uint64_t)"PlaneShapeData";
    dword_254103C00 = 0;
    xmmword_254103C08 = 0u;
    xmmword_254103C18 = 0u;
    xmmword_254103C28 = 0u;
    qword_254103C38 = 0;
    __cxa_guard_release(&qword_2541034A8);
  }
  return &qword_254103BC8;
}

void re::initInfo_PlaneShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x49EDF1A51FB1E81ELL;
  v19[1] = "PlaneShapeData";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_2541034B0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541034B0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541035F8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "normal";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254103600 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "distanceFromOrigin";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x2000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254103608 = v17;
      __cxa_guard_release(&qword_2541034B0);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541035F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::PlaneShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::PlaneShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::PlaneShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::PlaneShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

double re::internal::defaultConstruct<re::PlaneShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a3 + 8) = 6;
  *(_QWORD *)a3 = &off_24ED3BED0;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

double re::internal::defaultConstructV2<re::PlaneShapeData>(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 8) = 6;
  *(_QWORD *)a1 = &off_24ED3BED0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t *re::allocInfo_RectangleShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541034C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541034C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103C40, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103C50 = 0;
    qword_254103C60 = 0;
    qword_254103C68 = 0xFFFFFFFFLL;
    qword_254103C40 = (uint64_t)&off_24ED7DAA8;
    qword_254103C70 = (uint64_t)"RectangleShapeData";
    dword_254103C78 = 0;
    xmmword_254103C80 = 0u;
    xmmword_254103C90 = 0u;
    xmmword_254103CA0 = 0u;
    qword_254103CB0 = 0;
    __cxa_guard_release(&qword_2541034C0);
  }
  return &qword_254103C40;
}

void re::initInfo_RectangleShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xB21153305B1BACB8;
  v15[1] = "RectangleShapeData";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2541034C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541034C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254103568 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "extent";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254103570 = v13;
      __cxa_guard_release(&qword_2541034C8);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254103568;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RectangleShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RectangleShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RectangleShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RectangleShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void re::internal::defaultConstruct<re::RectangleShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 11;
  *(_QWORD *)a3 = &off_24ED3BF08;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::RectangleShapeData>(uint64_t result)
{
  *(_DWORD *)(result + 8) = 11;
  *(_QWORD *)result = &off_24ED3BF08;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t *re::allocInfo_SphereShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541034D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541034D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103CB8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103CC8 = 0;
    qword_254103CD8 = 0;
    qword_254103CE0 = 0xFFFFFFFFLL;
    qword_254103CB8 = (uint64_t)&off_24ED7DAA8;
    qword_254103CE8 = (uint64_t)"SphereShapeData";
    dword_254103CF0 = 0;
    xmmword_254103CF8 = 0u;
    xmmword_254103D08 = 0u;
    xmmword_254103D18 = 0u;
    qword_254103D28 = 0;
    __cxa_guard_release(&qword_2541034D8);
  }
  return &qword_254103CB8;
}

void re::initInfo_SphereShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0x51F1FDBF4C05C2FCLL;
  v16[1] = "SphereShapeData";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2541034E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541034E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254103578 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_float((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "radius";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0xC00000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254103580 = v14;
      __cxa_guard_release(&qword_2541034E0);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254103578;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SphereShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SphereShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SphereShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SphereShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

void re::internal::defaultConstruct<re::SphereShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 2;
  *(_QWORD *)a3 = &off_24ED3BF40;
}

uint64_t re::internal::defaultConstructV2<re::SphereShapeData>(uint64_t result)
{
  *(_DWORD *)(result + 8) = 2;
  *(_QWORD *)result = &off_24ED3BF40;
  return result;
}

uint64_t *re::allocInfo_TriangleMeshShapeData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541034F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541034F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103D30, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103D40 = 0;
    qword_254103D50 = 0;
    qword_254103D58 = 0xFFFFFFFFLL;
    qword_254103D30 = (uint64_t)&off_24ED7DAA8;
    qword_254103D60 = (uint64_t)"TriangleMeshShapeData";
    dword_254103D68 = 0;
    xmmword_254103D70 = 0u;
    xmmword_254103D80 = 0u;
    xmmword_254103D90 = 0u;
    qword_254103DA0 = 0;
    __cxa_guard_release(&qword_2541034F0);
  }
  return &qword_254103D30;
}

void re::initInfo_TriangleMeshShapeData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0xF87ECA8D15E0C46CLL;
  v16[1] = "TriangleMeshShapeData";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2541034F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541034F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::CollisionShapeData>;
      if (!re::internal::introspectionInfoStorage<re::CollisionShapeData>)
      {
        v8 = re::allocInfo_CollisionShapeData((re *)v6);
        re::internal::introspectionInfoStorage<re::CollisionShapeData> = (uint64_t)v8;
        re::initInfo_CollisionShapeData((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "CollisionShapeData";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254103588 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_AssetHandle((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "mesh";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254103590 = v14;
      __cxa_guard_release(&qword_2541034F8);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254103588;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TriangleMeshShapeData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TriangleMeshShapeData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TriangleMeshShapeData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TriangleMeshShapeData>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

void re::internal::defaultConstruct<re::TriangleMeshShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = 12;
  *(_QWORD *)a3 = &off_24ED3BF78;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

void re::internal::defaultDestruct<re::TriangleMeshShapeData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 16));
}

uint64_t re::internal::defaultConstructV2<re::TriangleMeshShapeData>(uint64_t result)
{
  *(_DWORD *)(result + 8) = 12;
  *(_QWORD *)result = &off_24ED3BF78;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::TriangleMeshShapeData>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 16));
}

uint64_t *re::allocInfo_IndexedTriangleMeshData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254103508);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254103508))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103DA8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254103DB8 = 0;
    qword_254103DC8 = 0;
    qword_254103DD0 = 0xFFFFFFFFLL;
    qword_254103DA8 = (uint64_t)&off_24ED7DAA8;
    qword_254103DD8 = (uint64_t)"IndexedTriangleMeshData";
    dword_254103DE0 = 0;
    xmmword_254103DE8 = 0u;
    xmmword_254103DF8 = 0u;
    xmmword_254103E08 = 0u;
    qword_254103E18 = 0;
    __cxa_guard_release(&qword_254103508);
  }
  return &qword_254103DA8;
}

void re::initInfo_IndexedTriangleMeshData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0xDBF1A6A2E64C08A0;
  v21[1] = "IndexedTriangleMeshData";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254103510);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254103510);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::FixedArray<float>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "positions";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254103650 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::FixedArray<unsigned short>>::get((uint64_t)v10, v11);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "indices";
      *(_QWORD *)(v12 + 16) = &qword_2541036D8;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254103658 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::FixedArray<unsigned short>>::get((uint64_t)v13, v14);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "materialIndices";
      *(_QWORD *)(v15 + 16) = &qword_2541036D8;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x3000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254103660 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "has32BitIndices";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x4800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254103668 = v19;
      __cxa_guard_release(&qword_254103510);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254103650;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::IndexedTriangleMeshData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::IndexedTriangleMeshData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::IndexedTriangleMeshData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::IndexedTriangleMeshData>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

void re::IntrospectionInfo<re::FixedArray<unsigned short>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_254103520);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254103520))
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_2541036D8);
    qword_2541036D8 = (uint64_t)&off_24ED3C048;
    __cxa_guard_release(&qword_254103520);
  }
  if ((byte_25410339B & 1) == 0)
  {
    v3 = re::introspect_uint16_t((re *)1, a2);
    if ((byte_25410339B & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_25410339B = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541036D8, 0);
      qword_2541036E8 = 0x1800000004;
      dword_2541036F0 = v5;
      word_2541036F4 = 0;
      *(_QWORD *)&xmmword_2541036F8 = 0;
      *((_QWORD *)&xmmword_2541036F8 + 1) = 0xFFFFFFFFLL;
      qword_254103708 = v4;
      qword_254103710 = 0;
      qword_2541036D8 = (uint64_t)&off_24ED3C048;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541036D8, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginListType((uint64_t)&v16, v14, 1, 0x18uLL, 8uLL, &v15);
        re::TypeBuilder::setConstructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v16, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v16, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v16, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_2541036F8 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

double re::internal::defaultConstruct<re::IndexedTriangleMeshData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::IndexedTriangleMeshData>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v4 = a3[6];
  if (v4)
  {
    v5 = a3 + 7;
    if (a3[7])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3[8]);
      *v5 = 0;
      a3[8] = 0;
    }
    a3[6] = 0;
  }
  v6 = a3[3];
  if (v6)
  {
    if (a3[4])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a3[5]);
      a3[4] = 0;
      a3[5] = 0;
    }
    a3[3] = 0;
  }
  result = *a3;
  if (*a3)
  {
    if (a3[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a3[2]);
      a3[1] = 0;
      a3[2] = 0;
    }
    *a3 = 0;
  }
  return result;
}

double re::internal::defaultConstructV2<re::IndexedTriangleMeshData>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::IndexedTriangleMeshData>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1[6];
  if (v2)
  {
    if (a1[7])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[8]);
      a1[7] = 0;
      a1[8] = 0;
    }
    a1[6] = 0;
  }
  v3 = a1[3];
  if (v3)
  {
    if (a1[4])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[5]);
      a1[4] = 0;
      a1[5] = 0;
    }
    a1[3] = 0;
  }
  result = *a1;
  if (*a1)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

uint64_t re::introspect_IndexedTriangleMeshData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"IndexedTriangleMeshData", (uint64_t (*)(re::internal *))re::allocInfo_IndexedTriangleMeshData, (re::IntrospectionBase *(*)(void))re::initInfo_IndexedTriangleMeshData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::IndexedTriangleMeshData>, this);
}

uint64_t re::AssetHandle::loadedAsset<re::CollisionShapeAsset>(re::CollisionShapeAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::CollisionShapeAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

void re::GeometricObjectBaseData::~GeometricObjectBaseData(re::GeometricObjectBaseData *this)
{
  *(_QWORD *)this = &off_24ED3BCB0;
  re::AssetHandle::~AssetHandle((re::GeometricObjectBaseData *)((char *)this + 48));
}

{
  *(_QWORD *)this = &off_24ED3BCB0;
  re::AssetHandle::~AssetHandle((re::GeometricObjectBaseData *)((char *)this + 48));
  JUMPOUT(0x2276933B8);
}

void re::GeometricObjectData::~GeometricObjectData(re::GeometricObjectData *this)
{
  *(_QWORD *)this = &off_24ED3BCB0;
  re::AssetHandle::~AssetHandle((re::GeometricObjectData *)((char *)this + 48));
}

{
  *(_QWORD *)this = &off_24ED3BCB0;
  re::AssetHandle::~AssetHandle((re::GeometricObjectData *)((char *)this + 48));
  JUMPOUT(0x2276933B8);
}

void re::BoxShapeData::~BoxShapeData(re::BoxShapeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::CollisionShapeData::~CollisionShapeData(re::CollisionShapeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::CapsuleShapeData::~CapsuleShapeData(re::CapsuleShapeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::CompoundShapeData::~CompoundShapeData(re::CompoundShapeData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 8));
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  re::FixedArray<re::GeometricObjectData>::deinit((_QWORD *)this + 2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 8));
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  re::FixedArray<re::GeometricObjectData>::deinit((_QWORD *)this + 2);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FixedArray<re::GeometricObjectData>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  re::AssetHandle *v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 80 * v2;
      v5 = (re::AssetHandle *)(result[2] + 48);
      do
      {
        *((_QWORD *)v5 - 6) = &off_24ED3BCB0;
        re::AssetHandle::~AssetHandle(v5);
        v5 = (re::AssetHandle *)(v6 + 80);
        v4 -= 80;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::ConeShapeData::~ConeShapeData(re::ConeShapeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::ConvexPolyhedronShapeData::~ConvexPolyhedronShapeData(re::ConvexPolyhedronShapeData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 56);
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    if (*((_QWORD *)this + 11))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 11) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 20);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    if (*((_QWORD *)this + 6))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = 0;
    ++*((_DWORD *)this + 10);
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 56);
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    if (*((_QWORD *)this + 11))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 11) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 20);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    if (*((_QWORD *)this + 6))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = 0;
    ++*((_DWORD *)this + 10);
  }
  JUMPOUT(0x2276933B8);
}

void re::CylinderShapeData::~CylinderShapeData(re::CylinderShapeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::EmptyShapeData::~EmptyShapeData(re::EmptyShapeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::PlaneShapeData::~PlaneShapeData(re::PlaneShapeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::RectangleShapeData::~RectangleShapeData(re::RectangleShapeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::SphereShapeData::~SphereShapeData(re::SphereShapeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::TriangleMeshShapeData::~TriangleMeshShapeData(re::TriangleMeshShapeData *this)
{
  re::AssetHandle::~AssetHandle((re::TriangleMeshShapeData *)((char *)this + 16));
}

{
  re::AssetHandle::~AssetHandle((re::TriangleMeshShapeData *)((char *)this + 16));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FixedArray<re::Pose<float>>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32 * a3, 16);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result = 0;
      result[1] = 0;
      result[2] = 0;
      result[3] = 0x3F80000000000000;
      result += 4;
      --v6;
    }
    while (v6);
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x3F80000000000000;
  return result;
}

_QWORD *re::IntrospectionFixedArray<re::GeometricObjectData>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::GeometricObjectData>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<re::GeometricObjectData>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

_QWORD *re::IntrospectionFixedArray<re::GeometricObjectData>::destroy(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::GeometricObjectData>::deinit(a2);
}

void *re::IntrospectionFixedArray<re::GeometricObjectData>::init(uint64_t a1, _QWORD *a2, re *a3, int a4, unint64_t a5)
{
  void *result;
  uint64_t v11;
  unint64_t v12;

  result = re::FixedArray<re::GeometricObjectData>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (a2[1] <= v12)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v11));
      ++v12;
      v11 += 80;
    }
    while (a5 != v12);
  }
  return result;
}

_QWORD *re::IntrospectionFixedArray<re::GeometricObjectData>::deinit(uint64_t a1, _QWORD *a2)
{
  return re::FixedArray<re::GeometricObjectData>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::GeometricObjectData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::GeometricObjectData>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::GeometricObjectData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 80 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 80 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(_QWORD *a1)
{
  re::FixedArray<re::GeometricObjectData>::deinit(a1);
  return re::FixedArray<re::GeometricObjectData>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(_QWORD *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  re::FixedArray<re::GeometricObjectData>::deinit(a1);
  v8 = (_anonymous_namespace_ *)re::FixedArray<re::GeometricObjectData>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = a1[1];
    if (v9)
    {
      v10 = (char *)a1[2];
      v11 = 80 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 80;
        v11 -= 80;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 80 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::GeometricObjectData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionFixedArray<unsigned short>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<unsigned short>::~IntrospectionFixedArray(_QWORD *a1)
{
  *a1 = &off_24ED20258;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionFixedArray<unsigned short>::construct(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t re::IntrospectionFixedArray<unsigned short>::destroy(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

void re::IntrospectionFixedArray<unsigned short>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;

  re::FixedArray<unsigned short>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 2;
    }
    while (a5 != v11);
  }
}

uint64_t re::IntrospectionFixedArray<unsigned short>::deinit(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD *v4;

  result = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    if (a2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2[2]);
      *v4 = 0;
      v4[1] = 0;
    }
    *a2 = 0;
  }
  return result;
}

uint64_t re::IntrospectionFixedArray<unsigned short>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<unsigned short>::isInitialized(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<unsigned short>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 2 * a3;
}

{
  if (*(_QWORD *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16) + 2 * a3;
}

_QWORD *re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  *result = a3;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, uint64_t a4)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *a1;
  if (v8)
  {
    if (a1[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  re::FixedArray<unsigned short>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = a1[1];
    if (v10)
    {
      v11 = (char *)a1[2];
      v12 = 2 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 2;
        v12 -= 2;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 2 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v1 < (int)v3)
    a1[2] = ++v1;
  if (v3 <= v1)
    return 0;
  else
    return *(_QWORD *)(v2 + 16) + 2 * v1;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t *re::allocInfo_DrawableQueueService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_102);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_102))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254103FE0, 0);
    *(uint64_t *)((char *)&qword_254103FF0 + 6) = 0;
    qword_254103FF0 = 0;
    qword_254104000 = 0;
    qword_254104008 = 0xFFFFFFFFLL;
    qword_254103FE0 = (uint64_t)&off_24ED7DAA8;
    qword_254104010 = (uint64_t)"DrawableQueueService";
    dword_254104018 = 0;
    unk_254104020 = 0u;
    unk_254104030 = 0u;
    unk_254104040 = 0u;
    qword_254104050 = 0;
    __cxa_guard_release(&_MergedGlobals_102);
  }
  return &qword_254103FE0;
}

void re::initInfo_DrawableQueueService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x6C98752D9BDC5884;
  v5[1] = "DrawableQueueService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_DrawableQueueService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_DrawableQueueService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DrawableQueueService", (uint64_t (*)(re::internal *))re::allocInfo_DrawableQueueService, (re::IntrospectionBase *(*)(void))re::initInfo_DrawableQueueService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DrawableQueueService>, this);
}

uint64_t *re::SkeletalPoseDefinitionAsset::assetType(re::SkeletalPoseDefinitionAsset *this)
{
  unsigned __int8 v1;

  {
    re::SkeletalPoseDefinitionAsset::assetType(void)::type = (uint64_t)"SkeletalPose";
    qword_255827888 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::SkeletalPoseDefinitionAsset::assetType(void)::type);
  }
  return &re::SkeletalPoseDefinitionAsset::assetType(void)::type;
}

_QWORD *re::SkeletalPoseDefinitionAsset::init(re::SkeletalPoseDefinitionAsset *this, re::Allocator *a2)
{
  uint64_t *v2;
  char *v4;
  _QWORD *result;

  v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *((_QWORD *)this + 15) = v2;
  re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)this + 15, 0);
  ++*((_DWORD *)this + 36);
  *((_QWORD *)this + 20) = v2;
  re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)this + 20, 0);
  *((_QWORD *)this + 25) = v2;
  v4 = (char *)this + 200;
  ++*((_DWORD *)v4 - 4);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  *((_QWORD *)v4 + 10) = v2;
  result = re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((_QWORD *)v4 + 10, 0);
  ++*((_DWORD *)v4 + 26);
  return result;
}

void re::SkeletalPoseDefinitionAsset::init(re::SkeletalPoseDefinitionAsset *this, const re::MeshAsset *a2, re::Allocator *a3)
{
  const re::MeshAsset *v3;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const StringID *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _anonymous_namespace_ *v30;
  uint64_t v31;
  re::MeshAsset *v32;
  uint64_t v33[3];
  StringID v34;
  uint64_t v35;
  _BYTE v36[18];
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  unint64_t v40;
  uint8_t buf[16];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a2 + 55))
  {
    v6 = *re::assetsLogObjects(this);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Mesh Asset doesn't have a mesh manager.", buf, 2u);
    }
    return;
  }
  v3 = a2;
  re::SkeletalPoseDefinitionAsset::init(this, a3);
  if (!*((_QWORD *)v3 + 55))
    return;
  v5 = *((_QWORD *)v3 + 117);
  if (*((_QWORD *)this + 16) >= v5)
  {
    if (!v5)
      goto LABEL_13;
  }
  else
  {
    re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)this + 15, *((_QWORD *)v3 + 117));
  }
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = re::MeshAsset::skeletonAtIndex(v3, v8);
    re::StringID::StringID((re::StringID *)&v34, (const StringID *)v9);
    v10 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)buf = *(_QWORD *)(v9 + 32);
    *(_QWORD *)&buf[8] = v10;
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)v36 = *(_QWORD *)(v9 + 80);
    *(_QWORD *)&v36[8] = v11;
    if (v8 >= *((_QWORD *)v3 + 28))
      memset(v33, 0, sizeof(v33));
    else
      re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)(*((_QWORD *)v3 + 30) + v7));
    re::SkeletalPoseDefinitionAsset::addDefaultSkeletalPose(this, &v34, (uint64_t)buf, v36, (uint64_t)&re::SkeletalPoseDefinitionAsset::init(re::MeshAsset const&,re::Allocator *)::emptyJointNameMap, v33);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
    re::StringID::destroyString((re::StringID *)&v34);
    ++v8;
    v7 += 24;
  }
  while (v5 != v8);
LABEL_13:
  v30 = (re::SkeletalPoseDefinitionAsset *)((char *)this + 280);
  v12 = *((unsigned int *)v3 + 178);
  if (*((_QWORD *)this + 36) < v12)
    re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(v30, v12);
  if (*((_BYTE *)v3 + 952))
    v13 = (uint64_t *)((char *)v3 + 416);
  else
    v13 = (uint64_t *)((char *)v3 + 24);
  v28 = *v13;
  if (*v13)
  {
    v14 = 0;
    v27 = *((_QWORD *)v3 + 55) + 8;
    v32 = v3;
    do
    {
      v15 = *((_QWORD *)v3 + 52);
      if (v15 <= v14)
        goto LABEL_35;
      v29 = v14;
      v16 = re::DataArray<re::MeshModel>::get(v27, *(_QWORD *)(*((_QWORD *)v3 + 54) + 8 * v14));
      v17 = *(_QWORD *)(v16 + 176);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          v19 = v16;
          v14 = 0;
          v20 = 504;
          v15 = 4;
          v31 = *(_QWORD *)(v17 + 8);
          do
          {
            v21 = *(_QWORD *)(v19 + 176);
            if (v21 && *(_QWORD *)(v21 + 8) > v14)
              v22 = *(unsigned int *)(*(_QWORD *)(v21 + 16) + v15);
            else
              v22 = 0xFFFFFFFFLL;
            if (v5 > v22)
            {
              v23 = v5;
              v24 = *(_QWORD *)(v19 + 56);
              if (v24 <= v14)
              {
                v35 = 0;
                v44 = 0u;
                v45 = 0u;
                v42 = 0u;
                v43 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v36 = 136315906;
                *(_QWORD *)&v36[4] = "operator[]";
                *(_WORD *)&v36[12] = 1024;
                *(_DWORD *)&v36[14] = 476;
                v37 = 2048;
                v38 = v14;
                v39 = 2048;
                v40 = v24;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_35:
                v35 = 0;
                v44 = 0u;
                v45 = 0u;
                v42 = 0u;
                v43 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v36 = 136315906;
                *(_QWORD *)&v36[4] = "operator[]";
                *(_WORD *)&v36[12] = 1024;
                *(_DWORD *)&v36[14] = 797;
                v37 = 2048;
                v38 = v14;
                v39 = 2048;
                v40 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              v25 = *(_QWORD *)(v19 + 64);
              v26 = (const StringID *)re::MeshAsset::skeletonAtIndex(v32, v22);
              buf[0] = 2;
              re::StringID::StringID((re::StringID *)&buf[8], (const StringID *)v19);
              re::StringID::StringID((re::StringID *)((char *)&v42 + 8), (const StringID *)(v25 + v20));
              re::StringID::StringID((re::StringID *)((char *)&v43 + 8), v26);
              BYTE8(v44) = 0;
              HIDWORD(v44) = v22;
              re::DynamicArray<re::SkeletalPoseMeshMap>::add(v30, (uint64_t)buf);
              re::StringID::destroyString((re::StringID *)((char *)&v43 + 8));
              re::StringID::destroyString((re::StringID *)((char *)&v42 + 8));
              re::StringID::destroyString((re::StringID *)&buf[8]);
              v18 = v31;
              v5 = v23;
            }
            ++v14;
            v15 += 72;
            v20 += 560;
          }
          while (v18 != v14);
        }
      }
      v14 = v29 + 1;
      v3 = v32;
    }
    while (v29 + 1 != v28);
  }
}

uint64_t re::SkeletalPoseDefinitionAsset::addDefaultSkeletalPose(_QWORD *a1, StringID *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t *a6)
{
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v11 = a1 + 15;
  v40 = 0uLL;
  *(_QWORD *)&v41 = 0;
  v12 = *(_QWORD *)(a3 + 8);
  if (v12)
  {
    re::FixedArray<re::StringID>::copy((unint64_t *)&v40, (uint64_t **)a3);
  }
  re::DynamicArray<re::FixedArray<re::StringID>>::add(v11, &v40);
  re::FixedArray<re::StringID>::deinit(&v40);
  v39 = a1;
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 5), a2);
  if (a4[1])
  {
    v13 = a1[27];
    v14 = a1[17];
    if (v13 < v14)
    {
      re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize(a1 + 25, v14);
      v14 = a1[17];
      v13 = a1[27];
    }
    v15 = v14 - 1;
    if (v13 <= v14 - 1)
      goto LABEL_28;
    v16 = a1[29];
    v17 = (_QWORD *)(v16 + 24 * v15);
    if (*v17)
    {
      v18 = v16 + 24 * v15;
      v20 = *(_QWORD *)(v18 + 8);
      v19 = (_QWORD *)(v18 + 8);
      if (v20)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v17 + 40))(*v17, *(_QWORD *)(v16 + 24 * v15 + 16));
        *v19 = 0;
        v19[1] = 0;
      }
      *v17 = 0;
    }
    re::FixedArray<re::GenericSRT<float>>::init<>((_QWORD *)(v16 + 24 * v15), v39[25], *(_QWORD *)(a3 + 8));
    if (*(_DWORD *)(a5 + 28))
    {
      v22 = *(_QWORD *)(a3 + 8);
      if (v22)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = v16 + 24 * v15;
        v27 = (unint64_t *)(v26 + 8);
        v28 = (_QWORD *)(v26 + 16);
        while (1)
        {
          v29 = *(_QWORD *)(a3 + 8);
          if (v29 <= v25)
            break;
          v30 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a5, (_QWORD *)(*(_QWORD *)a3 + v23));
          if (v30)
          {
            v31 = *v30;
            v32 = a4[1];
            if (v32 <= v31)
              goto LABEL_26;
            if (*v27 <= v25)
              goto LABEL_27;
            v33 = (__int128 *)(*a4 + 48 * v31);
            v34 = (_OWORD *)(*v28 + v24);
            v35 = *v33;
            v36 = v33[2];
            v34[1] = v33[1];
            v34[2] = v36;
            *v34 = v35;
          }
          ++v25;
          v24 += 48;
          v23 += 16;
          if (v22 == v25)
            goto LABEL_22;
        }
        re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v25, v29);
        _os_crash();
        __break(1u);
LABEL_26:
        re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v32);
        _os_crash();
        __break(1u);
LABEL_27:
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v40 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_28:
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v40 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    else
    {
      re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v16 + 24 * v15), (uint64_t)a4);
    }
  }
LABEL_22:
  if (a6[1])
  {
    re::DynamicArray<re::AssetHandle>::resize((uint64_t)v39, v39[17]);
    re::AssetHandle::operator=((uint64_t *)(v39[4] + 24 * v39[2] - 24), a6);
  }
  return v39[17] - 1;
}

_QWORD *re::DynamicArray<re::SkeletalPoseMeshMap>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::SkeletalPoseMeshMap>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + (v4 << 6);
  *(_BYTE *)v5 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = &str_110;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = &str_110;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(v5 + 40) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = &str_110;
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 56);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::SkeletalPoseDefinitionAsset::deinit(re::SkeletalPoseDefinitionAsset *this)
{
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)this + 120);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)this + 160);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 200);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 240);
  return re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)this + 280);
}

void re::SkeletalPoseDefinitionAsset::constructSkeletalPoses(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  re *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t *v43;
  __int16 v44;
  uint64_t *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v9 = a1[17];
  re::DynamicArray<re::SkeletalPose>::resize(a3, v9);
  v33 = v9;
  if (v9)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8;
    while (1)
    {
      v14 = (uint64_t *)a1[17];
      if (v14 <= v12)
        break;
      v4 = *(uint64_t **)(a3 + 16);
      if (v4 <= v12)
        goto LABEL_37;
      v5 = *(uint64_t **)(a1[19] + v13);
      v4 = *(uint64_t **)(*(_QWORD *)(a3 + 32) + v11 + 24);
      if ((unint64_t)v12 >= a1[2])
      {
        v6 = 0;
      }
      else
      {
        v10 = (re *)re::AssetHandle::loadedAsset<re::SkeletonAsset>((re::SkeletonAsset *)(a1[4] + v13 - 8));
        if (v10)
          v6 = (uint64_t *)((char *)v10 + 88);
        else
          v6 = 0;
        v14 = (uint64_t *)a1[17];
      }
      if (v14 <= v12)
        goto LABEL_38;
      v15 = a1[19];
      v16 = re::globalAllocators(v10);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 256, 8);
      v18 = *(_QWORD *)(v15 + v13);
      *(_QWORD *)&v46 = *(_QWORD *)(v15 + v13 + 8);
      *((_QWORD *)&v46 + 1) = v18;
      v36 = v17;
      v19 = *(uint64_t **)(a3 + 16);
      if (v19 <= v12)
        goto LABEL_39;
      re::SkeletalPose::reset((uint64_t *)(*(_QWORD *)(a3 + 32) + v11), &v36);
      if (v6)
      {
        re::StringID::StringID((re::StringID *)&v34, (const StringID *)v6);
      }
      else
      {
        v34 = 0x12712E227DDD53ALL;
        v35 = "/noSkeleton";
      }
      v6 = *(uint64_t **)(a3 + 16);
      if (v6 <= v12)
        goto LABEL_40;
      re::StringID::operator=((unint64_t *)(*(_QWORD *)(a3 + 32) + v11), &v34);
      re::StringID::destroyString((re::StringID *)&v34);
      if (v5 != v4 && (unint64_t)v12 < a1[27])
      {
        v20 = (uint64_t **)(a1[29] + v13);
        v22 = *v20;
        v21 = (uint64_t)(v20 - 1);
        if (v5 == v22)
        {
          v4 = *(uint64_t **)(a3 + 16);
          if (v4 <= v12)
            goto LABEL_43;
          v10 = (re *)re::FixedArray<re::GenericSRT<float>>::operator=((_QWORD *)(*(_QWORD *)(a3 + 32) + v11 + 16), v21);
        }
      }
      if (v17)

      v12 = (uint64_t *)((char *)v12 + 1);
      v13 += 24;
      v11 += 88;
      if ((uint64_t *)v33 == v12)
        goto LABEL_25;
    }
    v34 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v38 = 136315906;
    v39 = "operator[]";
    v40 = 1024;
    v41 = 797;
    v42 = 2048;
    v43 = v12;
    v44 = 2048;
    v45 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_37:
    v34 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v38 = 136315906;
    v39 = "operator[]";
    v40 = 1024;
    v41 = 789;
    v42 = 2048;
    v43 = v12;
    v44 = 2048;
    v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_38:
    v34 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    v19 = (uint64_t *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v38 = 136315906;
    v39 = "operator[]";
    v40 = 1024;
    v41 = 797;
    v42 = 2048;
    v43 = v12;
    v44 = 2048;
    v45 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_39:
    v34 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v38 = 136315906;
    v39 = "operator[]";
    v40 = 1024;
    v41 = 789;
    v42 = 2048;
    v43 = v12;
    v44 = 2048;
    v45 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_40:
    v37 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v38 = 136315906;
    v39 = "operator[]";
    v40 = 1024;
    v41 = 789;
    v42 = 2048;
    v43 = v12;
    v44 = 2048;
    v45 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_41:
    v34 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v38 = 136315906;
    v39 = "operator[]";
    v40 = 1024;
    v41 = 797;
    v42 = 2048;
    v43 = v5;
    v44 = 2048;
    v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    v34 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v38 = 136315906;
    v39 = "operator[]";
    v40 = 1024;
    v41 = 789;
    v42 = 2048;
    v43 = v5;
    v44 = 2048;
    v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    v34 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v38 = 136315906;
    v39 = "operator[]";
    v40 = 1024;
    v41 = 789;
    v42 = 2048;
    v43 = v12;
    v44 = 2048;
    v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    v37 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v38 = 136315906;
    v39 = "operator[]";
    v40 = 1024;
    v41 = 789;
    v42 = 2048;
    v43 = v5;
    v44 = 2048;
    v45 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_25:
  v23 = a1[22];
  v12 = a4;
  re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(a4, v23);
  if (v23)
  {
    v24 = 0;
    v25 = 0;
    v5 = 0;
    while (1)
    {
      v4 = (uint64_t *)a1[22];
      if (v4 <= v5)
        goto LABEL_41;
      v4 = (uint64_t *)a4[2];
      if (v4 <= v5)
        goto LABEL_42;
      v26 = *(_QWORD *)(a1[24] + v24 + 8);
      v27 = a4[4] + v25;
      v28 = *(_QWORD *)(v27 + 16);
      re::DynamicArray<re::Matrix4x4<float>>::resize(v27, v26);
      if (v26 != v28 && (unint64_t)v5 < a1[32])
      {
        v29 = a1[34] + v24;
        if (v26 == *(_QWORD *)(v29 + 8))
        {
          v34 = 0;
          v35 = 0;
          v31 = v29 + 8;
          v30 = *(const char **)(v29 + 8);
          v34 = *(_QWORD *)(v31 + 8);
          v35 = v30;
          v4 = (uint64_t *)a4[2];
          if (v4 <= v5)
            goto LABEL_44;
          re::DynamicArray<re::Matrix4x4<float>>::operator=((_anonymous_namespace_ *)(a4[4] + v25), (uint64_t)&v34);
        }
      }
      v5 = (uint64_t *)((char *)v5 + 1);
      v25 += 40;
      v24 += 24;
      if ((uint64_t *)v23 == v5)
        return;
    }
  }
}

void re::DynamicArray<re::SkeletalPose>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 88 * a2;
    v9 = a2;
    do
    {
      re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 88;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::SkeletalPose>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 88 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_DWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_QWORD *)(v7 + 80) = 0;
        v6 += 88;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 40 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = (_QWORD *)(v10 + v8);
      result = *(_QWORD **)(v10 + v8);
      if (result)
      {
        if (v11[4])
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        v11[4] = 0;
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
        ++*(_DWORD *)(v10 + v8 + 24);
        v4 = v3[2];
      }
      ++v9;
      v8 += 40;
    }
    while (v9 < v4);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 40 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::Matrix4x4<float>>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::Matrix4x4<float>>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)this, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::Matrix4x4<float>>::copy(this, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return this;
}

re *re::SkeletalPoseDefinitionAssetLoader::unloadAsset(re::SkeletalPoseDefinitionAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::SkeletalPoseDefinitionAsset>((re *)"unloadAsset", 208, a2);
}

re *re::internal::destroyPersistent<re::SkeletalPoseDefinitionAsset>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 280);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 240);
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 200);
    re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3 + 160);
    re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3 + 120);
    re::DynamicArray<re::StringID>::deinit(a3 + 80);
    re::DynamicArray<re::StringID>::deinit(a3 + 40);
    re::DynamicArray<re::AssetHandle>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::SkeletalPoseDefinitionAssetLoader::isSupportedSourceExtension(re::SkeletalPoseDefinitionAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reskeletalposes") == 0;
}

uint64_t re::SkeletalPoseDefinitionAssetLoader::introspectionType(re::SkeletalPoseDefinitionAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541040A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541040A8))
  {
    qword_2541040A0 = re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_SkeletalPoseDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_SkeletalPoseDefinitionAsset, (void (*)(re::IntrospectionBase *))&unk_254104098, 0);
    __cxa_guard_release(&qword_2541040A8);
  }
  return qword_2541040A0;
}

void re::introspect_SkeletalPoseType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  StringID v34;
  _QWORD v35[2];
  _QWORD v36[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254104060);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254104060);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "LocalSpaceSRTs";
      qword_2541040C8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 1;
      *(_QWORD *)(v30 + 16) = "ModelSpaceMatrix4x4s";
      qword_2541040D0 = v30;
      __cxa_guard_release(&qword_254104060);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254104068);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254104068))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541041E8, "SkeletalPoseType", 1, 1, 1, 1);
    qword_2541041E8 = (uint64_t)&off_24ED7D9E8;
    qword_254104228 = (uint64_t)&re::introspect_SkeletalPoseType(BOOL)::enumTable;
    dword_2541041F8 = 9;
    __cxa_guard_release(&qword_254104068);
  }
  if ((_MergedGlobals_103 & 1) == 0)
  {
    _MergedGlobals_103 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541041E8, a2);
    v32 = 0x3447792674AFC288;
    v33 = "SkeletalPoseType";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v36);
      v6 = (unsigned int *)qword_254104228;
      v35[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v34.var0 = 2 * v12;
            v34.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v16, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v34.var0 = 2 * v20;
              v34.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v24, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v25);
      xmmword_254104208 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SkeletalPoseType", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::internal::defaultConstruct<re::SkeletalPoseMeshMap>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = &str_110;
  *(_BYTE *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 60) = 0;
}

void re::internal::defaultDestruct<re::SkeletalPoseMeshMap>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::SkeletalPoseMeshMap>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &str_110;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = &str_110;
  *(_BYTE *)(result + 56) = 0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalPoseMeshMap>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

uint64_t *re::allocInfo_SkeletalPoseDefinitionAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254104088);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104088))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541042A8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541042B8 = 0;
    qword_2541042C8 = 0;
    qword_2541042D0 = 0xFFFFFFFFLL;
    qword_2541042A8 = (uint64_t)&off_24ED7DAA8;
    qword_2541042D8 = (uint64_t)"SkeletalPoseDefinitionAsset";
    dword_2541042E0 = 0;
    xmmword_2541042E8 = 0u;
    unk_2541042F8 = 0u;
    xmmword_254104308 = 0u;
    qword_254104318 = 0;
    __cxa_guard_release(&qword_254104088);
  }
  return &qword_2541042A8;
}

void re::initInfo_SkeletalPoseDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v25[2];
  __int128 v26;

  v25[0] = 0x97599FFE2F080A26;
  v25[1] = "SkeletalPoseDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  v4 = atomic_load((unsigned __int8 *)&qword_254104090);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104090);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "skeletons";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2541040F8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "skeletalPoseJoints";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x7800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254104100 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "skeletalPoseModelSpaceTransformJoints";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xA000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254104108 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::GenericSRT<float>>>>::get();
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "defaultPoseTransforms";
      *(_QWORD *)(v19 + 16) = qword_254104128;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0xC800000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254104110 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::Matrix4x4<float>>>>::get();
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "defaultModelSpacePoseTransforms";
      *(_QWORD *)(v21 + 16) = &qword_254104168;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xF000000005;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254104118 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseMeshMap>>::get();
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "skeletalMeshPoses";
      *(_QWORD *)(v23 + 16) = &qword_2541041A8;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x11800000006;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254104120 = v23;
      __cxa_guard_release(&qword_254104090);
    }
  }
  *((_QWORD *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_2541040F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::SkeletalPoseDefinitionAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::SkeletalPoseDefinitionAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::SkeletalPoseDefinitionAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::SkeletalPoseDefinitionAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v24 = v26;
}

void re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::GenericSRT<float>>>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2541040B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541040B0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_254104128);
    qword_254104128[0] = (uint64_t)&off_24ED3C238;
    __cxa_guard_release(&qword_2541040B0);
  }
  if ((byte_254104059 & 1) == 0)
  {
    v1 = re::IntrospectionInfo<re::FixedArray<re::GenericSRT<float>>>::get(1);
    if ((byte_254104059 & 1) == 0)
    {
      v2 = v1;
      byte_254104059 = 1;
      v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_254104128, 0);
      unk_254104138 = 0x2800000003;
      unk_254104140 = v3;
      unk_254104144 = 0;
      *(_QWORD *)&xmmword_254104148 = 0;
      *((_QWORD *)&xmmword_254104148 + 1) = 0xFFFFFFFFLL;
      *(_QWORD *)algn_254104158 = v2;
      qword_254104160 = 0;
      qword_254104128[0] = (uint64_t)&off_24ED3C238;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)qword_254104128, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *((_OWORD *)v2 + 2);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_254104148 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::Matrix4x4<float>>>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2541040B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541040B8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254104168);
    qword_254104168 = (uint64_t)&off_24ED3C2D0;
    __cxa_guard_release(&qword_2541040B8);
  }
  if ((byte_25410405A & 1) == 0)
  {
    v1 = re::IntrospectionInfo<re::FixedArray<re::Matrix4x4<float>>>::get(1);
    if ((byte_25410405A & 1) == 0)
    {
      v2 = (uint64_t)v1;
      byte_25410405A = 1;
      v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104168, 0);
      qword_254104178 = 0x2800000003;
      dword_254104180 = v3;
      word_254104184 = 0;
      *(_QWORD *)&xmmword_254104188 = 0;
      *((_QWORD *)&xmmword_254104188 + 1) = 0xFFFFFFFFLL;
      qword_254104198 = v2;
      unk_2541041A0 = 0;
      qword_254104168 = (uint64_t)&off_24ED3C2D0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_254104168, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_254104188 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::SkeletalPoseMeshMap>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30[2];
  __int128 v31;
  const char *v32;
  __int128 v33;

  v0 = atomic_load((unsigned __int8 *)&qword_2541040C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541040C0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541041A8);
    qword_2541041A8 = (uint64_t)&off_24ED3C368;
    __cxa_guard_release(&qword_2541040C0);
  }
  if ((byte_25410405B & 1) == 0)
  {
    v1 = (uint64_t *)qword_254104080;
    if (qword_254104080)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254104070);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254104070))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104230, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254104240 = 0;
      *(_QWORD *)&xmmword_254104250 = 0;
      *((_QWORD *)&xmmword_254104250 + 1) = 0xFFFFFFFFLL;
      qword_254104230 = (uint64_t)&off_24ED7DAA8;
      qword_254104260 = (uint64_t)"SkeletalPoseMeshMap";
      dword_254104268 = 0;
      xmmword_254104270 = 0u;
      *(_OWORD *)&qword_254104280 = 0u;
      xmmword_254104290 = 0u;
      qword_2541042A0 = 0;
      __cxa_guard_release(&qword_254104070);
    }
    qword_254104080 = (uint64_t)&qword_254104230;
    *(_QWORD *)&v33 = 0xC96B6221C8DF5BCALL;
    *((_QWORD *)&v33 + 1) = "SkeletalPoseMeshMap";
    re::StringID::destroyString((re::StringID *)&v33);
    xmmword_254104250 = v31;
    v4 = atomic_load((unsigned __int8 *)&qword_254104078);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254104078);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "meshIdentifier";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_2541040D8 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::IntrospectionInfo<re::StringID>::get(1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "skeletonName";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x2800000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_2541040E0 = v20;
        v21 = re::introspectionAllocator((re *)v20);
        re::introspect_SkeletalPoseType((re *)v21, v22);
        v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = "skeletalPoseType";
        *(_QWORD *)(v23 + 16) = &qword_2541041E8;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0x3800000003;
        *(_DWORD *)(v23 + 40) = 0;
        *(_QWORD *)(v23 + 48) = 0;
        *(_QWORD *)(v23 + 56) = 0;
        *(_DWORD *)(v23 + 64) = 0;
        qword_2541040E8 = v23;
        v24 = re::introspectionAllocator((re *)v23);
        v26 = re::introspect_uint32_t((re *)1, v25);
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "poseIndex";
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0x3C00000004;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_2541040F0 = v27;
        __cxa_guard_release(&qword_254104078);
      }
    }
    qword_254104240 = 0x4000000008;
    v1 = &qword_254104230;
    dword_254104248 = 8;
    word_25410424C = 0;
    dword_254104268 = 4;
    *(_QWORD *)&xmmword_254104270 = &qword_2541040D8;
    *((_QWORD *)&xmmword_254104270 + 1) = re::internal::defaultConstruct<re::SkeletalPoseMeshMap>;
    qword_254104280 = (uint64_t)re::internal::defaultDestruct<re::SkeletalPoseMeshMap>;
    *(_QWORD *)&xmmword_254104290 = 0;
    qword_254104288 = 0;
    *((_QWORD *)&xmmword_254104290 + 1) = re::internal::defaultConstructV2<re::SkeletalPoseMeshMap>;
    qword_2541042A0 = (uint64_t)re::internal::defaultDestructV2<re::SkeletalPoseMeshMap>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254104230, v3);
    v33 = v31;
    if ((byte_25410405B & 1) == 0)
    {
LABEL_7:
      byte_25410405B = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541041A8, 0);
      qword_2541041B8 = 0x2800000003;
      dword_2541041C0 = v5;
      word_2541041C4 = 0;
      *(_QWORD *)&xmmword_2541041C8 = 0;
      *((_QWORD *)&xmmword_2541041C8 + 1) = 0xFFFFFFFFLL;
      qword_2541041D8 = (uint64_t)v1;
      unk_2541041E0 = 0;
      qword_2541041A8 = (uint64_t)&off_24ED3C368;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541041A8, (const re::IntrospectionBase *)&v31);
      if ((BYTE8(v31) & 1) != 0)
        v8 = v32;
      else
        v8 = (char *)&v31 + 9;
      if ((_QWORD)v31 && (BYTE8(v31) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v31 + 40))();
      v29 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v30);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v28 + 1) = v10;
      }
      else
      {
        v33 = v29;
        re::TypeBuilder::beginListType((uint64_t)&v31, v30, 1, 0x28uLL, 8uLL, &v33);
        re::TypeBuilder::setConstructor((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v31, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v31, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v31, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v31, v11);
      }
      xmmword_2541041C8 = v28;
      re::StringID::destroyString((re::StringID *)v30);
    }
  }
}

double re::internal::defaultConstruct<re::SkeletalPoseDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 312) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(_DWORD *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_DWORD *)(a3 + 264) = 0;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_DWORD *)(a3 + 304) = 0;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::SkeletalPoseDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 280);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 240);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a3 + 200);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3 + 160);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3 + 120);
  re::DynamicArray<re::StringID>::deinit(a3 + 80);
  re::DynamicArray<re::StringID>::deinit(a3 + 40);
  return re::DynamicArray<re::AssetHandle>::deinit(a3);
}

double re::internal::defaultConstructV2<re::SkeletalPoseDefinitionAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::SkeletalPoseDefinitionAsset>(uint64_t a1)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1 + 280);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 240);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1 + 200);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a1 + 160);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a1 + 120);
  re::DynamicArray<re::StringID>::deinit(a1 + 80);
  re::DynamicArray<re::StringID>::deinit(a1 + 40);
  return re::DynamicArray<re::AssetHandle>::deinit(a1);
}

void re::SkeletalPoseDefinitionAssetLoader::~SkeletalPoseDefinitionAssetLoader(re::SkeletalPoseDefinitionAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  re::StringID *v13;
  char v14;
  re::StringID *v15;
  re::StringID *v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[8 * v9];
        v11 = v7;
        do
        {
          *(_BYTE *)v11 = *(_BYTE *)v8;
          v13 = (re::StringID *)(v8 + 1);
          v12 = v8[1];
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | v8[1] & 1;
          v11[1] = v8[1] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[2] = v8[2];
          v8[2] = &str_110;
          v8[1] = 0;
          v15 = (re::StringID *)(v8 + 3);
          v14 = v8[3];
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v8[3] & 1;
          v11[3] = v8[3] & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          v11[4] = v8[4];
          v8[4] = &str_110;
          v8[3] = 0;
          v17 = v8[5];
          v16 = (re::StringID *)(v8 + 5);
          v11[5] = v11[5] & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
          v11[5] = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
          v11[6] = *((_QWORD *)v16 + 1);
          *(_QWORD *)v16 = 0;
          *((_QWORD *)v16 + 1) = &str_110;
          v11[7] = *((_QWORD *)v16 + 2);
          re::StringID::destroyString(v16);
          re::StringID::destroyString(v15);
          re::StringID::destroyString(v13);
          v8 = (_QWORD *)((char *)v16 + 24);
          v11 += 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::SkeletalPoseMeshMap>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::Matrix4x4<float>>::copy(_QWORD *this, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!a4)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + (a2 << 6)), __src, a4 << 6);
  }
  else
  {
    re::DynamicArray<re::Matrix4x4<float>>::growCapacity(this, a2 + a4);
    v10 = v6[2] - v5;
    v11 = &__src[64 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + (v5 << 6)), __src, v10 << 6);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + (v5 << 6)), v11, &__src[64 * v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  re::IntrospectionBase *v17;

  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= v8)
  {
    v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v8;
        v12 = v8 == 0;
        v13 = 8;
        if (!v12)
          v13 = v11;
        if (v13 <= v10)
          v14 = v10;
        else
          v14 = v13;
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v9 = *(_QWORD *)(a4 + 16);
  }
  v15 = (_QWORD *)(*(_QWORD *)(a4 + 32) + 24 * v9);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  v16 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  v17 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 24 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::GenericSRT<float>>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 24 * v8;
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      do
      {
        v11 = *(v10 - 1);
        if (v11)
        {
          if (*v10)
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, v10[1]);
            *v10 = 0;
            v10[1] = 0;
          }
          *(v10 - 1) = 0;
        }
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 24 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 24;
        v15 -= 24;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::GenericSRT<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  re::IntrospectionBase *v17;

  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= v8)
  {
    v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v8;
        v12 = v8 == 0;
        v13 = 8;
        if (!v12)
          v13 = v11;
        if (v13 <= v10)
          v14 = v10;
        else
          v14 = v13;
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v9 = *(_QWORD *)(a4 + 16);
  }
  v15 = (_QWORD *)(*(_QWORD *)(a4 + 32) + 24 * v9);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  v16 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  v17 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 24 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::Matrix4x4<float>>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 24 * v8;
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      do
      {
        v11 = *(v10 - 1);
        if (v11)
        {
          if (*v10)
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, v10[1]);
            *v10 = 0;
            v10[1] = 0;
          }
          *(v10 - 1) = 0;
        }
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 24 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 24;
        v15 -= 24;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::SkeletalPoseMeshMap>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  void *v11;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[0] = 0;
  v13[2] = 0;
  v10 = 0u;
  v12[0] = 0;
  v11 = &str_110;
  v12[1] = &str_110;
  v13[1] = &str_110;
  re::DynamicArray<re::SkeletalPoseMeshMap>::add(this, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)((char *)&v10 + 8));
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + (*((_QWORD *)this + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPoseMeshMap>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

void re::DynamicArray<re::SkeletalPoseMeshMap>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = (a2 << 6) | 0x28;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
      ++v9;
      v8 += 64;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = (v4 << 6) | 0x3C;
      do
      {
        v7 = (_DWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *((_BYTE *)v7 - 60) = 0;
        *(_QWORD *)(v7 - 13) = 0;
        *(_QWORD *)(v7 - 11) = &str_110;
        *(_QWORD *)(v7 - 9) = 0;
        *(_QWORD *)(v7 - 7) = &str_110;
        *(_QWORD *)(v7 - 5) = 0;
        *(_QWORD *)(v7 - 3) = &str_110;
        *((_BYTE *)v7 - 4) = 0;
        *v7 = 0;
        v6 += 64;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  re::StringID *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = v8 << 6;
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + 40);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
        v10 = (re::StringID *)((char *)v10 + 64);
        v9 -= 64;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::SkeletalPoseMeshMap>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = v12 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 64;
        v14 -= 64;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPoseMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::AudioAssetLoadStrategy_Client::createRuntimeData(re::AudioAssetLoadStrategy_Base *a1, uint64_t a2, uint64_t a3)
{
  re *v6;
  mach_error_t v7;
  NSObject *v8;
  BOOL v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  re *SharablePCMBuffer;
  id v15;
  re *RuntimeDataWithAudioFile;
  NSObject *v17;
  char *v18;
  task_id_token_t token;
  uint8_t buf[4];
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  token = 0;
  v6 = (re *)task_create_identity_token(*MEMORY[0x24BDAEC58], &token);
  v7 = (int)v6;
  if ((_DWORD)v6)
  {
    v8 = (id)*re::audioLogObjects(v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v18 = mach_error_string(v7);
      *(_DWORD *)buf = 136315138;
      v21 = v18;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Client] Could not retrieve task id from app. Failed with KERN error code: %s", buf, 0xCu);
    }

  }
  *(_DWORD *)(a2 + 132) = token;
  if (re::audio::CanStreamAudioFiles(v6))
    v9 = *(_BYTE *)(a2 + 100) != 0;
  else
    v9 = 0;
  v10 = *(id *)(*(_QWORD *)(a2 + 8) + 16);

  if (!v10)
  {
    if (!a3)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 48) + 64))(*(_QWORD *)(a2 + 8) + 48);
      v13 = *(_QWORD *)(a2 + 8);
      if (!v12)
      {
        v15 = *(id *)(v13 + 184);

        if (!v15)
        {
          RuntimeDataWithAudioFile = (re *)re::AudioAssetLoadStrategy_Base::createRuntimeDataWithAudioFile(a1, (re::AudioFileAsset *)a2);
          if ((RuntimeDataWithAudioFile & 1) == 0)
          {
            v17 = *re::audioLogObjects(RuntimeDataWithAudioFile);
            result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
            if (!(_DWORD)result)
              return result;
            *(_WORD *)buf = 0;
LABEL_24:
            _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Client] Failed to createSharablePCMBuffer.", buf, 2u);
            return 0;
          }
        }
LABEL_15:
        if (v9)
          goto LABEL_17;
        SharablePCMBuffer = (re *)re::AudioFileAsset::createSharablePCMBuffer((re::AudioFileAsset *)a2);
        if ((SharablePCMBuffer & 1) != 0)
          goto LABEL_17;
        v17 = *re::audioLogObjects(SharablePCMBuffer);
        result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)result)
          return result;
        *(_WORD *)buf = 0;
        goto LABEL_24;
      }
      a3 = v13 + 48;
    }
    if (((*(uint64_t (**)(re::AudioAssetLoadStrategy_Base *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a3, a2) & 1) == 0)return 0;
    goto LABEL_15;
  }
  result = re::AudioFileAsset::createSharablePCMBuffer((re::AudioFileAsset *)a2);
  if ((_DWORD)result)
  {
LABEL_17:
    result = 1;
    *(_WORD *)(a2 + 153) = 1;
  }
  return result;
}

void sub_2253C3784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Client::resourceDidUpdate(int a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  id v11;
  _BYTE v12[24];
  _BYTE *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = *a3;
  v12[0] = 0;
  v14 = 0;
  re::AudioAssetLoadStrategy_Base::resourceDidUpdate(a1, a2, &v11, a4, a5, (uint64_t)v12);
  if (v14)
  {
    v9 = v13;
    if (v13 == v12)
    {
      v10 = 4;
      v9 = v12;
      goto LABEL_6;
    }
    if (v13)
    {
      v10 = 5;
LABEL_6:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }

}

void sub_2253C3874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15)
{
  char *v16;
  uint64_t v17;

  if (a15)
  {
    v16 = a14;
    if (a14 == &a11)
    {
      v17 = 4;
      v16 = &a11;
    }
    else
    {
      if (!a14)
        goto LABEL_7;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  }
LABEL_7:

  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Client::~AudioAssetLoadStrategy_Client(re::AudioAssetLoadStrategy_Client *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::allocInfo_ImageBasedLightFile(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_104);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_104))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104370, 0);
    *(uint64_t *)((char *)&qword_254104380 + 6) = 0;
    qword_254104380 = 0;
    qword_254104390 = 0;
    qword_254104398 = 0xFFFFFFFFLL;
    qword_254104370 = (uint64_t)&off_24ED7DAA8;
    qword_2541043A0 = (uint64_t)"ImageBasedLightFile";
    dword_2541043A8 = 0;
    xmmword_2541043B0 = 0u;
    unk_2541043C0 = 0u;
    xmmword_2541043D0 = 0u;
    qword_2541043E0 = 0;
    __cxa_guard_release(&_MergedGlobals_104);
  }
  return &qword_254104370;
}

void re::initInfo_ImageBasedLightFile(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x97870A1F04E56B4;
  v23[1] = "ImageBasedLightFile";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_254104328);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104328);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_AssetHandle((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "sourceTexture";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254104350 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_AssetHandle((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "diffuseTexture";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254104358 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_AssetHandle((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "specularTexture";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x3000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254104360 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::IntrospectionInfo<re::DynamicString>::get(1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "colorSpace";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254104368 = v21;
      __cxa_guard_release(&qword_254104328);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254104350;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ImageBasedLightFile>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ImageBasedLightFile>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ImageBasedLightFile>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ImageBasedLightFile>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

_QWORD *re::internal::defaultConstruct<re::ImageBasedLightFile>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return re::DynamicString::setCapacity((_QWORD *)(a3 + 72), 0);
}

void re::internal::defaultDestruct<re::ImageBasedLightFile>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;

  v5 = (_OWORD *)(a3 + 72);
  v4 = *(_QWORD *)(a3 + 72);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 88));
    *v5 = 0u;
    v5[1] = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::ImageBasedLightFile>(uint64_t a1)
{
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return re::DynamicString::setCapacity((_QWORD *)(a1 + 72), 0);
}

void re::internal::defaultDestructV2<re::ImageBasedLightFile>(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  v3 = (_OWORD *)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 88));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t re::introspect_ImageBasedLightFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightFile", (uint64_t (*)(re::internal *))re::allocInfo_ImageBasedLightFile, (re::IntrospectionBase *(*)(void))re::initInfo_ImageBasedLightFile, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ImageBasedLightFile>, this);
}

uint64_t *re::allocInfo_ImageBasedLightAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254104330);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104330))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541043E8, 0);
    *(uint64_t *)((char *)&qword_2541043F8 + 6) = 0;
    qword_2541043F8 = 0;
    qword_254104408 = 0;
    qword_254104410 = 0xFFFFFFFFLL;
    qword_2541043E8 = (uint64_t)&off_24ED7DAA8;
    qword_254104418 = (uint64_t)"ImageBasedLightAsset";
    dword_254104420 = 0;
    unk_254104428 = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254104458 = 0;
    __cxa_guard_release(&qword_254104330);
  }
  return &qword_2541043E8;
}

void re::initInfo_ImageBasedLightAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x2595A39C18F8E1A4;
  v14[1] = "ImageBasedLightAsset";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254104338);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104338);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)re::internal::introspectionInfoStorage<re::ImageBasedLightFile>;
      if (!re::internal::introspectionInfoStorage<re::ImageBasedLightFile>)
      {
        v8 = re::allocInfo_ImageBasedLightFile((re *)v6);
        re::internal::introspectionInfoStorage<re::ImageBasedLightFile> = (uint64_t)v8;
        re::initInfo_ImageBasedLightFile((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "iblFile";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254104340 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 64, 8);
      *(_DWORD *)v12 = 6;
      *(_QWORD *)(v12 + 8) = 1;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_BYTE *)(v12 + 40) = 1;
      *(_DWORD *)(v12 + 56) = 2;
      qword_254104348 = v12;
      __cxa_guard_release(&qword_254104338);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254104340;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ImageBasedLightAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ImageBasedLightAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ImageBasedLightAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ImageBasedLightAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

uint64_t re::`anonymous namespace'::downgradeIBLAssetFromFall2023@<X0>(re::_anonymous_namespace_ *this@<X0>, _BYTE *a2@<X8>)
{
  _anonymous_namespace_ *CStringPtr;
  uint64_t result;
  uint64_t v8;
  char v9;

  CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr((CFStringRef)*MEMORY[0x24BDBF270], 0x8000100u);
  re::DynamicString::operator=((re::_anonymous_namespace_ *)((char *)this + 72), (re::DynamicString *)&v8);
  result = v8;
  if (v8 && (v9 & 1) != 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 40))();
  *a2 = 1;
  return result;
}

_QWORD *re::internal::defaultConstruct<re::ImageBasedLightAsset>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return re::DynamicString::setCapacity((_QWORD *)(a3 + 72), 0);
}

void re::internal::defaultDestruct<re::ImageBasedLightAsset>(int a1, int a2, re::ImageBasedLightAsset *this)
{
  re::ImageBasedLightAsset::~ImageBasedLightAsset(this);
}

_QWORD *re::internal::defaultConstructV2<re::ImageBasedLightAsset>(uint64_t a1)
{
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return re::DynamicString::setCapacity((_QWORD *)(a1 + 72), 0);
}

uint64_t re::introspect_ImageBasedLightAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightAsset", (uint64_t (*)(re::internal *))re::allocInfo_ImageBasedLightAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ImageBasedLightAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ImageBasedLightAsset>, this);
}

uint64_t *re::ImageBasedLightAsset::assetType(re::ImageBasedLightAsset *this)
{
  unsigned __int8 v1;

  {
    re::ImageBasedLightAsset::assetType(void)::type = (uint64_t)"ImageBasedLight";
    qword_2558278A8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::ImageBasedLightAsset::assetType(void)::type);
  }
  return &re::ImageBasedLightAsset::assetType(void)::type;
}

re *re::ImageBasedLightAssetLoader::unloadAsset(re::ImageBasedLightAssetLoader *this, re::ImageBasedLightAsset *a2)
{
  return re::internal::destroyPersistent<re::ImageBasedLightAsset>((re *)"unloadAsset", 59, a2);
}

re *re::internal::destroyPersistent<re::ImageBasedLightAsset>(re *result, uint64_t a2, re::ImageBasedLightAsset *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::ImageBasedLightAsset::~ImageBasedLightAsset(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::ImageBasedLightAsset *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::ImageBasedLightAssetLoader::isSupportedSourceExtension(re::ImageBasedLightAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reibl") == 0;
}

__guard re::ImageBasedLightAssetLoader::introspectionType(re::ImageBasedLightAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::ImageBasedLightAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightAsset", (uint64_t (*)(re::internal *))re::allocInfo_ImageBasedLightAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ImageBasedLightAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ImageBasedLightAsset>, 0);
    }
  }
  return v2[50];
}

re::AssetHandle *re::ImageBasedLightAssetLoader::findDependencies@<X0>(re::ImageBasedLightAssetLoader *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a3, 3uLL);
  ++*(_DWORD *)(a3 + 24);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)a2);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)(a2 + 24));
  return re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, (re::AssetHandle *)(a2 + 48));
}

void re::ImageBasedLightAssetLoader::~ImageBasedLightAssetLoader(re::ImageBasedLightAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

void re::ImageBasedLightAsset::~ImageBasedLightAsset(re::ImageBasedLightAsset *this)
{
  uint64_t v2;
  _OWORD *v3;

  v3 = (_OWORD *)((char *)this + 72);
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    if ((*((_BYTE *)this + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 11));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::AssetHandle::~AssetHandle((re::ImageBasedLightAsset *)((char *)this + 48));
  re::AssetHandle::~AssetHandle((re::ImageBasedLightAsset *)((char *)this + 24));
  re::AssetHandle::~AssetHandle(this);
}

void sub_2253C489C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253C4A10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t re::`anonymous namespace'::validatePayload(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t i;
  void *v10;
  char v11;
  re *v12;
  re *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  void *v21;
  char v22;
  re *v23;
  re *v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t k;
  void *v31;
  char v32;
  re *v33;
  re *v34;
  NSObject *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t m;
  void *v40;
  char v41;
  re *v42;
  re *v43;
  NSObject *v44;
  re *v45;
  NSObject *v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  id v63;
  _OWORD v64[4];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  id v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[128];
  _BYTE v79[128];
  uint8_t v80[128];
  uint8_t buf[4];
  void *v82;
  __int16 v83;
  re *v84;
  _BYTE v85[128];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = v1;
  v52 = v1;
  if (v1)
  {
    objc_msgSend(v1, "payloadBufferSizes");
  }
  else
  {
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
  }
  objc_msgSend(v2, "models");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v3, "count");

  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  objc_msgSend(v52, "parts");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v70, v85, 16);
  if (v5)
  {
    v7 = *(_QWORD *)v71;
    v8 = 1;
    *(_QWORD *)&v6 = 138412546;
    v48 = v6;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v71 != v7)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * i);
        v69 = 0;
        v11 = objc_msgSend(v10, "validateWithPayloadSize:error:", &v74, &v69, v48);
        v12 = (re *)v69;
        v13 = v12;
        if ((v11 & 1) == 0)
        {
          v14 = *re::assetTypesLogObjects(v12);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v48;
            v82 = v10;
            v83 = 2112;
            v84 = v13;
            _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Mesh part descriptor %@ is invalid: %@", buf, 0x16u);
          }
          v8 = 0;
        }

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v70, v85, 16);
    }
    while (v5);
  }
  else
  {
    v8 = 1;
  }

  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  objc_msgSend(v52, "models");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v65, v80, 16);
  if (v16)
  {
    v18 = *(_QWORD *)v66;
    *(_QWORD *)&v17 = 138412546;
    v49 = v17;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v66 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * j);
        objc_msgSend(v52, "parts", v49);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v64[0] = v74;
        v64[1] = v75;
        v64[2] = v76;
        v64[3] = v77;
        v63 = 0;
        v22 = objc_msgSend(v20, "validateWithParts:payloadSize:error:", v21, v64, &v63);
        v23 = (re *)v63;

        if ((v22 & 1) == 0)
        {
          v25 = *re::assetTypesLogObjects(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v49;
            v82 = v20;
            v83 = 2112;
            v84 = v23;
            _os_log_error_impl(&dword_224FE9000, v25, OS_LOG_TYPE_ERROR, "Mesh model descriptor %@ is invalid: %@", buf, 0x16u);
          }
          v8 = 0;
        }

      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v65, v80, 16);
    }
    while (v16);
  }

  v62 = 0u;
  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  objc_msgSend(v52, "instances");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v59, v79, 16);
  if (v27)
  {
    v29 = *(_QWORD *)v60;
    *(_QWORD *)&v28 = 138412546;
    v50 = v28;
    do
    {
      for (k = 0; k != v27; ++k)
      {
        if (*(_QWORD *)v60 != v29)
          objc_enumerationMutation(v26);
        v31 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * k);
        v58 = 0;
        v32 = objc_msgSend(v31, "validateWithModelCount:error:", v51, &v58, v50);
        v33 = (re *)v58;
        v34 = v33;
        if ((v32 & 1) == 0)
        {
          v35 = *re::assetTypesLogObjects(v33);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v50;
            v82 = v31;
            v83 = 2112;
            v84 = v34;
            _os_log_error_impl(&dword_224FE9000, v35, OS_LOG_TYPE_ERROR, "Mesh instance descriptor %@ is invalid: %@", buf, 0x16u);
          }
          v8 = 0;
        }

      }
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v59, v79, 16);
    }
    while (v27);
  }

  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  objc_msgSend(v52, "skeletons");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v54, v78, 16);
  if (v37)
  {
    v38 = *(_QWORD *)v55;
    do
    {
      for (m = 0; m != v37; ++m)
      {
        if (*(_QWORD *)v55 != v38)
          objc_enumerationMutation(v36);
        v40 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * m);
        v53 = 0;
        v41 = objc_msgSend(v40, "validateWithError:", &v53);
        v42 = (re *)v53;
        v43 = v42;
        if ((v41 & 1) == 0)
        {
          v44 = *re::assetTypesLogObjects(v42);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v82 = v40;
            v83 = 2112;
            v84 = v43;
            _os_log_error_impl(&dword_224FE9000, v44, OS_LOG_TYPE_ERROR, "Mesh skeleton descriptor %@ is invalid: %@", buf, 0x16u);
          }
          v8 = 0;
        }

      }
      v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v54, v78, 16);
    }
    while (v37);
  }

  if ((v8 & 1) == 0)
  {
    v46 = *re::assetTypesLogObjects(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_224FE9000, v46, OS_LOG_TYPE_FAULT, "Mesh payload is invalid", buf, 2u);
    }
  }

  return v8 & 1;
}

void sub_2253C5028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t re::`anonymous namespace'::validatePrivateData(void *a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t k;
  void *v46;
  void *v47;
  uint64_t m;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  unint64_t v53;
  void *v54;
  int v55;
  unint64_t v56;
  char v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  void *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int *v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  BOOL v89;
  void *v90;
  void *v91;
  void *v92;
  unsigned int v93;
  void *v94;
  BOOL v95;
  uint64_t v96;
  void *v97;
  unsigned int v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t v124;
  unsigned int v125;
  unsigned int v126;
  _DWORD *v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int *v132;
  uint64_t v133;
  unint64_t v134;
  void *v136;
  unint64_t v137;
  unsigned int *v138;
  uint64_t v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  unint64_t v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unint64_t v168;
  unsigned int v169;
  unsigned int v170;
  unsigned __int16 *v171;
  uint64_t v172;
  unsigned __int16 *v173;
  uint64_t v174;
  unsigned __int16 v175;
  unsigned __int16 *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v180;
  unsigned __int16 *v181;
  uint64_t v182;
  unsigned int v183;
  BOOL v184;
  id v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  int v207;
  id v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int *v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  unsigned int v225;
  _DWORD *v226;
  uint64_t v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  _DWORD *v234;
  uint64_t v235;
  _DWORD *v236;
  unsigned int *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v242;
  const char *v243;
  char v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  id v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  void *v255;
  void *v256;
  id v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  id v261;
  id v262;
  id v263;
  unsigned int v264;
  uint64_t v265;
  id v266;
  unsigned int v267;
  id v268;
  void *v269;
  unsigned int v270;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  void *v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  void *v283;
  id v284;
  id v285;
  void *v286;
  void *v287;
  void *v288;
  id obj;
  id obja;
  char *objb;
  id objc;
  uint64_t j;
  void *v294;
  void *v295;
  void *v296;
  unint64_t v297;
  id v298;
  id v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  char v304[128];
  uint64_t v305;

  v305 = *MEMORY[0x24BDAC8D0];
  v299 = a1;
  v5 = atomic_load((unsigned __int8 *)&qword_255832FA0);
  if ((v5 & 1) == 0)
    goto LABEL_321;
  while (1)
  {
    if (!_MergedGlobals_11)
    {
      v240 = 1;
      goto LABEL_300;
    }
    v297 = a3;
    v300 = 0u;
    v301 = 0u;
    v302 = 0u;
    v303 = 0u;
    objc_msgSend(v299, "parts");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v301;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v301 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v300 + 1) + 8 * i);
          if (objc_msgSend(v10, "isIndexed")
            && (MEMORY[0x2276919A8](objc_msgSend(v10, "indexType"), a2 + objc_msgSend(v10, "indexPayloadOffset"), objc_msgSend(v10, "indexBufferSize"), objc_msgSend(v10, "vertexCount")) & 1) == 0)
          {

            goto LABEL_299;
          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
      }
      while (v7);
    }

    v11 = v299;
    v300 = 0u;
    v301 = 0u;
    v302 = 0u;
    v303 = 0u;
    v285 = v11;
    objc_msgSend(v11, "parts");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v277 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
    if (v277)
    {
      v281 = *(_QWORD *)v301;
      do
      {
        for (j = 0; j != v277; ++j)
        {
          if (*(_QWORD *)v301 != v281)
            objc_enumerationMutation(obj);
          v12 = *(id *)(*((_QWORD *)&v300 + 1) + 8 * j);
          objc_msgSend(v12, "customAttributes");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "accumulatedVertexValence");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "objectForKeyedSubscript:", v14);
          v15 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(v12, "customAttributes");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "vertexAdjacencies");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "objectForKeyedSubscript:", v17);
          v18 = objc_claimAutoreleasedReturnValue();

          if (v15 | v18)
          {
            if (!v15)
              goto LABEL_294;
            if (!v18)
              goto LABEL_294;
            if (objc_msgSend((id)v15, "format") != 36)
              goto LABEL_294;
            if (objc_msgSend((id)v15, "stride") != 4)
              goto LABEL_294;
            if (objc_msgSend((id)v18, "format") != 36)
              goto LABEL_294;
            if (objc_msgSend((id)v18, "stride") != 4)
              goto LABEL_294;
            v19 = objc_msgSend((id)v15, "payloadOffset");
            v20 = objc_msgSend((id)v15, "count");
            v21 = objc_msgSend((id)v18, "payloadOffset");
            v22 = objc_msgSend((id)v18, "count");
            v23 = objc_msgSend(v12, "indexCount");
            if (v20 != objc_msgSend(v12, "vertexCount"))
              goto LABEL_294;
            if (v20)
            {
              v24 = (unsigned int *)(a2 + v19);
              v25 = 4 * v20;
              while (v22 >= *v24)
              {
                ++v24;
                v25 -= 4;
                if (!v25)
                  goto LABEL_29;
              }
LABEL_294:

              goto LABEL_299;
            }
LABEL_29:
            if (v22)
            {
              v26 = (unsigned int *)(a2 + v21);
              v27 = 4 * v22;
              while (*v26 < v23 / 3)
              {
                ++v26;
                v27 -= 4;
                if (!v27)
                  goto LABEL_33;
              }
              goto LABEL_294;
            }
          }
LABEL_33:

          v28 = v12;
          objc_msgSend(v28, "customAttributes");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "cotangentLaplacianEndIndices");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "objectForKeyedSubscript:", v30);
          v15 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(v28, "customAttributes");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "cotangentLaplacianIndices");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "objectForKeyedSubscript:", v32);
          v18 = objc_claimAutoreleasedReturnValue();

          if (v15 | v18)
          {
            if (!v15)
              goto LABEL_294;
            if (!v18)
              goto LABEL_294;
            if (objc_msgSend((id)v15, "format") != 36)
              goto LABEL_294;
            if (objc_msgSend((id)v15, "stride") != 4)
              goto LABEL_294;
            if (objc_msgSend((id)v18, "format") != 36)
              goto LABEL_294;
            if (objc_msgSend((id)v18, "stride") != 4)
              goto LABEL_294;
            v33 = objc_msgSend((id)v15, "payloadOffset");
            v34 = objc_msgSend((id)v15, "count");
            v35 = objc_msgSend((id)v18, "payloadOffset");
            v36 = objc_msgSend((id)v18, "count");
            v37 = objc_msgSend(v28, "vertexCount");
            if (v34 != objc_msgSend(v28, "vertexCount"))
              goto LABEL_294;
            if (v34)
            {
              v38 = (unsigned int *)(a2 + v33);
              v39 = 4 * v34;
              while (v36 >= *v38)
              {
                ++v38;
                v39 -= 4;
                if (!v39)
                  goto LABEL_45;
              }
              goto LABEL_294;
            }
LABEL_45:
            if (v36)
            {
              v40 = (unsigned int *)(a2 + v35);
              v41 = 4 * v36;
              while (*v40 < v37)
              {
                ++v40;
                v41 -= 4;
                if (!v41)
                  goto LABEL_49;
              }
              goto LABEL_294;
            }
          }
LABEL_49:

        }
        v277 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
      }
      while (v277);
    }

    v42 = v285;
    v268 = v42;
    objc_msgSend(v42, "parts");
    v278 = (void *)objc_claimAutoreleasedReturnValue();
    v302 = 0u;
    v303 = 0u;
    v300 = 0u;
    v301 = 0u;
    objc_msgSend(v42, "models");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
    if (v44)
    {
      v262 = v43;
      v265 = *(_QWORD *)v301;
      do
      {
        v260 = v44;
        for (k = 0; k != v260; ++k)
        {
          if (*(_QWORD *)v301 != v265)
            objc_enumerationMutation(v262);
          v46 = *(void **)(*((_QWORD *)&v300 + 1) + 8 * k);
          objc_msgSend(v46, "partIndices");
          v286 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "skinningModel");
          v294 = (void *)objc_claimAutoreleasedReturnValue();
          if (v294)
          {
            objc_msgSend(v294, "skinningParts");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v271 = objc_msgSend(v47, "count");

            if (v271)
            {
              for (m = 0; m != v271; ++m)
              {
                objc_msgSend(v294, "skinningParts");
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v49, "objectAtIndexedSubscript:", m);
                v50 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v42, "skeletons");
                v51 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v51, "objectAtIndexedSubscript:", objc_msgSend(v50, "skeletonIndex"));
                v282 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v282, "jointNames");
                v52 = (void *)objc_claimAutoreleasedReturnValue();
                v53 = objc_msgSend(v52, "count");

                objc_msgSend(v286, "objectAtIndexedSubscript:", m);
                v274 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v278, "objectAtIndexedSubscript:", objc_msgSend(v274, "unsignedLongLongValue"));
                obja = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v50, "skinningInfluences");
                v54 = (void *)objc_claimAutoreleasedReturnValue();
                v55 = objc_msgSend(v50, "packedInfluence");
                v56 = objc_msgSend(v54, "bufferSize");
                if (v55)
                  v57 = 2;
                else
                  v57 = 3;
                v58 = objc_msgSend(v54, "payloadOffset");
                a3 = v56 >> v57;
                if (objc_msgSend(v50, "influencePerVertex"))
                {
                  v59 = objc_msgSend(v50, "influencePerVertex");
                  if (a3 != objc_msgSend(obja, "vertexCount") * v59)
                  {
                    re::internal::assertLog((re::internal *)4, v60, "assertion failure: '%s' (%s:line %i) ", "influenceCount == skinningPartDesc.influencePerVertex * meshPartDescriptor.vertexCount", "validateMeshSkinningInfluences", 292);
                    _os_crash();
                    __break(1u);
LABEL_305:
                    re::internal::assertLog((re::internal *)4, v242, "assertion failure: '%s' (%s:line %i) ", "influencesDesc.payloadOffset + influenceCount * sizeof(SkinningInfluence) <= payloadLength", "validateMeshSkinningInfluences", 306);
                    _os_crash();
                    __break(1u);
LABEL_306:
                    re::internal::assertLog((re::internal *)4, v73, "assertion failure: '%s' (%s:line %i) ", "influencesDesc.payloadOffset + influenceCount * sizeof(PackedSkinningInfluence) <= payloadLength", "validateMeshSkinningInfluences", 297);
                    _os_crash();
                    __break(1u);
LABEL_307:
                    re::internal::assertLog((re::internal *)4, v63, "assertion failure: '%s' (%s:line %i) ", "endInfluencesDesc.payloadOffset + meshPartDescriptor.vertexCount * sizeof(int) <= payloadLength", "validateMeshSkinningInfluences", 281);
                    _os_crash();
                    __break(1u);
LABEL_308:
                    re::internal::assertLog((re::internal *)4, v96, "assertion failure: '%s' (%s:line %i) ", "bufferIndex < blendShapeModel.blendShapeBuffers.count", "validateBlendShape", 606);
                    _os_crash();
                    __break(1u);
LABEL_309:
                    re::internal::assertLog((re::internal *)4, v100, "assertion failure: '%s' (%s:line %i) ", "blendShapeConstantsDesc.payloadOffset + blendShapeConstantsDesc.bufferSize <= payloadLength", "validateBlendShape", 500);
                    _os_crash();
                    __break(1u);
LABEL_310:
                    re::internal::assertLog((re::internal *)4, v84, "assertion failure: '%s' (%s:line %i) ", "blendShapeModel.perMeshPartBlendShapeBufferIndex.count <= parts.count", "validateBlendShape", 595);
                    _os_crash();
                    __break(1u);
                    goto LABEL_311;
                  }
                }
                else
                {
                  objc_msgSend(v50, "influenceEndIndices");
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  v62 = objc_msgSend(v61, "payloadOffset");
                  if (4 * objc_msgSend(obja, "vertexCount") + (unint64_t)v62 > v297)
                    goto LABEL_307;
                  v64 = objc_msgSend(v61, "payloadOffset");
                  v65 = objc_msgSend(obja, "vertexCount");
                  if (v65)
                  {
                    v66 = 0;
                    v67 = (unsigned int *)(a2 + v64);
                    v68 = 4 * v65;
                    while (1)
                    {
                      v69 = *v67;
                      if ((int)v69 < v66 || a3 < v69)
                        break;
                      ++v67;
                      v66 = v69;
                      v68 -= 4;
                      if (!v68)
                        goto LABEL_74;
                    }

                    v42 = v268;
LABEL_298:

                    goto LABEL_299;
                  }
LABEL_74:

                }
                v71 = (unsigned int *)(a2 + v58);
                if (objc_msgSend(v50, "packedInfluence"))
                {
                  v72 = objc_msgSend(v54, "payloadOffset");
                  v74 = 4 * a3;
                  if (4 * a3 + v72 > v297)
                    goto LABEL_306;
                  v42 = v268;
                  if (a3)
                  {
                    while (v53 > (unint64_t)*v71 >> 22)
                    {
                      ++v71;
                      v74 -= 4;
                      if (!v74)
                        goto LABEL_86;
                    }
                    goto LABEL_298;
                  }
                }
                else
                {
                  v75 = objc_msgSend(v54, "payloadOffset");
                  v76 = 8 * a3;
                  if (8 * a3 + v75 > v297)
                    goto LABEL_305;
                  v42 = v268;
                  if (a3)
                  {
                    do
                    {
                      v77 = *v71;
                      if ((v77 & 0x80000000) != 0 || v53 <= v77)
                        goto LABEL_298;
                      v71 += 2;
                      v76 -= 8;
                    }
                    while (v76);
                  }
                }
LABEL_86:

              }
            }
          }

        }
        v43 = v262;
        v44 = objc_msgSend(v262, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
      }
      while (v44);
    }

    v257 = v42;
    objc_msgSend(v257, "parts");
    v254 = (void *)objc_claimAutoreleasedReturnValue();
    v302 = 0u;
    v303 = 0u;
    v300 = 0u;
    v301 = 0u;
    objc_msgSend(v257, "models");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v255 = v78;
    v79 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
    if (!v79)
    {
LABEL_222:

      v185 = v257;
      v300 = 0u;
      v301 = 0u;
      v302 = 0u;
      v303 = 0u;
      v284 = v185;
      objc_msgSend(v185, "parts");
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      v288 = v186;
      v187 = objc_msgSend(v186, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
      if (v187)
      {
        v188 = *(_QWORD *)v301;
        v273 = *(_QWORD *)v301;
        do
        {
          v189 = 0;
          v276 = v187;
          do
          {
            if (*(_QWORD *)v301 != v188)
              objc_enumerationMutation(v186);
            v298 = *(id *)(*((_QWORD *)&v300 + 1) + 8 * v189);
            objc_msgSend(v298, "customAttributes");
            v190 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "controlIndices");
            v191 = (void *)objc_claimAutoreleasedReturnValue();
            v280 = v189;
            objc_msgSend(v190, "objectForKeyedSubscript:", v191);
            v192 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v298, "customAttributes");
            v193 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "stencilSizes");
            v194 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v193, "objectForKeyedSubscript:", v194);
            v296 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v298, "customAttributes");
            v195 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "stencilIndices");
            v196 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v195, "objectForKeyedSubscript:", v196);
            v197 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v298, "customAttributes");
            v198 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "stencilOffsets");
            v199 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v198, "objectForKeyedSubscript:", v199);
            v200 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v298, "customAttributes");
            v201 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "stencilWeights");
            v202 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v201, "objectForKeyedSubscript:", v202);
            v203 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v298, "customAttributes");
            v204 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "patchParams");
            v205 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v204, "objectForKeyedSubscript:", v205);
            v206 = (void *)objc_claimAutoreleasedReturnValue();

            objc = v192;
            v207 = objc_msgSend(v298, "patchCount");
            if (v192 || v296 || v197 || v200 || v203 || v206)
            {
              if (!v192)
                goto LABEL_301;
              if (!v296)
                goto LABEL_301;
              if (!v197)
                goto LABEL_301;
              if (!v200)
                goto LABEL_301;
              if (!v203)
                goto LABEL_301;
              if (!v206)
                goto LABEL_301;
              if (objc_msgSend(v192, "format") != 36)
                goto LABEL_301;
              if (objc_msgSend(v192, "stride") != 4)
                goto LABEL_301;
              if (objc_msgSend(v192, "count") != 16 * v207)
                goto LABEL_301;
              if (objc_msgSend(v296, "format") != 36)
                goto LABEL_301;
              if (objc_msgSend(v296, "stride") != 4)
                goto LABEL_301;
              if (objc_msgSend(v197, "format") != 36)
                goto LABEL_301;
              if (objc_msgSend(v197, "stride") != 4)
                goto LABEL_301;
              if (objc_msgSend(v200, "format") != 36)
                goto LABEL_301;
              if (objc_msgSend(v200, "stride") != 4)
                goto LABEL_301;
              if (objc_msgSend(v203, "format") != 28)
                goto LABEL_301;
              if (objc_msgSend(v203, "stride") != 4)
                goto LABEL_301;
              if (objc_msgSend(v206, "format") != 34)
                goto LABEL_301;
              if (objc_msgSend(v206, "stride") != 12)
                goto LABEL_301;
              if (objc_msgSend(v206, "count") != v207)
                goto LABEL_301;
              v222 = objc_msgSend(v192, "payloadOffset");
              v223 = objc_msgSend(v192, "count");
              v224 = objc_msgSend(v296, "count");
              v225 = objc_msgSend(v298, "preSplitVertexCount");
              if (v224 != objc_msgSend(v200, "count"))
                goto LABEL_301;
              if (v223)
              {
                v226 = (_DWORD *)(a2 + v222);
                v227 = 4 * v223;
                while (*v226 < v225 + v224)
                {
                  ++v226;
                  v227 -= 4;
                  if (!v227)
                    goto LABEL_277;
                }
LABEL_301:

                v211 = objc;
LABEL_302:

                v240 = 0;
                v186 = v288;
                goto LABEL_304;
              }
LABEL_277:
              v270 = objc_msgSend(v296, "payloadOffset");
              v228 = objc_msgSend(v296, "count");
              v267 = objc_msgSend(v200, "payloadOffset");
              v229 = objc_msgSend(v200, "count");
              v264 = objc_msgSend(v197, "payloadOffset");
              v230 = objc_msgSend(v197, "count");
              v231 = objc_msgSend(v203, "count");
              v232 = objc_msgSend(v197, "count");
              if (v232 >= v231)
                v233 = v231;
              else
                v233 = v232;
              if (v229 != v228)
                goto LABEL_301;
              if (v228)
              {
                v234 = (_DWORD *)(a2 + v270);
                v235 = 4 * v229;
                v236 = (_DWORD *)(a2 + v267);
                while (*v234 + *v236 <= v233)
                {
                  ++v236;
                  ++v234;
                  v235 -= 4;
                  if (!v235)
                    goto LABEL_285;
                }
                goto LABEL_301;
              }
LABEL_285:
              if (v230)
              {
                v237 = (unsigned int *)(a2 + v264);
                v238 = 4 * v230;
                while (*v237 < v225)
                {
                  ++v237;
                  v238 -= 4;
                  if (!v238)
                    goto LABEL_233;
                }
                goto LABEL_301;
              }
            }
LABEL_233:

            v208 = v298;
            objc_msgSend(v208, "customAttributes");
            v209 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "vertexUV|values");
            v210 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v209, "objectForKeyedSubscript:", v210);
            v211 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v208, "customAttributes");
            v212 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "vertexUV|indices");
            v213 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v212, "objectForKeyedSubscript:", v213);
            v296 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v208, "customAttributes");
            v214 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "vertexUV|patchParams");
            v215 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v214, "objectForKeyedSubscript:", v215);
            v197 = (void *)objc_claimAutoreleasedReturnValue();

            if (v211 || v296 || v197)
            {
              if (!v211)
                goto LABEL_302;
              if (!v296)
                goto LABEL_302;
              if (!v197)
                goto LABEL_302;
              if (objc_msgSend(v211, "format") != 29)
                goto LABEL_302;
              if (objc_msgSend(v211, "stride") != 8)
                goto LABEL_302;
              if (objc_msgSend(v296, "format") != 36)
                goto LABEL_302;
              if (objc_msgSend(v296, "stride") != 4)
                goto LABEL_302;
              if (objc_msgSend(v197, "format") != 34)
                goto LABEL_302;
              if (objc_msgSend(v197, "stride") != 12)
                goto LABEL_302;
              v216 = objc_msgSend(v197, "count");
              if (v216 != objc_msgSend(v208, "patchCount"))
                goto LABEL_302;
              v217 = objc_msgSend(v211, "count");
              v218 = objc_msgSend(v296, "payloadOffset");
              v219 = objc_msgSend(v296, "count");
              if (v219)
              {
                v220 = (unsigned int *)(a2 + v218);
                v221 = 4 * v219;
                while (*v220 < v217)
                {
                  ++v220;
                  v221 -= 4;
                  if (!v221)
                    goto LABEL_250;
                }
                goto LABEL_302;
              }
            }
LABEL_250:

            v189 = v280 + 1;
            v186 = v288;
            v188 = v273;
          }
          while (v280 + 1 != v276);
          v239 = objc_msgSend(v288, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
          v187 = v239;
          v240 = 1;
        }
        while (v239);
      }
      else
      {
        v240 = 1;
      }
LABEL_304:

      goto LABEL_300;
    }
    v253 = *(_QWORD *)v301;
LABEL_91:
    v259 = 0;
    v252 = v79;
    while (1)
    {
      if (*(_QWORD *)v301 != v253)
        objc_enumerationMutation(v78);
      v80 = *(void **)(*((_QWORD *)&v300 + 1) + 8 * v259);
      objc_msgSend(v80, "partIndices");
      v256 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v80, "blendShapeModel");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      if (v81)
        break;
LABEL_220:

      ++v259;
      v78 = v255;
      if (v259 == v252)
      {
        v79 = objc_msgSend(v255, "countByEnumeratingWithState:objects:count:", &v300, v304, 16);
        if (!v79)
          goto LABEL_222;
        goto LABEL_91;
      }
    }
    v251 = v81;
    v82 = v81;
    v266 = v254;
    v261 = v256;
    v295 = v82;
    v258 = objc_msgSend(v82, "blendShapeIndexType");
    if (v258 > 1)
      goto LABEL_297;
    objc_msgSend(v82, "perMeshPartBlendShapeBufferIndex");
    a3 = objc_claimAutoreleasedReturnValue();
    v83 = objc_msgSend((id)a3, "count");
    LODWORD(v83) = v83 > objc_msgSend(v266, "count");

    if ((_DWORD)v83)
      goto LABEL_310;
    objc_msgSend(v295, "blendShapeBuffers");
    a3 = objc_claimAutoreleasedReturnValue();
    v85 = objc_msgSend((id)a3, "count");
    objc_msgSend(v295, "blendShapeGroupNames");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v85) = v85 == objc_msgSend(v86, "count");

    if ((_DWORD)v85)
      break;
LABEL_311:
    re::internal::assertLog((re::internal *)4, v87, "assertion failure: '%s' (%s:line %i) ", "blendShapeModel.blendShapeBuffers.count == blendShapeModel.blendShapeGroupNames.count", "validateBlendShape", 596);
    _os_crash();
    __break(1u);
LABEL_312:
    re::internal::assertLog((re::internal *)4, v144, "assertion failure: '%s' (%s:line %i) ", "blendShapeConstantsDesc.payloadOffset + blendShapeConstantsDesc.bufferSize <= payloadLength", "validateBlendShape", 500);
    _os_crash();
    __break(1u);
LABEL_313:
    re::internal::assertLog((re::internal *)4, v107, "assertion failure: '%s' (%s:line %i) ", "floatSliceDesc.payloadOffset + floatSliceDesc.bufferSize <= payloadLength", "validateBlendShape", 524);
    _os_crash();
    __break(1u);
LABEL_314:
    re::internal::assertLog((re::internal *)4, v109, "assertion failure: '%s' (%s:line %i) ", "indexDesc.payloadOffset + indexDesc.bufferSize <= payloadLength", "validateBlendShape", 525);
    _os_crash();
    __break(1u);
LABEL_315:
    re::internal::assertLog((re::internal *)4, v111, "assertion failure: '%s' (%s:line %i) ", "coefficientIndexDesc.payloadOffset + coefficientIndexDesc.bufferSize <= payloadLength", "validateBlendShape", 526);
    _os_crash();
    __break(1u);
LABEL_316:
    re::internal::assertLog((re::internal *)4, v113, "assertion failure: '%s' (%s:line %i) ", "renormalizationDesc.payloadOffset + renormalizationDesc.bufferSize <= payloadLength", "validateBlendShape", 528);
    _os_crash();
    __break(1u);
LABEL_317:
    re::internal::assertLog((re::internal *)4, v151, "assertion failure: '%s' (%s:line %i) ", "floatSliceDesc.payloadOffset + floatSliceDesc.bufferSize <= payloadLength", "validateBlendShape", 524);
    _os_crash();
    __break(1u);
LABEL_318:
    re::internal::assertLog((re::internal *)4, v153, "assertion failure: '%s' (%s:line %i) ", "indexDesc.payloadOffset + indexDesc.bufferSize <= payloadLength", "validateBlendShape", 525);
    _os_crash();
    __break(1u);
LABEL_319:
    re::internal::assertLog((re::internal *)4, v155, "assertion failure: '%s' (%s:line %i) ", "coefficientIndexDesc.payloadOffset + coefficientIndexDesc.bufferSize <= payloadLength", "validateBlendShape", 526);
    _os_crash();
    __break(1u);
LABEL_320:
    re::internal::assertLog((re::internal *)4, v157, "assertion failure: '%s' (%s:line %i) ", "renormalizationDesc.payloadOffset + renormalizationDesc.bufferSize <= payloadLength", "validateBlendShape", 528);
    _os_crash();
    __break(1u);
LABEL_321:
    if (__cxa_guard_acquire(&qword_255832FA0))
    {
      re::Defaults::BOOLValue((re::Defaults *)"validatePayloadContents", v243, v304);
      if (v304[0])
        v244 = v304[1];
      else
        v244 = 1;
      _MergedGlobals_11 = v244;
      __cxa_guard_release(&qword_255832FA0);
    }
  }
  for (objb = 0; ; ++objb)
  {
    objc_msgSend(v295, "perMeshPartBlendShapeBufferIndex");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v89 = (unint64_t)objb < objc_msgSend(v88, "count");

    if (!v89)
    {

      v81 = v251;
      goto LABEL_220;
    }
    objc_msgSend(v261, "objectAtIndexedSubscript:", objb);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v266, "objectAtIndexedSubscript:", objc_msgSend(v90, "unsignedLongLongValue"));
    v269 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v295, "perMeshPartBlendShapeBufferIndex");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "objectAtIndexedSubscript:", objb);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = objc_msgSend(v92, "unsignedIntValue");

    if (v93 == -1)
      goto LABEL_218;
    objc_msgSend(v295, "blendShapeBuffers");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    a3 = v93;
    v95 = objc_msgSend(v94, "count") > (unint64_t)v93;

    if (!v95)
      goto LABEL_308;
    objc_msgSend(v295, "blendShapeBuffers");
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v97, "objectAtIndexedSubscript:", a3);
    v263 = (id)objc_claimAutoreleasedReturnValue();

    if (!v258)
      break;
    v98 = objc_msgSend(v269, "vertexCount");
    v99 = v263;
    objc_msgSend(v99, "floatSliceBuffer");
    v283 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v99, "indexBuffer");
    v275 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v99, "coefficientIndexBuffer");
    v287 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v99, "renormalizationBuffer");
    v272 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v99, "blendShapeConstantsBuffer");
    v279 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v283 != 0) == (v275 == 0) || (v283 != 0) != (v287 != 0) || !v279)
      goto LABEL_295;
    a3 = objc_msgSend(v279, "payloadOffset");
    if (objc_msgSend(v279, "bufferSize") + (unint64_t)a3 > v297)
      goto LABEL_309;
    v101 = a2 + objc_msgSend(v279, "payloadOffset");
    v102 = *(_QWORD *)v101;
    v103 = *(unsigned int *)(v101 + 8);
    objc_msgSend(v99, "floatDeltaBuffer");
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    v105 = objc_msgSend(v104, "bufferSize");

    if (!objc_msgSend(v279, "count"))
      goto LABEL_295;
    if (objc_msgSend(v279, "stride") != 12)
      goto LABEL_295;
    a3 = v105 >> 2;
    if (v283)
    {
      v106 = objc_msgSend(v283, "payloadOffset");
      if (objc_msgSend(v283, "bufferSize") + (unint64_t)v106 > v297)
        goto LABEL_313;
      v108 = objc_msgSend(v275, "payloadOffset");
      if (objc_msgSend(v275, "bufferSize") + (unint64_t)v108 > v297)
        goto LABEL_314;
      v110 = objc_msgSend(v287, "payloadOffset");
      if (objc_msgSend(v287, "bufferSize") + (unint64_t)v110 > v297)
        goto LABEL_315;
      if (v272)
      {
        v112 = objc_msgSend(v272, "payloadOffset");
        if (objc_msgSend(v272, "bufferSize") + (unint64_t)v112 > v297)
          goto LABEL_316;
      }
      if (objc_msgSend(v283, "stride") != 4
        || objc_msgSend(v275, "stride") != 4
        || objc_msgSend(v287, "stride") != 4
        || v272 && objc_msgSend(v272, "stride") != 4)
      {
        goto LABEL_295;
      }
      v114 = objc_msgSend(v99, "hasNormals");
      v115 = objc_msgSend(v99, "hasTangents");
      v116 = objc_msgSend(v99, "hasBitangents");
      v117 = v114 ? v103 : 0;
      v118 = v115 ? v103 : 0;
      v119 = v116 ? v103 : 0;
      v120 = objc_msgSend(v275, "count");
      if (v120 + 1 != objc_msgSend(v283, "count") || a3 != objc_msgSend(v287, "count"))
        goto LABEL_295;
      v121 = objc_msgSend(v275, "payloadOffset");
      v122 = objc_msgSend(v275, "count");
      v247 = objc_msgSend(v283, "payloadOffset");
      v123 = objc_msgSend(v283, "count");
      v245 = objc_msgSend(v287, "payloadOffset");
      v249 = objc_msgSend(v287, "count");
      v124 = v117 + v103 + v118 + v119;
      if (v272)
      {
        v125 = objc_msgSend(v272, "payloadOffset");
        v126 = objc_msgSend(v272, "count");
        if (v126)
        {
          v127 = (_DWORD *)(a2 + v125);
          v128 = 4 * v126;
          while (v124 > (*v127 + 2))
          {
            ++v127;
            v128 -= 4;
            if (!v128)
              goto LABEL_137;
          }
          goto LABEL_295;
        }
      }
LABEL_137:
      if (v122)
      {
        v129 = (unsigned int *)(a2 + v121);
        v130 = 4 * v122;
        while (v124 > *v129)
        {
          ++v129;
          v130 -= 4;
          if (!v130)
            goto LABEL_141;
        }
        goto LABEL_295;
      }
LABEL_141:
      if (v123)
      {
        v131 = 0;
        v132 = (unsigned int *)(a2 + v247);
        v133 = 4 * v123;
        do
        {
          v134 = *v132;
          if (v134 < v131 || a3 < v134)
            goto LABEL_295;
          ++v132;
          v131 = v134;
          v133 -= 4;
        }
        while (v133);
      }
      objc_msgSend(v99, "blendShapeNames");
      v136 = (void *)objc_claimAutoreleasedReturnValue();
      v137 = objc_msgSend(v136, "count");
      if (v249)
      {
        v138 = (unsigned int *)(a2 + v245);
        v139 = 4 * v249 - 4;
        do
        {
          v140 = *v138++;
          v141 = v137 > v140;
          v142 = v137 <= v140 || v139 == 0;
          v139 -= 4;
        }
        while (!v142);
      }
      else
      {
        v141 = 1;
      }
LABEL_215:

      goto LABEL_216;
    }
    v141 = v272 == 0;
LABEL_216:

    if (!v141)
      goto LABEL_296;

LABEL_218:
  }
  v143 = objc_msgSend(v269, "vertexCount");
  v99 = v263;
  objc_msgSend(v99, "floatSliceBuffer");
  v283 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "indexBuffer");
  v275 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "coefficientIndexBuffer");
  v287 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "renormalizationBuffer");
  v272 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v99, "blendShapeConstantsBuffer");
  v279 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v283 != 0) == (v275 == 0) || (v283 != 0) != (v287 != 0) || !v279)
    goto LABEL_295;
  a3 = objc_msgSend(v279, "payloadOffset");
  if (objc_msgSend(v279, "bufferSize") + (unint64_t)a3 > v297)
    goto LABEL_312;
  v145 = a2 + objc_msgSend(v279, "payloadOffset");
  v146 = *(_QWORD *)v145;
  v147 = *(unsigned int *)(v145 + 8);
  objc_msgSend(v99, "floatDeltaBuffer");
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  v149 = objc_msgSend(v148, "bufferSize");

  if (!objc_msgSend(v279, "count"))
    goto LABEL_295;
  if (objc_msgSend(v279, "stride") != 12)
    goto LABEL_295;
  a3 = v149 >> 2;
  if (!v283)
  {
    v141 = v272 == 0;
    goto LABEL_216;
  }
  v150 = objc_msgSend(v283, "payloadOffset");
  if (objc_msgSend(v283, "bufferSize") + (unint64_t)v150 > v297)
    goto LABEL_317;
  v152 = objc_msgSend(v275, "payloadOffset");
  if (objc_msgSend(v275, "bufferSize") + (unint64_t)v152 > v297)
    goto LABEL_318;
  v154 = objc_msgSend(v287, "payloadOffset");
  if (objc_msgSend(v287, "bufferSize") + (unint64_t)v154 > v297)
    goto LABEL_319;
  if (v272)
  {
    v156 = objc_msgSend(v272, "payloadOffset");
    if (objc_msgSend(v272, "bufferSize") + (unint64_t)v156 > v297)
      goto LABEL_320;
  }
  if (objc_msgSend(v283, "stride") != 2
    || objc_msgSend(v275, "stride") != 2
    || objc_msgSend(v287, "stride") != 2
    || v272 && objc_msgSend(v272, "stride") != 2)
  {
    goto LABEL_295;
  }
  v158 = objc_msgSend(v99, "hasNormals");
  v159 = objc_msgSend(v99, "hasTangents");
  v160 = objc_msgSend(v99, "hasBitangents");
  v161 = v158 ? v147 : 0;
  v162 = v159 ? v147 : 0;
  v163 = v160 ? v147 : 0;
  v164 = objc_msgSend(v275, "count");
  if (v164 + 1 != objc_msgSend(v283, "count") || a3 != objc_msgSend(v287, "count"))
    goto LABEL_295;
  v165 = objc_msgSend(v275, "payloadOffset");
  v166 = objc_msgSend(v275, "count");
  v248 = objc_msgSend(v283, "payloadOffset");
  v167 = objc_msgSend(v283, "count");
  v246 = objc_msgSend(v287, "payloadOffset");
  v250 = objc_msgSend(v287, "count");
  v168 = v161 + v147 + v162 + v163;
  if (!v272 || (v169 = objc_msgSend(v272, "payloadOffset"), (v170 = objc_msgSend(v272, "count")) == 0))
  {
LABEL_191:
    if (v166)
    {
      v173 = (unsigned __int16 *)(a2 + v165);
      v174 = 2 * v166;
      while (v168 > *v173)
      {
        ++v173;
        v174 -= 2;
        if (!v174)
          goto LABEL_195;
      }
      goto LABEL_295;
    }
LABEL_195:
    if (v167)
    {
      v175 = 0;
      v176 = (unsigned __int16 *)(a2 + v248);
      v177 = 2 * v167;
      do
      {
        v178 = *v176;
        if (v178 < v175 || a3 < v178)
          goto LABEL_295;
        ++v176;
        v175 = v178;
        v177 -= 2;
      }
      while (v177);
    }
    objc_msgSend(v99, "blendShapeNames");
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    v180 = objc_msgSend(v136, "count");
    if (v250)
    {
      v181 = (unsigned __int16 *)(a2 + v246);
      v182 = 2 * v250 - 2;
      do
      {
        v183 = *v181++;
        v141 = v180 > v183;
        v184 = v180 <= v183 || v182 == 0;
        v182 -= 2;
      }
      while (!v184);
    }
    else
    {
      v141 = 1;
    }
    goto LABEL_215;
  }
  v171 = (unsigned __int16 *)(a2 + v169);
  v172 = 2 * v170;
  while ((unint64_t)*v171 + 2 < v168)
  {
    ++v171;
    v172 -= 2;
    if (!v172)
      goto LABEL_191;
  }
LABEL_295:

LABEL_296:
LABEL_297:

LABEL_299:
  v240 = 0;
LABEL_300:

  return v240;
}

void sub_2253C718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{

  _Unwind_Resume(a1);
}

void sub_2253C7A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_2253C7C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253C7DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, id a11, id a12)
{
  void *v12;

  if (a11)

  if (a12)
  _Unwind_Resume(a1);
}

void sub_2253C8254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void re::MeshPayload::dynamicCast(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;

  v5 = *this;
  if (objc_msgSend(v5, "conformsToProtocol:", &unk_255839AB0))
    v4 = v5;
  else
    v4 = 0;
  *a2 = v4;

}

void sub_2253C8564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::MeshPayload::makeMeshPayloadBuffers(id *this@<X0>, id *a2@<X1>, _OWORD *a3@<X8>)
{
  id v5;
  id v6;

  v6 = *this;
  v5 = *a2;
  if (v6)
  {
    objc_msgSend(v6, "meshPayloadBuffersWithDevice:", v5);
  }
  else
  {
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
  }

}

void sub_2253C85E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void re::MeshPayload::payloadBufferSizes(id *this@<X0>, _OWORD *a2@<X8>)
{
  id v3;
  id v4;

  v3 = *this;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "payloadBufferSizes");
  }
  else
  {
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }

}

void sub_2253C864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL re::`anonymous namespace'::validateBlendShapeConstants(unint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v7 = (4 * a1);
  if (a7 % v7)
    return 0;
  v8 = v7 * a6;
  v9 = 1;
  if (a3)
    v9 = 2;
  v10 = v8 * (v9 + a4 + (unint64_t)a5) > a7 || HIDWORD(a1) > a2;
  return !v10 && a2 == ((a2 + 3) & 0x1FFFFFFFCLL) && HIDWORD(a1) >= (unint64_t)(3 * a6);
}

void re::AudioFileAssetLoader::~AudioFileAssetLoader(re::AudioFileAssetLoader *this)
{
  *((_QWORD *)this + 1) = 0;
}

{
  *((_QWORD *)this + 1) = 0;
  JUMPOUT(0x2276933B8);
}

uint64_t re::AudioFileAssetLoader::registerAsset()
{
  return 0;
}

void re::AudioFileAssetLoader::unregisterAsset(re *a1, uint64_t a2)
{
  uint64_t v4;
  re::AudioAssetLoadStrategyFactory *v5;
  re::AudioService *v6;
  uint64_t v7;
  void (**v8)(re::AudioAssetLoadStrategy_Base *__hidden);
  NSObject *v9;
  void (***v10)(re::AudioAssetLoadStrategy_Base *__hidden);
  uint8_t buf[16];

  if (a2)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
    {
      v5 = (re::AudioAssetLoadStrategyFactory *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      re::AudioAssetLoadStrategyFactory::getCurrentLoadStrategy(v5, v6, &v10);
      v7 = (uint64_t)v10;
      v8 = *v10;
    }
    else
    {
      v7 = operator new();
      v8 = &off_24ED3A058;
      *(_QWORD *)v7 = &off_24ED3A058;
    }
    ((void (*)(uint64_t, uint64_t, _QWORD))v8[3])(v7, a2, *((_QWORD *)a1 + 1));
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    v9 = *re::audioLogObjects(a1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Cannot unregister asset with a null audioFileAsset", buf, 2u);
    }
  }
}

void sub_2253C87EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL re::AudioFileAssetLoader::serializeAssetBlob(int a1, uint64_t a2, id **this)
{
  _BOOL8 v5;
  re::audio *v6;
  void *v7;
  re *v8;
  re *v9;
  re::audio *v10;
  char v11;
  id v12;
  uint64_t v13;
  AVAudioPCMBuffer *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  re *v18;
  re::audio *v19;
  BOOL v20;
  NSObject *v21;
  id v23;
  __int128 buf;
  void *__p;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!re::AudioFileAsset::shouldSkipCompressionOnExport((re::AudioFileAsset *)this)
    || !re::AudioFileAssetLoader::serializeAssetBlobWithoutCompression(a2, (re::AudioFileAsset *)this))
  {
    re::AudioFileAsset::pcmBuffer((re::AudioFileAsset *)this);
    v6 = (re::audio *)objc_claimAutoreleasedReturnValue();
    if (v6)
      goto LABEL_22;
    re::AudioFileAsset::audioFormat((re::AudioFileAsset *)this);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (re *)*this[1];
    v9 = v8;
    if (v7)
    {
      if (v8)
      {
        if (re::internal::enableSignposts(0, 0))
          kdebug_trace();
        v10 = (re::audio *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v7, *((unsigned int *)this + 34));
        -[re setFramePosition:](v9, "setFramePosition:", 0);
        v23 = 0;
        v11 = -[re readIntoBuffer:error:](v9, "readIntoBuffer:error:", v10, &v23);
        v12 = v23;
        v13 = re::internal::enableSignposts(0, 0);
        if ((_DWORD)v13)
        {
          -[re length](v9, "length");
          re::audio::pcmBufferSize(v10, v14);
          v13 = kdebug_trace();
        }
        if ((v11 & 1) != 0)
        {
          v6 = v10;
        }
        else
        {
          v17 = *re::audioLogObjects((re *)v13);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v12;
            _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] AudioFileAsset could not be read into a buffer. %@", (uint8_t *)&buf, 0xCu);
          }
          v6 = 0;
        }

LABEL_21:
        if (!v6)
        {
          v19 = 0;
          goto LABEL_27;
        }
LABEL_22:
        v19 = v6;
        *(_QWORD *)&buf = v19;
        *((_QWORD *)&buf + 1) = a2;
        v26 = 0;
        v27 = 0;
        __p = 0;
        v20 = re::audio::AudioFileAssetWriter::writeToStreamWithDefaultCompression((id *)&buf);
        if (__p)
        {
          v26 = __p;
          operator delete(__p);
        }

        if (v20)
        {
          v5 = 1;
LABEL_30:

          return v5;
        }
LABEL_27:
        v21 = *re::audioLogObjects(v18);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] serializeAssetBlob failed to compress the asset and will serialize it as is.", (uint8_t *)&buf, 2u);
        }
        v5 = re::AudioFileAssetLoader::serializeAssetBlobWithoutCompression(a2, (re::AudioFileAsset *)this);
        goto LABEL_30;
      }
      v15 = *re::audioLogObjects(0);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
LABEL_16:
        v6 = 0;
        goto LABEL_21;
      }
      LOWORD(buf) = 0;
      v16 = "[CoreRE] [AudioFileAssetLoader] AudioFileAsset cannot be read into a buffer if it has no underlying AVAudioFile.";
    }
    else
    {
      v15 = *re::audioLogObjects(v8);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      LOWORD(buf) = 0;
      v16 = "[CoreRE] [AudioFileAssetLoader] AudioFileAsset cannot be read into a buffer if it has no format.";
    }
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&buf, 2u);
    goto LABEL_16;
  }
  return 1;
}

void sub_2253C8B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL re::AudioFileAssetLoader::serializeAssetBlobWithoutCompression(uint64_t a1, re::AudioFileAsset *a2)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  BOOL v22;
  re *v23;
  NSObject *v24;
  const char *v25;
  AudioStreamBasicDescription v26;
  __int128 buf;
  void *__p;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(id *)(*((_QWORD *)a2 + 1) + 32);

  v5 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    v6 = *(id *)(v5 + 32);
    if (v6)
    {
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfURL:", v6);
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length")) != 0;

    }
    else
    {
      v8 = 0;
    }

    return v8;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 48) + 64))(v5 + 48))
  {
    v13 = (id)*re::audioLogObjects(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 48) + 64))(*((_QWORD *)a2 + 1) + 48);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v14;
      _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Asset's mappedDataStream length (%zu) must be greater than 0. Attempting to serialize from an in memory pcm buffer.", (uint8_t *)&buf, 0xCu);
    }

    re::AudioFileAsset::pcmBuffer(a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v15)
    {
      v17 = v15;
      *(_QWORD *)&buf = v17;
      *((_QWORD *)&buf + 1) = a1;
      v29 = 0;
      v30 = 0;
      __p = 0;
      objc_msgSend(v17, "format");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "streamDescription");
      v20 = *(_OWORD *)v19;
      v21 = *(_OWORD *)(v19 + 16);
      *(_QWORD *)&v26.mBitsPerChannel = *(_QWORD *)(v19 + 32);
      *(_OWORD *)&v26.mSampleRate = v20;
      *(_OWORD *)&v26.mBytesPerPacket = v21;

      v26.mBytesPerFrame *= v26.mChannelsPerFrame;
      v26.mFormatFlags &= ~0x20u;
      v26.mBytesPerPacket *= v26.mChannelsPerFrame;
      v22 = re::audio::AudioFileAssetWriter::writeToStreamWithCustomOutputDescription((id *)&buf, &v26, 0);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }

      if (v22)
      {
        v8 = 1;
LABEL_23:

        return v8;
      }
      v24 = *re::audioLogObjects(v23);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
LABEL_22:
        v8 = 0;
        goto LABEL_23;
      }
      LOWORD(buf) = 0;
      v25 = "[CoreRE] [AudioFileAssetLoader] Failed to serialize asset blob without compression.";
    }
    else
    {
      v24 = *re::audioLogObjects(0);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        goto LABEL_22;
      LOWORD(buf) = 0;
      v25 = "[CoreRE] [AudioFileAssetLoader] Failed to serialize asset blob without compression. pcmBuffer is nil.";
    }
    _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, 2u);
    goto LABEL_22;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 48) + 40))(*((_QWORD *)a2 + 1) + 48);
  if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 48) + 56))(*((_QWORD *)a2 + 1) + 48, *(_QWORD *)(*((_QWORD *)a2 + 1) + 160)))return 0;
  v10 = *((_QWORD *)a2 + 1);
  v11 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)&buf = &off_24ED7C6E0;
  *((_QWORD *)&buf + 1) = v10 + 48;
  __p = 0;
  LODWORD(v29) = 0;
  v30 = 0;
  v31 = (*(uint64_t (**)(void))(v11 + 40))();
  v32 = 0;
  v8 = re::AssetHelper::readerToWriterStream((uint64_t)&buf, a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 48) + 56))(*((_QWORD *)a2 + 1) + 48, v9);
  if ((_DWORD)v29)
    (*(void (**)(_QWORD))(**((_QWORD **)&buf + 1) + 24))(*((_QWORD *)&buf + 1));
  return v8;
}

void sub_2253C8ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void re::audio::AudioFileAssetWriter::~AudioFileAssetWriter(re::audio::AudioFileAssetWriter *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }

}

uint64_t re::AudioFileAssetLoader::createRuntimeData(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  re::AudioAssetLoadStrategyFactory *v9;
  re::AudioService *v10;
  uint64_t v11;
  void (**v12)(re::AudioAssetLoadStrategy_Base *__hidden);
  NSObject *v13;
  uint64_t v14;
  void (***v16)(re::AudioAssetLoadStrategy_Base *__hidden);
  uint8_t buf[16];

  if (a2)
  {
    v8 = *((_QWORD *)a1 + 1);
    if (v8)
    {
      v9 = (re::AudioAssetLoadStrategyFactory *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      re::AudioAssetLoadStrategyFactory::getCurrentLoadStrategy(v9, v10, &v16);
      v11 = (uint64_t)v16;
      v12 = *v16;
    }
    else
    {
      v11 = operator new();
      v12 = &off_24ED3A058;
      *(_QWORD *)v11 = &off_24ED3A058;
    }
    v14 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v12[2])(v11, a2, a3, a4, *((_QWORD *)a1 + 1));
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    v13 = *re::audioLogObjects(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Cannot create runtime data with a null audioFileAsset", buf, 2u);
    }
    return 0;
  }
  return v14;
}

void sub_2253C9094(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetLoader::allocateSampleAsset(re::AudioFileAssetLoader *this)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  AVAudioPCMBuffer *v4;
  uint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  uint64_t v8;
  uint64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int32x4_t v14;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t __x;
  long double v20;
  float64x2_t v21;
  float64x2_t v22;
  int32x4_t v23;

  v1 = re::globalAllocators(this);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 168, 8);
  re::AudioFileAsset::AudioFileAsset((re::AudioFileAsset *)v2);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initStandardFormatWithSampleRate:channels:", 1, 48000.0);
  v4 = (AVAudioPCMBuffer *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v3, 1024);
  -[AVAudioPCMBuffer setFrameLength:](v4, "setFrameLength:", 1024);
  v5 = -[AVAudioPCMBuffer mutableAudioBufferList](v4, "mutableAudioBufferList");
  v6 = 0;
  v7 = (int32x4_t)xmmword_2260FF480;
  v8 = *(_QWORD *)(v5 + 16);
  v17 = (float64x2_t)vdupq_n_s64(0x3F50000000000000uLL);
  v18 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  v16 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
  do
  {
    v23 = v7;
    v9.i64[0] = v7.u32[0];
    v9.i64[1] = v7.u32[1];
    v10 = vcvtq_f64_u64(v9);
    v9.i64[0] = v23.u32[2];
    v9.i64[1] = v23.u32[3];
    v11 = vcvtq_f64_u64(v9);
    v22 = vmulq_f64(vmulq_f64(vaddq_f64(v11, v11), v18), v17);
    __x = vmulq_f64(vmulq_f64(vaddq_f64(v10, v10), v18), v17);
    v20 = sin(__x.f64[1]);
    v12.f64[0] = sin(__x.f64[0]);
    v12.f64[1] = v20;
    v21 = v12;
    __x.f64[0] = sin(v22.f64[1]);
    v13.f64[0] = sin(v22.f64[0]);
    v13.f64[1] = __x.f64[0];
    *(float32x4_t *)(v8 + v6) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v21, v16)), vmulq_f64(v13, v16));
    v14.i64[0] = 0x400000004;
    v14.i64[1] = 0x400000004;
    v7 = vaddq_s32(v23, v14);
    v6 += 16;
  }
  while (v6 != 4096);
  *(_QWORD *)(v5 + 8) = 0x100000000001;
  re::AudioFileAsset::loadBuffer((re::AudioFileAsset *)v2, v4);
  *(_BYTE *)(v2 + 52) = 0;
  *(_BYTE *)(v2 + 101) = 0;
  *(_DWORD *)(v2 + 128) = 6553601;
  *(_DWORD *)(v2 + 96) = 0;

  return v2;
}

void sub_2253C9288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetLoader::shouldCompress(re::AudioFileAssetLoader *this, void *a2)
{
  return 0;
}

void re::AudioFileAssetLoader::unloadAsset(re::AudioFileAssetLoader *this, re::AudioFileAsset *a2)
{
  os_log_t *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  re *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (os_log_t *)re::audioLogObjects(this);
  v4 = *v3;
  if (a2)
  {
    v5 = v4;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 24);
      v9 = 134217984;
      v10 = v6;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAsset] Unloaded audio asset: %llu", (uint8_t *)&v9, 0xCu);
    }

    v8 = re::globalAllocators(v7)[2];
    re::AudioFileAsset::~AudioFileAsset(a2);
    (*(void (**)(uint64_t, re::AudioFileAsset *))(*(_QWORD *)v8 + 40))(v8, a2);
  }
  else if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v9) = 0;
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Cannot unload asset with a null audioFileAsset", (uint8_t *)&v9, 2u);
  }
}

BOOL re::AudioFileAssetLoader::isSupportedSourceExtension(re::AudioFileAssetLoader *this, char *a2)
{
  void **v3;
  void **v4;
  const char **v5;
  uint64_t v6;
  const char *v7;
  int v8;
  _BOOL8 v9;
  BOOL v10;
  void *__p[2];
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  const char **v16;

  re::AudioFileAsset::supportedExtensions((uint64_t)&v14);
  v3 = __p;
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  if ((v13 & 0x80u) == 0)
    v4 = (void **)((char *)__p + v13);
  else
    v4 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if ((v13 & 0x80u) != 0)
    v3 = (void **)__p[0];
  while (v3 != v4)
  {
    *(_BYTE *)v3 = __tolower(*(char *)v3);
    v3 = (void **)((char *)v3 + 1);
  }
  if (v15)
  {
    v5 = v16;
    v6 = 8 * v15 - 8;
    do
    {
      v7 = *v5++;
      v8 = strcmp(a2, v7);
      v9 = v8 == 0;
      if (v8)
        v10 = v6 == 0;
      else
        v10 = 1;
      v6 -= 8;
    }
    while (!v10);
  }
  else
  {
    v9 = 0;
  }
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (v14 && v16)
    (*(void (**)(void))(*(_QWORD *)v14 + 40))();
  return v9;
}

void sub_2253C94B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15)
  {
    if (a19)
      (*(void (**)(void))(*(_QWORD *)a15 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void re::AudioFileAssetLoader::makeSharedResourcePayload(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  re *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[8];

  if (*(_BYTE *)(a1 + 56))
  {
    if ((*(_BYTE *)(a1 + 72) & 1) != 0)
      v4 = *(_QWORD *)(a1 + 80);
    else
      v4 = a1 + 73;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  v6 = *(id *)(*(_QWORD *)(a1 + 8) + 176);

  if (v6)
  {
    v7 = *(id *)(*(_QWORD *)(a1 + 8) + 176);
    re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    HIDWORD(v14) = *(_DWORD *)(a1 + 128);
    LODWORD(v14) = *(_DWORD *)(a1 + 108);
    re::AudioPayload::makeBufferPayloadWithProperties(v7, v8, *(unsigned int *)(a1 + 136), *(unsigned __int8 *)(a1 + 52), *(_DWORD *)(a1 + 96), v5, *(_BYTE *)(a1 + 100), *(_DWORD *)(a1 + 104), (REAudioPayload **)buf, *(float *)(a1 + 48), *(double *)(a1 + 112), v14, *(_DWORD *)(a1 + 132), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
LABEL_13:
    v12 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    *a2 = v12;

    goto LABEL_14;
  }
  v9 = *(id *)(*(_QWORD *)(a1 + 8) + 32);

  if (v9)
  {
    v7 = *(id *)(*(_QWORD *)(a1 + 8) + 32);
    objc_msgSend(v7, "path");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    re::AudioPayload::makeFilePayloadWithProperties((uint64_t)v8, *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 96), v5, *(unsigned __int8 *)(a1 + 100), *(unsigned int *)(a1 + 104), *(_DWORD *)(a1 + 108), *(_DWORD *)(a1 + 128), (REAudioPayload **)buf, *(float *)(a1 + 48), *(double *)(a1 + 112), *(double *)(a1 + 120), *(_DWORD *)(a1 + 132), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
    goto LABEL_13;
  }
  v10 = *(id *)(*(_QWORD *)(a1 + 8) + 184);

  if (v10)
  {
    v7 = *(id *)(*(_QWORD *)(a1 + 8) + 184);
    re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    re::AudioPayload::makeFileBufferPayloadWithProperties(v7, v8, *(unsigned int *)(a1 + 136), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), *(unsigned __int8 *)(a1 + 52), *(_DWORD *)(a1 + 96), v5, *(_BYTE *)(a1 + 100), (REAudioPayload **)buf, *(float *)(a1 + 48), *(double *)(a1 + 112), *(_QWORD *)(a1 + 104), HIDWORD(*(_QWORD *)(a1 + 104)), *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 132), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
    goto LABEL_13;
  }
  v13 = *re::audioLogObjects(v11);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] makeSharedResourcePayload was unexpectedly called on an asset without playback data.", buf, 2u);
  }
  *a2 = 0;
LABEL_14:

}

void sub_2253C9744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetLoader::postInitializeAssetFromPayload(uint64_t a1, id *a2, uint64_t a3)
{
  re *v6;
  id v7;
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  mach_port_name_t v20;
  re *v21;
  mach_error_t v22;
  NSObject *v23;
  void *v24;
  BOOL v25;
  id v26;
  id v27;
  _anonymous_namespace_ *v28;
  void *v29;
  BOOL v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  re *v37;
  NSObject *v38;
  id v39;
  _anonymous_namespace_ *v40;
  uint64_t v41;
  int v42;
  double v43;
  int v44;
  _BYTE *v45;
  char *v46;
  NSObject *v47;
  uint64_t v48;
  const char *v50;
  void *v51;
  BOOL v52;
  id v53;
  id v54;
  BOOL v55;
  re *v56;
  NSObject *v57;
  _anonymous_namespace_ *v58;
  int v59;
  double v60;
  int v61;
  _BYTE *v62;
  char *v63;
  char **v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  re *v72;
  NSObject *v73;
  uint64_t v74;
  void *v75;
  BOOL v76;
  re *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  re *v86;
  uint64_t v87;
  _anonymous_namespace_ *v88;
  uint64_t v89;
  int v90;
  double v91;
  int v92;
  _BYTE *v93;
  char *v94;
  NSObject *v95;
  char *v96;
  char **v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  char **v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  id v113;
  id v114;
  uint64_t v115;
  id v116;
  _OWORD v117[2];
  id v118;
  uint8_t buf[4];
  _BYTE v120[46];
  _BYTE v121[14];
  _BYTE v122[44];
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  re::AudioPayload::dynamicCast(a2, &v118);
  if (!*a2 || !v118)
  {
    v47 = *re::audioLogObjects(v6);
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    *(_WORD *)buf = 0;
    v50 = "[CoreRE] [AudioFileAssetLoader] Cannot make AudioFileAsset with bad payload.";
LABEL_55:
    _os_log_error_impl(&dword_224FE9000, v47, OS_LOG_TYPE_ERROR, v50, buf, 2u);
    goto LABEL_28;
  }
  if (!a3)
  {
    v47 = *re::audioLogObjects(v6);
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    *(_WORD *)buf = 0;
    v50 = "[CoreRE] [AudioFileAssetLoader] Invalid asset pointer when initializing asset from payload.";
    goto LABEL_55;
  }
  v7 = v118;
  *(_BYTE *)(a3 + 52) = objc_msgSend(v7, "inputMode");

  v8 = v118;
  objc_msgSend(v8, "referenceLevel");
  *(_DWORD *)(a3 + 48) = v9;

  v10 = v118;
  *(_DWORD *)(a3 + 96) = objc_msgSend(v10, "loopCount");

  v11 = v118;
  *(_BYTE *)(a3 + 100) = objc_msgSend(v11, "streaming");

  v12 = v118;
  *(_DWORD *)(a3 + 104) = objc_msgSend(v12, "normalizationMode");

  v13 = v118;
  *(_DWORD *)(a3 + 108) = objc_msgSend(v13, "calibrationMode");

  v14 = v118;
  objc_msgSend(v14, "calibrationLevel");
  *(_QWORD *)(a3 + 112) = v15;

  v16 = v118;
  *(_DWORD *)(a3 + 128) = objc_msgSend(v16, "layoutTag");

  v17 = v118;
  objc_msgSend(v17, "targetLUFS");
  *(_QWORD *)(a3 + 120) = v18;

  v19 = v118;
  *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) = objc_msgSend(v19, "audioAssetID");

  v20 = objc_msgSend(v118, "taskToken");
  v21 = (re *)mach_port_mod_refs(*MEMORY[0x24BDAEC58], v20, 0, 1);
  v22 = (int)v21;
  if ((_DWORD)v21)
  {
    v23 = (id)*re::audioLogObjects(v21);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v96 = mach_error_string(v22);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v120 = v96;
      _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Failed to increment the taskToken ref count, with KERN error: %s", buf, 0xCu);
    }

  }
  *(_DWORD *)(a3 + 132) = v20;
  objc_msgSend(v118, "mixGroupName");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v24 == 0;

  if (!v25)
  {
    v26 = v118;
    objc_msgSend(v26, "mixGroupName");
    v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v28 = (_anonymous_namespace_ *)objc_msgSend(v27, "UTF8String");
    buf[0] = 1;
    *(_QWORD *)&v120[4] = *(_QWORD *)&v117[0];
    *(_QWORD *)&v120[28] = *((_QWORD *)&v117[1] + 1);
    *(_OWORD *)&v120[12] = *(_OWORD *)((char *)v117 + 8);
    memset(v117, 0, sizeof(v117));
    re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a3 + 56), buf);
    if (buf[0] && *(_QWORD *)&v120[4])
    {
      if ((v120[12] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v120[4] + 40))();
      memset(&v120[4], 0, 32);
    }
    if (*(_QWORD *)&v117[0])
    {
      if ((BYTE8(v117[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v117[0] + 40))();
      memset(v117, 0, sizeof(v117));
    }

  }
  objc_msgSend(v118, "pcmBuffer");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v29 == 0;

  if (v30)
  {
    objc_msgSend(v118, "filePath");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = v51 == 0;

    if (v52)
    {
      objc_msgSend(v118, "fileBuffer");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = v75 == 0;

      if (!v76)
      {
        v78 = v118;
        objc_msgSend(v78, "fileBuffer");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_storeStrong((id *)(*(_QWORD *)(a3 + 8) + 184), v79);

        v80 = v118;
        objc_msgSend(v80, "bufferSize");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) = objc_msgSend(v81, "unsignedLongLongValue");

        v82 = v118;
        objc_msgSend(v82, "length");
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)(a3 + 136) = objc_msgSend(v83, "longLongValue");

        v84 = v118;
        objc_msgSend(v84, "format");
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_storeStrong((id *)(*(_QWORD *)(a3 + 8) + 8), v85);

        v38 = (id)*re::audioLogObjects(v86);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          re::AudioFileAsset::sharableFileBuffer((re::AudioFileAsset *)a3);
          v116 = (id)objc_claimAutoreleasedReturnValue();
          v87 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 40);
          re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a3);
          v88 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
          v89 = *(_QWORD *)(a3 + 136);
          v90 = *(unsigned __int8 *)(a3 + 52);
          v91 = *(float *)(a3 + 48);
          v92 = *(_DWORD *)(a3 + 96);
          v93 = (char *)v117 + 8;
          if (*(_BYTE *)(a3 + 56))
            v93 = (_BYTE *)(a3 + 72);
          if ((*v93 & 1) != 0)
          {
            if (*(_BYTE *)(a3 + 56))
              v105 = (char **)(a3 + 80);
            else
              v105 = (char **)&v117[1];
            v94 = *v105;
          }
          else if (*(_BYTE *)(a3 + 56))
          {
            v94 = (char *)(a3 + 73);
          }
          else
          {
            v94 = (char *)v117 + 9;
          }
          v106 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
          v107 = *(_DWORD *)(a3 + 128);
          v109 = *(_QWORD *)(a3 + 112);
          v108 = *(_QWORD *)(a3 + 120);
          v111 = *(_DWORD *)(a3 + 104);
          v110 = *(_DWORD *)(a3 + 108);
          v112 = *(unsigned __int8 *)(a3 + 100);
          *(_DWORD *)buf = 138415874;
          *(_QWORD *)v120 = v116;
          *(_WORD *)&v120[8] = 2048;
          *(_QWORD *)&v120[10] = v87;
          *(_WORD *)&v120[18] = 2112;
          *(_QWORD *)&v120[20] = v88;
          *(_WORD *)&v120[28] = 2048;
          *(_QWORD *)&v120[30] = v89;
          *(_WORD *)&v120[38] = 1024;
          *(_DWORD *)&v120[40] = v90;
          *(_WORD *)&v120[44] = 2048;
          *(double *)v121 = v91;
          *(_WORD *)&v121[8] = 1024;
          *(_DWORD *)&v121[10] = v92;
          *(_WORD *)v122 = 2080;
          *(_QWORD *)&v122[2] = v94;
          *(_WORD *)&v122[10] = 1024;
          *(_DWORD *)&v122[12] = v112;
          *(_WORD *)&v122[16] = 1024;
          *(_DWORD *)&v122[18] = v111;
          *(_WORD *)&v122[22] = 1024;
          *(_DWORD *)&v122[24] = v110;
          *(_WORD *)&v122[28] = 2048;
          *(_QWORD *)&v122[30] = v109;
          *(_WORD *)&v122[38] = 1024;
          *(_DWORD *)&v122[40] = v107;
          v123 = 2048;
          v124 = v108;
          v125 = 2048;
          v126 = v106;
          _os_log_impl(&dword_224FE9000, v38, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Recovered file buffer asset with buffer=%@, bufferSize=%zu, format=%@, length=%llu, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, layoutTag=%u, targetLUFS=%0.2f, audioAssetID=%llu from audio payload.", buf, 0x80u);
          if (*(_QWORD *)&v117[0] && (BYTE8(v117[0]) & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v117[0] + 40))();

        }
        goto LABEL_49;
      }
      v95 = *re::audioLogObjects(v77);
      v48 = 0;
      if (!os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        goto LABEL_29;
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v95, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Cannot make asset from payload that contains neither buffer nor file path.", buf, 2u);
    }
    else
    {
      v53 = v118;
      objc_msgSend(v53, "filePath");
      v54 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v55 = re::AudioFileAsset::prepareToLoadFrom((re::AudioFileAsset *)a3, (const char *)objc_msgSend(v54, "UTF8String"));

      v57 = (id)*re::audioLogObjects(v56);
      v38 = v57;
      if (v55)
      {
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          re::AudioFileAsset::localFileURL((re::AudioFileAsset *)a3);
          v58 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
          v59 = *(unsigned __int8 *)(a3 + 52);
          v60 = *(float *)(a3 + 48);
          v61 = *(_DWORD *)(a3 + 96);
          v62 = (char *)v117 + 8;
          if (*(_BYTE *)(a3 + 56))
            v62 = (_BYTE *)(a3 + 72);
          if ((*v62 & 1) != 0)
          {
            if (*(_BYTE *)(a3 + 56))
              v97 = (char **)(a3 + 80);
            else
              v97 = (char **)&v117[1];
            v63 = *v97;
          }
          else if (*(_BYTE *)(a3 + 56))
          {
            v63 = (char *)(a3 + 73);
          }
          else
          {
            v63 = (char *)v117 + 9;
          }
          v98 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
          v99 = *(_DWORD *)(a3 + 128);
          v101 = *(_QWORD *)(a3 + 112);
          v100 = *(_QWORD *)(a3 + 120);
          v103 = *(_DWORD *)(a3 + 104);
          v102 = *(_DWORD *)(a3 + 108);
          v104 = *(unsigned __int8 *)(a3 + 100);
          *(_DWORD *)buf = 138415106;
          *(_QWORD *)v120 = v58;
          *(_WORD *)&v120[8] = 1024;
          *(_DWORD *)&v120[10] = v59;
          *(_WORD *)&v120[14] = 2048;
          *(double *)&v120[16] = v60;
          *(_WORD *)&v120[24] = 1024;
          *(_DWORD *)&v120[26] = v61;
          *(_WORD *)&v120[30] = 2080;
          *(_QWORD *)&v120[32] = v63;
          *(_WORD *)&v120[40] = 1024;
          *(_DWORD *)&v120[42] = v104;
          *(_WORD *)v121 = 1024;
          *(_DWORD *)&v121[2] = v103;
          *(_WORD *)&v121[6] = 1024;
          *(_DWORD *)&v121[8] = v102;
          *(_WORD *)&v121[12] = 2048;
          *(_QWORD *)v122 = v101;
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = v99;
          *(_WORD *)&v122[14] = 2048;
          *(_QWORD *)&v122[16] = v100;
          *(_WORD *)&v122[24] = 2048;
          *(_QWORD *)&v122[26] = v98;
          _os_log_impl(&dword_224FE9000, v38, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Recovered file asset with path=%@, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, layoutTag=%u, targetLUFS=%0.2f, audioAssetID=%llu from audio payload.", buf, 0x62u);
          if (*(_QWORD *)&v117[0] && (BYTE8(v117[0]) & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v117[0] + 40))();

        }
        goto LABEL_49;
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        v113 = v118;
        objc_msgSend(v113, "filePath");
        v114 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v115 = objc_msgSend(v114, "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v120 = v115;
        _os_log_error_impl(&dword_224FE9000, v38, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Failed to load audio file at '%s'", buf, 0xCu);

      }
    }
LABEL_28:
    v48 = 0;
    goto LABEL_29;
  }
  v31 = v118;
  objc_msgSend(v31, "pcmBuffer");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(*(_QWORD *)(a3 + 8) + 176), v32);

  v33 = v118;
  objc_msgSend(v33, "format");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(*(_QWORD *)(a3 + 8) + 8), v34);

  v35 = v118;
  objc_msgSend(v35, "length");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a3 + 136) = objc_msgSend(v36, "longLongValue");

  v38 = (id)*re::audioLogObjects(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    v39 = *(id *)(*(_QWORD *)(a3 + 8) + 176);
    re::AudioFileAsset::audioFormat((re::AudioFileAsset *)a3);
    v40 = (_anonymous_namespace_ *)(id)objc_claimAutoreleasedReturnValue();
    v41 = *(_QWORD *)(a3 + 136);
    v42 = *(unsigned __int8 *)(a3 + 52);
    v43 = *(float *)(a3 + 48);
    v44 = *(_DWORD *)(a3 + 96);
    v45 = (char *)v117 + 8;
    if (*(_BYTE *)(a3 + 56))
      v45 = (_BYTE *)(a3 + 72);
    if ((*v45 & 1) != 0)
    {
      if (*(_BYTE *)(a3 + 56))
        v64 = (char **)(a3 + 80);
      else
        v64 = (char **)&v117[1];
      v46 = *v64;
    }
    else if (*(_BYTE *)(a3 + 56))
    {
      v46 = (char *)(a3 + 73);
    }
    else
    {
      v46 = (char *)v117 + 9;
    }
    v65 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
    v66 = *(_DWORD *)(a3 + 128);
    v68 = *(_QWORD *)(a3 + 112);
    v67 = *(_QWORD *)(a3 + 120);
    v70 = *(_DWORD *)(a3 + 104);
    v69 = *(_DWORD *)(a3 + 108);
    v71 = *(unsigned __int8 *)(a3 + 100);
    *(_DWORD *)buf = 138415618;
    *(_QWORD *)v120 = v39;
    *(_WORD *)&v120[8] = 2112;
    *(_QWORD *)&v120[10] = v40;
    *(_WORD *)&v120[18] = 2048;
    *(_QWORD *)&v120[20] = v41;
    *(_WORD *)&v120[28] = 1024;
    *(_DWORD *)&v120[30] = v42;
    *(_WORD *)&v120[34] = 2048;
    *(double *)&v120[36] = v43;
    *(_WORD *)&v120[44] = 1024;
    *(_DWORD *)v121 = v44;
    *(_WORD *)&v121[4] = 2080;
    *(_QWORD *)&v121[6] = v46;
    *(_WORD *)v122 = 1024;
    *(_DWORD *)&v122[2] = v71;
    *(_WORD *)&v122[6] = 1024;
    *(_DWORD *)&v122[8] = v70;
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = v69;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v68;
    *(_WORD *)&v122[28] = 1024;
    *(_DWORD *)&v122[30] = v66;
    *(_WORD *)&v122[34] = 2048;
    *(_QWORD *)&v122[36] = v67;
    v123 = 2048;
    v124 = v65;
    _os_log_impl(&dword_224FE9000, v38, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Recovered pcm buffer asset with buffer=%@, format=%@, length=%llu, inputMode=%d, referenceLevel=%0.2f, loopCount=%d, mixGroupName=%s, streaming=%d, normalizationMode=%d, calibrationMode=%d, calibrationLevel=%0.2f, layoutTag=%u, targetLUFS=%0.2f, audioAssetID=%llu from audio payload.", buf, 0x76u);
    if (*(_QWORD *)&v117[0] && (BYTE8(v117[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v117[0] + 40))();

  }
LABEL_49:

  v72 = (re *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24));
  if ((v72 & 1) != 0)
  {
    v73 = (id)*re::audioLogObjects(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      v74 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v120 = v74;
      _os_log_impl(&dword_224FE9000, v73, OS_LOG_TYPE_DEFAULT, "Audio asset with ID %llu has already been registered in PHASE. Marking as completely loaded.", buf, 0xCu);
    }

    v48 = 1;
    *(_WORD *)(a3 + 153) = 1;
  }
  else
  {
    re::AudioFileAsset::completeLoad((re::AudioFileAsset *)a3, *(AudioSceneService **)(a1 + 8));
    v48 = 1;
  }
LABEL_29:

  return v48;
}

void sub_2253CA33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void re::AudioFileAssetLoader::resourceDidUpdate(re *a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t v8;
  re::AudioAssetLoadStrategyFactory *v9;
  re::AudioService *v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  uint8_t buf[16];

  if (a2 && *a3)
  {
    v8 = *((_QWORD *)a1 + 1);
    if (v8)
    {
      v9 = (re::AudioAssetLoadStrategyFactory *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      re::AudioAssetLoadStrategyFactory::getCurrentLoadStrategy(v9, v10, buf);
      v11 = *(_QWORD *)buf;
    }
    else
    {
      v11 = operator new();
      *(_QWORD *)v11 = &off_24ED3A058;
    }
    v13 = *a3;
    (*(void (**)(uint64_t, uint64_t, id *, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, a2, &v13, a4, *((_QWORD *)a1 + 1));

    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    v12 = *re::audioLogObjects(a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader] Cannot update shared AudioFileAsset with bad arguments.", buf, 2u);
    }
  }
}

void sub_2253CA604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetLoader::introspectionType(re::AudioFileAssetLoader *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    re::introspect<re::AudioFileAsset>(void)::info = re::introspect_AudioFileAsset(0);
  }
  return re::introspect<re::AudioFileAsset>(void)::info;
}

void sub_2253CA684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAssetLoader::assetNonIntrospectionNonSharedDataByteSize(re::AudioFileAssetLoader *this, _QWORD *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v3 = (id)*re::audioLogObjects(this);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a2[1] + 24);
    v5 = a2[20];
    v7 = 134218240;
    v8 = v4;
    v9 = 2048;
    v10 = v5;
    _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader] Asset: %llu has an in memory byte size of: %lu", (uint8_t *)&v7, 0x16u);
  }

  return a2[20];
}

void sub_2253CA820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2253CA97C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_2253CAACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253CABC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253CAC78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253CAD28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253CAE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v13;
  void *v14;

  if (a10)

  v13 = 56;
  while (1)
  {
    v14 = *(void **)(v10 + v13);
    if (v14)
    {

      *(_QWORD *)(v10 + v13) = 0;
    }
    v13 -= 8;
    if (v13 == -8)
      _Unwind_Resume(a1);
  }
}

void sub_2253CB008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253CB118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2253CB274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_2253CB384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t re::DirectMeshPayload::connectionId(id *this)
{
  id v1;
  uint64_t v2;
  void *v4;

  objc_msgSend(*this, "clientObject");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  v4 = v1;
  v2 = re::directMeshConnectionId(&v4);

  return v2;
}

void *re::DirectMeshPayload::directMesh(id *this)
{
  void *v1;

  objc_msgSend(*this, "directMesh");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void re::DirectMeshPayload::make(uint64_t a1@<X0>, REDirectMeshPayload **a2@<X8>)
{
  REDirectMeshPayload *v3;

  v3 = -[REDirectMeshPayload initWithDirectMesh:]([REDirectMeshPayload alloc], "initWithDirectMesh:", a1);
  *a2 = v3;

}

void re::DirectMeshPayload::dynamicCast(id *this@<X0>, _QWORD *a2@<X8>)
{
  char isKindOfClass;
  void *v5;
  id v6;
  id v7;

  v7 = *this;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v7;
  if ((isKindOfClass & 1) != 0)
  {
    v6 = v7;
    v5 = v7;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;

}

void sub_2253CB4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *re::DirectTexturePayload::directTexture(id *this)
{
  void *v1;

  objc_msgSend(*this, "directTexture");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void re::DirectTexturePayload::make(uint64_t a1@<X0>, REDirectTexturePayload **a2@<X8>)
{
  REDirectTexturePayload *v3;

  v3 = -[REDirectTexturePayload initWithDirectTexture:]([REDirectTexturePayload alloc], "initWithDirectTexture:", a1);
  *a2 = v3;

}

void re::DirectTexturePayload::dynamicCast(id *this@<X0>, _QWORD *a2@<X8>)
{
  char isKindOfClass;
  void *v5;
  id v6;
  id v7;

  v7 = *this;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v7;
  if ((isKindOfClass & 1) != 0)
  {
    v6 = v7;
    v5 = v7;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;

}

void sub_2253CB5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t *re::TimelineAsset::assetType(re::TimelineAsset *this)
{
  unsigned __int8 v1;

  {
    re::TimelineAsset::assetType(void)::type = (uint64_t)"Timeline";
    qword_2558278C8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::TimelineAsset::assetType(void)::type);
  }
  return &re::TimelineAsset::assetType(void)::type;
}

uint64_t *re::allocInfo_TimelineAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254104478);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104478))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541044C8, 0);
    *(uint64_t *)((char *)&qword_2541044D8 + 6) = 0;
    qword_2541044D8 = 0;
    qword_2541044E8 = 0;
    qword_2541044F0 = 0xFFFFFFFFLL;
    qword_2541044C8 = (uint64_t)&off_24ED7DAA8;
    qword_2541044F8 = (uint64_t)"TimelineAsset";
    dword_254104500 = 0;
    xmmword_254104508 = 0u;
    unk_254104518 = 0u;
    xmmword_254104528 = 0u;
    qword_254104538 = 0;
    __cxa_guard_release(&qword_254104478);
  }
  return &qword_2541044C8;
}

void re::initInfo_TimelineAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const char *v18;
  unint64_t v19;
  const char *v20;

  *(_QWORD *)&v17 = 0x79041F6188FFAE1ELL;
  *((_QWORD *)&v17 + 1) = "TimelineAsset";
  re::StringID::destroyString((re::StringID *)&v17);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254104470);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104470);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = atomic_load((unsigned __int8 *)&qword_254104480);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254104480))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104488, 0);
        *(uint64_t *)((char *)&qword_254104498 + 6) = 0;
        qword_254104498 = 0;
        *(_QWORD *)&xmmword_2541044A8 = 0;
        *((_QWORD *)&xmmword_2541044A8 + 1) = 0xFFFFFFFFLL;
        qword_254104488 = (uint64_t)&off_24ED30800;
        qword_2541044C0 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541044B8);
        __cxa_guard_release(&qword_254104480);
      }
      if ((_MergedGlobals_105 & 1) == 0)
      {
        _MergedGlobals_105 = 1;
        v8 = re::introspect_TimelineAssetData((re::IntrospectionBase **)1);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104488, 0);
        qword_254104498 = 0x800000001;
        dword_2541044A0 = 8;
        word_2541044A4 = 0;
        *(_QWORD *)&xmmword_2541044A8 = 0;
        *((_QWORD *)&xmmword_2541044A8 + 1) = 0xFFFFFFFFLL;
        qword_254104488 = (uint64_t)&off_24ED30800;
        qword_2541044B8 = v8;
        qword_2541044C0 = 0;
        re::IntrospectionRegistry::add(v9, v10);
        re::getPrettyTypeName((re *)&qword_254104488, (const re::IntrospectionBase *)&v17);
        if ((BYTE8(v17) & 1) != 0)
          v11 = v18;
        else
          v11 = (char *)&v17 + 9;
        if ((_QWORD)v17 && (BYTE8(v17) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v17 + 40))();
        if (v19 >> 1 == 94623636 && (v20 == "char*" || !strcmp(v20, "char*")))
        {
          v12 = v17;
        }
        else
        {
          v17 = *(_OWORD *)(v8 + 32);
          v12 = v16;
        }
        xmmword_2541044A8 = v12;
        re::StringID::destroyString((re::StringID *)&v19);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "m_timelineData";
      *(_QWORD *)(v13 + 16) = &qword_254104488;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254104468 = v13;
      __cxa_guard_release(&qword_254104470);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254104468;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TimelineAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TimelineAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TimelineAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TimelineAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v15;
}

void re::internal::defaultConstruct<re::TimelineAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::TimelineAsset>(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t re::introspect_TimelineAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimelineAsset", (uint64_t (*)(re::internal *))re::allocInfo_TimelineAsset, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TimelineAsset>, this);
}

__guard re::TimelineAssetLoader::introspectionType(re::TimelineAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::TimelineAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"TimelineAsset", (uint64_t (*)(re::internal *))re::allocInfo_TimelineAsset, (re::IntrospectionBase *(*)(void))re::initInfo_TimelineAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TimelineAsset>, 0);
    }
  }
  return v2[65];
}

uint64_t re::TimelineAssetLoader::registerAsset(re::TimelineAssetLoader *this, void *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t *v4;
  re::Allocator *v5;
  const re::TimelineAssetData *v6;

  v4 = re::globalAllocators(this);
  v6 = (const re::TimelineAssetData *)*((_QWORD *)a2 + 2);
  if (!v6)
  {
    v6 = (const re::TimelineAssetData *)re::internal::convertToTimeline(*((re::internal **)a2 + 1), (const re::TimelineAssetData *)v4[2], v5);
    *((_QWORD *)a2 + 2) = v6;
    *(_QWORD *)a2 = v6;
  }
  return re::internal::registerAndResolveTimelineDependencies(*((re::internal **)a2 + 1), v6, v5);
}

re **re::TimelineAssetLoader::allocateSampleAsset(re::TimelineAssetLoader *this)
{
  uint64_t *v1;
  uint64_t v2;
  re *v3;
  uint64_t *v4;
  re::Allocator *v5;
  re *v6;
  uint64_t *v7;
  re **result;

  v1 = re::globalAllocators(this);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 120, 8);
  *(_QWORD *)v2 = off_24ED36578;
  *(_QWORD *)(v2 + 8) = 11;
  *(_BYTE *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = &str_110;
  *(_BYTE *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)v2 = &off_24ED364A0;
  v4 = re::globalAllocators(v3);
  v6 = (re *)re::internal::convertToTimeline((re::internal *)v2, (const re::TimelineAssetData *)v4[2], v5);
  v7 = re::globalAllocators(v6);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 24, 8);
  *result = v6;
  result[1] = (re *)v2;
  result[2] = v6;
  return result;
}

re *re::TimelineAssetLoader::unregisterAsset(re *this, _QWORD *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t *v4;
  Allocator *v5;

  if (a2[2])
  {
    v4 = re::globalAllocators(this);
    this = (re *)re::internal::destroy(a2[2], (re::Timeline *)v4[2], v5);
    a2[2] = 0;
  }
  *a2 = 0;
  return this;
}

uint64_t re::TimelineAssetLoader::unloadAsset(re::TimelineAssetLoader *this, _QWORD *a2)
{
  void (***v3)(_QWORD);
  re *v4;
  uint64_t *v5;
  Allocator *v6;
  uint64_t *v7;

  v3 = (void (***)(_QWORD))a2[1];
  if (v3)
  {
    (**v3)(v3);
  }
  a2[1] = 0;
  if (a2[2])
  {
    v5 = re::globalAllocators(v4);
    v4 = (re *)re::internal::destroy(a2[2], (re::Timeline *)v5[2], v6);
    a2[2] = 0;
    *a2 = 0;
  }
  v7 = re::globalAllocators(v4);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7[2] + 40))(v7[2], a2);
}

BOOL re::TimelineAssetLoader::isSupportedSourceExtension(re::TimelineAssetLoader *this, const char *__s1)
{
  return !strcmp(__s1, "retimeline") || strcmp(__s1, "bvh") == 0;
}

uint64_t re::TimelineAssetLoader::findDependencies@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = a1[1];
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2);
  return result;
}

uint64_t re::TimelineAssetLoader::internalFindAssetHandleFields@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = a1[1];
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2);
  return result;
}

void re::TimelineAssetLoader::~TimelineAssetLoader(re::TimelineAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

void re::MeshDeformationRuntimeData::update<re::MeshAsset>(re::MeshDeformationRuntimeData *this, uint64_t a2, uint64_t a3, uint64_t **a4, unint64_t a5, re::MeshNameMap *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t *v14;

  if (*((_QWORD *)this + 1))
  {
    v13 = *((_QWORD *)this + 2);
  }
  else
  {
    v14 = *a4;
    *(_QWORD *)this = a2;
    if (!v14)
    {
    }
    *((_QWORD *)this + 1) = v14;
    *((_OWORD *)this + 1) = xmmword_2260FF4D0;
    v13 = -1;
  }
  if (v13 != a7)
  {
    re::MeshDeformationRuntimeData::clear(this);
    re::MeshDeformationRuntimeData::rebuildRuntimeData<re::MeshAsset>((uint64_t *)this, a3, (uint64_t)a4, a5, a6);
    *((_QWORD *)this + 2) = a7;
  }
}

_QWORD *re::MeshDeformationRuntimeData::clear(re::MeshDeformationRuntimeData *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  v3 = (_QWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 2) = -1;
  if (v2)
  {
    v4 = 8 * v2;
    v5 = (_DWORD *)(*((_QWORD *)this + 6) + 4);
    do
    {
      if ((*v5 & 0xFFFFFF) != 0)
        re::DeformationManager::removeDeformationStack(*(re **)this, *(_QWORD *)(v5 - 1));
      v5 += 2;
      v4 -= 8;
    }
    while (v4);
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    if (*v3)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 6));
      *v3 = 0;
      v3[1] = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    if (*((_QWORD *)this + 8))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 9));
      *((_QWORD *)this + 8) = 0;
      *((_QWORD *)this + 9) = 0;
    }
    *((_QWORD *)this + 7) = 0;
  }
  v8 = *((_QWORD *)this + 10);
  if (v8)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  v9 = *((_QWORD *)this + 13);
  if (v9)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  result = re::FixedArray<re::MeshDeformationRuntimeData::DeformationMapping>::deinit((_QWORD *)this + 16);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t re::MeshDeformationRuntimeData::rebuildRuntimeData<re::MeshAsset>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, re::MeshNameMap *a5)
{
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _anonymous_namespace_ *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _anonymous_namespace_ *v22;
  uint64_t i;
  unint64_t started;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  _DWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  const char **v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  _BOOL4 v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t j;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unsigned __int8 *v100;
  _QWORD *v101;
  re::MeshDeformationRuntimeData::DeformationMappingCounter *v102;
  re::MeshDeformationRuntimeData::DeformationMappingCounter *v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t *v107;
  unsigned __int8 *v108;
  unint64_t v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int v112;
  unint64_t **v113;
  unint64_t v114;
  uint64_t *v115;
  re::MeshNameMap *v116;
  _QWORD v117[2];
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[28];
  __int16 v122;
  unint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  _BYTE v126[12];
  __int16 v127;
  int v128;
  __int16 v129;
  uint64_t *v130;
  __int16 v131;
  uint64_t v132;
  uint8_t buf[16];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;

  v7 = a3;
  v138 = *MEMORY[0x24BDAC8D0];
  re::MeshDeformationAssetLoader::initializeUsedDeformers(a2, a3);
  v116 = a5;
  v9 = *((_QWORD *)a5 + 27);
  v10 = v9;
  v11 = (unint64_t)(a1 + 7);
  v110 = v9;
  if ((_DWORD)v9)
  {
    v11 = 0;
    v14 = 0;
    do
    {
      v15 = a1[8];
      if (v15 <= v11)
        goto LABEL_171;
      *(_DWORD *)(a1[9] + 4 * v11) = v14;
      v16 = re::MeshNameMap::modelIndex(v116, v11);
      v14 += *(_QWORD *)(re::MeshAssetBaseInfo::meshModel<re::MeshAsset>((_QWORD *)a4, v16) + 56);
      ++v11;
    }
    while (v9 != v11);
    v15 = a1[8];
    if (v15 <= v9)
      goto LABEL_180;
    *(_DWORD *)(a1[9] + 4 * v9) = v14;
    if (!HIDWORD(v14))
      goto LABEL_10;
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The total number of mesh parts for a mesh collection exceeds the maximum supported count.", "m_meshPartStartIndex[meshBaseCount] == meshPartCount", "rebuildRuntimeData", 203);
    _os_crash();
    __break(1u);
  }
  v15 = a1[8];
  if (v15 <= v9)
    goto LABEL_180;
  v14 = 0;
  *(_DWORD *)(a1[9] + 4 * v9) = 0;
LABEL_10:
  re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(a1 + 4, a1[1], *(_QWORD *)(v7 + 16));
  v18 = (_anonymous_namespace_ *)re::FixedArray<unsigned long>::init<unsigned long const&>(a1 + 10, a1[1], v14, &re::MeshDeformationRuntimeData::kInvalidMeshDeformationHandle);
  if (!v19)
    goto LABEL_181;
  v21 = v19;
  bzero(v19, 0x558uLL);
  for (i = 0; i != 1368; i += 72)
  {
    started = (unint64_t)&v21[i + 24];
  }
  v95 = v10;
  v96 = v14;
  v114 = (unint64_t)v21;
  v115 = a1;
  v27 = *(_QWORD *)(v7 + 56);
  if (!v27)
    goto LABEL_96;
  v28 = *(unsigned __int8 **)(v7 + 72);
  v29 = &v28[48 * v27];
  v102 = (re::MeshDeformationRuntimeData::DeformationMappingCounter *)(v21 + 1296);
  v10 = 72;
  v11 = (unint64_t)"simplifiedVertexPositions";
  v98 = (unint64_t *)v7;
  v100 = v29;
  do
  {
    v30 = *v28;
    if (v30 == 1)
    {
      v31 = (_DWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v116 + 16, (_QWORD *)v28 + 1);
      if (!v31 || *v31 == 0xFFFF)
        goto LABEL_95;
      v30 = *v28;
    }
    if (v30 == 2 && re::MeshNameMap::modelIndex(v116, (const re::StringID *)(v28 + 8)) == 0xFFFF)
      goto LABEL_95;
    v32 = *((_QWORD *)v28 + 5);
    v15 = *(_QWORD *)(v7 + 16);
    if (v15 <= v32)
      goto LABEL_176;
    v106 = *((_QWORD *)v28 + 5);
    re::DynamicArray<re::DeformationDefinition>::DynamicArray((uint64_t)v117, (uint64_t *)(*(_QWORD *)(v7 + 32) + 40 * v32));
    if (!v118)
      goto LABEL_94;
    started = 0;
    v108 = v28;
    do
    {
      v33 = (_QWORD *)(v119 + 40 * started);
      v34 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(*a1 + 1368, v33);
      if (!v34)
      {
        v14 = *re::assetsLogObjects(0);
        if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
        {
          v46 = v33[1];
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v46;
          _os_log_error_impl(&dword_224FE9000, (os_log_t)v14, OS_LOG_TYPE_ERROR, "Unknown deformer name specified in deformation stack: %s.", buf, 0xCu);
        }
LABEL_70:
        re::DynamicArray<re::DeformationDefinition>::removeStableAt((uint64_t)v117, started);
        continue;
      }
      a1 = (uint64_t *)*v34;
      re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v116, v28, buf);
      *(_QWORD *)v121 = a4;
      *(_QWORD *)&v121[8] = v116;
      *(_QWORD *)&v121[16] = *(_QWORD *)buf;
      v124 = v135;
      v125 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v121[24], (uint64_t)&buf[8]);
      if (*((_QWORD *)&v135 + 1))
      {
        (***((void (****)(_QWORD))&v135 + 1))(*((_QWORD *)&v135 + 1));
        if (*((uint8_t **)&v135 + 1) != &buf[8])
          (*(void (**)(_QWORD))(*(_QWORD *)v135 + 40))(v135);
      }
      v35 = *(_QWORD *)&v121[16];
      if (*(_QWORD *)&v121[16])
      {
        v36 = 0;
        while (2)
        {
          *(_QWORD *)buf = v36;
          v37 = (*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v125 + 16))(v125, buf);
          v14 = re::MeshNameMap::modelIndex(*(re::MeshNameMap **)&v121[8], v37);
          *(_QWORD *)buf = v36;
          v7 = (*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v125 + 16))(v125, buf);
          v38 = re::MeshAssetBaseInfo::meshModel<re::MeshAsset>((_QWORD *)a4, v14);
          switch((char)a1)
          {
            case 0:
              v40 = *(_QWORD *)(v38 + 96);
              if (v40)
              {
                v41 = *(_QWORD *)(v40 + 40);
                v42 = v41 <= WORD2(v7) || v41 > *(_QWORD *)(v38 + 56);
                if (!v42 && *(_DWORD *)(*(_QWORD *)(v40 + 48) + 4 * WORD2(v7)) != -1)
                  goto LABEL_43;
              }
              v14 = *re::assetsLogObjects((re *)v38);
              a1 = v115;
              if (!os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
                goto LABEL_64;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = WORD2(v7);
              v47 = v14;
              v48 = "Invalid deformation stack - Blend shape not specified for mesh part: %u.";
              goto LABEL_63;
            case 2:
            case 4:
              v39 = *(_QWORD *)(v38 + 176);
              if (v39 && *(_QWORD *)(v39 + 8) > (unint64_t)WORD2(v7))
                goto LABEL_43;
              v14 = *re::assetsLogObjects((re *)v38);
              a1 = v115;
              if (!os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
                goto LABEL_64;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = WORD2(v7);
              v47 = v14;
              v48 = "Invalid deformation stack - Mesh part index is not skinned: %u.";
              goto LABEL_63;
            case 6:
            case 7:
              v13 = WORD2(v7);
              v14 = *(_QWORD *)(v38 + 56);
              if (v14 <= WORD2(v7))
                goto LABEL_165;
              if (*(_DWORD *)(*(_QWORD *)(v38 + 64) + 560 * WORD2(v7) + 532))
                goto LABEL_43;
              v14 = *re::assetsLogObjects((re *)v38);
              v49 = os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR);
              a1 = v115;
              if (!v49)
                goto LABEL_64;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = WORD2(v7);
              v47 = v14;
              v48 = "Invalid deformation stack - Mesh part does not have open subdiv data: %u";
LABEL_63:
              _os_log_error_impl(&dword_224FE9000, v47, OS_LOG_TYPE_ERROR, v48, buf, 8u);
LABEL_64:
              LODWORD(v35) = 1;
              goto LABEL_65;
            case 8:
              v13 = WORD2(v7);
              v14 = *(_QWORD *)(v38 + 56);
              if (v14 <= WORD2(v7))
                goto LABEL_167;
              v43 = *(_QWORD *)(v38 + 64) + 560 * WORD2(v7);
              v44 = *(_QWORD *)(v43 + 344);
              if (!v44)
                goto LABEL_50;
              v14 = 16 * v44;
              v45 = (const char **)(*(_QWORD *)(v43 + 352) + 8);
              break;
            default:
              goto LABEL_43;
          }
          while (1)
          {
            v38 = strcmp(*v45, "simplifiedVertexPositions");
            if (!(_DWORD)v38)
              break;
            v45 += 2;
            v14 -= 16;
            if (!v14)
            {
LABEL_50:
              v14 = *re::assetsLogObjects((re *)v38);
              if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v13;
                _os_log_error_impl(&dword_224FE9000, (os_log_t)v14, OS_LOG_TYPE_ERROR, "Invalid deformation stack - Mesh does not contain simplified mesh buffer: %u.", buf, 8u);
              }
              LODWORD(v35) = 1;
              goto LABEL_56;
            }
          }
LABEL_43:
          if (++v36 != v35)
            continue;
          break;
        }
        LODWORD(v35) = 0;
LABEL_56:
        a1 = v115;
LABEL_65:
        v28 = v108;
      }
      else
      {
        a1 = v115;
      }
      if (v125)
      {
        (**(void (***)(_BYTE *))v125)(v125);
        if (v125 != &v121[24])
          (*(void (**)(uint64_t))(*(_QWORD *)v124 + 40))(v124);
      }
      if ((_DWORD)v35)
        goto LABEL_70;
      ++started;
    }
    while (started < v118);
    v7 = (unint64_t)v98;
    if (v118)
    {
      v50 = re::DeformationManager::addDeformationStack(*a1, (uint64_t)v117);
      if ((v50 & 0xFFFFFF00000000) != 0)
      {
        v15 = a1[5];
        v51 = v106;
        if (v15 <= v106)
          goto LABEL_179;
        started = v50;
        *(_QWORD *)(a1[6] + 8 * v106) = v50;
        re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v116, v28, buf);
        *(_QWORD *)v121 = a4;
        *(_QWORD *)&v121[8] = v116;
        *(_QWORD *)&v121[16] = *(_QWORD *)buf;
        v124 = v135;
        v125 = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v121[24], (uint64_t)&buf[8]);
        if (*((_QWORD *)&v135 + 1))
        {
          (***((void (****)(_QWORD))&v135 + 1))(*((_QWORD *)&v135 + 1));
          if (*((uint8_t **)&v135 + 1) != &buf[8])
            (*(void (**)(_QWORD))(*(_QWORD *)v135 + 40))(v135);
        }
        v104 = *(_QWORD *)&v121[16];
        if (*(_QWORD *)&v121[16])
        {
          v15 = 0;
          while (1)
          {
            *(_QWORD *)buf = v15;
            v7 = (*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v125 + 16))(v125, buf);
            *(_QWORD *)buf = v15;
            v13 = (unint64_t)(*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v125 + 16))(v125, buf) >> 32;
            v52 = (_BYTE *)re::DataArray<re::DeformationStack>::get(*a1 + 1416, started);
            v14 = *v52;
            if (*v52)
            {
              v53 = 0;
              do
              {
                a1 = (uint64_t *)*(unsigned int *)(re::DataArray<re::DeformationStack>::get(*a1 + 1416, started)
                                                + 4 * v53
                                                + 4);
                if (a1 >= 0x13)
                  goto LABEL_161;
                re::MeshDeformationRuntimeData::DeformationMappingCounter::addToDeformationMapping((re::MeshDeformationRuntimeData::DeformationMappingCounter *)(v114 + 72 * a1), v116, v7, (unsigned __int16)v13, v53++);
                a1 = v115;
              }
              while (v14 != v53);
            }
            re::MeshDeformationRuntimeData::DeformationMappingCounter::addToDeformationMapping(v102, v116, v7, (unsigned __int16)v13, 255);
            v14 = v7;
            v54 = a1;
            a1 = (uint64_t *)a1[8];
            if ((unint64_t)a1 <= v7)
              goto LABEL_172;
            v13 = *(_DWORD *)(v54[9] + 4 * v7) + (unsigned __int16)v13;
            v14 = v54[11];
            if (v14 <= v13)
              break;
            a1 = v54;
            v55 = v54[12];
            v56 = v54[3];
            if (*(_QWORD *)(v55 + 8 * v13) == -1)
              ++v56;
            a1[3] = v56;
            *(_QWORD *)(v55 + 8 * v13) = v106;
            if (++v15 == v104)
              goto LABEL_90;
          }
LABEL_173:
          v120 = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v126 = 136315906;
          *(_QWORD *)&v126[4] = "operator[]";
          v127 = 1024;
          v128 = 468;
          v129 = 2048;
          v130 = (uint64_t *)v13;
          v131 = 2048;
          v132 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_174:
          v117[0] = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 476;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = a4;
          v122 = 2048;
          v123 = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_175:
          v117[0] = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 468;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = v7;
          v122 = 2048;
          v123 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_176:
          v117[0] = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          v13 = v32;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 797;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = v13;
          v122 = 2048;
          v123 = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_177:
          v117[0] = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 468;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = v11;
          v122 = 2048;
          v123 = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_178:
          v117[0] = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 468;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = v15;
          v122 = 2048;
          v123 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_179:
          *(_QWORD *)v126 = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          v13 = v51;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 468;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = v13;
          v122 = 2048;
          v123 = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_180:
          v117[0] = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 468;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = v10;
          v122 = 2048;
          v123 = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_181:
          re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
LABEL_182:
          v117[0] = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 476;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = v11;
          v122 = 2048;
          v123 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_183:
          v117[0] = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 476;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = v11;
          v122 = 2048;
          v123 = a4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_184:
          v117[0] = 0;
          v136 = 0u;
          v137 = 0u;
          v134 = 0u;
          v135 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v121 = 136315906;
          *(_QWORD *)&v121[4] = "operator[]";
          *(_WORD *)&v121[12] = 1024;
          *(_DWORD *)&v121[14] = 476;
          *(_WORD *)&v121[18] = 2048;
          *(_QWORD *)&v121[20] = v13;
          v122 = 2048;
          v123 = a4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_185:
          re::internal::assertLog((re::internal *)4, v59, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
          goto LABEL_186;
        }
LABEL_90:
        if (v125)
        {
          (**(void (***)(_BYTE *))v125)(v125);
          if (v125 != &v121[24])
            (*(void (**)(uint64_t))(*(_QWORD *)v124 + 40))(v124);
        }
        v7 = (unint64_t)v98;
        v28 = v108;
      }
    }
LABEL_94:
    re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v117);
    v29 = v100;
LABEL_95:
    v28 += 48;
  }
  while (v28 != v29);
LABEL_96:
  v57 = a1[1];
  a1[16] = v57;
  a1[17] = 19;
  v58 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 32))(v57, 1824, 8);
  a1[18] = (uint64_t)v58;
  if (!v58)
    goto LABEL_185;
  bzero(v58, 0x720uLL);
  v11 = 0;
  v10 = 72;
  a4 = 96;
  do
  {
    v13 = v114;
    v60 = v114 + 72 * v11;
    v61 = v110;
    if (v110)
    {
      v62 = 0;
      v63 = 0;
      v61 = 0;
      v36 = *(_QWORD *)(v60 + 8);
      do
      {
        if (v36 == v62)
          goto LABEL_166;
        v63 += *(unsigned __int16 *)(*(_QWORD *)(v60 + 16) + 2 * v62);
        if (*(_WORD *)(*(_QWORD *)(v60 + 16) + 2 * v62))
          ++v61;
        ++v62;
      }
      while (v95 != v62);
    }
    else
    {
      v63 = 0;
    }
    v15 = a1[17];
    if (v15 <= v11)
      goto LABEL_177;
    v111 = v114 + 72 * v11;
    v64 = a1[18];
    v14 = v64 + 96 * v11;
    re::FixedArray<unsigned short>::init<>((uint64_t *)v14, a1[1], v61);
    re::FixedArray<int>::init<>((uint64_t *)(v14 + 24), a1[1], v63 + 1);
    started = v63;
    re::FixedArray<unsigned short>::init<>((uint64_t *)(v14 + 48), a1[1], v63);
    v109 = v14;
    re::FixedArray<BOOL>::init<>((_QWORD *)(v14 + 72), a1[1], v63);
    v99 = v11;
    v97 = v64;
    if (v110)
    {
      v66 = 0;
      v7 = 0;
      v67 = 0;
      v68 = (_QWORD *)(v64 + 96 * v11);
      v105 = v68 + 5;
      v107 = v68 + 4;
      v69 = v114 + 72 * v11;
      v11 = v69 + 32;
      v13 = v69 + 40;
      a1 = (uint64_t *)(v69 + 56);
      v70 = v68 + 10;
      v10 = v69 + 64;
      a4 = (unint64_t)(v68 + 11);
      v71 = v111;
      v101 = v68 + 8;
      v103 = (re::MeshDeformationRuntimeData::DeformationMappingCounter *)(v68 + 7);
      while (1)
      {
        v14 = v66;
        started = *(_QWORD *)(v71 + 8);
        if (started <= v66)
          goto LABEL_168;
        if (*(_WORD *)(*(_QWORD *)(v71 + 16) + 2 * v66))
        {
          started = v67;
          v72 = *(_QWORD *)(v109 + 8);
          if (v72 <= v67)
            goto LABEL_169;
          *(_WORD *)(*(_QWORD *)(v109 + 16) + 2 * v67) = v66;
          v72 = *v107;
          if (*v107 <= v67)
            goto LABEL_170;
          v112 = v67;
          *(_DWORD *)(*v105 + 4 * v67) = v7;
          started = re::MeshNameMap::meshPartStartIndexForInstance(v116, v66);
          v73 = v14 + 1;
          v74 = re::MeshNameMap::meshPartStartIndexForInstance(v116, (int)v14 + 1);
          if (started < v74)
          {
            v14 = 0;
            LODWORD(v100) = started;
            v75 = started;
            v76 = started - (unint64_t)v74;
            v71 = v111;
            v66 = v73;
            while (1)
            {
              started = *(_QWORD *)v11;
              if (*(_QWORD *)v11 <= v75 + v14)
                break;
              if (*(_BYTE *)(*(_QWORD *)v13 + v75 + v14))
              {
                started = v7;
                v77 = *(_QWORD *)v103;
                if (*(_QWORD *)v103 <= (unint64_t)v7)
                  goto LABEL_162;
                *(_WORD *)(*v101 + 2 * v7) = v14;
                v77 = *a1;
                if (*a1 <= v75 + v14)
                  goto LABEL_163;
                v77 = *v70;
                if (*v70 <= (unint64_t)v7)
                  goto LABEL_164;
                *(_BYTE *)(*(_QWORD *)a4 + v7) = *(_BYTE *)(*(_QWORD *)v10 + v75 + v14);
                v7 = (v7 + 1);
              }
              ++v14;
              if (!(v76 + v14))
                goto LABEL_125;
            }
            v117[0] = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 476;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = v14 + v100;
            v122 = 2048;
            v123 = started;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_161:
            v120 = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            v77 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v126 = 136315906;
            *(_QWORD *)&v126[4] = "operator[]";
            v127 = 1024;
            v128 = 468;
            v129 = 2048;
            v130 = a1;
            v131 = 2048;
            v132 = 19;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_162:
            v117[0] = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 468;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = started;
            v122 = 2048;
            v123 = v77;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_163:
            v117[0] = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 476;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = v14 + v100;
            v122 = 2048;
            v123 = v77;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_164:
            v117[0] = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            v36 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 468;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = started;
            v122 = 2048;
            v123 = v77;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_165:
            v120 = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v126 = 136315906;
            *(_QWORD *)&v126[4] = "operator[]";
            v127 = 1024;
            v128 = 476;
            v129 = 2048;
            v130 = (uint64_t *)v13;
            v131 = 2048;
            v132 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_166:
            v117[0] = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 476;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = v36;
            v122 = 2048;
            v123 = v36;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_167:
            v120 = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v126 = 136315906;
            *(_QWORD *)&v126[4] = "operator[]";
            v127 = 1024;
            v128 = 476;
            v129 = 2048;
            v130 = (uint64_t *)v13;
            v131 = 2048;
            v132 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_168:
            v117[0] = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            v72 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 476;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = v14;
            v122 = 2048;
            v123 = started;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_169:
            v117[0] = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 468;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = started;
            v122 = 2048;
            v123 = v72;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_170:
            v117[0] = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            v15 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 468;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = started;
            v122 = 2048;
            v123 = v72;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_171:
            v117[0] = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 468;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = v11;
            v122 = 2048;
            v123 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_172:
            v120 = 0;
            v136 = 0u;
            v137 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v126 = 136315906;
            *(_QWORD *)&v126[4] = "operator[]";
            v127 = 1024;
            v128 = 468;
            v129 = 2048;
            v130 = (uint64_t *)v14;
            v131 = 2048;
            v132 = (uint64_t)a1;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_173;
          }
          v71 = v111;
          v66 = v14 + 1;
LABEL_125:
          v67 = v112 + 1;
        }
        else
        {
          ++v66;
        }
        if (v66 == v110)
          goto LABEL_129;
      }
    }
    v67 = 0;
    v7 = 0;
LABEL_129:
    v15 = v67;
    v11 = v99;
    a4 = 96;
    v13 = *(_QWORD *)(v97 + 96 * v99 + 32);
    if (v13 <= v67)
      goto LABEL_178;
    *(_DWORD *)(*(_QWORD *)(v97 + 96 * v99 + 40) + 4 * v67) = v7;
    v11 = v99 + 1;
    a1 = v115;
    v78 = v96;
    v10 = 72;
  }
  while (v99 != 18);
  v79 = v115[17];
  if (!v79)
  {
LABEL_186:
    re::internal::assertLog((re::internal *)4, v65, v78, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 454);
    _os_crash();
    __break(1u);
  }
  v80 = v115[18];
  v81 = v79 - 1;
  v82 = v80 + 96 * (v79 - 1);
  v15 = *(_QWORD *)(v82 + 8);
  v83 = v115[1];
  *(_DWORD *)buf = -1;
  re::FixedArray<unsigned int>::init<unsigned int>(v115 + 13, v83, v96, buf);
  if (v15)
  {
    v13 = 0;
    v84 = v80 + 96 * v81;
    v85 = (unint64_t *)(v84 + 32);
    v10 = v84 + 40;
    v113 = (unint64_t **)(v84 + 56);
    v86 = (_QWORD *)(v84 + 64);
    while (1)
    {
      v11 = v13;
      v13 = *(_QWORD *)(v82 + 8);
      if (v13 <= v11)
        goto LABEL_182;
      v87 = re::MeshNameMap::meshPartStartIndexForInstance(v116, *(unsigned __int16 *)(*(_QWORD *)(v82 + 16) + 2 * v11));
      a4 = *v85;
      if (*v85 <= v11)
        goto LABEL_183;
      v13 = v11 + 1;
      if (a4 <= v11 + 1)
        goto LABEL_184;
      v88 = *(unsigned int *)(*(_QWORD *)v10 + 4 * v11);
      v89 = *(unsigned int *)(*(_QWORD *)v10 + 4 * v13);
      if (v88 < v89)
        break;
LABEL_144:
      if (v13 == v15)
        goto LABEL_145;
    }
    v11 = (unint64_t)*v113;
    if ((unint64_t)*v113 <= v88)
      a4 = v88;
    else
      a4 = (unint64_t)*v113;
    while (a4 != v88)
    {
      v7 = v87 + *(unsigned __int16 *)(*v86 + 2 * v88);
      v14 = v115[14];
      if (v14 <= v7)
        goto LABEL_175;
      *(_DWORD *)(v115[15] + 4 * v7) = v88++;
      if (v89 == v88)
        goto LABEL_144;
    }
    goto LABEL_174;
  }
LABEL_145:
  for (j = 0; j != 1368; j += 72)
  {
    v91 = (_QWORD *)(v114 + j);
    v92 = *(_QWORD *)(v114 + j + 48);
    if (v92)
    {
      if (v91[7])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 40))(v92, *(_QWORD *)(v114 + j + 64));
        v91[7] = 0;
        v91[8] = 0;
      }
      v91[6] = 0;
    }
    v93 = v91[3];
    if (v93)
    {
      if (*(_QWORD *)(v114 + j + 32))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 40))(v93, *(_QWORD *)(v114 + j + 40));
        *(_QWORD *)(v114 + j + 32) = 0;
        *(_QWORD *)(v114 + j + 40) = 0;
      }
      v91[3] = 0;
    }
    if (*v91)
    {
      if (*(_QWORD *)(v114 + j + 8))
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v91 + 40))(*v91, *(_QWORD *)(v114 + j + 16));
        *(_QWORD *)(v114 + j + 8) = 0;
        *(_QWORD *)(v114 + j + 16) = 0;
      }
      *v91 = 0;
    }
  }
}

_QWORD *re::FixedArray<re::MeshDeformationRuntimeData::DeformationMapping>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 96 * v2;
      v5 = (_QWORD *)(result[2] + 48);
      do
      {
        v6 = v5[3];
        if (v6)
        {
          if (v5[4])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, v5[5]);
            v5[4] = 0;
            v5[5] = 0;
          }
          v5[3] = 0;
        }
        if (*v5)
        {
          if (v5[1])
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[2]);
            v5[1] = 0;
            v5[2] = 0;
          }
          *v5 = 0;
        }
        v7 = *(v5 - 3);
        if (v7)
        {
          if (*(v5 - 2))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(v5 - 1));
            *(v5 - 2) = 0;
            *(v5 - 1) = 0;
          }
          *(v5 - 3) = 0;
        }
        v8 = *(v5 - 6);
        if (v8)
        {
          if (*(v5 - 5))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(v5 - 4));
            *(v5 - 5) = 0;
            *(v5 - 4) = 0;
          }
          *(v5 - 6) = 0;
        }
        v5 += 12;
        v4 -= 96;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(re::MeshDeformationRuntimeData *this, unsigned int a2)
{
  if (*((_QWORD *)this + 14) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)this + 15) + 4 * a2);
}

uint64_t re::MeshDeformationRuntimeData::meshDeformationHandle(re::MeshDeformationRuntimeData *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = a2 + 1;
  v4 = *((_QWORD *)this + 8);
  if (v4 > v3)
  {
    if (v4 <= a2)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_9;
    }
    v5 = *((_QWORD *)this + 9);
    v6 = *(unsigned int *)(v5 + 4 * a2);
    v7 = *(unsigned int *)(v5 + 4 * v3);
    v8 = v6 + a3;
    if (v8 < v7)
    {
      if (*((_QWORD *)this + 11) > v8)
        return *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v8);
LABEL_9:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return -1;
}

uint64_t re::MeshDeformationRuntimeData::deformationStackHandle(re::MeshDeformationRuntimeData *this, unint64_t a2)
{
  if (*((_QWORD *)this + 5) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2);
}

uint64_t re::MeshDeformationRuntimeData::DeformationMappingCounter::addToDeformationMapping(re::MeshDeformationRuntimeData::DeformationMappingCounter *this, const re::MeshNameMap *a2, unsigned int a3, int a4, char a5)
{
  uint64_t result;
  unint64_t v10;
  uint64_t v11;

  result = re::MeshNameMap::meshPartStartIndexForInstance(a2, a3);
  v10 = (result + a4);
  if (*((_QWORD *)this + 4) <= v10)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v11 + v10))
    return result;
  *(_BYTE *)(v11 + v10) = 1;
  if (*((_QWORD *)this + 1) <= (unint64_t)a3)
    goto LABEL_8;
  ++*(_WORD *)(*((_QWORD *)this + 2) + 2 * a3);
  if (*((_QWORD *)this + 7) <= v10)
    goto LABEL_9;
  *(_BYTE *)(*((_QWORD *)this + 8) + v10) = a5;
  return result;
}

_QWORD *re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result++ = 0xFFFFFFFFLL;
      --v6;
    }
    while (v6);
  }
  *result = 0xFFFFFFFFLL;
  return result;
}

void re::DynamicArray<re::DeformationDefinition>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    memset(v6, 0, sizeof(v6));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>((uint64_t)v6, (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * a2 + 40), (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v2), (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * a2));
    v2 = *(_QWORD *)(a1 + 16);
  }
  v4 = *(_QWORD *)(a1 + 32) + 40 * v2;
  v5 = *(_QWORD *)(v4 - 24);
  if (v5)
  {
    if (*(_QWORD *)(v4 - 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v4 - 8));
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
    }
    *(_QWORD *)(v4 - 24) = 0;
  }
  re::StringID::destroyString((re::StringID *)(v4 - 40));
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::FixedArray<unsigned int>::init<unsigned int>(_QWORD *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 62)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 4 * a3, 4);
  v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v8 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)result = *a4;
      result = (_QWORD *)((char *)result + 4);
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)result = *a4;
  return result;
}

uint64_t re::DynamicArray<re::DeformationDefinition>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::DeformationDefinition>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::DeformationDefinition>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::DeformationDefinition>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::StringID *v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::DeformationDefinition>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>((uint64_t)&v15, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * a1[2]), a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = 5 * v9;
      v11 = *(_QWORD *)(a2 + 32) + 8 * v10;
      v12 = (re::StringID *)(a1[4] + 8 * v10);
      v13 = 40 * v4 - 8 * v10;
      do
      {
        re::StringID::StringID(v12, (const StringID *)v11);
        re::FixedArray<unsigned char>::FixedArray((_QWORD *)v12 + 2, (uint64_t *)(v11 + 16));
        v11 += 40;
        v12 = (re::StringID *)((char *)v12 + 40);
        v13 -= 40;
      }
      while (v13);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>((uint64_t)&v14, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * v4), a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = (re::StringID *)(a1[4] + 40 * v4);
      v7 = 40 * v5 - 40 * v4;
      do
      {
        v8 = *((_QWORD *)v6 + 2);
        if (v8)
        {
          if (*((_QWORD *)v6 + 3))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)v6 + 4));
            *((_QWORD *)v6 + 3) = 0;
            *((_QWORD *)v6 + 4) = 0;
          }
          *((_QWORD *)v6 + 2) = 0;
        }
        re::StringID::destroyString(v6);
        v6 = (re::StringID *)((char *)v6 + 40);
        v7 -= 40;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::StringID::operator=((unint64_t *)a4, v5);
      re::FixedArray<unsigned char>::operator=((uint64_t *)(a4 + 16), v5 + 2);
      v5 += 5;
      a4 += 40;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *v5;
    v8 = v5[1];
    *v5 = 0;
    v5[1] = (uint64_t)&str_110;
    v9 = *a4;
    v10 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    v12[0] = v7 & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
    v12[1] = v10;
    re::StringID::destroyString((re::StringID *)v12);
    re::FixedArray<float>::operator=(a4 + 2, v5 + 2);
    a4 += 5;
    v5 += 5;
  }
  while (v5 != v6);
  return v6;
}

void re::AnimationLibraryMeshMapping::rebuildRuntimeData(void **this, const re::MeshAsset *a2, const re::AnimationLibraryAsset *a3)
{
  re::AnimationLibraryMeshMapping *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  _BYTE v43[14];
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v4 = (re::AnimationLibraryMeshMapping *)this;
  v53 = *MEMORY[0x24BDAC8D0];
  this[7] = (void *)-1;
  if (*((_DWORD *)this + 7))
  {
    v5 = *((unsigned int *)this + 6);
    if ((_DWORD)v5)
      memset_pattern16(this[1], &unk_2260EB7B0, 4 * v5);
    if (*((_DWORD *)v4 + 8))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        this = (void **)re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free((_DWORD *)(*((_QWORD *)v4 + 2) + v6));
        ++v7;
        v6 += 80;
      }
      while (v7 < *((unsigned int *)v4 + 8));
    }
    *((_DWORD *)v4 + 7) = 0;
    *((_DWORD *)v4 + 8) = 0;
    v8 = *((_DWORD *)v4 + 10) + 1;
    *((_DWORD *)v4 + 9) = 0x7FFFFFFF;
    *((_DWORD *)v4 + 10) = v8;
  }
  if (!*((_QWORD *)v4 + 6))
  {
    *((_QWORD *)v4 + 7) = -1;
  }
  if (*((_QWORD *)a3 + 2))
  {
    v9 = 0;
    v34 = 0;
    while (1)
    {
      re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)a2 + 448, (unsigned __int8 *)(*((_QWORD *)a3 + 4) + 120 * v9), &v38);
      v32 = *((_QWORD *)a2 + 117);
      if (v32)
        break;
LABEL_54:
      if (v41)
      {
        (*(void (**)(uint64_t *))*v41)(v41);
        if (v41 != &v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
      }
      v9 = ++v34;
      if (*((_QWORD *)a3 + 2) <= (unint64_t)v34)
        return;
    }
    v10 = 0;
    v36 = 0;
    while (1)
    {
      v11 = (_QWORD *)re::MeshAsset::skeletonAtIndex(a2, v10);
      v12 = *((_QWORD *)a3 + 2);
      if (v12 <= v9)
        goto LABEL_60;
      if (re::StringID::operator==(v11, (_QWORD *)(*((_QWORD *)a3 + 4) + 120 * v9 + 40)))
      {
        v35 = v38;
        if (v38)
          break;
      }
LABEL_53:
      v10 = ++v36;
      if (v32 <= v36)
        goto LABEL_54;
    }
    v13 = 0;
    while (1)
    {
      *(_QWORD *)&v48 = v13;
      v37[0] = __PAIR64__((*(uint64_t (**)(uint64_t *, __int128 *))(*v41 + 16))(v41, &v48), v34);
      LODWORD(v37[1]) = v36;
      v12 = *((_QWORD *)a3 + 2);
      if (v12 <= v9)
      {
        v37[2] = 0;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v42 = 136315906;
        *(_QWORD *)v43 = "operator[]";
        *(_WORD *)&v43[8] = 1024;
        *(_DWORD *)&v43[10] = 797;
        v44 = 2048;
        v45 = v9;
        v46 = 2048;
        v47 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_60:
        v37[0] = 0;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v42 = 136315906;
        *(_QWORD *)v43 = "operator[]";
        *(_WORD *)&v43[8] = 1024;
        *(_DWORD *)&v43[10] = 797;
        v44 = 2048;
        v45 = v9;
        v46 = 2048;
        v47 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v42, (const re::AssetHandle *)(*((_QWORD *)a3 + 4) + 120 * v9 + 72));
      if (*(_QWORD *)v4)
      {
        v14 = *(_QWORD *)&v43[4] ? *(_QWORD *)(*(_QWORD *)&v43[4] + 664) : 0;
        v15 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)&v43[4] ^ (*(_QWORD *)&v43[4] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * (*(_QWORD *)&v43[4] ^ (*(_QWORD *)&v43[4] >> 30))) >> 27));
        v16 = *(unsigned int *)(*((_QWORD *)v4 + 1) + 4 * ((v14 ^ (v15 >> 31) ^ v15) % *((unsigned int *)v4 + 6)));
        if ((_DWORD)v16 != 0x7FFFFFFF)
        {
          v17 = *((_QWORD *)v4 + 2);
          while (*(_QWORD *)(v17 + 80 * v16 + 24) != *(_QWORD *)&v43[4])
          {
            v16 = *(_DWORD *)(v17 + 80 * v16 + 8) & 0x7FFFFFFF;
            if (v16 == 0x7FFFFFFF)
              goto LABEL_27;
          }
          v28 = (_QWORD *)(v17 + 80 * v16);
          v29 = v28[7];
          if (v29)
          {
            v30 = 12 * v29;
            v31 = (_QWORD *)(v28[9] + 4);
            while (*((_DWORD *)v31 - 1) != LODWORD(v37[0]) || *v31 != *(uint64_t *)((char *)v37 + 4))
            {
              v31 = (_QWORD *)((char *)v31 + 12);
              v30 -= 12;
              if (!v30)
                goto LABEL_51;
            }
          }
          else
          {
LABEL_51:
            re::DynamicArray<re::MeshLodLevelInfo>::add(v28 + 5, v37);
          }
          goto LABEL_52;
        }
      }
LABEL_27:
      *(_QWORD *)&v50 = 0;
      *(_QWORD *)&v49 = 0;
      v48 = 0uLL;
      DWORD2(v49) = 0;
      re::DynamicArray<re::MeshLodLevelInfo>::add(&v48, v37);
      if (*(_QWORD *)&v43[4])
        v18 = *(_QWORD *)(*(_QWORD *)&v43[4] + 664);
      else
        v18 = 0;
      v19 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)&v43[4] ^ (*(_QWORD *)&v43[4] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                          * (*(_QWORD *)&v43[4] ^ (*(_QWORD *)&v43[4] >> 30))) >> 27));
      v20 = v18 ^ (v19 >> 31) ^ v19;
      if (*(_QWORD *)v4)
      {
        v21 = v20 % *((unsigned int *)v4 + 6);
        v22 = *(unsigned int *)(*((_QWORD *)v4 + 1) + 4 * v21);
        if ((_DWORD)v22 != 0x7FFFFFFF)
        {
          v23 = *((_QWORD *)v4 + 2);
          while (*(_QWORD *)(v23 + 80 * v22 + 24) != *(_QWORD *)&v43[4])
          {
            v22 = *(_DWORD *)(v23 + 80 * v22 + 8) & 0x7FFFFFFF;
            if (v22 == 0x7FFFFFFF)
              goto LABEL_37;
          }
          goto LABEL_43;
        }
      }
      else
      {
        v21 = 0;
      }
LABEL_37:
      v24 = *((unsigned int *)v4 + 9);
      if ((_DWORD)v24 == 0x7FFFFFFF)
      {
        v24 = *((unsigned int *)v4 + 8);
        v25 = v24;
        if ((_DWORD)v24 == *((_DWORD *)v4 + 6))
        {
          re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity((uint64_t)v4, 2 * *((_DWORD *)v4 + 7));
          v21 = v20 % *((unsigned int *)v4 + 6);
          v25 = *((_DWORD *)v4 + 8);
        }
        *((_DWORD *)v4 + 8) = v25 + 1;
        v26 = *((_QWORD *)v4 + 2);
        v27 = *(_DWORD *)(v26 + 80 * v24 + 8);
      }
      else
      {
        v26 = *((_QWORD *)v4 + 2);
        v27 = *(_DWORD *)(v26 + 80 * v24 + 8);
        *((_DWORD *)v4 + 9) = v27 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v26 + 80 * v24 + 8) = v27 | 0x80000000;
      *(_DWORD *)(*((_QWORD *)v4 + 2) + 80 * v24 + 8) = *(_DWORD *)(*((_QWORD *)v4 + 2) + 80 * v24 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v4 + 1) + 4 * v21);
      *(_QWORD *)(*((_QWORD *)v4 + 2) + 80 * v24) = v20;
      re::AssetHandle::AssetHandle((re::AssetHandle *)(*((_QWORD *)v4 + 2) + 80 * v24 + 16), (const re::AssetHandle *)&v42);
      re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray(*((_QWORD *)v4 + 2) + 80 * v24 + 40, (uint64_t *)&v48);
      *(_DWORD *)(*((_QWORD *)v4 + 1) + 4 * v21) = v24;
      ++*((_DWORD *)v4 + 7);
      ++*((_DWORD *)v4 + 10);
LABEL_43:
      if ((_QWORD)v48 && (_QWORD)v50)
        (*(void (**)(void))(*(_QWORD *)v48 + 40))();
LABEL_52:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v42);
      if (++v13 == v35)
        goto LABEL_53;
    }
  }
}

uint64_t re::AnimationLibraryMeshMapping::processSkeletalQueryEntry(int a1, uint64_t a2, _anonymous_namespace_ *this)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8[3];
  int v9;
  uint64_t v10;

  v10 = 0;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(uint64_t **)(a2 + 32);
    v6 = 12 * v4;
    do
    {
      re::DynamicArray<re::MeshLodLevelInfo>::add(v8, v5);
      v5 = (uint64_t *)((char *)v5 + 12);
      v6 -= 12;
    }
    while (v6);
  }
  re::DynamicArray<re::SkeletalAnimationQueryEntry>::add(this, v8);
  result = v8[0];
  if (v8[0])
  {
    if (v10)
      return (*(uint64_t (**)(void))(*(_QWORD *)v8[0] + 40))();
  }
  return result;
}

uint64_t re::DynamicArray<re::SkeletalAnimationQueryEntry>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SkeletalAnimationQueryEntry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray(*((_QWORD *)this + 4) + 40 * v4, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::AnimationLibraryMeshMapping::processForFirstSkeletalQueryEntry(int a1, uint64_t a2, uint64_t a3, _anonymous_namespace_ *this, _anonymous_namespace_ *a5)
{
  uint64_t v5;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  const StringID *v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t result;
  uint64_t *v23;
  uint64_t v24[2];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int128 v37;
  char *__s1[2];
  char *v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v24[1] = 0;
  v25 = 0;
  v24[0] = 0;
  v26 = 0;
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    goto LABEL_26;
  v8 = *(uint64_t **)(a2 + 32);
  v23 = (uint64_t *)((char *)v8 + 12 * v5);
  do
  {
    v9 = *(unsigned int *)v8;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10 <= v9)
    {
      v28 = 0;
      v40 = 0u;
      v41 = 0u;
      *(_OWORD *)__s1 = 0u;
      *(_OWORD *)v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v29 = 136315906;
      v30 = "operator[]";
      v31 = 1024;
      v32 = 797;
      v33 = 2048;
      v34 = v9;
      v35 = 2048;
      v36 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v11 = (unsigned __int8 *)(*(_QWORD *)(a3 + 32) + 120 * v9);
    v12 = *((_QWORD *)this + 2);
    if (v12)
    {
      v13 = 0;
      v14 = 40 * v12 - 40;
      v15 = (const StringID *)(*((_QWORD *)this + 4) + 24);
      do
      {
        LOBYTE(v37) = v15[-2].var1;
        re::StringID::StringID((re::StringID *)((char *)&v37 + 8), v15 - 1);
        re::StringID::StringID((re::StringID *)&__s1[1], v15);
        if (v37 == *v11
          && (*((_QWORD *)v11 + 1) ^ *((_QWORD *)&v37 + 1)) <= 1
          && ((v16 = (char *)*((_QWORD *)v11 + 2), __s1[0] == v16) || !strcmp(__s1[0], v16))
          && (*((_QWORD *)v11 + 3) ^ (uint64_t)__s1[1]) <= 1uLL
          && ((v17 = (char *)*((_QWORD *)v11 + 4), v39[0] == v17) || !strcmp(v39[0], v17)))
        {
          v13 = 1;
          v18 = 1;
        }
        else
        {
          v18 = 0;
        }
        re::StringID::destroyString((re::StringID *)&__s1[1]);
        re::StringID::destroyString((re::StringID *)((char *)&v37 + 8));
        if ((v18 & 1) != 0)
          break;
        v19 = v14;
        v14 -= 40;
        v15 = (const StringID *)((char *)v15 + 40);
      }
      while (v19);
      if ((v13 & 1) != 0)
        goto LABEL_23;
      v12 = *((_QWORD *)this + 2);
    }
    if (v12 >= *((_QWORD *)this + 1))
    {
      re::DynamicArray<re::MeshIdentifierAsset>::growCapacity(this, v12 + 1);
      v12 = *((_QWORD *)this + 2);
    }
    v20 = (_BYTE *)(*((_QWORD *)this + 4) + 40 * v12);
    *v20 = *v11;
    re::StringID::StringID((re::StringID *)(v20 + 8), (const StringID *)(v11 + 8));
    re::StringID::StringID((re::StringID *)(v20 + 24), (const StringID *)(v11 + 24));
    ++*((_QWORD *)this + 2);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::MeshLodLevelInfo>::add(v24, v8);
LABEL_23:
    v8 = (uint64_t *)((char *)v8 + 12);
  }
  while (v8 != v23);
  if (v25)
    re::DynamicArray<re::SkeletalAnimationQueryEntry>::add(a5, v24);
LABEL_26:
  result = v24[0];
  if (v24[0])
  {
    if (v27)
      return (*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 40))();
  }
  return result;
}

BOOL re::AnimationLibraryMeshMapping::getFirstSkeletalAnimation(uint64_t a1, uint64_t a2, _anonymous_namespace_ *a3)
{
  int SkeletalQueryEntry;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  _BOOL8 v15;
  _QWORD v17[3];
  int v18;
  uint64_t v19;

  SkeletalQueryEntry = re::DynamicArray<re::DynamicArray<unsigned char>>::clear(a3);
  v7 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v10 = *v9;
      v9 += 20;
      if (v10 < 0)
        break;
      if (v7 == ++v8)
      {
        LODWORD(v8) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  v19 = 0;
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  if ((_DWORD)v7 != (_DWORD)v8)
  {
    v11 = v8;
    do
    {
      SkeletalQueryEntry = re::AnimationLibraryMeshMapping::processForFirstSkeletalQueryEntry(SkeletalQueryEntry, *(_QWORD *)(a1 + 16) + 80 * v11 + 40, a2, (_anonymous_namespace_ *)v17, a3);
      v12 = *(_DWORD *)(a1 + 32);
      if (v12 <= (int)v8 + 1)
        v13 = v8 + 1;
      else
        v13 = *(_DWORD *)(a1 + 32);
      v14 = v8;
      while (1)
      {
        v11 = (v14 + 1);
        if (v13 - 1 == v14)
          break;
        ++v14;
        LODWORD(v8) = v11;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v11 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v8) = v13;
LABEL_17:
      ;
    }
    while (v12 != (_DWORD)v8);
  }
  v15 = *((_QWORD *)a3 + 2) != 0;
  re::DynamicArray<re::MeshIdentifierAsset>::deinit((uint64_t)v17);
  return v15;
}

BOOL re::AnimationLibraryMeshMapping::getNamedSkeletalAnimation(uint64_t a1, _QWORD *a2, uint64_t a3, _anonymous_namespace_ *a4)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  _QWORD v20[3];
  int v21;
  uint64_t v22;
  _QWORD v23[4];
  unsigned int *v24;

  re::DynamicArray<re::DynamicArray<unsigned char>>::clear(a4);
  v8 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v11 = *v10;
      v10 += 20;
      if (v11 < 0)
        break;
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((_DWORD)v8 != (_DWORD)v9)
  {
    v13 = v9;
    do
    {
      re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray((uint64_t)v23, (uint64_t *)(*(_QWORD *)(a1 + 16) + 80 * v13 + 40));
      if (v23[2]
        && (v14 = *v24, *(_QWORD *)(a3 + 16) > v14)
        && re::StringID::operator==((_QWORD *)(*(_QWORD *)(a3 + 32) + 120 * v14 + 56), a2))
      {
        v15 = re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray((uint64_t)v20, (uint64_t *)(*(_QWORD *)(a1 + 16) + 80 * v13 + 40));
        re::AnimationLibraryMeshMapping::processSkeletalQueryEntry(v15, (uint64_t)v20, a4);
        if (v20[0])
        {
          if (v22)
            (*(void (**)(void))(*(_QWORD *)v20[0] + 40))();
          v16 = 0;
          v22 = 0;
          memset(v20, 0, sizeof(v20));
          ++v21;
        }
        else
        {
          v16 = 0;
        }
      }
      else
      {
        v16 = 1;
      }
      if (v23[0] && v24)
        (*(void (**)(void))(*(_QWORD *)v23[0] + 40))();
      if (!v16)
        break;
      v17 = *(_DWORD *)(a1 + 32);
      v18 = v17 <= (int)v9 + 1 ? v9 + 1 : *(_DWORD *)(a1 + 32);
      while (1)
      {
        v13 = (v9 + 1);
        if (v18 - 1 == (_DWORD)v9)
          break;
        LODWORD(v9) = v9 + 1;
        v19 = v13;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v13 + 8) & 0x80000000) != 0)
          goto LABEL_29;
      }
      v19 = v18;
LABEL_29:
      LODWORD(v9) = v19;
    }
    while (v17 != v19);
  }
  return *((_QWORD *)a4 + 2) != 0;
}

BOOL re::AnimationLibraryMeshMapping::getAllSkeletalAnimations(uint64_t a1, _anonymous_namespace_ *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  _QWORD v14[3];
  int v15;
  uint64_t v16;

  re::DynamicArray<re::DynamicArray<unsigned char>>::clear(a2);
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 20;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      v9 = re::DynamicArray<re::MeshLodLevelInfo>::DynamicArray((uint64_t)v14, (uint64_t *)(*(_QWORD *)(a1 + 16) + 80 * v8 + 40));
      re::AnimationLibraryMeshMapping::processSkeletalQueryEntry(v9, (uint64_t)v14, a2);
      if (v14[0])
      {
        if (v16)
          (*(void (**)(void))(*(_QWORD *)v14[0] + 40))();
        v16 = 0;
        memset(v14, 0, sizeof(v14));
        ++v15;
      }
      v10 = *(_DWORD *)(a1 + 32);
      if (v10 <= (int)v5 + 1)
        v11 = v5 + 1;
      else
        v11 = *(_DWORD *)(a1 + 32);
      while (1)
      {
        v8 = (v5 + 1);
        if (v11 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v12 = v8;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_20;
      }
      v12 = v11;
LABEL_20:
      LODWORD(v5) = v12;
    }
    while (v10 != v12);
  }
  return *((_QWORD *)a2 + 2) != 0;
}

_DWORD *re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(_DWORD *result)
{
  int v1;
  _DWORD *v2;

  v1 = result[2];
  if (v1 < 0)
  {
    v2 = result;
    result[2] = v1 & 0x7FFFFFFF;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(result + 4));
    result = (_DWORD *)*((_QWORD *)v2 + 5);
    if (result)
    {
      if (*((_QWORD *)v2 + 9))
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 40))(result);
      *((_QWORD *)v2 + 9) = 0;
      *((_QWORD *)v2 + 6) = 0;
      *((_QWORD *)v2 + 7) = 0;
      *((_QWORD *)v2 + 5) = 0;
      ++v2[16];
    }
  }
  return result;
}

void re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  signed int v25;
  _BYTE v26[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v26, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v26;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)v26 = v5;
      *(_QWORD *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 72);
        do
        {
          if ((*(_DWORD *)(v14 - 8) & 0x80000000) != 0)
          {
            v15 = *(v14 - 9);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 80 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 80 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 80 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v18) = v15;
            re::AssetHandle::AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 16) + 80 * v18 + 16), (const re::AssetHandle *)(v14 - 7));
            v22 = *(_QWORD *)(a1 + 16) + 80 * v18;
            *(_QWORD *)(v22 + 72) = 0;
            *(_DWORD *)(v22 + 64) = 0;
            *(_QWORD *)(v22 + 48) = 0;
            *(_QWORD *)(v22 + 56) = 0;
            *(_QWORD *)(v22 + 40) = 0;
            *(_QWORD *)(v22 + 40) = *(v14 - 4);
            *(v14 - 4) = 0;
            *(_QWORD *)(v22 + 48) = *(v14 - 3);
            *(v14 - 3) = 0;
            v23 = *(_QWORD *)(v22 + 56);
            *(_QWORD *)(v22 + 56) = *(v14 - 2);
            *(v14 - 2) = v23;
            v24 = *(_QWORD *)(v22 + 72);
            *(_QWORD *)(v22 + 72) = *v14;
            *v14 = v24;
            ++*((_DWORD *)v14 - 2);
            ++*(_DWORD *)(v22 + 64);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 10;
        }
        while (v11 < v10);
      }
      re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2)
      v25 = a2;
    else
      v25 = 3;
  }
}

double re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::DynamicArray<re::SkeletalAnimationQueryEntry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void sub_2253D0544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_guard_abort(&qword_254104558);

  _Unwind_Resume(a1);
}

void sub_2253D0690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253D0744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::`anonymous namespace'::validationError(_QWORD *a1, void *a2)
{
  re *v3;
  NSObject *v4;
  uint64_t v5;
  re *v6;
  _BYTE v7[24];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *re::assetTypesLogObjects(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v7 = 138543362;
    *(_QWORD *)&v7[4] = v3;
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Mesh payload validation error: %{public}@", v7, 0xCu);
    if (!a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (a1)
  {
LABEL_3:
    v5 = *MEMORY[0x24BDD0BA0];
    v6 = v3;
    re::makeResourceSharingError((__CFString *)0x1F6, objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1), v7);
    *a1 = objc_retainAutorelease(*(id *)v7);

  }
LABEL_4:

}

void sub_2253D08C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253D0ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_2253D0E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

id re::`anonymous namespace'::extractAttributeWithName(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    objc_msgSend(v3, "removeObjectForKey:", v4);

  return v5;
}

void sub_2253D0F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253D158C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL validateMTLIndexType(re *a1, MTLIndexType *a2)
{
  NSObject *v3;
  uint8_t v5[16];

  if ((unint64_t)a1 > 1)
  {
    if (a2)
      *a2 = -1;
    v3 = *re::assetTypesLogObjects(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Invalid MTLIndexType when decoding REMeshPartDescriptor", v5, 2u);
    }
  }
  else if (a2)
  {
    *a2 = (MTLIndexType)a1;
  }
  return (unint64_t)a1 < 2;
}

BOOL validateMeshPartOptionalFlag(re *a1, char *a2)
{
  NSObject *v3;
  char v4;
  uint8_t v6[16];

  if ((unint64_t)a1 < 3)
  {
    if (a1 == (re *)2)
    {
      v4 = 2;
    }
    else
    {
      if (a1 != (re *)1)
      {
        *a2 = 0;
        return (unint64_t)a1 < 3;
      }
      v4 = 1;
    }
    *a2 = v4;
    return (unint64_t)a1 < 3;
  }
  v3 = *re::assetTypesLogObjects(a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v6 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Invalid MeshPartOptionalFlag when decoding REMeshAttributeDescriptor", v6, 2u);
  }
  return (unint64_t)a1 < 3;
}

void sub_2253D18CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2253D1A88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253D1E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t re::FixedInlineArray<unsigned long,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a2 < 8)
    return a1 + 8 * a2;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, a2, 8, v2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

void sub_2253D23C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253D2570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253D26B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253D2750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2253D2994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_2253D2B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253D2C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2253D2E9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253D3068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253D3184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253D31FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2253D34D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_2253D3774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253D3950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2253D3B78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253D3C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::validateAttribute(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a1;
  v8 = v7;
  if (v7)
  {
    v9 = 48;
    if (a2 == 1)
      v9 = 0;
    v10 = objc_msgSend(v7, "validateWithPayloadSize:error:", *(_QWORD *)(a3 + v9), a4);
  }
  else
  {
    v10 = 1;
  }

  return v10;
}

void sub_2253D3DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253D4024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253D41E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2253D43DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253D4490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2253D46DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253D4A4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253D4BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2253D4C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2253D4E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_2253D51E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253D5360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2253D5698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  if (a27)
  {
    if ((a29 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)a27 + 40))();
  }

  _Unwind_Resume(a1);
}

void sub_2253D59A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253D5B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253D5E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253D5F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_2253D637C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[16 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 4)
  {
    bzero(v4, 16 * v6);
    v20 = &v4[16 * v6];
LABEL_17:
    a1[1] = v20;
    return;
  }
  if (a2 >> 60)
    abort();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 3;
  if (v9 >> 3 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v11);
  v13 = &v12[16 * v5];
  v15 = &v12[16 * v14];
  bzero(v13, 16 * v6);
  v16 = &v13[16 * v6];
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v13 - 1) = v19;
      v13 -= 16;
    }
    while (v17 != v18);
    v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
    operator delete(v17);
}

void sub_2253D681C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t validateLocalRestPoseFloat3(unint64_t a1, uint64_t a2, size_t a3, _QWORD *a4)
{
  unint64_t v5;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v20;

  if (a3 != 16 * a1)
    return 0;
  v5 = a1;
  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  if (!a1)
    goto LABEL_12;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(__p, a1);
  v8 = (char *)__p[1];
  bzero(__p[1], a3);
  v9 = 0;
  __p[1] = &v8[a3];
  v10 = 1;
  do
  {
    v11 = *(_OWORD *)(a2 + v9);
    v12 = HIDWORD(*(_QWORD *)(a2 + v9));
    v13 = *(_QWORD *)(a2 + v9 + 8);
    *(_OWORD *)((char *)__p[0] + v9) = v11;
    v14 = (v12 & 0x7FFFFFFFu) <= 0x7F7FFFFF && (v13 & 0x7FFFFFFFu) < 0x7F800000;
    v15 = (v11 & 0x7FFFFFFF) <= 0x7F7FFFFF && v14;
    v10 &= v15;
    v9 += 16;
    --v5;
  }
  while (v5);
  if ((v10 & 1) == 0)
  {
    v17 = 0;
    if (a4)
      a4[1] = *a4;
  }
  else
  {
LABEL_12:
    if (a4)
    {
      v16 = (void *)*a4;
      if (*a4)
      {
        a4[1] = v16;
        operator delete(v16);
      }
      *(_OWORD *)a4 = *(_OWORD *)__p;
      a4[2] = v20;
      return 1;
    }
    v17 = 1;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v17;
}

void sub_2253D6A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2253D6DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a2);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(a1 << 6);
}

_QWORD *re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 3;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 3 || (v7 & 1) == 0))
    {
      if (a2 < 4)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,3ul>::resize(_anonymous_namespace_ *result, unint64_t a2, _QWORD *a3)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;

  v4 = result;
  v5 = *((_QWORD *)result + 1);
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return result;
  }
  else
  {
    result = re::DynamicOverflowArray<unsigned long long,3ul>::reserve(result, a2);
    v7 = *((_QWORD *)v4 + 1);
    if (v7 < a2)
    {
      do
      {
        v8 = (char *)v4 + 24;
        if ((*((_BYTE *)v4 + 16) & 1) == 0)
          v8 = (char *)*((_QWORD *)v4 + 4);
        *(_QWORD *)&v8[8 * v7++] = *a3;
      }
      while (a2 != v7);
    }
  }
  *((_QWORD *)v4 + 1) = a2;
  *((_DWORD *)v4 + 4) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,3ul>::reserve(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  int v5;

  v3 = result;
  if (*(_QWORD *)result)
  {
    if ((*((_DWORD *)result + 4) & 1) == 0)
    {
LABEL_3:
      v4 = *((_QWORD *)v3 + 3);
      goto LABEL_6;
    }
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity(v3, a2);
    v5 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v5;
    if ((v5 & 1) == 0)
      goto LABEL_3;
  }
  v4 = 3;
LABEL_6:
  if (v4 < a2)
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity(v3, a2);
  return result;
}

uint64_t *re::allocInfo_AudioFileGroupAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_107);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_107))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541045A0, 0);
    *(uint64_t *)((char *)&qword_2541045B0 + 6) = 0;
    qword_2541045B0 = 0;
    qword_2541045C0 = 0;
    qword_2541045C8 = 0xFFFFFFFFLL;
    qword_2541045A0 = (uint64_t)&off_24ED7DAA8;
    qword_2541045D0 = (uint64_t)"AudioFileGroupAsset";
    dword_2541045D8 = 0;
    xmmword_2541045E0 = 0u;
    unk_2541045F0 = 0u;
    xmmword_254104600 = 0u;
    qword_254104610 = 0;
    __cxa_guard_release(&_MergedGlobals_107);
  }
  return &qword_2541045A0;
}

void re::initInfo_AudioFileGroupAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0xFE91415CC2D84746;
  v11[1] = "AudioFileGroupAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_254104580);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104580);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "assets";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254104578 = v9;
      __cxa_guard_release(&qword_254104580);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254104578;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AudioFileGroupAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AudioFileGroupAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AudioFileGroupAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AudioFileGroupAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

void sub_2253D74FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254104580);
  _Unwind_Resume(a1);
}

re::AudioFileGroupAsset *re::internal::defaultConstruct<re::AudioFileGroupAsset>(int a1, int a2, re::AudioFileGroupAsset *this)
{
  return re::AudioFileGroupAsset::AudioFileGroupAsset(this);
}

uint64_t re::internal::defaultDestruct<re::AudioFileGroupAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::AssetHandle>::deinit(a3 + 8);
}

uint64_t re::internal::defaultDestructV2<re::AudioFileGroupAsset>(uint64_t a1)
{
  return re::DynamicArray<re::AssetHandle>::deinit(a1 + 8);
}

re::AudioFileGroupAsset *re::AudioFileGroupAsset::AudioFileGroupAsset(re::AudioFileGroupAsset *this)
{
  unint64_t __buf;

  *(_QWORD *)this = &off_24ED3C880;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 56) = 0;
  for (__buf = 0; __buf < 0x3E8; arc4random_buf(&__buf, 8uLL))
    ;
  *((_QWORD *)this + 6) = __buf;
  return this;
}

void sub_2253D75A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  re::DynamicArray<re::AssetHandle>::deinit(v1);
  _Unwind_Resume(a1);
}

void re::AudioFileGroupAsset::~AudioFileGroupAsset(re::AudioFileGroupAsset *this)
{
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8);
}

{
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::AudioFileGroupAsset::assetType(re::AudioFileGroupAsset *this)
{
  unsigned __int8 v1;

  {
    re::AudioFileGroupAsset::assetType(void)::type = (uint64_t)"AudioFileGroup";
    qword_2558278E8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AudioFileGroupAsset::assetType(void)::type);
  }
  return &re::AudioFileGroupAsset::assetType(void)::type;
}

uint64_t re::AudioFileGroupAsset::isCompletelyLoaded(uint64_t this)
{
  uint64_t v1;
  re::AudioFileAsset *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;

  v1 = *(_QWORD *)(this + 24);
  if (!v1)
    return 1;
  v2 = *(re::AudioFileAsset **)(this + 40);
  v3 = 24 * v1;
  while (1)
  {
    v4 = *((_QWORD *)v2 + 1);
    if (!v4)
      break;
    v5 = atomic_load((unsigned int *)(v4 + 704));
    if (v5 != 2)
      break;
    v6 = *((_QWORD *)v2 + 1);
    if (!v6)
    {
      re::AudioFileAsset::assetType((re::AudioFileAsset *)this);
      return 0;
    }
    v7 = *(uint64_t **)(v6 + 264);
    if (v7 != re::AudioFileAsset::assetType((re::AudioFileAsset *)this))
      return 0;
    this = re::AssetHandle::loadedAsset<re::AudioFileAsset>(v2);
    if (!this)
      return this;
    if (!*(_BYTE *)(this + 153))
      return 0;
    v2 = (re::AudioFileAsset *)((char *)v2 + 24);
    v3 -= 24;
    if (!v3)
      return 1;
  }
  return 0;
}

void re::AudioFileGroupAsset::completeLoad(re::AudioFileGroupAsset *this, AudioSceneService *a2)
{
  uint64_t v2;
  re::AudioFileAsset *v4;
  uint64_t v5;
  uint64_t v6;
  re::AudioFileGroupAsset *v7;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v4 = (re::AudioFileAsset *)*((_QWORD *)this + 5);
    v5 = 24 * v2;
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if (v6)
      {
        v7 = *(re::AudioFileGroupAsset **)(v6 + 264);
        this = (re::AudioFileGroupAsset *)re::AudioFileAsset::assetType(this);
        if (v7 == this)
        {
          ++*(_DWORD *)(*((_QWORD *)v4 + 1) + 260);
          this = (re::AudioFileGroupAsset *)re::AssetHandle::loadedAsset<re::AudioFileAsset>(v4);
          if (this)
            re::AudioFileAsset::completeLoad(this, a2);
        }
      }
      else
      {
        this = (re::AudioFileGroupAsset *)re::AudioFileAsset::assetType(this);
      }
      v4 = (re::AudioFileAsset *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
}

void re::AudioFileGroupAssetLoader::~AudioFileGroupAssetLoader(re::AudioFileGroupAssetLoader *this)
{
  *((_QWORD *)this + 3) = 0;
}

{
  *((_QWORD *)this + 3) = 0;
  JUMPOUT(0x2276933B8);
}

re *re::AudioFileGroupAssetLoader::unloadAsset(re *this, void *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    re::DynamicArray<re::AssetHandle>::deinit((uint64_t)a2 + 8);
    return (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

uint64_t re::AudioFileGroupAssetLoader::isSupportedSourceExtension(re::AudioFileGroupAssetLoader *this, const char *a2)
{
  return 0;
}

uint64_t re::AudioFileGroupAssetLoader::introspectionType(re::AudioFileGroupAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254104598);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104598))
  {
    qword_254104590 = re::internal::getOrCreateInfo((re::internal *)"AudioFileGroupAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioFileGroupAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioFileGroupAsset, (void (*)(re::IntrospectionBase *))&unk_254104588, 0);
    __cxa_guard_release(&qword_254104598);
  }
  return qword_254104590;
}

void re::AudioFileGroupAssetLoader::unregisterAsset(re::AudioFileGroupAssetLoader *this, uint64_t *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v5;
  re::AssetHandle *v6;
  uint64_t v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;
  re::AssetHandle *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5)
    {
      if (*((_BYTE *)a2 + 56))
      {
        re::DynamicArray<re::AssetHandle>::DynamicArray((uint64_t)buf, a2 + 1);
        if (v15)
        {
          v6 = v16;
          v7 = 24 * v15;
          do
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v11, v6);
            if (v12)
            {
              v8 = atomic_load((unsigned int *)(v12 + 704));
              if (v8 == 2)
                re::AssetHandle::internalForceUnloadAsync((re::AssetHandle *)v11);
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
            v6 = (re::AssetHandle *)((char *)v6 + 24);
            v7 -= 24;
          }
          while (v7);
        }
        re::DynamicArray<re::AssetHandle>::deinit((uint64_t)buf);
        v5 = *((_QWORD *)this + 3);
      }
      (*(void (**)(uint64_t, uint64_t, const re::ExistingAssetInformation *))(*(_QWORD *)v5 + 184))(v5, a2[6], a3);
    }
    else
    {
      v9 = *re::audioLogObjects(0);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = a2[6];
        *(_DWORD *)buf = 134217984;
        v14 = v10;
        _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileGroupAssetLoader] Cannot unregister asset %llu without a valid audio scene service.", buf, 0xCu);
      }
    }
  }
}

void sub_2253D79C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t *re::RenderGraphAsset::assetType(re::RenderGraphAsset *this)
{
  unsigned __int8 v1;

  {
    re::RenderGraphAsset::assetType(void)::type = (uint64_t)"RenderGraph";
    qword_255827908 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::RenderGraphAsset::assetType(void)::type);
  }
  return &re::RenderGraphAsset::assetType(void)::type;
}

__guard re::RenderGraphAssetLoader::introspectionType(re::RenderGraphAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::RenderGraphAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RenderGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphAsset>, 0);
    }
  }
  return v2[68];
}

re *re::RenderGraphAssetLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

uint64_t re::RenderGraphAssetLoader::registerAsset(re::RenderGraphAssetLoader *this, char *a2, const re::ExistingAssetInformation *a3)
{
  const char *v6;
  const char *v7;
  size_t v8;
  unint64_t v9;
  const char *v11;
  size_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)a2 + 46) = re::ServiceLocator::service<re::AssetService>(*((_QWORD *)this + 1));
  if ((*((_QWORD *)a3 + 13) & 1) != 0)
    v6 = (const char *)*((_QWORD *)a3 + 14);
  else
    v6 = (char *)a3 + 105;
  v11 = v6;
  v12 = strlen(v6);
  re::DynamicString::operator=((re::DynamicString *)(a2 + 376), (uint64_t)&v11);
  if ((a2[384] & 1) != 0)
    v7 = (const char *)*((_QWORD *)a2 + 49);
  else
    v7 = a2 + 385;
  v8 = strlen(v7);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)v7, v8, 0, (unint64_t *)&v11);
    v9 = (v12 + ((_QWORD)v11 << 6) + ((unint64_t)v11 >> 2) - 0x61C8864680B583E9) ^ (unint64_t)v11;
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)a2 + 51) = v9;
  return re::AssetLoader::registerAsset(this, a2, a3);
}

BOOL re::RenderGraphAssetLoader::isSupportedSourceExtension(re::RenderGraphAssetLoader *this, const char *a2)
{
  return !strcasecmp(a2, "rerendergraph") || !strcasecmp(a2, "rendergraph") || strcasecmp(a2, "hmrendergraph") == 0;
}

uint64_t re::RenderGraphAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  re::RenderGraphFile *v2;
  uint64_t *v4;
  re *v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  const char *v11;
  _BYTE *v12;
  _BYTE v13[8];
  uint64_t v14;
  char v15;
  _BYTE v16[7];
  _BYTE *v17;
  uint8_t buf[4];
  _BYTE v19[18];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = (re::RenderGraphFile *)(a2 + 8);
  if (*(_QWORD *)(a2 + 144) == *(_DWORD *)(a2 + 772))
  {
LABEL_5:
    re::RenderGraphFile::initConnectionSourceDataList((_BOOL8)v2);
    return 1;
  }
  v4 = re::RenderGraphFile::calculateValidity((re::RenderGraphFile *)(a2 + 8), (uint64_t)v13);
  if (!v13[0])
  {
    v7 = *re::assetTypesLogObjects((re *)v4);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      v8 = *(_QWORD *)(a2 + 32);
    else
      v8 = a2 + 25;
    if ((v15 & 1) != 0)
      v10 = v17;
    else
      v10 = v16;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v19 = v8;
    *(_WORD *)&v19[8] = 2080;
    *(_QWORD *)&v19[10] = v10;
    v11 = "Failed to calculate validity of render graph asset %s: %s";
    goto LABEL_31;
  }
  re::RenderGraphFile::initRuntimeNodeSettings(v2, (uint64_t)buf);
  v5 = (re *)re::Result<re::Unit,re::DynamicString>::operator=((uint64_t)v13, (uint64_t)buf);
  if (!buf[0])
  {
    v5 = *(re **)&v19[4];
    if (*(_QWORD *)&v19[4])
    {
      if ((v19[12] & 1) != 0)
        v5 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v19[4] + 40))();
    }
  }
  if (v13[0])
    goto LABEL_5;
  v7 = *re::assetTypesLogObjects(v5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      v9 = *(_QWORD *)(a2 + 32);
    else
      v9 = a2 + 25;
    if ((v15 & 1) != 0)
      v12 = v17;
    else
      v12 = v16;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v19 = v9;
    *(_WORD *)&v19[8] = 2080;
    *(_QWORD *)&v19[10] = v12;
    v11 = "Failed to initialize runtime node settings for render graph asset %s: %s";
LABEL_31:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v11, buf, 0x16u);
  }
LABEL_13:
  if (!v13[0] && v14 && (v15 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v14 + 40))();
  return 0;
}

uint64_t re::Result<re::Unit,re::DynamicString>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;

  if (*(_BYTE *)a1)
  {
    if (!*(_BYTE *)a2)
    {
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v3 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v4 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 32) = 0;
      v6 = *(_QWORD *)(a1 + 16);
      v5 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v3;
      *(_QWORD *)(a1 + 24) = v4;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 24) = v5;
    }
  }
  else if (*(_BYTE *)a2)
  {
    v8 = (_OWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
    {
      if ((*(_BYTE *)(a1 + 16) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 24));
      *v8 = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
    }
    *(_BYTE *)a1 = 1;
  }
  else
  {
    re::DynamicString::operator=((re::DynamicString *)(a1 + 8), (re::DynamicString *)(a2 + 8));
  }
  return a1;
}

uint64_t *re::allocInfo_RenderGraphAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_108);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_108))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104630, 0);
    *(uint64_t *)((char *)&qword_254104640 + 6) = 0;
    qword_254104640 = 0;
    qword_254104650 = 0;
    qword_254104658 = 0xFFFFFFFFLL;
    qword_254104630 = (uint64_t)&off_24ED7DAA8;
    qword_254104660 = (uint64_t)"RenderGraphAsset";
    dword_254104668 = 0;
    unk_254104670 = 0u;
    unk_254104680 = 0u;
    unk_254104690 = 0u;
    qword_2541046A0 = 0;
    __cxa_guard_release(&_MergedGlobals_108);
  }
  return &qword_254104630;
}

void re::initInfo_RenderGraphAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xD47C10C081B17130;
  v10[1] = "RenderGraphAsset";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254104628);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104628);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphFile((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "provider";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254104620 = v8;
      __cxa_guard_release(&qword_254104628);
    }
  }
  *((_QWORD *)this + 2) = 0x36800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254104620;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphAsset *re::internal::defaultConstruct<re::RenderGraphAsset>(int a1, int a2, re::RenderGraphAsset *this)
{
  return re::RenderGraphAsset::RenderGraphAsset(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphAsset>, this);
}

void re::RenderGraphAssetLoader::~RenderGraphAssetLoader(re::RenderGraphAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphAssetLoader::deferUnregister(re::RenderGraphAssetLoader *this, void *a2)
{
  return 1;
}

re::RenderGraphAsset *re::RenderGraphAsset::RenderGraphAsset(re::RenderGraphAsset *this)
{
  char *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;

  *((_QWORD *)this + 1) = off_24ED381E0;
  v2 = (char *)this + 8;
  *(_QWORD *)this = &off_24ED3CB60;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 1) = 0u;
  v3 = (_QWORD *)((char *)this + 16);
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(_QWORD *)v2 = &off_24ED37988;
  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 0;
  *((_DWORD *)this + 78) = 0;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_DWORD *)this + 88) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  re::DynamicString::setCapacity((_QWORD *)v2 + 46, 0);
  *(_OWORD *)(v2 + 428) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *(_QWORD *)((char *)this + 452) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 124) = 0;
  *(_QWORD *)((char *)this + 500) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 136) = 0;
  *(_QWORD *)((char *)this + 548) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 148) = 0;
  *(_QWORD *)((char *)this + 596) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 160) = 0;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *(_QWORD *)((char *)this + 644) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_DWORD *)this + 172) = 0;
  *(_QWORD *)((char *)this + 692) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 88) = 0;
  *((_BYTE *)this + 712) = 1;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *(_OWORD *)((char *)this + 764) = 0u;
  *(_QWORD *)((char *)this + 780) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 101) = 0;
  *((_DWORD *)this + 204) = 0;
  *((_OWORD *)v2 + 49) = 0u;
  *((_QWORD *)this + 108) = 0;
  *((_DWORD *)this + 214) = 0;
  *((_OWORD *)v2 + 51) = 0u;
  *((_OWORD *)v2 + 52) = 0u;
  return this;
}

void re::RenderGraphAsset::~RenderGraphAsset(re::RenderGraphAsset *this)
{
  *(_QWORD *)this = &off_24ED3CB60;
  re::RenderGraphFile::~RenderGraphFile((re::RenderGraphAsset *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_24ED3CB60;
  re::RenderGraphFile::~RenderGraphFile((re::RenderGraphAsset *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t *re::AnimationLibraryAsset::assetType(re::AnimationLibraryAsset *this)
{
  unsigned __int8 v1;

  {
    re::AnimationLibraryAsset::assetType(void)::type = (uint64_t)"AnimationLibraryAsset";
    qword_255827928 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AnimationLibraryAsset::assetType(void)::type);
  }
  return &re::AnimationLibraryAsset::assetType(void)::type;
}

uint64_t re::AnimationLibraryAsset::buildAsset(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  char *v11;
  char var0;
  char *var1;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  re::AssetPath *v16;
  re *v17;
  uint64_t *v18;
  StringID v20;
  _BYTE v21[24];
  uint64_t v22;
  _BYTE v23[18];
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      *(_QWORD *)&v20.var0 = 0;
      v20.var1 = (char *)&str_110;
      memset(v21, 0, sizeof(v21));
      if (v2 <= v6)
        break;
      v8 = *((_QWORD *)a1 + 4) + v5;
      if ((*(_BYTE *)(v8 + 8) & 1) != 0)
        v9 = *(const char **)(v8 + 16);
      else
        v9 = (const char *)(v8 + 9);
      *(_QWORD *)v23 = 0;
      *(_QWORD *)&v23[8] = &str_110;
      v10 = *(_QWORD *)v23;
      v11 = *(char **)&v23[8];
      *(_QWORD *)v23 = 0;
      *(_QWORD *)&v23[8] = &str_110;
      var0 = (char)v20.var0;
      var1 = v20.var1;
      *(_QWORD *)&v20.var0 = v10;
      v20.var1 = v11;
      *(_QWORD *)&v28 = v10 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
      *((_QWORD *)&v28 + 1) = var1;
      re::StringID::destroyString((re::StringID *)&v28);
      re::StringID::destroyString((re::StringID *)v23);
      v2 = *(_QWORD *)(a2 + 16);
      if (v2 <= v6)
        goto LABEL_18;
      v15 = *(_QWORD *)(a2 + 32) + v5;
      if ((*(_BYTE *)(v15 + 8) & 1) != 0)
        v16 = *(re::AssetPath **)(v15 + 16);
      else
        v16 = (re::AssetPath *)(v15 + 9);
      if (!v7)
      {
        v18 = re::globalAllocators(v17);
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 224, 8);
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_DWORD *)(v7 + 196) = 0x7FFFFFFF;
        *(_QWORD *)(v7 + 208) = 0;
        *(_QWORD *)(v7 + 216) = &str_110;
        re::AnimationLibraryAsset::init((re::AnimationLibraryAsset *)v7, 0);
      }
      re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)(v7 + 40), &v20);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
      re::StringID::destroyString((re::StringID *)&v20);
      ++v6;
      v2 = *((_QWORD *)a1 + 2);
      v5 += 32;
      if (v6 >= v2)
        return v7;
    }
    v22 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v23 = 136315906;
    *(_QWORD *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 797;
    v24 = 2048;
    v25 = v6;
    v26 = 2048;
    v27 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    v22 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v23 = 136315906;
    *(_QWORD *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 797;
    v24 = 2048;
    v25 = v6;
    v26 = 2048;
    v27 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return 0;
}

void re::AnimationLibraryAsset::init(re::AnimationLibraryAsset *this, re::Allocator *a2)
{
  uint64_t *v2;
  char *v4;

  v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *(_QWORD *)this = v2;
  re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(this, 0);
  ++*((_DWORD *)this + 6);
  *((_QWORD *)this + 5) = v2;
  re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((_QWORD *)this + 5, 0);
  *((_QWORD *)this + 15) = v2;
  v4 = (char *)this + 120;
  ++*((_DWORD *)v4 - 14);
  re::DynamicArray<re::AssetHandle>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v4 + 40), (uint64_t)v2, 3);
}

re::AssetHandle *re::DynamicArray<re::NamedAnimationLibraryEntry>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4;
  re::StringID *v5;
  re::AssetHandle *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = re::StringID::StringID((re::StringID *)(*((_QWORD *)this + 4) + 40 * v4), a2);
  result = re::AssetHandle::AssetHandle((re::StringID *)((char *)v5 + 16), (const re::AssetHandle *)&a2[1]);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::SkeletalAnimationLibraryEntry>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 120 * v4;
  *(_BYTE *)v5 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = &str_110;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = &str_110;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(v5 + 40) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = &str_110;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v5 + 56) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = &str_110;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v10 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v10;
  v11 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v5 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v11;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v12 = *(_QWORD *)(v5 + 96);
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v12;
  v13 = *(_QWORD *)(v5 + 112);
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v13;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::AnimationLibraryAsset::buildAsset(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  re::DynamicString *v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  re::DynamicString *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  re::AssetPath *v34;
  re *v35;
  uint64_t *v36;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  _QWORD *v48;
  char **v49;
  _QWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[18];
  __int16 v58;
  char *v59;
  __int16 v60;
  char *v61;
  _QWORD v62[6];
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    return 0;
  v42 = a4;
  v6 = 0;
  v7 = 0;
  v8 = (char *)&v51 + 8;
  v50 = a1;
  v9 = (re::DynamicString *)((char *)&v55 + 8);
  do
  {
    v40 = a1[2];
    if (v40)
    {
      v10 = 0;
      do
      {
        v11 = (char *)a1[2];
        if ((unint64_t)v11 <= v10)
          goto LABEL_41;
        v41 = v10;
        v12 = (uint64_t *)(a1[4] + (v10 << 9));
        v13 = v12 + 21;
        v14 = v12[21];
        if (v14)
        {
          v15 = 0;
          v16 = 0;
          v17 = v12 + 23;
          v48 = v12 + 28;
          v49 = (char **)(v12 + 26);
          v18 = 72;
          v46 = v12 + 21;
          v47 = (uint64_t *)(a1[4] + (v10 << 9));
          v44 = v12 + 23;
          v45 = v12[21];
          while (1)
          {
            v19 = *v13;
            if (*v13 <= (unint64_t)v16)
              break;
            v19 = *(_QWORD *)(a4 + 16);
            if (v19 <= v7)
              goto LABEL_36;
            v11 = (char *)*(unsigned int *)(*v17 + v15);
            if (*(char **)(*(_QWORD *)(a4 + 32) + 8 * v7) == v11 && a1[12] > (unint64_t)v11)
            {
              v21 = a2;
              *((_QWORD *)&v51 + 1) = 0;
              *(_QWORD *)&v52 = &str_110;
              *((_QWORD *)&v52 + 1) = 0;
              *(_QWORD *)&v53 = &str_110;
              *((_QWORD *)&v53 + 1) = 0;
              *(_QWORD *)&v54 = &str_110;
              *((_QWORD *)&v54 + 1) = 0;
              *(_QWORD *)&v55 = &str_110;
              *(_OWORD *)v9 = 0u;
              *((_OWORD *)v9 + 1) = 0u;
              v22 = v9;
              *((_OWORD *)v9 + 2) = 0u;
              LOBYTE(v51) = 2;
              re::StringID::operator=((unint64_t *)&v51 + 1, v12);
              v8 = *v49;
              if (*v49 <= v16)
                goto LABEL_37;
              v23 = re::StringID::operator=((unint64_t *)&v52 + 1, (uint64_t *)(*v48 + v18));
              v8 = *(char **)(v21 + 16);
              v24 = v7;
              if ((unint64_t)v8 <= v7)
                goto LABEL_38;
              v25 = *(_QWORD *)(v21 + 32) + 32 * v7;
              if ((*(_BYTE *)(v25 + 8) & 1) != 0)
                v26 = *(const char **)(v25 + 16);
              else
                v26 = (const char *)(v25 + 9);
              *(_QWORD *)v57 = 0;
              *(_QWORD *)&v57[8] = &str_110;
              v27 = *(_QWORD *)v57;
              v28 = *(_QWORD *)&v57[8];
              *(_QWORD *)v57 = 0;
              *(_QWORD *)&v57[8] = &str_110;
              v29 = BYTE8(v54);
              v30 = v55;
              *((_QWORD *)&v54 + 1) = v27;
              *(_QWORD *)&v55 = v28;
              v62[0] = v27 & 0xFFFFFFFFFFFFFFFELL | v29 & 1;
              v62[1] = v30;
              re::StringID::destroyString((re::StringID *)v62);
              re::StringID::destroyString((re::StringID *)v57);
              v8 = (char *)v50[12];
              if (v8 <= v11)
                goto LABEL_39;
              v31 = re::StringID::operator=((unint64_t *)&v53 + 1, (uint64_t *)(v50[14] + 112 * v11));
              v11 = *(char **)(a5 + 16);
              v32 = v7;
              if ((unint64_t)v11 <= v7)
                goto LABEL_40;
              v33 = *(_QWORD *)(a5 + 32) + 32 * v7;
              if ((*(_BYTE *)(v33 + 8) & 1) != 0)
                v34 = *(re::AssetPath **)(v33 + 16);
              else
                v34 = (re::AssetPath *)(v33 + 9);
              v12 = v47;
              if (!v6)
              {
                v36 = re::globalAllocators(v35);
                v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36[2] + 32))(v36[2], 224, 8);
                *(_OWORD *)(v6 + 176) = 0u;
                *(_OWORD *)(v6 + 192) = 0u;
                *(_OWORD *)v6 = 0u;
                *(_OWORD *)(v6 + 16) = 0u;
                *(_OWORD *)(v6 + 32) = 0u;
                *(_OWORD *)(v6 + 48) = 0u;
                *(_OWORD *)(v6 + 64) = 0u;
                *(_OWORD *)(v6 + 80) = 0u;
                *(_OWORD *)(v6 + 96) = 0u;
                *(_OWORD *)(v6 + 112) = 0u;
                *(_OWORD *)(v6 + 128) = 0u;
                *(_OWORD *)(v6 + 144) = 0u;
                *(_OWORD *)(v6 + 160) = 0u;
                *(_DWORD *)(v6 + 196) = 0x7FFFFFFF;
                *(_QWORD *)(v6 + 208) = 0;
                *(_QWORD *)(v6 + 216) = &str_110;
                re::AnimationLibraryAsset::init((re::AnimationLibraryAsset *)v6, 0);
              }
              re::DynamicArray<re::SkeletalAnimationLibraryEntry>::add((_QWORD *)v6, (uint64_t)&v51);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v56);
              re::AssetHandle::~AssetHandle(v22);
              re::StringID::destroyString((re::StringID *)((char *)&v54 + 8));
              re::StringID::destroyString((re::StringID *)((char *)&v53 + 8));
              re::StringID::destroyString((re::StringID *)((char *)&v52 + 8));
              v8 = (char *)&v51 + 8;
              re::StringID::destroyString((re::StringID *)((char *)&v51 + 8));
              a2 = v21;
              a4 = v42;
              a1 = v50;
              v9 = v22;
              v14 = v45;
              v13 = v46;
              v17 = v44;
            }
            ++v16;
            v18 += 256;
            v15 += 144;
            if ((char *)v14 == v16)
              goto LABEL_29;
          }
          *(_QWORD *)v57 = 0;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v51 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v62[0]) = 136315906;
          *(_QWORD *)((char *)v62 + 4) = "operator[]";
          WORD2(v62[1]) = 1024;
          *(_DWORD *)((char *)&v62[1] + 6) = 797;
          WORD1(v62[2]) = 2048;
          *(_QWORD *)((char *)&v62[2] + 4) = v16;
          WORD2(v62[3]) = 2048;
          *(_QWORD *)((char *)&v62[3] + 6) = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_36:
          *(_QWORD *)v57 = 0;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v51 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v62[0]) = 136315906;
          *(_QWORD *)((char *)v62 + 4) = "operator[]";
          WORD2(v62[1]) = 1024;
          *(_DWORD *)((char *)&v62[1] + 6) = 797;
          WORD1(v62[2]) = 2048;
          *(_QWORD *)((char *)&v62[2] + 4) = v7;
          WORD2(v62[3]) = 2048;
          *(_QWORD *)((char *)&v62[3] + 6) = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_37:
          v63 = 0u;
          v64 = 0u;
          memset(v62, 0, sizeof(v62));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v57 = 136315906;
          *(_QWORD *)&v57[4] = "operator[]";
          *(_WORD *)&v57[12] = 1024;
          *(_DWORD *)&v57[14] = 797;
          v58 = 2048;
          v59 = v16;
          v60 = 2048;
          v61 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_38:
          v11 = v57;
          v63 = 0u;
          v64 = 0u;
          memset(v62, 0, sizeof(v62));
          v38 = (char *)v24;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v57 = 136315906;
          *(_QWORD *)&v57[4] = "operator[]";
          *(_WORD *)&v57[12] = 1024;
          *(_DWORD *)&v57[14] = 797;
          v58 = 2048;
          v59 = v38;
          v60 = 2048;
          v61 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_39:
          v63 = 0u;
          v64 = 0u;
          memset(v62, 0, sizeof(v62));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v57 = 136315906;
          *(_QWORD *)&v57[4] = "operator[]";
          *(_WORD *)&v57[12] = 1024;
          *(_DWORD *)&v57[14] = 797;
          v58 = 2048;
          v59 = v11;
          v60 = 2048;
          v61 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_40:
          v63 = 0u;
          v64 = 0u;
          memset(v62, 0, sizeof(v62));
          v10 = MEMORY[0x24BDACB70];
          v39 = (char *)v32;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v57 = 136315906;
          *(_QWORD *)&v57[4] = "operator[]";
          *(_WORD *)&v57[12] = 1024;
          *(_DWORD *)&v57[14] = 797;
          v58 = 2048;
          v59 = v39;
          v60 = 2048;
          v61 = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_41:
          *(_QWORD *)v57 = 0;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v51 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v62[0]) = 136315906;
          *(_QWORD *)((char *)v62 + 4) = "operator[]";
          WORD2(v62[1]) = 1024;
          *(_DWORD *)((char *)&v62[1] + 6) = 797;
          WORD1(v62[2]) = 2048;
          *(_QWORD *)((char *)&v62[2] + 4) = v10;
          WORD2(v62[3]) = 2048;
          *(_QWORD *)((char *)&v62[3] + 6) = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_29:
        v10 = v41 + 1;
      }
      while (v41 + 1 != v40);
      v5 = *(_QWORD *)(a2 + 16);
    }
    ++v7;
  }
  while (v7 < v5);
  return v6;
}

uint64_t re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 0;
        v6 = 120 * v4;
        do
        {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + v5 + 96));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + v5 + 72));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 56));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 40));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 24));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 8));
          v5 += 120;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::AnimationLibraryAsset::insertEntry(uint64_t a1, re::AssetHandle *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  StringID *v14;
  int v15;
  int v16;
  unint64_t v17;
  _OWORD v18[2];
  int v19;
  uint64_t v20;

  if (*(_QWORD *)(a1 + 136) <= a3)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "entryIndex < animationLibraryEntries.size()", "insertEntry", 213);
    _os_crash();
    __break(1u);
  }
  else
  {
    re::DynamicArray<re::AssetHandle>::insert((_anonymous_namespace_ *)(a1 + 120), a3, a2);
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v20 = 0x7FFFFFFFLL;
    v5 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *(int **)(a1 + 176);
      while (1)
      {
        v8 = *v7;
        v7 += 8;
        if (v8 < 0)
          break;
        if (v5 == ++v6)
        {
          LODWORD(v6) = *(_DWORD *)(a1 + 192);
          break;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if ((_DWORD)v5 != (_DWORD)v6)
    {
      v9 = v6;
      do
      {
        v10 = *(_QWORD *)(a1 + 176) + 32 * v9;
        v13 = *(_QWORD *)(v10 + 24);
        v11 = (_QWORD *)(v10 + 24);
        v12 = v13;
        v14 = (StringID *)(v11 - 2);
        if (v13 >= a3)
        {
          v17 = v12 + 1;
          re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v18, v14, &v17);
        }
        else
        {
          re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v18, v14, v11);
        }
        if (*(_DWORD *)(a1 + 192) <= (v6 + 1))
          v15 = v6 + 1;
        else
          v15 = *(_DWORD *)(a1 + 192);
        while (1)
        {
          v9 = (v6 + 1);
          if (v15 - 1 == (_DWORD)v6)
            break;
          LODWORD(v6) = v6 + 1;
          v16 = v9;
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 176) + 32 * v9) & 0x80000000) != 0)
            goto LABEL_20;
        }
        v16 = v15;
LABEL_20:
        LODWORD(v6) = v16;
      }
      while ((_DWORD)v5 != v16);
    }
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(a1 + 160, (uint64_t)v18);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v18);
  }
}

void *re::DynamicArray<re::AssetHandle>::insert(_anonymous_namespace_ *this, unint64_t a2, re::AssetHandle *a3)
{
  unint64_t v4;
  uint64_t v7;
  re::AssetHandle *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 + 1 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::AssetHandle>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v7 = *((_QWORD *)this + 4);
  v8 = (re::AssetHandle *)(v7 + 24 * v4);
  if (v4 <= a2)
  {
    result = re::AssetHandle::AssetHandle(v8, a3);
  }
  else
  {
    v9 = v7 + 24 * v4;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    v10 = *(_QWORD *)(v9 - 16);
    *(_QWORD *)v8 = *(_QWORD *)(v9 - 24);
    *(_QWORD *)(v9 - 24) = 0;
    *(_QWORD *)(v9 - 16) = 0;
    v11 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 - 8);
    *(_QWORD *)(v9 + 8) = v10;
    *(_QWORD *)(v9 + 16) = v12;
    *(_QWORD *)(v9 - 8) = v11;
    v13 = 3 * a2;
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>((_QWORD *)(*((_QWORD *)this + 4) + 8 * v13), (_QWORD *)(*((_QWORD *)this + 4) + 24 * *((_QWORD *)this + 2) - 24), (_QWORD *)(*((_QWORD *)this + 4) + 24 * *((_QWORD *)this + 2)));
    result = re::AssetHandle::operator=((uint64_t *)(*((_QWORD *)this + 4) + 8 * v13), (uint64_t *)a3);
  }
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

double re::AnimationLibraryAsset::removeEntry(re::AnimationLibraryAsset *this, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  StringID *v14;
  BOOL v15;
  int v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD v21[2];
  _OWORD v22[2];
  int v23;
  uint64_t v24;
  _QWORD v25[2];

  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v24 = 0x7FFFFFFFLL;
  v4 = (char *)this + 160;
  v5 = *((unsigned int *)this + 48);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)*((_QWORD *)this + 22);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *((_DWORD *)this + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 != (_DWORD)v6)
  {
    v9 = v6;
    do
    {
      v10 = *((_QWORD *)this + 22) + 32 * v9;
      v13 = *(_QWORD *)(v10 + 24);
      v11 = (_QWORD *)(v10 + 24);
      v12 = v13;
      v14 = (StringID *)(v11 - 2);
      v15 = v13 > a2;
      if (v13 >= a2)
      {
        if (v15)
        {
          v25[0] = v12 - 1;
          re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v22, v14, v25);
        }
      }
      else
      {
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v22, v14, v11);
      }
      if (*((_DWORD *)this + 48) <= (v6 + 1))
        v16 = v6 + 1;
      else
        v16 = *((_DWORD *)this + 48);
      while (1)
      {
        v9 = (v6 + 1);
        if (v16 - 1 == (_DWORD)v6)
          break;
        LODWORD(v6) = v6 + 1;
        v17 = v9;
        if ((*(_DWORD *)(*((_QWORD *)this + 22) + 32 * v9) & 0x80000000) != 0)
          goto LABEL_21;
      }
      v17 = v16;
LABEL_21:
      LODWORD(v6) = v17;
    }
    while ((_DWORD)v5 != v17);
  }
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)v4, (uint64_t)v22);
  re::DynamicArray<re::AssetHandle>::removeStableAt((uint64_t)this + 120, a2);
  if ((*((_QWORD *)this + 26) > 1uLL || (v18 = (_BYTE *)*((_QWORD *)this + 27)) == 0 || *v18)
    && !re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, (_QWORD *)this + 26))
  {
    v21[0] = 0;
    v21[1] = &str_110;
    v19 = *((_QWORD *)this + 27);
    v25[0] = *((_QWORD *)this + 26) & 1;
    v25[1] = v19;
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = &str_110;
    re::StringID::destroyString((re::StringID *)v25);
    re::StringID::destroyString((re::StringID *)v21);
  }
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v22);
}

void re::DynamicArray<re::AssetHandle>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>((uint64_t *)(*(_QWORD *)(a1 + 32) + 24 * a2 + 24), (uint64_t *)(*(_QWORD *)(a1 + 32) + 24 * v2), (uint64_t *)(*(_QWORD *)(a1 + 32) + 24 * a2));
    v2 = *(_QWORD *)(a1 + 16);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 32) + 24 * v2 - 24));
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

uint64_t *re::AnimationLibraryAsset::setEntry(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v5 = a1;
  v22 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *(int **)(a1 + 176);
    while (1)
    {
      v9 = *v8;
      v8 += 8;
      if (v9 < 0)
        break;
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a1 + 192);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    v10 = v7;
    do
    {
      v11 = *(_QWORD *)(v5 + 176);
      if (*(_QWORD *)(v11 + 32 * v10 + 24) == a2)
      {
        v12 = *re::animationLogObjects((re *)a1);
        a1 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)a1)
        {
          v13 = *(_QWORD *)(v11 + 32 * v10 + 16);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v13;
          _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Animation library asset - entry has an associated key. Changing they asset associated with key %s", buf, 0xCu);
        }
      }
      v14 = *(_DWORD *)(v5 + 192);
      if (v14 <= (int)v7 + 1)
        v14 = v7 + 1;
      while (1)
      {
        v10 = (v7 + 1);
        if (v14 - 1 == (_DWORD)v7)
          break;
        LODWORD(v7) = v7 + 1;
        v15 = v10;
        if ((*(_DWORD *)(*(_QWORD *)(v5 + 176) + 32 * v10) & 0x80000000) != 0)
          goto LABEL_18;
      }
      v15 = v14;
LABEL_18:
      LODWORD(v7) = v15;
    }
    while ((_DWORD)v6 != v15);
  }
  if (*(_QWORD *)(v5 + 136) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::AssetHandle::operator=((uint64_t *)(*(_QWORD *)(v5 + 152) + 24 * a2), a3);
}

re *re::AnimationLibraryAssetLoader::unloadAsset(re::AnimationLibraryAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::AnimationLibraryAsset>((re *)"unloadAsset", 259, a2);
}

re *re::internal::destroyPersistent<re::AnimationLibraryAsset>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::StringID::destroyString((re::StringID *)(a3 + 208));
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a3 + 160));
    re::DynamicArray<re::AssetHandle>::deinit(a3 + 120);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a3 + 80);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a3 + 40);
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::AnimationLibraryAssetLoader::isSupportedSourceExtension(re::AnimationLibraryAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reanimationlibrary") == 0;
}

__guard re::AnimationLibraryAssetLoader::introspectionType(re::AnimationLibraryAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::AnimationLibraryAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"AnimationLibraryAsset", (uint64_t (*)(re::internal *))re::allocInfo_AnimationLibraryAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationLibraryAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AnimationLibraryAsset>, 0);
    }
  }
  return v2[71];
}

uint64_t *re::allocInfo_TransformAnimationLibraryEntry(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541046B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541046B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104868, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254104878 = 0;
    qword_254104888 = 0;
    qword_254104890 = 0xFFFFFFFFLL;
    qword_254104868 = (uint64_t)&off_24ED7DAA8;
    qword_254104898 = (uint64_t)"TransformAnimationLibraryEntry";
    dword_2541048A0 = 0;
    xmmword_2541048A8 = 0u;
    unk_2541048B8 = 0u;
    xmmword_2541048C8 = 0u;
    qword_2541048D8 = 0;
    __cxa_guard_release(&qword_2541046B0);
  }
  return &qword_254104868;
}

void re::initInfo_TransformAnimationLibraryEntry(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x72E8C42152E0C5ELL;
  v15[1] = "TransformAnimationLibraryEntry";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2541046B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541046B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "animationName";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254104720 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_AssetHandle((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "animationHandle";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254104728 = v13;
      __cxa_guard_release(&qword_2541046B8);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254104720;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TransformAnimationLibraryEntry>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TransformAnimationLibraryEntry>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TransformAnimationLibraryEntry>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TransformAnimationLibraryEntry>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void re::internal::defaultConstruct<re::TransformAnimationLibraryEntry>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::TransformAnimationLibraryEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::TransformAnimationLibraryEntry>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::TransformAnimationLibraryEntry>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

double re::internal::defaultConstruct<re::SkeletalAnimationLibraryEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = &str_110;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = &str_110;
  result = 0.0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::SkeletalAnimationLibraryEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
  re::StringID::destroyString((re::StringID *)(a3 + 56));
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

double re::internal::defaultConstructV2<re::SkeletalAnimationLibraryEntry>(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &str_110;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &str_110;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &str_110;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = &str_110;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void re::internal::defaultDestructV2<re::SkeletalAnimationLibraryEntry>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  re::StringID::destroyString((re::StringID *)(a1 + 56));
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

uint64_t re::TransformEntryUpgrade(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;

  v4 = re::StringID::operator=(a3, a2);
  re::AssetHandle::operator=((uint64_t *)v4 + 2, a2 + 2);
  return 1;
}

void re::internal::defaultConstruct<re::NamedAnimationLibraryEntry>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::NamedAnimationLibraryEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::NamedAnimationLibraryEntry>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::NamedAnimationLibraryEntry>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t *re::allocInfo_AnimationLibraryAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541046F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541046F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541049D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541049E0 = 0;
    qword_2541049F0 = 0;
    qword_2541049F8 = 0xFFFFFFFFLL;
    qword_2541049D0 = (uint64_t)&off_24ED7DAA8;
    qword_254104A00 = (uint64_t)"AnimationLibraryAsset";
    dword_254104A08 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254104A40 = 0;
    __cxa_guard_release(&qword_2541046F8);
  }
  return &qword_2541049D0;
}

void re::initInfo_AnimationLibraryAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v24[2];
  __int128 v25;

  v24[0] = 0x72B9F762ED1258F2;
  v24[1] = "AnimationLibraryAsset";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  v4 = atomic_load((unsigned __int8 *)&qword_254104700);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104700);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalAnimationLibraryEntry>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "skeletalAnimationLibrary";
      *(_QWORD *)(v7 + 16) = &qword_254104798;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_254104768 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::NamedAnimationLibraryEntry>>::get();
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v8 + 32))(v8, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "transformAnimationLibrary";
      *(_QWORD *)(v9 + 16) = &qword_2541047D8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x2800000002;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254104770 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::DynamicArray<re::NamedAnimationLibraryEntry>>::get();
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "animationSceneLibrary";
      *(_QWORD *)(v11 + 16) = &qword_2541047D8;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x5000000003;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254104778 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "animationLibraryEntries";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x7800000004;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254104780 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      re::IntrospectionInfo<re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get((uint64_t)v16, v17);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "entryKeyMap";
      *(_QWORD *)(v18 + 16) = &qword_254104818;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0xA000000005;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254104788 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::StringID>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "defaultEntryKey";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0xD000000006;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_254104790 = v22;
      __cxa_guard_release(&qword_254104700);
    }
  }
  *((_QWORD *)this + 2) = 0xE000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_254104768;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AnimationLibraryAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AnimationLibraryAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AnimationLibraryAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AnimationLibraryAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v23 = v25;
}

void re::IntrospectionInfo<re::DynamicArray<re::SkeletalAnimationLibraryEntry>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31[2];
  __int128 v32;
  const char *v33;
  __int128 v34;

  v0 = atomic_load((unsigned __int8 *)&qword_254104708);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254104708))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254104798);
    qword_254104798 = (uint64_t)&off_24ED3CCE8;
    __cxa_guard_release(&qword_254104708);
  }
  if ((_MergedGlobals_109 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2541046D8;
    if (qword_2541046D8)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2541046C8);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541046C8))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541048E0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2541048F0 = 0;
      *(_QWORD *)&xmmword_254104900 = 0;
      *((_QWORD *)&xmmword_254104900 + 1) = 0xFFFFFFFFLL;
      qword_2541048E0 = (uint64_t)&off_24ED7DAA8;
      qword_254104910 = (uint64_t)"SkeletalAnimationLibraryEntry";
      dword_254104918 = 0;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      qword_254104950 = 0;
      __cxa_guard_release(&qword_2541046C8);
    }
    qword_2541046D8 = (uint64_t)&qword_2541048E0;
    *(_QWORD *)&v34 = 0x893CCA30395019C4;
    *((_QWORD *)&v34 + 1) = "SkeletalAnimationLibraryEntry";
    re::StringID::destroyString((re::StringID *)&v34);
    xmmword_254104900 = v32;
    v4 = atomic_load((unsigned __int8 *)&qword_2541046D0);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2541046D0);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "meshIdentifier";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_254104748 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::IntrospectionInfo<re::StringID>::get(1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "skeletonName";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x2800000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_254104750 = v20;
        v21 = re::introspectionAllocator((re *)v20);
        v23 = re::IntrospectionInfo<re::StringID>::get(1, v22);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "animationName";
        *(_QWORD *)(v24 + 16) = v23;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0x3800000003;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_254104758 = v24;
        v25 = re::introspectionAllocator((re *)v24);
        v27 = re::introspect_AssetHandle((re *)1, v26);
        v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
        *(_DWORD *)v28 = 1;
        *(_QWORD *)(v28 + 8) = "animationHandle";
        *(_QWORD *)(v28 + 16) = v27;
        *(_QWORD *)(v28 + 24) = 0;
        *(_QWORD *)(v28 + 32) = 0x4800000004;
        *(_DWORD *)(v28 + 40) = 0;
        *(_QWORD *)(v28 + 48) = 0;
        *(_QWORD *)(v28 + 56) = 0;
        *(_DWORD *)(v28 + 64) = 0;
        qword_254104760 = v28;
        __cxa_guard_release(&qword_2541046D0);
      }
    }
    qword_2541048F0 = 0x7800000008;
    v1 = &qword_2541048E0;
    dword_2541048F8 = 8;
    word_2541048FC = 0;
    dword_254104918 = 4;
    qword_254104920 = (uint64_t)&qword_254104748;
    qword_254104928 = (uint64_t)re::internal::defaultConstruct<re::SkeletalAnimationLibraryEntry>;
    qword_254104930 = (uint64_t)re::internal::defaultDestruct<re::SkeletalAnimationLibraryEntry>;
    qword_254104940 = 0;
    qword_254104938 = 0;
    qword_254104948 = (uint64_t)re::internal::defaultConstructV2<re::SkeletalAnimationLibraryEntry>;
    qword_254104950 = (uint64_t)re::internal::defaultDestructV2<re::SkeletalAnimationLibraryEntry>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541048E0, v3);
    v34 = v32;
    if ((_MergedGlobals_109 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_109 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104798, 0);
      qword_2541047A8 = 0x2800000003;
      dword_2541047B0 = v5;
      word_2541047B4 = 0;
      *(_QWORD *)&xmmword_2541047B8 = 0;
      *((_QWORD *)&xmmword_2541047B8 + 1) = 0xFFFFFFFFLL;
      qword_2541047C8 = (uint64_t)v1;
      unk_2541047D0 = 0;
      qword_254104798 = (uint64_t)&off_24ED3CCE8;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254104798, (const re::IntrospectionBase *)&v32);
      if ((BYTE8(v32) & 1) != 0)
        v8 = v33;
      else
        v8 = (char *)&v32 + 9;
      if ((_QWORD)v32 && (BYTE8(v32) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v32 + 40))();
      v30 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v31);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v29 + 1) = v10;
      }
      else
      {
        v34 = v30;
        re::TypeBuilder::beginListType((uint64_t)&v32, v31, 1, 0x28uLL, 8uLL, &v34);
        re::TypeBuilder::setConstructor((uint64_t)&v32, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v32, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v32, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v32, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v32, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v32, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v32, v11);
      }
      xmmword_2541047B8 = v29;
      re::StringID::destroyString((re::StringID *)v31);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::NamedAnimationLibraryEntry>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  re::IntrospectionBase *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29[2];
  __int128 v30;
  const char *v31;
  __int128 v32;

  v0 = atomic_load((unsigned __int8 *)&qword_254104710);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254104710))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541047D8);
    qword_2541047D8 = (uint64_t)&off_24ED3CD80;
    __cxa_guard_release(&qword_254104710);
  }
  if ((byte_2541046A9 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2541046F0;
    if (qword_2541046F0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2541046E0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541046E0))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104958, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254104968 = 0;
      *(_QWORD *)&xmmword_254104978 = 0;
      *((_QWORD *)&xmmword_254104978 + 1) = 0xFFFFFFFFLL;
      qword_254104958 = (uint64_t)&off_24ED7DAA8;
      qword_254104988 = (uint64_t)"NamedAnimationLibraryEntry";
      dword_254104990 = 0;
      xmmword_254104998 = 0u;
      *(_OWORD *)&qword_2541049A8 = 0u;
      xmmword_2541049B8 = 0u;
      qword_2541049C8 = 0;
      __cxa_guard_release(&qword_2541046E0);
    }
    qword_2541046F0 = (uint64_t)&qword_254104958;
    *(_QWORD *)&v32 = 0x618480047777F904;
    *((_QWORD *)&v32 + 1) = "NamedAnimationLibraryEntry";
    re::StringID::destroyString((re::StringID *)&v32);
    xmmword_254104978 = v30;
    v4 = atomic_load((unsigned __int8 *)&qword_2541046E8);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2541046E8);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "animationName";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254104730 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::introspect_AssetHandle((re *)1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "animationHandle";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254104738 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v23 = v22;
        v24 = (uint64_t *)qword_2541046C0;
        if (!qword_2541046C0)
        {
          v24 = re::allocInfo_TransformAnimationLibraryEntry((re *)v22);
          qword_2541046C0 = (uint64_t)v24;
          re::initInfo_TransformAnimationLibraryEntry((re *)v24, v25);
        }
        v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 64, 8);
        *(_DWORD *)v26 = 6;
        *(_QWORD *)(v26 + 8) = 2;
        *(_QWORD *)(v26 + 16) = v24;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 32) = re::TransformEntryUpgrade;
        *(_BYTE *)(v26 + 40) = 0;
        *(_QWORD *)(v26 + 48) = 0;
        *(_DWORD *)(v26 + 56) = 0;
        qword_254104740 = v26;
        __cxa_guard_release(&qword_2541046E8);
      }
    }
    qword_254104968 = 0x2800000008;
    v1 = &qword_254104958;
    dword_254104970 = 8;
    word_254104974 = 0;
    dword_254104990 = 3;
    *(_QWORD *)&xmmword_254104998 = &qword_254104730;
    *((_QWORD *)&xmmword_254104998 + 1) = re::internal::defaultConstruct<re::NamedAnimationLibraryEntry>;
    qword_2541049A8 = (uint64_t)re::internal::defaultDestruct<re::NamedAnimationLibraryEntry>;
    *(_QWORD *)&xmmword_2541049B8 = 0;
    qword_2541049B0 = 0;
    *((_QWORD *)&xmmword_2541049B8 + 1) = re::internal::defaultConstructV2<re::NamedAnimationLibraryEntry>;
    qword_2541049C8 = (uint64_t)re::internal::defaultDestructV2<re::NamedAnimationLibraryEntry>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254104958, v3);
    v32 = v30;
    if ((byte_2541046A9 & 1) == 0)
    {
LABEL_7:
      byte_2541046A9 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541047D8, 0);
      qword_2541047E8 = 0x2800000003;
      dword_2541047F0 = v5;
      word_2541047F4 = 0;
      *(_QWORD *)&xmmword_2541047F8 = 0;
      *((_QWORD *)&xmmword_2541047F8 + 1) = 0xFFFFFFFFLL;
      qword_254104808 = (uint64_t)v1;
      unk_254104810 = 0;
      qword_2541047D8 = (uint64_t)&off_24ED3CD80;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541047D8, (const re::IntrospectionBase *)&v30);
      if ((BYTE8(v30) & 1) != 0)
        v8 = v31;
      else
        v8 = (char *)&v30 + 9;
      if ((_QWORD)v30 && (BYTE8(v30) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v30 + 40))();
      v28 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v29);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v27 + 1) = v10;
      }
      else
      {
        v32 = v28;
        re::TypeBuilder::beginListType((uint64_t)&v30, v29, 1, 0x28uLL, 8uLL, &v32);
        re::TypeBuilder::setConstructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v30, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v30, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v30, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v30, v11);
      }
      xmmword_2541047F8 = v27;
      re::StringID::destroyString((re::StringID *)v29);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_254104718);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254104718))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254104818);
    qword_254104818 = (uint64_t)&off_24ED3CE18;
    __cxa_guard_release(&qword_254104718);
  }
  if ((byte_2541046AA & 1) == 0)
  {
    v3 = re::IntrospectionInfo<re::StringID>::get(1, a2);
    v5 = re::introspect_size_t((re *)1, v4);
    if ((byte_2541046AA & 1) == 0)
    {
      v6 = (uint64_t)v5;
      byte_2541046AA = 1;
      v7 = v5[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104818, 0);
      qword_254104828 = 0x3000000007;
      dword_254104830 = v7;
      word_254104834 = 0;
      *(_QWORD *)&xmmword_254104838 = 0;
      *((_QWORD *)&xmmword_254104838 + 1) = 0xFFFFFFFFLL;
      qword_254104848 = (uint64_t)v3;
      unk_254104850 = 0;
      qword_254104858 = v6;
      unk_254104860 = 0;
      qword_254104818 = (uint64_t)&off_24ED3CE18;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_254104818, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *(_OWORD *)(v6 + 32);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_254104838 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

double re::internal::defaultConstruct<re::AnimationLibraryAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 180) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 196) = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 208) = 0;
  *(_QWORD *)(a3 + 216) = &str_110;
  return result;
}

uint64_t re::internal::defaultDestruct<re::AnimationLibraryAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 208));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a3 + 160));
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 120);
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a3 + 80);
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a3 + 40);
  return re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a3);
}

double re::internal::defaultConstructV2<re::AnimationLibraryAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 196) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &str_110;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::AnimationLibraryAsset>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 208));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a1 + 160));
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 120);
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a1 + 80);
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a1 + 40);
  return re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a1);
}

uint64_t re::introspect_AnimationLibraryAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationLibraryAsset", (uint64_t (*)(re::internal *))re::allocInfo_AnimationLibraryAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AnimationLibraryAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AnimationLibraryAsset>, this);
}

void re::AnimationLibraryAssetLoader::~AnimationLibraryAssetLoader(re::AnimationLibraryAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::NamedAnimationLibraryEntry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  re::AssetHandle *v11;
  unint64_t *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 40 * v9);
        v11 = (re::AssetHandle *)(v8 + 16);
        v12 = v7;
        do
        {
          v13 = *((_QWORD *)v11 - 2);
          *v12 = *v12 & 0xFFFFFFFFFFFFFFFELL | *((_QWORD *)v11 - 2) & 1;
          *v12 = *((_QWORD *)v11 - 2) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v12[1] = *((_QWORD *)v11 - 1);
          *((_QWORD *)v11 - 1) = &str_110;
          *((_QWORD *)v11 - 2) = 0;
          v12[2] = 0;
          v12[3] = 0;
          v12[4] = 0;
          v12[3] = *((_QWORD *)v11 + 1);
          *((_QWORD *)v11 + 1) = 0;
          v14 = v12[2];
          v12[2] = 0;
          v12[2] = *(_QWORD *)v11;
          *(_QWORD *)v11 = v14;
          v15 = v12[4];
          v12[4] = *((_QWORD *)v11 + 2);
          *((_QWORD *)v11 + 2) = v15;
          re::AssetHandle::~AssetHandle(v11);
          re::StringID::destroyString((re::AssetHandle *)((char *)v11 - 16));
          v16 = (_QWORD *)((char *)v11 + 24);
          v11 = (re::AssetHandle *)((char *)v11 + 40);
          v12 += 5;
        }
        while (v16 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::SkeletalAnimationLibraryEntry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x78uLL))
        {
          v2 = 120 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 120 * a2, 8);
          if (result)
          {
            v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::SkeletalAnimationLibraryEntry>((_QWORD *)v5[4], (_QWORD *)(v5[4] + 120 * v5[2]), v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 120, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::ObjectHelper::move<re::SkeletalAnimationLibraryEntry>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if (a1 != a2)
  {
    v5 = a1 + 12;
    do
    {
      *(_BYTE *)a3 = *((_BYTE *)v5 - 96);
      v6 = *(v5 - 11);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFFELL | *(v5 - 11) & 1;
      *(_QWORD *)(a3 + 8) = *(v5 - 11) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
      *(_QWORD *)(a3 + 16) = *(v5 - 10);
      *(v5 - 10) = &str_110;
      *(v5 - 11) = 0;
      v7 = *(v5 - 9);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL | *(v5 - 9) & 1;
      *(_QWORD *)(a3 + 24) = *(v5 - 9) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
      *(_QWORD *)(a3 + 32) = *(v5 - 8);
      *(v5 - 8) = &str_110;
      *(v5 - 9) = 0;
      v8 = *(v5 - 7);
      *(_QWORD *)(a3 + 40) = *(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFFELL | *(v5 - 7) & 1;
      *(_QWORD *)(a3 + 40) = *(v5 - 7) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
      *(_QWORD *)(a3 + 48) = *(v5 - 6);
      *(v5 - 6) = &str_110;
      *(v5 - 7) = 0;
      v9 = *(v5 - 5);
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(a3 + 56) & 0xFFFFFFFFFFFFFFFELL | *(v5 - 5) & 1;
      *(_QWORD *)(a3 + 56) = *(v5 - 5) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
      *(_QWORD *)(a3 + 64) = *(v5 - 4);
      *(v5 - 4) = &str_110;
      *(v5 - 5) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 88) = 0;
      *(_QWORD *)(a3 + 80) = *(v5 - 2);
      *(v5 - 2) = 0;
      v10 = *(_QWORD *)(a3 + 72);
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 72) = *(v5 - 3);
      *(v5 - 3) = v10;
      v11 = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a3 + 88) = *(v5 - 1);
      *(v5 - 1) = v11;
      *(_QWORD *)(a3 + 96) = 0;
      *(_QWORD *)(a3 + 104) = 0;
      *(_QWORD *)(a3 + 112) = 0;
      *(_QWORD *)(a3 + 104) = v5[1];
      v5[1] = 0;
      v12 = *(_QWORD *)(a3 + 96);
      *(_QWORD *)(a3 + 96) = 0;
      *(_QWORD *)(a3 + 96) = *v5;
      *v5 = v12;
      v13 = *(_QWORD *)(a3 + 112);
      *(_QWORD *)(a3 + 112) = v5[2];
      v5[2] = v13;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v5 - 3));
      re::StringID::destroyString((re::StringID *)(v5 - 5));
      re::StringID::destroyString((re::StringID *)(v5 - 7));
      re::StringID::destroyString((re::StringID *)(v5 - 9));
      re::StringID::destroyString((re::StringID *)(v5 - 11));
      v14 = v5 + 3;
      v5 += 15;
      a3 += 120;
    }
    while (v14 != a2);
  }
}

_QWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 != a1)
  {
    v3 = a2;
    do
    {
      v4 = *(a3 - 2);
      *(a3 - 2) = *(v3 - 2);
      *(v3 - 2) = v4;
      v6 = *(a3 - 3);
      a3 -= 3;
      v5 = v6;
      *a3 = 0;
      v7 = *(v3 - 3);
      v3 -= 3;
      *a3 = v7;
      *v3 = v5;
      v8 = a3[2];
      a3[2] = v3[2];
      v3[2] = v8;
    }
    while (v3 != a1);
  }
  return a2;
}

void re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v8 + v6 + 8) >> 31) ^ (*(_QWORD *)(v8 + v6 + 8) >> 1));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (_QWORD *)(v8 + v6 + 24));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result != a2)
  {
    do
    {
      v3 = a3[1];
      a3[1] = result[1];
      result[1] = v3;
      v4 = *a3;
      *a3 = 0;
      *a3 = *result;
      *result = v4;
      v5 = a3[2];
      a3[2] = result[2];
      result[2] = v5;
      result += 3;
      a3 += 3;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::SkeletalAnimationLibraryEntry>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _OWORD v15[3];

  v10 = 0;
  v11[0] = 0;
  v11[1] = &str_110;
  v12[0] = 0;
  v12[1] = &str_110;
  v13[0] = 0;
  v13[1] = &str_110;
  v14[0] = 0;
  v14[1] = &str_110;
  memset(v15, 0, sizeof(v15));
  re::DynamicArray<re::SkeletalAnimationLibraryEntry>::add(this, (uint64_t)&v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v15[1] + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 120 * *((_QWORD *)this + 2) - 120);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalAnimationLibraryEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 120 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 120 * a3;
}

void re::DynamicArray<re::SkeletalAnimationLibraryEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 120 * a2 + 56;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 40));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      re::StringID::destroyString((re::StringID *)(v10 - 16));
      re::StringID::destroyString((re::StringID *)(v10 - 32));
      re::StringID::destroyString((re::StringID *)(v10 - 48));
      ++v9;
      v8 += 120;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 120 * v4 + 72;
      do
      {
        v7 = (_OWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *((_BYTE *)v7 - 72) = 0;
        *((_QWORD *)v7 - 8) = 0;
        *((_QWORD *)v7 - 7) = &str_110;
        *((_QWORD *)v7 - 6) = 0;
        *((_QWORD *)v7 - 5) = &str_110;
        *((_QWORD *)v7 - 4) = 0;
        *((_QWORD *)v7 - 3) = &str_110;
        *((_QWORD *)v7 - 2) = 0;
        *((_QWORD *)v7 - 1) = &str_110;
        *v7 = 0uLL;
        v7[1] = 0uLL;
        v6 += 120;
        v7[2] = 0uLL;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 120 * v8;
      do
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + v9 + 96));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + v9 + 72));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 56));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 40));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 24));
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 8));
        v9 += 120;
      }
      while (v11 != v9);
    }
  }
  else
  {
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SkeletalAnimationLibraryEntry>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::SkeletalAnimationLibraryEntry>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 120 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 120;
        v15 -= 120;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 120 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 120 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::NamedAnimationLibraryEntry>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  _QWORD v11[3];

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  memset(v11, 0, sizeof(v11));
  re::DynamicArray<re::NamedAnimationLibraryEntry>::add(this, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 40 * *((_QWORD *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::NamedAnimationLibraryEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

void re::DynamicArray<re::NamedAnimationLibraryEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 40 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 40;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 40 * v4;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0;
        v7[1] = &str_110;
        v7[3] = 0;
        v7[4] = 0;
        v7[2] = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::NamedAnimationLibraryEntry>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::NamedAnimationLibraryEntry>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (unint64_t *)(v3[4] + 40 * v4);
  v6 = *a2;
  *v5 = *v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v5[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = 0;
  v5[3] = a2[3];
  a2[3] = 0;
  v7 = v5[2];
  v5[2] = 0;
  v5[2] = a2[2];
  a2[2] = v7;
  v8 = v5[4];
  v5[4] = a2[4];
  a2[4] = v8;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::NamedAnimationLibraryEntry>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::NamedAnimationLibraryEntry>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 40 * v2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 16));
      re::StringID::destroyString((re::StringID *)v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 40 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::NamedAnimationLibraryEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

uint64_t re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void introspect_REMeshIdentifierType(BOOL a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254104A50);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254104A50);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Invalid";
      qword_254104A70 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Instance";
      qword_254104A78 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Model";
      qword_254104A80 = v32;
      __cxa_guard_release(&qword_254104A50);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254104A58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254104A58))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254104AA0, "REMeshIdentifierType", 1, 1, 1, 1);
    qword_254104AA0 = (uint64_t)&off_24ED7D9E8;
    qword_254104AE0 = (uint64_t)&introspect_REMeshIdentifierType(BOOL)::enumTable;
    dword_254104AB0 = 9;
    __cxa_guard_release(&qword_254104A58);
  }
  if ((_MergedGlobals_110 & 1) == 0)
  {
    _MergedGlobals_110 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254104AA0, a2);
    v34 = 0xD5C6F6D094C2E4C6;
    v35 = "REMeshIdentifierType";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_254104AE0;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_254104AC0 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REMeshIdentifierType", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v7[0] = a1[1];
  v4 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2[7] + 16))(v2[7], v7);
  v5 = re::MeshNameMap::modelIndex((re::MeshNameMap *)(*a1)[1], v4);
  if (*(_QWORD *)(v3 + 416) <= (unint64_t)v5)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::DataArray<re::MeshModel>::tryGet(*(_QWORD *)(**a1 + 440) + 8, *(_QWORD *)(*(_QWORD *)(v3 + 432) + 8 * v5));
}

uint64_t *re::allocInfo_MeshIdentifierAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254104A60);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104A60))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104AE8, 0);
    *(uint64_t *)((char *)&qword_254104AF8 + 6) = 0;
    qword_254104AF8 = 0;
    qword_254104B08 = 0;
    qword_254104B10 = 0xFFFFFFFFLL;
    qword_254104AE8 = (uint64_t)&off_24ED7DAA8;
    qword_254104B18 = (uint64_t)"MeshIdentifierAsset";
    dword_254104B20 = 0;
    unk_254104B28 = 0u;
    unk_254104B38 = 0u;
    unk_254104B48 = 0u;
    qword_254104B58 = 0;
    __cxa_guard_release(&qword_254104A60);
  }
  return &qword_254104AE8;
}

void re::initInfo_MeshIdentifierAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x35C48431124203F4;
  v18[1] = "MeshIdentifierAsset";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_254104A68);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104A68);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      introspect_REMeshIdentifierType((BOOL)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "type";
      *(_QWORD *)(v8 + 16) = &qword_254104AA0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254104A88 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "name";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254104A90 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "partName";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254104A98 = v16;
      __cxa_guard_release(&qword_254104A68);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254104A88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshIdentifierAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshIdentifierAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshIdentifierAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshIdentifierAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::internal::defaultConstruct<re::MeshIdentifierAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
}

void re::internal::defaultDestruct<re::MeshIdentifierAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::MeshIdentifierAsset>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::MeshIdentifierAsset>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

uint64_t re::introspect_MeshIdentifierAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshIdentifierAsset", (uint64_t (*)(re::internal *))re::allocInfo_MeshIdentifierAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MeshIdentifierAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshIdentifierAsset>, this);
}

uint64_t *re::assetTypesLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::assetTypesLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "AssetTypes");
  }
  return &re::assetTypesLogObjects(void)::logObjects;
}

uint64_t *re::RigAsset::assetType(re::RigAsset *this)
{
  unsigned __int8 v1;

  {
    re::RigAsset::assetType(void)::type = (uint64_t)"Rig";
    qword_255827958 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::RigAsset::assetType(void)::type);
  }
  return &re::RigAsset::assetType(void)::type;
}

_QWORD *re::RigAsset::init(re::RigAsset *this, re::Allocator *a2)
{
  uint64_t *v2;
  char *v4;
  _QWORD *result;

  v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *(_QWORD *)this = v2;
  re::DynamicArray<re::RigDefinition>::setCapacity(this, 0);
  *((_QWORD *)this + 10) = v2;
  v4 = (char *)this + 80;
  ++*((_DWORD *)v4 - 14);
  result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  return result;
}

void re::RigAsset::init(re::RigAsset *this, const re::MeshAsset *a2, re::Allocator *a3)
{
  uint64_t *v3;
  unint64_t v6;

  v3 = (uint64_t *)a3;
  if (!a3)
  {
  }
  v6 = *((unsigned int *)a2 + 234);
  *(_QWORD *)this = v3;
  re::DynamicArray<re::RigDefinition>::setCapacity(this, v6);
  ++*((_DWORD *)this + 6);
  *((_QWORD *)this + 10) = v3;
  re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)this + 10, v6);
  ++*((_DWORD *)this + 26);
  re::RigAsset::addDefaultSkeletonRigs(this, a2);
}

void re::RigAsset::addDefaultSkeletonRigs(re::RigAsset *this, const re::MeshAsset *a2)
{
  const re::MeshAsset *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const re::MeshAsset *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const StringID *v30;
  unint64_t v32;
  int v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE v39[48];
  int v40;
  __n128 v41;
  __int128 v42;
  _OWORD v43[2];
  __int128 v44;
  _BYTE v45[18];
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  _anonymous_namespace_ *v49;
  uint64_t v50;

  v2 = a2;
  v50 = *MEMORY[0x24BDAC8D0];
  v33 = *((_DWORD *)this + 4);
  v35 = *((_QWORD *)a2 + 117);
  if (v35)
  {
    v3 = 0;
    while (1)
    {
      v32 = v3;
      v4 = (_QWORD *)re::MeshAsset::skeletonAtIndex(v2, v3);
      v5 = v4[3];
      v7 = v4[6];
      v6 = v4[7];
      v8 = v4[9];
      v9 = (__int128 *)v4[10];
      bzero(&v41, 0x478uLL);
      re::DynamicArray<re::RigDefinition>::add((uint64_t)this, (uint64_t)&v41);
      re::RigDefinition::~RigDefinition((re::RigDefinition *)&v41);
      v10 = *((_QWORD *)this + 4) + 1144 * *((_QWORD *)this + 2);
      v11 = (_anonymous_namespace_ *)(v10 - 280);
      *(_QWORD *)(v10 - 280) = *(_QWORD *)this;
      re::DynamicArray<re::RigTransform>::setCapacity((_QWORD *)(v10 - 280), v5);
      *(_QWORD *)(v10 - 120) = *(_QWORD *)this;
      v12 = v10 - 120;
      ++*(_DWORD *)(v12 - 136);
      re::DynamicArray<re::RigNode>::setCapacity((_QWORD *)v12, v5);
      ++*(_DWORD *)(v12 + 24);
      if (v5)
        break;
LABEL_13:
      v3 = v32 + 1;
      v2 = a2;
      if (v32 + 1 == v35)
        goto LABEL_14;
    }
    v13 = 0;
    v14 = 0;
    while (1)
    {
      if (v14 >= v8)
      {
        *(_QWORD *)v39 = 0x3F8000003F800000;
        *(_QWORD *)&v39[8] = 1065353216;
        *(_QWORD *)&v39[16] = 0;
        *(_QWORD *)&v39[24] = 0x3F80000000000000;
        *(_OWORD *)&v39[32] = 0uLL;
      }
      else
      {
        v15 = *v9;
        v16 = v9[2];
        *(_OWORD *)&v39[16] = v9[1];
        *(_OWORD *)&v39[32] = v16;
        *(_OWORD *)v39 = v15;
      }
      v41 = *(__n128 *)&v39[32];
      *(_OWORD *)v45 = 0u;
      re::convertQuaternionsToIntrinsicEulers<float>((uint64_t)&v39[16], 1, 0, (uint64_t)v45, 1);
      v42 = *(_OWORD *)v45;
      v43[0] = *(_OWORD *)v39;
      LOBYTE(v43[1]) = 0;
      *(_QWORD *)&v18 = re::DynamicArray<re::RigTransform>::add(v11, (uint64_t)&v41).n128_u64[0];
      v19 = v4[3];
      if (v19 <= v14)
        break;
      re::StringID::StringID((re::StringID *)&v41, (const StringID *)(v4[4] + v13));
      LOBYTE(v42) = 1;
      *((_QWORD *)&v42 + 1) = v14;
      if (v7 == v14)
        goto LABEL_35;
      v21 = *(unsigned int *)(v6 + 4 * v14);
      if ((_DWORD)v21 == -1)
        v21 = -1;
      *(_QWORD *)&v43[0] = v21;
      *(_OWORD *)((char *)v43 + 8) = xmmword_2260E7ED0;
      re::DynamicArray<re::RigNode>::add((_anonymous_namespace_ *)v12, &v41);
      re::StringID::destroyString((re::StringID *)&v41);
      ++v14;
      v13 += 16;
      v9 += 3;
      if (v5 == v14)
        goto LABEL_13;
    }
    re::internal::assertLog((re::internal *)6, v17, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v19);
    _os_crash();
    __break(1u);
LABEL_35:
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, v7);
    _os_crash();
    __break(1u);
LABEL_36:
    v44 = 0u;
    memset(v43, 0, sizeof(v43));
    v41 = 0u;
    v42 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v45 = 136315906;
    *(_QWORD *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 476;
    v46 = 2048;
    v47 = v7;
    v48 = 2048;
    v49 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_37:
    *(_QWORD *)v45 = 0;
    v44 = 0u;
    memset(v43, 0, sizeof(v43));
    v41 = 0u;
    v42 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v39 = 136315906;
    *(_QWORD *)&v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 797;
    *(_WORD *)&v39[18] = 2048;
    *(_QWORD *)&v39[20] = v8;
    *(_WORD *)&v39[28] = 2048;
    *(_QWORD *)&v39[30] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_14:
  v22 = *((_QWORD *)v2 + 55);
  if (v22)
  {
    v23 = *((_BYTE *)v2 + 952) ? (const re::MeshAsset *)((char *)v2 + 416) : (const re::MeshAsset *)((char *)v2 + 24);
    v37 = *(_QWORD *)v23;
    if (*(_QWORD *)v23)
    {
      v8 = 0;
      v36 = v22 + 8;
      while (1)
      {
        v6 = *((_QWORD *)v2 + 52);
        if (v6 <= v8)
          goto LABEL_37;
        v38 = v8;
        v24 = re::DataArray<re::MeshModel>::get(v36, *(_QWORD *)(*((_QWORD *)v2 + 54) + 8 * v8));
        v25 = *(_QWORD *)(v24 + 176);
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 8);
          if (v26)
          {
            v27 = v24;
            v7 = 0;
            v6 = 504;
            v28 = 4;
            do
            {
              v29 = *(_QWORD *)(v27 + 176);
              if (v29 && *(_QWORD *)(v29 + 8) > v7)
                v8 = *(unsigned int *)(*(_QWORD *)(v29 + 16) + v28);
              else
                v8 = 0xFFFFFFFFLL;
              if (v35 > v8)
              {
                v39[0] = 2;
                re::StringID::StringID((re::StringID *)&v39[8], (const StringID *)v27);
                v11 = *(_anonymous_namespace_ **)(v27 + 56);
                if ((unint64_t)v11 <= v7)
                  goto LABEL_36;
                re::StringID::StringID((re::StringID *)&v39[24], (const StringID *)(*(_QWORD *)(v27 + 64) + v6));
                v30 = (const StringID *)re::MeshAsset::skeletonAtIndex(a2, v8);
                re::StringID::StringID((re::StringID *)&v39[40], v30);
                v40 = v8 + v33;
                re::DynamicArray<re::MeshRigGraphIndex>::add((re::RigAsset *)((char *)this + 80), (uint64_t)v39);
                re::StringID::destroyString((re::StringID *)&v39[40]);
                re::StringID::destroyString((re::StringID *)&v39[24]);
                re::StringID::destroyString((re::StringID *)&v39[8]);
              }
              ++v7;
              v28 += 72;
              v6 += 560;
            }
            while (v26 != v7);
          }
        }
        v8 = v38 + 1;
        v2 = a2;
        if (v38 + 1 == v37)
          return;
      }
    }
  }
}

uint64_t re::DynamicArray<re::RigDefinition>::deinit(uint64_t a1)
{
  uint64_t result;
  re::RigDefinition *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::RigDefinition **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 1144 * v4;
        do
        {
          re::RigDefinition::~RigDefinition(v3);
          v3 = (re::RigDefinition *)((char *)v3 + 1144);
          v5 -= 1144;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::RigDefinition **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::RigDefinition *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RigDefinition>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::RigDefinition>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::RigDefinition>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  result = re::RigDefinition::RigDefinition(*(_QWORD *)(a1 + 32) + 1144 * v5, a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

re *re::RigAssetLoader::unloadAsset(re::RigAssetLoader *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::RigAsset>((re *)"unloadAsset", 120, a2);
}

re *re::internal::destroyPersistent<re::RigAsset>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 80);
    re::DynamicArray<re::StringID>::deinit(a3 + 40);
    re::DynamicArray<re::RigDefinition>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

BOOL re::RigAssetLoader::isSupportedSourceExtension(re::RigAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "rerig") == 0;
}

__guard re::RigAssetLoader::introspectionType(re::RigAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::RigAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RigAsset", (uint64_t (*)(re::internal *))re::allocInfo_RigAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RigAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigAsset>, 0);
    }
  }
  return v2[77];
}

void re::internal::defaultConstruct<re::MeshRigIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = &str_110;
  *(_DWORD *)(a3 + 56) = 0;
}

void re::internal::defaultDestruct<re::MeshRigIndex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::MeshRigIndex>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &str_110;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = &str_110;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::MeshRigIndex>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

uint64_t *re::allocInfo_RigAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254104B80);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104B80))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104CC8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254104CD8 = 0;
    qword_254104CE8 = 0;
    qword_254104CF0 = 0xFFFFFFFFLL;
    qword_254104CC8 = (uint64_t)&off_24ED7DAA8;
    qword_254104CF8 = (uint64_t)"RigAsset";
    dword_254104D00 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254104D38 = 0;
    __cxa_guard_release(&qword_254104B80);
  }
  return &qword_254104CC8;
}

void re::initInfo_RigAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  const re::IntrospectionBase *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x44758379FC0;
  v15[1] = "RigAsset";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_254104B88);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104B88);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::RigDefinition>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "rigDefinitions";
      *(_QWORD *)(v7 + 16) = &qword_254104BD0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_254104BB8 = v7;
      v8 = re::introspectionAllocator((re *)v7);
      v10 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v9);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v8 + 32))(v8, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "basePoseNames";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254104BC0 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::DynamicArray<re::MeshRigIndex>>::get();
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "meshRigs";
      *(_QWORD *)(v13 + 16) = qword_254104C10;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000003;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254104BC8 = v13;
      __cxa_guard_release(&qword_254104B88);
    }
  }
  *((_QWORD *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254104BB8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RigAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RigAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RigAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RigAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void re::IntrospectionInfo<re::DynamicArray<re::RigDefinition>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_254104B90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254104B90))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254104BD0);
    qword_254104BD0 = (uint64_t)&off_24ED3D010;
    __cxa_guard_release(&qword_254104B90);
  }
  if ((_MergedGlobals_111 & 1) == 0)
  {
    v1 = re::introspect_RigDefinition((re::IntrospectionBase **)1);
    if ((_MergedGlobals_111 & 1) == 0)
    {
      v2 = v1;
      _MergedGlobals_111 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104BD0, 0);
      qword_254104BE0 = 0x2800000003;
      dword_254104BE8 = v3;
      word_254104BEC = 0;
      *(_QWORD *)&xmmword_254104BF0 = 0;
      *((_QWORD *)&xmmword_254104BF0 + 1) = 0xFFFFFFFFLL;
      qword_254104C00 = v2;
      unk_254104C08 = 0;
      qword_254104BD0 = (uint64_t)&off_24ED3D010;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_254104BD0, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_254104BF0 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MeshRigIndex>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26[2];
  __int128 v27;
  const char *v28;
  __int128 v29;

  v0 = atomic_load((unsigned __int8 *)&qword_254104B98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254104B98))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_254104C10);
    qword_254104C10[0] = (uint64_t)&off_24ED3D0A8;
    __cxa_guard_release(&qword_254104B98);
  }
  if ((byte_254104B61 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254104B78;
    if (qword_254104B78)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254104B68);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254104B68))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104C50, 0);
      *(uint64_t *)((char *)&qword_254104C60 + 6) = 0;
      qword_254104C60 = 0;
      *(_QWORD *)&xmmword_254104C70 = 0;
      *((_QWORD *)&xmmword_254104C70 + 1) = 0xFFFFFFFFLL;
      qword_254104C50 = (uint64_t)&off_24ED7DAA8;
      qword_254104C80 = (uint64_t)"MeshRigIndex";
      dword_254104C88 = 0;
      xmmword_254104C90 = 0u;
      *(_OWORD *)&qword_254104CA0 = 0u;
      xmmword_254104CB0 = 0u;
      qword_254104CC0 = 0;
      __cxa_guard_release(&qword_254104B68);
    }
    qword_254104B78 = (uint64_t)&qword_254104C50;
    *(_QWORD *)&v29 = 0x38AFE38B67FC759ELL;
    *((_QWORD *)&v29 + 1) = "MeshRigIndex";
    re::StringID::destroyString((re::StringID *)&v29);
    xmmword_254104C70 = v27;
    v4 = atomic_load((unsigned __int8 *)&qword_254104B70);
    if ((v4 & 1) == 0)
    {
      v12 = (re *)__cxa_guard_acquire(&qword_254104B70);
      if ((_DWORD)v12)
      {
        v13 = re::introspectionAllocator(v12);
        v14 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
        v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = "meshIdentifier";
        *(_QWORD *)(v15 + 16) = v14;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 1;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        *(_DWORD *)(v15 + 64) = 0;
        qword_254104BA0 = v15;
        v16 = re::introspectionAllocator((re *)v15);
        v18 = re::IntrospectionInfo<re::StringID>::get(1, v17);
        v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = "skeletonName";
        *(_QWORD *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0x2800000002;
        *(_DWORD *)(v19 + 40) = 0;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        qword_254104BA8 = v19;
        v20 = re::introspectionAllocator((re *)v19);
        v22 = re::introspect_uint32_t((re *)1, v21);
        v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = "rigIndex";
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0x3800000003;
        *(_DWORD *)(v23 + 40) = 0;
        *(_QWORD *)(v23 + 48) = 0;
        *(_QWORD *)(v23 + 56) = 0;
        *(_DWORD *)(v23 + 64) = 0;
        qword_254104BB0 = v23;
        __cxa_guard_release(&qword_254104B70);
      }
    }
    qword_254104C60 = 0x4000000008;
    v1 = &qword_254104C50;
    dword_254104C68 = 8;
    word_254104C6C = 0;
    dword_254104C88 = 3;
    *(_QWORD *)&xmmword_254104C90 = &qword_254104BA0;
    *((_QWORD *)&xmmword_254104C90 + 1) = re::internal::defaultConstruct<re::MeshRigIndex>;
    qword_254104CA0 = (uint64_t)re::internal::defaultDestruct<re::MeshRigIndex>;
    unk_254104CA8 = 0;
    *(_QWORD *)&xmmword_254104CB0 = 0;
    *((_QWORD *)&xmmword_254104CB0 + 1) = re::internal::defaultConstructV2<re::MeshRigIndex>;
    qword_254104CC0 = (uint64_t)re::internal::defaultDestructV2<re::MeshRigIndex>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254104C50, v3);
    v29 = v27;
    if ((byte_254104B61 & 1) == 0)
    {
LABEL_7:
      byte_254104B61 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_254104C10, 0);
      unk_254104C20 = 0x2800000003;
      unk_254104C28 = v5;
      unk_254104C2C = 0;
      *(_QWORD *)&xmmword_254104C30 = 0;
      *((_QWORD *)&xmmword_254104C30 + 1) = 0xFFFFFFFFLL;
      unk_254104C40 = v1;
      unk_254104C48 = 0;
      qword_254104C10[0] = (uint64_t)&off_24ED3D0A8;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)qword_254104C10, (const re::IntrospectionBase *)&v27);
      if ((BYTE8(v27) & 1) != 0)
        v8 = v28;
      else
        v8 = (char *)&v27 + 9;
      if ((_QWORD)v27 && (BYTE8(v27) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v27 + 40))();
      v25 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v26);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v24 + 1) = v10;
      }
      else
      {
        v29 = v25;
        re::TypeBuilder::beginListType((uint64_t)&v27, v26, 1, 0x28uLL, 8uLL, &v29);
        re::TypeBuilder::setConstructor((uint64_t)&v27, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v27, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v27, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v27, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v27, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v27, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v27, v11);
      }
      xmmword_254104C30 = v24;
      re::StringID::destroyString((re::StringID *)v26);
    }
  }
}

double re::internal::defaultConstruct<re::RigAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RigAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a3 + 80);
  re::DynamicArray<re::StringID>::deinit(a3 + 40);
  return re::DynamicArray<re::RigDefinition>::deinit(a3);
}

double re::internal::defaultConstructV2<re::RigAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RigAsset>(uint64_t a1)
{
  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1 + 80);
  re::DynamicArray<re::StringID>::deinit(a1 + 40);
  return re::DynamicArray<re::RigDefinition>::deinit(a1);
}

uint64_t re::introspect_RigAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigAsset", (uint64_t (*)(re::internal *))re::allocInfo_RigAsset, (re::IntrospectionBase *(*)(void))re::initInfo_RigAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RigAsset>, this);
}

void re::RigAssetLoader::~RigAssetLoader(re::RigAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::RigDefinition>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::RigDefinition *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x478uLL))
        {
          v2 = 1144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 1144 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 1144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::RigDefinition *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 1144 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::RigDefinition::RigDefinition(v11, (uint64_t)v8);
          re::RigDefinition::~RigDefinition(v8);
          v8 = (re::RigDefinition *)((char *)v8 + 1144);
          v11 += 1144;
          v10 -= 1144;
        }
        while (v10);
        v8 = (re::RigDefinition *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::RigDefinition *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::RigDefinition::RigDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v6;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v8;
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v9;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v11;
  v12 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v12;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  v13 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v14 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v14;
  v15 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v15;
  ++*(_DWORD *)(a2 + 144);
  ++*(_DWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  v16 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v16;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v17 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = v17;
  v18 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = v18;
  ++*(_DWORD *)(a2 + 184);
  ++*(_DWORD *)(a1 + 184);
  re::DynamicRegisterTable::DynamicRegisterTable(a1 + 200, a2 + 200);
  *(_QWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a2 + 520) = 0;
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a2 + 528) = 0;
  v19 = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a2 + 536) = v19;
  v20 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a2 + 552) = v20;
  ++*(_DWORD *)(a2 + 544);
  ++*(_DWORD *)(a1 + 544);
  v21 = *(_OWORD *)(a2 + 560);
  v22 = *(_OWORD *)(a2 + 576);
  v23 = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 608) = v23;
  *(_OWORD *)(a1 + 560) = v21;
  *(_OWORD *)(a1 + 576) = v22;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a2 + 624) = 0;
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a2 + 632) = 0;
  v24 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a2 + 640) = v24;
  v25 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a2 + 656) = v25;
  ++*(_DWORD *)(a2 + 648);
  ++*(_DWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a2 + 664) = 0;
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a2 + 672) = 0;
  v26 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a2 + 680) = v26;
  v27 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a2 + 696) = v27;
  ++*(_DWORD *)(a2 + 688);
  ++*(_DWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a2 + 704) = 0;
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a2 + 712) = 0;
  v28 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a2 + 720) = v28;
  v29 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a2 + 736) = v29;
  ++*(_DWORD *)(a2 + 728);
  ++*(_DWORD *)(a1 + 728);
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a2 + 744) = 0;
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a2 + 752) = 0;
  v30 = *(_QWORD *)(a1 + 760);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a2 + 760) = v30;
  v31 = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  *(_QWORD *)(a2 + 776) = v31;
  ++*(_DWORD *)(a2 + 768);
  ++*(_DWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(a2 + 784) = 0;
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a2 + 792) = 0;
  v32 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(a2 + 800) = v32;
  v33 = *(_QWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
  *(_QWORD *)(a2 + 816) = v33;
  ++*(_DWORD *)(a2 + 808);
  ++*(_DWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
  *(_QWORD *)(a2 + 824) = 0;
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(a2 + 832) = 0;
  v34 = *(_QWORD *)(a1 + 840);
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(a2 + 840) = v34;
  v35 = *(_QWORD *)(a1 + 856);
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
  *(_QWORD *)(a2 + 856) = v35;
  ++*(_DWORD *)(a2 + 848);
  ++*(_DWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
  *(_QWORD *)(a2 + 864) = 0;
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(a2 + 872) = 0;
  v36 = *(_QWORD *)(a1 + 880);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  *(_QWORD *)(a2 + 880) = v36;
  v37 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(a2 + 896) = v37;
  ++*(_DWORD *)(a2 + 888);
  ++*(_DWORD *)(a1 + 888);
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
  *(_QWORD *)(a2 + 904) = 0;
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a2 + 912) = 0;
  v38 = *(_QWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  *(_QWORD *)(a2 + 920) = v38;
  v39 = *(_QWORD *)(a1 + 936);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
  *(_QWORD *)(a2 + 936) = v39;
  ++*(_DWORD *)(a2 + 928);
  ++*(_DWORD *)(a1 + 928);
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
  *(_QWORD *)(a2 + 944) = 0;
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 952);
  *(_QWORD *)(a2 + 952) = 0;
  v40 = *(_QWORD *)(a1 + 960);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  *(_QWORD *)(a2 + 960) = v40;
  v41 = *(_QWORD *)(a1 + 976);
  *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 976);
  *(_QWORD *)(a2 + 976) = v41;
  ++*(_DWORD *)(a2 + 968);
  ++*(_DWORD *)(a1 + 968);
  *(_QWORD *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a2 + 984) = 0;
  *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a2 + 992) = 0;
  v42 = *(_QWORD *)(a1 + 1000);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(a2 + 1000) = v42;
  v43 = *(_QWORD *)(a1 + 1016);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  *(_QWORD *)(a2 + 1016) = v43;
  ++*(_DWORD *)(a2 + 1008);
  ++*(_DWORD *)(a1 + 1008);
  *(_QWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a2 + 1024) = 0;
  *(_QWORD *)(a1 + 1032) = *(_QWORD *)(a2 + 1032);
  *(_QWORD *)(a2 + 1032) = 0;
  v44 = *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a2 + 1040);
  *(_QWORD *)(a2 + 1040) = v44;
  v45 = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a2 + 1056) = v45;
  ++*(_DWORD *)(a2 + 1048);
  ++*(_DWORD *)(a1 + 1048);
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_DWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a2 + 1064) = 0;
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a2 + 1072) = 0;
  v46 = *(_QWORD *)(a1 + 1080);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(a2 + 1080) = v46;
  v47 = *(_QWORD *)(a1 + 1096);
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(a2 + 1096);
  *(_QWORD *)(a2 + 1096) = v47;
  ++*(_DWORD *)(a2 + 1088);
  ++*(_DWORD *)(a1 + 1088);
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1104) = *(_QWORD *)(a2 + 1104);
  *(_QWORD *)(a2 + 1104) = 0;
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(a2 + 1112) = 0;
  v48 = *(_QWORD *)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(a2 + 1120);
  *(_QWORD *)(a2 + 1120) = v48;
  v49 = *(_QWORD *)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_QWORD *)(a2 + 1136) = v49;
  ++*(_DWORD *)(a2 + 1128);
  ++*(_DWORD *)(a1 + 1128);
  return a1;
}

_QWORD *re::IntrospectionDynamicArray<re::RigDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RigDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RigDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RigDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RigDefinition>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RigDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RigDefinition>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RigDefinition>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RigDefinition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigDefinition>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RigDefinition>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigDefinition>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RigDefinition>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  re::IntrospectionBase *v8;
  _BYTE v10[1144];

  bzero(v10, 0x478uLL);
  re::DynamicArray<re::RigDefinition>::add(a4, (uint64_t)v10);
  re::RigDefinition::~RigDefinition((re::RigDefinition *)v10);
  v8 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 1144 * *(_QWORD *)(a4 + 16) - 1144);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::RigDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RigDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 1144 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 1144 * a3;
}

void re::DynamicArray<re::RigDefinition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 1144 * a2;
    v9 = a2;
    do
    {
      re::RigDefinition::~RigDefinition((re::RigDefinition *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 1144;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigDefinition>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 1144 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 1136) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_DWORD *)(v7 + 64) = 0;
        *(_OWORD *)(v7 + 72) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_DWORD *)(v7 + 104) = 0;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_DWORD *)(v7 + 144) = 0;
        *(_OWORD *)(v7 + 152) = 0uLL;
        *(_OWORD *)(v7 + 168) = 0uLL;
        *(_DWORD *)(v7 + 184) = 0;
        *(_OWORD *)(v7 + 192) = 0uLL;
        *(_OWORD *)(v7 + 208) = 0uLL;
        *(_DWORD *)(v7 + 224) = 0;
        *(_DWORD *)(v7 + 264) = 0;
        *(_OWORD *)(v7 + 248) = 0uLL;
        *(_OWORD *)(v7 + 232) = 0uLL;
        *(_DWORD *)(v7 + 304) = 0;
        *(_OWORD *)(v7 + 272) = 0uLL;
        *(_OWORD *)(v7 + 288) = 0uLL;
        *(_DWORD *)(v7 + 344) = 0;
        *(_OWORD *)(v7 + 312) = 0uLL;
        *(_OWORD *)(v7 + 328) = 0uLL;
        *(_DWORD *)(v7 + 384) = 0;
        *(_OWORD *)(v7 + 352) = 0uLL;
        *(_OWORD *)(v7 + 368) = 0uLL;
        *(_DWORD *)(v7 + 424) = 0;
        *(_OWORD *)(v7 + 392) = 0uLL;
        *(_OWORD *)(v7 + 408) = 0uLL;
        *(_OWORD *)(v7 + 432) = 0uLL;
        *(_OWORD *)(v7 + 448) = 0uLL;
        *(_DWORD *)(v7 + 464) = 0;
        *(_DWORD *)(v7 + 504) = 0;
        *(_OWORD *)(v7 + 472) = 0uLL;
        *(_OWORD *)(v7 + 488) = 0uLL;
        *(_DWORD *)(v7 + 544) = 0;
        *(_OWORD *)(v7 + 512) = 0uLL;
        *(_OWORD *)(v7 + 528) = 0uLL;
        *(_DWORD *)(v7 + 648) = 0;
        *(_OWORD *)(v7 + 616) = 0uLL;
        *(_OWORD *)(v7 + 632) = 0uLL;
        *(_OWORD *)(v7 + 584) = 0uLL;
        *(_OWORD *)(v7 + 600) = 0uLL;
        *(_OWORD *)(v7 + 552) = 0uLL;
        *(_OWORD *)(v7 + 568) = 0uLL;
        *(_DWORD *)(v7 + 688) = 0;
        *(_OWORD *)(v7 + 656) = 0uLL;
        *(_OWORD *)(v7 + 672) = 0uLL;
        *(_DWORD *)(v7 + 728) = 0;
        *(_OWORD *)(v7 + 696) = 0uLL;
        *(_OWORD *)(v7 + 712) = 0uLL;
        *(_DWORD *)(v7 + 768) = 0;
        *(_OWORD *)(v7 + 736) = 0uLL;
        *(_OWORD *)(v7 + 752) = 0uLL;
        *(_DWORD *)(v7 + 808) = 0;
        *(_OWORD *)(v7 + 776) = 0uLL;
        *(_OWORD *)(v7 + 792) = 0uLL;
        *(_DWORD *)(v7 + 848) = 0;
        *(_OWORD *)(v7 + 816) = 0uLL;
        *(_OWORD *)(v7 + 832) = 0uLL;
        *(_DWORD *)(v7 + 888) = 0;
        *(_OWORD *)(v7 + 856) = 0uLL;
        *(_OWORD *)(v7 + 872) = 0uLL;
        *(_DWORD *)(v7 + 928) = 0;
        *(_OWORD *)(v7 + 896) = 0uLL;
        *(_OWORD *)(v7 + 912) = 0uLL;
        *(_DWORD *)(v7 + 968) = 0;
        *(_OWORD *)(v7 + 936) = 0uLL;
        *(_OWORD *)(v7 + 952) = 0uLL;
        *(_DWORD *)(v7 + 1008) = 0;
        *(_OWORD *)(v7 + 976) = 0uLL;
        *(_OWORD *)(v7 + 992) = 0uLL;
        *(_DWORD *)(v7 + 1048) = 0;
        *(_OWORD *)(v7 + 1016) = 0uLL;
        *(_OWORD *)(v7 + 1032) = 0uLL;
        *(_DWORD *)(v7 + 1088) = 0;
        *(_OWORD *)(v7 + 1072) = 0uLL;
        *(_OWORD *)(v7 + 1056) = 0uLL;
        *(_DWORD *)(v7 + 1128) = 0;
        v6 += 1144;
        *(_OWORD *)(v7 + 1096) = 0uLL;
        *(_OWORD *)(v7 + 1112) = 0uLL;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigDefinition>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  re::RigDefinition *v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(re::RigDefinition **)(a1 + 32);
      v10 = 1144 * v8;
      do
      {
        re::RigDefinition::~RigDefinition(v9);
        v9 = (re::RigDefinition *)(v11 + 1144);
        v10 -= 1144;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RigDefinition>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigDefinition>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RigDefinition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 1144 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 1144;
        v15 -= 1144;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 1144 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 1144 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RigDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MeshRigIndex>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MeshRigIndex>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MeshRigIndex>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigIndex>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MeshRigIndex>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshRigGraphIndex>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MeshRigIndex>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MeshRigGraphIndex>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MeshRigIndex>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  void *v11;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[0] = 0;
  v13[2] = 0;
  v10 = 0u;
  v12[0] = 0;
  v11 = &str_110;
  v12[1] = &str_110;
  v13[1] = &str_110;
  re::DynamicArray<re::MeshRigGraphIndex>::add(a4, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)((char *)&v10 + 8));
  v8 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + (*((_QWORD *)a4 + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigIndex>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MeshRigIndex>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  re::StringID *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = v8 << 6;
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + 40);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        re::StringID::destroyString((re::StringID *)((char *)v10 - 32));
        v10 = (re::StringID *)((char *)v10 + 64);
        v9 -= 64;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshRigGraphIndex>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::MeshRigGraphIndex>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = v12 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 64;
        v14 -= 64;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MeshRigIndex>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t *re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType(void)::type = (uint64_t)"BlendTreeDefinition";
    qword_255800F38 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType(void)::type);
  }
  return &re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType(void)::type;
}

uint64_t *re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType(void)::type = (uint64_t)"BlendShapeGroupDefinition";
    qword_255800F58 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType(void)::type);
  }
  return &re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType(void)::type;
}

uint64_t *re::allocInfo_BlendTreeDefinitionAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_112);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_112))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104D70, 0);
    *(uint64_t *)((char *)&qword_254104D80 + 6) = 0;
    qword_254104D80 = 0;
    qword_254104D90 = 0;
    qword_254104D98 = 0xFFFFFFFFLL;
    qword_254104D70 = (uint64_t)&off_24ED7DAA8;
    qword_254104DA0 = (uint64_t)"BlendTreeDefinitionAsset";
    dword_254104DA8 = 0;
    xmmword_254104DB0 = 0u;
    unk_254104DC0 = 0u;
    xmmword_254104DD0 = 0u;
    qword_254104DE0 = 0;
    __cxa_guard_release(&_MergedGlobals_112);
  }
  return &qword_254104D70;
}

void re::initInfo_BlendTreeDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x18BAB4A9C8CC2BDCLL;
  v10[1] = "BlendTreeDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254104D50);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104D50);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_BlendTreeDefinition((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "data";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254104D48 = v8;
      __cxa_guard_release(&qword_254104D50);
    }
  }
  *((_QWORD *)this + 2) = 0x14800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254104D48;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

double re::internal::defaultConstruct<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 320) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 180) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_DWORD *)(a3 + 312) = 0;
  return result;
}

void re::internal::defaultDestruct<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(int a1, int a2, re::BlendTreeDefinition *this)
{
  re::BlendTreeDefinition::~BlendTreeDefinition(this);
}

double re::internal::defaultConstructV2<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 0;
  return result;
}

uint64_t re::introspect_BlendTreeDefinitionAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendTreeDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_BlendTreeDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_BlendTreeDefinitionAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>, this);
}

uint64_t *re::allocInfo_BlendShapeGroupDefinitionAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254104D58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104D58))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104DE8, 0);
    *(uint64_t *)((char *)&qword_254104DF8 + 6) = 0;
    qword_254104DF8 = 0;
    qword_254104E08 = 0;
    qword_254104E10 = 0xFFFFFFFFLL;
    qword_254104DE8 = (uint64_t)&off_24ED7DAA8;
    qword_254104E18 = (uint64_t)"BlendShapeGroupDefinitionAsset";
    dword_254104E20 = 0;
    xmmword_254104E28 = 0u;
    unk_254104E38 = 0u;
    xmmword_254104E48 = 0u;
    qword_254104E58 = 0;
    __cxa_guard_release(&qword_254104D58);
  }
  return &qword_254104DE8;
}

void re::initInfo_BlendShapeGroupDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xE28673731F806DDCLL;
  v10[1] = "BlendShapeGroupDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254104D68);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104D68);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_BlendShapeGroupDefinition((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "data";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254104D60 = v8;
      __cxa_guard_release(&qword_254104D68);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254104D60;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_DWORD *)(a3 + 44) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)a3 + 2);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(re::StringID *a1)
{
  re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)a1 + 2);
  re::StringID::destroyString(a1);
}

uint64_t re::introspect_BlendShapeGroupDefinitionAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeGroupDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeGroupDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeGroupDefinitionAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>, this);
}

uint64_t *re::allocInfo_DRContextService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_113);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_113))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104E88, 0);
    *(uint64_t *)((char *)&qword_254104E98 + 6) = 0;
    qword_254104E98 = 0;
    qword_254104EA8 = 0;
    qword_254104EB0 = 0xFFFFFFFFLL;
    qword_254104E88 = (uint64_t)&off_24ED7DAA8;
    qword_254104EB8 = (uint64_t)"DRContextService";
    dword_254104EC0 = 0;
    unk_254104EC8 = 0u;
    unk_254104ED8 = 0u;
    unk_254104EE8 = 0u;
    qword_254104EF8 = 0;
    __cxa_guard_release(&_MergedGlobals_113);
  }
  return &qword_254104E88;
}

void re::initInfo_DRContextService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x2476733B9AD5F468;
  v5[1] = "DRContextService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x100000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_DRContextService(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DRContextService>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DRContextService>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DRContextService>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DRContextService>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_DRContextService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DRContextService", (uint64_t (*)(re::internal *))re::allocInfo_DRContextService, (re::IntrospectionBase *(*)(void))re::initInfo_DRContextService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DRContextService>, this);
}

uint64_t *re::allocInfo_DirectResourceAssetTracker(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254104E68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104E68))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104F00, 0);
    *(uint64_t *)((char *)&qword_254104F10 + 6) = 0;
    qword_254104F10 = 0;
    qword_254104F20 = 0;
    qword_254104F28 = 0xFFFFFFFFLL;
    qword_254104F00 = (uint64_t)&off_24ED7DAA8;
    qword_254104F30 = (uint64_t)"DirectResourceAssetTracker";
    dword_254104F38 = 0;
    unk_254104F40 = 0u;
    unk_254104F50 = 0u;
    unk_254104F60 = 0u;
    qword_254104F70 = 0;
    __cxa_guard_release(&qword_254104E68);
  }
  return &qword_254104F00;
}

void re::initInfo_DirectResourceAssetTracker(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xB00CC27AC4BE4DFELL;
  v5[1] = "DirectResourceAssetTracker";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xB800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_DirectResourceAssetTracker(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DirectResourceAssetTracker>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DirectResourceAssetTracker>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DirectResourceAssetTracker>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DirectResourceAssetTracker>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::DirectResourceAssetTracker>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_DWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_DWORD *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 172) = 0x7FFFFFFFLL;
  return result;
}

void re::internal::defaultDestruct<re::DirectResourceAssetTracker>(int a1, int a2, re::DirectResourceAssetTracker *this)
{
  re::DirectResourceAssetTracker::~DirectResourceAssetTracker(this);
}

double re::internal::defaultConstructV2<re::DirectResourceAssetTracker>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 172) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::introspect_DirectResourceAssetTracker(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectResourceAssetTracker", (uint64_t (*)(re::internal *))re::allocInfo_DirectResourceAssetTracker, (re::IntrospectionBase *(*)(void))re::initInfo_DirectResourceAssetTracker, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DirectResourceAssetTracker>, this);
}

void *re::IntrospectionInfo<unsigned char [16]>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  const re::IntrospectionBase *v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  std::__shared_mutex_base *v12;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info);
  }
  if (a1)
  {
    if (re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v4 = re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v4)
      return &re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
    if (re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::isInitialized)
    {
LABEL_14:
      v12 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v12);
      return &re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::isInitialized = 1;
  v8 = (const re::IntrospectionBase *)re::introspect_uint8_t((re *)1, a2);
  re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info, v8, 16);
  re::IntrospectionRegistry::add(v9, v10);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
  if ((BYTE8(v15) & 1) != 0)
    v11 = v16;
  else
    v11 = (char *)&v15 + 9;
  if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  v15 = *((_OWORD *)v8 + 2);
  xmmword_2558012E0 = v14;
  re::StringID::destroyString((re::StringID *)v17);
  if ((a1 & 1) == 0)
    goto LABEL_14;
  return &re::IntrospectionInfo<unsigned char [16]>::get(BOOL)::info;
}

uint64_t *re::allocInfo_DirectResourceId(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254104E80);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104E80))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254104F78, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254104F88 = 0;
    qword_254104F98 = 0;
    qword_254104FA0 = 0xFFFFFFFFLL;
    qword_254104F78 = (uint64_t)&off_24ED7DAA8;
    qword_254104FA8 = (uint64_t)"DirectResourceId";
    dword_254104FB0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254104FE8 = 0;
    __cxa_guard_release(&qword_254104E80);
  }
  return &qword_254104F78;
}

void re::initInfo_DirectResourceId(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0x3F9727A418475D64;
  v11[1] = "DirectResourceId";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_254104E78);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254104E78);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<unsigned char [16]>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_value";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254104E70 = v9;
      __cxa_guard_release(&qword_254104E78);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254104E70;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DirectResourceId>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DirectResourceId>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DirectResourceId>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DirectResourceId>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

void re::internal::defaultConstruct<re::DirectResourceId>(int a1, int a2, uuid_t dst)
{
  uuid_copy(dst, UUID_NULL);
}

void re::internal::defaultConstructV2<re::DirectResourceId>(unsigned __int8 *a1)
{
  uuid_copy(a1, UUID_NULL);
}

uint64_t re::introspect_DirectResourceId(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectResourceId", (uint64_t (*)(re::internal *))re::allocInfo_DirectResourceId, (re::IntrospectionBase *(*)(void))re::initInfo_DirectResourceId, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DirectResourceId>, this);
}

uint64_t re::DirectResourceAssetTracker::DirectResourceAssetTracker(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 172) = 0x7FFFFFFFLL;
  if (a2)
    DRContextSetChangeObserver();
  return a1;
}

void ___ZN2re26DirectResourceAssetTrackerC2EP11DRContext_sRKNS_3mtl6DeviceEPNS_11MeshManagerEPNS_12AssetServiceEPNS_14TextureManagerE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int *v49;
  int v50;
  int v51;
  unsigned __int8 src[8];
  unsigned __int8 v53[16];
  unsigned __int8 v54[8];
  uint64_t v55;
  unint64_t ClientIdentifier;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)src = 0;
  *(_QWORD *)v53 = 0;
  DRResourceGetIdentifier();
  ClientIdentifier = DRResourceGetClientIdentifier();
  uuid_copy((unsigned __int8 *)&v57, src);
  *(_QWORD *)v54 = 0;
  v55 = 0;
  switch(a3)
  {
    case 2:
      if (!*(_QWORD *)(v6 + 88))
        goto LABEL_48;
      v12 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (ClientIdentifier ^ (ClientIdentifier >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                      * (ClientIdentifier ^ (ClientIdentifier >> 30))) >> 27));
      v13 = ((((v58 - 0x61C8864680B583E9 + (v57 << 6) + (v57 >> 2)) ^ v57)
            - 0x61C8864680B583E9
            + ((v12 ^ (v12 >> 31)) << 6)
            + ((v12 ^ (v12 >> 31)) >> 2)) ^ v12 ^ (v12 >> 31))
          % *(unsigned int *)(v6 + 112);
      v14 = *(unsigned int *)(*(_QWORD *)(v6 + 96) + 4 * v13);
      if ((_DWORD)v14 == 0x7FFFFFFF)
        goto LABEL_48;
      v15 = *(_QWORD *)(v6 + 104);
      v16 = 0x7FFFFFFFLL;
      while (1)
      {
        if (*(_QWORD *)(v15 + 48 * v14 + 16) == ClientIdentifier)
        {
          if (!uuid_compare((const unsigned __int8 *)(v15 + 48 * v14 + 24), (const unsigned __int8 *)&v57))
          {
            v33 = *(_QWORD *)(v6 + 104);
            v34 = *(_DWORD *)(v33 + 48 * v14 + 8) & 0x7FFFFFFF;
            if (v16 == 0x7FFFFFFF)
              *(_DWORD *)(*(_QWORD *)(v6 + 96) + 4 * v13) = v34;
            else
              *(_DWORD *)(v33 + 48 * v16 + 8) = *(_DWORD *)(v33 + 48 * v16 + 8) & 0x80000000 | v34;
            v35 = *(_QWORD *)(v6 + 104);
            v36 = v35 + 48 * v14;
            v39 = *(_DWORD *)(v36 + 8);
            v38 = (int *)(v36 + 8);
            v37 = v39;
            if (v39 < 0)
            {
              *v38 = v37 & 0x7FFFFFFF;
              v35 = *(_QWORD *)(v6 + 104);
              v37 = *(_DWORD *)(v35 + 48 * v14 + 8);
            }
            *(_DWORD *)(v35 + 48 * v14 + 8) = *(_DWORD *)(v6 + 124) | v37 & 0x80000000;
            --*(_DWORD *)(v6 + 116);
            v40 = *(_DWORD *)(v6 + 128) + 1;
            *(_DWORD *)(v6 + 124) = v14;
            *(_DWORD *)(v6 + 128) = v40;
LABEL_48:
            DRResourceGetIdentifier();
            uuid_copy(src, v54);
            if (*(_QWORD *)(v6 + 40))
            {
              v41 = ((unint64_t)(*(_QWORD *)v53
                                      - 0x61C8864680B583E9
                                      + (*(_QWORD *)src << 6)
                                      + (*(_QWORD *)src >> 2)) ^ *(_QWORD *)src)
                  % *(unsigned int *)(v6 + 64);
              v42 = *(unsigned int *)(*(_QWORD *)(v6 + 48) + 4 * v41);
              if ((_DWORD)v42 != 0x7FFFFFFF)
              {
                if (uuid_compare((const unsigned __int8 *)(*(_QWORD *)(v6 + 56) + 40 * v42 + 12), src))
                {
                  while (1)
                  {
                    v43 = v42;
                    v44 = *(_QWORD *)(v6 + 56);
                    v45 = *(_DWORD *)(v44 + 40 * v42 + 8);
                    v42 = v45 & 0x7FFFFFFF;
                    if ((v45 & 0x7FFFFFFF) == 0x7FFFFFFF)
                      break;
                    if (!uuid_compare((const unsigned __int8 *)(v44 + 40 * v42 + 12), src))
                    {
                      *(_DWORD *)(*(_QWORD *)(v6 + 56) + 40 * v43 + 8) = *(_DWORD *)(*(_QWORD *)(v6 + 56)
                                                                                     + 40 * v43
                                                                                     + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v6 + 56) + 40 * v42 + 8) & 0x7FFFFFFF;
                      goto LABEL_55;
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v41) = *(_DWORD *)(*(_QWORD *)(v6 + 56)
                                                                          + 40 * v42
                                                                          + 8) & 0x7FFFFFFF;
LABEL_55:
                  v46 = *(_QWORD *)(v6 + 56);
                  v47 = v46 + 40 * v42;
                  v50 = *(_DWORD *)(v47 + 8);
                  v49 = (int *)(v47 + 8);
                  v48 = v50;
                  if (v50 < 0)
                  {
                    *v49 = v48 & 0x7FFFFFFF;
                    v46 = *(_QWORD *)(v6 + 56);
                    v48 = *(_DWORD *)(v46 + 40 * v42 + 8);
                  }
                  *(_DWORD *)(v46 + 40 * v42 + 8) = *(_DWORD *)(v6 + 76) | v48 & 0x80000000;
                  --*(_DWORD *)(v6 + 68);
                  v51 = *(_DWORD *)(v6 + 80) + 1;
                  *(_DWORD *)(v6 + 76) = v42;
                  *(_DWORD *)(v6 + 80) = v51;
                }
              }
            }
            *(_QWORD *)src = ClientIdentifier;
            uuid_copy(v53, (const unsigned __int8 *)&v57);
            v17 = v6;
            v18 = 0;
LABEL_59:
            v19 = 0;
LABEL_60:
            re::DirectResourceAssetTracker::setResourceAndUpdate(v17, src, v18, v19);
            return;
          }
          v15 = *(_QWORD *)(v6 + 104);
        }
        v16 = v14;
        v14 = *(_DWORD *)(v15 + 48 * v14 + 8) & 0x7FFFFFFF;
        if (v14 == 0x7FFFFFFF)
          goto LABEL_48;
      }
    case 1:
      *(_QWORD *)src = ClientIdentifier;
      uuid_copy(v53, (const unsigned __int8 *)&v57);
      v17 = v6;
      v18 = a4;
      v19 = 1;
      goto LABEL_60;
    case 0:
      v7 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (ClientIdentifier ^ (ClientIdentifier >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                     * (ClientIdentifier ^ (ClientIdentifier >> 30))) >> 27));
      v8 = (((v58 + (v57 << 6) + (v57 >> 2) - 0x61C8864680B583E9) ^ v57)
          + ((v7 ^ (v7 >> 31)) << 6)
          + ((v7 ^ (v7 >> 31)) >> 2)
          - 0x61C8864680B583E9) ^ v7 ^ (v7 >> 31);
      if (*(_QWORD *)(v6 + 88))
      {
        v9 = v8 % *(unsigned int *)(v6 + 112);
        v10 = *(unsigned int *)(*(_QWORD *)(v6 + 96) + 4 * v9);
        if ((_DWORD)v10 != 0x7FFFFFFF)
        {
          v11 = *(_QWORD *)(v6 + 104);
          do
          {
            if (*(_QWORD *)(v11 + 48 * v10 + 16) == ClientIdentifier)
            {
              if (!uuid_compare((const unsigned __int8 *)(v11 + 48 * v10 + 24), (const unsigned __int8 *)&v57))
                goto LABEL_28;
              v11 = *(_QWORD *)(v6 + 104);
            }
            v10 = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
          }
          while (v10 != 0x7FFFFFFF);
        }
      }
      else
      {
        LODWORD(v9) = 0;
      }
      v20 = *(unsigned int *)(v6 + 124);
      if ((_DWORD)v20 == 0x7FFFFFFF)
      {
        v20 = *(unsigned int *)(v6 + 120);
        v21 = v20;
        if ((_DWORD)v20 == *(_DWORD *)(v6 + 112))
        {
          re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::setCapacity(v6 + 88, 2 * *(_DWORD *)(v6 + 116));
          LODWORD(v9) = v8 % *(unsigned int *)(v6 + 112);
          v21 = *(_DWORD *)(v6 + 120);
        }
        *(_DWORD *)(v6 + 120) = v21 + 1;
        v22 = *(_QWORD *)(v6 + 104);
        v23 = *(_DWORD *)(v22 + 48 * v20 + 8);
      }
      else
      {
        v22 = *(_QWORD *)(v6 + 104);
        v23 = *(_DWORD *)(v22 + 48 * v20 + 8);
        *(_DWORD *)(v6 + 124) = v23 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v22 + 48 * v20 + 8) = v23 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(v6 + 104) + 48 * v20 + 8) = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 48 * v20 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v6 + 96) + 4 * v9);
      *(_QWORD *)(*(_QWORD *)(v6 + 104) + 48 * v20) = v8;
      v24 = *(_QWORD *)(v6 + 104) + 48 * v20;
      *(_QWORD *)(v24 + 16) = ClientIdentifier;
      uuid_copy((unsigned __int8 *)(v24 + 24), (const unsigned __int8 *)&v57);
      *(_QWORD *)(*(_QWORD *)(v6 + 104) + 48 * v20 + 40) = a4;
      *(_DWORD *)(*(_QWORD *)(v6 + 96) + 4 * v9) = v20;
      ++*(_DWORD *)(v6 + 116);
      ++*(_DWORD *)(v6 + 128);
LABEL_28:
      DRResourceGetIdentifier();
      uuid_copy(src, v54);
      v25 = (*(_QWORD *)v53 - 0x61C8864680B583E9 + (*(_QWORD *)src << 6) + (*(_QWORD *)src >> 2)) ^ *(_QWORD *)src;
      if (*(_QWORD *)(v6 + 40))
      {
        v26 = v25 % *(unsigned int *)(v6 + 64);
        v27 = *(unsigned int *)(*(_QWORD *)(v6 + 48) + 4 * v26);
        if ((_DWORD)v27 != 0x7FFFFFFF)
        {
          v28 = *(_QWORD *)(v6 + 56);
          while (uuid_compare((const unsigned __int8 *)(v28 + 40 * v27 + 12), src))
          {
            v28 = *(_QWORD *)(v6 + 56);
            v27 = *(_DWORD *)(v28 + 40 * v27 + 8) & 0x7FFFFFFF;
            if (v27 == 0x7FFFFFFF)
              goto LABEL_35;
          }
          goto LABEL_41;
        }
      }
      else
      {
        LODWORD(v26) = 0;
      }
LABEL_35:
      v29 = *(unsigned int *)(v6 + 76);
      if ((_DWORD)v29 == 0x7FFFFFFF)
      {
        v29 = *(unsigned int *)(v6 + 72);
        v30 = v29;
        if ((_DWORD)v29 == *(_DWORD *)(v6 + 64))
        {
          re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::setCapacity(v6 + 40, 2 * *(_DWORD *)(v6 + 68));
          LODWORD(v26) = v25 % *(unsigned int *)(v6 + 64);
          v30 = *(_DWORD *)(v6 + 72);
        }
        *(_DWORD *)(v6 + 72) = v30 + 1;
        v31 = *(_QWORD *)(v6 + 56);
        v32 = *(_DWORD *)(v31 + 40 * v29 + 8);
      }
      else
      {
        v31 = *(_QWORD *)(v6 + 56);
        v32 = *(_DWORD *)(v31 + 40 * v29 + 8);
        *(_DWORD *)(v6 + 76) = v32 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v31 + 40 * v29 + 8) = v32 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(v6 + 56) + 40 * v29 + 8) = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 40 * v29 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v26);
      *(_QWORD *)(*(_QWORD *)(v6 + 56) + 40 * v29) = v25;
      uuid_copy((unsigned __int8 *)(*(_QWORD *)(v6 + 56) + 40 * v29 + 12), src);
      *(_QWORD *)(*(_QWORD *)(v6 + 56) + 40 * v29 + 32) = a4;
      *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v26) = v29;
      ++*(_DWORD *)(v6 + 68);
      ++*(_DWORD *)(v6 + 80);
LABEL_41:
      *(_QWORD *)src = ClientIdentifier;
      uuid_copy(v53, (const unsigned __int8 *)&v57);
      v17 = v6;
      v18 = a4;
      goto LABEL_59;
  }
}

void re::DirectResourceAssetTracker::~DirectResourceAssetTracker(re::DirectResourceAssetTracker *this)
{
  re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::deinit((uint64_t *)this + 17);
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 5);

}

void re::DirectResourceAssetTracker::setResourceAndUpdate(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  re::MeshAsset *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  re::internal::AssetEntry *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  unsigned int v17;
  uint64_t v18;
  re::MeshAsset *v19;
  os_unfair_lock_s *v20;
  uint64_t *v21;
  uint64_t v22;
  re::internal::AssetEntry *v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  re::internal::AssetEntry *v35;
  os_unfair_lock_s *v36[2];
  id v37;
  uint64_t v38;
  unsigned __int8 v39[16];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v38 = *(_QWORD *)a2;
  uuid_copy(v39, a2 + 8);
  v6 = re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(a1 + 136, (uint64_t)&v38);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = *(_QWORD **)(v6 + 32);
      v9 = 8 * v7;
      while (1)
      {
        v10 = (re::MeshAsset *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16)
                                                                                                + 120))(&v33, *(_QWORD *)(a1 + 16), *v8);
        if ((_BYTE)v33)
          break;
LABEL_32:
        ++v8;
        v9 -= 8;
        if (!v9)
          return;
      }
      if (v35)
      {
        v11 = (uint64_t *)*((_QWORD *)v35 + 33);
        v12 = re::MeshAsset::assetType(v10);
        if (v11 == v12)
        {
          v13 = DRResourceAsMesh();
          v14 = v35;
          if (!v35)
            goto LABEL_30;
          v15 = v13;
          v16 = (os_unfair_lock_s *)*((_QWORD *)v35 + 3);
          if (v16)
          {
            re::AssetManager::convertToMutable(v16, (const re::AssetHandle *)&v34, 1);
            v14 = v35;
            if (!v35)
              goto LABEL_30;
          }
          v17 = atomic_load((unsigned int *)v14 + 176);
          if (v17 != 2)
            goto LABEL_30;
          re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v34);
          ++*((_DWORD *)v35 + 65);
          v18 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)&v34);
          if (!v18)
            goto LABEL_30;
          v19 = (re::MeshAsset *)v18;
          re::DirectMeshPayload::dynamicCast((id *)(v18 + 288), v36);
          if (v36[0])
          {
            if ((a4 & 1) == 0)
              -[os_unfair_lock_s setDirectMesh:](v36[0], "setDirectMesh:", v15);
            re::MeshAsset::replaceContentsWithPayload(v19, (id *)v36, (id *)a1, *(re::MeshManager **)(a1 + 8));
            re::MeshAsset::registerRuntimeData((uint64_t)v19, *(_QWORD *)(a1 + 8));
            v20 = v36[0];
          }
          else
          {
            v20 = 0;
          }

          goto LABEL_44;
        }
      }
      else
      {
        v12 = re::MeshAsset::assetType(v10);
      }
      if (!v35)
      {
        re::TextureAsset::assetType((re::TextureAsset *)v12);
        goto LABEL_30;
      }
      v21 = (uint64_t *)*((_QWORD *)v35 + 33);
      if (v21 != re::TextureAsset::assetType((re::TextureAsset *)v12))
        goto LABEL_30;
      v22 = DRResourceAsTexture();
      v23 = v35;
      if (!v35)
        goto LABEL_30;
      v24 = v22;
      v25 = (os_unfair_lock_s *)*((_QWORD *)v35 + 3);
      if (v25)
      {
        re::AssetManager::convertToMutable(v25, (const re::AssetHandle *)&v34, 1);
        v23 = v35;
        if (!v35)
          goto LABEL_30;
      }
      v26 = atomic_load((unsigned int *)v23 + 176);
      if (v26 != 2)
        goto LABEL_30;
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v34);
      ++*((_DWORD *)v35 + 65);
      v27 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)&v34);
      if (!v27)
        goto LABEL_30;
      v28 = (_QWORD *)v27;
      v29 = *(void **)(v27 + 112);
      if (v29)
      {
        if ((a4 & 1) == 0)
          objc_msgSend(v29, "setDirectTexture:", v24);
        if (v24)
          v30 = (id)DRTextureReadTexture();
        else
          v30 = 0;
        v37 = v30;
        if (v28[7] && v28[6])
        {
          re::TextureHandle::setMetalTexture((const re::TextureHandle *)(v28 + 6), &v37);
        }
        else
        {
          v31 = *(os_unfair_lock_s **)(a1 + 24);
          if (v31)
          {
            re::TextureManager::registerTexture(v31, &v37, v36);
            re::TextureHandle::operator=((re::TextureHandle *)(v28 + 6), (re::TextureHandle *)v36);
            re::TextureHandle::invalidate((re::TextureHandle *)v36);
          }
        }
        re::TextureHandle::setMetalTexture((const re::TextureHandle *)(v28 + 17), &v37);
        if (v37)

      }
LABEL_44:
      v32 = (os_unfair_lock_s *)v35;
      *((_BYTE *)v35 + 256) = 1;
      re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v32);
      re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v35);
LABEL_30:
      if ((_BYTE)v33)
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v34);
      goto LABEL_32;
    }
  }
}

_QWORD *re::DirectResourceAssetTracker::registerDirectResourceBackedAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v5[3];
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a3;
  v7 = 0;
  memset(v5, 0, sizeof(v5));
  v6 = 0;
  v3 = (_QWORD *)re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::add(a1 + 136, a2, (uint64_t)v5);
  if (v5[0] && v7)
    (*(void (**)(void))(*(_QWORD *)v5[0] + 40))();
  return re::DynamicArray<re::TransitionCondition *>::add(v3, &v8);
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::add(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char v15;

  v6 = re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()((uint64_t)&v15, (_QWORD *)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_9;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_9:
    v12 = re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 80 * v12;
    return v13 + 40;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    if (*(_QWORD *)(v10 + 80 * v9 + 16) == *(_QWORD *)a2)
    {
      v11 = uuid_compare((const unsigned __int8 *)(v10 + 80 * v9 + 24), (const unsigned __int8 *)(a2 + 8));
      v10 = *(_QWORD *)(a1 + 16);
      if (!v11)
        break;
    }
    v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_9;
  }
  v13 = v10 + 80 * v9;
  return v13 + 40;
}

uint64_t re::DirectResourceAssetTracker::unregisterDirectResourceBackedAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = a3;
  v4 = a1 + 136;
  result = re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(a1 + 136, a2);
  if (result)
  {
    v6 = result;
    result = re::DynamicArray<unsigned long long>::remove(result, &v7);
    if (!*(_QWORD *)(v6 + 16))
      return re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::remove(v4, a2);
  }
  return result;
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v9;

  v4 = re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()((uint64_t)&v9, (_QWORD *)a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    if (*(_QWORD *)(v6 + 80 * v5 + 16) == *(_QWORD *)a2)
    {
      v7 = uuid_compare((const unsigned __int8 *)(v6 + 80 * v5 + 24), (const unsigned __int8 *)(a2 + 8));
      v6 = *(_QWORD *)(a1 + 16);
      if (!v7)
        break;
    }
    v5 = *(_DWORD *)(v6 + 80 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 80 * v5 + 40;
}

BOOL re::DynamicArray<unsigned long long>::remove(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 8 * v3;
    v5 = *(_QWORD **)(a1 + 32);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (_QWORD *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 32);
  }
  v6 = (uint64_t)v5 - v2;
  v7 = v6 >> 3;
  if (v6 >> 3 != v3)
    re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt(a1, v6 >> 3);
  return v7 != v3;
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  char v13;

  v4 = re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()((uint64_t)&v13, (_QWORD *)a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = v4 % *(unsigned int *)(a1 + 24);
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v5);
  if ((_DWORD)v6 == 0x7FFFFFFF)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = 0x7FFFFFFFLL;
  while (*(_QWORD *)(v7 + 80 * v6 + 16) != *(_QWORD *)a2)
  {
LABEL_7:
    v8 = v6;
    v6 = *(_DWORD *)(v7 + 80 * v6 + 8) & 0x7FFFFFFF;
    if (v6 == 0x7FFFFFFF)
      return 0;
  }
  if (uuid_compare((const unsigned __int8 *)(v7 + 80 * v6 + 24), (const unsigned __int8 *)(a2 + 8)))
  {
    v7 = *(_QWORD *)(a1 + 16);
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)(v10 + 80 * v6 + 8) & 0x7FFFFFFF;
  if (v8 == 0x7FFFFFFF)
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v5) = v11;
  else
    *(_DWORD *)(v10 + 80 * v8 + 8) = *(_DWORD *)(v10 + 80 * v8 + 8) & 0x80000000 | v11;
  re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + 80 * v6);
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v6 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v6 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

uint64_t re::DirectResourceAssetTracker::findResource(uint64_t a1, uint64_t a2, unsigned __int8 *src)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 v6[16];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 88;
  v5 = a2;
  uuid_copy(v6, src);
  result = re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(v3, (uint64_t)&v5);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v9;

  v4 = re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()((uint64_t)&v9, (_QWORD *)a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    if (*(_QWORD *)(v6 + 48 * v5 + 16) == *(_QWORD *)a2)
    {
      v7 = uuid_compare((const unsigned __int8 *)(v6 + 48 * v5 + 24), (const unsigned __int8 *)(a2 + 8));
      v6 = *(_QWORD *)(a1 + 16);
      if (!v7)
        break;
    }
    v5 = *(_DWORD *)(v6 + 48 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 48 * v5 + 40;
}

uint64_t re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((unint64_t)(*((_QWORD *)uu2 + 1)
                                            + (*(_QWORD *)uu2 << 6)
                                            + (*(_QWORD *)uu2 >> 2)
                                            - 0x61C8864680B583E9) ^ *(_QWORD *)uu2)
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v6 = uuid_compare((const unsigned __int8 *)(v5 + 40 * v4 + 12), uu2);
    v5 = *(_QWORD *)(a1 + 16);
    if (!v6)
      break;
    v4 = *(_DWORD *)(v5 + 40 * v4 + 8) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 40 * v4 + 32;
}

double re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    v2 = result;
    v3 = (_QWORD *)(result + 40);
    result = *(_QWORD *)(result + 40);
    *((_DWORD *)v3 - 8) = v1 & 0x7FFFFFFF;
    if (result)
    {
      if (*(_QWORD *)(v2 + 72))
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      *(_QWORD *)(v2 + 72) = 0;
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      ++*(_DWORD *)(v2 + 64);
    }
  }
  return result;
}

uint64_t re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  return (((a2[2] + (a2[1] << 6) + (a2[1] >> 2) - 0x61C8864680B583E9) ^ a2[1])
        + (v3 << 6)
        + (v3 >> 2)
        - 0x61C8864680B583E9) ^ v3;
}

void re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = v6 + 24;
        do
        {
          if ((*(_DWORD *)(v14 - 16) & 0x80000000) != 0)
          {
            v15 = *(_QWORD *)(v14 - 24);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,DRResource_s *,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 48 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v18) = v15;
            v22 = *(_QWORD *)(a1 + 16) + 48 * v18;
            *(_QWORD *)(v22 + 16) = *(_QWORD *)(v14 - 8);
            uuid_copy((unsigned __int8 *)(v22 + 24), (const unsigned __int8 *)v14);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v18 + 40) = *(_QWORD *)(v14 + 16);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 48;
        }
        while (v11 < v10);
      }
      _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

void re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  const unsigned __int8 *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(const unsigned __int8 **)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        do
        {
          if ((*((_DWORD *)v6 + 2) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)v6;
            v15 = *(unsigned int *)(a1 + 24);
            v16 = *(_QWORD *)v6 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::setCapacity(a1, (2 * v12));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 40 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 40 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 40 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v17) = v14;
            uuid_copy((unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 40 * v17 + 12), v6 + 12);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v17 + 32) = *((_QWORD *)v6 + 4);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 40;
        }
        while (v11 < v10);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

uint64_t re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v32, v14, v13);
          v16 = *(_OWORD *)v32;
          *(_OWORD *)v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v32[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v32[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = 0;
            v23 = v18 + 40;
            do
            {
              if ((*(_DWORD *)(v23 - 32) & 0x80000000) != 0)
                re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::addAsMove(a1, *(_QWORD *)(v23 - 40) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v23 - 40), v23 - 24, v23);
              ++v22;
              v23 += 80;
            }
            while (v22 < v21);
          }
          re::HashTable<re::Pair<unsigned long long,re::DirectResourceId,true>,re::DynamicArray<unsigned long long>,re::Hash<re::Pair<unsigned long long,re::DirectResourceId,true>>,re::EqualTo<re::Pair<unsigned long long,re::DirectResourceId,true>>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v13)
          v26 = 2 * v12;
        else
          v26 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 80 * v10 + 8);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 80 * v10 + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10) = a3;
  v27 = *(_QWORD *)(a1 + 16) + 80 * v10;
  *(_QWORD *)(v27 + 16) = *(_QWORD *)a4;
  uuid_copy((unsigned __int8 *)(v27 + 24), (const unsigned __int8 *)(a4 + 8));
  v28 = *(_QWORD *)(a1 + 16) + 80 * v10;
  *(_QWORD *)(v28 + 72) = 0;
  *(_DWORD *)(v28 + 64) = 0;
  *(_QWORD *)(v28 + 48) = 0;
  *(_QWORD *)(v28 + 56) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 40) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v28 + 48) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v29 = *(_QWORD *)(v28 + 56);
  *(_QWORD *)(v28 + 56) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v29;
  v30 = *(_QWORD *)(v28 + 72);
  *(_QWORD *)(v28 + 72) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v30;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v28 + 64);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::AudioEngineRunnableManager::addReason(float *a1, int a2)
{
  unint64_t v2;
  NSObject *v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  void *__p[2];
  char v36;
  uint8_t buf[4];
  void **v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = (id)*re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, off_24ED3D150[a2]);
    v6 = v36 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v38 = v6;
    _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "[RE] [Sleep/Wake] Added reason %s to REAudioEngineRunnableManager reasons.", buf, 0xCu);
    if (v36 < 0)
      operator delete(__p[0]);
  }

  v7 = a2;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v8 <= a2)
        v2 = a2 % v8;
    }
    else
    {
      v2 = (v8 - 1) & a2;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v2)
            break;
        }
      }
    }
  }
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = a2;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  *((_DWORD *)v13 + 4) = a2;
  v15 = a1[8];
  if ((((float)(v15 * (float)v8) >= v14) & ~(v8 == 0)) == 0)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_35;
    if (*(_QWORD *)&prime < v8)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_35:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_60;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_60:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_64;
        }
        v34 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_64:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v32)
  {
    *v13 = *v32;
LABEL_77:
    *v32 = v13;
    goto LABEL_78;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v31[v2] = a1 + 4;
  if (*v13)
  {
    v33 = *(_QWORD *)(*v13 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8)
        v33 %= v8;
    }
    else
    {
      v33 &= v8 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_77;
  }
LABEL_78:
  ++*((_QWORD *)a1 + 3);
}

void sub_2253E43E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void re::AudioEngineRunnableManager::removeReason(_QWORD *a1, int a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  re *v14;
  NSObject *v15;
  void **v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = std::__hash_table<REAudioEngineRunnableReason,std::hash<REAudioEngineRunnableReason>,std::equal_to<REAudioEngineRunnableReason>,std::allocator<REAudioEngineRunnableReason>>::find<REAudioEngineRunnableReason>(a1, a2);
  if (!v4)
    return;
  v5 = (int8x8_t)a1[1];
  v6 = *v4;
  v7 = v4[1];
  v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    if (v7 >= *(_QWORD *)&v5)
      v7 %= *(_QWORD *)&v5;
  }
  else
  {
    v7 &= *(_QWORD *)&v5 - 1;
  }
  v9 = *(uint64_t **)(*a1 + 8 * v7);
  do
  {
    v10 = v9;
    v9 = (uint64_t *)*v9;
  }
  while (v9 != v4);
  if (v10 == a1 + 2)
    goto LABEL_19;
  v11 = v10[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
  }
  else
  {
    v11 &= *(_QWORD *)&v5 - 1;
  }
  if (v11 != v7)
  {
LABEL_19:
    if (v6)
    {
      v12 = *(_QWORD *)(v6 + 8);
      if (v8.u32[0] > 1uLL)
      {
        v13 = *(_QWORD *)(v6 + 8);
        if (v12 >= *(_QWORD *)&v5)
          v13 = v12 % *(_QWORD *)&v5;
      }
      else
      {
        v13 = v12 & (*(_QWORD *)&v5 - 1);
      }
      if (v13 == v7)
        goto LABEL_23;
    }
    *(_QWORD *)(*a1 + 8 * v7) = 0;
    v6 = *v4;
  }
  if (v6)
  {
    v12 = *(_QWORD *)(v6 + 8);
LABEL_23:
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v5)
        v12 %= *(_QWORD *)&v5;
    }
    else
    {
      v12 &= *(_QWORD *)&v5 - 1;
    }
    if (v12 != v7)
    {
      *(_QWORD *)(*a1 + 8 * v12) = v10;
      v6 = *v4;
    }
  }
  *v10 = v6;
  *v4 = 0;
  --a1[3];
  operator delete(v4);
  v15 = (id)*re::audioLogObjects(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, off_24ED3D150[a2]);
    if (v18 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v20 = v16;
    _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "[RE] [Sleep/Wake] Removed reason %s from REAudioEngineRunnableManager reasons.", buf, 0xCu);
    if (v18 < 0)
      operator delete(__p[0]);
  }

}

void sub_2253E4618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t *std::__hash_table<REAudioEngineRunnableReason,std::hash<REAudioEngineRunnableReason>,std::equal_to<REAudioEngineRunnableReason>,std::allocator<REAudioEngineRunnableReason>>::find<REAudioEngineRunnableReason>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t re::audio::getMediaserverdPID(re::audio *this)
{
  void *v1;
  uint64_t v2;
  _BYTE v4[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v4, 2555, 0);
  objc_msgSend(MEMORY[0x24BE0A620], "auxiliarySession");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "opaqueSessionID") >> 12;

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v4);
  return v2 | 0x100000000;
}

void sub_2253E4774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_2253E48E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253E4B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::~__hash_table(v4 - 128);
  _Unwind_Resume(a1);
}

void sub_2253E4DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_2253E4EFC(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_2253E5084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  os_unfair_lock_s *v9;
  void *v10;

  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

void sub_2253E5214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2253E55C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  os_unfair_lock_s *v10;
  void *v11;
  void *v12;
  void *v13;
  id *v14;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,void *>>>::operator()[abi:ne180100](1, v14);

  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_2253E58F8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2253E5B94(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::~__hash_table(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2253E5ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2253E6258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2253E6380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2253E6584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&a9);
  _Unwind_Resume(a1);
}

void sub_2253E6910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)va);

  _Unwind_Resume(a1);
}

void sub_2253E69F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_2253E6C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t re::audio::meshID<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24ED3D260[v1])(&v4, a1);
}

uint64_t re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  _QWORD v4[4];
  _QWORD *v5;

  v3 = -1;
  v4[0] = &v3;
  v4[1] = &v3;
  v4[2] = &v3;
  v4[3] = &v3;
  v1 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = v4;
  ((void (*)(_QWORD **, uint64_t))off_24ED3D310[v1])(&v5, a1);
  return v3;
}

uint64_t re::audio::entityID<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_24ED3D280[v1])(&v4, a1);
}

void sub_2253E6F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v12;

  re::DynamicArray<re::audio::PHASEOccluderData>::deinit(v12);
  _Unwind_Resume(a1);
}

void sub_2253E7120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2253E7280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;

  re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit(v14);
  _Unwind_Resume(a1);
}

void sub_2253E7514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;
  void *v10;

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a9);

  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

void sub_2253E7AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v3);
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_2253E8000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16)
{
  os_unfair_lock_s *v16;
  _QWORD *v17;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,REPHASESoundAsset>,void *>>>::operator()[abi:ne180100](1, v17);
  if (a13 && a14 && (a15 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
  os_unfair_lock_unlock(v16);
  _Unwind_Resume(a1);
}

void sub_2253E8E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2253E90C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_2253E9170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253E9464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  os_unfair_lock_s *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  if (a21 < 0)
    operator delete(__p);
  os_unfair_lock_unlock(v24);

  _Unwind_Resume(a1);
}

void sub_2253E96EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2253EA084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  id *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a30);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a32);

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a40);
  objc_destroyWeak(v40);
  objc_destroyWeak((id *)(v44 - 184));
  _Unwind_Resume(a1);
}

void sub_2253EA550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t a1)
{
  return std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](a1 + 48);
}

void sub_2253EAB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;

  if (a39 && a40 && (a41 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a40 + 40))();

  _Unwind_Resume(a1);
}

void sub_2253EAE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_2253EAE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2253EB6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

void sub_2253EBBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 105) < 0)
    operator delete(*(void **)(v28 - 128));

  _Unwind_Resume(a1);
}

void sub_2253EBEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t a1)
{
  return std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](a1 + 40);
}

void sub_2253EC708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void sub_2253EC9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  os_unfair_lock_unlock(v9);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2253ECA5C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2253ECBB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_2253ECF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;

  os_unfair_lock_unlock(v16);
  os_unfair_lock_unlock(v15);

  _Unwind_Resume(a1);
}

void sub_2253ED3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  id *v12;

  operator delete(v12);
  os_unfair_lock_unlock(v11);
  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_2253ED7F8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  operator delete(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2253ED9F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253EDEBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253EDFEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253EE0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

void sub_2253EE110(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2253EE344(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2253EE470(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2253EE4D8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2253EE664(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2253EE728(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext applyMeshEvents:]::$_0,-[REPHASEContext applyMeshEvents:]::$_1,-[REPHASEContext applyMeshEvents:]::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderUpdateData>> const&>(id ***a1, uint64_t a2)
{
  return objc_msgSend(***a1, "applyMeshRemovals:", a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext applyMeshEvents:]::$_0,-[REPHASEContext applyMeshEvents:]::$_1,-[REPHASEContext applyMeshEvents:]::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderUpdateData>> const&>(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(**(id **)(*(_QWORD *)a1 + 8), "applyOccluderAdditions:", a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext applyMeshEvents:]::$_0,-[REPHASEContext applyMeshEvents:]::$_1,-[REPHASEContext applyMeshEvents:]::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderData>,std::__variant_detail::_Trait<re::DynamicArray::PHASEOccluderUpdateData>> const&>(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(**(id **)(*(_QWORD *)a1 + 16), "applyOccluderUpdates:", a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext createPHASEShape:]::$_3,-[REPHASEContext createPHASEShape:]::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshData,std::__variant_detail::_Trait::AcousticARKitMeshData> const&>(void ****a1, uint64_t *a2)
{
  void ***v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  _BYTE v9[40];
  _BYTE v10[40];
  _BYTE v11[40];

  v3 = *a1;
  v4 = ***a1;
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray((uint64_t)v11, a2 + 4);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray((uint64_t)v10, a2 + 9);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray((uint64_t)v9, a2 + 14);
  objc_msgSend(v4, "createAcousticMaterialsArrayWithAbsorption:scattering:soundReduction:", v11, v10, v9);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v9);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v10);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v11);
  objc_msgSend(**v3, "createPhaseShapeWithMeshID:materials:mdlMesh:arkitMesh:meshType:", a2[2], v5, a2[3], 0, 255);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v3[1];
  v8 = *v7;
  *v7 = (void *)v6;

}

void sub_2253EEA30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253EEA4C(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v2 = va_arg(va1, _QWORD);
  v4 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)va);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)va1);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(v1 - 72);
  JUMPOUT(0x2253EEA38);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<-[REPHASEContext createPHASEShape:]::$_3,-[REPHASEContext createPHASEShape:]::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshData,std::__variant_detail::_Trait::AcousticARKitMeshData> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  PHASEEngine *v10;

  v3 = *a1;
  v4 = **(_QWORD **)(*a1 + 24);
  v5 = *(_QWORD *)(a2 + 16);
  objc_msgSend((id)v4, "engine");
  v10 = (PHASEEngine *)objc_claimAutoreleasedReturnValue();
  re::REPHASEMaterialCache::getMaterials((re::REPHASEMaterialCache *)(v4 + 264), v10, *(MDLMesh **)(a2 + 24));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v4, "createPhaseShapeWithMeshID:materials:mdlMesh:arkitMesh:meshType:", v5, v6, *(_QWORD *)(a2 + 24), 1, *(unsigned __int8 *)(a2 + 32));
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(void ***)(v3 + 16);
  v9 = *v8;
  *v8 = (void *)v7;

}

void sub_2253EEB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>((int)&v15, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 112 * *(_QWORD *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = *(_QWORD *)(a2 + 32);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 112 * v9;
      v13 = 112 * v4;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)(v11 + v12), (const re::DynamicString *)(v10 + v12));
        re::DynamicArray<float>::DynamicArray(v11 + v12 + 32, (uint64_t *)(v10 + v12 + 32));
        result = re::DynamicArray<float>::DynamicArray(v11 + v12 + 72, (uint64_t *)(v10 + v12 + 72));
        v10 += 112;
        v13 -= 112;
        v11 += 112;
      }
      while (v12 != v13);
    }
  }
  else
  {
    result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>((int)&v14, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + 112 * v4), *(re::DynamicString **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = (uint64_t *)(112 * v4 + *(_QWORD *)(a1 + 32) + 72);
      v8 = -112 * v4 + 112 * v6;
      do
      {
        re::DynamicArray<float>::~DynamicArray(v7);
        re::DynamicArray<float>::~DynamicArray(v7 - 5);
        result = *(v7 - 9);
        if (result)
        {
          if ((*(_BYTE *)(v7 - 8) & 1) != 0)
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(v7 - 7));
          *(_OWORD *)(v7 - 9) = 0u;
          *(_OWORD *)(v7 - 7) = 0u;
        }
        v7 += 14;
        v8 -= 112;
      }
      while (v8);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

_QWORD *re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            v7 = (uint64_t)result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            re::ObjectHelper::move<re::AcousticAbsorptionMaterial>(v5[4], v5[4] + 112 * v5[2], v7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::AcousticAbsorptionMaterial>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = v5 + v6;
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v5 + v6 + 24);
      v9 = *(_QWORD *)(v5 + v6 + 8);
      *(_QWORD *)v7 = *(_QWORD *)(v5 + v6);
      *(_QWORD *)v8 = 0;
      v10 = *(_QWORD *)(v5 + v6 + 16);
      *(_QWORD *)(v8 + 24) = 0;
      v12 = *(_QWORD *)(a3 + v6 + 8);
      v11 = *(_QWORD *)(a3 + v6 + 16);
      *(_QWORD *)(v7 + 8) = v9;
      *(_QWORD *)(v7 + 16) = v10;
      *(_QWORD *)(v8 + 8) = v12;
      *(_QWORD *)(v8 + 16) = v11;
      *(_QWORD *)(v7 + 64) = 0;
      *(_DWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v13 = *(_QWORD *)(v5 + v6 + 40);
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v5 + v6 + 32);
      *(_QWORD *)(v5 + v6 + 32) = 0;
      *(_QWORD *)(v7 + 40) = v13;
      *(_QWORD *)(v8 + 40) = 0;
      v14 = *(_QWORD *)(a3 + v6 + 48);
      *(_QWORD *)(v7 + 48) = *(_QWORD *)(v5 + v6 + 48);
      *(_QWORD *)(v8 + 48) = v14;
      v15 = *(_QWORD *)(a3 + v6 + 64);
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(v5 + v6 + 64);
      *(_QWORD *)(v8 + 64) = v15;
      *(_DWORD *)(v8 + 56) = *(_DWORD *)(v5 + v6 + 56) + 1;
      *(_DWORD *)(v7 + 56) = *(_DWORD *)(a3 + v6 + 56) + 1;
      *(_QWORD *)(v7 + 104) = 0;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 72) = 0;
      *(_DWORD *)(v7 + 96) = 0;
      v16 = (uint64_t *)(v5 + v6 + 72);
      v17 = *(_QWORD *)(v5 + v6 + 80);
      *(_QWORD *)(v7 + 72) = *v16;
      *v16 = 0;
      *(_QWORD *)(v7 + 80) = v17;
      *(_QWORD *)(v8 + 80) = 0;
      v18 = *(_QWORD *)(a3 + v6 + 88);
      *(_QWORD *)(v7 + 88) = *(_QWORD *)(v5 + v6 + 88);
      *(_QWORD *)(v8 + 88) = v18;
      v19 = *(_QWORD *)(a3 + v6 + 104);
      *(_QWORD *)(v7 + 104) = *(_QWORD *)(v5 + v6 + 104);
      *(_QWORD *)(v8 + 104) = v19;
      *(_DWORD *)(v8 + 96) = *(_DWORD *)(v5 + v6 + 96) + 1;
      *(_DWORD *)(v7 + 96) = *(_DWORD *)(a3 + v6 + 96) + 1;
      re::DynamicArray<float>::~DynamicArray(v16);
      re::DynamicArray<float>::~DynamicArray((uint64_t *)(v5 + v6 + 32));
      result = *(_QWORD *)(v5 + v6);
      if (result)
      {
        if ((*(_BYTE *)(v8 + 8) & 1) != 0)
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v8 + 16));
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
      }
      v6 += 112;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

uint64_t *re::DynamicArray<float>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
  {
    if (a1[4])
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *,re::AcousticAbsorptionMaterial *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  uint64_t *v5;

  v5 = (uint64_t *)a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, (re::DynamicString *)v5);
      re::DynamicArray<float>::operator=((uint64_t)this + 32, v5 + 4);
      re::DynamicArray<float>::operator=((uint64_t)this + 72, v5 + 9);
      v5 += 14;
      this = (re::DynamicString *)((char *)this + 112);
    }
    while (v5 != (uint64_t *)a3);
    return (uint64_t *)a3;
  }
  return v5;
}

uint64_t re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::AcousticAbsorptionMaterial>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AcousticAbsorptionMaterial>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = (uint64_t *)(v3 + 72);
        v6 = 112 * v4;
        do
        {
          re::DynamicArray<float>::~DynamicArray(v5);
          re::DynamicArray<float>::~DynamicArray(v5 - 5);
          v7 = *(v5 - 9);
          if (v7)
          {
            if ((*(_BYTE *)(v5 - 8) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(v5 - 7));
            *(_OWORD *)(v5 - 9) = 0u;
            *(_OWORD *)(v5 - 7) = 0u;
          }
          v5 += 14;
          v6 -= 112;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio6meshIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio6meshIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7mdlMeshINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 24);
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7mdlMeshINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 24);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio8entityIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio8entityIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7sceneIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7sceneIDINS_7variantIJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS8_5audio19lastUpdateTimestampINS_7variantIJNSB_16AcousticMeshDataENSB_21AcousticARKitMeshDataEEEEEEDaRKT_EUlRKSE_E_ZNSC_ISG_EESH_SK_EUlRKSF_E_ZNSC_ISG_EESH_SK_EUlRKNSB_22AcousticMeshUpdateDataEE_ZNSC_ISG_EESH_SK_EUlRKNSB_27AcousticARKitMeshUpdateDataEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEEEEEDcSI_DpT0_(uint64_t **a1, uint64_t a2)
{
  double result;
  uint64_t v3;

  result = *(double *)(a2 + 40);
  v3 = **a1;
  *(double *)v3 = result;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7sceneIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio7sceneIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio8entityIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio8entityIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio9oldMeshIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio9oldMeshIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio9newMeshIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN2re5audio9newMeshIDINS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlOSG_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS8_5audio19lastUpdateTimestampINS_7variantIJNSB_22AcousticMeshUpdateDataENSB_27AcousticARKitMeshUpdateDataEEEEEEDaRKT_EUlRKNSB_16AcousticMeshDataEE_ZNSC_ISG_EESH_SK_EUlRKNSB_21AcousticARKitMeshDataEE_ZNSC_ISG_EESH_SK_EUlRKSE_E_ZNSC_ISG_EESH_SK_EUlRKSF_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;

  result = *(double *)(a2 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  *(double *)v3 = result;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24ED3D300[v2])(&v4, a1);
  *(_DWORD *)(a1 + 152) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 112);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 72);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit(a2 + 32);

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re5audio16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{

}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__deallocate_node(*(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__deallocate_node(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (id *)*v1;

      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_BYTE ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticMeshData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticARKitMeshData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticMeshUpdateData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticARKitMeshUpdateData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&>(_BYTE ***result)
{
  ***result = -1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticMeshData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticARKitMeshData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticMeshUpdateData const&)#1},re::AcousticMeshType re::audio::meshType<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>(std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&)::{lambda(re::audio::AcousticARKitMeshUpdateData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData> const&>(uint64_t result, uint64_t a2)
{
  **(_BYTE **)(*(_QWORD *)result + 8) = *(_BYTE *)(a2 + 32);
  return result;
}

uint64_t re::DynamicArray<re::audio::PHASEOccluderData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 48 * v4;
        v6 = (void **)(v3 + 24);
        do
        {
          v7 = *v6;
          v6 += 6;

          v5 -= 48;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::audio::PHASEOccluderData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::audio::PHASEOccluderData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[3 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          v11[2] = *((_QWORD *)v8 + 2);
          *(_OWORD *)v11 = v12;
          v13 = *((_QWORD *)v8 + 3);
          *((_QWORD *)v8 + 3) = 0;
          v11[3] = v13;
          *((_OWORD *)v11 + 2) = v8[2];

          v8 += 3;
          v11 += 6;
        }
        while (v8 != v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 56 * v4;
        v6 = (void **)(v3 + 32);
        do
        {
          v7 = *v6;
          v6 += 7;

          v5 -= 56;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::audio::PHASEOccluderUpdateData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::audio::PHASEOccluderUpdateData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 56 * v9;
        v11 = v7;
        do
        {
          v12 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)v11 = *(_OWORD *)v8;
          *((_OWORD *)v11 + 1) = v12;
          v13 = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 32) = 0;
          v11[4] = v13;
          *(_OWORD *)(v11 + 5) = *(_OWORD *)(v8 + 40);

          v8 += 56;
          v11 += 7;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,REPHASESoundEvent * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,REPHASESoundEvent * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,REPHASESoundEvent * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,REPHASESoundEvent * {__strong}>>>::__deallocate_node(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (id *)*v1;

      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,REPHASESoundAsset>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,REPHASESoundAsset>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,REPHASESoundAsset>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,REPHASESoundAsset>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      if (*((_BYTE *)v2 + 56))
      {
        v3 = v2[8];
        if (v3)
        {
          if ((v2[9] & 1) != 0)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, v2[10]);
        }
      }
      operator delete(v2);
    }
    while (v1);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,REPHASESoundAsset>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  uint64_t v3;

  if (a1)
  {
    if (*((_BYTE *)__p + 56))
    {
      v3 = __p[8];
      if (v3)
      {
        if ((__p[9] & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, __p[10]);
      }
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2253F003C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

BOOL std::lock[abi:ne180100]<re::UnfairLock,re::UnfairLock>(os_unfair_lock_s *a1, os_unfair_lock_s *a2)
{
  _BOOL8 result;

  os_unfair_lock_lock(a1);
  for (result = os_unfair_lock_trylock(a2); !result; result = os_unfair_lock_trylock(a2))
  {
    os_unfair_lock_unlock(a1);
    sched_yield();
    os_unfair_lock_lock(a2);
    result = os_unfair_lock_trylock(a1);
    if (result)
      break;
    os_unfair_lock_unlock(a2);
    sched_yield();
    os_unfair_lock_lock(a1);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,RESoundEventPreparingData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,RESoundEventPreparingData>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  int8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = *v3;
    v6 = v3[1];
    v7 = (uint8x8_t)vcnt_s8(v4);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v4)
        v6 %= *(_QWORD *)&v4;
    }
    else
    {
      v6 &= *(_QWORD *)&v4 - 1;
    }
    v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8 != v3);
    if (v9 == a1 + 2)
      goto LABEL_20;
    v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v4)
        v10 %= *(_QWORD *)&v4;
    }
    else
    {
      v10 &= *(_QWORD *)&v4 - 1;
    }
    if (v10 != v6)
    {
LABEL_20:
      if (v5)
      {
        v11 = *(_QWORD *)(v5 + 8);
        if (v7.u32[0] > 1uLL)
        {
          v12 = *(_QWORD *)(v5 + 8);
          if (v11 >= *(_QWORD *)&v4)
            v12 = v11 % *(_QWORD *)&v4;
        }
        else
        {
          v12 = v11 & (*(_QWORD *)&v4 - 1);
        }
        if (v12 == v6)
          goto LABEL_24;
      }
      *(_QWORD *)(*a1 + 8 * v6) = 0;
      v5 = *v3;
    }
    if (!v5)
    {
LABEL_30:
      *v9 = v5;
      *v3 = 0;
      --a1[3];
      operator delete(v3);
      return;
    }
    v11 = *(_QWORD *)(v5 + 8);
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v4)
        v11 %= *(_QWORD *)&v4;
    }
    else
    {
      v11 &= *(_QWORD *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(_QWORD *)(*a1 + 8 * v11) = v9;
      v5 = *v3;
    }
    goto LABEL_30;
  }
}

void sub_2253F059C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2253F06D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253F07F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)REAudioStateHandler;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t *re::allocInfo_AcousticAbsorptionMaterial(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254104FF8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254104FF8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541050E0, 0);
    *(uint64_t *)((char *)&qword_2541050F0 + 6) = 0;
    qword_2541050F0 = 0;
    qword_254105100 = 0;
    qword_254105108 = 0xFFFFFFFFLL;
    qword_2541050E0 = (uint64_t)&off_24ED7DAA8;
    qword_254105110 = (uint64_t)"AcousticAbsorptionMaterial";
    dword_254105118 = 0;
    xmmword_254105120 = 0u;
    unk_254105130 = 0u;
    xmmword_254105140 = 0u;
    qword_254105150 = 0;
    __cxa_guard_release(&qword_254104FF8);
  }
  return &qword_2541050E0;
}

void re::initInfo_AcousticAbsorptionMaterial(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x5CD9F51973CC76B2;
  v19[1] = "AcousticAbsorptionMaterial";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254105000);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254105000);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "identifier";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254105038 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "frequencies";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254105040 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "absorptionCoefficients";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x4800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254105048 = v17;
      __cxa_guard_release(&qword_254105000);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254105038;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AcousticAbsorptionMaterial>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AcousticAbsorptionMaterial>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AcousticAbsorptionMaterial>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AcousticAbsorptionMaterial>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

void sub_2253F0B34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105000);
  _Unwind_Resume(a1);
}

double re::internal::defaultConstruct<re::AcousticAbsorptionMaterial>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  return result;
}

double re::internal::defaultDestruct<re::AcousticAbsorptionMaterial>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double result;

  re::DynamicArray<float>::~DynamicArray(a3 + 9);
  re::DynamicArray<float>::~DynamicArray(a3 + 4);
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::AcousticAbsorptionMaterial>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::AcousticAbsorptionMaterial>(uint64_t *a1)
{
  double result;

  re::DynamicArray<float>::~DynamicArray(a1 + 9);
  re::DynamicArray<float>::~DynamicArray(a1 + 4);
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::introspect_AcousticAbsorptionMaterial(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticAbsorptionMaterial", (uint64_t (*)(re::internal *))re::allocInfo_AcousticAbsorptionMaterial, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticAbsorptionMaterial, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AcousticAbsorptionMaterial>, this);
}

uint64_t *re::allocInfo_AcousticScatteringMaterial(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254105008);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254105008))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254105158, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254105168 = 0;
    qword_254105178 = 0;
    qword_254105180 = 0xFFFFFFFFLL;
    qword_254105158 = (uint64_t)&off_24ED7DAA8;
    qword_254105188 = (uint64_t)"AcousticScatteringMaterial";
    dword_254105190 = 0;
    xmmword_254105198 = 0u;
    unk_2541051A8 = 0u;
    xmmword_2541051B8 = 0u;
    qword_2541051C8 = 0;
    __cxa_guard_release(&qword_254105008);
  }
  return &qword_254105158;
}

void re::initInfo_AcousticScatteringMaterial(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x8A5EEC5268CFFFDCLL;
  v19[1] = "AcousticScatteringMaterial";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254105010);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254105010);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "identifier";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254105050 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "frequencies";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254105058 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "scatteringCoefficients";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x4800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254105060 = v17;
      __cxa_guard_release(&qword_254105010);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254105050;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AcousticScatteringMaterial>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AcousticScatteringMaterial>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AcousticScatteringMaterial>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AcousticScatteringMaterial>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

void sub_2253F0FF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105010);
  _Unwind_Resume(a1);
}

double re::internal::defaultConstruct<re::AcousticScatteringMaterial>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  return result;
}

double re::internal::defaultDestruct<re::AcousticScatteringMaterial>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double result;

  re::DynamicArray<float>::~DynamicArray(a3 + 9);
  re::DynamicArray<float>::~DynamicArray(a3 + 4);
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::AcousticScatteringMaterial>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::AcousticScatteringMaterial>(uint64_t *a1)
{
  double result;

  re::DynamicArray<float>::~DynamicArray(a1 + 9);
  re::DynamicArray<float>::~DynamicArray(a1 + 4);
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::introspect_AcousticScatteringMaterial(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticScatteringMaterial", (uint64_t (*)(re::internal *))re::allocInfo_AcousticScatteringMaterial, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticScatteringMaterial, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AcousticScatteringMaterial>, this);
}

uint64_t *re::allocInfo_AcousticSoundReductionMaterial(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254105018);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254105018))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541051D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541051E0 = 0;
    qword_2541051F0 = 0;
    qword_2541051F8 = 0xFFFFFFFFLL;
    qword_2541051D0 = (uint64_t)&off_24ED7DAA8;
    qword_254105200 = (uint64_t)"AcousticSoundReductionMaterial";
    dword_254105208 = 0;
    xmmword_254105210 = 0u;
    unk_254105220 = 0u;
    xmmword_254105230 = 0u;
    qword_254105240 = 0;
    __cxa_guard_release(&qword_254105018);
  }
  return &qword_2541051D0;
}

void re::initInfo_AcousticSoundReductionMaterial(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0xC6694DCC9D0B805CLL;
  v19[1] = "AcousticSoundReductionMaterial";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254105020);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254105020);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "identifier";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254105068 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "frequencies";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254105070 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "soundReductionIndices";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x4800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254105078 = v17;
      __cxa_guard_release(&qword_254105020);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254105068;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AcousticSoundReductionMaterial>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AcousticSoundReductionMaterial>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AcousticSoundReductionMaterial>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AcousticSoundReductionMaterial>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

void sub_2253F14B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105020);
  _Unwind_Resume(a1);
}

double re::internal::defaultConstruct<re::AcousticSoundReductionMaterial>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  return result;
}

double re::internal::defaultDestruct<re::AcousticSoundReductionMaterial>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double result;

  re::DynamicArray<float>::~DynamicArray(a3 + 9);
  re::DynamicArray<float>::~DynamicArray(a3 + 4);
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::AcousticSoundReductionMaterial>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::AcousticSoundReductionMaterial>(uint64_t *a1)
{
  double result;

  re::DynamicArray<float>::~DynamicArray(a1 + 9);
  re::DynamicArray<float>::~DynamicArray(a1 + 4);
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::introspect_AcousticSoundReductionMaterial(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AcousticSoundReductionMaterial", (uint64_t (*)(re::internal *))re::allocInfo_AcousticSoundReductionMaterial, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticSoundReductionMaterial, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AcousticSoundReductionMaterial>, this);
}

uint64_t *re::introspect_SpatialSceneClassificationType(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  __int128 v43;
  StringID v44;
  _QWORD v45[2];
  _QWORD v46[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_254105028);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_254105028);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "SpatialSceneClassUnknown";
      qword_254105080 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "SpatialSceneClassIndoor";
      qword_254105088 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = 2;
      *(_QWORD *)(v39 + 16) = "SpatialSceneClassOutdoor";
      qword_254105090 = v39;
      __cxa_guard_release(&qword_254105028);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254105030);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254105030))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254105098, "SpatialSceneClassificationType", 1, 1, 1, 1);
    qword_254105098 = (uint64_t)&off_24ED7D9E8;
    qword_2541050D8 = (uint64_t)&re::introspect_SpatialSceneClassificationType(BOOL)::enumTable;
    dword_2541050A8 = 9;
    __cxa_guard_release(&qword_254105030);
  }
  if (v2)
  {
    if ((_MergedGlobals_114 & 1) != 0)
      return &qword_254105098;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    v5 = _MergedGlobals_114;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    if ((v5 & 1) != 0)
      return &qword_254105098;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((_MergedGlobals_114 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_254105098;
    }
  }
  _MergedGlobals_114 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254105098, a2);
  v41 = 0x8E339AC29DD900D0;
  v42 = "SpatialSceneClassificationType";
  v46[0] = 0x31CD534126;
  v46[1] = "uint8_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v46);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v46);
    v11 = (unsigned int *)qword_2541050D8;
    v45[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v46, &v41, 1, 1, (uint64_t)v45);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v44.var0 = 2 * v17;
          v44.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v46, v21, &v44);
          re::StringID::destroyString((re::StringID *)&v44);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v44.var0 = 2 * v25;
            v44.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v46, v29, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v46, v30);
    xmmword_2541050B8 = v43;
    re::StringID::destroyString((re::StringID *)&v41);
    if ((v2 & 1) != 0)
      return &qword_254105098;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v46);
  re::internal::assertLog((re::internal *)5, v40, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SpatialSceneClassificationType", v41, v42);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_2253F1A58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105028);
  _Unwind_Resume(a1);
}

BOOL re::GainController::isFadeInProcess(re::GainController *this)
{
  uint64_t v1;
  uint64_t v2;
  double v4;

  v2 = *(_QWORD *)this;
  v1 = *((_QWORD *)this + 1);
  if (*(_DWORD *)v1 == *(_DWORD *)(*(_QWORD *)this + 16))
    return *(double *)(v1 + 16) > 0.0;
  v4 = *(double *)(v2 + 8);
  if (v4 > 0.0)
    return 1;
  if (v4 != 0.0 && *(float *)v2 == *(float *)(v2 + 4))
    return *(double *)(v1 + 16) > 0.0;
  return 0;
}

float re::GainController::updateGainStatus(re::GainController *this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  float v5;
  double v6;
  float v7;
  float v8;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_DWORD *)v2 == *(_DWORD *)(*(_QWORD *)this + 16))
  {
    v4 = *(double *)(v2 + 16);
    v5 = fmin(a2, v4);
    *(float *)(v2 + 8) = *(float *)(v2 + 8) + (float)(v5 * *(float *)(v2 + 12));
    v6 = v4 - v5;
    *(double *)(v2 + 16) = v6;
    if (v6 <= 0.0)
    {
      *(_DWORD *)(v2 + 12) = 0;
      LODWORD(v6) = *(_DWORD *)(v3 + 4);
      *(_DWORD *)(v2 + 8) = LODWORD(v6);
    }
  }
  else
  {
    v6 = *(double *)(v3 + 8);
    v7 = *(float *)v3;
    if (v6 == 0.0 || v7 != *(float *)(v3 + 4))
    {
      *(float *)(v2 + 8) = v7;
      *(_DWORD *)(v2 + 12) = 0;
    }
    if (v6 > 0.0)
    {
      v8 = (float)(*(float *)(v3 + 4) - *(float *)(v2 + 8)) / v6;
      *(float *)(v2 + 12) = v8;
      *(double *)(v2 + 16) = v6;
    }
  }
  return *(float *)&v6;
}

id ___ZN2re24AudioManager_PHASE_Async22getREAudioStateHandlerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  re *v2;
  NSObject *v3;
  void *v5;
  uint64_t v6;
  pthread_rwlock_t *v7;
  id v8;
  _QWORD v9[2];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (re *)objc_msgSend(*(id *)(a1 + 32), "isCancelled");
  if ((_DWORD)v2)
  {
    v3 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v9[0]) = 0;
      _os_log_debug_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEBUG, "Aborting callback since the engine was shut down.", (uint8_t *)v9, 2u);
    }
    return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(pthread_rwlock_t **)(v1 + 232);
    v6 = v1 + 232;
    v9[0] = v6 + 16;
    v9[1] = v6;
    pthread_rwlock_rdlock(v7);
    objc_msgSend(*(id *)(v6 + 16), "fillOutDebugInformation:", v5, v6 + 16, v6);
    v8 = v5;
    pthread_rwlock_unlock(*(pthread_rwlock_t **)v6);

    return v8;
  }
}

void sub_2253F1C50(_Unwind_Exception *a1)
{
  void *v1;
  pthread_rwlock_t ***v2;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

re *re::AudioManager_PHASE_Async::createPhaseContext(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  float v7;
  re *v8;
  re *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  re *v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  REPHASEContext *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  re *v22;
  re *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[4];
  re *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("com.apple.re.audioMaxGain"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "floatValue");
    *(double *)&sMaxGainDecibels = v7;
  }
  objc_msgSend(v4, "objectForKey:", CFSTR("com.apple.re.audio.normalizationMode"));
  v8 = (re *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    v10 = *re::audioLogObjects(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v32 = v9;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Setting sDefaultNormalizationMode from user defaults = %@", buf, 0xCu);
    }
    -[re integerValue](v9, "integerValue");
  }
  objc_msgSend(v4, "objectForKey:", CFSTR("com.apple.re.audio.phaseStopOnIdle"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    v13 = (re *)objc_msgSend(v11, "BOOLValue");
    *(_BYTE *)(a1 + 340) = (_BYTE)v13;
    v14 = *re::audioLogObjects(v13);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    if (*(_BYTE *)(a1 + 340))
      v15 = "true";
    else
      v15 = "false";
    *(_DWORD *)buf = 136315138;
    v32 = (re *)v15;
    v16 = "Setting phaseStopOnIdle from user defaults = %s";
  }
  else
  {
    v14 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    if (*(_BYTE *)(a1 + 340))
      v17 = "true";
    else
      v17 = "false";
    *(_DWORD *)buf = 136315138;
    v32 = (re *)v17;
    v16 = "Using default phaseStopOnIdle from user defaults = %s";
  }
  _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
LABEL_19:
  v18 = [REPHASEContext alloc];
  v19 = *(std::__shared_weak_count **)(a1 + 576);
  v29 = *(_QWORD *)(a1 + 568);
  v30 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = -[REPHASEContext initWithSampleRate:phaseQueue:audioEngineRunnableManager:](v18, "initWithSampleRate:phaseQueue:audioEngineRunnableManager:", v3, &v29, 48000.0);
  v23 = v22;
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *re::audioLogObjects(v22);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v32 = v23;
    v33 = 2048;
    v34 = sMaxGainDecibels;
    _os_log_impl(&dword_224FE9000, v27, OS_LOG_TYPE_DEFAULT, "REPHASEContext %@ created, maximumGainDbSpl = %f", buf, 0x16u);
  }

  return v23;
}

void sub_2253F1F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::AudioManager_PHASE_Async(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  pthread_rwlock_t **v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  REAudioStateHandler *v19;
  id v20;
  uint64_t v21;
  void *v22;
  re *v23;
  NSObject *v24;
  void *v26;
  uint8_t buf[8];
  uint64_t v28;
  id (*v29)(uint64_t);
  void *v30;
  id v31;
  uint64_t v32;

  v7 = a2;
  v8 = a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 766030772;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = a1 + 32;
  *(_QWORD *)(a1 + 240) = a1 + 32;
  v9 = (pthread_rwlock_t **)(a1 + 240);
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 32), 0);
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_DWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 340) = 1;
  *(_DWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  v10 = MEMORY[0x24BDAC9B8];
  v11 = MEMORY[0x24BDAC9B8];
  *(_QWORD *)(a1 + 416) = v10;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  v12 = v8;
  *(_QWORD *)(a1 + 552) = v12;
  v26 = v7;
  re::audio::SoundAssetRegistrarFactory::createRegistrar((_QWORD *)(a1 + 560));
  *(_QWORD *)(a1 + 568) = *a4;
  v13 = a4[1];
  *(_QWORD *)(a1 + 576) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  pthread_rwlock_wrlock(*v9);
  re::AudioManager_PHASE_Async::createPhaseContext(a1, v7);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v16;

  v18 = *(id *)(a1 + 552);
  v19 = [REAudioStateHandler alloc];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  v28 = 3221225472;
  v29 = ___ZN2re24AudioManager_PHASE_Async22getREAudioStateHandlerEv_block_invoke;
  v30 = &unk_24ED3D350;
  v32 = a1;
  v20 = v18;
  v31 = v20;
  v21 = -[REAudioStateHandler initWithTitle:block:](v19, "initWithTitle:block:", CFSTR("RealityKitAudioPositions"), buf, a1 + 264);

  v22 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v21;

  v23 = (re *)REAudioEngineShutdownTimerLength();
  atomic_store((unint64_t)v23, (unint64_t *)(a1 + 400));
  v24 = *re::audioLogObjects(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] AudioManager_PHASE created", buf, 2u);
  }
  pthread_rwlock_unlock(*v9);

  return a1;
}

void sub_2253F228C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, pthread_rwlock_t **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  uint64_t v17;
  id *v18;
  void *v19;
  re::ReadWriteLock *v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  uint64_t v25;

  std::lock_guard<re::ReadWriteLock::Writer>::~lock_guard[abi:ne180100](&a12);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v18 + 71));
  v25 = *v22;
  *v22 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);

  re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::deinit((uint64_t *)(v17 + 248));
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table(v21);

  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table(v17 + 104);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(a9);

  re::ReadWriteLock::~ReadWriteLock(v20);
  re::PhaseEnginePrimer::~PhaseEnginePrimer(v18);

  _Unwind_Resume(a1);
}

void re::PhaseEnginePrimer::~PhaseEnginePrimer(id *this)
{

}

void re::AudioManager_PHASE_Async::~AudioManager_PHASE_Async(re::AudioManager_PHASE_Async *this)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  re *v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t v10[16];

  pthread_rwlock_wrlock(*((pthread_rwlock_t **)this + 30));
  v2 = *((id *)this + 31);
  objc_msgSend(v2, "maybeEngine");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stop");

  v4 = *((id *)this + 31);
  objc_msgSend(v4, "stopAllAndReset");

  v5 = (void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;

  objc_msgSend(*((id *)this + 39), "invalidate");
  v6 = (void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;

  v8 = *re::audioLogObjects(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] AudioManager_PHASE destroyed", v10, 2u);
  }
  pthread_rwlock_unlock(*((pthread_rwlock_t **)this + 30));
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)this + 568);
  v9 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::deinit((uint64_t *)this + 62);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table((uint64_t)this + 440);

  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table((uint64_t)this + 352);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 264);

  re::ReadWriteLock::~ReadWriteLock((re::AudioManager_PHASE_Async *)((char *)this + 32));
}

id re::AudioManager_PHASE_Async::getPlaybackStateChangeHandlerForToken(os_unfair_lock_s *this, unint64_t a2)
{
  os_unfair_lock_s *v3;
  _QWORD *v4;
  void *v5;
  unint64_t v7;

  v7 = a2;
  v3 = this + 86;
  os_unfair_lock_lock(this + 86);
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[88]._os_unfair_lock_opaque, &v7);
  if (v4)
    v5 = _Block_copy((const void *)v4[3]);
  else
    v5 = 0;
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_2253F2594(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::setPlaybackStateChangeHandlerForToken(uint64_t a1, unint64_t a2, void *a3)
{
  id v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  unint64_t *v9;

  v8 = a2;
  v4 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 344));
  if (v4)
  {
    v5 = _Block_copy(v4);
    v9 = &v8;
    v6 = std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)(a1 + 352), &v8, (uint64_t)&std::piecewise_construct, &v9);
    v7 = (void *)v6[3];
    v6[3] = v5;

  }
  else
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::__erase_unique<unsigned long long>((_QWORD *)(a1 + 352), &v8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 344));

}

void sub_2253F2648(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::playbackStateDidChangeForToken(os_unfair_lock_s *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void (**v6)(id, uint64_t, uint64_t);

  re::AudioManager_PHASE_Async::getPlaybackStateChangeHandlerForToken(a1, a2);
  v6 = (void (**)(id, uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
  if (v6)
    v6[2](v6, a3, a4);

}

void sub_2253F26B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::playbackHostConnectionIdentifier(re::AudioManager_PHASE_Async *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = (os_unfair_lock_s *)((char *)this + 336);
  os_unfair_lock_lock((os_unfair_lock_t)this + 84);
  v3 = objc_msgSend(*((id *)this + 40), "connectionIdentifier");
  os_unfair_lock_unlock(v2);
  return v3;
}

void sub_2253F2704(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::joinPlaybackHostingServiceAtEndpoint(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  re *v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  REAudioPlaybackClientService *v10;
  void *v11;
  unint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint8_t buf[16];

  v3 = a2;
  v4 = *(id *)(a1 + 416);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
  if (*(_QWORD *)(a1 + 320))
  {
    v6 = *re::audioLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Audio service closing existing connection to playback hosting service", buf, 2u);
    }
    v7 = *(void **)(a1 + 320);
    *(_QWORD *)(a1 + 320) = 0;

    v8 = *(id *)(a1 + 552);
    v9 = v8;
    if (v4)
    {
      v13[0] = MEMORY[0x24BDAC760];
      v13[1] = 3221225472;
      v13[2] = ___ZN2re24AudioManager_PHASE_Async36joinPlaybackHostingServiceAtEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke;
      v13[3] = &unk_24ED3D378;
      v15 = a1;
      v14 = v8;
      dispatch_async(v4, v13);

    }
  }
  if (v3)
  {
    v10 = -[REAudioPlaybackClientService initWithXPCEndpoint:queue:service:]([REAudioPlaybackClientService alloc], "initWithXPCEndpoint:queue:service:", v3, *(_QWORD *)(a1 + 416), *(_QWORD *)(a1 + 552));
    v11 = *(void **)(a1 + 320);
    *(_QWORD *)(a1 + 320) = v10;

    if (*(_QWORD *)(a1 + 320))
      v12 = 1;
    else
      v12 = REAudioEngineShutdownTimerLength();
    atomic_store(v12, (unint64_t *)(a1 + 400));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 336));

}

void sub_2253F2878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  os_unfair_lock_s *v3;

  os_unfair_lock_unlock(v3);

  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async36joinPlaybackHostingServiceAtEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v1;
  re *v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(os_unfair_lock_s **)(a1 + 40);
  v2 = (re *)objc_msgSend(*(id *)(a1 + 32), "isCancelled");
  if ((_DWORD)v2)
  {
    v3 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Engine cancelled, not calling completion", v4, 2u);
    }
  }
  else
  {
    re::AudioManager_PHASE_Async::triggerPlaybackConnectionDisconnectCallbacks(v1);
  }
}

uint64_t re::AudioManager_PHASE_Async::triggerPlaybackConnectionDisconnectCallbacks(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  _QWORD *i;
  __int128 v6;
  __int128 v7;
  int os_unfair_lock_opaque;

  v6 = 0u;
  v7 = 0u;
  os_unfair_lock_opaque = 1065353216;
  v2 = this + 108;
  os_unfair_lock_lock(this + 108);
  if (&v6 != (__int128 *)&this[110])
  {
    os_unfair_lock_opaque = this[118]._os_unfair_lock_opaque;
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,void *> *>>(&v6, *(_QWORD **)&this[114]._os_unfair_lock_opaque, 0);
  }
  os_unfair_lock_unlock(v2);
  for (i = (_QWORD *)v7; i; i = (_QWORD *)*i)
    (*(void (**)(_QWORD, uint64_t))(i[3] + 16))(i[3], v3);
  return std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table((uint64_t)&v6);
}

void sub_2253F29AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  os_unfair_lock_unlock(v9);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::copyOrCreateEndpointForPlaybackHostingService(re::AudioManager_PHASE_Async *this)
{
  os_unfair_lock_s *v2;
  void *v3;
  REAudioPlaybackHostingService *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v2 = (os_unfair_lock_s *)((char *)this + 336);
  os_unfair_lock_lock((os_unfair_lock_t)this + 84);
  v3 = (void *)*((_QWORD *)this + 41);
  if (!v3)
  {
    v4 = objc_alloc_init(REAudioPlaybackHostingService);
    v5 = (void *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 41) = v4;

    v6 = MEMORY[0x24BDAC760];
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = ___ZN2re24AudioManager_PHASE_Async43setupCallbackForAudioPlaybackHostingServiceEv_block_invoke;
    v10[3] = &__block_descriptor_40_e11_v20__0Q8B16l;
    v10[4] = this;
    objc_msgSend(*((id *)this + 41), "setDidConnectBlock:", v10);
    v9[0] = v6;
    v9[1] = 3221225472;
    v9[2] = ___ZN2re24AudioManager_PHASE_Async43setupCallbackForAudioPlaybackHostingServiceEv_block_invoke_23;
    v9[3] = &__block_descriptor_40_e8_v16__0Q8l;
    v9[4] = this;
    objc_msgSend(*((id *)this + 41), "setDidDisconnectBlock:", v9);
    v3 = (void *)*((_QWORD *)this + 41);
  }
  objc_msgSend(v3, "endpoint");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock(v2);
  return v7;
}

void sub_2253F2AB4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async43setupCallbackForAudioPlaybackHostingServiceEv_block_invoke(uint64_t a1, unint64_t a2, int a3)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  re *v5;
  NSObject *v6;
  unint64_t v7;
  uint8_t buf[4];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  if (a3)
  {
    v3 = *(os_unfair_lock_s **)(a1 + 32);
    v4 = v3 + 76;
    os_unfair_lock_lock(v3 + 76);
    v5 = (re *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)&v3[66], &v7, &v7);
    v6 = *re::audioLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v9 = v7;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Connection Identifier %llu added to sensitivePlaybackHostConnectionIdentifiers set.", buf, 0xCu);
    }
    os_unfair_lock_unlock(v4);
  }
}

void sub_2253F2B94(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async43setupCallbackForAudioPlaybackHostingServiceEv_block_invoke_23(uint64_t a1, unint64_t a2)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  NSObject *v6;
  unint64_t v7;
  uint8_t buf[4];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v2 = *(os_unfair_lock_s **)(a1 + 32);
  v3 = v2 + 76;
  os_unfair_lock_lock(v2 + 76);
  v4 = v2 + 66;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(v4, &v7))
  {
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__erase_unique<unsigned long long>(v4, &v7);
    v6 = *re::audioLogObjects((re *)v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v9 = v7;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Connection Identifier %llu removed from sensitivePlaybackHostConnectionIdentifiers set.", buf, 0xCu);
    }
  }
  os_unfair_lock_unlock(v3);
}

void sub_2253F2C80(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::notifyPlaybackClientsWithPreparedSoundsThatMediaServicesWereLost(uint64_t this)
{
  uint64_t v1;
  pthread_rwlock_t *v2;
  uint64_t v3;
  id v4;
  void *v5;
  _QWORD *i;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;

  if (*(_QWORD *)(this + 328))
  {
    v1 = this;
    v12 = 0u;
    v13 = 0u;
    v14 = 1065353216;
    v3 = this + 232;
    v2 = *(pthread_rwlock_t **)(this + 232);
    v10 = v3 + 16;
    v11 = v3;
    pthread_rwlock_rdlock(v2);
    v4 = *(id *)(v3 + 16);
    v5 = v4;
    if (v4)
    {
      objc_msgSend(v4, "playbackClientsWithPreparedOrPreparingSounds");
    }
    else
    {
      v9 = 0;
      v7 = 0u;
      v8 = 0u;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)&v12, (uint64_t *)&v7);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v7);

    pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
    for (i = (_QWORD *)v13; i; i = (_QWORD *)*i)
      objc_msgSend(*(id *)(v1 + 328), "connectionIdentifierLostMediaServices:", i[2], v7, v8, v9);
    return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v12);
  }
  return this;
}

void sub_2253F2D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  pthread_rwlock_t ***v10;
  va_list va;

  va_start(va, a9);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v10);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::notifyPlaybackClientsWithPreparedSoundsThatMediaServicesWereReset(uint64_t this)
{
  uint64_t v1;
  pthread_rwlock_t *v2;
  uint64_t v3;
  id v4;
  void *v5;
  _QWORD *i;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;

  if (*(_QWORD *)(this + 328))
  {
    v1 = this;
    v12 = 0u;
    v13 = 0u;
    v14 = 1065353216;
    v3 = this + 232;
    v2 = *(pthread_rwlock_t **)(this + 232);
    v10 = v3 + 16;
    v11 = v3;
    pthread_rwlock_rdlock(v2);
    v4 = *(id *)(v3 + 16);
    v5 = v4;
    if (v4)
    {
      objc_msgSend(v4, "playbackClientsWithPreparedOrPreparingSounds");
    }
    else
    {
      v9 = 0;
      v7 = 0u;
      v8 = 0u;
    }
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)&v12, (uint64_t *)&v7);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v7);

    pthread_rwlock_unlock(*(pthread_rwlock_t **)v3);
    for (i = (_QWORD *)v13; i; i = (_QWORD *)*i)
      objc_msgSend(*(id *)(v1 + 328), "connectionIdentifierResetMediaServices:", i[2], v7, v8, v9);
    return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v12);
  }
  return this;
}

void sub_2253F2E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  pthread_rwlock_t ***v10;
  va_list va;

  va_start(va, a9);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v10);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL re::AudioManager_PHASE_Async::isPlaybackHostConnectionIdentifierSensitive(os_unfair_lock_s *this, unint64_t a2)
{
  os_unfair_lock_s *v3;
  _BOOL8 v4;
  unint64_t v6;

  v6 = a2;
  v3 = this + 76;
  os_unfair_lock_lock(this + 76);
  v4 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(&this[66]._os_unfair_lock_opaque, &v6) != 0;
  os_unfair_lock_unlock(v3);
  return v4;
}

id re::AudioManager_PHASE_Async::swapPhaseContext(re::AudioManager_PHASE_Async *this, REPHASEContext *a2)
{
  REPHASEContext *v4;
  void *v5;
  id v6;

  v4 = a2;
  pthread_rwlock_wrlock(*((pthread_rwlock_t **)this + 30));
  v5 = (void *)*((_QWORD *)this + 31);
  this = (re::AudioManager_PHASE_Async *)((char *)this + 248);
  v6 = v5;
  objc_storeStrong((id *)this, a2);
  atomic_store(0, (unint64_t *)this + 22);
  pthread_rwlock_unlock(*((pthread_rwlock_t **)this - 1));

  return v6;
}

void sub_2253F2F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::getAudioEnginePHASE(pthread_rwlock_t **this)
{
  id *v1;
  void *v2;
  char *v4;
  char *v5;

  v1 = (id *)(this + 29);
  v4 = (char *)(this + 31);
  v5 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  objc_msgSend(v1[2], "maybeEngine", v4, v5);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  return v2;
}

void sub_2253F2FC8(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::getPHASEOccluderForSceneAndEntity(re::AudioManager_PHASE_Async *this, uint64_t a2, unint64_t a3)
{
  pthread_rwlock_t *v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  re::audio::REPHASEAudioScene *v19;
  std::__shared_weak_count *v20;
  char *v21;
  pthread_rwlock_t **v22;

  v6 = (char *)this + 232;
  v5 = (pthread_rwlock_t *)*((_QWORD *)this + 29);
  v21 = v6 + 16;
  v22 = (pthread_rwlock_t **)v6;
  pthread_rwlock_rdlock(v5);
  v7 = *((id *)v6 + 2);
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "sceneForID:", a2);
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }

  if (v19)
  {
    re::audio::REPHASEAudioScene::getEntity((os_unfair_lock_s *)v19, a3, &v17);
    if (v17)
      v9 = *(id *)(v17 + 24);
    else
      v9 = 0;
    v10 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  pthread_rwlock_unlock(*v22);
  return v9;
}

void sub_2253F3104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va1);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::createSamplerDefinitionForToken(pthread_rwlock_t **this, uint64_t a2)
{
  id *v3;
  void *v4;
  char *v6;
  char *v7;

  v3 = (id *)(this + 29);
  v6 = (char *)(this + 31);
  v7 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  objc_msgSend(v3[2], "createSamplerDefinitionForToken:", a2, v6, v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  pthread_rwlock_unlock((pthread_rwlock_t *)*v3);
  return v4;
}

void sub_2253F31A0(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::afterFrameUpdate(uint64_t a1, int a2, uint64_t a3)
{
  id *v6;
  re::AudioManagerTelemetryReporter *v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  PHASEEngine *v13;
  uint64_t Instance;
  id v15;
  int v16;
  uint64_t v17;
  re::AudioManagerTelemetryReporter *v18;
  uint64_t v19;
  id v20;
  int v21;
  pthread_rwlock_t **v23;
  uint64_t block;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  void *v27;
  uint64_t v28;
  int v29;

  re::audio::getPhase3AcousticMeshEventSignpostData(a3, (uint64_t)&block);
  re::audio::emitPhase3AcousticMeshEventSignposts((uint64_t)&block);
  v6 = (id *)(a1 + 248);
  v23 = (pthread_rwlock_t **)(a1 + 232);
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  objc_msgSend(*(id *)(a1 + 248), "applyMeshEvents:", a3);
  objc_msgSend(*(id *)(a1 + 248), "update");
  v7 = (re::AudioManagerTelemetryReporter *)objc_msgSend(*(id *)(a1 + 248), "engineShouldBeRunning");
  v8 = v7 ^ 1;
  if (a2 >= 1)
    v8 = 0;
  if ((v8 & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 392);
    if (v10 < 2)
    {
      if (v10 == 1)
      {
        v11 = *v6;
        objc_msgSend(v11, "engine");

        *(_QWORD *)(a1 + 392) = 0;
        v12 = *(id *)(a1 + 248);
        objc_msgSend(v12, "maybeEngine");
        v13 = (PHASEEngine *)objc_claimAutoreleasedReturnValue();
        re::AudioManager_PHASE_Async::idlePhaseEngine((re::AudioManager_PHASE_Async *)a1, v13);

      }
    }
    else
    {
      *(_QWORD *)(a1 + 392) = v10 - 1;
    }
  }
  else
  {
    v9 = atomic_load((unint64_t *)(a1 + 400));
    *(_QWORD *)(a1 + 392) = v9;
    v6 = (id *)(a1 + 248);
  }
  Instance = re::AudioManagerTelemetryReporter::getInstance(v7);
  v15 = *v6;
  v16 = objc_msgSend(v15, "getPlayingSoundEventsCount");
  v17 = MEMORY[0x24BDAC760];
  block = MEMORY[0x24BDAC760];
  v25 = 3221225472;
  v26 = ___ZN2re29AudioManagerTelemetryReporter25updateConcurrentPlayCountEj_block_invoke;
  v27 = &__block_descriptor_44_e5_v8__0l;
  v28 = Instance;
  v29 = v16;
  dispatch_async((dispatch_queue_t)re::AudioManagerTelemetryReporter::m_managerQueue, &block);

  v19 = re::AudioManagerTelemetryReporter::getInstance(v18);
  v20 = *v6;
  v21 = objc_msgSend(v20, "getPreparingSoundEventsCount");
  block = v17;
  v25 = 3221225472;
  v26 = ___ZN2re29AudioManagerTelemetryReporter28updateConcurrentPrepareCountEj_block_invoke;
  v27 = &__block_descriptor_44_e5_v8__0l;
  v28 = v19;
  v29 = v21;
  dispatch_async((dispatch_queue_t)re::AudioManagerTelemetryReporter::m_managerQueue, &block);

  return pthread_rwlock_unlock(*v23);
}

void sub_2253F3384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(uint64_t a1, _QWORD *a2)
{
  re *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  re *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  id v31;
  _BYTE *v32;
  _BYTE buf[24];
  __int128 *v34;
  id *v35;
  __int128 **v36;
  __int128 *v37;
  id *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  v31 = *(id *)(a1 + 248);
  v23 = a1;
  v4 = (re *)pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
  v30 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v5 = a2[2];
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v7 = a2[5] + 48 * ((unint64_t)(i + a2[3]) % a2[1]);
      *(_QWORD *)buf = &v26;
      *(_QWORD *)&buf[8] = &v27;
      *(_QWORD *)&buf[16] = &v25;
      v34 = &v27;
      v35 = &v31;
      v36 = &v24;
      v37 = &v27;
      v38 = &v31;
      v8 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v8 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v32 = buf;
      v4 = (re *)((uint64_t (*)(_BYTE **))off_24ED3D4B0[v8])(&v32);
    }
  }
  v9 = re::audioLogObjects(v4);
  v10 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v9);
  if ((_DWORD)v10)
  {
    v22 = *re::audioLogObjects(v10);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v26;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      v34 = v24;
      _os_log_debug_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEBUG, "AudioManager_PHASE_Async::afterFrameSlowMeshEvents() processed %lu removals, %lu additions, and %lu updates", buf, 0x20u);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 488));
  v13 = *(_QWORD *)(a1 + 504);
  v12 = *(_QWORD *)(a1 + 512);
  v14 = v12 + 1;
  if (v12 + 1 >= v13)
  {
    if (v13 < v14)
    {
      v15 = (uint64_t *)(a1 + 512);
      if (*(_QWORD *)(v23 + 496))
      {
        v16 = 2 * v13;
        if (!v13)
          v16 = 8;
        if (v16 <= v14)
          v17 = v14;
        else
          v17 = v16;
        re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::setCapacity((_QWORD *)(v23 + 496), v17);
        v12 = *v15;
      }
      else
      {
        re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::setCapacity((_QWORD *)(v23 + 496), v14);
        v12 = 0;
        *v15 = 0;
        *(_QWORD *)(v23 + 520) = 0;
        *(_DWORD *)(v23 + 528) = 0;
      }
    }
    v13 = *(_QWORD *)(v23 + 504);
  }
  v18 = *(_QWORD *)(v23 + 536) + 48 * ((*(_QWORD *)(v23 + 520) + v12) % v13);
  *(_QWORD *)(v18 + 40) = 0;
  *(_DWORD *)(v18 + 32) = 0;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)v18 = v27;
  *(_QWORD *)&v27 = 0;
  *(_QWORD *)(v18 + 8) = *((_QWORD *)&v27 + 1);
  *((_QWORD *)&v27 + 1) = 0;
  v19 = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v18 + 16) = v28;
  *(_QWORD *)&v28 = v19;
  v20 = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(v18 + 40) = v30;
  v30 = v20;
  v21 = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v18 + 24) = *((_QWORD *)&v28 + 1);
  *((_QWORD *)&v28 + 1) = v21;
  ++*(_QWORD *)(v23 + 512);
  ++*(_DWORD *)(v23 + 528);
  os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 488));
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit((uint64_t *)&v27);

}

void sub_2253F36AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  os_unfair_lock_s *v19;

  os_unfair_lock_unlock(v19);
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit(&a13);

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::fadeSourceToGain(pthread_rwlock_t **this, uint64_t a2, float a3, double a4)
{
  id *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  re *v13;
  NSObject *v14;
  double v15;
  NSObject *v16;
  char *v18;
  id *v19;
  _BYTE buf[22];
  __int16 v21;
  double v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = (id *)(this + 29);
  v18 = (char *)(this + 31);
  v19 = (id *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  objc_msgSend(v7[2], "eventFor:", a2, v18);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "prepareState");
    v10 = *(std::__shared_weak_count **)&buf[8];
    *(float *)(*(_QWORD *)buf + 200) = a3;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    objc_msgSend(v9, "paramForKey:", CFSTR("gain"));
    v13 = (re *)objc_claimAutoreleasedReturnValue();
    v14 = *re::audioLogObjects(v13);
    if (v13)
    {
      v15 = a3;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        *(double *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = a4;
        v21 = 2048;
        v22 = *(double *)&a2;
        _os_log_debug_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEBUG, "[RE/PHASE] [Playback] Gain=%.2f over duration=%.2fs for token=%llu", buf, 0x20u);
      }
      -[re fadeToValue:duration:](v13, "fadeToValue:duration:", v15, a4);
    }
    else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Could not find gain param for token %llu", buf, 0xCu);
    }

    v7 = v19;
  }
  else
  {
    v16 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a3;
      v21 = 2048;
      v22 = a4;
      _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "AudioManager_PHASE_Async::fadeSourceToGain(token=%llu, gain=%1.8e, duration=%1.16e) could not find sound event", buf, 0x20u);
    }
  }

  return pthread_rwlock_unlock((pthread_rwlock_t *)*v7);
}

void sub_2253F393C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::getListener(pthread_rwlock_t **this)
{
  id *v1;
  void *v2;
  char *v4;
  char *v5;

  v1 = (id *)(this + 29);
  v4 = (char *)(this + 31);
  v5 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  objc_msgSend(v1[2], "getListener", v4, v5);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  return v2;
}

void sub_2253F39EC(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::createListenerInScene(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  NSObject *v7;
  pthread_rwlock_t *v8;
  id *v9;
  id v10;
  void *v11;
  re *v12;
  int v13;
  NSObject *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = *re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v22) = 134217984;
    *(_QWORD *)((char *)&v22 + 4) = a3;
    _os_log_debug_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEBUG, "AudioManager_PHASE_Async::createListenerInScene(sceneID=%llu)", (uint8_t *)&v22, 0xCu);
  }
  v8 = *(pthread_rwlock_t **)(a1 + 232);
  v9 = (id *)(a1 + 248);
  *(_QWORD *)&v22 = a1 + 248;
  *((_QWORD *)&v22 + 1) = a1 + 232;
  pthread_rwlock_rdlock(v8);
  v10 = *(id *)(a1 + 248);
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, "sceneForID:", a3);
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }

  if (v18)
  {
    v13 = objc_msgSend(*v9, "engineShouldBeRunning");
    re::audio::REPHASEAudioScene::createListener(v18, a4);
    if (((v13 | objc_msgSend(*v9, "engineShouldBeRunning") ^ 1) & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(a1 + 544));
    else
      re::AudioManager_PHASE_Async::configureAndStartEngine(a1);
  }
  else
  {
    v14 = *re::audioLogObjects(v12);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v21 = a3;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "AudioManager_PHASE_Async::createListenerInScene failed to get scene for sceneID=%llu", buf, 0xCu);
    }
  }
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return pthread_rwlock_unlock(**((pthread_rwlock_t ***)&v22 + 1));
}

void sub_2253F3BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pthread_rwlock_t **a14)
{
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::removeListenerFromScene(re::AudioManager_PHASE_Async *this)
{
  os_unfair_lock_s *v2;

  v2 = (os_unfair_lock_s *)((char *)this + 256);
  os_unfair_lock_lock((os_unfair_lock_t)this + 64);
  *((_DWORD *)this + 65) = 0;
  os_unfair_lock_unlock(v2);
  pthread_rwlock_rdlock(*((pthread_rwlock_t **)this + 29));
  objc_msgSend(*((id *)this + 31), "removeListener", (char *)this + 248, (char *)this + 232);
  atomic_store(1u, (unsigned __int8 *)this + 544);
  return pthread_rwlock_unlock(*((pthread_rwlock_t **)this + 29));
}

void sub_2253F3CA4(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::isListenerCreatedInScene(pthread_rwlock_t **this)
{
  id *v1;
  uint64_t v2;
  char *v4;
  char *v5;

  v1 = (id *)(this + 29);
  v4 = (char *)(this + 31);
  v5 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  v2 = objc_msgSend(v1[2], "isListenerCreatedInScene", v4, v5);
  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  return v2;
}

void sub_2253F3D18(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::applyListenerTransformAndLevel(re::AudioManager_PHASE_Async *this, const simd_float4x4 *a2, float a3)
{
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  double *v9;
  double *v10;
  double *v11;
  id v12;
  float32x4_t v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  re::AudioManager_PHASE_Async::getListener((pthread_rwlock_t **)this);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v6 = a2->columns[1];
  v7 = a2->columns[2];
  v8 = a2->columns[3];
  v13[0] = (float32x4_t)a2->columns[0];
  v13[1] = (float32x4_t)v6;
  v13[2] = (float32x4_t)v7;
  v13[3] = (float32x4_t)v8;
  re::audio::cleanUpTransformForPHASE(v13, v9, v10, v11, (uint64_t)&v14);
  objc_msgSend(v12, "setTransform:", *(double *)&v14, *(double *)&v15, *(double *)&v16, *(double *)&v17);
  os_unfair_lock_lock((os_unfair_lock_t)this + 64);
  if (*((float *)this + 65) != a3)
  {
    objc_msgSend(v12, "setGain:", a3);
    *((float *)this + 65) = a3;
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyTracing(0, 0))
    kdebug_trace();
  os_unfair_lock_unlock((os_unfair_lock_t)this + 64);

}

void sub_2253F3E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::setSpatialSceneClassification(unsigned __int8 *a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = *re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "[RE/PHASE] [SpatialScene] AudioManager_PHASE_Async::setSpatialSceneClassification(spatialSceneClassification=%hhu), received scene classification, but dropping due to missing PHASE API", (uint8_t *)v5, 8u);
  }
  atomic_store(1u, a1 + 544);
}

uint64_t re::AudioManager_PHASE_Async::getSpatialSceneClassification(re::AudioManager_PHASE_Async *this)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *re::audioLogObjects(this);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_error_impl(&dword_224FE9000, v1, OS_LOG_TYPE_ERROR, "[RE/PHASE] [SpatialScene] AudioManager_PHASE_Async::getSpatialSceneClassification returning unknown scene due to missing PHASE API", v3, 2u);
  }
  return 0;
}

void re::AudioManager_PHASE_Async::setSpatialSceneRoomIdentifier(re::AudioManager_PHASE_Async *this, NSUUID *a2)
{
  NSUUID *v3;
  NSObject *v4;
  id v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (id)*re::audioLogObjects((re *)v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    -[NSUUID UUIDString](v3, "UUIDString");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v6 = 136315138;
    v7 = objc_msgSend(v5, "UTF8String");
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "[RE/PHASE] [SpatialScene] AudioManager_PHASE_Async::setSpatialSceneRoomIdentifier(roomIdentifier=%s), received room identifier, but dropping due to missing PHASE API", (uint8_t *)&v6, 0xCu);

  }
  atomic_store(1u, (unsigned __int8 *)this + 544);

}

void sub_2253F403C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::getReverbPreset(pthread_rwlock_t **this)
{
  id *v1;
  uint64_t v2;
  char *v4;
  char *v5;

  v1 = (id *)(this + 29);
  v4 = (char *)(this + 31);
  v5 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  v2 = objc_msgSend(v1[2], "getReverbPreset", v4, v5);
  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  return v2;
}

void sub_2253F40C4(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::createSessionRootInScene(pthread_rwlock_t **this, unint64_t a2, uint64_t a3, NSUUID *a4)
{
  NSUUID *v6;
  id *v7;
  pthread_rwlock_t *v8;
  pthread_rwlock_t *v9;
  re *v10;
  int v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  pthread_rwlock_t **v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a4;
  v7 = (id *)(this + 31);
  v17 = this + 29;
  pthread_rwlock_rdlock(this[29]);
  v8 = this[31];
  v9 = v8;
  if (v8)
  {
    -[pthread_rwlock_t sceneForID:](v8, "sceneForID:", a3);
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }

  if (v15)
  {
    v11 = objc_msgSend(*v7, "engineShouldBeRunning");
    if (((v11 | objc_msgSend(*v7, "engineShouldBeRunning") ^ 1) & 1) == 0)
      re::AudioManager_PHASE_Async::configureAndStartEngine((uint64_t)this);
  }
  else
  {
    v12 = *re::audioLogObjects(v10);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v19 = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "AudioManager_PHASE_Async::createSessionRootInScene failed to get scene for sceneID=%llu", buf, 0xCu);
    }
  }
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  pthread_rwlock_unlock(*v17);

}

void sub_2253F4250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, pthread_rwlock_t **a12)
{
  void *v12;

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

re *re::AudioManager_PHASE_Async::removeSessionRootFromScene(re *this, uint64_t a2)
{
  re *v3;
  NSObject *v4;
  id *v5;
  pthread_rwlock_t *v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = this;
    v4 = *re::audioLogObjects(this);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v7) = 134217984;
      *(_QWORD *)((char *)&v7 + 4) = a2;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "Removing audio session root %llu", (uint8_t *)&v7, 0xCu);
    }
    v6 = (pthread_rwlock_t *)*((_QWORD *)v3 + 29);
    v5 = (id *)((char *)v3 + 232);
    *(_QWORD *)&v7 = v5 + 2;
    *((_QWORD *)&v7 + 1) = v5;
    pthread_rwlock_rdlock(v6);
    objc_msgSend(v5[2], "removeSessionRoot:", a2);
    return (re *)pthread_rwlock_unlock((pthread_rwlock_t *)*v5);
  }
  return this;
}

void sub_2253F4380(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t re::AudioManager_PHASE_Async::setSessionRootTransform(pthread_rwlock_t **this, uint64_t a2, const simd_float4x4 *a3)
{
  id *v5;
  void *v6;
  void *v7;
  char *v9;
  char *v10;

  v5 = (id *)(this + 29);
  v9 = (char *)(this + 31);
  v10 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  objc_msgSend(v5[2], "getSessionRoot:", a2, v9, v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
    objc_msgSend(v6, "setTransform:", *(double *)a3->columns[0].i64, *(double *)a3->columns[1].i64, *(double *)a3->columns[2].i64, *(double *)a3->columns[3].i64);

  return pthread_rwlock_unlock((pthread_rwlock_t *)*v5);
}

void sub_2253F4424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::setSceneReverbPreset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 232;
  v6 = a1 + 248;
  v7 = a1 + 232;
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  objc_msgSend(*(id *)(v4 + 16), "setReverbPreset:allowingSpaceBlend:", a2, 0, v6, v7);
  atomic_store(1u, (unsigned __int8 *)(a1 + 544));
  return pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_2253F44C0(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::setSpaceBlendTargetPresetOrientation(re::AudioManager_PHASE_Async *this, simd_quatf a2)
{
  id *v3;
  double v5;

  v5 = *(double *)a2.vector.i64;
  v3 = (id *)((char *)this + 232);
  pthread_rwlock_rdlock(*((pthread_rwlock_t **)this + 29));
  objc_msgSend(v3[2], "setSpaceBlendTargetPresetOrientation:", v5);
  atomic_store(1u, (unsigned __int8 *)this + 544);
  return pthread_rwlock_unlock(*((pthread_rwlock_t **)this + 29));
}

void sub_2253F4544(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::loadFile(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned __int8 *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  pthread_rwlock_t *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void (**v19)(void *, void *, id, unsigned __int8 *, _QWORD);
  void *v20;
  uint64_t *v21;
  void *v22;
  id v23;
  id v24;
  _QWORD aBlock[4];
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v23 = a2;
  v33 = a6;
  v24 = a3;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%llu"), a6);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *(pthread_rwlock_t **)(a1 + 232);
  v31 = a1 + 248;
  v32 = a1 + 232;
  pthread_rwlock_rdlock(v13);
  v14 = *a4;
  objc_msgSend(*(id *)(a1 + 248), "engine");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = a7;
  objc_msgSend(v15, "assetRegistry");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN2re24AudioManager_PHASE_Async8loadFileEP5NSURLP20AVAudioChannelLayoutRKNS_27AudioFileAssetConfigurationEjy_block_invoke;
  aBlock[3] = &unk_24ED3D3E0;
  v28 = a6;
  v17 = v23;
  v26 = v17;
  v18 = v22;
  v27 = v18;
  v29 = v14;
  v30 = a5;
  v19 = (void (**)(void *, void *, id, unsigned __int8 *, _QWORD))_Block_copy(aBlock);
  v20 = v24;
  v19[2](v19, v16, v24, a4, *(_QWORD *)(a1 + 560));
  objc_msgSend(*(id *)(a1 + 248), "addAudioAssetID:configuration:", a6, a4);
  atomic_store(1u, (unsigned __int8 *)(a1 + 544));
  std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),AVAudioChannelLayout * {__strong}&,re::AudioFileAssetConfiguration const&,unsigned long long &,void>(v21, v19, v20, (uint64_t)a4, &v33);

  pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_2253F4708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  uint64_t v22;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async8loadFileEP5NSURLP20AVAudioChannelLayoutRKNS_27AudioFileAssetConfigurationEjy_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23 = a3;
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(a4 + 4);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a4 + 24));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = *(_DWORD *)(a1 + 64);
  v24 = 0;
  (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t, _QWORD, id, BOOL, void *, int, id *))(*(_QWORD *)a5 + 24))(a5, v22, v9, v10, v11, 0, v23, v12 == 1, v13, v14, &v24);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (char *)v24;

  v17 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v17)
    v17 = kdebug_trace();
  v18 = *re::audioLogObjects((re *)v17);
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 48);
      v20 = "streaming";
      if (!*(_BYTE *)a4)
        v20 = "preloaded";
      *(_DWORD *)buf = 134218242;
      v26 = v19;
      v27 = 2080;
      v28 = v20;
      _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Loaded audio asset (%llu) with a %s configuration from a fileURL.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v21 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 134218242;
    v26 = v21;
    v27 = 2112;
    v28 = v16;
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] Could not load asset (%llu): %@", buf, 0x16u);
  }

}

void sub_2253F49D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::loadFileData(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned __int8 *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  pthread_rwlock_t *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void (**v19)(void *, void *, id, unsigned __int8 *, _QWORD);
  void *v20;
  uint64_t *v21;
  void *v22;
  id v23;
  id v24;
  _QWORD aBlock[4];
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v23 = a2;
  v24 = a3;
  v33 = a6;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%llu"), a6);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *a4;
  v14 = *(pthread_rwlock_t **)(a1 + 232);
  v31 = a1 + 248;
  v32 = a1 + 232;
  pthread_rwlock_rdlock(v14);
  objc_msgSend(*(id *)(a1 + 248), "engine");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = a7;
  objc_msgSend(v15, "assetRegistry");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN2re24AudioManager_PHASE_Async12loadFileDataEP6NSDataP20AVAudioChannelLayoutRKNS_27AudioFileAssetConfigurationEjy_block_invoke;
  aBlock[3] = &unk_24ED3D3E0;
  v28 = a6;
  v17 = v23;
  v26 = v17;
  v18 = v22;
  v27 = v18;
  v29 = v13;
  v30 = a5;
  v19 = (void (**)(void *, void *, id, unsigned __int8 *, _QWORD))_Block_copy(aBlock);
  v20 = v24;
  v19[2](v19, v16, v24, a4, *(_QWORD *)(a1 + 560));
  objc_msgSend(*(id *)(a1 + 248), "addAudioAssetID:configuration:", a6, a4);
  atomic_store(1u, (unsigned __int8 *)(a1 + 544));
  std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),AVAudioChannelLayout * {__strong}&,re::AudioFileAssetConfiguration const&,unsigned long long &,void>(v21, v19, v20, (uint64_t)a4, &v33);

  pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_2253F4BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  uint64_t v22;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async12loadFileDataEP6NSDataP20AVAudioChannelLayoutRKNS_27AudioFileAssetConfigurationEjy_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23 = a3;
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(a4 + 4);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a4 + 24));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = *(_DWORD *)(a1 + 64);
  v24 = 0;
  (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t, _QWORD, id, BOOL, void *, int, id *))(*(_QWORD *)a5 + 16))(a5, v22, v9, v10, v11, 0, v23, v12 == 1, v13, v14, &v24);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (char *)v24;

  v17 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v17)
  {
    objc_msgSend(*(id *)(a1 + 32), "length");
    v17 = kdebug_trace();
  }
  v18 = *re::audioLogObjects((re *)v17);
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 48);
      v20 = "streaming";
      if (!*(_BYTE *)a4)
        v20 = "preloaded";
      *(_DWORD *)buf = 134218242;
      v26 = v19;
      v27 = 2080;
      v28 = v20;
      _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Loaded audio asset (%llu) with a %s configuration from fileData.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v21 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 134218242;
    v26 = v21;
    v27 = 2112;
    v28 = v16;
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] Could not load asset (%llu): %@", buf, 0x16u);
  }

}

void sub_2253F4E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::loadBuffer(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  id v11;
  void *v12;
  int v13;
  void *v14;
  pthread_rwlock_t *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  int v21;
  re *v22;
  NSObject *v23;
  id v24;
  unsigned int v25;
  void *v26;
  unint64_t i;
  void *v28;
  unsigned int v29;
  uint64_t *v30;
  void *v31;
  _QWORD aBlock[4];
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 buf;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v38 = a5;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%llu"), a5);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "format");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "channelCount");

  if (v13 == 1)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", *(_QWORD *)objc_msgSend(v11, "floatChannelData"), 4 * objc_msgSend(v11, "frameLength"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = a6;
LABEL_3:
    v15 = *(pthread_rwlock_t **)(a1 + 232);
    *(_QWORD *)&buf = a1 + 248;
    *((_QWORD *)&buf + 1) = a1 + 232;
    pthread_rwlock_rdlock(v15);
    objc_msgSend(*(id *)(a1 + 248), "engine");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "assetRegistry");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN2re24AudioManager_PHASE_Async10loadBufferEP16AVAudioPCMBufferRKNS_27AudioFileAssetConfigurationEjy_block_invoke;
    aBlock[3] = &unk_24ED3D408;
    v36 = a5;
    v18 = v14;
    v33 = v18;
    v34 = v31;
    v35 = v11;
    v37 = a4;
    v19 = _Block_copy(aBlock);
    (*((void (**)(void *, void *, _QWORD, uint64_t, _QWORD))v19 + 2))(v19, v17, 0, a3, *(_QWORD *)(a1 + 560));
    objc_msgSend(*(id *)(a1 + 248), "addAudioAssetID:configuration:", a5, a3);
    atomic_store(1u, (unsigned __int8 *)(a1 + 544));
    std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),decltype(nullptr),re::AudioFileAssetConfiguration const&,unsigned long long &,void>(v30, v19, a3, &v38);

    pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
    goto LABEL_8;
  }
  objc_msgSend(v11, "format");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "isInterleaved");

  if (!v21)
  {
    v24 = objc_alloc(MEMORY[0x24BDBCEC8]);
    v25 = objc_msgSend(v11, "frameLength");
    objc_msgSend(v11, "format");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = a6;
    v14 = (void *)objc_msgSend(v24, "initWithLength:", 4 * v25 * objc_msgSend(v26, "channelCount"));

    for (i = 0; ; ++i)
    {
      objc_msgSend(v11, "format");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend(v28, "channelCount");

      if (i >= v29)
        break;
      memcpy((void *)(objc_msgSend(objc_retainAutorelease(v14), "mutableBytes")+ 4 * objc_msgSend(v11, "frameLength") * i), *(const void **)(objc_msgSend(v11, "floatChannelData") + 8 * i), 4 * objc_msgSend(v11, "frameLength"));
    }
    goto LABEL_3;
  }
  v23 = *re::audioLogObjects(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v11;
    _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] can't load interleaved audio buffers: %@", (uint8_t *)&buf, 0xCu);
  }
  *a6 = 0;
  a6[1] = 0;
LABEL_8:

}

void sub_2253F5230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async10loadBufferEP16AVAudioPCMBufferRKNS_27AudioFileAssetConfigurationEjy_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t, id, uint64_t, uint64_t, void *, BOOL, void *, uint64_t, id *);
  void *v16;
  char *v17;
  uint64_t v18;
  AVAudioPCMBuffer *v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 48), "format");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *(_DWORD *)(a4 + 4);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a4 + 24));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = *(unsigned int *)(a1 + 64);
  v15 = *(void (**)(uint64_t, id, uint64_t, uint64_t, void *, BOOL, void *, uint64_t, id *))(*(_QWORD *)a5 + 32);
  v24 = 0;
  v15(a5, v8, v9, v10, v11, v12 == 1, v13, v14, &v24);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (char *)v24;

  v18 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v18)
  {
    re::audio::pcmBufferSize(*(re::audio **)(a1 + 48), v19);
    v18 = kdebug_trace();
  }
  v20 = *re::audioLogObjects((re *)v18);
  if (v16)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = "streaming";
      if (!*(_BYTE *)a4)
        v22 = "preloaded";
      *(_DWORD *)buf = 134218242;
      v26 = v21;
      v27 = 2080;
      v28 = v22;
      _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Loaded audio asset (%llu) with a %s configuration from a pcmBuffer.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v23 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 134218242;
    v26 = v23;
    v27 = 2112;
    v28 = v17;
    _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] Could not load asset (%llu): %@", buf, 0x16u);
  }

}

void sub_2253F554C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::loadBuffer(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  id v13;
  pthread_rwlock_t *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t *v21;
  void *v22;
  id v23;
  _QWORD aBlock[4];
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v13 = a2;
  v23 = a3;
  v32 = a6;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%llu"), a6);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = a7;
  v14 = *(pthread_rwlock_t **)(a1 + 232);
  v30 = a1 + 248;
  v31 = a1 + 232;
  pthread_rwlock_rdlock(v14);
  objc_msgSend(*(id *)(a1 + 248), "engine");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "assetRegistry");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN2re24AudioManager_PHASE_Async10loadBufferEP6NSDataP13AVAudioFormatRKNS_27AudioFileAssetConfigurationEjy_block_invoke;
  aBlock[3] = &unk_24ED3D408;
  v28 = a6;
  v17 = v13;
  v25 = v17;
  v18 = v22;
  v26 = v18;
  v19 = v23;
  v27 = v19;
  v29 = a5;
  v20 = _Block_copy(aBlock);
  (*((void (**)(void *, void *, _QWORD, uint64_t, _QWORD))v20 + 2))(v20, v16, 0, a4, *(_QWORD *)(a1 + 560));
  objc_msgSend(*(id *)(a1 + 248), "addAudioAssetID:configuration:", a6, a4);
  atomic_store(1u, (unsigned __int8 *)(a1 + 544));
  std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),decltype(nullptr),re::AudioFileAssetConfiguration const&,unsigned long long &,void>(v21, v20, a4, &v32);

  pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_2253F5738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  uint64_t v23;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)(v23 - 96));
  _Unwind_Resume(a1);
}

void sub_2253F57A4()
{
  JUMPOUT(0x2253F5784);
}

void sub_2253F57AC()
{
  JUMPOUT(0x2253F578CLL);
}

void ___ZN2re24AudioManager_PHASE_Async10loadBufferEP6NSDataP13AVAudioFormatRKNS_27AudioFileAssetConfigurationEjy_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_DWORD *)(a4 + 4);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)(a4 + 24));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *(unsigned int *)(a1 + 64);
  v22 = 0;
  (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t, BOOL, void *, uint64_t, id *))(*(_QWORD *)a5 + 32))(a5, v21, v8, v9, v10, v11 == 1, v12, v13, &v22);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (char *)v22;

  v16 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v16)
  {
    objc_msgSend(*(id *)(a1 + 32), "length");
    v16 = kdebug_trace();
  }
  v17 = *re::audioLogObjects((re *)v16);
  if (v14)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a1 + 56);
      v19 = "streaming";
      if (!*(_BYTE *)a4)
        v19 = "preloaded";
      *(_DWORD *)buf = 134218242;
      v24 = v18;
      v25 = 2080;
      v26 = v19;
      _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Loaded audio asset (%llu) with a %s configuration from an NSData buffer.", buf, 0x16u);
    }
  }
  else if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v20 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 134218242;
    v24 = v20;
    v25 = 2112;
    v26 = v15;
    _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "[RE/PHASE] [Load] Could not load asset (%llu): %@", buf, 0x16u);
  }

}

void sub_2253F5A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::loadExternalStreamController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = a1 + 232;
  v7 = a1 + 248;
  v8 = a1 + 232;
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  objc_msgSend(*(id *)(v5 + 16), "addAudioAssetID:configuration:", a2, a3, v7, v8);
  return pthread_rwlock_unlock(*(pthread_rwlock_t **)v5);
}

void sub_2253F5AA0(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::getConfigurationForExternalStreamController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = a1 + 232;
  v8 = a1 + 248;
  v9 = a1 + 232;
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  v6 = objc_msgSend(*(id *)(v5 + 16), "getConfigurationForAudioAssetID:configuration:", a2, a3, v8, v9);
  pthread_rwlock_unlock(*(pthread_rwlock_t **)v5);
  return v6;
}

void sub_2253F5B24(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::prepareSourceAsync(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  pthread_rwlock_t *v11;
  id v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  id v17;
  id v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  pthread_rwlock_t **v30;

  v9 = a4;
  v10 = a5;
  v11 = *(pthread_rwlock_t **)(a1 + 232);
  v29 = a1 + 248;
  v30 = (pthread_rwlock_t **)(a1 + 232);
  pthread_rwlock_rdlock(v11);
  v12 = *(id *)(a1 + 248);
  objc_msgSend(v12, "setPreparingWithData:forToken:", *(_QWORD *)(*a2 + 56), *(_QWORD *)(*a2 + 48), *(_QWORD *)(*a2 + 24));
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3321888768;
  v22[2] = ___ZN2re24AudioManager_PHASE_Async18prepareSourceAsyncENSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSStringPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
  v22[3] = &unk_24ED3D430;
  v14 = *a2;
  v13 = (std::__shared_weak_count *)a2[1];
  v25 = a1;
  v26 = v14;
  v27 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = v12;
  v23 = v17;
  v28 = a3;
  v18 = v9;
  v24 = v18;
  dispatch_async(v10, v22);

  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  pthread_rwlock_unlock(*v30);
}

void sub_2253F5CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  pthread_rwlock_t ***v4;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async18prepareSourceAsyncENSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSStringPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  re *v12;
  re *v13;
  void *v14;
  _BOOL4 v15;
  re *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSObject *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  re::AudioManagerTelemetryReporter *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t Instance;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id *v53;
  re *v54;
  id v55;
  uint64_t v56[4];
  _BYTE v57[16];
  _QWORD *v58;
  std::__shared_weak_count *v59;
  id location;
  uint64_t v61;
  std::__shared_weak_count *v62;
  re::audio::REPHASEAudioScene *v63;
  std::__shared_weak_count *v64;
  _BYTE buf[24];
  void *v66;
  id v67;
  id v68;
  id v69;
  id v70[5];

  v70[3] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = a1[6];
  v3 = a1 + 7;
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v57, 2534, *(_QWORD *)(a1[7] + 24));
  v4 = (void *)a1[4];
  v5 = (_QWORD *)*v3;
  v6 = (std::__shared_weak_count *)a1[8];
  v56[2] = *v3;
  v56[3] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (void *)a1[9];
  v10 = (void *)a1[5];
  v11 = v4;
  v12 = v10;
  v13 = v12;
  if (v11)
  {
    v12 = (re *)objc_msgSend(v11, "sceneForID:", v5[4]);
    if (v63)
    {
      v54 = v13;
      objc_msgSend(v11, "maybeEngine");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v14 == 0;

      if (v15)
      {
        objc_msgSend(v11, "engine");
        v16 = (re *)objc_claimAutoreleasedReturnValue();
        v17 = *re::audioLogObjects(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v16;
          _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::prepareSource created engine %@", buf, 0xCu);
        }

      }
      re::audio::REPHASEAudioScene::createListenerIfPending(v63);
      v55 = *(id *)(v2 + 416);
      re::audio::REPHASEAudioScene::getOrCreateEntity((os_unfair_lock_s *)v63, v5[5], &v61);
      objc_storeStrong((id *)(v61 + 32), v10);
      v18 = (void *)v5[3];
      objc_msgSend(v11, "humanDirectivity");
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = (void *)v5[22];
      v5[22] = v19;

      re::AudioManager_PHASE_Async::getPlaybackStateChangeHandlerForToken((os_unfair_lock_s *)v2, (unint64_t)v18);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v21)
      {
        v22 = *re::audioLogObjects(0);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v9;
          _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "stream %llu from connection %llu does not have playback state change handler", buf, 0x16u);
        }
      }
      objc_initWeak(&location, *(id *)(v2 + 328));
      v23 = *(id *)(v2 + 552);
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZN2re24AudioManager_PHASE_Async13prepareSourceEP14REPHASEContextNSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSString_block_invoke;
      v66 = &unk_24ED3D490;
      objc_copyWeak(v70, &location);
      v70[1] = v9;
      v70[2] = v18;
      v24 = v55;
      v67 = v24;
      v25 = v21;
      v69 = v25;
      v26 = v23;
      v68 = v26;
      v27 = _Block_copy(buf);
      v28 = (void *)v5[41];
      v5[41] = v27;

      v58 = v5;
      v59 = v6;
      if (v6)
      {
        v29 = (unint64_t *)&v6->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      objc_msgSend(v11, "prepare:", &v58, v70);
      v31 = v59;
      if (v59)
      {
        v32 = (unint64_t *)&v59->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = objc_msgSend(v11, "engineShouldBeRunning");
      v35 = atomic_load((unint64_t *)(v2 + 424));
      if (v35 == 1)
        v36 = 0;
      else
        v36 = v34;
      if (v36 == 1)
        re::AudioManager_PHASE_Async::configureAndStartEngine(v2);

      objc_destroyWeak(v53);
      objc_destroyWeak(&location);

      v37 = v62;
      if (v62)
      {
        v38 = (unint64_t *)&v62->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      v13 = v54;
      goto LABEL_35;
    }
  }
  else
  {
    v63 = 0;
    v64 = 0;
  }
  v40 = *re::audioLogObjects(v12);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    v52 = v5[3];
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v52;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v9;
    _os_log_error_impl(&dword_224FE9000, v40, OS_LOG_TYPE_ERROR, "AudioManager_PHASE_Async::prepareSource cannot prepare asset that is not in a scene. token=%llu, connection=%llu", buf, 0x16u);
  }
LABEL_35:
  v41 = v64;
  if (v64)
  {
    v42 = (unint64_t *)&v64->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  if (v6)
  {
    v45 = (unint64_t *)&v6->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  Instance = re::AudioManagerTelemetryReporter::getInstance(v44);
  v48 = (std::__shared_weak_count *)a1[8];
  v56[0] = a1[7];
  v56[1] = (uint64_t)v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    re::AudioManagerTelemetryReporter::addPreparedSourceState(Instance, v56);
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  else
  {
    re::AudioManagerTelemetryReporter::addPreparedSourceState(Instance, v56);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v57);
}

void sub_2253F61EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, id a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a23);

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a14);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&a16);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c63_ZTSNSt3__110shared_ptrIN2re5audio24REPHASESoundPrepareStateEEE(uint64_t a1)
{
  return std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](a1 + 56);
}

void ___ZN2re24AudioManager_PHASE_Async13prepareSourceEP14REPHASEContextNSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSString_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id WeakRetained;
  void *v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v7 = WeakRetained;
  if (WeakRetained && (a3 < 4 || a3 == 5))
    objc_msgSend(WeakRetained, "connectionIdentifier:streamToken:didChangeFromState:toState:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a2, a3);
  v8 = *(NSObject **)(a1 + 32);
  if (v8 && *(_QWORD *)(a1 + 48))
  {
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = ___ZN2re24AudioManager_PHASE_Async13prepareSourceEP14REPHASEContextNSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSString_block_invoke_2;
    v9[3] = &unk_24ED3D468;
    v10 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 48);
    v12 = a2;
    v13 = a3;
    dispatch_async(v8, v9);

  }
}

void sub_2253F63B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN2re24AudioManager_PHASE_Async13prepareSourceEP14REPHASEContextNSt3__110shared_ptrINS_5audio24REPHASESoundPrepareStateEEEyP8NSString_block_invoke_2(uint64_t a1)
{
  re *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = (re *)objc_msgSend(*(id *)(a1 + 32), "isCancelled");
  if ((_DWORD)v2)
  {
    v3 = *re::audioLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Engine cancelled, ignoring state change", v4, 2u);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

id re::AudioManager_PHASE_Async::createAcousticMaterialsArray(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  pthread_rwlock_t *v7;
  uint64_t v8;
  id v9;
  void *v10;
  _BYTE v12[40];
  _BYTE v13[40];
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 232;
  v7 = *(pthread_rwlock_t **)(a1 + 232);
  v15 = v8 + 16;
  v16 = v8;
  pthread_rwlock_rdlock(v7);
  v9 = *(id *)(v8 + 16);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray((uint64_t)v14, a2);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray((uint64_t)v13, a3);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray((uint64_t)v12, a4);
  objc_msgSend(v9, "createAcousticMaterialsArrayWithAbsorption:scattering:soundReduction:", v14, v13, v12);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v12);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v13);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v14);

  pthread_rwlock_unlock(*(pthread_rwlock_t **)v8);
  return v10;
}

void sub_2253F6534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  pthread_rwlock_t ***v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)va);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)va1);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)va2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::createPhaseShape(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11;
  id v12;
  pthread_rwlock_t *v13;
  id v14;
  uint64_t v16;
  uint64_t v17;

  v11 = a3;
  v12 = a4;
  v13 = *(pthread_rwlock_t **)(a1 + 232);
  a1 += 232;
  v16 = a1 + 16;
  v17 = a1;
  pthread_rwlock_rdlock(v13);
  objc_msgSend(*(id *)(a1 + 16), "createPhaseShapeWithMeshID:materials:mdlMesh:arkitMesh:meshType:", a2, v11, v12, a5, a6, a1 + 16, a1);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  pthread_rwlock_unlock(*(pthread_rwlock_t **)a1);

  return v14;
}

void sub_2253F6628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  pthread_rwlock_t ***v3;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v3);

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::prepareMeshAsset(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  pthread_rwlock_t *v14;
  uint64_t __buf[2];
  uint64_t v17[5];
  uint64_t v18[5];
  uint64_t v19[5];

  v9 = a2;
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray((uint64_t)v19, a3);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray((uint64_t)v18, a4);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray((uint64_t)v17, a5);
  re::AudioManager_PHASE_Async::createAcousticMaterialsArray(a1, v19, v18, v17);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v17);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v18);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)v19);
  if (v10)
  {
    __buf[0] = 0;
    do
    {
      arc4random_buf(__buf, 8uLL);
      v11 = __buf[0];
    }
    while (__buf[0] < 0x3E8uLL);
    re::AudioManager_PHASE_Async::createPhaseShape(a1, __buf[0], v10, v9, 0, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v14 = *(pthread_rwlock_t **)(a1 + 232);
      v13 = a1 + 232;
      __buf[0] = v13 + 16;
      __buf[1] = v13;
      pthread_rwlock_rdlock(v14);
      objc_msgSend(*(id *)(v13 + 16), "addPhaseShapeToCache:meshID:mesh:", v12, v11, v9);
      pthread_rwlock_unlock(*(pthread_rwlock_t **)v13);
    }
    else
    {
      v11 = 0;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_2253F6794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  pthread_rwlock_t ***v4;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v4);

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::prepareMeshAsset(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  pthread_rwlock_t *v9;
  uint64_t v11[2];

  v5 = a2;
  v11[0] = 0;
  do
  {
    arc4random_buf(v11, 8uLL);
    v6 = v11[0];
  }
  while (v11[0] < 0x3E8uLL);
  re::AudioManager_PHASE_Async::createPhaseShape(a1, v11[0], 0, v5, 1, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v9 = *(pthread_rwlock_t **)(a1 + 232);
    v8 = a1 + 232;
    v11[0] = v8 + 16;
    v11[1] = v8;
    pthread_rwlock_rdlock(v9);
    objc_msgSend(*(id *)(v8 + 16), "addPhaseShapeToCache:meshID:mesh:", v7, v6, v5);
    pthread_rwlock_unlock(*(pthread_rwlock_t **)v8);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_2253F68D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  pthread_rwlock_t ***v3;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v3);

  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::removeMeshAsset(pthread_rwlock_t **this, uint64_t a2)
{
  id *v3;
  char *v5;
  char *v6;

  v3 = (id *)(this + 29);
  v5 = (char *)(this + 31);
  v6 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  objc_msgSend(v3[2], "removePhaseShapeFromCacheWithMeshID:", a2, v5, v6);
  return pthread_rwlock_unlock((pthread_rwlock_t *)*v3);
}

void sub_2253F6960(_Unwind_Exception *a1)
{
  pthread_rwlock_t ***v1;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::setMeshesForEntity(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, int a5, int a6)
{
  pthread_rwlock_t *v9;
  uint64_t v10;
  id *v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  re *v20;
  NSObject *v21;
  NSObject *v22;
  id v23;
  void *v24;
  re *v25;
  uint64_t *v26;
  re *v27;
  uint64_t v28;
  uint64_t *v29;
  re *v30;
  void *v31;
  void *v32;
  uint64_t *v33;
  re *v34;
  void *v35;
  void *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  re *v48;
  uint64_t *v49;
  re *v50;
  NSObject *v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  re *v58;
  uint64_t *v59;
  re *v60;
  NSObject *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  NSObject *v68;
  unint64_t v69;
  NSObject *v70;
  unint64_t v71;
  NSObject *v72;
  unint64_t v73;
  NSObject *v74;
  NSObject *v75;
  unint64_t v76;
  NSObject *v77;
  unint64_t v78;
  __int128 v79;
  id v83;
  id v84;
  unint64_t *v85;
  std::__shared_weak_count *v86;
  re::audio::REPHASEAudioScene *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  pthread_rwlock_t **v90;
  uint8_t buf[4];
  unint64_t v92;
  __int16 v93;
  _BYTE v94[10];
  unint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (a2 == -1 || !a3)
  {
    v22 = *re::audioLogObjects((re *)a1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Can't add mesh to invalid entity/scene", buf, 2u);
    }
  }
  else
  {
    v10 = a1 + 232;
    v9 = *(pthread_rwlock_t **)(a1 + 232);
    v11 = (id *)(v10 + 16);
    v89 = v10 + 16;
    v90 = (pthread_rwlock_t **)v10;
    pthread_rwlock_rdlock(v9);
    v12 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v14 = *(_QWORD *)(a4 + 8);
    if (v14)
    {
      v15 = *(unint64_t **)(a4 + 16);
      v16 = 8 * v14;
      *(_QWORD *)&v13 = 134217984;
      v79 = v13;
      do
      {
        v17 = *v15;
        v18 = *v11;
        objc_msgSend(v18, "getPhaseShapeFromCacheWithMeshID:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          objc_msgSend(v12, "addObject:", v19);
        }
        else
        {
          v21 = *re::audioLogObjects(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v79;
            v92 = v17;
            _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "Mesh %llu is not registered with PHASE", buf, 0xCu);
          }
        }

        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    v23 = *v11;
    v24 = v23;
    if (v23)
    {
      objc_msgSend(v23, "sceneForID:", a2);
    }
    else
    {
      v87 = 0;
      v88 = 0;
    }

    re::audio::REPHASEAudioScene::getOrCreateEntity((os_unfair_lock_s *)v87, a3, (uint64_t *)&v85);
    v26 = re::audioLogObjects(v25);
    v27 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v26);
    if ((_DWORD)v27)
    {
      v68 = *re::audioLogObjects(v27);
      v27 = (re *)os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v27)
      {
        v69 = v85[4];
        *(_DWORD *)buf = 134218498;
        v92 = a2;
        v93 = 2048;
        *(_QWORD *)v94 = a3;
        *(_WORD *)&v94[8] = 2112;
        v95 = v69;
        _os_log_impl(&dword_224FE9000, v68, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity() sceneID=%llu entityID=%llu entityName='%@'", buf, 0x20u);
      }
    }
    v28 = (uint64_t)v85;
    if (v85[2])
    {
      v29 = re::audioLogObjects(v27);
      v30 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v29);
      if ((_DWORD)v30)
      {
        v70 = *re::audioLogObjects(v30);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          v71 = v85[2];
          *(_DWORD *)buf = 138412290;
          v92 = v71;
          _os_log_impl(&dword_224FE9000, v70, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity() Removing source: %@", buf, 0xCu);
        }
      }
      objc_msgSend((id)v85[2], "parent", v79);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "removeChild:", v85[2]);

      v32 = (void *)v85[2];
      v85[2] = 0;

      v28 = (uint64_t)v85;
    }
    if (*(_QWORD *)(v28 + 24))
    {
      v33 = re::audioLogObjects(v27);
      v34 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v33);
      if ((_DWORD)v34)
      {
        v72 = *re::audioLogObjects(v34);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          v73 = v85[3];
          *(_DWORD *)buf = 138412290;
          v92 = v73;
          _os_log_impl(&dword_224FE9000, v72, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity() Removing occluder: %@", buf, 0xCu);
        }
      }
      objc_msgSend((id)v85[3], "parent", v79);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "removeChild:", v85[3]);

      v36 = (void *)v85[3];
      v85[3] = 0;

    }
    v37 = (re *)objc_msgSend(v12, "count", v79);
    if (v37)
    {
      v38 = re::audioLogObjects(v37);
      v39 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v38);
      if ((_DWORD)v39)
      {
        v74 = *re::audioLogObjects(v39);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218496;
          v92 = a3;
          v93 = 1024;
          *(_DWORD *)v94 = a6;
          *(_WORD *)&v94[4] = 1024;
          *(_DWORD *)&v94[6] = a5;
          _os_log_impl(&dword_224FE9000, v74, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity entityId=%llu projects=%d occludes=%d", buf, 0x18u);
        }
      }
      objc_msgSend(*v11, "engine");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "rootObject");
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      if (a6)
      {
        v42 = objc_alloc(MEMORY[0x24BDE32D8]);
        v43 = *v11;
        objc_msgSend(v43, "engine");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = objc_msgSend(v42, "initWithEngine:shapes:", v44, v12);
        v46 = (void *)v85[2];
        v85[2] = v45;

        v47 = v85[2];
        v84 = 0;
        objc_msgSend(v41, "addChild:error:", v47, &v84);
        v48 = (re *)v84;
        v49 = re::audioLogObjects(v48);
        v50 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v49);
        if ((_DWORD)v50)
        {
          v75 = *re::audioLogObjects(v50);
          v50 = (re *)os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v50)
          {
            v76 = v85[2];
            *(_DWORD *)buf = 134218242;
            v92 = a3;
            v93 = 2112;
            *(_QWORD *)v94 = v76;
            _os_log_impl(&dword_224FE9000, v75, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity entityId=%llu created PHASESource: %@", buf, 0x16u);
          }
        }
        if (v48)
        {
          v51 = *re::audioLogObjects(v50);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218242;
            v92 = a3;
            v93 = 2112;
            *(_QWORD *)v94 = v48;
            _os_log_error_impl(&dword_224FE9000, v51, OS_LOG_TYPE_ERROR, "Could not add PHASESource for entity %llu. Error %@", buf, 0x16u);
          }

        }
      }
      if (a5)
      {
        v52 = objc_alloc(MEMORY[0x24BDE32A0]);
        v53 = *v11;
        objc_msgSend(v53, "engine");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = objc_msgSend(v52, "initWithEngine:shapes:", v54, v12);
        v56 = (void *)v85[3];
        v85[3] = v55;

        v57 = v85[3];
        v83 = 0;
        objc_msgSend(v41, "addChild:error:", v57, &v83);
        v58 = (re *)v83;
        v59 = re::audioLogObjects(v58);
        v60 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v59);
        if ((_DWORD)v60)
        {
          v77 = *re::audioLogObjects(v60);
          v60 = (re *)os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v60)
          {
            v78 = v85[3];
            *(_DWORD *)buf = 134218242;
            v92 = a3;
            v93 = 2112;
            *(_QWORD *)v94 = v78;
            _os_log_impl(&dword_224FE9000, v77, OS_LOG_TYPE_DEFAULT, "AudioManager_PHASE_Async::setMeshesForEntity entityId=%llu created PHASEOccluder: %@", buf, 0x16u);
          }
        }
        if (v58)
        {
          v61 = *re::audioLogObjects(v60);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218242;
            v92 = a3;
            v93 = 2112;
            *(_QWORD *)v94 = v58;
            _os_log_error_impl(&dword_224FE9000, v61, OS_LOG_TYPE_ERROR, "Could not add PHASEOccluder for entity %llu. Error %@", buf, 0x16u);
          }
        }
      }
      else
      {
        v58 = 0;
      }
      atomic_store(1u, (unsigned __int8 *)(a1 + 544));

    }
    else
    {
      atomic_store(1u, (unsigned __int8 *)(a1 + 544));
    }
    v62 = v86;
    if (v86)
    {
      p_shared_owners = (unint64_t *)&v86->__shared_owners_;
      do
        v64 = __ldaxr(p_shared_owners);
      while (__stlxr(v64 - 1, p_shared_owners));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v88;
    if (v88)
    {
      v66 = (unint64_t *)&v88->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }

    pthread_rwlock_unlock(*v90);
  }
}

void sub_2253F7120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va1);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va2);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::setTransformForEntity(re::AudioManager_PHASE_Async *this, uint64_t a2, unint64_t a3, simd_float4x4 a4, simd_float4x4 a5, int a6)
{
  pthread_rwlock_t *v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  simd_float4 v15;
  simd_float4 v16;
  float32x4_t v17;
  unsigned int v18;
  re *v19;
  int v20;
  NSObject *v21;
  re *v22;
  int v23;
  re *v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  const char *v30;
  re *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void **v39;
  void **v40;
  void **v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void **v46;
  void **v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  void *__p[2];
  char v63;
  void *v64[2];
  char v65;
  float32x4_t *v66;
  std::__shared_weak_count *v67;
  re *v68;
  std::__shared_weak_count *v69;
  char *v70;
  pthread_rwlock_t **v71;
  simd_float4x4 v72;
  simd_float4x4 v73;
  _BYTE buf[12];
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  void **v80;
  __int16 v81;
  void **v82;
  char __str[4];
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v73 = a4;
  v72 = a5;
  v11 = (char *)this + 232;
  v10 = (pthread_rwlock_t *)*((_QWORD *)this + 29);
  v70 = v11 + 16;
  v71 = (pthread_rwlock_t **)v11;
  pthread_rwlock_rdlock(v10);
  v12 = *((id *)v11 + 2);
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "sceneForID:", a2);
  }
  else
  {
    v68 = 0;
    v69 = 0;
  }

  if (v68)
  {
    re::audio::REPHASEAudioScene::getOrCreateEntity((os_unfair_lock_s *)v68, a3, (uint64_t *)&v66);
    v14 = (uint64_t)v66;
    v56 = v66[3];
    v57 = v66[4];
    v58 = v66[5];
    v59 = v66[6];
    v15 = v73.columns[1];
    v66[3] = (float32x4_t)v73.columns[0];
    *(simd_float4 *)(v14 + 64) = v15;
    v16 = v73.columns[3];
    *(simd_float4 *)(v14 + 80) = v73.columns[2];
    *(simd_float4 *)(v14 + 96) = v16;
    objc_msgSend(*(id *)(v14 + 16), "setTransform:", *(double *)a4.columns[0].i64, *(double *)a4.columns[1].i64, *(double *)a4.columns[2].i64, *(double *)a4.columns[3].i64);
    objc_msgSend(*(id *)(v14 + 24), "setTransform:", *(double *)a4.columns[0].i64, *(double *)a4.columns[1].i64, *(double *)a4.columns[2].i64, *(double *)a4.columns[3].i64);
    v17 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
    if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v17, vabdq_f32((float32x4_t)a4.columns[1], v57)), (int8x16_t)vcgeq_f32(v17, vabdq_f32((float32x4_t)a4.columns[0], v56))), vandq_s8((int8x16_t)vcgeq_f32(v17, vabdq_f32((float32x4_t)a4.columns[2], v58)), (int8x16_t)vcgeq_f32(v17, vabdq_f32((float32x4_t)a4.columns[3], v59))))) & 0x80000000) != 0)goto LABEL_55;
    snprintf(__str, 0x64uLL, "setTransform%llu", a3);
    v18 = vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32((float32x4_t)a4.columns[1], (float32x4_t)a5.columns[1]), (int8x16_t)vceqq_f32((float32x4_t)a4.columns[0], (float32x4_t)a5.columns[0])), vandq_s8((int8x16_t)vceqq_f32((float32x4_t)a4.columns[2], (float32x4_t)a5.columns[2]), (int8x16_t)vceqq_f32((float32x4_t)a4.columns[3], (float32x4_t)a5.columns[3]))));
    if (a6)
    {
      if ((v18 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, __str);
        v19 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEFAULT, (__int128 *)buf);
        v20 = (int)v19;
        if ((SHIBYTE(v77) & 0x80000000) == 0)
        {
          if (!(_DWORD)v19)
            goto LABEL_55;
LABEL_35:
          v26 = (id)*re::audioLogObjects(v19);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            v37 = v66[1].i64[0];
            v36 = v66[1].i64[1];
            re::audio::stringFromMatrix((re::audio *)&v73, v64);
            v38 = v65;
            v39 = (void **)v64[0];
            re::audio::stringFromMatrix((re::audio *)&v72, __p);
            v40 = v64;
            if (v38 < 0)
              v40 = v39;
            if (v63 >= 0)
              v41 = __p;
            else
              v41 = (void **)__p[0];
            *(_DWORD *)buf = 134219011;
            *(_QWORD *)&buf[4] = a3;
            v75 = 2112;
            v76 = v37;
            v77 = 2112;
            v78 = v36;
            v79 = 2085;
            v80 = v40;
            v81 = 2085;
            v82 = v41;
            v42 = "AudioManager_PHASE_Async::setTransformForEntity(): Setting transform for entity %llu (source: %@, occl"
                  "uder: %@) to:\n"
                  "%{sensitive}s,\n"
                  "before cleanup:\n"
                  "%{sensitive}s";
LABEL_50:
            _os_log_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEFAULT, v42, buf, 0x34u);
            if (v63 < 0)
              operator delete(__p[0]);
            goto LABEL_52;
          }
          goto LABEL_54;
        }
        operator delete(*(void **)buf);
        if (v20)
          goto LABEL_35;
LABEL_55:
        atomic_store(1u, (unsigned __int8 *)this + 544);
        v49 = v67;
        if (v67)
        {
          p_shared_owners = (unint64_t *)&v67->__shared_owners_;
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        goto LABEL_60;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, __str);
      v24 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEFAULT, (__int128 *)buf);
      v25 = (int)v24;
      if (SHIBYTE(v77) < 0)
        operator delete(*(void **)buf);
      if (!v25)
        goto LABEL_55;
      v26 = (id)*re::audioLogObjects(v24);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        goto LABEL_54;
      v28 = v66[1].i64[0];
      v27 = v66[1].i64[1];
      re::audio::stringFromMatrix((re::audio *)&v73, v64);
      if (v65 >= 0)
        v29 = v64;
      else
        v29 = (void **)v64[0];
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = a3;
      v75 = 2112;
      v76 = v28;
      v77 = 2112;
      v78 = v27;
      v79 = 2085;
      v80 = v29;
      v30 = "AudioManager_PHASE_Async::setTransformForEntity(): Setting transform for entity %llu (source: %@, occluder: "
            "%@) to:\n"
            "%{sensitive}s";
    }
    else
    {
      if ((v18 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, __str);
        v22 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEFAULT, (__int128 *)buf);
        v23 = (int)v22;
        if (SHIBYTE(v77) < 0)
        {
          operator delete(*(void **)buf);
          if (!v23)
            goto LABEL_55;
        }
        else if (!(_DWORD)v22)
        {
          goto LABEL_55;
        }
        v26 = (id)*re::audioLogObjects(v22);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          v44 = v66[1].i64[0];
          v43 = v66[1].i64[1];
          re::audio::stringFromMatrix((re::audio *)&v73, v64);
          v45 = v65;
          v46 = (void **)v64[0];
          re::audio::stringFromMatrix((re::audio *)&v72, __p);
          v47 = v64;
          if (v45 < 0)
            v47 = v46;
          if (v63 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          *(_DWORD *)buf = 134219010;
          *(_QWORD *)&buf[4] = a3;
          v75 = 2112;
          v76 = v44;
          v77 = 2112;
          v78 = v43;
          v79 = 2080;
          v80 = v47;
          v81 = 2080;
          v82 = v48;
          v42 = "AudioManager_PHASE_Async::setTransformForEntity(): Setting transform for entity %llu (source: %@, occlud"
                "er: %@) to:\n"
                "%s,\n"
                "before cleanup:\n"
                "%s";
          goto LABEL_50;
        }
LABEL_54:

        goto LABEL_55;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, __str);
      v31 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEFAULT, (__int128 *)buf);
      v32 = (int)v31;
      if (SHIBYTE(v77) < 0)
        operator delete(*(void **)buf);
      if (!v32)
        goto LABEL_55;
      v26 = (id)*re::audioLogObjects(v31);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        goto LABEL_54;
      v34 = v66[1].i64[0];
      v33 = v66[1].i64[1];
      re::audio::stringFromMatrix((re::audio *)&v73, v64);
      if (v65 >= 0)
        v35 = v64;
      else
        v35 = (void **)v64[0];
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = a3;
      v75 = 2112;
      v76 = v34;
      v77 = 2112;
      v78 = v33;
      v79 = 2080;
      v80 = v35;
      v30 = "AudioManager_PHASE_Async::setTransformForEntity(): Setting transform for entity %llu (source: %@, occluder: %@) to:\n%s";
    }
    _os_log_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEFAULT, v30, buf, 0x2Au);
LABEL_52:
    if (v65 < 0)
      operator delete(v64[0]);
    goto LABEL_54;
  }
  v21 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__str = 134217984;
    v84 = a2;
    _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "Can't set entity transform for unknown scene %llu", (uint8_t *)__str, 0xCu);
  }
LABEL_60:
  v52 = v69;
  if (v69)
  {
    v53 = (unint64_t *)&v69->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  return pthread_rwlock_unlock(*v71);
}

void sub_2253F7844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,pthread_rwlock_t **a49)
{
  void *v49;

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a44);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a46);
  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](&a49);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::unloadAsset(re::AudioManager_PHASE_Async *this, uint64_t a2)
{
  pthread_rwlock_t **v4;
  id *v5;
  re *v6;
  NSObject *v7;
  re *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_rwlock_t **)((char *)this + 232);
  v5 = (id *)((char *)this + 248);
  pthread_rwlock_rdlock(*((pthread_rwlock_t **)this + 29));
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%llu"), a2);
  v6 = (re *)objc_claimAutoreleasedReturnValue();
  v7 = *re::audioLogObjects(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v14 = a2;
    _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Unregistering audio asset (%llu).", buf, 0xCu);
  }
  v8 = (re *)objc_msgSend(*v5, "removeAudioAssetID:", a2);
  if (v6)
  {
    objc_msgSend(*v5, "maybeEngine");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "assetRegistry");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "unregisterAssetWithIdentifier:completion:", v6, 0);

    atomic_store(1u, (unsigned __int8 *)this + 544);
  }
  else
  {
    v11 = *re::audioLogObjects(v8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v14 = 0;
      _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Load] Unregistering audio asset (%@) which is not registered with PHASE", buf, 0xCu);
    }
  }

  return pthread_rwlock_unlock(*v4);
}

void sub_2253F7AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

id re::AudioManager_PHASE_Async::getPHASEAssetForIdentifier(pthread_rwlock_t **this, uint64_t a2)
{
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = (id *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%llu"), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(v3[2], "maybeEngine");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "assetRegistry");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "assetForIdentifier:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v11 = a2;
      _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "could not create phase ID for asset %llu", buf, 0xCu);
    }
    v7 = 0;
  }

  pthread_rwlock_unlock((pthread_rwlock_t *)*v3);
  return v7;
}

void sub_2253F7C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::configureAndStartEngine(uint64_t this)
{
  unint64_t v1;
  _QWORD *v2;
  pthread_rwlock_t *v3;
  uint64_t v4;
  id *v5;
  re *v6;
  NSObject *v7;
  pthread_t v8;
  id v9;
  void *v10;
  int v11;
  id v12;
  re *v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  id v17;
  id v18;
  id *v19;
  pthread_rwlock_t **v20;
  uint8_t buf[4];
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unint64_t *)(this + 424));
  if (v1 != 1)
  {
    v2 = (_QWORD *)this;
    v4 = this + 232;
    v3 = *(pthread_rwlock_t **)(this + 232);
    v5 = (id *)(v4 + 16);
    v19 = (id *)(v4 + 16);
    v20 = (pthread_rwlock_t **)v4;
    v6 = (re *)pthread_rwlock_rdlock(v3);
    v7 = *re::audioLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "Starting PHASEEngine", buf, 2u);
    }
    v8 = pthread_self();
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf, 2524, (uint64_t)v8);
    v9 = *v5;
    objc_msgSend(v9, "engine");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 0;
    v11 = objc_msgSend(v10, "startAndReturnError:", &v18);
    v12 = v18;

    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf);
    if ((v11 & 1) != 0)
    {
      v14 = atomic_load(v2 + 50);
      v2[49] = v14;
      atomic_store(1uLL, v2 + 53);
      v5 = v19;
    }
    else
    {
      v15 = *re::audioLogObjects(v13);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v22 = v12;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Could not start audio engine: %@", buf, 0xCu);
      }
      atomic_store(0, v2 + 53);
    }
    objc_msgSend(*v5, "createListenerIfPending");
    if (v2[41])
      v16 = v11;
    else
      v16 = 0;
    if (v16 == 1)
    {
      v17 = *v5;
      objc_msgSend(v17, "engine");

    }
    return pthread_rwlock_unlock(*v20);
  }
  return this;
}

void sub_2253F7E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::forceAudioOutputType(uint64_t a1, int a2)
{
  id *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;

  v4 = (id *)(a1 + 248);
  v7 = a1 + 248;
  v8 = a1 + 232;
  pthread_rwlock_rdlock(*(pthread_rwlock_t **)(a1 + 232));
  if (a2 == 2)
  {
    objc_msgSend(*v4, "engine", v7, v8);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setOutputSpatializationMode:", 2);
  }
  else
  {
    objc_msgSend(*v4, "engine", v7, v8);
    if (a2 == 1)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setOutputSpatializationMode:", 1);
    }
    else
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setOutputSpatializationMode:", 0);
    }
  }

  atomic_store(1u, (unsigned __int8 *)(a1 + 544));
  return pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 232));
}

void sub_2253F7FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t re::AudioManager_PHASE_Async::currentAudioOutputType(pthread_rwlock_t **this)
{
  id *v1;
  void *v2;
  uint64_t v3;
  char *v5;
  char *v6;

  v1 = (id *)(this + 29);
  v5 = (char *)(this + 31);
  v6 = (char *)(this + 29);
  pthread_rwlock_rdlock(this[29]);
  objc_msgSend(v1[2], "engine", v5, v6);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "outputSpatializationMode");

  pthread_rwlock_unlock((pthread_rwlock_t *)*v1);
  if (v3 == 2)
    return 2;
  else
    return v3 == 1;
}

void sub_2253F8080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::applyCustomHRIR(re::AudioManager_PHASE_Async *this, NSURL *a2)
{
  pthread_rwlock_t *v3;
  NSURL *v4;
  char *v5;
  char *v6;

  v4 = a2;
  v3 = (pthread_rwlock_t *)*((_QWORD *)this + 29);
  v5 = (char *)this + 248;
  v6 = (char *)this + 232;
  pthread_rwlock_rdlock(v3);
  objc_msgSend(*((id *)this + 31), "setCustomHRIRURL:", v4);
  atomic_store(1u, (unsigned __int8 *)this + 544);
  pthread_rwlock_unlock(*((pthread_rwlock_t **)this + 29));

}

void sub_2253F811C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  pthread_rwlock_t ***v10;

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](v10);

  _Unwind_Resume(a1);
}

void re::AudioManager_PHASE_Async::registerMixGroup(re::AudioManager_PHASE_Async *this, PHASEGroup *a2)
{
  PHASEGroup *v3;
  pthread_rwlock_t **v4;
  id *v5;
  void *v6;
  re *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  re *v13;
  NSObject *v14;
  const char *v15;
  id v16;
  void *v17;
  re *v18;
  NSObject *v19;
  void *v20;
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (pthread_rwlock_t **)((char *)this + 232);
  v5 = (id *)((char *)this + 248);
  pthread_rwlock_rdlock(*((pthread_rwlock_t **)this + 29));
  objc_msgSend(*((id *)this + 31), "engine", (char *)this + 248, (char *)this + 232);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v8 = *v5;
    objc_msgSend(v8, "engine");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "groups");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[PHASEGroup identifier](v3, "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKey:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v14 = *re::audioLogObjects(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v15 = "[RE/PHASE] [MixGroup] [AudioManager_PHASE_Async] -> registerMixGroup : Phase Mix Group is already register"
              "ed with this engine";
LABEL_7:
        _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, v15, buf, 2u);
      }
    }
    else
    {
      v16 = *v5;
      objc_msgSend(v16, "engine");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[PHASEGroup registerWithEngine:](v3, "registerWithEngine:", v17);

      atomic_store(1u, (unsigned __int8 *)this + 544);
      v19 = (id)*re::audioLogObjects(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        -[PHASEGroup identifier](v3, "identifier");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v22 = v20;
        _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_INFO, "[RE/PHASE] [MixGroup] Registered PHASEGroup. PhaseID: %@ (sceneID - connectionID - name).", buf, 0xCu);

      }
    }
  }
  else
  {
    v14 = *re::audioLogObjects(v7);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v15 = "[RE/PHASE] [MixGroup] [AudioManager_PHASE_Async] -> registerMixGroup : Phase Engine is nil";
      goto LABEL_7;
    }
  }
  pthread_rwlock_unlock(*v4);

}

void sub_2253F8364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100]((pthread_rwlock_t ***)va);
  _Unwind_Resume(a1);
}

pthread_rwlock_t ***std::lock_guard<re::ReadWriteLock::Reader>::~lock_guard[abi:ne180100](pthread_rwlock_t ***a1)
{
  pthread_rwlock_unlock(**a1);
  return a1;
}

pthread_rwlock_t ***std::lock_guard<re::ReadWriteLock::Writer>::~lock_guard[abi:ne180100](pthread_rwlock_t ***a1)
{
  pthread_rwlock_unlock(**a1);
  return a1;
}

void re::ReadWriteLock::~ReadWriteLock(re::ReadWriteLock *this)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)this);
  *(_QWORD *)this = 766030772;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  id *v8;
  BOOL v9;
  id *v10;
  const void *v11;
  void *v12;
  id v13;
  unint64_t v14;
  _QWORD *inserted;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (id *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v11 = (const void *)v4[3];
        v8[2] = (id)v4[2];
        v12 = _Block_copy(v11);
        v13 = v8[3];
        v8[3] = v12;

        v10 = (id *)*v8;
        v14 = (unint64_t)v8[2];
        v8[1] = (id)v14;
        inserted = std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_prepare((uint64_t)a1, v14, v8 + 2);
        std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_perform(a1, v8, inserted);
        v4 = (_QWORD *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__emplace_multi<std::pair<unsigned long long const,void({block_pointer} {__strong})(void)> const&>(a1, v4 + 2);
    v4 = (_QWORD *)*v4;
  }
}

void sub_2253F8634(void *a1)
{
  uint64_t v1;
  id *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_2253F864C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__emplace_multi<std::pair<unsigned long long const,void({block_pointer} {__strong})(void)> const&>(_QWORD *a1, unint64_t *a2)
{
  _QWORD *v4;
  const void *v5;
  unint64_t v6;
  _QWORD *inserted;

  v4 = operator new(0x20uLL);
  *v4 = 0;
  v6 = *a2;
  v5 = (const void *)a2[1];
  v4[2] = *a2;
  v4[3] = _Block_copy(v5);
  v4[1] = v6;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_prepare((uint64_t)a1, v6, v4 + 2);
  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_2253F8BC0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD **v2;
  uint64_t v3;
  _DWORD v5[12];

  v2 = (_QWORD **)*a1;
  **(_QWORD **)*a1 += a2[2];
  v3 = (uint64_t)v2[1];
  re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray((uint64_t)v5, a2);
  v5[10] = 0;
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::enqueue(v3, (uint64_t)v5);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v5);
}

void sub_2253F8C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  int v18;

  v2 = *a1;
  **(_QWORD **)(*a1 + 16) += *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = **(void ***)(v2 + 32);
  if (v4)
  {
    objc_msgSend(v4, "createPHASEOccluders:", a2);
    v5 = v10;
    v6 = v11;
    v7 = v13;
    v8 = v12 + 1;
  }
  else
  {
    v7 = 0;
    v5 = 0;
    v12 = 0;
    v6 = 0uLL;
    v8 = 1;
  }
  v13 = 0;
  v14 = v5;
  v15 = v6;
  v11 = 0uLL;
  v10 = 0;
  v17 = v7;
  LODWORD(v12) = v8;
  v16 = 1;
  v18 = 1;
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::enqueue(v3, (uint64_t)&v14);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v14);
  return re::DynamicArray<re::audio::PHASEOccluderData>::deinit((uint64_t)&v10);
}

void sub_2253F8D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  re::DynamicArray<re::audio::PHASEOccluderData>::deinit((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::AudioManager_PHASE_Async::afterFrameSlowMeshEvents(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  int v18;

  v2 = *a1;
  **(_QWORD **)(*a1 + 40) += *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = **(void ***)(v2 + 56);
  if (v4)
  {
    objc_msgSend(v4, "updatePHASEOccluders:", a2);
    v5 = v10;
    v6 = v11;
    v7 = v13;
    v8 = v12 + 1;
  }
  else
  {
    v7 = 0;
    v5 = 0;
    v12 = 0;
    v6 = 0uLL;
    v8 = 1;
  }
  v13 = 0;
  v14 = v5;
  v15 = v6;
  v11 = 0uLL;
  v10 = 0;
  v17 = v7;
  LODWORD(v12) = v8;
  v16 = 1;
  v18 = 2;
  re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::enqueue(v3, (uint64_t)&v14);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v14);
  return re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit((uint64_t)&v10);
}

void sub_2253F8E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::enqueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v4 + 1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 >= v7)
  {
    if (v7 < v6)
    {
      if (*(_QWORD *)a1)
      {
        v8 = 2 * v7;
        if (!v7)
          v8 = 8;
        if (v8 <= v6)
          v9 = v6;
        else
          v9 = v8;
        re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity((_QWORD *)a1, v9);
        v4 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity((_QWORD *)a1, v6);
        v4 = 0;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
      }
    }
    v7 = *(_QWORD *)(a1 + 8);
  }
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::__move_constructor(*(_QWORD *)(a1 + 40) + 48 * ((*(_QWORD *)(a1 + 24) + v4) % v7), a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 32);
  return result;
}

_QWORD *re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    v6 = result + 2;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::setCapacity(v5, a2);
        *v6 = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 4) = 0;
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v8 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in Queue<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 440, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 444, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v8 = 0;
      if (!v3)
      {
LABEL_18:
        v5[5] = v8;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      if (v5[2])
      {
        v9 = 0;
        v10 = v5[3];
        do
        {
          v11 = v5[5] + 48 * ((unint64_t)(v9 + v5[3]) % v5[1]);
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v8[6 * v10], v11);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor(v11);
          if (v10 + 1 < a2)
            ++v10;
          else
            v10 = 0;
          ++v9;
        }
        while (v9 != v5[2]);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[5]);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 40);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24ED3D4C8[v4])(&v7, result);
  *(_DWORD *)(v3 + 40) = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24ED3D4E0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t *a2)
{
  return re::DynamicArray<re::audio::AcousticMeshRemovalData>::~DynamicArray(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::audio::PHASEOccluderData>::deinit(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::audio::PHASEOccluderUpdateData>::deinit(a2);
}

uint64_t *re::DynamicArray<re::audio::AcousticMeshRemovalData>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
  {
    if (a1[4])
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v5;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v5;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a2 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re12DynamicArrayINS8_5audio23AcousticMeshRemovalDataEEENS9_INSA_17PHASEOccluderDataEEENS9_INSA_23PHASEOccluderUpdateDataEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSC_SE_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v5;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a2 + 24);
}

uint64_t re::DynamicArray<re::audio::AcousticMeshRemovalData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::audio::AcousticMeshRemovalData>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::audio::AcousticMeshRemovalData>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 40 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 40 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 40 * (_QWORD)v5), 40 * v4 - 40 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 40 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24ED3D4C8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(void)>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table(uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

double re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = a1[5];
    if (v3)
    {
      if (a1[2])
      {
        v4 = 0;
        do
        {
          re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit((uint64_t *)(a1[5] + 48 * ((v4 + a1[3]) % (unint64_t)a1[1])));
          ++v4;
        }
        while (v4 != a1[2]);
        v2 = *a1;
        v3 = a1[5];
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v3);
    }
    a1[5] = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_DWORD *)a1 + 8) = 0;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  void *__p;
  char v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6)

    operator delete(v3);
  }
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v35;

  v7 = *a2;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 2;
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = a1[1];
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v8)
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v13;
          if (*v13)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v24) = v13;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v30))
                  {
                    *(_QWORD *)(*a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*a1 + 8 * v30);
                  **(_QWORD **)(*a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = (void *)*a1;
        *a1 = 0;
        if (v35)
          operator delete(v35);
        v8 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v31 = *a1;
  v32 = *(_QWORD **)(*a1 + 8 * v4);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v31 + 8 * v4) = v13;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8)
        v33 %= v8;
    }
    else
    {
      v33 &= v8 - 1;
    }
    v32 = (_QWORD *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_2253F9ABC(_Unwind_Exception *a1)
{
  id *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::clear((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

double re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = a1[5];
    if (v3)
    {
      if (a1[2])
      {
        v4 = 0;
        do
        {
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>,(std::__variant_detail::_Trait)1>::~__dtor(a1[5] + 48 * ((v4 + a1[3]) % (unint64_t)a1[1]));
          ++v4;
        }
        while (v4 != a1[2]);
        v2 = *a1;
        v3 = a1[5];
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v3);
    }
    a1[5] = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_DWORD *)a1 + 8) = 0;
  }
  return result;
}

_QWORD *re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    v6 = result + 2;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>>::setCapacity(v5, a2);
        *v6 = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 4) = 0;
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v8 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in Queue<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 440, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 444, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v8 = 0;
      if (!v3)
      {
LABEL_18:
        v5[5] = v8;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      if (v5[2])
      {
        v9 = 0;
        v10 = v5[3];
        do
        {
          v11 = (uint64_t *)(v5[5] + 48 * ((unint64_t)(v9 + v5[3]) % v5[1]));
          v12 = &v8[6 * v10];
          v12[5] = 0;
          *((_DWORD *)v12 + 8) = 0;
          *(_OWORD *)v12 = 0u;
          *((_OWORD *)v12 + 1) = 0u;
          v13 = v11[1];
          *v12 = *v11;
          v12[1] = v13;
          *v11 = 0;
          v11[1] = 0;
          v14 = v12[2];
          v12[2] = v11[2];
          v11[2] = v14;
          v15 = v12[5];
          v12[5] = v11[5];
          v11[5] = v15;
          v16 = v12[3];
          v12[3] = v11[3];
          v11[3] = v16;
          re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>::deinit(v11);
          if (v10 + 1 < a2)
            ++v10;
          else
            v10 = 0;
          ++v9;
        }
        while (v9 != *v6);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[5]);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),AVAudioChannelLayout * {__strong}&,re::AudioFileAssetConfiguration const&,unsigned long long &,void>(uint64_t *a1, const void *a2, void *a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v22;
  char v23;

  v10 = operator new(0x88uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_24ED3D508;
  v11 = (uint64_t)(v10 + 3);
  v12 = *(_OWORD *)(a4 + 16);
  v16[0] = *(_OWORD *)a4;
  v16[1] = v12;
  v17 = *(_BYTE *)(a4 + 32);
  if (v17)
    re::DynamicString::DynamicString((re::DynamicString *)&v18, (const re::DynamicString *)(a4 + 40));
  if (*(_BYTE *)(a4 + 72))
    v22 = *(_DWORD *)(a4 + 76);
  v23 = *(_BYTE *)(a4 + 80);
  result = re::PersistedAssetData::PersistedAssetData(v11, a2, a3, (uint64_t)v16, *a5);
  if (v17)
  {
    result = v18;
    if (v18)
    {
      if ((v19 & 1) != 0)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 40))(v18, v20, v14, v15);
    }
  }
  *a1 = v11;
  a1[1] = (uint64_t)v10;
  return result;
}

void std::__shared_ptr_emplace<re::PersistedAssetData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED3D508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::PersistedAssetData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED3D508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

void std::__shared_ptr_emplace<re::PersistedAssetData>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = (_OWORD *)(a1 + 80);
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 88) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 96));
      *v3 = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
    }
  }

}

uint64_t re::PersistedAssetData::PersistedAssetData(uint64_t a1, const void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  __int128 v11;
  int v12;
  int v13;

  v9 = a3;
  *(_QWORD *)a1 = _Block_copy(a2);
  v10 = v9;
  *(_QWORD *)(a1 + 8) = v10;
  v11 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *(unsigned __int8 *)(a4 + 32);
  *(_BYTE *)(a1 + 48) = v12;
  if (v12)
    re::DynamicString::DynamicString((re::DynamicString *)(a1 + 56), (const re::DynamicString *)(a4 + 40));
  v13 = *(unsigned __int8 *)(a4 + 72);
  *(_BYTE *)(a1 + 88) = v13;
  if (v13)
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a4 + 76);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a4 + 80);
  *(_QWORD *)(a1 + 104) = a5;

  return a1;
}

uint64_t std::allocate_shared[abi:ne180100]<re::PersistedAssetData,std::allocator<re::PersistedAssetData>,void({block_pointer} {__strong}&)(PHASEAssetRegistry *,AVAudioChannelLayout *,re::AudioFileAssetConfiguration const&,re::audio::SoundAssetRegistrar &),decltype(nullptr),re::AudioFileAssetConfiguration const&,unsigned long long &,void>(uint64_t *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v20;
  char v21;

  v8 = operator new(0x88uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24ED3D508;
  v9 = (uint64_t)(v8 + 3);
  v10 = *(_OWORD *)(a3 + 16);
  v14[0] = *(_OWORD *)a3;
  v14[1] = v10;
  v15 = *(_BYTE *)(a3 + 32);
  if (v15)
    re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a3 + 40));
  if (*(_BYTE *)(a3 + 72))
    v20 = *(_DWORD *)(a3 + 76);
  v21 = *(_BYTE *)(a3 + 80);
  result = re::PersistedAssetData::PersistedAssetData(v9, a2, 0, (uint64_t)v14, *a4);
  if (v15)
  {
    result = v16;
    if (v16)
    {
      if ((v17 & 1) != 0)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v18, v12, v13);
    }
  }
  *a1 = v9;
  a1[1] = (uint64_t)v8;
  return result;
}

uint64_t *re::allocInfo_AudioGainChange(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_115);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_115))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254105278, 0);
    *(uint64_t *)((char *)&qword_254105288 + 6) = 0;
    qword_254105288 = 0;
    qword_254105298 = 0;
    qword_2541052A0 = 0xFFFFFFFFLL;
    qword_254105278 = (uint64_t)&off_24ED7DAA8;
    qword_2541052A8 = (uint64_t)"AudioGainChange";
    dword_2541052B0 = 0;
    xmmword_2541052B8 = 0u;
    unk_2541052C8 = 0u;
    xmmword_2541052D8 = 0u;
    qword_2541052E8 = 0;
    __cxa_guard_release(&_MergedGlobals_115);
  }
  return &qword_254105278;
}

void re::initInfo_AudioGainChange(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x61497D543298CALL;
  v23[1] = "AudioGainChange";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_254105250);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254105250);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "currentGain";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254105258 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "targetGain";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254105260 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_double((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "fadeDuration";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254105268 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_uint32_t((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "currentGainChangeID";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x1000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254105270 = v21;
      __cxa_guard_release(&qword_254105250);
    }
  }
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254105258;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AudioGainChange>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AudioGainChange>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AudioGainChange>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AudioGainChange>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

void sub_2253FA5D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105250);
  _Unwind_Resume(a1);
}

double re::internal::defaultConstruct<re::AudioGainChange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  __asm { FMOV            V0.2S, #1.0 }
  *(double *)a3 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
  return result;
}

double re::internal::defaultConstructV2<re::AudioGainChange>(uint64_t a1)
{
  double result;

  __asm { FMOV            V0.2S, #1.0 }
  *(double *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

uint64_t re::introspect_AudioGainChange(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioGainChange", (uint64_t (*)(re::internal *))re::allocInfo_AudioGainChange, (re::IntrospectionBase *(*)(void))re::initInfo_AudioGainChange, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioGainChange>, this);
}

uint64_t *re::allocInfo_AudioMixGroup(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254105300);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254105300))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541053C0, 0);
    *(uint64_t *)((char *)&qword_2541053D0 + 6) = 0;
    qword_2541053D0 = 0;
    qword_2541053E0 = 0;
    qword_2541053E8 = 0xFFFFFFFFLL;
    qword_2541053C0 = (uint64_t)&off_24ED7DAA8;
    qword_2541053F0 = (uint64_t)"AudioMixGroup";
    dword_2541053F8 = 0;
    xmmword_254105400 = 0u;
    unk_254105410 = 0u;
    xmmword_254105420 = 0u;
    qword_254105430 = 0;
    __cxa_guard_release(&qword_254105300);
  }
  return &qword_2541053C0;
}

void re::initInfo_AudioMixGroup(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  re::IntrospectionRegistry *v20;
  const re::IntrospectionBase *v21;
  const char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  const re::IntrospectionBase *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  const re::IntrospectionBase *v48;
  void *v49;
  uint64_t v50;
  uint64_t *v51;
  const re::IntrospectionBase *v52;
  void *v53;
  uint64_t v54;
  uint64_t *v55;
  const re::IntrospectionBase *v56;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  const re::IntrospectionBase *v60;
  void *v61;
  uint64_t v62;
  uint64_t *v63;
  const re::IntrospectionBase *v64;
  void *v65;
  uint64_t v66;
  uint64_t *v67;
  const re::IntrospectionBase *v68;
  void *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75[2];
  __int128 v76;
  unint64_t v77;
  _QWORD v78[60];

  v77 = 0xE1E5FF0EF545E6B2;
  v78[0] = "AudioMixGroup";
  re::StringID::destroyString((re::StringID *)&v77);
  *((_OWORD *)this + 2) = v72;
  v4 = atomic_load((unsigned __int8 *)&qword_2541052F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541052F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint64_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "ID";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x2000000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254105350 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint64_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "parentID";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254105358 = v13;
      v15 = re::introspectionAllocator((re *)v13);
      v16 = atomic_load((unsigned __int8 *)&qword_254105308);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254105308))
      {
        re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254105310);
        qword_254105310 = (uint64_t)&off_24ED3D558;
        __cxa_guard_release(&qword_254105308);
      }
      if ((_MergedGlobals_116 & 1) == 0)
      {
        v17 = re::introspect_uint64_t((re *)1, v14);
        if ((_MergedGlobals_116 & 1) == 0)
        {
          v18 = (uint64_t)v17;
          _MergedGlobals_116 = 1;
          v19 = v17[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254105310, 0);
          qword_254105320 = 0x2800000003;
          dword_254105328 = v19;
          word_25410532C = 0;
          *(_QWORD *)&xmmword_254105330 = 0;
          *((_QWORD *)&xmmword_254105330 + 1) = 0xFFFFFFFFLL;
          qword_254105340 = v18;
          unk_254105348 = 0;
          qword_254105310 = (uint64_t)&off_24ED3D558;
          re::IntrospectionRegistry::add(v20, v21);
          re::getPrettyTypeName((re *)&qword_254105310, (const re::IntrospectionBase *)&v77);
          if ((v78[0] & 1) != 0)
            v22 = (const char *)v78[1];
          else
            v22 = (char *)v78 + 1;
          if (v77 && (v78[0] & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v77 + 40))();
          v74 = *(_OWORD *)(v18 + 32);
          v23 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v75);
          if (v23)
          {
            v24 = *v23;
            *((_QWORD *)&v73 + 1) = v24;
          }
          else
          {
            v76 = v74;
            re::TypeBuilder::beginListType((uint64_t)&v77, v75, 1, 0x28uLL, 8uLL, &v76);
            re::TypeBuilder::setConstructor((uint64_t)&v77, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v77, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v77, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v77, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v77, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v77, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v77, v25);
          }
          xmmword_254105330 = v73;
          re::StringID::destroyString((re::StringID *)v75);
        }
      }
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "children";
      *(_QWORD *)(v26 + 16) = &qword_254105310;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x3000000003;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254105360 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::IntrospectionInfo<re::DynamicString>::get(1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "name";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 4;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254105368 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::introspect_float((re *)1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "gain_dB";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x7000000005;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_254105370 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::introspect_BOOL((re *)1, v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "muteState";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x5800000006;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_254105378 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      v41 = re::introspect_BOOL((re *)1, v40);
      v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = "soloState";
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = 0;
      *(_QWORD *)(v42 + 32) = 0x5900000007;
      *(_DWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_254105380 = v42;
      v43 = re::introspectionAllocator((re *)v42);
      v45 = re::introspect_float((re *)1, v44);
      v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 72, 8);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = "rampRate";
      *(_QWORD *)(v46 + 16) = v45;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0x6400000008;
      *(_DWORD *)(v46 + 40) = 0;
      *(_QWORD *)(v46 + 48) = 0;
      *(_QWORD *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_254105388 = v46;
      v47 = re::introspectionAllocator((re *)v46);
      v49 = re::introspect_float((re *)1, v48);
      v50 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 72, 8);
      *(_DWORD *)v50 = 1;
      *(_QWORD *)(v50 + 8) = "speed";
      *(_QWORD *)(v50 + 16) = v49;
      *(_QWORD *)(v50 + 24) = 0;
      *(_QWORD *)(v50 + 32) = 0x6800000009;
      *(_DWORD *)(v50 + 40) = 0;
      *(_QWORD *)(v50 + 48) = 0;
      *(_QWORD *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_254105390 = v50;
      v51 = re::introspectionAllocator((re *)v50);
      v53 = re::introspect_float((re *)1, v52);
      v54 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v51 + 32))(v51, 72, 8);
      *(_DWORD *)v54 = 1;
      *(_QWORD *)(v54 + 8) = "highFrequencyGain_dB";
      *(_QWORD *)(v54 + 16) = v53;
      *(_QWORD *)(v54 + 24) = 0;
      *(_QWORD *)(v54 + 32) = 0x5C0000000ALL;
      *(_DWORD *)(v54 + 40) = 0;
      *(_QWORD *)(v54 + 48) = 0;
      *(_QWORD *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_254105398 = v54;
      v55 = re::introspectionAllocator((re *)v54);
      v57 = re::introspect_float((re *)1, v56);
      v58 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v55 + 32))(v55, 72, 8);
      *(_DWORD *)v58 = 1;
      *(_QWORD *)(v58 + 8) = "lowFrequencyGain_dB";
      *(_QWORD *)(v58 + 16) = v57;
      *(_QWORD *)(v58 + 24) = 0;
      *(_QWORD *)(v58 + 32) = 0x600000000BLL;
      *(_DWORD *)(v58 + 40) = 0;
      *(_QWORD *)(v58 + 48) = 0;
      *(_QWORD *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_2541053A0 = v58;
      v59 = re::introspectionAllocator((re *)v58);
      v61 = re::introspect_float((re *)1, v60);
      v62 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v59 + 32))(v59, 72, 8);
      *(_DWORD *)v62 = 1;
      *(_QWORD *)(v62 + 8) = "groupFadeDuration";
      *(_QWORD *)(v62 + 16) = v61;
      *(_QWORD *)(v62 + 24) = 0;
      *(_QWORD *)(v62 + 32) = 0x6C0000000CLL;
      *(_DWORD *)(v62 + 40) = 0;
      *(_QWORD *)(v62 + 48) = 0;
      *(_QWORD *)(v62 + 56) = 0;
      *(_DWORD *)(v62 + 64) = 0;
      qword_2541053A8 = v62;
      v63 = re::introspectionAllocator((re *)v62);
      v65 = re::introspect_int((re *)1, v64);
      v66 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v63 + 32))(v63, 72, 8);
      *(_DWORD *)v66 = 1;
      *(_QWORD *)(v66 + 8) = "currentGainChangeID";
      *(_QWORD *)(v66 + 16) = v65;
      *(_QWORD *)(v66 + 24) = 0;
      *(_QWORD *)(v66 + 32) = 0x7C0000000DLL;
      *(_DWORD *)(v66 + 40) = 0;
      *(_QWORD *)(v66 + 48) = 0;
      *(_QWORD *)(v66 + 56) = 0;
      *(_DWORD *)(v66 + 64) = 0;
      qword_2541053B0 = v66;
      v67 = re::introspectionAllocator((re *)v66);
      v69 = re::introspect_float((re *)1, v68);
      v70 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v67 + 32))(v67, 72, 8);
      *(_DWORD *)v70 = 1;
      *(_QWORD *)(v70 + 8) = "targetGain_dB";
      *(_QWORD *)(v70 + 16) = v69;
      *(_QWORD *)(v70 + 24) = 0;
      *(_QWORD *)(v70 + 32) = 0x740000000ELL;
      *(_DWORD *)(v70 + 40) = 0;
      *(_QWORD *)(v70 + 48) = 0;
      *(_QWORD *)(v70 + 56) = 0;
      *(_DWORD *)(v70 + 64) = 0;
      qword_2541053B8 = v70;
      __cxa_guard_release(&qword_2541052F8);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 14;
  *((_QWORD *)this + 8) = &qword_254105350;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AudioMixGroup>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AudioMixGroup>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AudioMixGroup>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AudioMixGroup>;
  re::IntrospectionRegistry::add(this, v3);
  v71 = v72;
}

void sub_2253FAFB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105308);
  __cxa_guard_abort(&qword_2541052F8);
  _Unwind_Resume(a1);
}

double re::internal::defaultConstruct<re::AudioMixGroup>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 80) = 0;
  *(_WORD *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 60) = 0u;
  result = 0.0;
  *(_OWORD *)(a3 + 92) = xmmword_2260E5D70;
  *(_QWORD *)(a3 + 116) = 0;
  *(_QWORD *)(a3 + 108) = 0;
  *(_DWORD *)(a3 + 124) = 1;
  return result;
}

double re::internal::defaultDestruct<re::AudioMixGroup>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double result;

  re::DynamicArray<unsigned long long>::~DynamicArray(a3 + 6);
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::AudioMixGroup>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  result = 0.0;
  *(_OWORD *)(a1 + 92) = xmmword_2260E5D70;
  *(_QWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 124) = 1;
  return result;
}

double re::internal::defaultDestructV2<re::AudioMixGroup>(uint64_t *a1)
{
  double result;

  re::DynamicArray<unsigned long long>::~DynamicArray(a1 + 6);
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::introspect_AudioMixGroup(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixGroup", (uint64_t (*)(re::internal *))re::allocInfo_AudioMixGroup, (re::IntrospectionBase *(*)(void))re::initInfo_AudioMixGroup, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioMixGroup>, this);
}

float *re::AudioMixGroup::applyRamp(float *this, double a2)
{
  float v2;
  float v3;
  float v5;
  float v6;
  double v7;
  float v8;
  BOOL v9;
  BOOL v10;

  v2 = this[29];
  v3 = this[30];
  if (a2 > 0.0 && v3 != v2)
  {
    v5 = this[25];
    v6 = this[29];
    if (v5 != 0.0)
    {
      v7 = this[27] - a2;
      if (v7 < 0.0)
        v7 = 0.0;
      v8 = v7;
      this[27] = v8;
      v6 = v3 + v5 * a2;
    }
    this[30] = v6;
    v9 = v5 >= 0.0 || v6 > v2;
    if (!v9 || (v5 > 0.0 ? (v10 = v6 < v2) : (v10 = 1), !v10))
      this[30] = v2;
  }
  return this;
}

uint64_t re::AudioMixGroup::fadeToGainWithDuration(uint64_t this, float a2, double a3, int a4)
{
  float v4;
  float v5;
  float v6;

  if (a3 < 0.0)
    a3 = 0.0;
  if (a2 > 15.0)
    a2 = 15.0;
  v4 = fmaxf(a2, -60.0);
  if (*(float *)(this + 116) == v4 && *(float *)(this + 108) == 0.0)
    a3 = 0.0;
  if (!a4 || a3 == 0.0 || *(float *)(this + 108) != 0.0)
    *(float *)(this + 112) = v4;
  *(float *)(this + 116) = v4;
  v5 = a3;
  *(float *)(this + 108) = v5;
  v6 = 0.0;
  if (a3 > 0.0)
    v6 = (float)(v4 - *(float *)(this + 120)) / a3;
  *(float *)(this + 100) = v6;
  ++*(_DWORD *)(this + 124);
  return this;
}

_QWORD *re::IntrospectionDynamicArray<unsigned long long>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<unsigned long long>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<unsigned long long>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<unsigned long long>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<unsigned long long>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<float *>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<unsigned long long>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<double>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<unsigned long long>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 8 * *((_QWORD *)this + 2) - 8);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<unsigned long long>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<unsigned long long>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<float *>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t *re::DynamicArray<unsigned long long>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
  {
    if (a1[4])
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<double>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 8 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 8 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::eventReceived(uint64_t result)
{
  *(_BYTE *)(result + 12) = 1;
  return result;
}

uint64_t re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::isCompleted(re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep *this)
{
  return *((unsigned __int8 *)this + 12);
}

void re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::stepDescription(re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  const std::string::value_type *v6;
  std::string *v7;
  std::string v8;
  std::string v9;

  re::nameForAudioManagerStateMachineEvent(*((_DWORD *)this + 2), &v8);
  v4 = std::string::append(&v8, ": ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (*((_BYTE *)this + 12))
    v6 = "completed";
  else
    v6 = "pending";
  v7 = std::string::append(&v9, v6);
  *a2 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_2253FBC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::copy@<X0>(re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 8) = *((_DWORD *)this + 2);
  *(_QWORD *)result = &off_24ED3D5F0;
  *(_BYTE *)(result + 12) = *((_BYTE *)this + 12);
  *a2 = result;
  return result;
}

void re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep::~AudioManager_PHASE_StateMachine_GlobalRecoveryStep(re::AudioManager_PHASE_StateMachine_GlobalRecoveryStep *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::AudioManager_PHASE_StateMachine_RecoveryStep::getStateMachineEvent(re::AudioManager_PHASE_StateMachine_RecoveryStep *this)
{
  return *((unsigned int *)this + 2);
}

re *REAudioCreatePHASEEngine(void)
{
  int v0;
  id v1;
  re *v2;
  re *v3;
  NSObject *v4;
  __int16 v6[8];

  v0 = objc_msgSend((id)objc_opt_class(), "instancesRespondToSelector:", sel_initWithUpdateMode_spatialMode_);
  v1 = objc_alloc(MEMORY[0x24BDE3250]);
  if (v0)
    v2 = (re *)objc_msgSend(v1, "initWithUpdateMode:spatialMode:", 1, 1);
  else
    v2 = (re *)objc_msgSend(v1, "initWithUpdateMode:", 1);
  v3 = v2;
  v4 = *re::audioLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 0;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "Initializing Phase audio engine complete.", (uint8_t *)v6, 2u);
  }
  return v3;
}

uint64_t re::AudioManager_PHASE_State_Disconnected::handleStateChangeEvent(re *a1, int a2)
{
  NSObject *v4;
  int v5;
  void **v6;
  void **v7;
  _BYTE *v8;
  void **v9;
  void *v11[2];
  char v12;
  _BYTE __p[12];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((a2 - 2) < 8)
  {
    v4 = (id)*re::audioLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, re *))(*(_QWORD *)a1 + 8))(v11, a1);
      v5 = v12;
      v6 = (void **)v11[0];
      re::nameForAudioManagerStateMachineEvent(a2, __p);
      v7 = v11;
      if (v5 < 0)
        v7 = v6;
      if (v14 >= 0)
        v8 = __p;
      else
        v8 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315394;
      v16 = v7;
      v17 = 2080;
      v18 = v8;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "[RE/MediaServices] [EngineStateChange] Invalid state change event. Current state : %s, event '%s'", buf, 0x16u);
      if (v14 < 0)
        operator delete(*(void **)__p);
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  if (a2 == 1)
    return 0x100000001;
  if (!a2)
  {
    v4 = (id)*re::audioLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, re *))(*(_QWORD *)a1 + 8))(v11, a1);
      if (v12 >= 0)
        v9 = v11;
      else
        v9 = (void **)v11[0];
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v9;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "[RE/MediaServices] [EngineStateChange] AudioManager_PHASE_State is already %s", __p, 0xCu);
LABEL_17:
      if (v12 < 0)
        operator delete(v11[0]);
    }
LABEL_19:

  }
  return 0;
}

void sub_2253FBF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *re::AudioManager_PHASE_State_Disconnected::stateDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Disconnected");
}

uint64_t re::AudioManager_PHASE_State_Disconnected::stateType(re::AudioManager_PHASE_State_Disconnected *this)
{
  return 0;
}

void re::AudioManager_PHASE_State_Disconnected::~AudioManager_PHASE_State_Disconnected(re::AudioManager_PHASE_State_Disconnected *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t *introspect_REAudioInputMode(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  __int128 v43;
  StringID v44;
  _QWORD v45[2];
  _QWORD v46[61];

  v3 = atomic_load((unsigned __int8 *)&qword_254105440);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_254105440);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "REAudioInputModePointSource";
      qword_254105490 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "REAudioInputModeStereoBypass";
      qword_254105498 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = 2;
      *(_QWORD *)(v39 + 16) = "REAudioInputModeAmbientBed";
      qword_2541054A0 = v39;
      __cxa_guard_release(&qword_254105440);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254105448);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254105448))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254105528, "REAudioInputMode", 1, 1, 1, 1);
    qword_254105528 = (uint64_t)&off_24ED7D9E8;
    qword_254105568 = (uint64_t)&introspect_REAudioInputMode(BOOL)::enumTable;
    dword_254105538 = 9;
    __cxa_guard_release(&qword_254105448);
  }
  if (a1)
  {
    if ((_MergedGlobals_117 & 1) != 0)
      return &qword_254105528;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    v5 = _MergedGlobals_117;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    if ((v5 & 1) != 0)
      return &qword_254105528;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((_MergedGlobals_117 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_254105528;
    }
  }
  _MergedGlobals_117 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254105528, a2);
  v41 = 0xF873BB5B608C0CD4;
  v42 = "REAudioInputMode";
  v46[0] = 0x31CD534126;
  v46[1] = "uint8_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v46);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v46);
    v11 = (unsigned int *)qword_254105568;
    v45[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v46, &v41, 1, 1, (uint64_t)v45);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v44.var0 = 2 * v17;
          v44.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v46, v21, &v44);
          re::StringID::destroyString((re::StringID *)&v44);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v44.var0 = 2 * v25;
            v44.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v46, v29, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v46, v30);
    xmmword_254105548 = v43;
    re::StringID::destroyString((re::StringID *)&v41);
    if ((a1 & 1) != 0)
      return &qword_254105528;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v46);
  re::internal::assertLog((re::internal *)5, v40, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioInputMode", v41, v42);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_2253FC3E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105440);
  _Unwind_Resume(a1);
}

uint64_t *introspect_REAudioPlaybackState(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  __int128 v49;
  StringID v50;
  _QWORD v51[2];
  _QWORD v52[61];

  v3 = atomic_load((unsigned __int8 *)&qword_254105450);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_254105450);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "REAudioPlaybackState_Stopped";
      qword_2541054F8 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "REAudioPlaybackState_Playing";
      qword_254105500 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 2;
      *((_QWORD *)v39 + 2) = "REAudioPlaybackState_Completed";
      qword_254105508 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 3;
      *((_QWORD *)v41 + 2) = "REAudioPlaybackState_Paused";
      qword_254105510 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 9;
      *((_QWORD *)v43 + 2) = "REAudioPlaybackState_Initial";
      qword_254105518 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = 4;
      *(_QWORD *)(v45 + 16) = "REAudioPlaybackState_Prepared";
      qword_254105520 = v45;
      __cxa_guard_release(&qword_254105450);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254105458);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254105458))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254105570, "REAudioPlaybackState", 8, 8, 1, 1);
    qword_254105570 = (uint64_t)&off_24ED7D9E8;
    qword_2541055B0 = (uint64_t)&introspect_REAudioPlaybackState(BOOL)::enumTable;
    dword_254105580 = 9;
    __cxa_guard_release(&qword_254105458);
  }
  if (a1)
  {
    if ((byte_254105439 & 1) != 0)
      return &qword_254105570;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v52);
    v5 = byte_254105439;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v52);
    if ((v5 & 1) != 0)
      return &qword_254105570;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_254105439 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_254105570;
    }
  }
  byte_254105439 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254105570, a2);
  v47 = 0x6E6EE0AE8D82AD26;
  v48 = "REAudioPlaybackState";
  v52[0] = 0x607DD11CB1ALL;
  v52[1] = "uint64_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v52);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v52);
    v11 = (unsigned int *)qword_2541055B0;
    v51[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v52, &v47, 1, 1, (uint64_t)v51);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v50.var0 = 2 * v17;
          v50.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v52, v21, &v50);
          re::StringID::destroyString((re::StringID *)&v50);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v50.var0 = 2 * v25;
            v50.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v52, v29, &v50);
            re::StringID::destroyString((re::StringID *)&v50);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v52, v30);
    xmmword_254105590 = v49;
    re::StringID::destroyString((re::StringID *)&v47);
    if ((a1 & 1) != 0)
      return &qword_254105570;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v52);
  re::internal::assertLog((re::internal *)5, v46, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioPlaybackState", v47, v48);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_2253FC8A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105450);
  _Unwind_Resume(a1);
}

uint64_t *introspect_REAudioSourceDirectivityMode(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  __int128 v45;
  StringID v46;
  _QWORD v47[2];
  _QWORD v48[61];

  v3 = atomic_load((unsigned __int8 *)&qword_254105460);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_254105460);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "REAudioSourceDirectivityModeOmnidirectional";
      qword_2541054D8 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "REAudioSourceDirectivityModeBeam";
      qword_2541054E0 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 2;
      *((_QWORD *)v39 + 2) = "REAudioSourceDirectivityModeHuman";
      qword_2541054E8 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = 3;
      *(_QWORD *)(v41 + 16) = "REAudioSourceDirectivityModeSphericalCap";
      qword_2541054F0 = v41;
      __cxa_guard_release(&qword_254105460);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254105468);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254105468))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541055B8, "REAudioSourceDirectivityMode", 4, 4, 1, 1);
    qword_2541055B8 = (uint64_t)&off_24ED7D9E8;
    qword_2541055F8 = (uint64_t)&introspect_REAudioSourceDirectivityMode(BOOL)::enumTable;
    dword_2541055C8 = 9;
    __cxa_guard_release(&qword_254105468);
  }
  if (a1)
  {
    if ((byte_25410543A & 1) != 0)
      return &qword_2541055B8;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v48);
    v5 = byte_25410543A;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v48);
    if ((v5 & 1) != 0)
      return &qword_2541055B8;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25410543A & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_2541055B8;
    }
  }
  byte_25410543A = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541055B8, a2);
  v43 = 0x4BCB4D54408DF13ALL;
  v44 = "REAudioSourceDirectivityMode";
  v48[0] = 208862;
  v48[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v48);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v48);
    v11 = (unsigned int *)qword_2541055F8;
    v47[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v48, &v43, 1, 1, (uint64_t)v47);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v46.var0 = 2 * v17;
          v46.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v48, v21, &v46);
          re::StringID::destroyString((re::StringID *)&v46);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v46.var0 = 2 * v25;
            v46.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v48, v29, &v46);
            re::StringID::destroyString((re::StringID *)&v46);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v48, v30);
    xmmword_2541055D8 = v45;
    re::StringID::destroyString((re::StringID *)&v43);
    if ((a1 & 1) != 0)
      return &qword_2541055B8;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v48);
  re::internal::assertLog((re::internal *)5, v42, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioSourceDirectivityMode", v43, v44);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_2253FCD10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105460);
  _Unwind_Resume(a1);
}

uint64_t *introspect_REAudioNormalizationMode(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  __int128 v43;
  StringID v44;
  _QWORD v45[2];
  _QWORD v46[61];

  v3 = atomic_load((unsigned __int8 *)&qword_254105470);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_254105470);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "REAudioNormalizationModeNone";
      qword_2541054A8 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "REAudioNormalizationModeDynamic";
      qword_2541054B0 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = 2;
      *(_QWORD *)(v39 + 16) = "REAudioNormalizationModeStatic";
      qword_2541054B8 = v39;
      __cxa_guard_release(&qword_254105470);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254105478);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254105478))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254105600, "REAudioNormalizationMode", 4, 4, 1, 1);
    qword_254105600 = (uint64_t)&off_24ED7D9E8;
    qword_254105640 = (uint64_t)&introspect_REAudioNormalizationMode(BOOL)::enumTable;
    dword_254105610 = 9;
    __cxa_guard_release(&qword_254105478);
  }
  if (a1)
  {
    if ((byte_25410543B & 1) != 0)
      return &qword_254105600;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    v5 = byte_25410543B;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    if ((v5 & 1) != 0)
      return &qword_254105600;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25410543B & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_254105600;
    }
  }
  byte_25410543B = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254105600, a2);
  v41 = 0xCFA8E1CC2B40CB7ALL;
  v42 = "REAudioNormalizationMode";
  v46[0] = 208862;
  v46[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v46);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v46);
    v11 = (unsigned int *)qword_254105640;
    v45[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v46, &v41, 1, 1, (uint64_t)v45);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v44.var0 = 2 * v17;
          v44.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v46, v21, &v44);
          re::StringID::destroyString((re::StringID *)&v44);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v44.var0 = 2 * v25;
            v44.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v46, v29, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v46, v30);
    xmmword_254105620 = v43;
    re::StringID::destroyString((re::StringID *)&v41);
    if ((a1 & 1) != 0)
      return &qword_254105600;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v46);
  re::internal::assertLog((re::internal *)5, v40, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioNormalizationMode", v41, v42);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_2253FD13C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105470);
  _Unwind_Resume(a1);
}

uint64_t *introspect_REAudioCalibrationMode(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  __int128 v43;
  StringID v44;
  _QWORD v45[2];
  _QWORD v46[61];

  v3 = atomic_load((unsigned __int8 *)&qword_254105480);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_254105480);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "REAudioCalibrationModeNone";
      qword_2541054C0 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "REAudioCalibrationModeRelativeSpl";
      qword_2541054C8 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = 2;
      *(_QWORD *)(v39 + 16) = "REAudioCalibrationModeAbsoluteSpl";
      qword_2541054D0 = v39;
      __cxa_guard_release(&qword_254105480);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254105488);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254105488))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254105648, "REAudioCalibrationMode", 4, 4, 1, 1);
    qword_254105648 = (uint64_t)&off_24ED7D9E8;
    qword_254105688 = (uint64_t)&introspect_REAudioCalibrationMode(BOOL)::enumTable;
    dword_254105658 = 9;
    __cxa_guard_release(&qword_254105488);
  }
  if (a1)
  {
    if ((byte_25410543C & 1) != 0)
      return &qword_254105648;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    v5 = byte_25410543C;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v46);
    if ((v5 & 1) != 0)
      return &qword_254105648;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((byte_25410543C & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_254105648;
    }
  }
  byte_25410543C = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254105648, a2);
  v41 = 0x72177D22AD933D94;
  v42 = "REAudioCalibrationMode";
  v46[0] = 208862;
  v46[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v46);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v46);
    v11 = (unsigned int *)qword_254105688;
    v45[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v46, &v41, 1, 1, (uint64_t)v45);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v44.var0 = 2 * v17;
          v44.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v46, v21, &v44);
          re::StringID::destroyString((re::StringID *)&v44);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v44.var0 = 2 * v25;
            v44.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v46, v29, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v46, v30);
    xmmword_254105668 = v43;
    re::StringID::destroyString((re::StringID *)&v41);
    if ((a1 & 1) != 0)
      return &qword_254105648;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v46);
  re::internal::assertLog((re::internal *)5, v40, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REAudioCalibrationMode", v41, v42);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_2253FD564(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105480);
  _Unwind_Resume(a1);
}

void sub_2253FD62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253FD81C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2253FD8FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253FD960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2253FDB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

re::AudioSessionCache *re::AudioSessionCache::AudioSessionCache(NSObject **this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;

  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(NSObject **)((char *)this + 44) = 0x7FFFFFFF;
  this[7] = 0;
  this[8] = 54000;
  v5 = 0x100000001;
  v6 = 0;
  v7 = 0;
  re::dispatch::Queue::make("com.apple.re.AudioSessionCache", (int *)&v5, &v8);
  if (&v8 != this)
  {
    v2 = v8;
    v8 = 0;
    v3 = *this;
    *this = v2;

  }
  return (re::AudioSessionCache *)this;
}

void re::AudioSessionCache::sessionForID(os_unfair_lock_s *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  _QWORD v7[5];
  unsigned int v8;
  _BYTE v9[8];
  int v10;
  uint64_t v11;
  unsigned int v12;

  v12 = a2;
  if (a2)
  {
    v5 = this + 14;
    os_unfair_lock_lock(this + 14);
    v6 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&this[2], &v12);
    if (v6)
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::__copy_constructor(a3, v6);
      os_unfair_lock_unlock(v5);
    }
    else
    {
      v10 = 1;
      v11 = *(_QWORD *)&this[16]._os_unfair_lock_opaque;
      re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add((uint64_t)&this[2], &v12, (uint64_t)v9);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v9);
      os_unfair_lock_unlock(v5);
      v7[0] = MEMORY[0x24BDAC760];
      v7[1] = 3221225472;
      v7[2] = ___ZN2re17AudioSessionCache12sessionForIDEj_block_invoke;
      v7[3] = &__block_descriptor_44_e5_v8__0l;
      v7[4] = this;
      v8 = v12;
      dispatch_async(*(dispatch_queue_t *)&this->_os_unfair_lock_opaque, v7);
      *(_DWORD *)(a3 + 8) = 1;
    }
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
}

void sub_2253FDDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  os_unfair_lock_s *v7;
  va_list va;

  va_start(va, a7);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  os_unfair_lock_unlock(v7);
  _Unwind_Resume(a1);
}

uint64_t re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v6 + 40 * v4 + 12) != (_DWORD)v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 40 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v6 + 40 * v4 + 12) == (_DWORD)v2)
        return v6 + 40 * v4 + 16;
    }
    return 0;
  }
  return v6 + 40 * v4 + 16;
}

uint64_t re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 40 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_DWORD *)(v11 + 40 * v10 + 12) != (_DWORD)v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 40 * v10;
  return v12 + 16;
}

void ___ZN2re17AudioSessionCache12sessionForIDEj_block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v2;
  NSObject *v3;
  int v4;
  unsigned int *v5;
  unsigned int v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  id v13;
  uint8_t *v14;
  uint8_t buf[8];
  unsigned int *v16;
  id *v17;
  unsigned int *v18;
  uint64_t *v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *(os_unfair_lock_s **)(a1 + 32);
  v3 = *re::audioLogObjects((re *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v4;
    LOWORD(v16) = 1024;
    *(_DWORD *)((char *)&v16 + 2) = v4;
    _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "Calling [AVAudioSession retrieveSessionWithID:%u(0x%x)]", buf, 0xEu);
  }
  v6 = *(_DWORD *)(a1 + 40);
  v5 = (unsigned int *)(a1 + 40);
  objc_msgSend(MEMORY[0x24BE0A620], "retrieveSessionWithID:", v6);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v7 = v2 + 14;
  os_unfair_lock_lock(v2 + 14);
  v8 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&v2[2], v5);
  v12 = v8;
  if (v8)
  {
    *(_QWORD *)buf = &v13;
    v16 = v5;
    v17 = &v13;
    v18 = v5;
    v19 = &v12;
    v20 = v5;
    v21 = v5;
    v9 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v9 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v14 = buf;
    ((void (*)(uint8_t **))off_24ED3D790[v9])(&v14);
  }
  else
  {
    v10 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *v5;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v11;
      LOWORD(v16) = 1024;
      *(_DWORD *)((char *)&v16 + 2) = v11;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] removed from cache before retrieval finished", buf, 0xEu);
    }
  }
  os_unfair_lock_unlock(v7);

}

void sub_2253FE15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  os_unfair_lock_s *v11;

  os_unfair_lock_unlock(v11);

  _Unwind_Resume(a1);
}

uint64_t re::AudioSessionCache::addSession(os_unfair_lock_s *this, AVAudioSession *a2)
{
  AVAudioSession *v3;
  int v4;
  unsigned int v5;
  os_unfair_lock_s *v6;
  re *v7;
  NSObject *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v17;
  uint8_t buf[8];
  _DWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v17 = -[AVAudioSession opaqueSessionID](v3, "opaqueSessionID");
  if (!v17)
  {
    v4 = this[15]._os_unfair_lock_opaque + 1;
    do
    {
      v5 = v4;
      v4 = 1;
    }
    while (!v5);
    this[15]._os_unfair_lock_opaque = v5;
    v17 = v5;
  }
  v6 = this + 14;
  os_unfair_lock_lock(this + 14);
  v7 = (re *)re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&this[2], &v17);
  if (!v7 || *((_DWORD *)v7 + 2) != 3)
  {
    *(_QWORD *)buf = v3;
    v19[0] = 3;
    v20 = *(_QWORD *)&this[16]._os_unfair_lock_opaque;
    v9 = 0xBF58476D1CE4E5B9 * (v17 ^ ((unint64_t)v17 >> 30));
    v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
    if (*(_QWORD *)&this[2]._os_unfair_lock_opaque)
    {
      v11 = v10 % this[8]._os_unfair_lock_opaque;
      v12 = *(unsigned int *)(*(_QWORD *)&this[4]._os_unfair_lock_opaque + 4 * v11);
      if ((_DWORD)v12 != 0x7FFFFFFF)
      {
        v13 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
        if (*(_DWORD *)(v13 + 40 * v12 + 12) == v17)
        {
LABEL_14:
          std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:ne180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(v13 + 40 * v12 + 16, (void **)(v13 + 40 * v12 + 16), (void **)buf);
          *(_QWORD *)(v13 + 40 * v12 + 32) = v20;
LABEL_17:
          ++this[12]._os_unfair_lock_opaque;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
          goto LABEL_18;
        }
        while (1)
        {
          v14 = *(_DWORD *)(v13 + 40 * v12 + 8);
          v12 = v14 & 0x7FFFFFFF;
          if ((v14 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_DWORD *)(v13 + 40 * v12 + 12) == v17)
            goto LABEL_14;
        }
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
    re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove((uint64_t)&this[2], v11, v10, &v17, (uint64_t)buf);
    goto LABEL_17;
  }
  v8 = *re::audioLogObjects(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v17;
    LOWORD(v19[0]) = 1024;
    *(_DWORD *)((char *)v19 + 2) = v17;
    _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_INFO, "[RE] AudioSessionCache::addSession: session with known sessionID=%u(0x%x)! Not replacing", buf, 0xEu);
  }
LABEL_18:
  v15 = v17;
  os_unfair_lock_unlock(v6);

  return v15;
}

void sub_2253FE3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void re::AudioSessionCache::keepSessionAlive(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  unsigned int v5;

  v5 = a2;
  v3 = this + 14;
  os_unfair_lock_lock(this + 14);
  v4 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&this[2], &v5);
  if (v4)
    *(_QWORD *)(v4 + 16) = *(_QWORD *)&this[16]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v3);
}

void sub_2253FE460(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::AudioSessionCache::update(os_unfair_lock_s *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t os_unfair_lock_opaque;
  uint64_t v5;
  int *v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t *j;
  unsigned int v11;
  re *v12;
  NSObject *v13;
  unsigned int *v14;
  unsigned int v15;
  NSObject *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t *i;
  unint64_t v39;
  _QWORD *v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t prime;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint32_t v64;
  uint32_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint32_t v68;
  unsigned int *__p;
  unint64_t v70;
  _QWORD block[5];
  uint64_t v72;
  uint8_t buf[8];
  uint8_t *v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = 1065353216;
  v72 = v2;
  os_unfair_lock_lock(this + 14);
  os_unfair_lock_opaque = this[10]._os_unfair_lock_opaque;
  if ((_DWORD)os_unfair_lock_opaque)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)&this[6]._os_unfair_lock_opaque + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 10;
      if (v7 < 0)
        break;
      if (os_unfair_lock_opaque == ++v5)
      {
        LODWORD(v5) = this[10];
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)os_unfair_lock_opaque == (_DWORD)v5)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_9;
  }
  v21 = 0;
  v8 = 0;
  v9 = 0;
  v22 = v5;
  v67 = (_QWORD *)(v2 + 16);
  v68 = this[10]._os_unfair_lock_opaque;
  do
  {
    v23 = *(_QWORD *)&this[6]._os_unfair_lock_opaque;
    v24 = v23 + 40 * v22;
    v27 = *(_QWORD *)(v24 + 32);
    v25 = (_QWORD *)(v24 + 32);
    v26 = v27;
    if (v27)
    {
      *v25 = v26 - 1;
      goto LABEL_120;
    }
    v28 = (unsigned int *)v25 - 5;
    v29 = v23 + 40 * v22;
    if (*(_DWORD *)(v29 + 24) != 3)
    {
      if ((unint64_t)v8 >= v21)
      {
        v34 = v8 - v9;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v21 - (_QWORD)v9) >> 1 > v35)
          v35 = (uint64_t)(v21 - (_QWORD)v9) >> 1;
        if (v21 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
          v3 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v3 = v35;
        if (v3)
          v3 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v3);
        else
          v36 = 0;
        v56 = (unsigned int *)(v3 + 4 * v34);
        *v56 = *v28;
        v57 = v56 + 1;
        while (v8 != v9)
        {
          v58 = *--v8;
          *--v56 = v58;
        }
        v21 = v3 + 4 * v36;
        if (v9)
          operator delete(v9);
        v8 = v57;
        v9 = v56;
      }
      else
      {
        *v8++ = *v28;
      }
      goto LABEL_120;
    }
    __p = v9;
    v70 = v21;
    v30 = *v28;
    v31 = *(id *)(v29 + 16);
    v32 = *(_QWORD *)(v2 + 8);
    if (v32)
    {
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.u32[0] > 1uLL)
      {
        v21 = v30;
        if (v32 <= v30)
          v21 = v30 % v32;
      }
      else
      {
        v21 = ((_DWORD)v32 - 1) & v30;
      }
      v37 = *(uint64_t ***)(*(_QWORD *)v2 + 8 * v21);
      if (v37)
      {
        for (i = *v37; i; i = (uint64_t *)*i)
        {
          v39 = i[1];
          if (v39 == v30)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v30)
            {
              v21 = v70;
              goto LABEL_119;
            }
          }
          else
          {
            if (v33.u32[0] > 1uLL)
            {
              if (v39 >= v32)
                v39 %= v32;
            }
            else
            {
              v39 &= v32 - 1;
            }
            if (v39 != v21)
              break;
          }
        }
      }
    }
    v40 = operator new(0x20uLL);
    *v40 = 0;
    v40[1] = v30;
    *((_DWORD *)v40 + 4) = v30;
    v40[3] = v31;
    v41 = (float)(unint64_t)(*(_QWORD *)(v2 + 24) + 1);
    v42 = *(float *)(v2 + 32);
    if (v32 && (float)(v42 * (float)v32) >= v41)
    {
      v30 = v21;
      v21 = v70;
      goto LABEL_109;
    }
    v43 = (v32 & (v32 - 1)) != 0;
    if (v32 < 3)
      v43 = 1;
    v44 = v43 | (2 * v32);
    v45 = vcvtps_u32_f32(v41 / v42);
    if (v44 <= v45)
      prime = (int8x8_t)v45;
    else
      prime = (int8x8_t)v44;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
      v21 = v70;
    }
    else
    {
      v21 = v70;
      if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v32 = *(_QWORD *)(v2 + 8);
      }
    }
    if (*(_QWORD *)&prime <= v32)
    {
      if (*(_QWORD *)&prime >= v32)
        goto LABEL_105;
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 24) / *(float *)(v2 + 32));
      if (v32 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v32)
      {
        v32 = *(_QWORD *)(v2 + 8);
        goto LABEL_105;
      }
      if (!*(_QWORD *)&prime)
      {
        v66 = *(_QWORD **)v2;
        *(_QWORD *)v2 = 0;
        if (v66)
          operator delete(v66);
        v32 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        goto LABEL_105;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v47 = operator new(8 * *(_QWORD *)&prime);
    v48 = *(_QWORD **)v2;
    *(_QWORD *)v2 = v47;
    if (v48)
      operator delete(v48);
    v49 = 0;
    *(int8x8_t *)(v2 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)v2 + 8 * v49++) = 0;
    while (*(_QWORD *)&prime != v49);
    v50 = (_QWORD *)*v67;
    if (*v67)
    {
      v51 = v50[1];
      v52 = (uint8x8_t)vcnt_s8(prime);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        if (v51 >= *(_QWORD *)&prime)
          v51 %= *(_QWORD *)&prime;
      }
      else
      {
        v51 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)v2 + 8 * v51) = v67;
      v59 = (_QWORD *)*v50;
      if (*v50)
      {
        do
        {
          v60 = v59[1];
          if (v52.u32[0] > 1uLL)
          {
            if (v60 >= *(_QWORD *)&prime)
              v60 %= *(_QWORD *)&prime;
          }
          else
          {
            v60 &= *(_QWORD *)&prime - 1;
          }
          if (v60 != v51)
          {
            if (!*(_QWORD *)(*(_QWORD *)v2 + 8 * v60))
            {
              *(_QWORD *)(*(_QWORD *)v2 + 8 * v60) = v50;
              goto LABEL_101;
            }
            *v50 = *v59;
            *v59 = **(_QWORD **)(*(_QWORD *)v2 + 8 * v60);
            **(_QWORD **)(*(_QWORD *)v2 + 8 * v60) = v59;
            v59 = v50;
          }
          v60 = v51;
LABEL_101:
          v50 = v59;
          v59 = (_QWORD *)*v59;
          v51 = v60;
        }
        while (v59);
      }
    }
    v32 = (unint64_t)prime;
LABEL_105:
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v32 <= v30)
        v30 %= v32;
    }
    else
    {
      v30 = ((_DWORD)v32 - 1) & v30;
    }
LABEL_109:
    v61 = *(_QWORD **)v2;
    v62 = *(_QWORD **)(*(_QWORD *)v2 + 8 * v30);
    if (v62)
    {
      *v40 = *v62;
    }
    else
    {
      *v40 = *v67;
      *v67 = v40;
      v61[v30] = v67;
      if (!*v40)
        goto LABEL_118;
      v63 = *(_QWORD *)(*v40 + 8);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v63 >= v32)
          v63 %= v32;
      }
      else
      {
        v63 &= v32 - 1;
      }
      v62 = (_QWORD *)(*(_QWORD *)v2 + 8 * v63);
    }
    *v62 = v40;
LABEL_118:
    v31 = 0;
    ++*(_QWORD *)(v2 + 24);
LABEL_119:

    LODWORD(os_unfair_lock_opaque) = v68;
    v9 = __p;
LABEL_120:
    if (this[10]._os_unfair_lock_opaque <= (v5 + 1))
      v64 = v5 + 1;
    else
      v64 = this[10]._os_unfair_lock_opaque;
    while (1)
    {
      v22 = (v5 + 1);
      if (v64 - 1 == (_DWORD)v5)
        break;
      LODWORD(v5) = v5 + 1;
      v65 = v22;
      if ((*(_DWORD *)(*(_QWORD *)&this[6]._os_unfair_lock_opaque + 40 * v22 + 8) & 0x80000000) != 0)
        goto LABEL_127;
    }
    v65 = v64;
LABEL_127:
    LODWORD(v5) = v65;
  }
  while ((_DWORD)os_unfair_lock_opaque != v65);
LABEL_9:
  for (j = *(uint64_t **)(v2 + 16); j; j = (uint64_t *)*j)
  {
    v11 = *((_DWORD *)j + 4);
    v12 = (re *)(id)j[3];
    v13 = *re::audioLogObjects(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v11;
      LOWORD(v74) = 1024;
      *(_DWORD *)((char *)&v74 + 2) = v11;
      _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "[RE] AudioSessionCache::update: removing unused audio session with ID %u (0x%x) from cache", buf, 0xEu);
    }
    re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::remove((uint64_t)&this[2], v11);

  }
  if (v9 != v8)
  {
    v14 = v9;
    do
    {
      v15 = *v14;
      v16 = *re::audioLogObjects((re *)v3);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v15;
        LOWORD(v74) = 1024;
        *(_DWORD *)((char *)&v74 + 2) = v15;
        _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEFAULT, "[RE] AudioSessionCache::update: removing unused audio session ID %u (0x%x) from cache", buf, 0xEu);
      }
      v3 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::remove((uint64_t)&this[2], v15);
      ++v14;
    }
    while (v14 != v8);
  }
  os_unfair_lock_unlock(this + 14);
  if (*(_QWORD *)(v2 + 24))
  {
    *(_QWORD *)buf = 0;
    v74 = buf;
    v75 = 0x3812000000;
    v76 = __Block_byref_object_copy__3;
    v77 = __Block_byref_object_dispose__3;
    v72 = 0;
    v78 = 0;
    v79 = v2;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = ___ZN2re17AudioSessionCache6updateEv_block_invoke;
    block[3] = &unk_24ED3D730;
    block[4] = buf;
    dispatch_async(*(dispatch_queue_t *)&this->_os_unfair_lock_opaque, block);
    _Block_object_dispose(buf, 8);
    v17 = v79;
    v79 = 0;
    v18 = v9;
    if (v17)
    {
      v19 = std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table(v17);
      MEMORY[0x2276933B8](v19, 0x10A0C408EF24B1CLL);
    }
    v2 = 0;
    if (v9)
      goto LABEL_22;
  }
  else
  {
    v18 = v9;
    if (v9)
LABEL_22:
      operator delete(v18);
  }
  if (v2)
  {
    v20 = std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table(v2);
    MEMORY[0x2276933B8](v20, 0x10A0C408EF24B1CLL);
  }
}

void sub_2253FECA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  id *v20;

  operator delete(v20);
  os_unfair_lock_unlock(lock);
  if (__p)
    operator delete(__p);
  std::unique_ptr<std::unordered_map<unsigned int,AVAudioSession * {__strong}>>::reset[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::remove(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;

  if (*(_QWORD *)result)
  {
    v2 = result;
    v3 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
    v4 = ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
       % *(unsigned int *)(result + 24);
    v5 = *(_QWORD *)(result + 8);
    v6 = *(unsigned int *)(v5 + 4 * v4);
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(result + 16);
      if (*(_DWORD *)(v7 + 40 * v6 + 12) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        v10 = *(_QWORD *)(result + 16);
        v11 = v10 + 40 * v6;
        v14 = *(_DWORD *)(v11 + 8);
        v13 = (int *)(v11 + 8);
        v12 = v14;
        if (v14 < 0)
        {
          *v13 = v12 & 0x7FFFFFFF;
          result = std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor(v10 + 40 * v6 + 16);
          v10 = *(_QWORD *)(v2 + 16);
          v12 = *(_DWORD *)(v10 + 40 * v6 + 8);
        }
        v15 = *(_DWORD *)(v2 + 40);
        *(_DWORD *)(v10 + 40 * v6 + 8) = *(_DWORD *)(v2 + 36) | v12 & 0x80000000;
        --*(_DWORD *)(v2 + 28);
        *(_DWORD *)(v2 + 36) = v6;
        *(_DWORD *)(v2 + 40) = v15 + 1;
      }
      else
      {
        while (1)
        {
          v8 = v6;
          v9 = *(_DWORD *)(v7 + 40 * v6 + 8);
          v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_DWORD *)(v7 + 40 * v6 + 12) == a2)
          {
            *(_DWORD *)(v7 + 40 * v8 + 8) = *(_DWORD *)(v7 + 40 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__3(uint64_t a1)
{
  return std::unique_ptr<std::unordered_map<unsigned int,AVAudioSession * {__strong}>>::reset[abi:ne180100]((uint64_t *)(a1 + 48));
}

uint64_t ___ZN2re17AudioSessionCache6updateEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v4;
  re *v5;
  NSObject *v6;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(v1 + 48) + 16);
  if (v2)
  {
    do
    {
      v4 = *((_DWORD *)v2 + 4);
      v5 = (re *)(id)v2[3];
      v6 = *re::audioLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v9 = v4;
        v10 = 1024;
        v11 = v4;
        _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "[RE] AudioSessionCache::update: deleting unused audio session %u (0x%x)", buf, 0xEu);
      }

      v2 = (uint64_t *)*v2;
    }
    while (v2);
    v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  return std::unique_ptr<std::unordered_map<unsigned int,AVAudioSession * {__strong}>>::reset[abi:ne180100]((uint64_t *)(v1 + 48));
}

uint64_t std::unique_ptr<std::unordered_map<unsigned int,AVAudioSession * {__strong}>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void({block_pointer} {__strong})(REAudioPlaybackState,REAudioPlaybackState)>>>::~__hash_table(result);
    JUMPOUT(0x2276933B8);
  }
  return result;
}

void re::AudioSessionCache::clear(os_unfair_lock_s *this)
{
  unint64_t v2;
  uint64_t os_unfair_lock_opaque;
  uint64_t v4;
  int *v5;
  int v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  uint32_t v19;
  uint32_t v20;
  unsigned int *v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t MediaserverdPID;
  uint8_t buf[4];
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  MediaserverdPID = re::audio::getMediaserverdPID((re::audio *)this);
  os_unfair_lock_lock(this + 14);
  os_unfair_lock_opaque = this[10]._os_unfair_lock_opaque;
  if ((_DWORD)os_unfair_lock_opaque)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)&this[6]._os_unfair_lock_opaque + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 10;
      if (v6 < 0)
        break;
      if (os_unfair_lock_opaque == ++v4)
      {
        LODWORD(v4) = this[10];
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)os_unfair_lock_opaque == (_DWORD)v4)
  {
    os_unfair_lock_unlock(this + 14);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = v4;
    do
    {
      v11 = *(_QWORD *)&this[6]._os_unfair_lock_opaque + 40 * v10;
      v12 = (unsigned int *)(v11 + 12);
      if (*(_DWORD *)(v11 + 24) == 2
        || (MediaserverdPID & 0xFF00000000) == 0
        || *v12 >> 12 != (_DWORD)MediaserverdPID)
      {
        if ((unint64_t)v7 >= v8)
        {
          v13 = v7 - v9;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v8 - (_QWORD)v9) >> 1 > v14)
            v14 = (uint64_t)(v8 - (_QWORD)v9) >> 1;
          if (v8 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v2 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v2 = v14;
          if (v2)
            v2 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v2);
          else
            v15 = 0;
          v16 = (unsigned int *)(v2 + 4 * v13);
          *v16 = *v12;
          v17 = v16 + 1;
          while (v7 != v9)
          {
            v18 = *--v7;
            *--v16 = v18;
          }
          v8 = v2 + 4 * v15;
          if (v9)
            operator delete(v9);
          v7 = v17;
          v9 = v16;
        }
        else
        {
          *v7++ = *v12;
        }
      }
      if (this[10]._os_unfair_lock_opaque <= (v4 + 1))
        v19 = v4 + 1;
      else
        v19 = this[10]._os_unfair_lock_opaque;
      while (1)
      {
        v10 = (v4 + 1);
        if (v19 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v20 = v10;
        if ((*(_DWORD *)(*(_QWORD *)&this[6]._os_unfair_lock_opaque + 40 * v10 + 8) & 0x80000000) != 0)
          goto LABEL_38;
      }
      v20 = v19;
LABEL_38:
      LODWORD(v4) = v20;
    }
    while ((_DWORD)os_unfair_lock_opaque != v20);
    if (v9 != v7)
    {
      v21 = v9;
      do
      {
        v22 = *v21;
        v23 = *re::audioLogObjects((re *)v2);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109376;
          v26 = v22;
          v27 = 1024;
          v28 = v22;
          _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_INFO, "[RE] AudioSessionCache::clear: removing unused audio session ID %u (0x%x) from cache", buf, 0xEu);
        }
        v2 = re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::remove((uint64_t)&this[2], v22);
        ++v21;
      }
      while (v21 != v7);
    }
    os_unfair_lock_unlock(this + 14);
    if (v9)
      operator delete(v9);
  }
}

void sub_2253FF2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  void *v10;

  os_unfair_lock_unlock(lock);
  if (v10)
    operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_2253FF310(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8ne180100IZNS0_6__ctorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, id *a2)
{

}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, id *a3)
{
  id result;

  result = *a3;
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v2])(&v4, a1);
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZZNS8_17AudioSessionCache12sessionForIDEjEUb_E3__0ZZNSB_12sessionForIDEjEUb_E3__1ZZNSB_12sessionForIDEjEUb_E3__2ZZNSB_12sessionForIDEjEUb_E3__3EEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_18audiosession_state16InvalidSessionIDENSL_17RetrievingSessionENSL_18SessionUnavailableENSL_16SessionAvailableEEEEEEEDcT_DpT0_(re *a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)a1;
  v2 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = **(_DWORD **)(v1 + 48);
    v4[0] = 67109376;
    v4[1] = v3;
    v5 = 1024;
    v6 = v3;
    _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] unexpected state 'InvalidSessionID'. Expected 'RetrievingSession'", (uint8_t *)v4, 0xEu);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZZNS8_17AudioSessionCache12sessionForIDEjEUb_E3__0ZZNSB_12sessionForIDEjEUb_E3__1ZZNSB_12sessionForIDEjEUb_E3__2ZZNSB_12sessionForIDEjEUb_E3__3EEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_18audiosession_state16InvalidSessionIDENSL_17RetrievingSessionENSL_18SessionUnavailableENSL_16SessionAvailableEEEEEEEDcT_DpT0_(re *a1)
{
  uint64_t v1;
  uint64_t v2;
  os_log_t *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  void *v7;
  uint64_t v8;
  int v9;
  id v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)a1;
  v2 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  v3 = (os_log_t *)re::audioLogObjects(a1);
  v4 = *v3;
  if (v2)
  {
    v5 = v4;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = **(_DWORD **)(v1 + 24);
      v7 = **(void ***)(v1 + 16);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v6;
      v11 = 1024;
      v12 = v6;
      v13 = 2112;
      v14 = v7;
      v15 = 1024;
      v16 = objc_msgSend(v7, "opaqueSessionID");
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] returned %@ opaqueSessionID(%u)", (uint8_t *)&v10, 0x1Eu);
    }

    v10 = **(id **)(v1 + 16);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:ne180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(**(_QWORD **)(v1 + 32), **(void ****)(v1 + 32), &v10);

  }
  else
  {
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      v9 = **(_DWORD **)(v1 + 24);
      LODWORD(v10) = 67109376;
      HIDWORD(v10) = v9;
      v11 = 1024;
      v12 = v9;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] returned nil", (uint8_t *)&v10, 0xEu);
    }
    v8 = **(_QWORD **)(v1 + 32);
    if (*(_DWORD *)(v8 + 8) != 2)
      std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__emplace[abi:ne180100]<2ul,re::audiosession_state::SessionUnavailable>(v8);
  }
}

void sub_2253FF694(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZZNS8_17AudioSessionCache12sessionForIDEjEUb_E3__0ZZNSB_12sessionForIDEjEUb_E3__1ZZNSB_12sessionForIDEjEUb_E3__2ZZNSB_12sessionForIDEjEUb_E3__3EEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_18audiosession_state16InvalidSessionIDENSL_17RetrievingSessionENSL_18SessionUnavailableENSL_16SessionAvailableEEEEEEEDcT_DpT0_(re *a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)a1;
  v2 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = **(_DWORD **)(v1 + 40);
    v4[0] = 67109376;
    v4[1] = v3;
    v5 = 1024;
    v6 = v3;
    _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] unexpected state 'SessionUnavailable'. Expected 'RetrievingSession'", (uint8_t *)v4, 0xEu);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIN2re8internal10overloadedIJZZNS8_17AudioSessionCache12sessionForIDEjEUb_E3__0ZZNSB_12sessionForIDEjEUb_E3__1ZZNSB_12sessionForIDEjEUb_E3__2ZZNSB_12sessionForIDEjEUb_E3__3EEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_18audiosession_state16InvalidSessionIDENSL_17RetrievingSessionENSL_18SessionUnavailableENSL_16SessionAvailableEEEEEEEDcT_DpT0_(id ***a1, id *a2)
{
  id **v3;
  re *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  id v9;
  int v10;
  int v11;
  id v12;
  int v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  id v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (re *)*a2;
  if (*a2 == **v3 && (v4 = (re *)-[re opaqueSessionID](v4, "opaqueSessionID"), (_DWORD)v4 == *(_DWORD *)v3[1]))
  {
    v5 = *re::audioLogObjects(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)v3[1];
      v13 = 67109376;
      v14 = v6;
      v15 = 1024;
      v16 = v6;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] session was added with 'addSession' call before retrieval finished", (uint8_t *)&v13, 0xEu);
    }
  }
  else
  {
    v7 = (id)*re::audioLogObjects(v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_DWORD *)v3[1];
      v9 = **v3;
      v10 = objc_msgSend(*a2, "opaqueSessionID");
      v11 = objc_msgSend(*a2, "opaqueSessionID");
      v12 = *a2;
      v13 = 67110402;
      v14 = v8;
      v15 = 1024;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 1024;
      v20 = v10;
      v21 = 1024;
      v22 = v11;
      v23 = 2112;
      v24 = v12;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "[AVAudioSession retrieveSessionWithID:%u(0x%x)] different session was added with 'addSession' call before retrieval finished.\nRetrieved session: %@\nSession found in cache: %u(0x%x) %@", (uint8_t *)&v13, 0x2Eu);
    }

  }
}

void sub_2253FF910(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__emplace[abi:ne180100]<2ul,re::audiosession_state::SessionUnavailable>(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v2])(&v4, a1);
  *(_DWORD *)(a1 + 8) = 2;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:ne180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(uint64_t a1, void **a2, void **a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v6 = *a3;
      *a3 = 0;
      v7 = *a2;
      *a2 = v6;

      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS7_17RetrievingSessionENS7_18SessionUnavailableENS7_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v5])(&v9, a1);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = 3;
}

double re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>,(std::__variant_detail::_Trait)1>::~__dtor(v6 + v5 + 8);
          v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 40;
      }
      while (v4 < v3);
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v31, v14, v13);
          v16 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v31[16];
          *(_QWORD *)&v31[16] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = 0;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)&v31[16] + v21 + 8) & 0x80000000) != 0)
              {
                re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v31[16] + v21) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v31[16] + v21), *(_QWORD *)&v31[16] + v21 + 12, *(_QWORD *)&v31[16] + v21 + 16);
                v20 = *(_DWORD *)&v31[32];
              }
              ++v22;
              v21 += 40;
            }
            while (v22 < v20);
          }
          re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 40 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 40 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 40 * v10 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v10) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v10 + 12) = *a4;
  v26 = *(_QWORD *)(a1 + 16);
  v27 = v26 + 40 * v10;
  *(_BYTE *)(v27 + 16) = 0;
  v28 = v27 + 16;
  *(_DWORD *)(v28 + 8) = -1;
  v29 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v29 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24ED3D7B0[v29])(v31, v28, a5);
    *(_DWORD *)(v28 + 8) = v29;
  }
  *(_QWORD *)(v26 + 40 * v10 + 32) = *(_QWORD *)(a5 + 16);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void sub_2253FFD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<unsigned int,re::AudioSessionCache::CacheState,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void std::vector<unsigned int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

uint64_t *re::introspect_ReverbPreset(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  re *v49;
  uint64_t *v50;
  re *v51;
  uint64_t *v52;
  re *v53;
  uint64_t *v54;
  re *v55;
  uint64_t *v56;
  re *v57;
  uint64_t *v58;
  re *v59;
  uint64_t *v60;
  re *v61;
  uint64_t *v62;
  re *v63;
  uint64_t *v64;
  re *v65;
  uint64_t *v66;
  re *v67;
  uint64_t *v68;
  re *v69;
  uint64_t *v70;
  re *v71;
  uint64_t *v72;
  re *v73;
  uint64_t *v74;
  re *v75;
  uint64_t *v76;
  re *v77;
  uint64_t *v78;
  re *v79;
  uint64_t *v80;
  re *v81;
  uint64_t *v82;
  re *v83;
  uint64_t *v84;
  re *v85;
  uint64_t *v86;
  re *v87;
  uint64_t *v88;
  re *v89;
  uint64_t *v90;
  re *v91;
  uint64_t *v92;
  re *v93;
  uint64_t *v94;
  re *v95;
  uint64_t *v96;
  re *v97;
  uint64_t *v98;
  re *v99;
  uint64_t *v100;
  re *v101;
  uint64_t *v102;
  re *v103;
  uint64_t *v104;
  re *v105;
  uint64_t *v106;
  re *v107;
  uint64_t *v108;
  re *v109;
  uint64_t *v110;
  re *v111;
  uint64_t *v112;
  re *v113;
  uint64_t *v114;
  re *v115;
  uint64_t *v116;
  re *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  __int128 v123;
  StringID v124;
  _QWORD v125[2];
  _QWORD v126[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_254105698);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_254105698);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = -1;
      *((_QWORD *)v35 + 2) = "Invalid";
      qword_2541056F0 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "MediumRoom";
      qword_2541056F8 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 3;
      *((_QWORD *)v39 + 2) = "MediumHall";
      qword_254105700 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 4;
      *((_QWORD *)v41 + 2) = "LargeHall";
      qword_254105708 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 5;
      *((_QWORD *)v43 + 2) = "Plate";
      qword_254105710 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 6;
      *((_QWORD *)v45 + 2) = "MediumChamber";
      qword_254105718 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 7;
      *((_QWORD *)v47 + 2) = "LargeChamber";
      qword_254105720 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *((_QWORD *)v49 + 1) = 8;
      *((_QWORD *)v49 + 2) = "Cathedral";
      qword_254105728 = (uint64_t)v49;
      v50 = re::introspectionAllocator(v49);
      v51 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 24, 8);
      *(_DWORD *)v51 = 1;
      *((_QWORD *)v51 + 1) = 9;
      *((_QWORD *)v51 + 2) = "LargeRoom2";
      qword_254105730 = (uint64_t)v51;
      v52 = re::introspectionAllocator(v51);
      v53 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 24, 8);
      *(_DWORD *)v53 = 1;
      *((_QWORD *)v53 + 1) = 10;
      *((_QWORD *)v53 + 2) = "MediumHall2";
      qword_254105738 = (uint64_t)v53;
      v54 = re::introspectionAllocator(v53);
      v55 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 24, 8);
      *(_DWORD *)v55 = 1;
      *((_QWORD *)v55 + 1) = 11;
      *((_QWORD *)v55 + 2) = "MediumHall3";
      qword_254105740 = (uint64_t)v55;
      v56 = re::introspectionAllocator(v55);
      v57 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 24, 8);
      *(_DWORD *)v57 = 1;
      *((_QWORD *)v57 + 1) = 12;
      *((_QWORD *)v57 + 2) = "LargeHall2";
      qword_254105748 = (uint64_t)v57;
      v58 = re::introspectionAllocator(v57);
      v59 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 24, 8);
      *(_DWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = 100;
      *((_QWORD *)v59 + 2) = "Anechoic";
      qword_254105750 = (uint64_t)v59;
      v60 = re::introspectionAllocator(v59);
      v61 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 24, 8);
      *(_DWORD *)v61 = 1;
      *((_QWORD *)v61 + 1) = 101;
      *((_QWORD *)v61 + 2) = "Outside";
      qword_254105758 = (uint64_t)v61;
      v62 = re::introspectionAllocator(v61);
      v63 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 24, 8);
      *(_DWORD *)v63 = 1;
      *((_QWORD *)v63 + 1) = 102;
      *((_QWORD *)v63 + 2) = "Museum";
      qword_254105760 = (uint64_t)v63;
      v64 = re::introspectionAllocator(v63);
      v65 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 24, 8);
      *(_DWORD *)v65 = 1;
      *((_QWORD *)v65 + 1) = 103;
      *((_QWORD *)v65 + 2) = "LargeRoom3";
      qword_254105768 = (uint64_t)v65;
      v66 = re::introspectionAllocator(v65);
      v67 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 24, 8);
      *(_DWORD *)v67 = 1;
      *((_QWORD *)v67 + 1) = 104;
      *((_QWORD *)v67 + 2) = "LargeRoom4";
      qword_254105770 = (uint64_t)v67;
      v68 = re::introspectionAllocator(v67);
      v69 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v68 + 32))(v68, 24, 8);
      *(_DWORD *)v69 = 1;
      *((_QWORD *)v69 + 1) = 105;
      *((_QWORD *)v69 + 2) = "Cinema";
      qword_254105778 = (uint64_t)v69;
      v70 = re::introspectionAllocator(v69);
      v71 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v70 + 32))(v70, 24, 8);
      *(_DWORD *)v71 = 1;
      *((_QWORD *)v71 + 1) = 106;
      *((_QWORD *)v71 + 2) = "ListeningRoom";
      qword_254105780 = (uint64_t)v71;
      v72 = re::introspectionAllocator(v71);
      v73 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v72 + 32))(v72, 24, 8);
      *(_DWORD *)v73 = 1;
      *((_QWORD *)v73 + 1) = 107;
      *((_QWORD *)v73 + 2) = "LivingRoom";
      qword_254105788 = (uint64_t)v73;
      v74 = re::introspectionAllocator(v73);
      v75 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v74 + 32))(v74, 24, 8);
      *(_DWORD *)v75 = 1;
      *((_QWORD *)v75 + 1) = 108;
      *((_QWORD *)v75 + 2) = "Kitchen";
      qword_254105790 = (uint64_t)v75;
      v76 = re::introspectionAllocator(v75);
      v77 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v76 + 32))(v76, 24, 8);
      *(_DWORD *)v77 = 1;
      *((_QWORD *)v77 + 1) = 109;
      *((_QWORD *)v77 + 2) = "Bathroom";
      qword_254105798 = (uint64_t)v77;
      v78 = re::introspectionAllocator(v77);
      v79 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v78 + 32))(v78, 24, 8);
      *(_DWORD *)v79 = 1;
      *((_QWORD *)v79 + 1) = 201;
      *((_QWORD *)v79 + 2) = "ConcertHall";
      qword_2541057A0 = (uint64_t)v79;
      v80 = re::introspectionAllocator(v79);
      v81 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v80 + 32))(v80, 24, 8);
      *(_DWORD *)v81 = 1;
      *((_QWORD *)v81 + 1) = 202;
      *((_QWORD *)v81 + 2) = "VeryLargeRoom";
      qword_2541057A8 = (uint64_t)v81;
      v82 = re::introspectionAllocator(v81);
      v83 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v82 + 32))(v82, 24, 8);
      *(_DWORD *)v83 = 1;
      *((_QWORD *)v83 + 1) = 203;
      *((_QWORD *)v83 + 2) = "LargeRoom";
      qword_2541057B0 = (uint64_t)v83;
      v84 = re::introspectionAllocator(v83);
      v85 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v84 + 32))(v84, 24, 8);
      *(_DWORD *)v85 = 1;
      *((_QWORD *)v85 + 1) = 204;
      *((_QWORD *)v85 + 2) = "LargeRoomTreated";
      qword_2541057B8 = (uint64_t)v85;
      v86 = re::introspectionAllocator(v85);
      v87 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v86 + 32))(v86, 24, 8);
      *(_DWORD *)v87 = 1;
      *((_QWORD *)v87 + 1) = 205;
      *((_QWORD *)v87 + 2) = "MediumRoomDry";
      qword_2541057C0 = (uint64_t)v87;
      v88 = re::introspectionAllocator(v87);
      v89 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v88 + 32))(v88, 24, 8);
      *(_DWORD *)v89 = 1;
      *((_QWORD *)v89 + 1) = 206;
      *((_QWORD *)v89 + 2) = "MediumRoomTreated";
      qword_2541057C8 = (uint64_t)v89;
      v90 = re::introspectionAllocator(v89);
      v91 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v90 + 32))(v90, 24, 8);
      *(_DWORD *)v91 = 1;
      *((_QWORD *)v91 + 1) = 207;
      *((_QWORD *)v91 + 2) = "SmallRoom";
      qword_2541057D0 = (uint64_t)v91;
      v92 = re::introspectionAllocator(v91);
      v93 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v92 + 32))(v92, 24, 8);
      *(_DWORD *)v93 = 1;
      *((_QWORD *)v93 + 1) = 208;
      *((_QWORD *)v93 + 2) = "SmallRoomBright";
      qword_2541057D8 = (uint64_t)v93;
      v94 = re::introspectionAllocator(v93);
      v95 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v94 + 32))(v94, 24, 8);
      *(_DWORD *)v95 = 1;
      *((_QWORD *)v95 + 1) = 209;
      *((_QWORD *)v95 + 2) = "VerySmallRoomBright";
      qword_2541057E0 = (uint64_t)v95;
      v96 = re::introspectionAllocator(v95);
      v97 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v96 + 32))(v96, 24, 8);
      *(_DWORD *)v97 = 1;
      *((_QWORD *)v97 + 1) = 1001;
      *((_QWORD *)v97 + 2) = "Environment01";
      qword_2541057E8 = (uint64_t)v97;
      v98 = re::introspectionAllocator(v97);
      v99 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v98 + 32))(v98, 24, 8);
      *(_DWORD *)v99 = 1;
      *((_QWORD *)v99 + 1) = 1002;
      *((_QWORD *)v99 + 2) = "Environment02";
      qword_2541057F0 = (uint64_t)v99;
      v100 = re::introspectionAllocator(v99);
      v101 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v100 + 32))(v100, 24, 8);
      *(_DWORD *)v101 = 1;
      *((_QWORD *)v101 + 1) = 1003;
      *((_QWORD *)v101 + 2) = "Environment03";
      qword_2541057F8 = (uint64_t)v101;
      v102 = re::introspectionAllocator(v101);
      v103 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v102 + 32))(v102, 24, 8);
      *(_DWORD *)v103 = 1;
      *((_QWORD *)v103 + 1) = 1004;
      *((_QWORD *)v103 + 2) = "Environment04";
      qword_254105800 = (uint64_t)v103;
      v104 = re::introspectionAllocator(v103);
      v105 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v104 + 32))(v104, 24, 8);
      *(_DWORD *)v105 = 1;
      *((_QWORD *)v105 + 1) = 1005;
      *((_QWORD *)v105 + 2) = "Environment05";
      qword_254105808 = (uint64_t)v105;
      v106 = re::introspectionAllocator(v105);
      v107 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v106 + 32))(v106, 24, 8);
      *(_DWORD *)v107 = 1;
      *((_QWORD *)v107 + 1) = 1006;
      *((_QWORD *)v107 + 2) = "Environment06";
      qword_254105810 = (uint64_t)v107;
      v108 = re::introspectionAllocator(v107);
      v109 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v108 + 32))(v108, 24, 8);
      *(_DWORD *)v109 = 1;
      *((_QWORD *)v109 + 1) = 1007;
      *((_QWORD *)v109 + 2) = "Environment07";
      qword_254105818 = (uint64_t)v109;
      v110 = re::introspectionAllocator(v109);
      v111 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v110 + 32))(v110, 24, 8);
      *(_DWORD *)v111 = 1;
      *((_QWORD *)v111 + 1) = 1008;
      *((_QWORD *)v111 + 2) = "Environment08";
      qword_254105820 = (uint64_t)v111;
      v112 = re::introspectionAllocator(v111);
      v113 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v112 + 32))(v112, 24, 8);
      *(_DWORD *)v113 = 1;
      *((_QWORD *)v113 + 1) = 1009;
      *((_QWORD *)v113 + 2) = "Environment09";
      qword_254105828 = (uint64_t)v113;
      v114 = re::introspectionAllocator(v113);
      v115 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v114 + 32))(v114, 24, 8);
      *(_DWORD *)v115 = 1;
      *((_QWORD *)v115 + 1) = 1010;
      *((_QWORD *)v115 + 2) = "Environment10";
      qword_254105830 = (uint64_t)v115;
      v116 = re::introspectionAllocator(v115);
      v117 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v116 + 32))(v116, 24, 8);
      *(_DWORD *)v117 = 1;
      *((_QWORD *)v117 + 1) = 1012;
      *((_QWORD *)v117 + 2) = "Environment12";
      qword_254105838 = (uint64_t)v117;
      v118 = re::introspectionAllocator(v117);
      v119 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v118 + 32))(v118, 24, 8);
      *(_DWORD *)v119 = 1;
      *(_QWORD *)(v119 + 8) = 941;
      *(_QWORD *)(v119 + 16) = "Simulated";
      qword_254105840 = v119;
      __cxa_guard_release(&qword_254105698);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2541056A0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2541056A0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541056A8, "ReverbPreset", 8, 8, 1, 1);
    qword_2541056A8 = (uint64_t)&off_24ED7D9E8;
    qword_2541056E8 = (uint64_t)&re::introspect_ReverbPreset(BOOL)::enumTable;
    dword_2541056B8 = 9;
    __cxa_guard_release(&qword_2541056A0);
  }
  if (v2)
  {
    if ((_MergedGlobals_118 & 1) != 0)
      return &qword_2541056A8;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v126);
    v5 = _MergedGlobals_118;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v126);
    if ((v5 & 1) != 0)
      return &qword_2541056A8;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((_MergedGlobals_118 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_2541056A8;
    }
  }
  _MergedGlobals_118 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541056A8, a2);
  v121 = 0x3C372182BEBBCEE2;
  v122 = "ReverbPreset";
  v126[0] = 0x2CE93EC744;
  v126[1] = "int64_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v126);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v126);
    v11 = (unsigned int *)qword_2541056E8;
    v125[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v126, &v121, 1, 1, (uint64_t)v125);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v124.var0 = 2 * v17;
          v124.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v126, v21, &v124);
          re::StringID::destroyString((re::StringID *)&v124);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v124.var0 = 2 * v25;
            v124.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v126, v29, &v124);
            re::StringID::destroyString((re::StringID *)&v124);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v126, v30);
    xmmword_2541056C8 = v123;
    re::StringID::destroyString((re::StringID *)&v121);
    if ((v2 & 1) != 0)
      return &qword_2541056A8;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v126);
  re::internal::assertLog((re::internal *)5, v120, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ReverbPreset", v121, v122);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void sub_2254009A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254105698);
  _Unwind_Resume(a1);
}

uint64_t re::audio::getPhase1AcousticMeshEventSignpostData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = xmmword_2260FF930;
  *(_OWORD *)(a2 + 40) = xmmword_2260FF930;
  *(_OWORD *)(a2 + 56) = xmmword_2260FF930;
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = (_QWORD *)result;
    for (i = 0; i != v3; ++i)
    {
      v6 = v4[5] + 48 * ((unint64_t)(i + v4[3]) % v4[1]);
      v8[0] = a2;
      v8[1] = a2;
      v8[2] = a2;
      v7 = *(unsigned int *)(v6 + 40);
      if ((_DWORD)v7 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v9 = v8;
      result = ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS6_5audio38getPhase1AcousticMeshEventSignpostDataERKNS6_5QueueINS_7variantIJNS6_12DynamicArrayINS9_23AcousticMeshRemovalDataEEENSC_INSB_IJNS9_16AcousticMeshDataENS9_21AcousticARKitMeshDataEEEEEENSC_INSB_IJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEEEEEEEEE3__0ZNS9_38getPhase1AcousticMeshEventSignpostDataESQ_E3__1ZNS9_38getPhase1AcousticMeshEventSignpostDataESQ_E3__2EEEEEJRKNS0_6__implIJSE_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v7])(&v9);
    }
  }
  return result;
}

uint64_t re::audio::emitPhase1AcousticMeshEventSignposts(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)result)
  {
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
      result = kdebug_trace();
  }
  if (*(_QWORD *)(v1 + 8))
  {
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
      result = kdebug_trace();
  }
  if (*(_QWORD *)(v1 + 16))
  {
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
      return kdebug_trace();
  }
  return result;
}

uint64_t re::audio::getPhase3AcousticMeshEventSignpostData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = xmmword_2260FF930;
  *(_OWORD *)(a2 + 40) = xmmword_2260FF930;
  *(_OWORD *)(a2 + 56) = xmmword_2260FF930;
  v14 = *(_QWORD *)(result + 16);
  v15 = (_QWORD *)result;
  if (v14)
  {
    for (i = 0; i != v14; ++i)
    {
      v4 = (unint64_t)(v15[3] + i) % v15[1];
      v5 = v15[5];
      v6 = *(_QWORD *)(v5 + 48 * v4 + 16);
      if (v6)
      {
        v7 = 0;
        v8 = (_QWORD *)(v5 + 48 * v4);
        v9 = v8 + 3;
        v10 = v8 + 1;
        v11 = v8 + 5;
        do
        {
          v12 = *v11 + 48 * ((unint64_t)(v7 + *v9) % *v10);
          v16[0] = a2;
          v16[1] = a2;
          v16[2] = a2;
          v13 = *(unsigned int *)(v12 + 40);
          if ((_DWORD)v13 == -1)
            std::__throw_bad_variant_access[abi:ne180100]();
          v17 = v16;
          result = ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS6_5audio38getPhase3AcousticMeshEventSignpostDataERKNS6_5QueueINSA_INS_7variantIJNS6_12DynamicArrayINS9_23AcousticMeshRemovalDataEEENSC_INS9_17PHASEOccluderDataEEENSC_INS9_23PHASEOccluderUpdateDataEEEEEEEEEEE3__0ZNS9_38getPhase3AcousticMeshEventSignpostDataESN_E3__1ZNS9_38getPhase3AcousticMeshEventSignpostDataESN_E3__2EEEEEJRKNS0_6__implIJSE_SG_SI_EEEEEEDcOT_DpOT0____fmatrix[v13])(&v17);
          ++v7;
        }
        while (v6 != v7);
      }
    }
  }
  return result;
}

uint64_t re::audio::emitPhase3AcousticMeshEventSignposts(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)result)
  {
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
      result = kdebug_trace();
  }
  if (*(_QWORD *)(v1 + 8))
  {
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
      result = kdebug_trace();
  }
  if (*(_QWORD *)(v1 + 16))
  {
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
      return kdebug_trace();
  }
  return result;
}

uint64_t re::audio::convertToAcousticMeshAddition@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD *v5;

  *(_OWORD *)((char *)a2 + 140) = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  v4[0] = a2;
  v4[1] = a2;
  v2 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = v4;
  return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorIN2re8internal10overloadedIJZNS6_5audio29convertToAcousticMeshAdditionERKNS_7variantIJNS9_22AcousticMeshUpdateDataENS9_27AcousticARKitMeshUpdateDataEEEEE3__0ZNS9_29convertToAcousticMeshAdditionESF_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v5, a1);
}

void sub_225400E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = **result;
    v4 = 40 * v2;
    v5 = *(_QWORD *)(a2 + 32) + 24;
    do
    {
      if (*(_BYTE *)(v5 + 8))
      {
        ++*(_QWORD *)v3;
        v6 = *(double *)v5;
        v7 = *(double *)(v3 + 32);
        if (*(double *)v5 >= *(double *)(v3 + 24))
          v6 = *(double *)(v3 + 24);
        *(double *)(v3 + 24) = v6;
        v8 = *(double *)v5;
        if (v7 >= *(double *)v5)
          v8 = v7;
        *(double *)(v3 + 32) = v8;
      }
      v5 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 32);
    v4 = *(_QWORD *)(*(_QWORD *)result + 8);
    v5 = 160 * v2;
    do
    {
      if (v3 && *(_DWORD *)(v3 + 152) == 1)
      {
        ++*(_QWORD *)(v4 + 8);
        v6 = *(double *)(v3 + 40);
        v7 = *(double *)(v4 + 48);
        if (v6 >= *(double *)(v4 + 40))
          v6 = *(double *)(v4 + 40);
        *(double *)(v4 + 40) = v6;
        v8 = *(double *)(v3 + 40);
        if (v7 >= v8)
          v8 = v7;
        *(double *)(v4 + 48) = v8;
      }
      v3 += 160;
      v5 -= 160;
    }
    while (v5);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_0,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_1,re::audio::getPhase1AcousticMeshEventSignpostData(re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<std::variant<re::audio::AcousticMeshData,re::audio::AcousticARKitMeshData>>,re::DynamicArray<std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData>>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 32);
    v4 = *(_QWORD *)(*(_QWORD *)result + 16);
    v5 = 168 * v2;
    do
    {
      if (v3 && *(_DWORD *)(v3 + 160) == 1)
      {
        ++*(_QWORD *)(v4 + 16);
        v6 = *(double *)(v3 + 48);
        v7 = *(double *)(v4 + 64);
        if (v6 >= *(double *)(v4 + 56))
          v6 = *(double *)(v4 + 56);
        *(double *)(v4 + 56) = v6;
        v8 = *(double *)(v3 + 48);
        if (v7 >= v8)
          v8 = v7;
        *(double *)(v4 + 64) = v8;
      }
      v3 += 168;
      v5 -= 168;
    }
    while (v5);
  }
  return result;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_0,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_1,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = **result;
    v4 = 40 * v2;
    v5 = *(_QWORD *)(a2 + 32) + 24;
    do
    {
      if (*(_BYTE *)(v5 + 8))
      {
        ++*(_QWORD *)v3;
        v6 = *(double *)v5;
        v7 = *(double *)(v3 + 32);
        if (*(double *)v5 >= *(double *)(v3 + 24))
          v6 = *(double *)(v3 + 24);
        *(double *)(v3 + 24) = v6;
        v8 = *(double *)v5;
        if (v7 >= *(double *)v5)
          v8 = v7;
        *(double *)(v3 + 32) = v8;
      }
      v5 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_0,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_1,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)result + 8);
    v4 = 48 * v2;
    v5 = *(_QWORD *)(a2 + 32) + 32;
    do
    {
      if (*(_BYTE *)(v5 + 8))
      {
        ++*(_QWORD *)(v3 + 8);
        v6 = *(double *)v5;
        v7 = *(double *)(v3 + 48);
        if (*(double *)v5 >= *(double *)(v3 + 40))
          v6 = *(double *)(v3 + 40);
        *(double *)(v3 + 40) = v6;
        v8 = *(double *)v5;
        if (v7 >= *(double *)v5)
          v8 = v7;
        *(double *)(v3 + 48) = v8;
      }
      v5 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_0,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_1,re::audio::getPhase3AcousticMeshEventSignpostData(re::Queue<re::Queue<std::variant<re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>>>> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::DynamicArray<re::audio::AcousticMeshRemovalData>,re::DynamicArray<re::audio::PHASEOccluderData>,re::DynamicArray<re::audio::PHASEOccluderUpdateData>> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)result + 16);
    v4 = 56 * v2;
    v5 = *(_QWORD *)(a2 + 32) + 40;
    do
    {
      if (*(_BYTE *)(v5 + 8))
      {
        ++*(_QWORD *)(v3 + 16);
        v6 = *(double *)v5;
        v7 = *(double *)(v3 + 64);
        if (*(double *)v5 >= *(double *)(v3 + 56))
          v6 = *(double *)(v3 + 56);
        *(double *)(v3 + 56) = v6;
        v8 = *(double *)v5;
        if (v7 >= *(double *)v5)
          v8 = v7;
        *(double *)(v3 + 64) = v8;
      }
      v5 += 56;
      v4 -= 56;
    }
    while (v4);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::convertToAcousticMeshAddition(std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&)::$_0,re::audio::convertToAcousticMeshAddition(std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&>(_QWORD **a1, __n128 *a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  char v37;

  v3 = *a1;
  v22 = *a2;
  v4 = (void *)a2[2].n128_u64[0];
  v23 = a2[1].n128_u64[1];
  v24 = v4;
  re::DynamicArray<re::AcousticAbsorptionMaterial>::DynamicArray((uint64_t)&v25, &a2[2].n128_i64[1]);
  re::DynamicArray<re::AcousticScatteringMaterial>::DynamicArray((uint64_t)&v29, (uint64_t *)&a2[5]);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::DynamicArray((uint64_t)&v33, &a2[7].n128_i64[1]);
  v5 = *v3;
  v6 = *(unsigned int *)(*v3 + 152);
  if ((_DWORD)v6 == -1)
    goto LABEL_20;
  if ((_DWORD)v6)
  {
    ((void (*)(char *, _QWORD))off_24ED3D810[v6])(&v37, *v3);
LABEL_20:
    *(_DWORD *)(v5 + 152) = -1;
    std::__variant_detail::__alt<0ul,re::audio::AcousticMeshData>::__alt[abi:ne180100]<re::audio::AcousticMeshData>((__n128 *)v5, &v22);
    *(_DWORD *)(v5 + 152) = 0;
    goto LABEL_21;
  }
  v7 = v22;
  *(_QWORD *)(v5 + 16) = v23;
  *(__n128 *)v5 = v7;
  v8 = v24;
  v24 = 0;
  v9 = *(void **)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v8;

  if ((__n128 *)v5 == &v22)
    goto LABEL_21;
  v11 = *(_QWORD *)(v5 + 32);
  if (v11)
    v12 = v25 == 0;
  else
    v12 = 1;
  if (v12 || v11 == v25)
  {
    *(_QWORD *)(v5 + 32) = v25;
    v25 = v11;
    v14 = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(v5 + 40) = v26;
    v16 = *(_QWORD *)(v5 + 64);
    v15 = *(_QWORD *)(v5 + 72);
    *(_QWORD *)(v5 + 64) = v28;
    v26 = v14;
    v28 = v16;
    ++v27;
    ++*(_DWORD *)(v5 + 56);
    if (v15 && v29 && v15 != v29)
      goto LABEL_22;
    *(_QWORD *)(v5 + 72) = v29;
    v29 = v15;
    v17 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v5 + 80) = v30;
    v19 = *(_QWORD *)(v5 + 104);
    v18 = *(_QWORD *)(v5 + 112);
    *(_QWORD *)(v5 + 104) = v32;
    v30 = v17;
    v32 = v19;
    ++v31;
    ++*(_DWORD *)(v5 + 96);
    if (v18 && v33 && v18 != v33)
      goto LABEL_23;
    *(_QWORD *)(v5 + 112) = v33;
    v33 = v18;
    v20 = *(_OWORD *)(v5 + 120);
    *(_OWORD *)(v5 + 120) = v34;
    v34 = v20;
    v21 = *(_QWORD *)(v5 + 144);
    *(_QWORD *)(v5 + 144) = v36;
    v36 = v21;
    ++v35;
    ++*(_DWORD *)(v5 + 136);
LABEL_21:
    re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)&v33);
    re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)&v29);
    re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)&v25);

    return;
  }
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
  _os_crash();
  __break(1u);
LABEL_22:
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
  _os_crash();
  __break(1u);
LABEL_23:
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
  _os_crash();
  __break(1u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::audio::convertToAcousticMeshAddition(std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&)::$_0,re::audio::convertToAcousticMeshAddition(std::variant<re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audio::AcousticMeshUpdateData,re::audio::AcousticARKitMeshUpdateData> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;

  v3 = *a1;
  v5 = *a2;
  v4 = a2[1];
  v6 = a2[3];
  v7 = (id)a2[4];
  v8 = v7;
  v9 = *((_BYTE *)a2 + 40);
  v10 = a2[6];
  v11 = *(_QWORD *)(v3 + 8);
  v12 = *(unsigned int *)(v11 + 152);
  if ((_DWORD)v12 != -1)
  {
    if ((_DWORD)v12 == 1)
    {
      *(_QWORD *)v11 = v5;
      *(_QWORD *)(v11 + 8) = v4;
      v13 = *(void **)(v11 + 24);
      *(_QWORD *)(v11 + 16) = v6;
      *(_QWORD *)(v11 + 24) = v7;

      *(_BYTE *)(v11 + 32) = v9;
      *(_QWORD *)(v11 + 40) = v10;
      return;
    }
    ((void (*)(char *, _QWORD))off_24ED3D810[v12])(&v14, *(_QWORD *)(v3 + 8));
  }
  *(_QWORD *)v11 = v5;
  *(_QWORD *)(v11 + 8) = v4;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)(v11 + 24) = v8;
  *(_BYTE *)(v11 + 32) = v9;
  *(_QWORD *)(v11 + 40) = v10;
  *(_DWORD *)(v11 + 152) = 1;
}

__n128 std::__variant_detail::__alt<0ul,re::audio::AcousticMeshData>::__alt[abi:ne180100]<re::audio::AcousticMeshData>(__n128 *a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  v3 = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  a1[1].n128_u64[1] = v3;
  a1[2].n128_u64[0] = 0;
  a1[2].n128_u64[1] = 0;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u32[2] = 0;
  v4 = a2[2].n128_u64[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a1[2].n128_u64[1] = v4;
  a2[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = 0;
  v5 = a1[3].n128_u64[0];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = v5;
  v6 = a1[4].n128_u64[0];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = v6;
  ++a2[3].n128_u32[2];
  ++a1[3].n128_u32[2];
  a1[6].n128_u64[1] = 0;
  a1[5].n128_u64[0] = 0;
  a1[5].n128_u64[1] = 0;
  a1[4].n128_u64[1] = 0;
  a1[6].n128_u32[0] = 0;
  v7 = a2[5].n128_u64[0];
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  a1[5].n128_u64[0] = v7;
  a2[4].n128_u64[1] = 0;
  a2[5].n128_u64[0] = 0;
  v8 = a1[5].n128_u64[1];
  a1[5].n128_u64[1] = a2[5].n128_u64[1];
  a2[5].n128_u64[1] = v8;
  v9 = a1[6].n128_u64[1];
  a1[6].n128_u64[1] = a2[6].n128_u64[1];
  a2[6].n128_u64[1] = v9;
  ++a2[6].n128_u32[0];
  ++a1[6].n128_u32[0];
  a1[9].n128_u64[0] = 0;
  a1[7].n128_u64[1] = 0;
  a1[8].n128_u64[0] = 0;
  a1[7].n128_u64[0] = 0;
  a1[8].n128_u32[2] = 0;
  v10 = a2[7].n128_u64[1];
  a1[7].n128_u64[0] = a2[7].n128_u64[0];
  a1[7].n128_u64[1] = v10;
  a2[7].n128_u64[0] = 0;
  a2[7].n128_u64[1] = 0;
  v11 = a1[8].n128_u64[0];
  a1[8].n128_u64[0] = a2[8].n128_u64[0];
  a2[8].n128_u64[0] = v11;
  v12 = a1[9].n128_u64[0];
  a1[9].n128_u64[0] = a2[9].n128_u64[0];
  a2[9].n128_u64[0] = v12;
  ++a2[8].n128_u32[2];
  ++a1[8].n128_u32[2];
  return result;
}

_QWORD *re::audio::SoundAssetRegistrarFactory::createRegistrar@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_24ED3F530;
  *a1 = result;
  return result;
}

_QWORD *re::audio::REPHASESoundPrepareState::create@<X0>(re::audio::REPHASESoundPrepareState *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v12;

  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  v4 = MEMORY[0x24BDAEE00];
  v5 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  *(_OWORD *)(v3 + 112) = *MEMORY[0x24BDAEE00];
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 128) = v5;
  *(_OWORD *)(v3 + 144) = 0u;
  v6 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 160) = v6;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_DWORD *)(v3 + 204) = 1065353216;
  *(_QWORD *)(v3 + 216) = 0x3FF0000000000000;
  v12 = MEMORY[0x24BDC0D88];
  *(_QWORD *)(v3 + 196) = _D0;
  *(_OWORD *)(v3 + 224) = *(_OWORD *)v12;
  *(_QWORD *)(v3 + 240) = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v3 + 280) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_BYTE *)(v3 + 296) = 0;
  *(_DWORD *)(v3 + 312) = 1;
  *(_QWORD *)(v3 + 320) = 0x41F000003E051EB8;
  *(_QWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 336) = 0;
  *(_BYTE *)(v3 + 344) = 0;
  return std::shared_ptr<re::audio::REPHASESoundPrepareState>::shared_ptr[abi:ne180100]<re::audio::REPHASESoundPrepareState,void>(a2, (_QWORD *)v3);
}

void re::audio::REPHASESoundPrepareState::setCompletionHandler(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = ___ZN2re5audio24REPHASESoundPrepareState20setCompletionHandlerEU13block_pointerFvP7NSErrorE_block_invoke;
  v7[3] = &unk_24ED3D828;
  v8 = v3;
  v9 = a1;
  v4 = v3;
  v5 = _Block_copy(v7);
  v6 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v5;

}

void ___ZN2re5audio24REPHASESoundPrepareState20setCompletionHandlerEU13block_pointerFvP7NSErrorE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v3 + 344))
  {
    if (!v4)
      *(_BYTE *)(v3 + 344) = 1;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_2254017B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id re::audio::REPHASESoundPrepareState::getChannelLayout(re::audio::REPHASESoundPrepareState *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    objc_msgSend(v2, "channelLayout");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB17E8]), "initWithLayoutTag:", *((unsigned int *)this + 46));
  }
  return v3;
}

void sub_2254018B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_225401AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_225401C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_225401E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_225402030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_225402154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_225402684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27)
{
  void *v27;
  uint64_t v28;

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v28 - 136);
  _Unwind_Resume(a1);
}

void sub_2254029E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void re::MultipleCallbackManager<REPHASESoundEvent>::complete(unint64_t *a1, void *a2)
{
  re *v4;
  re *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  id *v9;
  id v10;
  NSObject *v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = v4;
  do
  {
    v6 = __ldaxr(a1);
    v7 = v6 - 1;
  }
  while (__stlxr(v6 - 1, a1));
  if (v6 <= 0)
  {
    v11 = *re::audioLogObjects(v4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = a1[4];
      v15 = 138412290;
      v16 = v14;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "callback manager with context %@ called too many times", (uint8_t *)&v15, 0xCu);
    }
    do
      v12 = __ldaxr(a1);
    while (__stlxr(v12 + 1, a1));
  }
  else
  {
    objc_storeStrong((id *)(a1[1] + 8 * v7), a2);
    if (!v7)
    {
      v8 = (id *)a1[1];
      v9 = (id *)a1[2];
      while (1)
      {
        if (v8 == v9)
        {
          v13 = 0;
          (*(void (**)(void))(a1[5] + 16))();
          goto LABEL_15;
        }
        v10 = *v8;
        if (v10)
          break;
        ++v8;
      }
      v13 = v10;
      (*(void (**)(void))(a1[5] + 16))();
LABEL_15:

    }
  }

}

void sub_225402B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c77_ZTSNSt3__110shared_ptrIN2re23MultipleCallbackManagerI17REPHASESoundEventEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c77_ZTSNSt3__110shared_ptrIN2re23MultipleCallbackManagerI17REPHASESoundEventEEEE(uint64_t a1)
{
  return std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](a1 + 56);
}

void sub_225402D18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c77_ZTSNSt3__110shared_ptrIN2re23MultipleCallbackManagerI17REPHASESoundEventEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c77_ZTSNSt3__110shared_ptrIN2re23MultipleCallbackManagerI17REPHASESoundEventEEEE(uint64_t a1)
{
  return std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](a1 + 40);
}

void sub_225402DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)REPHASESoundEvent;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_225403128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_2254033C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_225403918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, id location)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_22540404C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_225404574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22540467C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2254047FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_225404A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  void *v17;
  id *v18;

  objc_destroyWeak(v18);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225404D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_225404DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_225404E14(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225405BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, id *location, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,char a42,uint64_t a43,id a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  objc_destroyWeak(location);
  objc_destroyWeak(&a44);

  _Unwind_Resume(a1);
}

void sub_22540612C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va1);

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2254062A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_225406320(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225406384(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2254063D0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2254064EC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2254065C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22540687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void std::deque<REPHASESoundEventCommandState>::emplace_back<REPHASESoundEventCommand>(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<REPHASESoundEventCommandState>::__add_back_capacity(a1);
    v7 = a1[5];
    v5 = a1[1];
    v8 = a1[4] + v7;
  }
  v9 = *(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8;
  *(_DWORD *)v9 = *a2;
  *(_QWORD *)(v9 + 8) = 0;
  a1[5] = v7 + 1;
}

void std::deque<REPHASESoundEventCommandState>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v28);
  v31 = v30;
  v32 = operator new(0x1000uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_2254070F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<REPHASESoundEventCommandState *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

_QWORD *std::shared_ptr<re::audio::REPHASESoundPrepareState>::shared_ptr[abi:ne180100]<re::audio::REPHASESoundPrepareState,void>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24ED3DA08;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  std::shared_ptr<re::audio::REPHASESoundPrepareState>::__enable_weak_this[abi:ne180100]<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState,void>((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_2254071C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<re::audio::REPHASESoundPrepareState>::reset[abi:ne180100]((id **)va, 0);
  _Unwind_Resume(a1);
}

void std::shared_ptr<re::audio::REPHASESoundPrepareState>::__enable_weak_this[abi:ne180100]<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_pointer<re::audio::REPHASESoundPrepareState *,std::shared_ptr<re::audio::REPHASESoundPrepareState>::__shared_ptr_default_delete<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState>,std::allocator<re::audio::REPHASESoundPrepareState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

id *std::__shared_ptr_pointer<re::audio::REPHASESoundPrepareState *,std::shared_ptr<re::audio::REPHASESoundPrepareState>::__shared_ptr_default_delete<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState>,std::allocator<re::audio::REPHASESoundPrepareState>>::__on_zero_shared(uint64_t a1)
{
  id *result;

  result = *(id **)(a1 + 24);
  if (result)
  {
    re::audio::REPHASESoundPrepareState::~REPHASESoundPrepareState(result);
    JUMPOUT(0x2276933B8);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<re::audio::REPHASESoundPrepareState *,std::shared_ptr<re::audio::REPHASESoundPrepareState>::__shared_ptr_default_delete<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState>,std::allocator<re::audio::REPHASESoundPrepareState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void re::audio::REPHASESoundPrepareState::~REPHASESoundPrepareState(id *this)
{
  id v2;
  std::__shared_weak_count *v3;

  if (*((_BYTE *)this + 272) && *((char *)this + 271) < 0)
    operator delete(this[31]);

  v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }

  v3 = (std::__shared_weak_count *)this[1];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

id *std::unique_ptr<re::audio::REPHASESoundPrepareState>::reset[abi:ne180100](id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    re::audio::REPHASESoundPrepareState::~REPHASESoundPrepareState(result);
    JUMPOUT(0x2276933B8);
  }
  return result;
}

void std::__shared_ptr_emplace<re::MultipleCallbackManager<REPHASESoundEvent>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED3DA80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::MultipleCallbackManager<REPHASESoundEvent>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED3DA80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

void std::__shared_ptr_emplace<re::MultipleCallbackManager<REPHASESoundEvent>>::__on_zero_shared(void **a1)
{
  void **v2;

  v2 = a1 + 4;
  std::vector<NSError * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<NSError * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

re::REPHASEMaterialCache *re::REPHASEMaterialCache::REPHASEMaterialCache(re::REPHASEMaterialCache *this)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  float v7;
  float v8;
  int v9;

  *(_DWORD *)this = 1036831949;
  *((_QWORD *)this + 1) = 0;
  v2 = objc_alloc_init(MEMORY[0x24BDBCE40]);
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;

  objc_msgSend(*((id *)this + 1), "setTotalCostLimit:", 200);
  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("com.apple.re.audio.meshConfidenceThreshold"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "floatValue");
    if (v7 >= 0.0)
    {
      objc_msgSend(v6, "floatValue");
      if (v8 <= 1.0)
      {
        objc_msgSend(v6, "floatValue");
        *(_DWORD *)this = v9;
      }
    }
  }

  return this;
}

void sub_2254075B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id re::REPHASEMaterialCache::getMaterials(re::REPHASEMaterialCache *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  PHASEEngine *isInputValid;
  const AcousticSoundReductionMaterial *v10;
  PHASEEngine *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  NSObject *v17;
  void *v18;
  void *v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const AcousticScatteringMaterial *v25;
  PHASEEngine *v26;
  uint64_t v27;
  const AcousticSoundReductionMaterial *v28;
  re *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  PHASEEngine *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  unint64_t v41;
  void *v42;
  uint8_t *v43;
  uint64_t v44;
  NSObject *v45;
  PHASEEngine *v46;
  uint64_t v47;
  void *v48;
  const AcousticScatteringMaterial *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  AcousticAbsorptionMaterial *v55;
  void *v56;
  _BYTE v57[12];
  __int16 v58;
  int v59;
  __int16 v60;
  unint64_t v61;
  __int16 v62;
  unint64_t v63;
  uint8_t buf[16];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  isInputValid = a2;
  v11 = isInputValid;
  v12 = *(_QWORD *)(a3 + 16);
  if (!v12)
    goto LABEL_11;
  v13 = *(_QWORD *)(a4 + 16);
  if (!v13)
    goto LABEL_11;
  v14 = *(_QWORD *)(a5 + 16);
  v15 = v12 == v14 && v12 == v13;
  if (!v15 || v14 == 0)
    goto LABEL_11;
  v21 = 0;
  LOBYTE(isInputValid) = 1;
  do
  {
    v22 = 112 * v21;
    while ((isInputValid & 1) == 0)
    {
      isInputValid = 0;
      ++v21;
      v22 += 112;
      if (v12 <= v21)
        goto LABEL_11;
    }
    v23 = *(_QWORD *)(a4 + 16);
    if (v23 <= v21)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v57 = 136315906;
      *(_QWORD *)&v57[4] = "operator[]";
      v58 = 1024;
      v59 = 797;
      v60 = 2048;
      v61 = v21;
      v62 = 2048;
      v63 = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v57 = 136315906;
      *(_QWORD *)&v57[4] = "operator[]";
      v58 = 1024;
      v59 = 797;
      v60 = 2048;
      v61 = v21;
      v62 = 2048;
      v63 = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v57 = 136315906;
      *(_QWORD *)&v57[4] = "operator[]";
      v58 = 1024;
      v59 = 797;
      v60 = 2048;
      v61 = v23;
      v62 = 2048;
      v63 = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v57 = 136315906;
      *(_QWORD *)&v57[4] = "operator[]";
      v58 = 1024;
      v59 = 797;
      v60 = 2048;
      v61 = v54;
      v62 = 2048;
      v63 = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v23 = *(_QWORD *)(a5 + 16);
    if (v23 <= v21)
      goto LABEL_44;
    v12 = *(_QWORD *)(a3 + 16);
    ++v21;
  }
  while (v12 > v21);
  if ((isInputValid & 1) != 0)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_QWORD *)(a3 + 16))
    {
      v24 = 0;
      v23 = 0;
      while (1)
      {
        v21 = *(_QWORD *)(a4 + 16);
        if (v21 <= v23)
          goto LABEL_45;
        v21 = *(_QWORD *)(a5 + 16);
        v54 = v23;
        if (v21 <= v23)
          goto LABEL_46;
        v52 = *(_QWORD *)(a3 + 32);
        v51 = *(_QWORD *)(a4 + 32);
        v55 = (AcousticAbsorptionMaterial *)(v51 + v24);
        v25 = (const AcousticScatteringMaterial *)(*(_QWORD *)(a5 + 32) + v24);
        v26 = v11;
        *(_QWORD *)v57 = v26;
        v49 = v25;
        v50 = v52 + v24;
        v27 = v51 + v24;
        if ((v29 & 1) == 0)
        {
          v45 = *re::audioLogObjects(v29);
          v41 = v54;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_224FE9000, v45, OS_LOG_TYPE_ERROR, "REPHASEMaterialCache::getMaterials was called with invalid arguments. Returning the default material.", buf, 2u);
          }
          v46 = v26;
          re::REPHASEMaterialCache::defaultMaterial(a1, v26);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_41;
        }
        v30 = v52 + v24;
        v53 = *(_QWORD *)(v52 + v24 + 8);
        v47 = *(_QWORD *)(v30 + 16);
        v48 = (void *)MEMORY[0x24BDD17C8];
        v31 = v24;
        v33 = *(_QWORD *)(v27 + 8);
        v32 = *(_QWORD *)(v27 + 16);
        v34 = v26;
        v35 = v31;
        v36 = -[PHASEEngine hash](v34, "hash");
        v37 = v51 + v35 + 9;
        if ((v33 & 1) != 0)
          v37 = v32;
        v38 = v30 + 9;
        if ((v53 & 1) != 0)
          v38 = v47;
        objc_msgSend(v48, "stringWithFormat:", CFSTR("Absorption: %s. Scattering: %s. Engine hash: %lu."), v38, v37, v36);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = v35;
        *((_QWORD *)&v65 + 1) = 0;
        v40 = operator new(0x30uLL);
        *v40 = &off_24ED3DAD0;
        v40[1] = a1;
        v40[2] = v50;
        v40[3] = v55;
        v40[4] = v49;
        v40[5] = v57;
        *((_QWORD *)&v65 + 1) = v40;
        re::REPHASEMaterialCache::getFromCacheOrCreateAndCache((uint64_t)a1, v39, (uint64_t)buf);
        v41 = v54;
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = (uint8_t *)*((_QWORD *)&v65 + 1);
        if (*((uint8_t **)&v65 + 1) == buf)
          break;
        if (*((_QWORD *)&v65 + 1))
        {
          v44 = 5;
LABEL_39:
          (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
        }

        v46 = *(PHASEEngine **)v57;
LABEL_41:

        objc_msgSend(v19, "addObject:", v42);
        v23 = v41 + 1;
        v24 += 112;
        if (*(_QWORD *)(a3 + 16) <= v23)
          goto LABEL_14;
      }
      v43 = buf;
      v44 = 4;
      goto LABEL_39;
    }
  }
  else
  {
LABEL_11:
    v17 = *re::audioLogObjects((re *)isInputValid);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "REPHASEMaterialCache::getMaterials was called with invalid arguments. Returning the default material.", buf, 2u);
    }
    re::REPHASEMaterialCache::defaultMaterial(a1, v11);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = v18;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v56, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

  }
LABEL_14:

  return v19;
}

void sub_225407C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id re::REPHASEMaterialCache::defaultMaterial(re::REPHASEMaterialCache *this, PHASEEngine *a2)
{
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  PHASEEngine *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Default material. Engine hash: %lu."), -[PHASEEngine hash](v8, "hash"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = &off_24ED3DC20;
  v9[1] = &v8;
  v10 = v9;
  re::REPHASEMaterialCache::getFromCacheOrCreateAndCache((uint64_t)this, v3, (uint64_t)v9);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return v4;
}

void sub_225407E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  void *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::isInputValid(_anonymous_namespace_ *this, const AcousticAbsorptionMaterial *a2, const AcousticScatteringMaterial *a3, const AcousticSoundReductionMaterial *a4)
{
  uint64_t v4;
  BOOL v8;
  uint64_t v9;
  NSObject *v13;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 6);
  v8 = v4 == *((_QWORD *)a2 + 6)
    && v4 == *((_QWORD *)a3 + 6)
    && v4 == *((_QWORD *)this + 11)
    && v4 == *((_QWORD *)a2 + 11)
    && v4 == *((_QWORD *)a3 + 11);
  v9 = v8;
  if (!v8)
  {
    v13 = *re::audioLogObjects(this);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      if ((*((_QWORD *)this + 1) & 1) != 0)
        v15 = (char *)*((_QWORD *)this + 2);
      else
        v15 = (char *)this + 9;
      if ((*((_QWORD *)a2 + 1) & 1) != 0)
        v16 = (char *)*((_QWORD *)a2 + 2);
      else
        v16 = (char *)a2 + 9;
      if ((*((_QWORD *)a3 + 1) & 1) != 0)
        v17 = (char *)*((_QWORD *)a3 + 2);
      else
        v17 = (char *)a3 + 9;
      v18 = 136315650;
      v19 = v15;
      v20 = 2080;
      v21 = v16;
      v22 = 2080;
      v23 = v17;
      _os_log_fault_impl(&dword_224FE9000, v13, OS_LOG_TYPE_FAULT, "Absorption %s, scattering %s, and sound reduction %s materials have inconsistent frequency counts and/or coefficients count.", (uint8_t *)&v18, 0x20u);
    }
  }
  return v9;
}

id re::REPHASEMaterialCache::getFromCacheOrCreateAndCache(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 8), "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v7 = *(_QWORD *)(a3 + 24);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
      objc_msgSend(*(id *)(a1 + 8), "setObject:forKey:cost:", v6, v5, 1);
  }
  v8 = v6;

  return v8;
}

void sub_22540804C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id re::REPHASEMaterialCache::getMaterials(re::REPHASEMaterialCache *this, PHASEEngine *a2, MDLMesh *a3)
{
  MDLMesh *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  PHASEEngine *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  re *v21;
  float v22;
  NSObject *v23;
  void *v24;
  float v25;
  float v26;
  float v27;
  void *v28;
  uint8_t *v29;
  void *v30;
  uint8_t *v31;
  uint64_t v32;
  MDLMesh *v34;
  id obj;
  id v36;
  PHASEEngine *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  id v42;
  id v43;
  PHASEEngine *v44;
  uint8_t v45[128];
  uint8_t buf[24];
  uint8_t *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v37 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x24BDBCEB8];
  v34 = v5;
  -[MDLMesh submeshes](v5, "submeshes");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "arrayWithCapacity:", objc_msgSend(v7, "count"));
  v36 = (id)objc_claimAutoreleasedReturnValue();

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  -[MDLMesh submeshes](v34, "submeshes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  obj = v8;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v38, v45, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v39;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v39 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v11);
        v13 = v37;
        v44 = v13;
        v14 = v12;
        objc_msgSend(v14, "material");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "propertyNamed:", CFSTR("ARMeshGeometryClassification"));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = v16;

        objc_msgSend(v14, "material");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "propertyNamed:", CFSTR("ARMeshGeometryMaterial"));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = v18;

        objc_msgSend(v14, "material");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "propertyNamed:", CFSTR("ARMeshGeometryConfidence"));
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v16 || !v18)
        {
          v23 = *re::audioLogObjects(v21);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "REPHASEMaterialCache::getMaterial was called for a submesh missing ARMeshGeometryClassification and/or ARMeshGeometryMaterial. Returning the default material.", buf, 2u);
          }
LABEL_18:
          re::REPHASEMaterialCache::defaultMaterial(this, v13);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_22;
        }
        if (v20)
          objc_msgSend(v20, "floatValue");
        else
          v22 = 1.0;
        if (v22 <= *(float *)this)
          goto LABEL_18;
        v24 = (void *)MEMORY[0x24BDD17C8];
        objc_msgSend(v16, "floatValue");
        v26 = v25;
        objc_msgSend(v18, "floatValue");
        objc_msgSend(v24, "stringWithFormat:", CFSTR("ARMeshGeometryClassification: %.02f. ARMeshGeometryMaterial: %.02f. Engine hash: %lu."), v26, v27, -[PHASEEngine hash](v13, "hash"));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = 0;
        v29 = (uint8_t *)operator new(0x28uLL);
        *(_QWORD *)v29 = &off_24ED3DB60;
        *((_QWORD *)v29 + 1) = &v43;
        *((_QWORD *)v29 + 2) = &v42;
        *((_QWORD *)v29 + 3) = &v44;
        *((_QWORD *)v29 + 4) = this;
        v47 = v29;
        re::REPHASEMaterialCache::getFromCacheOrCreateAndCache((uint64_t)this, v28, (uint64_t)buf);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = v47;
        if (v47 == buf)
        {
          v31 = buf;
          v32 = 4;
          goto LABEL_20;
        }
        if (v47)
        {
          v32 = 5;
LABEL_20:
          (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
        }

LABEL_22:
        if (v30)
          objc_msgSend(v36, "addObject:", v30);

        ++v11;
      }
      while (v9 != v11);
      v8 = obj;
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v45, 16);
    }
    while (v9);
  }

  return v36;
}

void sub_2254083FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

id re::REPHASEMaterialCache::createSubbands(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;
  id v6;
  double v7;
  double v8;
  void *v9;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      v6 = objc_alloc(MEMORY[0x24BDE32F8]);
      if (*(_QWORD *)(a1 + 16) <= v5)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(_QWORD *)(a2 + 16) <= v5)
        goto LABEL_8;
      LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v5);
      LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v5);
      v9 = (void *)objc_msgSend(v6, "initWithFrequency:value:", v7, v8);
      objc_msgSend(v4, "addObject:", v9);

      ++v5;
    }
    while (*(_QWORD *)(a1 + 16) > v5);
  }
  return v4;
}

void sub_225408764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24ED3DAD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24ED3DAD0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::operator()(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  re::REPHASEMaterialCache::createSubbands(*(_QWORD *)(a1 + 16) + 32, *(_QWORD *)(a1 + 16) + 72);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  re::REPHASEMaterialCache::createSubbands(*(_QWORD *)(a1 + 24) + 32, *(_QWORD *)(a1 + 24) + 72);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  re::REPHASEMaterialCache::createSubbands(*(_QWORD *)(a1 + 32) + 32, *(_QWORD *)(a1 + 32) + 72);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_alloc(MEMORY[0x24BDE3288]);
  v6 = **(_QWORD **)(a1 + 40);
  v7 = objc_alloc(MEMORY[0x24BDE32D0]);
  LODWORD(v8) = 1036831949;
  v9 = (void *)objc_msgSend(v7, "initWithAttenuationCoefficients:measuredDepth:", v4, v8);
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDE3220]), "initWithAbsorptionCoefficients:", v2);
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDE32B8]), "initWithScatteringCoefficients:", v3);
  v12 = (void *)objc_msgSend(v5, "initWithEngine:soundReductionIndex:absorptionData:scatteringData:", v6, v9, v10, v11);

  return v12;
}

void sub_225408938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,re::AcousticAbsorptionMaterial const&,re::AcousticScatteringMaterial const&,re::AcousticSoundReductionMaterial const&)::$_0>,PHASEMaterial * ()(void)>::target_type()
{
}

void std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24ED3DB60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED3DB60;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::operator()(uint64_t a1)
{
  re::REPHASEMaterialCache *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint8_t v11[8];
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(re::REPHASEMaterialCache **)(a1 + 32);
  v12[0] = *MEMORY[0x24BDE3300];
  v3 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(**(id **)(a1 + 8), "floatValue");
  objc_msgSend(v3, "numberWithFloat:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v12[1] = *MEMORY[0x24BDE3308];
  v13[0] = v4;
  v5 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(**(id **)(a1 + 16), "floatValue");
  objc_msgSend(v5, "numberWithFloat:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v13[1] = v6;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDE3288]), "initWithEngine:semantics:", **(_QWORD **)(a1 + 24), v7);
  if (!v8)
  {
    v9 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "REPHASEMaterialCache::getMaterial failed to initialize a PHASEMaterial with the provided semantics. Returning the default material.", v11, 2u);
    }
    re::REPHASEMaterialCache::defaultMaterial(v2, **(PHASEEngine ***)(a1 + 24));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v8;
}

void sub_225408BC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0,std::allocator<re::REPHASEMaterialCache::getMaterial(PHASEEngine *,MDLSubmesh *)::$_0>,PHASEMaterial * ()(void)>::target_type()
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED3DC20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED3DC20;
  a2[1] = v2;
  return result;
}

id std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v2 = *MEMORY[0x24BDE3308];
  v6[0] = *MEMORY[0x24BDE3300];
  v6[1] = v2;
  v7[0] = &unk_24EDB7B60;
  v7[1] = &unk_24EDB7B60;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDE3288]), "initWithEngine:semantics:", **(_QWORD **)(a1 + 8), v3);

  return v4;
}

void sub_225408DC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0,std::allocator<re::REPHASEMaterialCache::defaultMaterial(PHASEEngine *)::$_0>,PHASEMaterial * ()(void)>::target_type()
{
}

_QWORD *re::nameForAudioManagerStateMachineEvent@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_24ED3DC90[a1]);
}

void removeOldLogsAtMaxCapacity(unsigned int a1, unsigned int a2, uint64_t a3, double a4, double a5)
{
  unsigned int v8;
  char **v9;
  uint64_t i;
  uint64_t *v11;
  char *v12;
  char **v13;
  char *v14;
  BOOL v15;
  double v16;
  uint64_t *v17;
  uint64_t *v18;
  char **v19;
  char *v20[2];
  uint64_t *v21;

  if (a1 > a2 && *(_QWORD *)(a3 + 24) == a1)
  {
    v8 = a2;
    v9 = v20;
    v20[0] = 0;
    v20[1] = 0;
    v19 = v20;
    for (i = a3 + 16; ; std::string::operator=((std::string *)(v11 + 5), (const std::string *)(i + 16)))
    {
      i = *(_QWORD *)i;
      if (!i)
        break;
      v21 = (uint64_t *)(i + 40);
      v11 = std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>((uint64_t **)&v19, (double *)(i + 40), (uint64_t)&std::piecewise_construct, &v21);
    }
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::clear(a3);
    if (v8 && v20 != v19)
    {
      do
      {
        v12 = *v9;
        v13 = v9;
        if (*v9)
        {
          do
          {
            v14 = v12;
            v12 = (char *)*((_QWORD *)v12 + 1);
          }
          while (v12);
        }
        else
        {
          do
          {
            v14 = v13[2];
            v15 = *(_QWORD *)v14 == (_QWORD)v13;
            v13 = (char **)v14;
          }
          while (v15);
        }
        v16 = *((double *)v14 + 4);
        if (a4 - v16 >= a5)
          break;
        v21 = (uint64_t *)(v14 + 40);
        *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v14 + 40, (uint64_t)&std::piecewise_construct, (__int128 **)&v21)+ 5) = v16;
        v17 = (uint64_t *)*v9;
        if (*v9)
        {
          do
          {
            v18 = v17;
            v17 = (uint64_t *)v17[1];
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (uint64_t *)v9[2];
            v15 = *v18 == (_QWORD)v9;
            v9 = (char **)v18;
          }
          while (v15);
        }
        if (!--v8)
          break;
        v9 = (char **)v18;
      }
      while (v18 != (uint64_t *)v19);
    }
    std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::destroy((uint64_t)&v19, v20[0]);
  }
}

void sub_225408FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t re::audio::throttledLog(os_log_type_t a1, __int128 *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  re *v6;
  uint64_t *v7;
  double Current;
  unsigned __int8 *v9;
  uint64_t v10;
  __int128 *v12;

  if ((v4 & 1) == 0
  {
    re::audio::throttledLog(os_log_type_t,std::string const&)::previousLogs = 0u;
    unk_255827978 = 0u;
    dword_255827988 = 1065353216;
  }
  if ((v5 & 1) == 0
  {
    re::audio::throttledLog(os_log_type_t,std::string const&)::logLock = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&re::audio::throttledLog(os_log_type_t,std::string const&)::logLock);
  v7 = re::audioLogObjects(v6);
  if (os_log_type_enabled((os_log_t)*v7, a1)
    && ((Current = CFAbsoluteTimeGetCurrent(),
         (v9 = std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>(&re::audio::throttledLog(os_log_type_t,std::string const&)::previousLogs, (unsigned __int8 *)a2)) == 0)|| Current - *((double *)v9 + 5) >= 2.0))
  {
    v12 = a2;
    *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&re::audio::throttledLog(os_log_type_t,std::string const&)::previousLogs, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v12)+ 5) = Current;
    removeOldLogsAtMaxCapacity(0x64u, 0xAu, (uint64_t)&re::audio::throttledLog(os_log_type_t,std::string const&)::previousLogs, Current, 2.0);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&re::audio::throttledLog(os_log_type_t,std::string const&)::logLock);
  return v10;
}

